1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.map_merged_crm_account","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.map_merged_crm_account\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.map_merged_crm_account","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.map_merged_crm_account\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.map_merged_crm_account","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
3e:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T78c,WITH last_account_snapshot AS (

    SELECT *
    FROM {{ ref('sfdc_account_snapshots_source') }}
    WHERE dbt_valid_to IS NULL

), unioned AS (


    SELECT 
      account_id,
      master_record_id,
      is_deleted
    FROM {{ ref('sfdc_account_source') }}

    UNION ALL

    /*
      Union in accounts which have been hard deleted but are captured in the snapshot models for completeness. 
    */

    SELECT 
      last_account_snapshot.account_id,
      last_account_snapshot.master_record_id,
      last_account_snapshot.is_deleted
    FROM last_account_snapshot
    LEFT JOIN {{ ref('sfdc_account_source') }}
      ON last_account_snapshot.account_id = sfdc_account_source.account_id
    WHERE sfdc_account_source.account_id IS NULL

), recursive_cte(account_id, master_record_id, is_deleted, lineage) AS (

    SELECT
      account_id,
      master_record_id,
      is_deleted,
      TO_ARRAY(account_id) AS lineage
    FROM unioned
    WHERE master_record_id IS NULL

    UNION ALL

    SELECT
      iter.account_id,
      iter.master_record_id,
      iter.is_deleted,
      ARRAY_INSERT(anchor.lineage, 0, iter.account_id)  AS lineage
    FROM recursive_cte AS anchor
    INNER JOIN unioned AS iter
      ON iter.master_record_id = anchor.account_id

), final AS (

    SELECT
      account_id                                         AS sfdc_account_id,
      lineage[ARRAY_SIZE(lineage) - 1]::VARCHAR          AS merged_account_id,
      is_deleted,
      IFF(merged_account_id != account_id, TRUE, FALSE)  AS is_merged,
      IFF(is_deleted AND NOT is_merged, TRUE, FALSE)     AS deleted_not_merged,
      --return final common dimension mapping,
      IFF(deleted_not_merged, '-1', merged_account_id)   AS dim_crm_account_id
    FROM recursive_cte

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mcooperDD",
    updated_by="@michellecooper",
    created_date="2020-11-23",
    updated_date="2023-04-13",
) }}11:T87b,WITH last_account_snapshot AS (

    SELECT *
    FROM "PROD".legacy.sfdc_account_snapshots_source
    WHERE dbt_valid_to IS NULL

), unioned AS (


    SELECT 
      account_id,
      master_record_id,
      is_deleted
    FROM "PREP".sfdc.sfdc_account_source

    UNION ALL

    /*
      Union in accounts which have been hard deleted but are captured in the snapshot models for completeness. 
    */

    SELECT 
      last_account_snapshot.account_id,
      last_account_snapshot.master_record_id,
      last_account_snapshot.is_deleted
    FROM last_account_snapshot
    LEFT JOIN "PREP".sfdc.sfdc_account_source
      ON last_account_snapshot.account_id = sfdc_account_source.account_id
    WHERE sfdc_account_source.account_id IS NULL

), recursive_cte(account_id, master_record_id, is_deleted, lineage) AS (

    SELECT
      account_id,
      master_record_id,
      is_deleted,
      TO_ARRAY(account_id) AS lineage
    FROM unioned
    WHERE master_record_id IS NULL

    UNION ALL

    SELECT
      iter.account_id,
      iter.master_record_id,
      iter.is_deleted,
      ARRAY_INSERT(anchor.lineage, 0, iter.account_id)  AS lineage
    FROM recursive_cte AS anchor
    INNER JOIN unioned AS iter
      ON iter.master_record_id = anchor.account_id

), final AS (

    SELECT
      account_id                                         AS sfdc_account_id,
      lineage[ARRAY_SIZE(lineage) - 1]::VARCHAR          AS merged_account_id,
      is_deleted,
      IFF(merged_account_id != account_id, TRUE, FALSE)  AS is_merged,
      IFF(is_deleted AND NOT is_merged, TRUE, FALSE)     AS deleted_not_merged,
      --return final common dimension mapping,
      IFF(deleted_not_merged, '-1', merged_account_id)   AS dim_crm_account_id
    FROM recursive_cte

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-11-23'::DATE        AS model_created_date,
      '2023-04-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final13:T5374,{{ config(
    tags=["mnpi"]
) }}

WITH map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), sfdc_account AS (

    SELECT *
    FROM {{ ref('sfdc_account_source') }}
    WHERE account_id IS NOT NULL

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_rate_plan_source') }}

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_rate_plan_charge_source') }}

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_line_source') }}
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendment_id                                      AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                           AS dim_parent_crm_account_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_start_date') }}  AS effective_start_date_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_end_date') }}    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendment_type                                    AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      {{ get_date_id('manual_charges_prep.effective_start_date') }}                         AS effective_start_date_id,
      {{ get_date_id('manual_charges_prep.effective_end_date') }}                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

{{ dbt_audit(
    cte_ref="arr_analysis_framework",
    created_by="@michellecooper",
    updated_by="@nmcavinue",
    created_date="2022-04-13",
    updated_date="2023-05-30"
) }}14:T5516,

WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_rate_plan_charge_source

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendment_id                                      AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                           AS dim_parent_crm_account_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_start_date::DATE,'YYYYMMDD'),'99999999')

  AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_end_date::DATE,'YYYYMMDD'),'99999999')

    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendment_type                                    AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_start_date::DATE,'YYYYMMDD'),'99999999')

                         AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_end_date::DATE,'YYYYMMDD'),'99999999')

                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@nmcavinue'::VARCHAR       AS updated_by,
      '2022-04-13'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM arr_analysis_framework15:T5efd,

WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), prep_crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), sfdc_user_roles_source AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_user_roles_source

), crm_user AS (

    SELECT * 
    FROM
        "PROD".common_prep.prep_crm_user

), sfdc_account AS (

    SELECT
        *
    FROM
        "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL

), sfdc_users AS (

    SELECT
        *
    FROM
      "PREP".sfdc.sfdc_users_source

), sfdc_record_type AS (

    SELECT *
    FROM "PROD".legacy.sfdc_record_type

), pte_scores AS (

    SELECT 
      crm_account_id                                                                                           AS account_id,
      score                                                                                                    AS score,
      decile                                                                                                   AS decile,
      score_group                                                                                              AS score_group,
      MIN(score_date)                                                                                          AS valid_from,
      COALESCE(LEAD(valid_from) OVER (PARTITION BY crm_account_id ORDER BY valid_from), DATEADD('day',1,CURRENT_DATE())) AS valid_to,
      CASE 
        WHEN ROW_NUMBER() OVER (PARTITION BY crm_account_id ORDER BY valid_from DESC) = 1 
          THEN TRUE
        ELSE FALSE
      END                                                                                                      AS is_current
    FROM "PREP".data_science.pte_scores_source
    group by 1,2,3,4
    ORDER BY valid_from, valid_to


), ptc_scores AS (

    SELECT 
      crm_account_id                                                                                           AS account_id,
      score                                                                                                    AS score,
      decile                                                                                                   AS decile,
      score_group                                                                                              AS score_group,
      MIN(score_date)                                                                                          AS valid_from,
      COALESCE(LEAD(valid_from) OVER (PARTITION BY crm_account_id ORDER BY valid_from), DATEADD('day',1,CURRENT_DATE())) AS valid_to,
      CASE 
        WHEN ROW_NUMBER() OVER (PARTITION BY crm_account_id ORDER BY valid_from DESC) = 1 
          THEN TRUE
        ELSE FALSE
      END                                                                                                      AS is_current
    FROM "PREP".data_science.ptc_scores_source
    group by 1,2,3,4
    ORDER BY valid_from, valid_to

), final AS (

    SELECT
      --crm account information
      --primary key
      sfdc_account.account_id                                             AS dim_crm_account_id,

      --surrogate keys
      sfdc_account.ultimate_parent_account_id                             AS dim_parent_crm_account_id,
      sfdc_account.owner_id                                               AS dim_crm_user_id,
      map_merged_crm_account.dim_crm_account_id                           AS merged_to_account_id,
      sfdc_account.record_type_id                                         AS record_type_id,
      account_owner.user_id                                               AS crm_account_owner_id,
      proposed_account_owner.user_id                                      AS proposed_crm_account_owner_id,
      technical_account_manager.user_id                                   AS technical_account_manager_id,
      sfdc_account.master_record_id,
      prep_crm_person.dim_crm_person_id                                   AS dim_crm_person_primary_contact_id,

      --account people
      account_owner.name                                                  AS account_owner,
      proposed_account_owner.name                                         AS proposed_crm_account_owner,
      technical_account_manager.name                                      AS technical_account_manager,

      -- account owner fields
      account_owner.user_segment                                          AS crm_account_owner_sales_segment,
      account_owner.user_geo                                              AS crm_account_owner_geo,
      account_owner.user_region                                           AS crm_account_owner_region,
      account_owner.user_area                                             AS crm_account_owner_area,
      account_owner.user_segment_geo_region_area                          AS crm_account_owner_sales_segment_geo_region_area,
      account_owner.title                                                 AS crm_account_owner_title,
      sfdc_user_roles_source.name                                         AS crm_account_owner_role,

      ----ultimate parent crm account info
       sfdc_account.ultimate_parent_account_name                          AS parent_crm_account_name,

      --descriptive attributes
      sfdc_account.account_name                                           AS crm_account_name,
      sfdc_account.account_sales_segment                                  AS parent_crm_account_sales_segment,
      sfdc_account.account_geo                                            AS parent_crm_account_geo,
      sfdc_account.account_region                                         AS parent_crm_account_region,
      sfdc_account.account_area                                           AS parent_crm_account_area,
      sfdc_account.account_territory                                      AS parent_crm_account_territory,
      sfdc_account.account_business_unit                                  AS parent_crm_account_business_unit,
      sfdc_account.account_role_type                                      AS parent_crm_account_role_type,
      sfdc_account.account_max_family_employee                            AS parent_crm_account_max_family_employee,
      sfdc_account.account_upa_country                                    AS parent_crm_account_upa_country,
      sfdc_account.account_upa_state                                      AS parent_crm_account_upa_state,
      sfdc_account.account_upa_city                                       AS parent_crm_account_upa_city,
      sfdc_account.account_upa_street                                     AS parent_crm_account_upa_street,
      sfdc_account.account_upa_postal_code                                AS parent_crm_account_upa_postal_code,
      sfdc_account.account_employee_count                                 AS crm_account_employee_count,
      sfdc_account.parent_account_industry_hierarchy                      AS parent_crm_account_industry,
      sfdc_account.gtm_strategy                                           AS crm_account_gtm_strategy,
      CASE 
        WHEN sfdc_account.account_sales_segment IN ('Large', 'PubSec') THEN 'Large'
        WHEN sfdc_account.account_sales_segment = 'Unknown' THEN 'SMB'
        ELSE sfdc_account.account_sales_segment
      END                                                                 AS parent_crm_account_sales_segment_grouped,
      CASE 
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) = 'AMER' AND UPPER(sfdc_account.account_region) = 'WEST'
    THEN 'US WEST'
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) IN ('AMER', 'LATAM') AND UPPER(sfdc_account.account_region) IN ('EAST', 'LATAM')
    THEN 'US EAST'
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) IN ('APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN sfdc_account.account_geo
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_region) = 'PUBSEC'
    THEN 'PUBSEC'
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) NOT IN ('WEST', 'EAST', 'APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN 'LARGE OTHER'
  WHEN UPPER(sfdc_account.account_sales_segment) NOT IN ('LARGE', 'PUBSEC')
    THEN sfdc_account.account_sales_segment
  ELSE 'Missing segment_region_grouped'
END AS parent_crm_account_segment_region_stamped_grouped,
      CASE
        WHEN LOWER(sfdc_account.gtm_strategy) IN ('account centric', 'account based - net new', 'account based - expand') THEN 'Focus Account'
        ELSE 'Non - Focus Account'
      END                                                                 AS crm_account_focus_account,
      sfdc_account.account_owner_user_segment                             AS crm_account_owner_user_segment,
      sfdc_account.billing_country                                        AS crm_account_billing_country,
      sfdc_account.billing_country_code                                   AS crm_account_billing_country_code,
      sfdc_account.account_type                                           AS crm_account_type,
      sfdc_account.industry                                               AS crm_account_industry,
      sfdc_account.sub_industry                                           AS crm_account_sub_industry,
      sfdc_account.account_owner                                          AS crm_account_owner,
      CASE
         WHEN sfdc_account.account_max_family_employee > 2000 THEN 'Employees > 2K'
         WHEN sfdc_account.account_max_family_employee <= 2000 AND sfdc_account.account_max_family_employee > 1500 THEN 'Employees > 1.5K'
         WHEN sfdc_account.account_max_family_employee <= 1500 AND sfdc_account.account_max_family_employee > 1000  THEN 'Employees > 1K'
         ELSE 'Employees < 1K'
      END                                                                 AS crm_account_employee_count_band,
      sfdc_account.partner_vat_tax_id,
      sfdc_account.account_manager,
      sfdc_account.business_development_rep,
      sfdc_account.dedicated_service_engineer,
      sfdc_account.account_tier,
      sfdc_account.account_tier_notes,
      sfdc_account.license_utilization,
      sfdc_account.support_level,
      sfdc_account.named_account,
      sfdc_account.billing_postal_code,
      sfdc_account.partner_type,
      sfdc_account.partner_status,
      sfdc_account.gitlab_customer_success_project,
      sfdc_account.demandbase_account_list,
      sfdc_account.demandbase_intent,
      sfdc_account.demandbase_page_views,
      sfdc_account.demandbase_score,
      sfdc_account.demandbase_sessions,
      sfdc_account.demandbase_trending_offsite_intent,
      sfdc_account.demandbase_trending_onsite_engagement,
      sfdc_account.is_locally_managed_account,
      sfdc_account.is_strategic_account,
      sfdc_account.partner_track,
      sfdc_account.partners_partner_type,
      sfdc_account.gitlab_partner_program,
      sfdc_account.zoom_info_company_name,
      sfdc_account.zoom_info_company_revenue,
      sfdc_account.zoom_info_company_employee_count,
      sfdc_account.zoom_info_company_industry,
      sfdc_account.zoom_info_company_city,
      sfdc_account.zoom_info_company_state_province,
      sfdc_account.zoom_info_company_country,
      sfdc_account.account_phone,
      sfdc_account.zoominfo_account_phone,
      sfdc_account.abm_tier,
      sfdc_account.health_number,
      sfdc_account.health_score_color,
      sfdc_account.partner_account_iban_number,
      sfdc_account.gitlab_com_user,
      sfdc_account.zi_technologies                                        AS crm_account_zi_technologies,
      sfdc_account.zoom_info_website                                      AS crm_account_zoom_info_website,
      sfdc_account.zoom_info_company_other_domains                        AS crm_account_zoom_info_company_other_domains,
      sfdc_account.zoom_info_dozisf_zi_id                                 AS crm_account_zoom_info_dozisf_zi_id,
      sfdc_account.zoom_info_parent_company_zi_id                         AS crm_account_zoom_info_parent_company_zi_id,
      sfdc_account.zoom_info_parent_company_name                          AS crm_account_zoom_info_parent_company_name,
      sfdc_account.zoom_info_ultimate_parent_company_zi_id                AS crm_account_zoom_info_ultimate_parent_company_zi_id,
      sfdc_account.zoom_info_ultimate_parent_company_name                 AS crm_account_zoom_info_ultimate_parent_company_name,
      sfdc_account.zoom_info_number_of_developers                         AS crm_account_zoom_info_number_of_developers,
      sfdc_account.zoom_info_total_funding                                AS crm_account_zoom_info_total_funding,
      sfdc_account.forbes_2000_rank,
      sfdc_account.parent_account_industry_hierarchy,
      sfdc_account.sales_development_rep,
      sfdc_account.admin_manual_source_number_of_employees,
      sfdc_account.admin_manual_source_account_address,
      sfdc_account.eoa_sentiment,
      sfdc_account.gs_health_user_engagement,
      sfdc_account.gs_health_cd,
      sfdc_account.gs_health_devsecops,
      sfdc_account.gs_health_ci,
      sfdc_account.gs_health_scm,
      sfdc_account.risk_impact,
      sfdc_account.risk_reason,
      sfdc_account.last_timeline_at_risk_update,
      sfdc_account.last_at_risk_update_comments,
      sfdc_account.bdr_prospecting_status,

      --degenerative dimensions
      sfdc_account.is_sdr_target_account,
      IFF(sfdc_record_type.record_type_label = 'Partner'
          AND sfdc_account.partner_type IN ('Alliance', 'Channel')
          AND sfdc_account.partner_status = 'Authorized',
          TRUE, FALSE)                                                    AS is_reseller,
      sfdc_account.is_jihu_account                                        AS is_jihu_account,
      sfdc_account.is_first_order_available,
      sfdc_account.is_key_account                                         AS is_key_account,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies,'ARE_USED: Jenkins')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_jenkins_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: SVN')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_svn_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Tortoise SVN')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_tortoise_svn_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Google Cloud Platform')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_gcp_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Atlassian')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_atlassian_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: GitHub')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_github_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: GitHub Enterprise')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_github_enterprise_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: AWS')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_aws_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Kubernetes')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_kubernetes_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Apache Subversion')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_apache_subversion_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Apache Subversion (SVN)')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_apache_subversion_svn_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Hashicorp')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_hashicorp_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Amazon AWS CloudTrail')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_aws_cloud_trail_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: CircleCI')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_circle_ci_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: BitBucket')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_bit_bucket_present,
      sfdc_account.is_excluded_from_zoom_info_enrich,

      --dates
      

  TO_NUMBER(TO_CHAR(sfdc_account.created_date::DATE,'YYYYMMDD'),'99999999')

                      AS crm_account_created_date_id,
      sfdc_account.created_date                                           AS crm_account_created_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.abm_tier_1_date::DATE,'YYYYMMDD'),'99999999')

                   AS abm_tier_1_date_id,
      sfdc_account.abm_tier_1_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.abm_tier_2_date::DATE,'YYYYMMDD'),'99999999')

                   AS abm_tier_2_date_id,
      sfdc_account.abm_tier_2_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.abm_tier_3_date::DATE,'YYYYMMDD'),'99999999')

                   AS abm_tier_3_date_id,
      sfdc_account.abm_tier_3_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gtm_acceleration_date::DATE,'YYYYMMDD'),'99999999')

             AS gtm_acceleration_date_id,
      sfdc_account.gtm_acceleration_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gtm_account_based_date::DATE,'YYYYMMDD'),'99999999')

            AS gtm_account_based_date_id,
      sfdc_account.gtm_account_based_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gtm_account_centric_date::DATE,'YYYYMMDD'),'99999999')

          AS gtm_account_centric_date_id,
      sfdc_account.gtm_account_centric_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.partners_signed_contract_date::DATE,'YYYYMMDD'),'99999999')

     AS partners_signed_contract_date_id,
      CAST(sfdc_account.partners_signed_contract_date AS date)            AS partners_signed_contract_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.technical_account_manager_date::DATE,'YYYYMMDD'),'99999999')

    AS technical_account_manager_date_id,
      sfdc_account.technical_account_manager_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.customer_since_date::DATE,'YYYYMMDD'),'99999999')

               AS customer_since_date_id,
      sfdc_account.customer_since_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.next_renewal_date::DATE,'YYYYMMDD'),'99999999')

                 AS next_renewal_date_id,
      sfdc_account.next_renewal_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gs_first_value_date::DATE,'YYYYMMDD'),'99999999')

               AS gs_first_value_date_id,
      sfdc_account.gs_first_value_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gs_last_csm_activity_date::DATE,'YYYYMMDD'),'99999999')

         AS gs_last_csm_activity_date_id,
      sfdc_account.gs_last_csm_activity_date,


      --measures
      sfdc_account.count_active_subscription_charges,
      sfdc_account.count_active_subscriptions,
      sfdc_account.count_billing_accounts,
      sfdc_account.count_licensed_users,
      sfdc_account.count_of_new_business_won_opportunities,
      sfdc_account.count_open_renewal_opportunities,
      sfdc_account.count_opportunities,
      sfdc_account.count_products_purchased,
      sfdc_account.count_won_opportunities,
      sfdc_account.count_concurrent_ee_subscriptions,
      sfdc_account.count_ce_instances,
      sfdc_account.count_active_ce_users,
      sfdc_account.count_open_opportunities,
      sfdc_account.count_using_ce,
      sfdc_account.carr_this_account,
      sfdc_account.carr_account_family,
      sfdc_account.potential_users,
      sfdc_account.number_of_licenses_this_account,
      sfdc_account.decision_maker_count_linkedin,
      sfdc_account.number_of_employees,
      crm_user.crm_user_role_type                                         AS user_role_type,
      crm_user.user_role_name                                             AS owner_role,
      sfdc_account.lam                                                    AS parent_crm_account_lam,
      sfdc_account.lam_dev_count                                          AS parent_crm_account_lam_dev_count,

      -- PtC and PtE 
      pte_scores.score                                               AS pte_score,
      pte_scores.decile                                              AS pte_decile,
      pte_scores.score_group                                         AS pte_score_group,
      ptc_scores.score                                               AS ptc_score,
      ptc_scores.decile                                              AS ptc_decile,
      ptc_scores.score_group                                         AS ptc_score_group,


      --metadata
      sfdc_account.created_by_id,
      created_by.name                                                     AS created_by_name,
      sfdc_account.last_modified_by_id,
      last_modified_by.name                                               AS last_modified_by_name,
      

  TO_NUMBER(TO_CHAR(sfdc_account.last_modified_date::DATE,'YYYYMMDD'),'99999999')

                AS last_modified_date_id,
      sfdc_account.last_modified_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.last_activity_date::DATE,'YYYYMMDD'),'99999999')

                AS last_activity_date_id,
      sfdc_account.last_activity_date,
      sfdc_account.is_deleted

    FROM sfdc_account
    LEFT JOIN map_merged_crm_account
      ON sfdc_account.account_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_record_type
      ON sfdc_account.record_type_id = sfdc_record_type.record_type_id
    LEFT JOIN prep_crm_person
      ON sfdc_account.primary_contact_id = prep_crm_person.sfdc_record_id
    LEFT JOIN pte_scores 
      ON sfdc_account.account_id = pte_scores.account_id 
        AND pte_scores.is_current = TRUE
    LEFT JOIN ptc_scores
      ON sfdc_account.account_id = ptc_scores.account_id 
        AND ptc_scores.is_current = TRUE
    LEFT OUTER JOIN sfdc_users AS technical_account_manager
      ON sfdc_account.technical_account_manager_id = technical_account_manager.user_id
    LEFT JOIN sfdc_users AS account_owner
      ON sfdc_account.owner_id = account_owner.user_id
    LEFT JOIN sfdc_users AS proposed_account_owner
      ON proposed_account_owner.user_id = sfdc_account.proposed_account_owner
    LEFT JOIN sfdc_users created_by
      ON sfdc_account.created_by_id = created_by.user_id
    LEFT JOIN sfdc_users AS last_modified_by
      ON sfdc_account.last_modified_by_id = last_modified_by.user_id
    LEFT JOIN crm_user
      ON sfdc_account.owner_id = crm_user.dim_crm_user_id
     LEFT JOIN sfdc_user_roles_source
      ON account_owner.user_role_id = sfdc_user_roles_source.id


)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-06-01'::DATE        AS model_created_date,
      '2022-03-02'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final16:T1722,WITH map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM {{ ref('zuora_invoice_source') }}
    WHERE is_deleted = FALSE

), zuora_invoice_item AS (

    SELECT *
    FROM  {{ ref('zuora_invoice_item_source') }}
    WHERE is_deleted = FALSE

), zuora_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}
    WHERE is_deleted = FALSE

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_revenue_bill AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_bill_source') }}

), base_charges AS (

    SELECT
      zuora_account.account_id                                                  AS billing_account_id_subscription,
      map_merged_crm_account.dim_crm_account_id                                 AS crm_account_id_subscription,
      zuora_subscription.subscription_id,
      zuora_rate_plan_charge.rate_plan_charge_id                                AS charge_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.segment                                            AS rate_plan_charge_segment,
      zuora_rate_plan_charge.version                                            AS rate_plan_charge_version,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.mrr*12                                             AS arr,
      zuora_rate_plan_charge.quantity,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_start_date::DATE)     AS effective_start_month,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_end_date::DATE)       AS effective_end_month
    FROM zuora_account
    INNER JOIN zuora_subscription
      ON zuora_account.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rate_plan
      ON zuora_subscription.subscription_id = zuora_rate_plan.subscription_id
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id

), invoice_charges AS (

    SELECT
      zuora_invoice_item.invoice_item_id                AS invoice_item_id,
      zuora_invoice.invoice_id                          AS invoice_id,
      zuora_invoice.invoice_number,
      zuora_invoice.invoice_date::DATE                  AS invoice_date,
      zuora_invoice_item.service_start_date::DATE       AS service_start_date,
      zuora_invoice_item.service_end_date::DATE         AS service_end_date,
      zuora_invoice.account_id                          AS billing_account_id_invoice,
      map_merged_crm_account.dim_crm_account_id         AS crm_account_id_invoice,
      zuora_invoice_item.rate_plan_charge_id            AS charge_id,
      zuora_invoice_item.product_rate_plan_charge_id    AS product_details_id,
      zuora_invoice_item.sku                            AS sku,
      zuora_invoice_item.tax_amount                     AS tax_amount_sum,
      zuora_invoice.amount_without_tax                  AS invoice_amount_without_tax,
      zuora_invoice_item.charge_amount                  AS invoice_item_charge_amount,
      zuora_invoice_item.unit_price                     AS invoice_item_unit_price
    FROM zuora_invoice_item
    INNER JOIN zuora_invoice
      ON zuora_invoice_item.invoice_id = zuora_invoice.invoice_id
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE zuora_invoice.status='Posted'

), final AS (

    SELECT
      invoice_charges.invoice_item_id,
      invoice_charges.invoice_id                    AS dim_invoice_id,
      base_charges.billing_account_id_subscription  AS dim_billing_account_id_subscription,
      base_charges.crm_account_id_subscription      AS dim_crm_account_id_subscription,
      invoice_charges.billing_account_id_invoice    AS dim_billing_account_id_invoice,
      invoice_charges.crm_account_id_invoice        AS dim_crm_account_id_invoice,
      base_charges.subscription_id                  AS dim_subscription_id,
      zuora_revenue_bill.revenue_contract_line_id   AS dim_revenue_contract_line_id,
      invoice_charges.charge_id,
      invoice_charges.product_details_id            AS dim_product_detail_id,
      invoice_charges.invoice_number,
      invoice_charges.invoice_date,
      invoice_charges.service_start_date,
      invoice_charges.service_end_date,
      base_charges.effective_start_month,
      base_charges.effective_end_month,
      base_charges.quantity,
      base_charges.mrr,
      base_charges.arr,
      invoice_charges.invoice_item_charge_amount,
      invoice_charges.invoice_item_unit_price,
      invoice_charges.invoice_amount_without_tax,
      invoice_charges.tax_amount_sum,
      IFF(ROW_NUMBER() OVER (
          PARTITION BY rate_plan_charge_number, rate_plan_charge_segment
          ORDER BY rate_plan_charge_version DESC, service_start_date DESC) = 1,
          TRUE, FALSE
      )                                 AS is_last_segment_version
    FROM base_charges
    INNER JOIN invoice_charges
      ON base_charges.charge_id = invoice_charges.charge_id
    LEFT JOIN zuora_revenue_bill
      ON invoice_charges.invoice_item_id = zuora_revenue_bill.invoice_item_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mcooperDD",
    updated_by="@michellecooper",
    created_date="2021-01-15",
    updated_date="2021-06-21"
) }}17:T1834,WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM "PREP".zuora.zuora_invoice_source
    WHERE is_deleted = FALSE

), zuora_invoice_item AS (

    SELECT *
    FROM  "PREP".zuora.zuora_invoice_item_source
    WHERE is_deleted = FALSE

), zuora_rate_plan AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source
    WHERE is_deleted = FALSE

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_revenue_bill AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_bill_source

), base_charges AS (

    SELECT
      zuora_account.account_id                                                  AS billing_account_id_subscription,
      map_merged_crm_account.dim_crm_account_id                                 AS crm_account_id_subscription,
      zuora_subscription.subscription_id,
      zuora_rate_plan_charge.rate_plan_charge_id                                AS charge_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.segment                                            AS rate_plan_charge_segment,
      zuora_rate_plan_charge.version                                            AS rate_plan_charge_version,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.mrr*12                                             AS arr,
      zuora_rate_plan_charge.quantity,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_start_date::DATE)     AS effective_start_month,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_end_date::DATE)       AS effective_end_month
    FROM zuora_account
    INNER JOIN zuora_subscription
      ON zuora_account.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rate_plan
      ON zuora_subscription.subscription_id = zuora_rate_plan.subscription_id
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id

), invoice_charges AS (

    SELECT
      zuora_invoice_item.invoice_item_id                AS invoice_item_id,
      zuora_invoice.invoice_id                          AS invoice_id,
      zuora_invoice.invoice_number,
      zuora_invoice.invoice_date::DATE                  AS invoice_date,
      zuora_invoice_item.service_start_date::DATE       AS service_start_date,
      zuora_invoice_item.service_end_date::DATE         AS service_end_date,
      zuora_invoice.account_id                          AS billing_account_id_invoice,
      map_merged_crm_account.dim_crm_account_id         AS crm_account_id_invoice,
      zuora_invoice_item.rate_plan_charge_id            AS charge_id,
      zuora_invoice_item.product_rate_plan_charge_id    AS product_details_id,
      zuora_invoice_item.sku                            AS sku,
      zuora_invoice_item.tax_amount                     AS tax_amount_sum,
      zuora_invoice.amount_without_tax                  AS invoice_amount_without_tax,
      zuora_invoice_item.charge_amount                  AS invoice_item_charge_amount,
      zuora_invoice_item.unit_price                     AS invoice_item_unit_price
    FROM zuora_invoice_item
    INNER JOIN zuora_invoice
      ON zuora_invoice_item.invoice_id = zuora_invoice.invoice_id
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE zuora_invoice.status='Posted'

), final AS (

    SELECT
      invoice_charges.invoice_item_id,
      invoice_charges.invoice_id                    AS dim_invoice_id,
      base_charges.billing_account_id_subscription  AS dim_billing_account_id_subscription,
      base_charges.crm_account_id_subscription      AS dim_crm_account_id_subscription,
      invoice_charges.billing_account_id_invoice    AS dim_billing_account_id_invoice,
      invoice_charges.crm_account_id_invoice        AS dim_crm_account_id_invoice,
      base_charges.subscription_id                  AS dim_subscription_id,
      zuora_revenue_bill.revenue_contract_line_id   AS dim_revenue_contract_line_id,
      invoice_charges.charge_id,
      invoice_charges.product_details_id            AS dim_product_detail_id,
      invoice_charges.invoice_number,
      invoice_charges.invoice_date,
      invoice_charges.service_start_date,
      invoice_charges.service_end_date,
      base_charges.effective_start_month,
      base_charges.effective_end_month,
      base_charges.quantity,
      base_charges.mrr,
      base_charges.arr,
      invoice_charges.invoice_item_charge_amount,
      invoice_charges.invoice_item_unit_price,
      invoice_charges.invoice_amount_without_tax,
      invoice_charges.tax_amount_sum,
      IFF(ROW_NUMBER() OVER (
          PARTITION BY rate_plan_charge_number, rate_plan_charge_segment
          ORDER BY rate_plan_charge_version DESC, service_start_date DESC) = 1,
          TRUE, FALSE
      )                                 AS is_last_segment_version
    FROM base_charges
    INNER JOIN invoice_charges
      ON base_charges.charge_id = invoice_charges.charge_id
    LEFT JOIN zuora_revenue_bill
      ON invoice_charges.invoice_item_id = zuora_revenue_bill.invoice_item_id

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-15'::DATE        AS model_created_date,
      '2021-06-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final18:T13e5,{{ config({
        "tags": ["mnpi_exception"],
    })
}}

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_contact','zuora_contact_source'),
    ('zuora_payment_method', 'zuora_payment_method_source'),
    ('customers_billing_account','customers_db_billing_accounts_source')
]) }}

, zuora_account AS (

    SELECT *
    FROM {{ref('zuora_account_source')}}
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_billing_account AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account.account_number                          AS billing_account_number,
      zuora_account.account_name                            AS billing_account_name,
      zuora_account.status                                  AS account_status,
      zuora_account.parent_id,
      zuora_account.sfdc_account_code,
      zuora_account.sfdc_entity,
      zuora_account.currency                                AS account_currency,
      zuora_contact.country                                 AS sold_to_country,
      zuora_account.ssp_channel,
      CASE
        WHEN zuora_account.po_required = '' THEN 'NO'
        WHEN zuora_account.po_required IS NULL THEN 'NO'
        ELSE zuora_account.po_required
      END                                                   AS po_required,
      zuora_account.auto_pay,
      zuora_payment_method.payment_method_type              AS default_payment_method_type,
      zuora_account.is_deleted,
      zuora_account.batch,
      'Y' as exists_in_zuora
    FROM zuora_account
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_account.sold_to_contact_id, zuora_account.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN zuora_payment_method
      ON zuora_account.default_payment_method_id = zuora_payment_method.payment_method_id

), cdot_billing_account AS (

    SELECT 
      billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account_id,
      zuora_account_name,
      customers_billing_account.sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      'Y' as exists_in_cdot
    FROM customers_billing_account
    LEFT JOIN map_merged_crm_account
      ON customers_billing_account.sfdc_account_id = map_merged_crm_account.sfdc_account_id
    --Exclude Batch20(test records) from CDot by using Zuora test account IDs.
    WHERE zuora_account_id NOT IN 
      (SELECT DISTINCT 
        account_id 
       FROM {{ref('zuora_account_source')}}
       WHERE LOWER(batch) = 'batch20'
       OR is_deleted = TRUE)

), final AS (

    SELECT 
      --surrogate key
      {{ dbt_utils.surrogate_key(['COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id)']) }}  AS dim_billing_account_sk,

      --natural key
      COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id)                                     AS dim_billing_account_id,

      --foreign key
      COALESCE(zuora_billing_account.dim_crm_account_id, cdot_billing_account.dim_crm_account_id)                                       AS dim_crm_account_id,

      --other relevant attributes
      zuora_billing_account.billing_account_number,
      COALESCE(zuora_billing_account.billing_account_name, cdot_billing_account.zuora_account_name)                                     AS billing_account_name,
      zuora_billing_account.account_status,
      zuora_billing_account.parent_id,
      zuora_billing_account.sfdc_account_code,
      zuora_billing_account.sfdc_entity,
      zuora_billing_account.account_currency,
      zuora_billing_account.sold_to_country,
      zuora_billing_account.ssp_channel,
      zuora_billing_account.po_required,
      zuora_billing_account.auto_pay,
      zuora_billing_account.default_payment_method_type,
      zuora_billing_account.is_deleted,
      zuora_billing_account.batch,
      CASE 
            WHEN exists_in_zuora = 'Y' and exists_in_cdot = 'Y' THEN 'exists in CDot & Zuora'
            WHEN exists_in_zuora = 'Y' and exists_in_cdot IS NULL THEN 'exists only in Zuora'
            WHEN exists_in_zuora IS NULL and exists_in_cdot = 'Y' THEN 'exists only in CDot'
            ELSE NULL 
      END                                                                                                                               AS record_data_source
      FROM zuora_billing_account 
    FULL JOIN cdot_billing_account 
      ON zuora_billing_account.dim_billing_account_id = cdot_billing_account.zuora_account_id
) 


{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@snalamaru",
    created_date="2023-04-24",
    updated_date="2023-06-14"
) }}19:T1558,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), zuora_payment_method AS (

    SELECT * 
    FROM "PREP".zuora.zuora_payment_method_source

), customers_billing_account AS (

    SELECT * 
    FROM "PREP".customers.customers_db_billing_accounts_source

)

, zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_billing_account AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account.account_number                          AS billing_account_number,
      zuora_account.account_name                            AS billing_account_name,
      zuora_account.status                                  AS account_status,
      zuora_account.parent_id,
      zuora_account.sfdc_account_code,
      zuora_account.sfdc_entity,
      zuora_account.currency                                AS account_currency,
      zuora_contact.country                                 AS sold_to_country,
      zuora_account.ssp_channel,
      CASE
        WHEN zuora_account.po_required = '' THEN 'NO'
        WHEN zuora_account.po_required IS NULL THEN 'NO'
        ELSE zuora_account.po_required
      END                                                   AS po_required,
      zuora_account.auto_pay,
      zuora_payment_method.payment_method_type              AS default_payment_method_type,
      zuora_account.is_deleted,
      zuora_account.batch,
      'Y' as exists_in_zuora
    FROM zuora_account
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_account.sold_to_contact_id, zuora_account.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN zuora_payment_method
      ON zuora_account.default_payment_method_id = zuora_payment_method.payment_method_id

), cdot_billing_account AS (

    SELECT 
      billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account_id,
      zuora_account_name,
      customers_billing_account.sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      'Y' as exists_in_cdot
    FROM customers_billing_account
    LEFT JOIN map_merged_crm_account
      ON customers_billing_account.sfdc_account_id = map_merged_crm_account.sfdc_account_id
    --Exclude Batch20(test records) from CDot by using Zuora test account IDs.
    WHERE zuora_account_id NOT IN 
      (SELECT DISTINCT 
        account_id 
       FROM "PREP".zuora.zuora_account_source
       WHERE LOWER(batch) = 'batch20'
       OR is_deleted = TRUE)

), final AS (

    SELECT 
      --surrogate key
      md5(cast(coalesce(cast(COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id) as 
    varchar
), '') as 
    varchar
))  AS dim_billing_account_sk,

      --natural key
      COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id)                                     AS dim_billing_account_id,

      --foreign key
      COALESCE(zuora_billing_account.dim_crm_account_id, cdot_billing_account.dim_crm_account_id)                                       AS dim_crm_account_id,

      --other relevant attributes
      zuora_billing_account.billing_account_number,
      COALESCE(zuora_billing_account.billing_account_name, cdot_billing_account.zuora_account_name)                                     AS billing_account_name,
      zuora_billing_account.account_status,
      zuora_billing_account.parent_id,
      zuora_billing_account.sfdc_account_code,
      zuora_billing_account.sfdc_entity,
      zuora_billing_account.account_currency,
      zuora_billing_account.sold_to_country,
      zuora_billing_account.ssp_channel,
      zuora_billing_account.po_required,
      zuora_billing_account.auto_pay,
      zuora_billing_account.default_payment_method_type,
      zuora_billing_account.is_deleted,
      zuora_billing_account.batch,
      CASE 
            WHEN exists_in_zuora = 'Y' and exists_in_cdot = 'Y' THEN 'exists in CDot & Zuora'
            WHEN exists_in_zuora = 'Y' and exists_in_cdot IS NULL THEN 'exists only in Zuora'
            WHEN exists_in_zuora IS NULL and exists_in_cdot = 'Y' THEN 'exists only in CDot'
            ELSE NULL 
      END                                                                                                                               AS record_data_source
      FROM zuora_billing_account 
    FULL JOIN cdot_billing_account 
      ON zuora_billing_account.dim_billing_account_id = cdot_billing_account.zuora_account_id
) 


SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@snalamaru'::VARCHAR       AS updated_by,
      '2023-04-24'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1a:T166a,{{ config(
    tags=["mnpi_exception"]
) }}

WITH date_details AS (

    SELECT *
    FROM {{ ref('date_details') }}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_api_sandbox_subscription AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_api_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM {{ ref('zuora_api_sandbox_account_source') }}

), joined AS (

    SELECT
      zuora_api_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                             AS dim_crm_account_id,
      zuora_api_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_api_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_api_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_api_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_api_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_api_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_api_sandbox_subscription.created_by_id,
      zuora_api_sandbox_subscription.updated_by_id,
      zuora_api_sandbox_subscription.subscription_name,
      zuora_api_sandbox_subscription.subscription_name_slugify,
      zuora_api_sandbox_subscription.subscription_status,
      zuora_api_sandbox_subscription.version                                                AS subscription_version,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_api_sandbox_subscription.current_term,
      zuora_api_sandbox_subscription.renewal_term,
      zuora_api_sandbox_subscription.renewal_term_period_type,
      zuora_api_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_api_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                 AS subscription_sales_type,

      --Date Information
      zuora_api_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_api_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                              AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                   AS subscription_end_fiscal_quarter_name_fy,
      zuora_api_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_api_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_api_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_api_sandbox_subscription.current_term, zuora_api_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                   AS second_active_renewal_month,
      zuora_api_sandbox_subscription.auto_renew_native_hist,
      zuora_api_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_api_sandbox_subscription.turn_on_cloud_licensing,
      -- zuora_api_sandbox_subscription.turn_on_operational_metrics,
      -- zuora_api_sandbox_subscription.contract_operational_metrics,
      zuora_api_sandbox_subscription.turn_on_usage_ping_required_metrics,
      zuora_api_sandbox_subscription.contract_auto_renewal,
      zuora_api_sandbox_subscription.turn_on_auto_renewal,
      zuora_api_sandbox_subscription.contract_seat_reconciliation,
      zuora_api_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_api_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_api_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_api_sandbox_subscription
    INNER JOIN zuora_api_sandbox_account
      ON zuora_api_sandbox_subscription.account_id = zuora_api_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_api_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ken_aguilar",
    updated_by="@ken_aguilar",
    created_date="2021-08-31",
    updated_date="2021-08-31"
) }}1b:T1762,

WITH date_details AS (

    SELECT *
    FROM "PROD".legacy.date_details

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_api_sandbox_subscription AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_api_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_account_source

), joined AS (

    SELECT
      zuora_api_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                             AS dim_crm_account_id,
      zuora_api_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_api_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_api_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_api_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_api_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_api_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_api_sandbox_subscription.created_by_id,
      zuora_api_sandbox_subscription.updated_by_id,
      zuora_api_sandbox_subscription.subscription_name,
      zuora_api_sandbox_subscription.subscription_name_slugify,
      zuora_api_sandbox_subscription.subscription_status,
      zuora_api_sandbox_subscription.version                                                AS subscription_version,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_api_sandbox_subscription.current_term,
      zuora_api_sandbox_subscription.renewal_term,
      zuora_api_sandbox_subscription.renewal_term_period_type,
      zuora_api_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_api_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                 AS subscription_sales_type,

      --Date Information
      zuora_api_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_api_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                              AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                   AS subscription_end_fiscal_quarter_name_fy,
      zuora_api_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_api_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_api_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_api_sandbox_subscription.current_term, zuora_api_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                   AS second_active_renewal_month,
      zuora_api_sandbox_subscription.auto_renew_native_hist,
      zuora_api_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_api_sandbox_subscription.turn_on_cloud_licensing,
      -- zuora_api_sandbox_subscription.turn_on_operational_metrics,
      -- zuora_api_sandbox_subscription.contract_operational_metrics,
      zuora_api_sandbox_subscription.turn_on_usage_ping_required_metrics,
      zuora_api_sandbox_subscription.contract_auto_renewal,
      zuora_api_sandbox_subscription.turn_on_auto_renewal,
      zuora_api_sandbox_subscription.contract_seat_reconciliation,
      zuora_api_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_api_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_api_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_api_sandbox_subscription
    INNER JOIN zuora_api_sandbox_account
      ON zuora_api_sandbox_subscription.account_id = zuora_api_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_api_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

SELECT
      *,
      '@ken_aguilar'::VARCHAR       AS created_by,
      '@ken_aguilar'::VARCHAR       AS updated_by,
      '2021-08-31'::DATE        AS model_created_date,
      '2021-08-31'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined1c:T2239,{{ config({
        "tags": ["arr_snapshots", "mnpi_exception"],
        "schema": "common"
    })
}}

WITH snapshot_dates AS (

   SELECT *
   FROM {{ ref('dim_date') }}
   WHERE date_actual >= '2020-03-01' and date_actual <= CURRENT_DATE

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_snapshots_source') }}
    WHERE is_deleted = FALSE
      AND LOWER(live_batch) != 'batch20'

), zuora_account_spined AS (

    SELECT
      snapshot_dates.date_id AS snapshot_id,
      zuora_account.*
    FROM zuora_account
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= zuora_account.dbt_valid_from
      AND snapshot_dates.date_actual < {{ coalesce_to_infinity('zuora_account.dbt_valid_to') }}

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_snapshots_source') }}
    WHERE LOWER(subscription_status) NOT IN ('draft', 'expired')
      AND is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_subscription_spined AS (

    SELECT
      snapshot_dates.date_id AS snapshot_id,
      zuora_subscription.*
    FROM zuora_subscription
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= zuora_subscription.dbt_valid_from
      AND snapshot_dates.date_actual < {{ coalesce_to_infinity('zuora_subscription.dbt_valid_to') }}
    QUALIFY rank() OVER (
         PARTITION BY subscription_name, snapshot_dates.date_actual
         ORDER BY DBT_VALID_FROM DESC) = 1

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), prep_amendment AS (

  SELECT *
  FROM {{ ref('prep_amendment') }}

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM {{ ref('map_subscription_lineage') }}

), joined AS (

    SELECT
    --Surrogate Key
      zuora_subscription_spined.snapshot_id                                     AS snapshot_id,
      zuora_subscription_spined.subscription_id                                 AS dim_subscription_id,

    --Natural Key
      zuora_subscription_spined.subscription_name                               AS subscription_name,
      zuora_subscription_spined.version                                         AS subscription_version,

    --Common Dimension Keys
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_spined.account_id                                           AS dim_billing_account_id,
      zuora_subscription_spined.invoice_owner_id                                AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription_spined.creator_account_id                              AS dim_billing_account_id_creator_account,
      zuora_subscription_spined.sfdc_opportunity_id                             AS dim_crm_opportunity_id,
      {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}                  AS dim_amendment_id_subscription,

    --Subscription Information
      zuora_subscription_spined.created_by_id,
      zuora_subscription_spined.updated_by_id,
      zuora_subscription_spined.original_id                                     AS dim_subscription_id_original,
      zuora_subscription_spined.previous_subscription_id                        AS dim_subscription_id_previous,
      zuora_subscription_spined.subscription_name_slugify,
      zuora_subscription_spined.subscription_status,
      zuora_subscription_spined.auto_renew_native_hist,
      zuora_subscription_spined.auto_renew_customerdot_hist,
      zuora_subscription_spined.zuora_renewal_subscription_name,
      zuora_subscription_spined.zuora_renewal_subscription_name_slugify,
      zuora_subscription_spined.current_term,
      zuora_subscription_spined.renewal_term,
      zuora_subscription_spined.renewal_term_period_type,
      zuora_subscription_spined.eoa_starter_bronze_offer_accepted,
      IFF(zuora_subscription_spined.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                     AS subscription_sales_type,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription_spined.multi_year_deal_subscription_linkage            AS multi_year_deal_subscription_linkage,

    --Date Information
      zuora_subscription_spined.subscription_start_date                         AS subscription_start_date,
      zuora_subscription_spined.subscription_end_date                           AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription_spined.subscription_start_date)    AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription_spined.subscription_end_date)      AS subscription_end_month,
      snapshot_dates.fiscal_year                                                AS subscription_end_fiscal_year,
      zuora_subscription_spined.created_date::DATE                              AS subscription_created_date,
      zuora_subscription_spined.updated_date::DATE                              AS subscription_updated_date,
      zuora_subscription_spined.term_start_date::DATE                           AS term_start_date,
      zuora_subscription_spined.term_end_date::DATE                             AS term_end_date,
      DATE_TRUNC('month', zuora_subscription_spined.term_start_date::DATE)      AS term_start_month,
      DATE_TRUNC('month', zuora_subscription_spined.term_end_date::DATE)        AS term_end_month,
      CASE
        WHEN LOWER(zuora_subscription_spined.subscription_status) = 'active' AND zuora_subscription_spined.subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription_spined.current_term, zuora_subscription_spined.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription_spined.cancelled_date,

      --Lineage and Cohort Information
      subscription_lineage.subscription_lineage,
      subscription_lineage.oldest_subscription_in_cohort,
      subscription_lineage.subscription_cohort_month,
      subscription_lineage.subscription_cohort_quarter,
      subscription_lineage.subscription_cohort_year,

      --Supersonics Fields
      zuora_subscription_spined.turn_on_cloud_licensing,
      zuora_subscription_spined.turn_on_operational_metrics,
      zuora_subscription_spined.contract_operational_metrics,
      zuora_subscription_spined.contract_auto_renewal,
      zuora_subscription_spined.turn_on_auto_renewal,
      zuora_subscription_spined.contract_seat_reconciliation,
      zuora_subscription_spined.turn_on_seat_reconciliation
    FROM zuora_subscription_spined
    INNER JOIN zuora_account_spined
      ON zuora_subscription_spined.account_id = zuora_account_spined.account_id
      AND zuora_subscription_spined.snapshot_id = zuora_account_spined.snapshot_id
    LEFT JOIN zuora_account_spined AS invoice_owner
      ON zuora_subscription_spined.invoice_owner_id = invoice_owner.account_id
      AND zuora_subscription_spined.snapshot_id = invoice_owner.snapshot_id
    LEFT JOIN zuora_account_spined AS creator_account
      ON zuora_subscription_spined.creator_account_id = creator_account.account_id
      AND zuora_subscription_spined.snapshot_id = creator_account.snapshot_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_spined.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN prep_amendment
      ON zuora_subscription_spined.amendment_id = prep_amendment.dim_amendment_id
    LEFT JOIN subscription_lineage
      ON subscription_lineage.subscription_name_slugify = zuora_subscription_spined.subscription_name_slugify
    LEFT JOIN snapshot_dates
      ON zuora_subscription_spined.subscription_end_date::DATE = snapshot_dates.date_day

), final AS (

    SELECT
        {{ dbt_utils.surrogate_key(['snapshot_id', 'dim_subscription_id']) }}   AS subscription_snapshot_id,
        joined.*
    FROM joined

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@iweeks",
    updated_by="@michellecooper",
    created_date="2021-06-28",
    updated_date="2022-11-29"
) }}1d:T2347,

WITH snapshot_dates AS (

   SELECT *
   FROM "PROD".common.dim_date
   WHERE date_actual >= '2020-03-01' and date_actual <= CURRENT_DATE

), zuora_account AS (

    SELECT *
    FROM "PROD".legacy.zuora_account_snapshots_source
    WHERE is_deleted = FALSE
      AND LOWER(live_batch) != 'batch20'

), zuora_account_spined AS (

    SELECT
      snapshot_dates.date_id AS snapshot_id,
      zuora_account.*
    FROM zuora_account
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= zuora_account.dbt_valid_from
      AND snapshot_dates.date_actual < COALESCE( zuora_account.dbt_valid_to, '9999-12-31'::TIMESTAMP)

), zuora_subscription AS (

    SELECT *
    FROM "PROD".legacy.zuora_subscription_snapshots_source
    WHERE LOWER(subscription_status) NOT IN ('draft', 'expired')
      AND is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_subscription_spined AS (

    SELECT
      snapshot_dates.date_id AS snapshot_id,
      zuora_subscription.*
    FROM zuora_subscription
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= zuora_subscription.dbt_valid_from
      AND snapshot_dates.date_actual < COALESCE( zuora_subscription.dbt_valid_to, '9999-12-31'::TIMESTAMP)
    QUALIFY rank() OVER (
         PARTITION BY subscription_name, snapshot_dates.date_actual
         ORDER BY DBT_VALID_FROM DESC) = 1

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), prep_amendment AS (

  SELECT *
  FROM "PROD".common_prep.prep_amendment

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM "PROD".common_mapping.map_subscription_lineage

), joined AS (

    SELECT
    --Surrogate Key
      zuora_subscription_spined.snapshot_id                                     AS snapshot_id,
      zuora_subscription_spined.subscription_id                                 AS dim_subscription_id,

    --Natural Key
      zuora_subscription_spined.subscription_name                               AS subscription_name,
      zuora_subscription_spined.version                                         AS subscription_version,

    --Common Dimension Keys
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_spined.account_id                                           AS dim_billing_account_id,
      zuora_subscription_spined.invoice_owner_id                                AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription_spined.creator_account_id                              AS dim_billing_account_id_creator_account,
      zuora_subscription_spined.sfdc_opportunity_id                             AS dim_crm_opportunity_id,
      

  COALESCE(prep_amendment.dim_amendment_id, MD5(-1)) 

                  AS dim_amendment_id_subscription,

    --Subscription Information
      zuora_subscription_spined.created_by_id,
      zuora_subscription_spined.updated_by_id,
      zuora_subscription_spined.original_id                                     AS dim_subscription_id_original,
      zuora_subscription_spined.previous_subscription_id                        AS dim_subscription_id_previous,
      zuora_subscription_spined.subscription_name_slugify,
      zuora_subscription_spined.subscription_status,
      zuora_subscription_spined.auto_renew_native_hist,
      zuora_subscription_spined.auto_renew_customerdot_hist,
      zuora_subscription_spined.zuora_renewal_subscription_name,
      zuora_subscription_spined.zuora_renewal_subscription_name_slugify,
      zuora_subscription_spined.current_term,
      zuora_subscription_spined.renewal_term,
      zuora_subscription_spined.renewal_term_period_type,
      zuora_subscription_spined.eoa_starter_bronze_offer_accepted,
      IFF(zuora_subscription_spined.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                     AS subscription_sales_type,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription_spined.multi_year_deal_subscription_linkage            AS multi_year_deal_subscription_linkage,

    --Date Information
      zuora_subscription_spined.subscription_start_date                         AS subscription_start_date,
      zuora_subscription_spined.subscription_end_date                           AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription_spined.subscription_start_date)    AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription_spined.subscription_end_date)      AS subscription_end_month,
      snapshot_dates.fiscal_year                                                AS subscription_end_fiscal_year,
      zuora_subscription_spined.created_date::DATE                              AS subscription_created_date,
      zuora_subscription_spined.updated_date::DATE                              AS subscription_updated_date,
      zuora_subscription_spined.term_start_date::DATE                           AS term_start_date,
      zuora_subscription_spined.term_end_date::DATE                             AS term_end_date,
      DATE_TRUNC('month', zuora_subscription_spined.term_start_date::DATE)      AS term_start_month,
      DATE_TRUNC('month', zuora_subscription_spined.term_end_date::DATE)        AS term_end_month,
      CASE
        WHEN LOWER(zuora_subscription_spined.subscription_status) = 'active' AND zuora_subscription_spined.subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription_spined.current_term, zuora_subscription_spined.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription_spined.cancelled_date,

      --Lineage and Cohort Information
      subscription_lineage.subscription_lineage,
      subscription_lineage.oldest_subscription_in_cohort,
      subscription_lineage.subscription_cohort_month,
      subscription_lineage.subscription_cohort_quarter,
      subscription_lineage.subscription_cohort_year,

      --Supersonics Fields
      zuora_subscription_spined.turn_on_cloud_licensing,
      zuora_subscription_spined.turn_on_operational_metrics,
      zuora_subscription_spined.contract_operational_metrics,
      zuora_subscription_spined.contract_auto_renewal,
      zuora_subscription_spined.turn_on_auto_renewal,
      zuora_subscription_spined.contract_seat_reconciliation,
      zuora_subscription_spined.turn_on_seat_reconciliation
    FROM zuora_subscription_spined
    INNER JOIN zuora_account_spined
      ON zuora_subscription_spined.account_id = zuora_account_spined.account_id
      AND zuora_subscription_spined.snapshot_id = zuora_account_spined.snapshot_id
    LEFT JOIN zuora_account_spined AS invoice_owner
      ON zuora_subscription_spined.invoice_owner_id = invoice_owner.account_id
      AND zuora_subscription_spined.snapshot_id = invoice_owner.snapshot_id
    LEFT JOIN zuora_account_spined AS creator_account
      ON zuora_subscription_spined.creator_account_id = creator_account.account_id
      AND zuora_subscription_spined.snapshot_id = creator_account.snapshot_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_spined.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN prep_amendment
      ON zuora_subscription_spined.amendment_id = prep_amendment.dim_amendment_id
    LEFT JOIN subscription_lineage
      ON subscription_lineage.subscription_name_slugify = zuora_subscription_spined.subscription_name_slugify
    LEFT JOIN snapshot_dates
      ON zuora_subscription_spined.subscription_end_date::DATE = snapshot_dates.date_day

), final AS (

    SELECT
        md5(cast(coalesce(cast(snapshot_id as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id as 
    varchar
), '') as 
    varchar
))   AS subscription_snapshot_id,
        joined.*
    FROM joined

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-06-28'::DATE        AS model_created_date,
      '2022-11-29'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1e:T3303,WITH map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), sfdc_account AS (

    SELECT *
    FROM {{ ref('sfdc_account_source') }}
    WHERE account_id IS NOT NULL

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_line_source') }}
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      adjustment,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      {{ get_date_id('manual_charges_prep.effective_start_date') }}                         AS effective_start_date_id,
      {{ get_date_id('manual_charges_prep.effective_end_date') }}                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      adjustment,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

)

{{ dbt_audit(
    cte_ref="manual_charges",
    created_by="@michellecooper",
    updated_by="@lisvinueza",
    created_date="2021-10-28",
    updated_date="2023-05-21",
) }}1f:T3443,WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      adjustment,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_start_date::DATE,'YYYYMMDD'),'99999999')

                         AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_end_date::DATE,'YYYYMMDD'),'99999999')

                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      adjustment,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-10-28'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM manual_charges20:T5a61,{{ config(
    tags=["mnpi"]
) }}

{{ simple_cte([
    ('map_merged_crm_account', 'map_merged_crm_account'),
    ('zuora_rate_plan', 'zuora_api_sandbox_rate_plan_source'),
    ('zuora_rate_plan_charge', 'zuora_api_sandbox_rate_plan_charge_source'),
    ('zuora_order_action', 'zuora_api_sandbox_order_action_source'),
    ('revenue_contract_line', 'zuora_revenue_revenue_contract_line_source'),
    ('zuora_order', 'zuora_api_sandbox_order_source'),
])}}

, zuora_order_action_rate_plan AS (
    -- referencing a static table as there is not currectly a method for extracting this data from Zuora API sandbox
    SELECT *
    FROM prod.boneyard.orderactionrateplan

), sfdc_account AS (

    SELECT *
    FROM {{ ref('sfdc_account_source') }}
    WHERE account_id IS NOT NULL

), ultimate_parent_account AS (

    SELECT
      account_id
    FROM sfdc_account
    WHERE account_id = ultimate_parent_account_id

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_rate_plan_source') }}

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_rate_plan_charge_source') }}

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_line_source') }}
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}

), charge_to_order AS (

    SELECT 
      zuora_rate_plan_charge.rate_plan_charge_id,
      zuora_order_action.dim_order_id
    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_order_action_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_order_action_rate_plan.RatePlanId
    INNER JOIN zuora_order_action
      ON zuora_order_action_rate_plan.OrderActionId = zuora_order_action.dim_order_action_id
    {{ dbt_utils.group_by(n=2) }}

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendment_id                                      AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      ultimate_parent_account.account_id                                AS dim_parent_crm_account_id,
      charge_to_order.dim_order_id                                      AS dim_order_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_start_date') }}  AS effective_start_date_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_end_date') }}    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendment_type                                    AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN ultimate_parent_account
      ON sfdc_account.ultimate_parent_account_id = ultimate_parent_account.account_id
    LEFT JOIN charge_to_order
      ON zuora_rate_plan_charge.rate_plan_charge_id = charge_to_order.rate_plan_charge_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      MD5(-1)                                                                               AS dim_order_id,
      {{ get_date_id('manual_charges_prep.effective_start_date') }}                         AS effective_start_date_id,
      {{ get_date_id('manual_charges_prep.effective_end_date') }}                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN ultimate_parent_account
      ON sfdc_account.ultimate_parent_account_id = ultimate_parent_account.account_id


), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

{{ dbt_audit(
    cte_ref="arr_analysis_framework",
    created_by="@michellecooper",
    updated_by="@nmcavinue",
    created_date="2022-04-13",
    updated_date="2023-05-30"
) }}21:T5cd7,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT * 
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_rate_plan_charge_source

), zuora_order_action AS (

    SELECT * 
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_order_action_source

), revenue_contract_line AS (

    SELECT * 
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source

), zuora_order AS (

    SELECT * 
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_order_source

)

, zuora_order_action_rate_plan AS (
    -- referencing a static table as there is not currectly a method for extracting this data from Zuora API sandbox
    SELECT *
    FROM prod.boneyard.orderactionrateplan

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL

), ultimate_parent_account AS (

    SELECT
      account_id
    FROM sfdc_account
    WHERE account_id = ultimate_parent_account_id

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_rate_plan_charge_source

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7

), charge_to_order AS (

    SELECT 
      zuora_rate_plan_charge.rate_plan_charge_id,
      zuora_order_action.dim_order_id
    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_order_action_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_order_action_rate_plan.RatePlanId
    INNER JOIN zuora_order_action
      ON zuora_order_action_rate_plan.OrderActionId = zuora_order_action.dim_order_action_id
    group by 1,2

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendment_id                                      AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      ultimate_parent_account.account_id                                AS dim_parent_crm_account_id,
      charge_to_order.dim_order_id                                      AS dim_order_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_start_date::DATE,'YYYYMMDD'),'99999999')

  AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_end_date::DATE,'YYYYMMDD'),'99999999')

    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendment_type                                    AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN ultimate_parent_account
      ON sfdc_account.ultimate_parent_account_id = ultimate_parent_account.account_id
    LEFT JOIN charge_to_order
      ON zuora_rate_plan_charge.rate_plan_charge_id = charge_to_order.rate_plan_charge_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      MD5(-1)                                                                               AS dim_order_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_start_date::DATE,'YYYYMMDD'),'99999999')

                         AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_end_date::DATE,'YYYYMMDD'),'99999999')

                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN ultimate_parent_account
      ON sfdc_account.ultimate_parent_account_id = ultimate_parent_account.account_id


), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@nmcavinue'::VARCHAR       AS updated_by,
      '2022-04-13'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM arr_analysis_framework22:T73c,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_api_sandbox_contact','zuora_api_sandbox_contact_source')
]) }}

, zuora_api_sandbox_account AS (

    SELECT *
    FROM {{ref('zuora_api_sandbox_account_source')}}
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), filtered AS (

    SELECT
      zuora_api_sandbox_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      zuora_api_sandbox_account.account_number                          AS billing_account_number,
      zuora_api_sandbox_account.account_name                            AS billing_account_name,
      zuora_api_sandbox_account.status                                  AS account_status,
      zuora_api_sandbox_account.parent_id,
      zuora_api_sandbox_account.sfdc_account_code,
      zuora_api_sandbox_account.currency                                AS account_currency,
      zuora_api_sandbox_contact.country                                 AS sold_to_country,
      zuora_api_sandbox_account.is_deleted,
      zuora_api_sandbox_account.batch
    FROM zuora_api_sandbox_account
    LEFT JOIN zuora_api_sandbox_contact
      ON COALESCE(zuora_api_sandbox_account.sold_to_contact_id, zuora_api_sandbox_account.bill_to_contact_id) = zuora_api_sandbox_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

)

{{ dbt_audit(
    cte_ref="filtered",
    created_by="@ken_aguilar",
    updated_by="@ken_aguilar",
    created_date="2021-08-25",
    updated_date="2021-08-25"
) }}23:T86c,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_api_sandbox_contact AS (

    SELECT * 
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_contact_source

)

, zuora_api_sandbox_account AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_account_source
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), filtered AS (

    SELECT
      zuora_api_sandbox_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      zuora_api_sandbox_account.account_number                          AS billing_account_number,
      zuora_api_sandbox_account.account_name                            AS billing_account_name,
      zuora_api_sandbox_account.status                                  AS account_status,
      zuora_api_sandbox_account.parent_id,
      zuora_api_sandbox_account.sfdc_account_code,
      zuora_api_sandbox_account.currency                                AS account_currency,
      zuora_api_sandbox_contact.country                                 AS sold_to_country,
      zuora_api_sandbox_account.is_deleted,
      zuora_api_sandbox_account.batch
    FROM zuora_api_sandbox_account
    LEFT JOIN zuora_api_sandbox_contact
      ON COALESCE(zuora_api_sandbox_account.sold_to_contact_id, zuora_api_sandbox_account.bill_to_contact_id) = zuora_api_sandbox_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

)

SELECT
      *,
      '@ken_aguilar'::VARCHAR       AS created_by,
      '@ken_aguilar'::VARCHAR       AS updated_by,
      '2021-08-25'::DATE        AS model_created_date,
      '2021-08-25'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM filtered24:T950,{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account_source', 'zuora_account_source'),
    ('zuora_contact_source', 'zuora_contact_source'),
    ('zuora_query_api_users_source', 'zuora_query_api_users_source')
]) }}

, zuora_account AS (

    SELECT zuora_account_source.*
    FROM zuora_account_source
    LEFT JOIN zuora_contact_source AS bill_to_contact
      ON zuora_account_source.bill_to_contact_id = bill_to_contact.contact_id
    LEFT JOIN zuora_contact_source AS sold_to_contact
      ON sold_to_contact_id = sold_to_contact.contact_id
    LEFT JOIN zuora_query_api_users_source
      ON zuora_account_source.updated_by_id = zuora_query_api_users_source.zuora_user_id
    WHERE -- filters to remove known data quality issues based on feedback from Enterprise Apps
      LOWER(zuora_account_source.batch) != 'batch20'
      AND zuora_account_source.is_deleted = FALSE
      AND zuora_account_source.status != 'Canceled'
      AND (LOWER(bill_to_contact.work_email) NOT LIKE '%@gitlab.com%' AND LOWER(sold_to_contact.work_email) NOT LIKE '%@gitlab.com%')
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) IS NOT NULL
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) != '' -- sometimes these values look null, but are actually blank spaces
      AND zuora_query_api_users_source.email != 'svc_zuora_fulfillment_int@gitlab.com'

), final AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id_merged,
      zuora_account.crm_id                                  AS dim_crm_account_id_zuora,
      zuora_account.account_number                          AS billing_account_number
    FROM zuora_account
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE dim_crm_account_id_merged != dim_crm_account_id_zuora
      OR dim_crm_account_id_zuora IS NULL
      OR dim_crm_account_id_merged IS NULL

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2022-10-07",
    updated_date="2023-05-01"
) }}25:Tade,

WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), zuora_query_api_users_source AS (

    SELECT * 
    FROM "PREP".zuora_query_api.zuora_query_api_users_source

)

, zuora_account AS (

    SELECT zuora_account_source.*
    FROM zuora_account_source
    LEFT JOIN zuora_contact_source AS bill_to_contact
      ON zuora_account_source.bill_to_contact_id = bill_to_contact.contact_id
    LEFT JOIN zuora_contact_source AS sold_to_contact
      ON sold_to_contact_id = sold_to_contact.contact_id
    LEFT JOIN zuora_query_api_users_source
      ON zuora_account_source.updated_by_id = zuora_query_api_users_source.zuora_user_id
    WHERE -- filters to remove known data quality issues based on feedback from Enterprise Apps
      LOWER(zuora_account_source.batch) != 'batch20'
      AND zuora_account_source.is_deleted = FALSE
      AND zuora_account_source.status != 'Canceled'
      AND (LOWER(bill_to_contact.work_email) NOT LIKE '%@gitlab.com%' AND LOWER(sold_to_contact.work_email) NOT LIKE '%@gitlab.com%')
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) IS NOT NULL
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) != '' -- sometimes these values look null, but are actually blank spaces
      AND zuora_query_api_users_source.email != 'svc_zuora_fulfillment_int@gitlab.com'

), final AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id_merged,
      zuora_account.crm_id                                  AS dim_crm_account_id_zuora,
      zuora_account.account_number                          AS billing_account_number
    FROM zuora_account
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE dim_crm_account_id_merged != dim_crm_account_id_zuora
      OR dim_crm_account_id_zuora IS NULL
      OR dim_crm_account_id_merged IS NULL

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-10-07'::DATE        AS model_created_date,
      '2023-05-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final26:T6d30,



WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), prep_crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), sfdc_user_roles_source AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_user_roles_source

), crm_user AS (

    SELECT * 
    FROM
        "PROD".common.dim_crm_user_daily_snapshot
    
), snapshot_dates AS (

    SELECT *
    FROM "PROD".common.dim_date
    WHERE date_actual >= '2020-03-01' and date_actual <= CURRENT_DATE
    

   -- this filter will only be applied on an incremental run
   AND date_id > (SELECT max(snapshot_id) FROM "PROD".restricted_safe_common_prep.prep_crm_account_daily_snapshot)



), lam_corrections AS (

    SELECT
      snapshot_dates.date_id                  AS snapshot_id,
      dim_parent_crm_account_id               AS dim_parent_crm_account_id,
      dev_count                               AS dev_count,
      estimated_capped_lam                    AS estimated_capped_lam,
      dim_parent_crm_account_sales_segment    AS parent_crm_account_sales_segment
    FROM "PREP".driveload.driveload_lam_corrections_source
    INNER JOIN snapshot_dates
        ON snapshot_dates.date_actual >= valid_from
          AND snapshot_dates.date_actual < COALESCE(valid_to, '9999-12-31'::TIMESTAMP)

), sfdc_account AS (

    SELECT
        md5(cast(coalesce(cast(sfdc_account_snapshots_source.account_id as 
    varchar
), '') || '-' || coalesce(cast(snapshot_dates.date_id as 
    varchar
), '') as 
    varchar
))   AS crm_account_snapshot_id,
        snapshot_dates.date_id                                                                                AS snapshot_id,
        snapshot_dates.date_actual                                                                            AS snapshot_date,
        sfdc_account_snapshots_source.*
    FROM
        "PROD".legacy.sfdc_account_snapshots_source
         INNER JOIN snapshot_dates
           ON snapshot_dates.date_actual >= sfdc_account_snapshots_source.dbt_valid_from
           AND snapshot_dates.date_actual < COALESCE(sfdc_account_snapshots_source.dbt_valid_to, '9999-12-31'::TIMESTAMP)
    WHERE account_id IS NOT NULL
      

      AND snapshot_date > (SELECT MAX(snapshot_date) FROM "PROD".restricted_safe_common_prep.prep_crm_account_daily_snapshot)

      
      
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY 
          snapshot_id, 
          account_id 
        ORDER BY dbt_valid_from DESC
        ) = 1

    

), sfdc_users AS (

    SELECT
      md5(cast(coalesce(cast(sfdc_user_snapshots_source.user_id as 
    varchar
), '') || '-' || coalesce(cast(snapshot_dates.date_id as 
    varchar
), '') as 
    varchar
))    AS crm_user_snapshot_id,
      snapshot_dates.date_id                                                                           AS snapshot_id,
      sfdc_user_snapshots_source.*
    FROM
      "PROD".legacy.sfdc_user_snapshots_source
       INNER JOIN snapshot_dates
         ON snapshot_dates.date_actual >= sfdc_user_snapshots_source.dbt_valid_from
         AND snapshot_dates.date_actual < COALESCE(sfdc_user_snapshots_source.dbt_valid_to, '9999-12-31'::TIMESTAMP)

), sfdc_record_type AS (

    SELECT *
    FROM "PROD".legacy.sfdc_record_type

), pte_scores AS (

    SELECT 
      crm_account_id                                                                                           AS account_id,
      score                                                                                                    AS score,
      decile                                                                                                   AS decile,
      score_group                                                                                              AS score_group,
      MIN(score_date)                                                                                          AS valid_from,
      COALESCE(LEAD(valid_from) OVER (PARTITION BY crm_account_id ORDER BY valid_from), DATEADD('day',1,CURRENT_DATE())) AS valid_to,
      CASE 
        WHEN ROW_NUMBER() OVER (PARTITION BY crm_account_id ORDER BY valid_from DESC) = 1 
          THEN TRUE
        ELSE FALSE
      END                                                                                                      AS is_current
    FROM "PREP".data_science.pte_scores_source
    group by 1,2,3,4
    ORDER BY valid_from, valid_to


), ptc_scores AS (

    SELECT 
      crm_account_id                                                                                           AS account_id,
      score                                                                                                    AS score,
      decile                                                                                                   AS decile,
      score_group                                                                                              AS score_group,
      MIN(score_date)                                                                                          AS valid_from,
      COALESCE(LEAD(valid_from) OVER (PARTITION BY crm_account_id ORDER BY valid_from), DATEADD('day',1,CURRENT_DATE())) AS valid_to,
      CASE 
        WHEN ROW_NUMBER() OVER (PARTITION BY crm_account_id ORDER BY valid_from DESC) = 1 
          THEN TRUE
        ELSE FALSE
      END                                                                                                      AS is_current
    FROM "PREP".data_science.ptc_scores_source
    group by 1,2,3,4
    ORDER BY valid_from, valid_to

), final AS (

    SELECT
      --crm account information
      sfdc_account.crm_account_snapshot_id,
      sfdc_account.snapshot_id,
      sfdc_account.snapshot_date,
      --primary key
      sfdc_account.account_id                                             AS dim_crm_account_id,

      --surrogate keys
      sfdc_account.ultimate_parent_account_id                             AS dim_parent_crm_account_id,
      sfdc_account.owner_id                                               AS dim_crm_user_id,
      map_merged_crm_account.dim_crm_account_id                           AS merged_to_account_id,
      sfdc_account.record_type_id                                         AS record_type_id,
      account_owner.user_id                                               AS crm_account_owner_id,
      proposed_account_owner.user_id                                      AS proposed_crm_account_owner_id,
      technical_account_manager.user_id                                   AS technical_account_manager_id,
      sfdc_account.master_record_id,
      prep_crm_person.dim_crm_person_id                                   AS dim_crm_person_primary_contact_id,

      --account people
      account_owner.name                                                  AS account_owner,
      proposed_account_owner.name                                         AS proposed_crm_account_owner,
      technical_account_manager.name                                      AS technical_account_manager,

      -- account owner fields
      account_owner.user_segment                                          AS crm_account_owner_sales_segment,
      account_owner.user_geo                                              AS crm_account_owner_geo,
      account_owner.user_region                                           AS crm_account_owner_region,
      account_owner.user_area                                             AS crm_account_owner_area,
      account_owner.user_segment_geo_region_area                          AS crm_account_owner_sales_segment_geo_region_area,
      account_owner.title                                                 AS crm_account_owner_title,
      sfdc_user_roles_source.name                                         AS crm_account_owner_role,

      ----ultimate parent crm account info
       sfdc_account.ultimate_parent_account_name                          AS parent_crm_account_name,

      --descriptive attributes
      sfdc_account.account_name                                           AS crm_account_name,
      sfdc_account.account_sales_segment                                  AS parent_crm_account_sales_segment,
      sfdc_account.account_geo                                            AS parent_crm_account_geo,
      sfdc_account.account_region                                         AS parent_crm_account_region,
      sfdc_account.account_area                                           AS parent_crm_account_area,
      sfdc_account.account_territory                                      AS parent_crm_account_territory,
      sfdc_account.account_business_unit                                  AS parent_crm_account_business_unit,
      sfdc_account.account_role_type                                      AS parent_crm_account_role_type,
      sfdc_account.account_max_family_employee                            AS parent_crm_account_max_family_employee,
      sfdc_account.account_upa_country                                    AS parent_crm_account_upa_country,
      sfdc_account.account_upa_state                                      AS parent_crm_account_upa_state,
      sfdc_account.account_upa_city                                       AS parent_crm_account_upa_city,
      sfdc_account.account_upa_street                                     AS parent_crm_account_upa_street,
      sfdc_account.account_upa_postal_code                                AS parent_crm_account_upa_postal_code,
      sfdc_account.account_employee_count                                 AS crm_account_employee_count,
      sfdc_account.parent_account_industry_hierarchy                      AS parent_crm_account_industry,
      sfdc_account.gtm_strategy                                           AS crm_account_gtm_strategy,
      CASE 
        WHEN sfdc_account.account_sales_segment IN ('Large', 'PubSec') THEN 'Large'
        WHEN sfdc_account.account_sales_segment = 'Unknown' THEN 'SMB'
        ELSE sfdc_account.account_sales_segment
      END                                                                 AS parent_crm_account_sales_segment_grouped,
      CASE 
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) = 'AMER' AND UPPER(sfdc_account.account_region) = 'WEST'
    THEN 'US WEST'
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) IN ('AMER', 'LATAM') AND UPPER(sfdc_account.account_region) IN ('EAST', 'LATAM')
    THEN 'US EAST'
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) IN ('APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN sfdc_account.account_geo
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_region) = 'PUBSEC'
    THEN 'PUBSEC'
  WHEN UPPER(sfdc_account.account_sales_segment) IN ('LARGE', 'PUBSEC') AND UPPER(sfdc_account.account_geo) NOT IN ('WEST', 'EAST', 'APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN 'LARGE OTHER'
  WHEN UPPER(sfdc_account.account_sales_segment) NOT IN ('LARGE', 'PUBSEC')
    THEN sfdc_account.account_sales_segment
  ELSE 'Missing segment_region_grouped'
END AS parent_crm_account_segment_region_stamped_grouped,
      CASE
        WHEN LOWER(sfdc_account.gtm_strategy) IN ('account centric', 'account based - net new', 'account based - expand') THEN 'Focus Account'
        ELSE 'Non - Focus Account'
      END                                                                 AS crm_account_focus_account,
      sfdc_account.account_owner_user_segment                             AS crm_account_owner_user_segment,
      sfdc_account.billing_country                                        AS crm_account_billing_country,
      sfdc_account.billing_country_code                                   AS crm_account_billing_country_code,
      sfdc_account.account_type                                           AS crm_account_type,
      sfdc_account.industry                                               AS crm_account_industry,
      sfdc_account.sub_industry                                           AS crm_account_sub_industry,
      sfdc_account.account_owner                                          AS crm_account_owner,
      CASE
         WHEN sfdc_account.account_max_family_employee > 2000 THEN 'Employees > 2K'
         WHEN sfdc_account.account_max_family_employee <= 2000 AND sfdc_account.account_max_family_employee > 1500 THEN 'Employees > 1.5K'
         WHEN sfdc_account.account_max_family_employee <= 1500 AND sfdc_account.account_max_family_employee > 1000  THEN 'Employees > 1K'
         ELSE 'Employees < 1K'
      END                                                                 AS crm_account_employee_count_band,
      sfdc_account.partner_vat_tax_id,
      sfdc_account.account_manager,
      sfdc_account.business_development_rep,
      sfdc_account.dedicated_service_engineer,
      sfdc_account.account_tier,
      sfdc_account.account_tier_notes,
      sfdc_account.license_utilization,
      sfdc_account.support_level,
      sfdc_account.named_account,
      sfdc_account.billing_postal_code,
      sfdc_account.partner_type,
      sfdc_account.partner_status,
      sfdc_account.gitlab_customer_success_project,
      sfdc_account.demandbase_account_list,
      sfdc_account.demandbase_intent,
      sfdc_account.demandbase_page_views,
      sfdc_account.demandbase_score,
      sfdc_account.demandbase_sessions,
      sfdc_account.demandbase_trending_offsite_intent,
      sfdc_account.demandbase_trending_onsite_engagement,
      sfdc_account.is_locally_managed_account,
      sfdc_account.is_strategic_account,
      sfdc_account.partner_track,
      sfdc_account.partners_partner_type,
      sfdc_account.gitlab_partner_program,
      sfdc_account.zoom_info_company_name,
      sfdc_account.zoom_info_company_revenue,
      sfdc_account.zoom_info_company_employee_count,
      sfdc_account.zoom_info_company_industry,
      sfdc_account.zoom_info_company_city,
      sfdc_account.zoom_info_company_state_province,
      sfdc_account.zoom_info_company_country,
      sfdc_account.account_phone,
      sfdc_account.zoominfo_account_phone,
      sfdc_account.abm_tier,
      sfdc_account.health_number,
      sfdc_account.health_score_color,
      sfdc_account.partner_account_iban_number,
      sfdc_account.gitlab_com_user,
      sfdc_account.zi_technologies                                        AS crm_account_zi_technologies,
      sfdc_account.zoom_info_website                                      AS crm_account_zoom_info_website,
      sfdc_account.zoom_info_company_other_domains                        AS crm_account_zoom_info_company_other_domains,
      sfdc_account.zoom_info_dozisf_zi_id                                 AS crm_account_zoom_info_dozisf_zi_id,
      sfdc_account.zoom_info_parent_company_zi_id                         AS crm_account_zoom_info_parent_company_zi_id,
      sfdc_account.zoom_info_parent_company_name                          AS crm_account_zoom_info_parent_company_name,
      sfdc_account.zoom_info_ultimate_parent_company_zi_id                AS crm_account_zoom_info_ultimate_parent_company_zi_id,
      sfdc_account.zoom_info_ultimate_parent_company_name                 AS crm_account_zoom_info_ultimate_parent_company_name,
      sfdc_account.zoom_info_number_of_developers                         AS crm_account_zoom_info_number_of_developers,
      sfdc_account.zoom_info_total_funding                                AS crm_account_zoom_info_total_funding,
      sfdc_account.forbes_2000_rank,
      sfdc_account.parent_account_industry_hierarchy,
      sfdc_account.sales_development_rep,
      sfdc_account.admin_manual_source_number_of_employees,
      sfdc_account.admin_manual_source_account_address,
      sfdc_account.eoa_sentiment,
      sfdc_account.gs_health_user_engagement,
      sfdc_account.gs_health_cd,
      sfdc_account.gs_health_devsecops,
      sfdc_account.gs_health_ci,
      sfdc_account.gs_health_scm,
      sfdc_account.risk_impact,
      sfdc_account.risk_reason,
      sfdc_account.last_timeline_at_risk_update,
      sfdc_account.last_at_risk_update_comments,
      sfdc_account.bdr_prospecting_status,

      --degenerative dimensions
      sfdc_account.is_sdr_target_account,
      IFF(sfdc_record_type.record_type_label = 'Partner'
          AND sfdc_account.partner_type IN ('Alliance', 'Channel')
          AND sfdc_account.partner_status = 'Authorized',
          TRUE, FALSE)                                                    AS is_reseller,
      sfdc_account.is_jihu_account                                        AS is_jihu_account,
      sfdc_account.is_first_order_available,
      sfdc_account.is_key_account                                         AS is_key_account,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies,'ARE_USED: Jenkins')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_jenkins_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: SVN')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_svn_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Tortoise SVN')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_tortoise_svn_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Google Cloud Platform')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_gcp_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Atlassian')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_atlassian_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: GitHub')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_github_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: GitHub Enterprise')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_github_enterprise_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: AWS')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_aws_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Kubernetes')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_kubernetes_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Apache Subversion')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_apache_subversion_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Apache Subversion (SVN)')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_apache_subversion_svn_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Hashicorp')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_hashicorp_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: Amazon AWS CloudTrail')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_aws_cloud_trail_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: CircleCI')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_circle_ci_present,
      CASE
        WHEN CONTAINS (sfdc_account.zi_technologies, 'ARE_USED: BitBucket')
          THEN 1
        ELSE 0
      END                                                                 AS is_zi_bit_bucket_present,
      sfdc_account.is_excluded_from_zoom_info_enrich,

      --dates
      

  TO_NUMBER(TO_CHAR(sfdc_account.created_date::DATE,'YYYYMMDD'),'99999999')

                      AS crm_account_created_date_id,
      sfdc_account.created_date                                           AS crm_account_created_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.abm_tier_1_date::DATE,'YYYYMMDD'),'99999999')

                   AS abm_tier_1_date_id,
      sfdc_account.abm_tier_1_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.abm_tier_2_date::DATE,'YYYYMMDD'),'99999999')

                   AS abm_tier_2_date_id,
      sfdc_account.abm_tier_2_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.abm_tier_3_date::DATE,'YYYYMMDD'),'99999999')

                   AS abm_tier_3_date_id,
      sfdc_account.abm_tier_3_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gtm_acceleration_date::DATE,'YYYYMMDD'),'99999999')

             AS gtm_acceleration_date_id,
      sfdc_account.gtm_acceleration_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gtm_account_based_date::DATE,'YYYYMMDD'),'99999999')

            AS gtm_account_based_date_id,
      sfdc_account.gtm_account_based_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gtm_account_centric_date::DATE,'YYYYMMDD'),'99999999')

          AS gtm_account_centric_date_id,
      sfdc_account.gtm_account_centric_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.partners_signed_contract_date::DATE,'YYYYMMDD'),'99999999')

     AS partners_signed_contract_date_id,
      CAST(sfdc_account.partners_signed_contract_date AS date)            AS partners_signed_contract_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.technical_account_manager_date::DATE,'YYYYMMDD'),'99999999')

    AS technical_account_manager_date_id,
      sfdc_account.technical_account_manager_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.customer_since_date::DATE,'YYYYMMDD'),'99999999')

               AS customer_since_date_id,
      sfdc_account.customer_since_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.next_renewal_date::DATE,'YYYYMMDD'),'99999999')

                 AS next_renewal_date_id,
      sfdc_account.next_renewal_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gs_first_value_date::DATE,'YYYYMMDD'),'99999999')

               AS gs_first_value_date_id,
      sfdc_account.gs_first_value_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.gs_last_csm_activity_date::DATE,'YYYYMMDD'),'99999999')

         AS gs_last_csm_activity_date_id,
      sfdc_account.gs_last_csm_activity_date,


      --measures
      sfdc_account.count_active_subscription_charges,
      sfdc_account.count_active_subscriptions,
      sfdc_account.count_billing_accounts,
      sfdc_account.count_licensed_users,
      sfdc_account.count_of_new_business_won_opportunities,
      sfdc_account.count_open_renewal_opportunities,
      sfdc_account.count_opportunities,
      sfdc_account.count_products_purchased,
      sfdc_account.count_won_opportunities,
      sfdc_account.count_concurrent_ee_subscriptions,
      sfdc_account.count_ce_instances,
      sfdc_account.count_active_ce_users,
      sfdc_account.count_open_opportunities,
      sfdc_account.count_using_ce,
      sfdc_account.carr_this_account,
      sfdc_account.carr_account_family,
      sfdc_account.potential_users,
      sfdc_account.number_of_licenses_this_account,
      sfdc_account.decision_maker_count_linkedin,
      sfdc_account.number_of_employees,
      crm_user.crm_user_role_type                                         AS user_role_type,
      crm_user.user_role_name                                             AS owner_role,
      IFNULL(lam_corrections.estimated_capped_lam, sfdc_account.lam)      AS parent_crm_account_lam,
      IFNULL(lam_corrections.dev_count, sfdc_account.lam_dev_count)       AS parent_crm_account_lam_dev_count,

      -- PtC and PtE 
      pte_scores.score                                               AS pte_score,
      pte_scores.decile                                              AS pte_decile,
      pte_scores.score_group                                         AS pte_score_group,
      ptc_scores.score                                               AS ptc_score,
      ptc_scores.decile                                              AS ptc_decile,
      ptc_scores.score_group                                         AS ptc_score_group,


      --metadata
      sfdc_account.created_by_id,
      created_by.name                                                     AS created_by_name,
      sfdc_account.last_modified_by_id,
      last_modified_by.name                                               AS last_modified_by_name,
      

  TO_NUMBER(TO_CHAR(sfdc_account.last_modified_date::DATE,'YYYYMMDD'),'99999999')

                AS last_modified_date_id,
      sfdc_account.last_modified_date,
      

  TO_NUMBER(TO_CHAR(sfdc_account.last_activity_date::DATE,'YYYYMMDD'),'99999999')

                AS last_activity_date_id,
      sfdc_account.last_activity_date,
      sfdc_account.is_deleted

    FROM sfdc_account
    LEFT JOIN map_merged_crm_account
      ON sfdc_account.account_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_record_type
      ON sfdc_account.record_type_id = sfdc_record_type.record_type_id
    LEFT JOIN prep_crm_person
      ON sfdc_account.primary_contact_id = prep_crm_person.sfdc_record_id
    LEFT OUTER JOIN sfdc_users AS technical_account_manager
      ON sfdc_account.technical_account_manager_id = technical_account_manager.user_id
        AND sfdc_account.snapshot_id = technical_account_manager.snapshot_id
    LEFT JOIN sfdc_users AS account_owner
      ON account_owner.user_id = sfdc_account.owner_id
        AND account_owner.snapshot_id = sfdc_account.snapshot_id
    LEFT JOIN sfdc_users AS proposed_account_owner
      ON proposed_account_owner.user_id = sfdc_account.proposed_account_owner
        AND proposed_account_owner.snapshot_id = sfdc_account.snapshot_id
    LEFT JOIN lam_corrections
      ON sfdc_account.ultimate_parent_account_id = lam_corrections.dim_parent_crm_account_id
        AND sfdc_account.snapshot_id = lam_corrections.snapshot_id
        AND sfdc_account.account_sales_segment = lam_corrections.parent_crm_account_sales_segment
    LEFT JOIN sfdc_users AS created_by
      ON sfdc_account.created_by_id = created_by.user_id
        AND sfdc_account.snapshot_id = created_by.snapshot_id
    LEFT JOIN sfdc_users AS last_modified_by
      ON sfdc_account.last_modified_by_id = last_modified_by.user_id
        AND sfdc_account.snapshot_id = last_modified_by.snapshot_id
    LEFT JOIN pte_scores 
      ON sfdc_account.account_id = pte_scores.account_id
        AND sfdc_account.snapshot_date >= pte_scores.valid_from::DATE
        AND  sfdc_account.snapshot_date < pte_scores.valid_to::DATE
    LEFT JOIN ptc_scores 
      ON sfdc_account.account_id = ptc_scores.account_id
        AND sfdc_account.snapshot_date >= ptc_scores.valid_from::DATE
        AND  sfdc_account.snapshot_date < ptc_scores.valid_to::DATE
    LEFT JOIN crm_user
      ON sfdc_account.owner_id = crm_user.dim_crm_user_id
        AND sfdc_account.snapshot_id = crm_user.snapshot_id
     LEFT JOIN sfdc_user_roles_source
      ON account_owner.user_role_id = sfdc_user_roles_source.id


)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2023-03-27'::DATE        AS model_created_date,
      '2023-03-27'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM final27:T1704,{{ config(
    tags=["mnpi_exception"]
) }}

WITH date_details AS (

    SELECT *
    FROM {{ ref('date_details') }}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_central_sandbox_subscription AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_central_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM {{ ref('zuora_central_sandbox_account_source') }}

), joined AS (

    SELECT
      zuora_central_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                                 AS dim_crm_account_id,
      zuora_central_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_central_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_central_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_central_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_central_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_central_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_central_sandbox_subscription.created_by_id,
      zuora_central_sandbox_subscription.updated_by_id,
      zuora_central_sandbox_subscription.subscription_name,
      zuora_central_sandbox_subscription.subscription_name_slugify,
      zuora_central_sandbox_subscription.subscription_status,
      zuora_central_sandbox_subscription.version                                                AS subscription_version,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_central_sandbox_subscription.current_term,
      zuora_central_sandbox_subscription.renewal_term,
      zuora_central_sandbox_subscription.renewal_term_period_type,
      zuora_central_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_central_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                     AS subscription_sales_type,

      --Date Information
      zuora_central_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_central_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_central_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_central_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_central_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_central_sandbox_subscription.current_term, zuora_central_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                       AS second_active_renewal_month,
      zuora_central_sandbox_subscription.auto_renew_native_hist,
      zuora_central_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_central_sandbox_subscription.turn_on_cloud_licensing,
      zuora_central_sandbox_subscription.contract_auto_renewal,
      zuora_central_sandbox_subscription.turn_on_auto_renewal,
      zuora_central_sandbox_subscription.contract_seat_reconciliation,
      zuora_central_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_central_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_central_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date,
      zuora_central_sandbox_subscription.turn_on_operational_metrics,
      zuora_central_sandbox_subscription.contract_operational_metrics
    FROM zuora_central_sandbox_subscription
    INNER JOIN zuora_central_sandbox_account
      ON zuora_central_sandbox_subscription.account_id = zuora_central_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_central_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2022-03-31",
    updated_date="2022-04-13"
) }}28:T1804,

WITH date_details AS (

    SELECT *
    FROM "PROD".legacy.date_details

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_central_sandbox_subscription AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_central_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_account_source

), joined AS (

    SELECT
      zuora_central_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                                 AS dim_crm_account_id,
      zuora_central_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_central_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_central_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_central_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_central_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_central_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_central_sandbox_subscription.created_by_id,
      zuora_central_sandbox_subscription.updated_by_id,
      zuora_central_sandbox_subscription.subscription_name,
      zuora_central_sandbox_subscription.subscription_name_slugify,
      zuora_central_sandbox_subscription.subscription_status,
      zuora_central_sandbox_subscription.version                                                AS subscription_version,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_central_sandbox_subscription.current_term,
      zuora_central_sandbox_subscription.renewal_term,
      zuora_central_sandbox_subscription.renewal_term_period_type,
      zuora_central_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_central_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                     AS subscription_sales_type,

      --Date Information
      zuora_central_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_central_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_central_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_central_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_central_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_central_sandbox_subscription.current_term, zuora_central_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                       AS second_active_renewal_month,
      zuora_central_sandbox_subscription.auto_renew_native_hist,
      zuora_central_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_central_sandbox_subscription.turn_on_cloud_licensing,
      zuora_central_sandbox_subscription.contract_auto_renewal,
      zuora_central_sandbox_subscription.turn_on_auto_renewal,
      zuora_central_sandbox_subscription.contract_seat_reconciliation,
      zuora_central_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_central_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_central_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date,
      zuora_central_sandbox_subscription.turn_on_operational_metrics,
      zuora_central_sandbox_subscription.contract_operational_metrics
    FROM zuora_central_sandbox_subscription
    INNER JOIN zuora_central_sandbox_account
      ON zuora_central_sandbox_subscription.account_id = zuora_central_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_central_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-03-31'::DATE        AS model_created_date,
      '2022-04-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined29:T1a1c,{{ config(
    tags=["mnpi"]
) }}

/* grain: one record per subscription per month */
WITH dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_api_sandbox_account AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_account_source') }}
    WHERE is_deleted = FALSE
    --Keep the Batch20 test accounts since they would be in scope for this sandbox model.
      --AND LOWER(batch) != 'batch20'

), zuora_api_sandbox_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_rate_plan_source') }}

), zuora_api_sandbox_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_rate_plan_charge_source') }}
    WHERE charge_type = 'Recurring'

), zuora_api_sandbox_subscription AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')
      AND subscription_status NOT IN ('Draft')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_api_sandbox_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), manual_arr_true_up_allocation AS (

    SELECT *
    FROM {{ ref('sheetload_manual_arr_true_up_allocation_source') }}

), manual_charges AS ( -- added as a work around until there is an automated method for adding true-up adjustments to Zuora Revenue/Zuora Billing

    SELECT
      manual_arr_true_up_allocation.account_id                                    AS billing_account_id,
      map_merged_crm_account.dim_crm_account_id                                   AS crm_account_id,
      MD5(manual_arr_true_up_allocation.rate_plan_charge_id)                      AS rate_plan_charge_id,
      active_zuora_subscription.subscription_id                                   AS subscription_id,
      active_zuora_subscription.subscription_name                                 AS subscription_name,
      active_zuora_subscription.subscription_status                               AS subscription_status,
      manual_arr_true_up_allocation.dim_product_detail_id                         AS product_details_id,
      manual_arr_true_up_allocation.mrr                                           AS mrr,
      NULL                                                                        AS delta_tcv,
      manual_arr_true_up_allocation.unit_of_measure                               AS unit_of_measure,
      0                                                                           AS quantity,
      DATE_TRUNC('month', effective_start_date)                                   AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                     AS effective_end_month
    FROM manual_arr_true_up_allocation
    INNER JOIN active_zuora_subscription
      ON manual_arr_true_up_allocation.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_api_sandbox_account
      ON active_zuora_subscription.account_id = zuora_api_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

), rate_plan_charge_filtered AS (

    SELECT
      zuora_api_sandbox_account.account_id                                        AS billing_account_id,
      map_merged_crm_account.dim_crm_account_id                                   AS crm_account_id,
      zuora_api_sandbox_rate_plan_charge.rate_plan_charge_id,
      zuora_api_sandbox_subscription.subscription_id,
      zuora_api_sandbox_subscription.subscription_name,
      zuora_api_sandbox_subscription.subscription_status,
      zuora_api_sandbox_rate_plan_charge.product_rate_plan_charge_id              AS product_details_id,
      zuora_api_sandbox_rate_plan_charge.mrr,
      zuora_api_sandbox_rate_plan_charge.delta_tcv,
      zuora_api_sandbox_rate_plan_charge.unit_of_measure,
      zuora_api_sandbox_rate_plan_charge.quantity,
      zuora_api_sandbox_rate_plan_charge.effective_start_month,
      zuora_api_sandbox_rate_plan_charge.effective_end_month
    FROM zuora_api_sandbox_rate_plan_charge
    INNER JOIN zuora_api_sandbox_rate_plan
      ON zuora_api_sandbox_rate_plan.rate_plan_id = zuora_api_sandbox_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_api_sandbox_subscription
      ON zuora_api_sandbox_rate_plan.subscription_id = zuora_api_sandbox_subscription.subscription_id
    INNER JOIN zuora_api_sandbox_account
      ON zuora_api_sandbox_account.account_id = zuora_api_sandbox_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

), combined_rate_plans AS (

    SELECT *
    FROM rate_plan_charge_filtered

    UNION

    SELECT *
    FROM manual_charges

), mrr_month_by_month AS (

    SELECT
      dim_date.date_id,
      billing_account_id,
      crm_account_id,
      subscription_id,
      subscription_name,
      subscription_status,
      product_details_id,
      rate_plan_charge_id,
      SUM(mrr)                                                           AS mrr,
      SUM(mrr)* 12                                                       AS arr,
      SUM(quantity)                                                      AS quantity,
      ARRAY_AGG(combined_rate_plans.unit_of_measure)                     AS unit_of_measure
    FROM combined_rate_plans
    INNER JOIN dim_date
      ON combined_rate_plans.effective_start_month <= dim_date.date_actual
      AND (combined_rate_plans.effective_end_month > dim_date.date_actual
        OR combined_rate_plans.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    {{ dbt_utils.group_by(n=8) }}

), final AS (

  SELECT
    {{ dbt_utils.surrogate_key(['date_id','rate_plan_charge_id']) }}     AS mrr_id,
    date_id                                                              AS dim_date_id,
    billing_account_id                                                   AS dim_billing_account_id,
    crm_account_id                                                       AS dim_crm_account_id,
    subscription_id                                                      AS dim_subscription_id,
    product_details_id                                                   AS dim_product_detail_id,
    rate_plan_charge_id                                                  AS dim_charge_id,
    subscription_status,
    mrr,
    arr,
    quantity,
    unit_of_measure
  FROM mrr_month_by_month

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ken_aguilar",
    updated_by="@ken_aguilar",
    created_date="2021-09-02",
    updated_date="2021-09-02",
) }}2a:T1b7f,

/* grain: one record per subscription per month */
WITH dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_api_sandbox_account AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_account_source
    WHERE is_deleted = FALSE
    --Keep the Batch20 test accounts since they would be in scope for this sandbox model.
      --AND LOWER(batch) != 'batch20'

), zuora_api_sandbox_rate_plan AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_rate_plan_source

), zuora_api_sandbox_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_rate_plan_charge_source
    WHERE charge_type = 'Recurring'

), zuora_api_sandbox_subscription AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')
      AND subscription_status NOT IN ('Draft')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_api_sandbox_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), manual_arr_true_up_allocation AS (

    SELECT *
    FROM "PREP".sheetload.sheetload_manual_arr_true_up_allocation_source

), manual_charges AS ( -- added as a work around until there is an automated method for adding true-up adjustments to Zuora Revenue/Zuora Billing

    SELECT
      manual_arr_true_up_allocation.account_id                                    AS billing_account_id,
      map_merged_crm_account.dim_crm_account_id                                   AS crm_account_id,
      MD5(manual_arr_true_up_allocation.rate_plan_charge_id)                      AS rate_plan_charge_id,
      active_zuora_subscription.subscription_id                                   AS subscription_id,
      active_zuora_subscription.subscription_name                                 AS subscription_name,
      active_zuora_subscription.subscription_status                               AS subscription_status,
      manual_arr_true_up_allocation.dim_product_detail_id                         AS product_details_id,
      manual_arr_true_up_allocation.mrr                                           AS mrr,
      NULL                                                                        AS delta_tcv,
      manual_arr_true_up_allocation.unit_of_measure                               AS unit_of_measure,
      0                                                                           AS quantity,
      DATE_TRUNC('month', effective_start_date)                                   AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                     AS effective_end_month
    FROM manual_arr_true_up_allocation
    INNER JOIN active_zuora_subscription
      ON manual_arr_true_up_allocation.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_api_sandbox_account
      ON active_zuora_subscription.account_id = zuora_api_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

), rate_plan_charge_filtered AS (

    SELECT
      zuora_api_sandbox_account.account_id                                        AS billing_account_id,
      map_merged_crm_account.dim_crm_account_id                                   AS crm_account_id,
      zuora_api_sandbox_rate_plan_charge.rate_plan_charge_id,
      zuora_api_sandbox_subscription.subscription_id,
      zuora_api_sandbox_subscription.subscription_name,
      zuora_api_sandbox_subscription.subscription_status,
      zuora_api_sandbox_rate_plan_charge.product_rate_plan_charge_id              AS product_details_id,
      zuora_api_sandbox_rate_plan_charge.mrr,
      zuora_api_sandbox_rate_plan_charge.delta_tcv,
      zuora_api_sandbox_rate_plan_charge.unit_of_measure,
      zuora_api_sandbox_rate_plan_charge.quantity,
      zuora_api_sandbox_rate_plan_charge.effective_start_month,
      zuora_api_sandbox_rate_plan_charge.effective_end_month
    FROM zuora_api_sandbox_rate_plan_charge
    INNER JOIN zuora_api_sandbox_rate_plan
      ON zuora_api_sandbox_rate_plan.rate_plan_id = zuora_api_sandbox_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_api_sandbox_subscription
      ON zuora_api_sandbox_rate_plan.subscription_id = zuora_api_sandbox_subscription.subscription_id
    INNER JOIN zuora_api_sandbox_account
      ON zuora_api_sandbox_account.account_id = zuora_api_sandbox_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

), combined_rate_plans AS (

    SELECT *
    FROM rate_plan_charge_filtered

    UNION

    SELECT *
    FROM manual_charges

), mrr_month_by_month AS (

    SELECT
      dim_date.date_id,
      billing_account_id,
      crm_account_id,
      subscription_id,
      subscription_name,
      subscription_status,
      product_details_id,
      rate_plan_charge_id,
      SUM(mrr)                                                           AS mrr,
      SUM(mrr)* 12                                                       AS arr,
      SUM(quantity)                                                      AS quantity,
      ARRAY_AGG(combined_rate_plans.unit_of_measure)                     AS unit_of_measure
    FROM combined_rate_plans
    INNER JOIN dim_date
      ON combined_rate_plans.effective_start_month <= dim_date.date_actual
      AND (combined_rate_plans.effective_end_month > dim_date.date_actual
        OR combined_rate_plans.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    group by 1,2,3,4,5,6,7,8

), final AS (

  SELECT
    md5(cast(coalesce(cast(date_id as 
    varchar
), '') || '-' || coalesce(cast(rate_plan_charge_id as 
    varchar
), '') as 
    varchar
))     AS mrr_id,
    date_id                                                              AS dim_date_id,
    billing_account_id                                                   AS dim_billing_account_id,
    crm_account_id                                                       AS dim_crm_account_id,
    subscription_id                                                      AS dim_subscription_id,
    product_details_id                                                   AS dim_product_detail_id,
    rate_plan_charge_id                                                  AS dim_charge_id,
    subscription_status,
    mrr,
    arr,
    quantity,
    unit_of_measure
  FROM mrr_month_by_month

)

SELECT
      *,
      '@ken_aguilar'::VARCHAR       AS created_by,
      '@ken_aguilar'::VARCHAR       AS updated_by,
      '2021-09-02'::DATE        AS model_created_date,
      '2021-09-02'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final2b:T2493,{{ config(
    tags=["mnpi"]
) }}

/* grain: one record per subscription per month */
WITH dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_central_sandbox_account AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_account_source') }}
    WHERE is_deleted = FALSE
    --Keep the Batch20 test accounts since they would be in scope for this sandbox model.
      --AND LOWER(batch) != 'batch20'

), zuora_central_sandbox_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_rate_plan_source') }}

), zuora_central_sandbox_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_rate_plan_charge_source') }}
    WHERE charge_type = 'Recurring'

), zuora_central_sandbox_subscription AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')
      AND subscription_status NOT IN ('Draft')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_central_sandbox_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_line_source') }}

), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}
  
), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_central_sandbox_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                              AS dim_charge_id,
      active_zuora_subscription.subscription_id             AS dim_subscription_id,
      active_zuora_subscription.subscription_name           AS subscription_name,
      active_zuora_subscription.subscription_status         AS subscription_status,
      product_rate_plan_charge_id                           AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                  AS revenue_end_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_central_sandbox_account
      ON revenue_contract_line.customer_number = zuora_central_sandbox_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      SUM(mje.adjustment)               AS adjustment,
      MIN(revenue_start_date)           AS revenue_start_date,
      MAX(revenue_end_date)             AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}
  
), manual_charges AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      DATE_TRUNC('month',revenue_start_date::date)                                          AS effective_start_month,
      DATE_TRUNC('month',DATEADD('day',1,revenue_end_date::date))                           AS effective_end_month
    FROM true_up_lines_subcription_grain

), rate_plan_charge_filtered AS (

    SELECT
      zuora_central_sandbox_account.account_id                            AS billing_account_id,
      map_merged_crm_account.dim_crm_account_id           AS crm_account_id,
      zuora_central_sandbox_rate_plan_charge.rate_plan_charge_id,
      zuora_central_sandbox_subscription.subscription_id,
      zuora_central_sandbox_subscription.subscription_name,
      zuora_central_sandbox_subscription.subscription_status,
      zuora_central_sandbox_rate_plan_charge.product_rate_plan_charge_id  AS product_details_id,
      zuora_central_sandbox_rate_plan_charge.mrr,
      zuora_central_sandbox_rate_plan_charge.delta_tcv,
      zuora_central_sandbox_rate_plan_charge.unit_of_measure,
      zuora_central_sandbox_rate_plan_charge.quantity,
      zuora_central_sandbox_rate_plan_charge.effective_start_month,
      zuora_central_sandbox_rate_plan_charge.effective_end_month
    FROM zuora_central_sandbox_rate_plan_charge
    INNER JOIN zuora_central_sandbox_rate_plan
      ON zuora_central_sandbox_rate_plan.rate_plan_id = zuora_central_sandbox_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_central_sandbox_subscription
      ON zuora_central_sandbox_rate_plan.subscription_id = zuora_central_sandbox_subscription.subscription_id
    INNER JOIN zuora_central_sandbox_account
      ON zuora_central_sandbox_account.account_id = zuora_central_sandbox_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

), combined_rate_plans AS (

    SELECT *
    FROM rate_plan_charge_filtered

    UNION

    SELECT *
    FROM manual_charges

), mrr_month_by_month AS (

    SELECT
      dim_date.date_id,
      billing_account_id,
      crm_account_id,
      subscription_id,
      subscription_name,
      subscription_status,
      product_details_id,
      rate_plan_charge_id,
      SUM(mrr)                                             AS mrr,
      SUM(mrr)* 12                                         AS arr,
      SUM(quantity)                                        AS quantity,
      ARRAY_AGG(combined_rate_plans.unit_of_measure)       AS unit_of_measure
    FROM combined_rate_plans
    INNER JOIN dim_date
      ON combined_rate_plans.effective_start_month <= dim_date.date_actual
      AND (combined_rate_plans.effective_end_month > dim_date.date_actual
        OR combined_rate_plans.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    {{ dbt_utils.group_by(n=8) }}

), final AS (

  SELECT
    {{ dbt_utils.surrogate_key(['date_id','rate_plan_charge_id']) }}                        AS mrr_id,
    date_id                                                                                 AS dim_date_id,
    billing_account_id                                                                      AS dim_billing_account_id,
    crm_account_id                                                                          AS dim_crm_account_id,
    subscription_id                                                                         AS dim_subscription_id,
    product_details_id                                                                      AS dim_product_detail_id,
    rate_plan_charge_id                                                                     AS dim_charge_id,
    subscription_status,
    mrr,
    arr,
    quantity,
    unit_of_measure
  FROM mrr_month_by_month

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2022-03-31",
    updated_date="2022-03-31",
) }}2c:T25f8,

/* grain: one record per subscription per month */
WITH dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_central_sandbox_account AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_account_source
    WHERE is_deleted = FALSE
    --Keep the Batch20 test accounts since they would be in scope for this sandbox model.
      --AND LOWER(batch) != 'batch20'

), zuora_central_sandbox_rate_plan AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_rate_plan_source

), zuora_central_sandbox_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_rate_plan_charge_source
    WHERE charge_type = 'Recurring'

), zuora_central_sandbox_subscription AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')
      AND subscription_status NOT IN ('Draft')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_central_sandbox_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source

), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source
  
), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_central_sandbox_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                              AS dim_charge_id,
      active_zuora_subscription.subscription_id             AS dim_subscription_id,
      active_zuora_subscription.subscription_name           AS subscription_name,
      active_zuora_subscription.subscription_status         AS subscription_status,
      product_rate_plan_charge_id                           AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                  AS revenue_end_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_central_sandbox_account
      ON revenue_contract_line.customer_number = zuora_central_sandbox_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      SUM(mje.adjustment)               AS adjustment,
      MIN(revenue_start_date)           AS revenue_start_date,
      MAX(revenue_end_date)             AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7
  
), manual_charges AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      DATE_TRUNC('month',revenue_start_date::date)                                          AS effective_start_month,
      DATE_TRUNC('month',DATEADD('day',1,revenue_end_date::date))                           AS effective_end_month
    FROM true_up_lines_subcription_grain

), rate_plan_charge_filtered AS (

    SELECT
      zuora_central_sandbox_account.account_id                            AS billing_account_id,
      map_merged_crm_account.dim_crm_account_id           AS crm_account_id,
      zuora_central_sandbox_rate_plan_charge.rate_plan_charge_id,
      zuora_central_sandbox_subscription.subscription_id,
      zuora_central_sandbox_subscription.subscription_name,
      zuora_central_sandbox_subscription.subscription_status,
      zuora_central_sandbox_rate_plan_charge.product_rate_plan_charge_id  AS product_details_id,
      zuora_central_sandbox_rate_plan_charge.mrr,
      zuora_central_sandbox_rate_plan_charge.delta_tcv,
      zuora_central_sandbox_rate_plan_charge.unit_of_measure,
      zuora_central_sandbox_rate_plan_charge.quantity,
      zuora_central_sandbox_rate_plan_charge.effective_start_month,
      zuora_central_sandbox_rate_plan_charge.effective_end_month
    FROM zuora_central_sandbox_rate_plan_charge
    INNER JOIN zuora_central_sandbox_rate_plan
      ON zuora_central_sandbox_rate_plan.rate_plan_id = zuora_central_sandbox_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_central_sandbox_subscription
      ON zuora_central_sandbox_rate_plan.subscription_id = zuora_central_sandbox_subscription.subscription_id
    INNER JOIN zuora_central_sandbox_account
      ON zuora_central_sandbox_account.account_id = zuora_central_sandbox_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

), combined_rate_plans AS (

    SELECT *
    FROM rate_plan_charge_filtered

    UNION

    SELECT *
    FROM manual_charges

), mrr_month_by_month AS (

    SELECT
      dim_date.date_id,
      billing_account_id,
      crm_account_id,
      subscription_id,
      subscription_name,
      subscription_status,
      product_details_id,
      rate_plan_charge_id,
      SUM(mrr)                                             AS mrr,
      SUM(mrr)* 12                                         AS arr,
      SUM(quantity)                                        AS quantity,
      ARRAY_AGG(combined_rate_plans.unit_of_measure)       AS unit_of_measure
    FROM combined_rate_plans
    INNER JOIN dim_date
      ON combined_rate_plans.effective_start_month <= dim_date.date_actual
      AND (combined_rate_plans.effective_end_month > dim_date.date_actual
        OR combined_rate_plans.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    group by 1,2,3,4,5,6,7,8

), final AS (

  SELECT
    md5(cast(coalesce(cast(date_id as 
    varchar
), '') || '-' || coalesce(cast(rate_plan_charge_id as 
    varchar
), '') as 
    varchar
))                        AS mrr_id,
    date_id                                                                                 AS dim_date_id,
    billing_account_id                                                                      AS dim_billing_account_id,
    crm_account_id                                                                          AS dim_crm_account_id,
    subscription_id                                                                         AS dim_subscription_id,
    product_details_id                                                                      AS dim_product_detail_id,
    rate_plan_charge_id                                                                     AS dim_charge_id,
    subscription_status,
    mrr,
    arr,
    quantity,
    unit_of_measure
  FROM mrr_month_by_month

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-03-31'::DATE        AS model_created_date,
      '2022-03-31'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final2d:T1d7a,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
      ('map_merged_crm_account', 'map_merged_crm_account'),
      ('date_details', 'date_details'),
      ('zuora_account_source', 'zuora_account_source'),
      ('prep_billing_account_user', 'prep_billing_account_user'),
      ('sfdc_customer_subscription_source', 'sfdc_customer_subscription_source')

])}}

, zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@michellecooper",
    created_date="2021-01-07",
    updated_date="2023-04-12"
) }}2e:T1f00,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), date_details AS (

    SELECT * 
    FROM "PROD".legacy.date_details

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

), sfdc_customer_subscription_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_customer_subscription_source

)

, zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-07'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined2f:T7f4,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_central_sandbox_contact','zuora_central_sandbox_contact_source')
]) }}

, zuora_central_sandbox_account AS (

    SELECT *
    FROM {{ref('zuora_central_sandbox_account_source')}}
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), filtered AS (

    SELECT
      zuora_central_sandbox_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      zuora_central_sandbox_account.account_number                          AS billing_account_number,
      zuora_central_sandbox_account.account_name                            AS billing_account_name,
      zuora_central_sandbox_account.status                                  AS account_status,
      zuora_central_sandbox_account.parent_id,
      zuora_central_sandbox_account.sfdc_account_code,
      zuora_central_sandbox_account.currency                                AS account_currency,
      zuora_central_sandbox_contact.country                                 AS sold_to_country,
      zuora_central_sandbox_account.is_deleted,
      zuora_central_sandbox_account.batch,
      zuora_central_sandbox_account.ssp_channel,
      zuora_central_sandbox_account.po_required
    FROM zuora_central_sandbox_account
    LEFT JOIN zuora_central_sandbox_contact
      ON COALESCE(zuora_central_sandbox_account.sold_to_contact_id, zuora_central_sandbox_account.bill_to_contact_id) = zuora_central_sandbox_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

)

{{ dbt_audit(
    cte_ref="filtered",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2022-03-31",
    updated_date="2022-04-13"
) }}30:T92c,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_central_sandbox_contact AS (

    SELECT * 
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_contact_source

)

, zuora_central_sandbox_account AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_account_source
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), filtered AS (

    SELECT
      zuora_central_sandbox_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      zuora_central_sandbox_account.account_number                          AS billing_account_number,
      zuora_central_sandbox_account.account_name                            AS billing_account_name,
      zuora_central_sandbox_account.status                                  AS account_status,
      zuora_central_sandbox_account.parent_id,
      zuora_central_sandbox_account.sfdc_account_code,
      zuora_central_sandbox_account.currency                                AS account_currency,
      zuora_central_sandbox_contact.country                                 AS sold_to_country,
      zuora_central_sandbox_account.is_deleted,
      zuora_central_sandbox_account.batch,
      zuora_central_sandbox_account.ssp_channel,
      zuora_central_sandbox_account.po_required
    FROM zuora_central_sandbox_account
    LEFT JOIN zuora_central_sandbox_contact
      ON COALESCE(zuora_central_sandbox_account.sold_to_contact_id, zuora_central_sandbox_account.bill_to_contact_id) = zuora_central_sandbox_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-03-31'::DATE        AS model_created_date,
      '2022-04-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM filtered31:Tbb7,WITH crm_account_dimensions AS (

    SELECT *
    FROM {{ ref('map_crm_account')}}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM {{ ref('zuora_invoice_source') }}
    WHERE is_deleted = FALSE

), final_invoice AS (

    SELECT
    --ids
      zuora_invoice.invoice_id                                          AS dim_invoice_id,

      --shared dimension keys
      zuora_invoice.account_id                                          AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                        AS dim_crm_account_id,
      crm_account_dimensions.dim_parent_crm_account_id,
      crm_account_dimensions.dim_parent_sales_segment_id,
      crm_account_dimensions.dim_parent_sales_territory_id,
      crm_account_dimensions.dim_parent_industry_id,
      crm_account_dimensions.dim_account_sales_segment_id,
      crm_account_dimensions.dim_account_sales_territory_id,
      crm_account_dimensions.dim_account_industry_id,
      crm_account_dimensions.dim_account_location_country_id,
      crm_account_dimensions.dim_account_location_region_id,

      --invoice dates
      {{ get_date_id('zuora_invoice.invoice_date') }}                   AS invoice_date_id,
      {{ get_date_id('zuora_invoice.created_date') }}                   AS created_date_id,
      {{ get_date_id('zuora_invoice.due_date') }}                       AS due_date_id,
      {{ get_date_id('zuora_invoice.posted_date') }}                    AS posted_date_id,
      {{ get_date_id('zuora_invoice.target_date') }}                    AS target_date_id,

      --invoice flags
      zuora_invoice.includes_one_time,
      zuora_invoice.includesrecurring,
      zuora_invoice.includes_usage,
      zuora_invoice.transferred_to_accounting,

      --additive fields
      zuora_invoice.adjustment_amount,
      zuora_invoice.amount,
      zuora_invoice.amount_without_tax,
      zuora_invoice.balance,
      zuora_invoice.credit_balance_adjustment_amount,
      zuora_invoice.payment_amount,
      zuora_invoice.refund_amount,
      zuora_invoice.tax_amount,
      zuora_invoice.tax_exempt_amount,

      -- metadata
      zuora_invoice.created_by_id,
      zuora_invoice.updated_by_id,
      {{ get_date_id('zuora_invoice.updated_date') }}                   AS updated_date_id

    FROM zuora_invoice
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN crm_account_dimensions
      ON map_merged_crm_account.dim_crm_account_id = crm_account_dimensions.dim_crm_account_id
)

{{ dbt_audit(
    cte_ref="final_invoice",
    created_by="@mcooperDD",
    updated_by="@lisvinueza",
    created_date="2021-01-20",
    updated_date="2023-05-21"
) }}32:Tda1,WITH crm_account_dimensions AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_crm_account

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM "PREP".zuora.zuora_invoice_source
    WHERE is_deleted = FALSE

), final_invoice AS (

    SELECT
    --ids
      zuora_invoice.invoice_id                                          AS dim_invoice_id,

      --shared dimension keys
      zuora_invoice.account_id                                          AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                        AS dim_crm_account_id,
      crm_account_dimensions.dim_parent_crm_account_id,
      crm_account_dimensions.dim_parent_sales_segment_id,
      crm_account_dimensions.dim_parent_sales_territory_id,
      crm_account_dimensions.dim_parent_industry_id,
      crm_account_dimensions.dim_account_sales_segment_id,
      crm_account_dimensions.dim_account_sales_territory_id,
      crm_account_dimensions.dim_account_industry_id,
      crm_account_dimensions.dim_account_location_country_id,
      crm_account_dimensions.dim_account_location_region_id,

      --invoice dates
      

  TO_NUMBER(TO_CHAR(zuora_invoice.invoice_date::DATE,'YYYYMMDD'),'99999999')

                   AS invoice_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.created_date::DATE,'YYYYMMDD'),'99999999')

                   AS created_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.due_date::DATE,'YYYYMMDD'),'99999999')

                       AS due_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.posted_date::DATE,'YYYYMMDD'),'99999999')

                    AS posted_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.target_date::DATE,'YYYYMMDD'),'99999999')

                    AS target_date_id,

      --invoice flags
      zuora_invoice.includes_one_time,
      zuora_invoice.includesrecurring,
      zuora_invoice.includes_usage,
      zuora_invoice.transferred_to_accounting,

      --additive fields
      zuora_invoice.adjustment_amount,
      zuora_invoice.amount,
      zuora_invoice.amount_without_tax,
      zuora_invoice.balance,
      zuora_invoice.credit_balance_adjustment_amount,
      zuora_invoice.payment_amount,
      zuora_invoice.refund_amount,
      zuora_invoice.tax_amount,
      zuora_invoice.tax_exempt_amount,

      -- metadata
      zuora_invoice.created_by_id,
      zuora_invoice.updated_by_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.updated_date::DATE,'YYYYMMDD'),'99999999')

                   AS updated_date_id

    FROM zuora_invoice
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN crm_account_dimensions
      ON map_merged_crm_account.dim_crm_account_id = crm_account_dimensions.dim_crm_account_id
)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-01-20'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final_invoice33:T293f,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_contact','zuora_contact_source'),
    ('zuora_account_snapshot','zuora_account_snapshots_source'),
    ('customers_billing_account_snapshot', 'customers_db_billing_accounts_snapshots_base')
]) }}

, snapshot_dates AS (

   SELECT *
   FROM {{ ref('dim_date') }}
   WHERE date_actual >= '2020-03-01' and date_actual <= CURRENT_DATE

), zuora_account AS (

    SELECT *
    FROM zuora_account_snapshot
    WHERE is_deleted = FALSE
      AND LOWER(live_batch) != 'batch20'

), zuora_account_spined AS (

    SELECT
      snapshot_dates.date_id AS snapshot_id,
      zuora_account.*
    FROM zuora_account
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= zuora_account.dbt_valid_from
      AND snapshot_dates.date_actual < {{ coalesce_to_infinity('zuora_account.dbt_valid_to') }}

), zuora_account_joined AS (

    SELECT
      zuora_account_spined.snapshot_id,
      zuora_account_spined.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id,
      zuora_account_spined.account_number                          AS billing_account_number,
      zuora_account_spined.account_name                            AS billing_account_name,
      zuora_account_spined.status                                  AS account_status,
      zuora_account_spined.parent_id,
      zuora_account_spined.sfdc_account_code                       AS crm_account_code,
      zuora_account_spined.sfdc_entity                             AS crm_entity,
      zuora_account_spined.currency                                AS account_currency,
      zuora_contact.country                                        AS sold_to_country,
      zuora_account_spined.ssp_channel,
      zuora_account_spined.po_required,
      zuora_account_spined.is_deleted,
      zuora_account_spined.batch,
      'Y'                                                          AS exists_in_zuora
    FROM zuora_account_spined
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_account_spined.sold_to_contact_id, zuora_account_spined.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_spined.crm_id = map_merged_crm_account.sfdc_account_id

), cdot_billing_account_snapshot AS (

    SELECT 
      billing_account_id, 
      zuora_account_id,
      zuora_account_name,
      sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      valid_from,
      valid_to
    FROM customers_billing_account_snapshot
    --Exclude Batch20(test records) from CDot by using Zuora test account IDs.
    WHERE zuora_account_id NOT IN 
      (SELECT DISTINCT 
         account_id 
       FROM zuora_account_snapshot
       WHERE LOWER(live_batch) = 'batch20'
       OR is_deleted = TRUE)

), cdot_billing_account_spined AS (

    SELECT  
      snapshot_dates.date_id AS snapshot_id,
      cdot_billing_account_snapshot.*
    FROM cdot_billing_account_snapshot
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= cdot_billing_account_snapshot.valid_from
      AND snapshot_dates.date_actual < {{ coalesce_to_infinity('cdot_billing_account_snapshot.valid_to') }}

), cdot_billing_account_joined AS (

    SELECT 
      snapshot_id,
      billing_account_id,
      map_merged_crm_account.dim_crm_account_id  AS dim_crm_account_id,
      zuora_account_id,
      zuora_account_name,
      cdot_billing_account_spined.sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      valid_from,
      valid_to,
      'Y' AS exists_in_cdot
    FROM cdot_billing_account_spined
        LEFT JOIN map_merged_crm_account
      ON cdot_billing_account_spined.sfdc_account_id = map_merged_crm_account.sfdc_account_id

), joined AS (

    SELECT 
        
       --surrogate keys from zuora & cdot
      {{ dbt_utils.surrogate_key(['zuora_account_joined.snapshot_id', 'zuora_account_joined.dim_billing_account_id']) }}                                                                    AS zuora_billing_account_snapshot_id,
      {{ dbt_utils.surrogate_key(['cdot_billing_account_joined.snapshot_id', 'cdot_billing_account_joined.zuora_account_id']) }}                                                            AS cdot_billing_account_snapshot_id,
                                                                                           
      --snapshot keys from zuora & cdot
      zuora_account_joined.snapshot_id                                                                                                                                                      AS zuora_snapshot_id, 
      cdot_billing_account_joined.snapshot_id                                                                                                                                               AS cdot_snapshot_id,                                                                                                             
     
      --natural keys from zuora & cdot
      zuora_account_joined.dim_billing_account_id, 
      cdot_billing_account_joined.zuora_account_id,                                                                                              

      --foreign keys from zuora & cdot
      zuora_account_joined.dim_crm_account_id                                                                                                                                               AS zuora_dim_crm_account_id, 
      cdot_billing_account_joined.dim_crm_account_id                                                                                                                                        AS cdot_dim_crm_account_id,                                                                                               

      --other relevant attributes
      zuora_account_joined.billing_account_number,
      zuora_account_joined.billing_account_name, 
      cdot_billing_account_joined.zuora_account_name,                                                                                             
      zuora_account_joined.account_status,
      zuora_account_joined.parent_id,
      zuora_account_joined.crm_account_code,
      zuora_account_joined.crm_entity,
      zuora_account_joined.account_currency,
      zuora_account_joined.sold_to_country,
      zuora_account_joined.ssp_channel,
      zuora_account_joined.po_required,
      zuora_account_joined.is_deleted,
      zuora_account_joined.batch,
      CASE 
        WHEN exists_in_zuora = 'Y' and exists_in_cdot = 'Y' THEN 'exists in CDot & Zuora'
        WHEN exists_in_zuora = 'Y' and exists_in_cdot IS NULL THEN 'exists only in Zuora'
        WHEN exists_in_zuora IS NULL and exists_in_cdot = 'Y' THEN 'exists only in CDot'
      ELSE NULL 
      END                                                                                                                                                                                   AS record_data_source
    FROM zuora_account_joined
     FULL JOIN cdot_billing_account_joined
       ON zuora_account_joined.dim_billing_account_id = cdot_billing_account_joined.zuora_account_id
       AND zuora_account_joined.snapshot_id = cdot_billing_account_joined.snapshot_id

), intermediary AS  (

    SELECT
       --surrogate key
      CASE 
        WHEN joined.zuora_snapshot_id IS NOT NULL and record_data_source = 'exists only in Zuora' THEN joined.zuora_billing_account_snapshot_id 
        WHEN joined.cdot_snapshot_id IS NOT NULL and record_data_source = 'exists only in CDot' THEN joined.cdot_billing_account_snapshot_id
        WHEN joined.zuora_snapshot_id IS NOT NULL AND joined.cdot_snapshot_id IS NOT NULL and  record_data_source = 'exists in CDot & Zuora' THEN joined.zuora_billing_account_snapshot_id 
      END                                                                                                                                                                                   AS billing_account_snapshot_id,                                                                                
      
      COALESCE(joined.zuora_snapshot_id, joined.cdot_snapshot_id)                                                                                                                           AS snapshot_id,

      --natural key
      COALESCE(joined.dim_billing_account_id, joined.zuora_account_id)                                                                                                                      AS dim_billing_account_id,

      --foreign key
      COALESCE(joined.zuora_dim_crm_account_id, joined.cdot_dim_crm_account_id)                                                                                                             AS dim_crm_account_id,

      --other relevant attributes
      joined.billing_account_number,
      COALESCE(joined.billing_account_name, joined.zuora_account_name)                                                                                                                      AS billing_account_name,
      joined.account_status,
      joined.parent_id,
      joined.crm_account_code,
      joined.crm_entity,
      joined.account_currency,
      joined.sold_to_country,
      joined.ssp_channel,
      joined.po_required,
      joined.is_deleted,
      joined.batch,
      joined.record_data_source

    FROM joined

), final AS (

    SELECT 

       --surrogate key
      {{ dbt_utils.surrogate_key(['intermediary.snapshot_id', 'intermediary.billing_account_snapshot_id']) }}                                                                                         AS billing_account_snapshot_id,
      intermediary.snapshot_id,

      --natural key
      intermediary.dim_billing_account_id,

      --foreign key
      intermediary.dim_crm_account_id,

      --other relevant attributes
      intermediary.billing_account_number,
      intermediary.billing_account_name,
      intermediary.account_status,
      intermediary.parent_id,
      intermediary.crm_account_code,
      intermediary.crm_entity,
      intermediary.account_currency,
      intermediary.sold_to_country,
      intermediary.ssp_channel,
      intermediary.po_required,
      intermediary.is_deleted,
      intermediary.batch,
      intermediary.record_data_source

    FROM intermediary

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@iweeks",
    updated_by="@snalamaru",
    created_date="2021-08-09",
    updated_date="2023-06-06"
) }}34:T2b82,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), zuora_account_snapshot AS (

    SELECT * 
    FROM "PROD".legacy.zuora_account_snapshots_source

), customers_billing_account_snapshot AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_billing_accounts_snapshots

)

, snapshot_dates AS (

   SELECT *
   FROM "PROD".common.dim_date
   WHERE date_actual >= '2020-03-01' and date_actual <= CURRENT_DATE

), zuora_account AS (

    SELECT *
    FROM zuora_account_snapshot
    WHERE is_deleted = FALSE
      AND LOWER(live_batch) != 'batch20'

), zuora_account_spined AS (

    SELECT
      snapshot_dates.date_id AS snapshot_id,
      zuora_account.*
    FROM zuora_account
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= zuora_account.dbt_valid_from
      AND snapshot_dates.date_actual < COALESCE( zuora_account.dbt_valid_to, '9999-12-31'::TIMESTAMP)

), zuora_account_joined AS (

    SELECT
      zuora_account_spined.snapshot_id,
      zuora_account_spined.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id,
      zuora_account_spined.account_number                          AS billing_account_number,
      zuora_account_spined.account_name                            AS billing_account_name,
      zuora_account_spined.status                                  AS account_status,
      zuora_account_spined.parent_id,
      zuora_account_spined.sfdc_account_code                       AS crm_account_code,
      zuora_account_spined.sfdc_entity                             AS crm_entity,
      zuora_account_spined.currency                                AS account_currency,
      zuora_contact.country                                        AS sold_to_country,
      zuora_account_spined.ssp_channel,
      zuora_account_spined.po_required,
      zuora_account_spined.is_deleted,
      zuora_account_spined.batch,
      'Y'                                                          AS exists_in_zuora
    FROM zuora_account_spined
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_account_spined.sold_to_contact_id, zuora_account_spined.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_spined.crm_id = map_merged_crm_account.sfdc_account_id

), cdot_billing_account_snapshot AS (

    SELECT 
      billing_account_id, 
      zuora_account_id,
      zuora_account_name,
      sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      valid_from,
      valid_to
    FROM customers_billing_account_snapshot
    --Exclude Batch20(test records) from CDot by using Zuora test account IDs.
    WHERE zuora_account_id NOT IN 
      (SELECT DISTINCT 
         account_id 
       FROM zuora_account_snapshot
       WHERE LOWER(live_batch) = 'batch20'
       OR is_deleted = TRUE)

), cdot_billing_account_spined AS (

    SELECT  
      snapshot_dates.date_id AS snapshot_id,
      cdot_billing_account_snapshot.*
    FROM cdot_billing_account_snapshot
    INNER JOIN snapshot_dates
      ON snapshot_dates.date_actual >= cdot_billing_account_snapshot.valid_from
      AND snapshot_dates.date_actual < COALESCE( cdot_billing_account_snapshot.valid_to, '9999-12-31'::TIMESTAMP)

), cdot_billing_account_joined AS (

    SELECT 
      snapshot_id,
      billing_account_id,
      map_merged_crm_account.dim_crm_account_id  AS dim_crm_account_id,
      zuora_account_id,
      zuora_account_name,
      cdot_billing_account_spined.sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      valid_from,
      valid_to,
      'Y' AS exists_in_cdot
    FROM cdot_billing_account_spined
        LEFT JOIN map_merged_crm_account
      ON cdot_billing_account_spined.sfdc_account_id = map_merged_crm_account.sfdc_account_id

), joined AS (

    SELECT 
        
       --surrogate keys from zuora & cdot
      md5(cast(coalesce(cast(zuora_account_joined.snapshot_id as 
    varchar
), '') || '-' || coalesce(cast(zuora_account_joined.dim_billing_account_id as 
    varchar
), '') as 
    varchar
))                                                                    AS zuora_billing_account_snapshot_id,
      md5(cast(coalesce(cast(cdot_billing_account_joined.snapshot_id as 
    varchar
), '') || '-' || coalesce(cast(cdot_billing_account_joined.zuora_account_id as 
    varchar
), '') as 
    varchar
))                                                            AS cdot_billing_account_snapshot_id,
                                                                                           
      --snapshot keys from zuora & cdot
      zuora_account_joined.snapshot_id                                                                                                                                                      AS zuora_snapshot_id, 
      cdot_billing_account_joined.snapshot_id                                                                                                                                               AS cdot_snapshot_id,                                                                                                             
     
      --natural keys from zuora & cdot
      zuora_account_joined.dim_billing_account_id, 
      cdot_billing_account_joined.zuora_account_id,                                                                                              

      --foreign keys from zuora & cdot
      zuora_account_joined.dim_crm_account_id                                                                                                                                               AS zuora_dim_crm_account_id, 
      cdot_billing_account_joined.dim_crm_account_id                                                                                                                                        AS cdot_dim_crm_account_id,                                                                                               

      --other relevant attributes
      zuora_account_joined.billing_account_number,
      zuora_account_joined.billing_account_name, 
      cdot_billing_account_joined.zuora_account_name,                                                                                             
      zuora_account_joined.account_status,
      zuora_account_joined.parent_id,
      zuora_account_joined.crm_account_code,
      zuora_account_joined.crm_entity,
      zuora_account_joined.account_currency,
      zuora_account_joined.sold_to_country,
      zuora_account_joined.ssp_channel,
      zuora_account_joined.po_required,
      zuora_account_joined.is_deleted,
      zuora_account_joined.batch,
      CASE 
        WHEN exists_in_zuora = 'Y' and exists_in_cdot = 'Y' THEN 'exists in CDot & Zuora'
        WHEN exists_in_zuora = 'Y' and exists_in_cdot IS NULL THEN 'exists only in Zuora'
        WHEN exists_in_zuora IS NULL and exists_in_cdot = 'Y' THEN 'exists only in CDot'
      ELSE NULL 
      END                                                                                                                                                                                   AS record_data_source
    FROM zuora_account_joined
     FULL JOIN cdot_billing_account_joined
       ON zuora_account_joined.dim_billing_account_id = cdot_billing_account_joined.zuora_account_id
       AND zuora_account_joined.snapshot_id = cdot_billing_account_joined.snapshot_id

), intermediary AS  (

    SELECT
       --surrogate key
      CASE 
        WHEN joined.zuora_snapshot_id IS NOT NULL and record_data_source = 'exists only in Zuora' THEN joined.zuora_billing_account_snapshot_id 
        WHEN joined.cdot_snapshot_id IS NOT NULL and record_data_source = 'exists only in CDot' THEN joined.cdot_billing_account_snapshot_id
        WHEN joined.zuora_snapshot_id IS NOT NULL AND joined.cdot_snapshot_id IS NOT NULL and  record_data_source = 'exists in CDot & Zuora' THEN joined.zuora_billing_account_snapshot_id 
      END                                                                                                                                                                                   AS billing_account_snapshot_id,                                                                                
      
      COALESCE(joined.zuora_snapshot_id, joined.cdot_snapshot_id)                                                                                                                           AS snapshot_id,

      --natural key
      COALESCE(joined.dim_billing_account_id, joined.zuora_account_id)                                                                                                                      AS dim_billing_account_id,

      --foreign key
      COALESCE(joined.zuora_dim_crm_account_id, joined.cdot_dim_crm_account_id)                                                                                                             AS dim_crm_account_id,

      --other relevant attributes
      joined.billing_account_number,
      COALESCE(joined.billing_account_name, joined.zuora_account_name)                                                                                                                      AS billing_account_name,
      joined.account_status,
      joined.parent_id,
      joined.crm_account_code,
      joined.crm_entity,
      joined.account_currency,
      joined.sold_to_country,
      joined.ssp_channel,
      joined.po_required,
      joined.is_deleted,
      joined.batch,
      joined.record_data_source

    FROM joined

), final AS (

    SELECT 

       --surrogate key
      md5(cast(coalesce(cast(intermediary.snapshot_id as 
    varchar
), '') || '-' || coalesce(cast(intermediary.billing_account_snapshot_id as 
    varchar
), '') as 
    varchar
))                                                                                         AS billing_account_snapshot_id,
      intermediary.snapshot_id,

      --natural key
      intermediary.dim_billing_account_id,

      --foreign key
      intermediary.dim_crm_account_id,

      --other relevant attributes
      intermediary.billing_account_number,
      intermediary.billing_account_name,
      intermediary.account_status,
      intermediary.parent_id,
      intermediary.crm_account_code,
      intermediary.crm_entity,
      intermediary.account_currency,
      intermediary.sold_to_country,
      intermediary.ssp_channel,
      intermediary.po_required,
      intermediary.is_deleted,
      intermediary.batch,
      intermediary.record_data_source

    FROM intermediary

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@snalamaru'::VARCHAR       AS updated_by,
      '2021-08-09'::DATE        AS model_created_date,
      '2023-06-06'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final35:T5872,{{ simple_cte([
    ('map_merged_crm_account', 'map_merged_crm_account'),
    ('zuora_rate_plan', 'zuora_rate_plan_source'),
    ('zuora_rate_plan_charge', 'zuora_rate_plan_charge_source'),
    ('zuora_order_action_rate_plan','zuora_query_api_order_action_rate_plan_source'),
    ('zuora_order_action', 'zuora_order_action_source'),
    ('revenue_contract_line', 'zuora_revenue_revenue_contract_line_source'),
    ('zuora_order', 'zuora_order_source')
])}}

, sfdc_account AS (

    SELECT *
    FROM {{ ref('sfdc_account_source') }}
    WHERE account_id IS NOT NULL
    
), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}

), charge_to_order AS (

    SELECT 
      zuora_rate_plan_charge.rate_plan_charge_id,
      zuora_order_action.order_id
    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_order_action_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_order_action_rate_plan.rate_plan_id
    INNER JOIN zuora_order_action
      ON zuora_order_action_rate_plan.order_action_id = zuora_order_action.order_action_id
    {{ dbt_utils.group_by(n=2) }}

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_subscription.created_by_id                                  AS subscription_created_by_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendement_id                                     AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                           AS dim_parent_crm_account_id,
      charge_to_order.order_id                                          AS dim_order_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_start_date') }}  AS effective_start_date_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_end_date') }}    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendement_type                                   AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings,
      0                                                                 AS is_manual_charge

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN charge_to_order
      ON zuora_rate_plan_charge.rate_plan_charge_id = charge_to_order.rate_plan_charge_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      active_zuora_subscription.created_by_id                                               AS subscription_created_by_id,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      MD5(-1)                                                                               AS dim_order_id,
      {{ get_date_id('manual_charges_prep.effective_start_date') }}                         AS effective_start_date_id,
      {{ get_date_id('manual_charges_prep.effective_end_date') }}                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                                   AS estimated_total_future_billings,
      1                                                                                     AS is_manual_charge

    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id


), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

{{ dbt_audit(
    cte_ref="arr_analysis_framework",
    created_by="@iweeks",
    updated_by="@chrissharp",
    created_date="2021-04-28",
    updated_date="2023-06-13"
) }}36:T5adb,

WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora.zuora_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT * 
    FROM "PREP".zuora.zuora_rate_plan_charge_source

), zuora_order_action_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora_query_api.zuora_query_api_order_action_rate_plan_source

), zuora_order_action AS (

    SELECT * 
    FROM "PREP".zuora_order.zuora_order_action_source

), revenue_contract_line AS (

    SELECT * 
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source

), zuora_order AS (

    SELECT * 
    FROM "PREP".zuora_order.zuora_order_source

)

, sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL
    
), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7

), charge_to_order AS (

    SELECT 
      zuora_rate_plan_charge.rate_plan_charge_id,
      zuora_order_action.order_id
    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_order_action_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_order_action_rate_plan.rate_plan_id
    INNER JOIN zuora_order_action
      ON zuora_order_action_rate_plan.order_action_id = zuora_order_action.order_action_id
    group by 1,2

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_subscription.created_by_id                                  AS subscription_created_by_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendement_id                                     AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                           AS dim_parent_crm_account_id,
      charge_to_order.order_id                                          AS dim_order_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_start_date::DATE,'YYYYMMDD'),'99999999')

  AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_end_date::DATE,'YYYYMMDD'),'99999999')

    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendement_type                                   AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings,
      0                                                                 AS is_manual_charge

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN charge_to_order
      ON zuora_rate_plan_charge.rate_plan_charge_id = charge_to_order.rate_plan_charge_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      active_zuora_subscription.created_by_id                                               AS subscription_created_by_id,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      MD5(-1)                                                                               AS dim_order_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_start_date::DATE,'YYYYMMDD'),'99999999')

                         AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_end_date::DATE,'YYYYMMDD'),'99999999')

                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                                   AS estimated_total_future_billings,
      1                                                                                     AS is_manual_charge

    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id


), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-04-28'::DATE        AS model_created_date,
      '2023-06-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM arr_analysis_framework37:T18aa,/* grain: one record per subscription per month */
{{ simple_cte([
    ('zuora_rate_plan', 'zuora_rate_plan_source'),
    ('map_merged_crm_account', 'map_merged_crm_account'),
    ('product_details', 'dim_product_detail'),
    ('dim_date', 'dim_date'),
]) }}

, zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}
    WHERE charge_type = 'Recurring'

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), rate_plan_charge_filtered AS (

    SELECT
      zuora_account.account_id                                      AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                     AS dim_crm_account_id,
      zuora_subscription.subscription_id                            AS dim_subscription_id,
      zuora_subscription.original_id                                AS dim_subscription_id_original,
      zuora_subscription.subscription_status,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.unit_of_measure,
      zuora_rate_plan_charge.quantity,
      zuora_rate_plan_charge.effective_start_month,
      zuora_rate_plan_charge.effective_end_month,
      product_details.product_delivery_type
    FROM zuora_rate_plan_charge
    INNER JOIN zuora_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_account.account_id = zuora_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN product_details
      ON zuora_rate_plan_charge.product_rate_plan_charge_id = product_details.dim_product_detail_id

), mrr_by_delivery_type AS (

  SELECT
      dim_date.date_id                                                  AS dim_date_id,
      dim_date.first_day_of_month                                       AS charge_month,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_subscription_id,
      dim_subscription_id_original,
      subscription_status,
      product_delivery_type,
      unit_of_measure,
      {{ dbt_utils.surrogate_key(['dim_date_id',
                                  'dim_subscription_id',
                                  'product_delivery_type',
                                  'unit_of_measure']) }}                AS mrr_id,
      SUM(mrr)                                                          AS mrr,
      SUM(mrr) * 12                                                     AS arr,
      SUM(quantity)                                                     AS quantity
    FROM rate_plan_charge_filtered
    INNER JOIN dim_date
      ON rate_plan_charge_filtered.effective_start_month <= dim_date.date_actual
      AND (rate_plan_charge_filtered.effective_end_month > dim_date.date_actual
           OR rate_plan_charge_filtered.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    {{ dbt_utils.group_by(n=10) }}

), mrr_by_subscription AS (

  SELECT
      subscription.dim_billing_account_id,
      subscription.dim_crm_account_id,
      subscription.dim_subscription_id,
      subscription.dim_subscription_id_original,
      subscription.subscription_status,
      subscription.dim_date_id,
      subscription.charge_month,
      SUM(sm.mrr)                                                       AS sm_mrr,
      SUM(sm.arr)                                                       AS sm_arr,
      SUM(sm.quantity)                                                  AS sm_quantity,
      SUM(saas.mrr)                                                     AS saas_mrr,
      SUM(saas.arr)                                                     AS saas_arr,
      SUM(saas.quantity)                                                AS saas_quantity,
      SUM(other.mrr)                                                    AS other_mrr,
      SUM(other.arr)                                                    AS other_arr,
      SUM(other.quantity)                                               AS other_quantity,
      SUM(subscription.mrr)                                             AS total_mrr,
      SUM(subscription.arr)                                             AS total_arr,
      SUM(subscription.quantity)                                        AS total_quantity,
      ARRAY_AGG(subscription.product_delivery_type
                || ': '
                || subscription.unit_of_measure)
        WITHIN GROUP (ORDER BY subscription.product_delivery_type DESC) AS unit_of_measure
    FROM mrr_by_delivery_type subscription
    LEFT JOIN mrr_by_delivery_type sm
      ON sm.product_delivery_type = 'Self-Managed'
      AND subscription.mrr_id = sm.mrr_id
    LEFT JOIN mrr_by_delivery_type saas
      ON saas.product_delivery_type = 'SaaS'
      AND subscription.mrr_id = saas.mrr_id
    LEFT JOIN mrr_by_delivery_type other
      ON other.product_delivery_type = 'Others'
      AND subscription.mrr_id = other.mrr_id
    {{ dbt_utils.group_by(n=7) }}

), final AS (

    SELECT
      dim_subscription_id,
      dim_subscription_id_original,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_date_id,
      charge_month,
      subscription_status,
      unit_of_measure,
      total_mrr,
      total_arr,
      total_quantity,
      sm_mrr,
      sm_arr,
      sm_quantity,
      saas_mrr,
      saas_arr,
      saas_quantity,
      other_mrr,
      other_arr,
      other_quantity,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY dim_subscription_id
            ORDER BY dim_date_id DESC) = 1,
          TRUE, FALSE)                                                      AS is_latest_record_per_subscription
    FROM mrr_by_subscription

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@iweeks",
    created_date="2021-03-01",
    updated_date="2021-07-29"
) }}38:T1a62,/* grain: one record per subscription per month */


WITH zuora_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora.zuora_rate_plan_source

), map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

)

, zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source
    WHERE charge_type = 'Recurring'

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), rate_plan_charge_filtered AS (

    SELECT
      zuora_account.account_id                                      AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                     AS dim_crm_account_id,
      zuora_subscription.subscription_id                            AS dim_subscription_id,
      zuora_subscription.original_id                                AS dim_subscription_id_original,
      zuora_subscription.subscription_status,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.unit_of_measure,
      zuora_rate_plan_charge.quantity,
      zuora_rate_plan_charge.effective_start_month,
      zuora_rate_plan_charge.effective_end_month,
      product_details.product_delivery_type
    FROM zuora_rate_plan_charge
    INNER JOIN zuora_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_account.account_id = zuora_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN product_details
      ON zuora_rate_plan_charge.product_rate_plan_charge_id = product_details.dim_product_detail_id

), mrr_by_delivery_type AS (

  SELECT
      dim_date.date_id                                                  AS dim_date_id,
      dim_date.first_day_of_month                                       AS charge_month,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_subscription_id,
      dim_subscription_id_original,
      subscription_status,
      product_delivery_type,
      unit_of_measure,
      md5(cast(coalesce(cast(dim_date_id as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(product_delivery_type as 
    varchar
), '') || '-' || coalesce(cast(unit_of_measure as 
    varchar
), '') as 
    varchar
))                AS mrr_id,
      SUM(mrr)                                                          AS mrr,
      SUM(mrr) * 12                                                     AS arr,
      SUM(quantity)                                                     AS quantity
    FROM rate_plan_charge_filtered
    INNER JOIN dim_date
      ON rate_plan_charge_filtered.effective_start_month <= dim_date.date_actual
      AND (rate_plan_charge_filtered.effective_end_month > dim_date.date_actual
           OR rate_plan_charge_filtered.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    group by 1,2,3,4,5,6,7,8,9,10

), mrr_by_subscription AS (

  SELECT
      subscription.dim_billing_account_id,
      subscription.dim_crm_account_id,
      subscription.dim_subscription_id,
      subscription.dim_subscription_id_original,
      subscription.subscription_status,
      subscription.dim_date_id,
      subscription.charge_month,
      SUM(sm.mrr)                                                       AS sm_mrr,
      SUM(sm.arr)                                                       AS sm_arr,
      SUM(sm.quantity)                                                  AS sm_quantity,
      SUM(saas.mrr)                                                     AS saas_mrr,
      SUM(saas.arr)                                                     AS saas_arr,
      SUM(saas.quantity)                                                AS saas_quantity,
      SUM(other.mrr)                                                    AS other_mrr,
      SUM(other.arr)                                                    AS other_arr,
      SUM(other.quantity)                                               AS other_quantity,
      SUM(subscription.mrr)                                             AS total_mrr,
      SUM(subscription.arr)                                             AS total_arr,
      SUM(subscription.quantity)                                        AS total_quantity,
      ARRAY_AGG(subscription.product_delivery_type
                || ': '
                || subscription.unit_of_measure)
        WITHIN GROUP (ORDER BY subscription.product_delivery_type DESC) AS unit_of_measure
    FROM mrr_by_delivery_type subscription
    LEFT JOIN mrr_by_delivery_type sm
      ON sm.product_delivery_type = 'Self-Managed'
      AND subscription.mrr_id = sm.mrr_id
    LEFT JOIN mrr_by_delivery_type saas
      ON saas.product_delivery_type = 'SaaS'
      AND subscription.mrr_id = saas.mrr_id
    LEFT JOIN mrr_by_delivery_type other
      ON other.product_delivery_type = 'Others'
      AND subscription.mrr_id = other.mrr_id
    group by 1,2,3,4,5,6,7

), final AS (

    SELECT
      dim_subscription_id,
      dim_subscription_id_original,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_date_id,
      charge_month,
      subscription_status,
      unit_of_measure,
      total_mrr,
      total_arr,
      total_quantity,
      sm_mrr,
      sm_arr,
      sm_quantity,
      saas_mrr,
      saas_arr,
      saas_quantity,
      other_mrr,
      other_arr,
      other_quantity,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY dim_subscription_id
            ORDER BY dim_date_id DESC) = 1,
          TRUE, FALSE)                                                      AS is_latest_record_per_subscription
    FROM mrr_by_subscription

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2021-03-01'::DATE        AS model_created_date,
      '2021-07-29'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final39:T263e,{{ config(
    tags=["mnpi"]
) }}

/*

  ATTENTION: When a field is added to this live model, add it to the SFDC_ACCOUNT_SNAPSHOTS_SOURCE model to keep the live and snapshot models in alignment.

*/

WITH source AS (

  SELECT *
  FROM {{ source('salesforce', 'account') }}

),

renamed AS (

  SELECT
    id AS account_id,
    name AS account_name,

    -- keys
    account_id_18__c AS account_id_18,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    parentid AS parent_id,
    primary_contact_id__c AS primary_contact_id,
    recordtypeid AS record_type_id,
    ultimate_parent_account_id__c AS ultimate_parent_id,
    partner_vat_tax_id__c AS partner_vat_tax_id,


    -- key people GL side
    gitlab_com_user__c AS gitlab_com_user,
    account_manager__c AS account_manager,
    account_owner_calc__c AS account_owner,
    account_owner_team__c AS account_owner_team,
    proposed_account_owner__c AS proposed_account_owner,
    business_development_rep__c AS business_development_rep,
    dedicated_service_engineer__c AS dedicated_service_engineer,
    sdr_assigned__c AS sales_development_rep,
    -- solutions_architect__c                     AS solutions_architect,
    technical_account_manager_lu__c AS technical_account_manager_id,

    -- info
    "{{ this.database }}".{{ target.schema }}.ID15TO18(SUBSTRING(REGEXP_REPLACE(
      ultimate_parent_account__c, '_HL_ENCODED_/|<a\\s+href="/', ''
      ), 0, 15)) AS ultimate_parent_account_id,
    ultimate_parent_account_text__c AS ultimate_parent_account_name,
    type AS account_type,
    dfox_industry__c AS df_industry,
    parent_lam_industry_acct_heirarchy__c AS industry,
    sub_industry__c AS sub_industry,
    parent_lam_industry_acct_heirarchy__c AS parent_account_industry_hierarchy,
    account_tier__c AS account_tier,
    account_tier_notes__c AS account_tier_notes,
    customer_since__c::DATE AS customer_since_date,
    carr_this_account__c AS carr_this_account,
    carr_acct_family__c AS carr_account_family,
    next_renewal_date__c AS next_renewal_date,
    license_utilization__c AS license_utilization,
    support_level__c AS support_level,
    named_account__c AS named_account,
    billingcountry AS billing_country,
    account_demographics_upa_country__c AS billing_country_code,
    billingpostalcode AS billing_postal_code,
    sdr_target_account__c::BOOLEAN AS is_sdr_target_account,
    lam_tier__c AS lam,
    lam_dev_count__c AS lam_dev_count,
    jihu_account__c::BOOLEAN AS is_jihu_account,
    partners_signed_contract_date__c AS partners_signed_contract_date,
    partner_account_iban_number__c AS partner_account_iban_number,
    partners_partner_type__c AS partner_type,
    partners_partner_status__c AS partner_status,
    bdr_prospecting_status__c AS bdr_prospecting_status,
    first_order_available__c::BOOLEAN AS is_first_order_available,
    REPLACE(
      zi_technologies__c,
      'The technologies that are used and not used at this account, according to ZoomInfo, after completing a scan are:', -- noqa:L016
      ''
    ) AS zi_technologies,
    technical_account_manager_date__c::DATE AS technical_account_manager_date,
    gitlab_customer_success_project__c::VARCHAR AS gitlab_customer_success_project,
    forbes_2000_rank__c AS forbes_2000_rank,
    potential_users__c AS potential_users,
    number_of_licenses_this_account__c AS number_of_licenses_this_account,
    decision_maker_count_linkedin__c AS decision_maker_count_linkedin,
    numberofemployees                AS number_of_employees,
    phone AS account_phone,
    zi_phone__c AS zoominfo_account_phone,
    number_of_employees_manual_source_admin__c AS admin_manual_source_number_of_employees,
    account_address_manual_source_admin__c AS admin_manual_source_account_address,

    -- account demographics fields

    -- Add sales_segment_cleaning macro to avoid duplication in downstream models
    {{sales_segment_cleaning('account_demographics_sales_segment__c')}} AS account_sales_segment,
    account_demographics_geo__c AS account_geo,
    account_demographics_region__c AS account_region,
    account_demographics_area__c AS account_area,
    account_demographics_territory__c AS account_territory,
    account_demographics_business_unit__c AS account_business_unit,
    account_demographics_role_type__c AS account_role_type,
    account_demographics_employee_count__c AS account_employee_count,
    account_demographic_max_family_employees__c AS account_max_family_employee,
    account_demographics_upa_country__c AS account_upa_country,
    account_demographics_upa_state__c AS account_upa_state,
    account_demographics_upa_city__c AS account_upa_city,
    account_demographics_upa_street__c AS account_upa_street,
    account_demographics_upa_postal_code__c AS account_upa_postal_code,

    -- present state info
    gs_health_score__c AS health_number,
    gs_health_score_color__c AS health_score_color,

    -- opportunity metrics
    count_of_active_subscription_charges__c AS count_active_subscription_charges,
    count_of_active_subscriptions__c AS count_active_subscriptions,
    count_of_billing_accounts__c AS count_billing_accounts,
    license_user_count__c AS count_licensed_users,
    count_of_new_business_won_opps__c AS count_of_new_business_won_opportunities,
    count_of_open_renewal_opportunities__c AS count_open_renewal_opportunities,
    count_of_opportunities__c AS count_opportunities,
    count_of_products_purchased__c AS count_products_purchased,
    count_of_won_opportunities__c AS count_won_opportunities,
    concurrent_ee_subscriptions__c AS count_concurrent_ee_subscriptions,
    ce_instances__c AS count_ce_instances,
    active_ce_users__c AS count_active_ce_users,
    number_of_open_opportunities__c AS count_open_opportunities,
    using_ce__c AS count_using_ce,

    --account based marketing fields
    abm_tier__c AS abm_tier,
    gtm_strategy__c AS gtm_strategy,
    gtm_acceleration_date__c AS gtm_acceleration_date,
    gtm_account_based_date__c AS gtm_account_based_date,
    gtm_account_centric_date__c AS gtm_account_centric_date,
    abm_tier_1_date__c AS abm_tier_1_date,
    abm_tier_2_date__c AS abm_tier_2_date,
    abm_tier_3_date__c AS abm_tier_3_date,

    --demandbase fields
    account_list__c AS demandbase_account_list,
    intent__c AS demandbase_intent,
    page_views__c AS demandbase_page_views,
    score__c AS demandbase_score,
    sessions__c AS demandbase_sessions,
    trending_offsite_intent__c AS demandbase_trending_offsite_intent,
    trending_onsite_engagement__c AS demandbase_trending_onsite_engagement,

    -- sales segment fields
    account_demographics_sales_segment__c AS ultimate_parent_sales_segment,
    sales_segmentation_new__c AS division_sales_segment,
    account_owner_user_segment__c AS account_owner_user_segment,
    ultimate_parent_sales_segment_employees__c AS sales_segment,
    sales_segmentation_new__c AS account_segment,

    locally_managed__c AS is_locally_managed_account,
    strategic__c AS is_strategic_account,

    -- ************************************
    -- New SFDC Account Fields for FY22 Planning
    next_fy_account_owner_temp__c AS next_fy_account_owner_temp,
    next_fy_planning_notes_temp__c AS next_fy_planning_notes_temp,
    --*************************************
    -- Partner Account fields
    partner_track__c AS partner_track,
    partners_partner_type__c AS partners_partner_type,
    gitlab_partner_programs__c AS gitlab_partner_program,
    focus_partner__c AS is_focus_partner,

    --*************************************
    -- Zoom Info Fields
    zi_account_name__c AS zoom_info_company_name,
    zi_revenue__c AS zoom_info_company_revenue,
    zi_employees__c AS zoom_info_company_employee_count,
    zi_industry__c AS zoom_info_company_industry,
    zi_city__c AS zoom_info_company_city,
    zi_state_province__c AS zoom_info_company_state_province,
    zi_country__c AS zoom_info_company_country,
    exclude_from_zoominfo_enrich__c AS is_excluded_from_zoom_info_enrich,
    zi_website__c AS zoom_info_website,
    zi_company_other_domains__c AS zoom_info_company_other_domains,
    dozisf__zoominfo_id__c AS zoom_info_dozisf_zi_id,
    zi_parent_company_zoominfo_id__c AS zoom_info_parent_company_zi_id,
    zi_parent_company_name__c AS zoom_info_parent_company_name,
    zi_ultimate_parent_company_zoominfo_id__c AS zoom_info_ultimate_parent_company_zi_id,
    zi_ultimate_parent_company_name__c AS zoom_info_ultimate_parent_company_name,
    zi_number_of_developers__c AS zoom_info_number_of_developers,
    zi_total_funding__c AS zoom_info_total_funding,

    -- NF: Added on 20220427 to support EMEA reporting
    key_account__c                     AS is_key_account,

    -- Gainsight Fields
    gs_first_value_date__c AS gs_first_value_date,
    gs_last_tam_activity_date__c AS gs_last_csm_activity_date,
    eoa_sentiment__c AS eoa_sentiment,
    gs_health_user_engagement__c AS gs_health_user_engagement,
    gs_health_cd__c AS gs_health_cd,
    gs_health_devsecops__c AS gs_health_devsecops,
    gs_health_ci__c AS gs_health_ci,
    gs_health_scm__c AS gs_health_scm,

    -- Risk Fields
    risk_impact__c AS risk_impact,
    risk_reason__c AS risk_reason,
    last_timeline_at_risk_update__c AS last_timeline_at_risk_update,
    last_at_risk_update_comments__c AS last_at_risk_update_comments,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    lastactivitydate AS last_activity_date,
    CONVERT_TIMEZONE(
      'America/Los_Angeles', CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP())
    ) AS _last_dbt_run,
    systemmodstamp

  FROM source
)

SELECT *
FROM renamed3a:T28a7,

/*

  ATTENTION: When a field is added to this live model, add it to the SFDC_ACCOUNT_SNAPSHOTS_SOURCE model to keep the live and snapshot models in alignment.

*/

WITH source AS (

  SELECT *
  FROM "RAW".salesforce_stitch.account

),

renamed AS (

  SELECT
    id AS account_id,
    name AS account_name,

    -- keys
    account_id_18__c AS account_id_18,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    parentid AS parent_id,
    primary_contact_id__c AS primary_contact_id,
    recordtypeid AS record_type_id,
    ultimate_parent_account_id__c AS ultimate_parent_id,
    partner_vat_tax_id__c AS partner_vat_tax_id,


    -- key people GL side
    gitlab_com_user__c AS gitlab_com_user,
    account_manager__c AS account_manager,
    account_owner_calc__c AS account_owner,
    account_owner_team__c AS account_owner_team,
    proposed_account_owner__c AS proposed_account_owner,
    business_development_rep__c AS business_development_rep,
    dedicated_service_engineer__c AS dedicated_service_engineer,
    sdr_assigned__c AS sales_development_rep,
    -- solutions_architect__c                     AS solutions_architect,
    technical_account_manager_lu__c AS technical_account_manager_id,

    -- info
    "PREP".preparation.ID15TO18(SUBSTRING(REGEXP_REPLACE(
      ultimate_parent_account__c, '_HL_ENCODED_/|<a\\s+href="/', ''
      ), 0, 15)) AS ultimate_parent_account_id,
    ultimate_parent_account_text__c AS ultimate_parent_account_name,
    type AS account_type,
    dfox_industry__c AS df_industry,
    parent_lam_industry_acct_heirarchy__c AS industry,
    sub_industry__c AS sub_industry,
    parent_lam_industry_acct_heirarchy__c AS parent_account_industry_hierarchy,
    account_tier__c AS account_tier,
    account_tier_notes__c AS account_tier_notes,
    customer_since__c::DATE AS customer_since_date,
    carr_this_account__c AS carr_this_account,
    carr_acct_family__c AS carr_account_family,
    next_renewal_date__c AS next_renewal_date,
    license_utilization__c AS license_utilization,
    support_level__c AS support_level,
    named_account__c AS named_account,
    billingcountry AS billing_country,
    account_demographics_upa_country__c AS billing_country_code,
    billingpostalcode AS billing_postal_code,
    sdr_target_account__c::BOOLEAN AS is_sdr_target_account,
    lam_tier__c AS lam,
    lam_dev_count__c AS lam_dev_count,
    jihu_account__c::BOOLEAN AS is_jihu_account,
    partners_signed_contract_date__c AS partners_signed_contract_date,
    partner_account_iban_number__c AS partner_account_iban_number,
    partners_partner_type__c AS partner_type,
    partners_partner_status__c AS partner_status,
    bdr_prospecting_status__c AS bdr_prospecting_status,
    first_order_available__c::BOOLEAN AS is_first_order_available,
    REPLACE(
      zi_technologies__c,
      'The technologies that are used and not used at this account, according to ZoomInfo, after completing a scan are:', -- noqa:L016
      ''
    ) AS zi_technologies,
    technical_account_manager_date__c::DATE AS technical_account_manager_date,
    gitlab_customer_success_project__c::VARCHAR AS gitlab_customer_success_project,
    forbes_2000_rank__c AS forbes_2000_rank,
    potential_users__c AS potential_users,
    number_of_licenses_this_account__c AS number_of_licenses_this_account,
    decision_maker_count_linkedin__c AS decision_maker_count_linkedin,
    numberofemployees                AS number_of_employees,
    phone AS account_phone,
    zi_phone__c AS zoominfo_account_phone,
    number_of_employees_manual_source_admin__c AS admin_manual_source_number_of_employees,
    account_address_manual_source_admin__c AS admin_manual_source_account_address,

    -- account demographics fields

    -- Add sales_segment_cleaning macro to avoid duplication in downstream models
    CASE WHEN LOWER(account_demographics_sales_segment__c) = 'smb' THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(account_demographics_sales_segment__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) IS NULL THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(account_demographics_sales_segment__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(account_demographics_sales_segment__c) = 'lrg' THEN 'Large'
     WHEN LOWER(account_demographics_sales_segment__c) = 'jihu' THEN 'JiHu'
     WHEN account_demographics_sales_segment__c IS NOT NULL THEN initcap(account_demographics_sales_segment__c)
END AS account_sales_segment,
    account_demographics_geo__c AS account_geo,
    account_demographics_region__c AS account_region,
    account_demographics_area__c AS account_area,
    account_demographics_territory__c AS account_territory,
    account_demographics_business_unit__c AS account_business_unit,
    account_demographics_role_type__c AS account_role_type,
    account_demographics_employee_count__c AS account_employee_count,
    account_demographic_max_family_employees__c AS account_max_family_employee,
    account_demographics_upa_country__c AS account_upa_country,
    account_demographics_upa_state__c AS account_upa_state,
    account_demographics_upa_city__c AS account_upa_city,
    account_demographics_upa_street__c AS account_upa_street,
    account_demographics_upa_postal_code__c AS account_upa_postal_code,

    -- present state info
    gs_health_score__c AS health_number,
    gs_health_score_color__c AS health_score_color,

    -- opportunity metrics
    count_of_active_subscription_charges__c AS count_active_subscription_charges,
    count_of_active_subscriptions__c AS count_active_subscriptions,
    count_of_billing_accounts__c AS count_billing_accounts,
    license_user_count__c AS count_licensed_users,
    count_of_new_business_won_opps__c AS count_of_new_business_won_opportunities,
    count_of_open_renewal_opportunities__c AS count_open_renewal_opportunities,
    count_of_opportunities__c AS count_opportunities,
    count_of_products_purchased__c AS count_products_purchased,
    count_of_won_opportunities__c AS count_won_opportunities,
    concurrent_ee_subscriptions__c AS count_concurrent_ee_subscriptions,
    ce_instances__c AS count_ce_instances,
    active_ce_users__c AS count_active_ce_users,
    number_of_open_opportunities__c AS count_open_opportunities,
    using_ce__c AS count_using_ce,

    --account based marketing fields
    abm_tier__c AS abm_tier,
    gtm_strategy__c AS gtm_strategy,
    gtm_acceleration_date__c AS gtm_acceleration_date,
    gtm_account_based_date__c AS gtm_account_based_date,
    gtm_account_centric_date__c AS gtm_account_centric_date,
    abm_tier_1_date__c AS abm_tier_1_date,
    abm_tier_2_date__c AS abm_tier_2_date,
    abm_tier_3_date__c AS abm_tier_3_date,

    --demandbase fields
    account_list__c AS demandbase_account_list,
    intent__c AS demandbase_intent,
    page_views__c AS demandbase_page_views,
    score__c AS demandbase_score,
    sessions__c AS demandbase_sessions,
    trending_offsite_intent__c AS demandbase_trending_offsite_intent,
    trending_onsite_engagement__c AS demandbase_trending_onsite_engagement,

    -- sales segment fields
    account_demographics_sales_segment__c AS ultimate_parent_sales_segment,
    sales_segmentation_new__c AS division_sales_segment,
    account_owner_user_segment__c AS account_owner_user_segment,
    ultimate_parent_sales_segment_employees__c AS sales_segment,
    sales_segmentation_new__c AS account_segment,

    locally_managed__c AS is_locally_managed_account,
    strategic__c AS is_strategic_account,

    -- ************************************
    -- New SFDC Account Fields for FY22 Planning
    next_fy_account_owner_temp__c AS next_fy_account_owner_temp,
    next_fy_planning_notes_temp__c AS next_fy_planning_notes_temp,
    --*************************************
    -- Partner Account fields
    partner_track__c AS partner_track,
    partners_partner_type__c AS partners_partner_type,
    gitlab_partner_programs__c AS gitlab_partner_program,
    focus_partner__c AS is_focus_partner,

    --*************************************
    -- Zoom Info Fields
    zi_account_name__c AS zoom_info_company_name,
    zi_revenue__c AS zoom_info_company_revenue,
    zi_employees__c AS zoom_info_company_employee_count,
    zi_industry__c AS zoom_info_company_industry,
    zi_city__c AS zoom_info_company_city,
    zi_state_province__c AS zoom_info_company_state_province,
    zi_country__c AS zoom_info_company_country,
    exclude_from_zoominfo_enrich__c AS is_excluded_from_zoom_info_enrich,
    zi_website__c AS zoom_info_website,
    zi_company_other_domains__c AS zoom_info_company_other_domains,
    dozisf__zoominfo_id__c AS zoom_info_dozisf_zi_id,
    zi_parent_company_zoominfo_id__c AS zoom_info_parent_company_zi_id,
    zi_parent_company_name__c AS zoom_info_parent_company_name,
    zi_ultimate_parent_company_zoominfo_id__c AS zoom_info_ultimate_parent_company_zi_id,
    zi_ultimate_parent_company_name__c AS zoom_info_ultimate_parent_company_name,
    zi_number_of_developers__c AS zoom_info_number_of_developers,
    zi_total_funding__c AS zoom_info_total_funding,

    -- NF: Added on 20220427 to support EMEA reporting
    key_account__c                     AS is_key_account,

    -- Gainsight Fields
    gs_first_value_date__c AS gs_first_value_date,
    gs_last_tam_activity_date__c AS gs_last_csm_activity_date,
    eoa_sentiment__c AS eoa_sentiment,
    gs_health_user_engagement__c AS gs_health_user_engagement,
    gs_health_cd__c AS gs_health_cd,
    gs_health_devsecops__c AS gs_health_devsecops,
    gs_health_ci__c AS gs_health_ci,
    gs_health_scm__c AS gs_health_scm,

    -- Risk Fields
    risk_impact__c AS risk_impact,
    risk_reason__c AS risk_reason,
    last_timeline_at_risk_update__c AS last_timeline_at_risk_update,
    last_at_risk_update_comments__c AS last_at_risk_update_comments,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    lastactivitydate AS last_activity_date,
    CONVERT_TIMEZONE(
      'America/Los_Angeles', CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP())
    ) AS _last_dbt_run,
    systemmodstamp

  FROM source
)

SELECT *
FROM renamed3b:T2892,WITH source AS (

    SELECT *
    FROM {{ source('snapshots', 'sfdc_account_snapshots') }}

    QUALIFY ROW_NUMBER() OVER (
    PARTITION BY 
      dbt_valid_from::DATE, 
      id 
    ORDER BY dbt_valid_from DESC
    ) = 1

),

/*

  ATTENTION: When a field is added to this snapshot model, add it to the SFDC_ACCOUNT_SOURCE model to keep the live and snapshot models in alignment.

*/

renamed AS (

  SELECT
    id AS account_id,
    name AS account_name,

    -- keys
    account_id_18__c AS account_id_18,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    parentid AS parent_id,
    primary_contact_id__c AS primary_contact_id,
    recordtypeid AS record_type_id,
    ultimate_parent_account_id__c AS ultimate_parent_id,
    ultimate_parent_account_text__c AS ultimate_parent_account_name,
    partner_vat_tax_id__c AS partner_vat_tax_id,


    -- key people GL side
    gitlab_com_user__c AS gitlab_com_user,
    account_manager__c AS account_manager,
    account_owner_calc__c AS account_owner,
    account_owner_team__c AS account_owner_team,
    proposed_account_owner__c AS proposed_account_owner,
    business_development_rep__c AS business_development_rep,
    dedicated_service_engineer__c AS dedicated_service_engineer,
    sdr_assigned__c AS sales_development_rep,
    -- solutions_architect__c                     AS solutions_architect,
    technical_account_manager_lu__c AS technical_account_manager_id,

     -- info
    "{{ this.database }}".{{ target.schema }}.ID15TO18(SUBSTRING(REGEXP_REPLACE(
      ultimate_parent_account__c, '_HL_ENCODED_/|<a\\s+href="/', ''
      ), 0, 15)) AS ultimate_parent_account_id,
    type AS account_type,
    dfox_industry__c AS df_industry,
    parent_lam_industry_acct_heirarchy__c AS industry,
    sub_industry__c AS sub_industry,
    parent_lam_industry_acct_heirarchy__c AS parent_account_industry_hierarchy,
    account_tier__c AS account_tier,
    account_tier_notes__c AS account_tier_notes,
    customer_since__c::DATE AS customer_since_date,
    carr_this_account__c AS carr_this_account,
    carr_acct_family__c AS carr_account_family,
    next_renewal_date__c AS next_renewal_date,
    license_utilization__c AS license_utilization,
    support_level__c AS support_level,
    named_account__c AS named_account,
    billingcountry AS billing_country,
    account_demographics_upa_country__c AS billing_country_code,
    billingpostalcode AS billing_postal_code,
    sdr_target_account__c::BOOLEAN AS is_sdr_target_account,
    lam_tier__c AS lam,
    lam_dev_count__c AS lam_dev_count,
    jihu_account__c::BOOLEAN AS is_jihu_account,
    partners_signed_contract_date__c AS partners_signed_contract_date,
    partner_account_iban_number__c AS partner_account_iban_number,
    partners_partner_type__c AS partner_type,
    partners_partner_status__c AS partner_status,
    bdr_prospecting_status__c AS bdr_prospecting_status,
    first_order_available__c::BOOLEAN AS is_first_order_available,
    REPLACE(
      zi_technologies__c,
      'The technologies that are used and not used at this account, according to ZoomInfo, after completing a scan are:', -- noqa:L016
      ''
    ) AS zi_technologies,
    technical_account_manager_date__c::DATE AS technical_account_manager_date,
    gitlab_customer_success_project__c::VARCHAR AS gitlab_customer_success_project,
    forbes_2000_rank__c AS forbes_2000_rank,
    potential_users__c AS potential_users,
    number_of_licenses_this_account__c AS number_of_licenses_this_account,
    decision_maker_count_linkedin__c AS decision_maker_count_linkedin,
    numberofemployees                AS number_of_employees,
    phone AS account_phone,
    zi_phone__c AS zoominfo_account_phone,
    number_of_employees_manual_source_admin__c AS admin_manual_source_number_of_employees,
    account_address_manual_source_admin__c AS admin_manual_source_account_address,

    -- account demographics fields

    -- Add sales_segment_cleaning macro to avoid duplication in downstream models
    {{sales_segment_cleaning('account_demographics_sales_segment__c')}} AS account_sales_segment,
    account_demographics_geo__c AS account_geo,
    account_demographics_region__c AS account_region,
    account_demographics_area__c AS account_area,
    account_demographics_territory__c AS account_territory,
    account_demographics_business_unit__c AS account_business_unit,
    account_demographics_role_type__c AS account_role_type,
    account_demographics_employee_count__c AS account_employee_count,
    account_demographic_max_family_employees__c AS account_max_family_employee,
    account_demographics_upa_country__c AS account_upa_country,
    account_demographics_upa_state__c AS account_upa_state,
    account_demographics_upa_city__c AS account_upa_city,
    account_demographics_upa_street__c AS account_upa_street,
    account_demographics_upa_postal_code__c AS account_upa_postal_code,

    -- present state info
    gs_health_score__c AS health_number,
    gs_health_score_color__c AS health_score_color,

    -- opportunity metrics
    count_of_active_subscription_charges__c AS count_active_subscription_charges,
    count_of_active_subscriptions__c AS count_active_subscriptions,
    count_of_billing_accounts__c AS count_billing_accounts,
    license_user_count__c AS count_licensed_users,
    count_of_new_business_won_opps__c AS count_of_new_business_won_opportunities,
    count_of_open_renewal_opportunities__c AS count_open_renewal_opportunities,
    count_of_opportunities__c AS count_opportunities,
    count_of_products_purchased__c AS count_products_purchased,
    count_of_won_opportunities__c AS count_won_opportunities,
    concurrent_ee_subscriptions__c AS count_concurrent_ee_subscriptions,
    ce_instances__c AS count_ce_instances,
    active_ce_users__c AS count_active_ce_users,
    number_of_open_opportunities__c AS count_open_opportunities,
    using_ce__c AS count_using_ce,

    --account based marketing fields
    abm_tier__c AS abm_tier,
    gtm_strategy__c AS gtm_strategy,
    gtm_acceleration_date__c AS gtm_acceleration_date,
    gtm_account_based_date__c AS gtm_account_based_date,
    gtm_account_centric_date__c AS gtm_account_centric_date,
    abm_tier_1_date__c AS abm_tier_1_date,
    abm_tier_2_date__c AS abm_tier_2_date,
    abm_tier_3_date__c AS abm_tier_3_date,

    --demandbase fields
    account_list__c AS demandbase_account_list,
    intent__c AS demandbase_intent,
    page_views__c AS demandbase_page_views,
    score__c AS demandbase_score,
    sessions__c AS demandbase_sessions,
    trending_offsite_intent__c AS demandbase_trending_offsite_intent,
    trending_onsite_engagement__c AS demandbase_trending_onsite_engagement,

    -- sales segment fields
    account_demographics_sales_segment__c AS ultimate_parent_sales_segment,
    sales_segmentation_new__c AS division_sales_segment,
    account_owner_user_segment__c AS account_owner_user_segment,
    -- ************************************
    -- sales segmentation deprecated fields - 2020-09-03
    -- left temporary for the sake of MVC and avoid breaking SiSense existing charts
    ultimate_parent_sales_segment_employees__c AS sales_segment,
    sales_segmentation_new__c AS account_segment,

      -- ************************************
      -- NF: 2020-12-17
      -- these three fields are used to identify accounts owned by
      -- reps within hierarchies that they do not fully own
      -- or even within different regions

    locally_managed__c AS is_locally_managed_account,
    strategic__c AS is_strategic_account,

    -- ************************************
    -- New SFDC Account Fields for FY22 Planning
    next_fy_account_owner_temp__c AS next_fy_account_owner_temp,
    next_fy_planning_notes_temp__c AS next_fy_planning_notes_temp,

    --*************************************
    -- Partner Account fields
    partner_track__c AS partner_track,
    partners_partner_type__c AS partners_partner_type,
    gitlab_partner_programs__c AS gitlab_partner_program,

    --*************************************
    -- Zoom Info Fields
    zi_account_name__c AS zoom_info_company_name,
    zi_revenue__c AS zoom_info_company_revenue,
    zi_employees__c AS zoom_info_company_employee_count,
    zi_industry__c AS zoom_info_company_industry,
    zi_city__c AS zoom_info_company_city,
    zi_state_province__c AS zoom_info_company_state_province,
    zi_country__c AS zoom_info_company_country,
    exclude_from_zoominfo_enrich__c AS is_excluded_from_zoom_info_enrich,
    zi_website__c AS zoom_info_website,
    zi_company_other_domains__c AS zoom_info_company_other_domains,
    dozisf__zoominfo_id__c AS zoom_info_dozisf_zi_id,
    zi_parent_company_zoominfo_id__c AS zoom_info_parent_company_zi_id,
    zi_parent_company_name__c AS zoom_info_parent_company_name,
    zi_ultimate_parent_company_zoominfo_id__c AS zoom_info_ultimate_parent_company_zi_id,
    zi_ultimate_parent_company_name__c AS zoom_info_ultimate_parent_company_name,
    zi_number_of_developers__c AS zoom_info_number_of_developers,
    zi_total_funding__c AS zoom_info_total_funding,

    -- NF: Added on 20220427 to support EMEA reporting
    key_account__c                     AS is_key_account,

    -- Gainsight Fields
    gs_first_value_date__c AS gs_first_value_date,
    gs_last_tam_activity_date__c AS gs_last_csm_activity_date,
    eoa_sentiment__c AS eoa_sentiment,
    gs_health_user_engagement__c AS gs_health_user_engagement,
    gs_health_cd__c AS gs_health_cd,
    gs_health_devsecops__c AS gs_health_devsecops,
    gs_health_ci__c AS gs_health_ci,
    gs_health_scm__c AS gs_health_scm,

    -- Risk Fields
    risk_impact__c AS risk_impact,
    risk_reason__c AS risk_reason,
    last_timeline_at_risk_update__c AS last_timeline_at_risk_update,
    last_at_risk_update_comments__c AS last_at_risk_update_comments,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    lastactivitydate AS last_activity_date,
    CONVERT_TIMEZONE(
      'America/Los_Angeles', CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP())
    ) AS _last_dbt_run,
    systemmodstamp,

    -- snapshot metadata
    dbt_scd_id,
    dbt_updated_at,
    dbt_valid_from,
    dbt_valid_to

  FROM source
)

SELECT *
FROM renamed3c:T2b15,WITH source AS (

    SELECT *
    FROM "RAW".snapshots.sfdc_account_snapshots

    QUALIFY ROW_NUMBER() OVER (
    PARTITION BY 
      dbt_valid_from::DATE, 
      id 
    ORDER BY dbt_valid_from DESC
    ) = 1

),

/*

  ATTENTION: When a field is added to this snapshot model, add it to the SFDC_ACCOUNT_SOURCE model to keep the live and snapshot models in alignment.

*/

renamed AS (

  SELECT
    id AS account_id,
    name AS account_name,

    -- keys
    account_id_18__c AS account_id_18,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    parentid AS parent_id,
    primary_contact_id__c AS primary_contact_id,
    recordtypeid AS record_type_id,
    ultimate_parent_account_id__c AS ultimate_parent_id,
    ultimate_parent_account_text__c AS ultimate_parent_account_name,
    partner_vat_tax_id__c AS partner_vat_tax_id,


    -- key people GL side
    gitlab_com_user__c AS gitlab_com_user,
    account_manager__c AS account_manager,
    account_owner_calc__c AS account_owner,
    account_owner_team__c AS account_owner_team,
    proposed_account_owner__c AS proposed_account_owner,
    business_development_rep__c AS business_development_rep,
    dedicated_service_engineer__c AS dedicated_service_engineer,
    sdr_assigned__c AS sales_development_rep,
    -- solutions_architect__c                     AS solutions_architect,
    technical_account_manager_lu__c AS technical_account_manager_id,

     -- info
    "PROD".preparation.ID15TO18(SUBSTRING(REGEXP_REPLACE(
      ultimate_parent_account__c, '_HL_ENCODED_/|<a\\s+href="/', ''
      ), 0, 15)) AS ultimate_parent_account_id,
    type AS account_type,
    dfox_industry__c AS df_industry,
    parent_lam_industry_acct_heirarchy__c AS industry,
    sub_industry__c AS sub_industry,
    parent_lam_industry_acct_heirarchy__c AS parent_account_industry_hierarchy,
    account_tier__c AS account_tier,
    account_tier_notes__c AS account_tier_notes,
    customer_since__c::DATE AS customer_since_date,
    carr_this_account__c AS carr_this_account,
    carr_acct_family__c AS carr_account_family,
    next_renewal_date__c AS next_renewal_date,
    license_utilization__c AS license_utilization,
    support_level__c AS support_level,
    named_account__c AS named_account,
    billingcountry AS billing_country,
    account_demographics_upa_country__c AS billing_country_code,
    billingpostalcode AS billing_postal_code,
    sdr_target_account__c::BOOLEAN AS is_sdr_target_account,
    lam_tier__c AS lam,
    lam_dev_count__c AS lam_dev_count,
    jihu_account__c::BOOLEAN AS is_jihu_account,
    partners_signed_contract_date__c AS partners_signed_contract_date,
    partner_account_iban_number__c AS partner_account_iban_number,
    partners_partner_type__c AS partner_type,
    partners_partner_status__c AS partner_status,
    bdr_prospecting_status__c AS bdr_prospecting_status,
    first_order_available__c::BOOLEAN AS is_first_order_available,
    REPLACE(
      zi_technologies__c,
      'The technologies that are used and not used at this account, according to ZoomInfo, after completing a scan are:', -- noqa:L016
      ''
    ) AS zi_technologies,
    technical_account_manager_date__c::DATE AS technical_account_manager_date,
    gitlab_customer_success_project__c::VARCHAR AS gitlab_customer_success_project,
    forbes_2000_rank__c AS forbes_2000_rank,
    potential_users__c AS potential_users,
    number_of_licenses_this_account__c AS number_of_licenses_this_account,
    decision_maker_count_linkedin__c AS decision_maker_count_linkedin,
    numberofemployees                AS number_of_employees,
    phone AS account_phone,
    zi_phone__c AS zoominfo_account_phone,
    number_of_employees_manual_source_admin__c AS admin_manual_source_number_of_employees,
    account_address_manual_source_admin__c AS admin_manual_source_account_address,

    -- account demographics fields

    -- Add sales_segment_cleaning macro to avoid duplication in downstream models
    CASE WHEN LOWER(account_demographics_sales_segment__c) = 'smb' THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(account_demographics_sales_segment__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) IS NULL THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(account_demographics_sales_segment__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(account_demographics_sales_segment__c) = 'lrg' THEN 'Large'
     WHEN LOWER(account_demographics_sales_segment__c) = 'jihu' THEN 'JiHu'
     WHEN account_demographics_sales_segment__c IS NOT NULL THEN initcap(account_demographics_sales_segment__c)
END AS account_sales_segment,
    account_demographics_geo__c AS account_geo,
    account_demographics_region__c AS account_region,
    account_demographics_area__c AS account_area,
    account_demographics_territory__c AS account_territory,
    account_demographics_business_unit__c AS account_business_unit,
    account_demographics_role_type__c AS account_role_type,
    account_demographics_employee_count__c AS account_employee_count,
    account_demographic_max_family_employees__c AS account_max_family_employee,
    account_demographics_upa_country__c AS account_upa_country,
    account_demographics_upa_state__c AS account_upa_state,
    account_demographics_upa_city__c AS account_upa_city,
    account_demographics_upa_street__c AS account_upa_street,
    account_demographics_upa_postal_code__c AS account_upa_postal_code,

    -- present state info
    gs_health_score__c AS health_number,
    gs_health_score_color__c AS health_score_color,

    -- opportunity metrics
    count_of_active_subscription_charges__c AS count_active_subscription_charges,
    count_of_active_subscriptions__c AS count_active_subscriptions,
    count_of_billing_accounts__c AS count_billing_accounts,
    license_user_count__c AS count_licensed_users,
    count_of_new_business_won_opps__c AS count_of_new_business_won_opportunities,
    count_of_open_renewal_opportunities__c AS count_open_renewal_opportunities,
    count_of_opportunities__c AS count_opportunities,
    count_of_products_purchased__c AS count_products_purchased,
    count_of_won_opportunities__c AS count_won_opportunities,
    concurrent_ee_subscriptions__c AS count_concurrent_ee_subscriptions,
    ce_instances__c AS count_ce_instances,
    active_ce_users__c AS count_active_ce_users,
    number_of_open_opportunities__c AS count_open_opportunities,
    using_ce__c AS count_using_ce,

    --account based marketing fields
    abm_tier__c AS abm_tier,
    gtm_strategy__c AS gtm_strategy,
    gtm_acceleration_date__c AS gtm_acceleration_date,
    gtm_account_based_date__c AS gtm_account_based_date,
    gtm_account_centric_date__c AS gtm_account_centric_date,
    abm_tier_1_date__c AS abm_tier_1_date,
    abm_tier_2_date__c AS abm_tier_2_date,
    abm_tier_3_date__c AS abm_tier_3_date,

    --demandbase fields
    account_list__c AS demandbase_account_list,
    intent__c AS demandbase_intent,
    page_views__c AS demandbase_page_views,
    score__c AS demandbase_score,
    sessions__c AS demandbase_sessions,
    trending_offsite_intent__c AS demandbase_trending_offsite_intent,
    trending_onsite_engagement__c AS demandbase_trending_onsite_engagement,

    -- sales segment fields
    account_demographics_sales_segment__c AS ultimate_parent_sales_segment,
    sales_segmentation_new__c AS division_sales_segment,
    account_owner_user_segment__c AS account_owner_user_segment,
    -- ************************************
    -- sales segmentation deprecated fields - 2020-09-03
    -- left temporary for the sake of MVC and avoid breaking SiSense existing charts
    ultimate_parent_sales_segment_employees__c AS sales_segment,
    sales_segmentation_new__c AS account_segment,

      -- ************************************
      -- NF: 2020-12-17
      -- these three fields are used to identify accounts owned by
      -- reps within hierarchies that they do not fully own
      -- or even within different regions

    locally_managed__c AS is_locally_managed_account,
    strategic__c AS is_strategic_account,

    -- ************************************
    -- New SFDC Account Fields for FY22 Planning
    next_fy_account_owner_temp__c AS next_fy_account_owner_temp,
    next_fy_planning_notes_temp__c AS next_fy_planning_notes_temp,

    --*************************************
    -- Partner Account fields
    partner_track__c AS partner_track,
    partners_partner_type__c AS partners_partner_type,
    gitlab_partner_programs__c AS gitlab_partner_program,

    --*************************************
    -- Zoom Info Fields
    zi_account_name__c AS zoom_info_company_name,
    zi_revenue__c AS zoom_info_company_revenue,
    zi_employees__c AS zoom_info_company_employee_count,
    zi_industry__c AS zoom_info_company_industry,
    zi_city__c AS zoom_info_company_city,
    zi_state_province__c AS zoom_info_company_state_province,
    zi_country__c AS zoom_info_company_country,
    exclude_from_zoominfo_enrich__c AS is_excluded_from_zoom_info_enrich,
    zi_website__c AS zoom_info_website,
    zi_company_other_domains__c AS zoom_info_company_other_domains,
    dozisf__zoominfo_id__c AS zoom_info_dozisf_zi_id,
    zi_parent_company_zoominfo_id__c AS zoom_info_parent_company_zi_id,
    zi_parent_company_name__c AS zoom_info_parent_company_name,
    zi_ultimate_parent_company_zoominfo_id__c AS zoom_info_ultimate_parent_company_zi_id,
    zi_ultimate_parent_company_name__c AS zoom_info_ultimate_parent_company_name,
    zi_number_of_developers__c AS zoom_info_number_of_developers,
    zi_total_funding__c AS zoom_info_total_funding,

    -- NF: Added on 20220427 to support EMEA reporting
    key_account__c                     AS is_key_account,

    -- Gainsight Fields
    gs_first_value_date__c AS gs_first_value_date,
    gs_last_tam_activity_date__c AS gs_last_csm_activity_date,
    eoa_sentiment__c AS eoa_sentiment,
    gs_health_user_engagement__c AS gs_health_user_engagement,
    gs_health_cd__c AS gs_health_cd,
    gs_health_devsecops__c AS gs_health_devsecops,
    gs_health_ci__c AS gs_health_ci,
    gs_health_scm__c AS gs_health_scm,

    -- Risk Fields
    risk_impact__c AS risk_impact,
    risk_reason__c AS risk_reason,
    last_timeline_at_risk_update__c AS last_timeline_at_risk_update,
    last_at_risk_update_comments__c AS last_at_risk_update_comments,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    lastactivitydate AS last_activity_date,
    CONVERT_TIMEZONE(
      'America/Los_Angeles', CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP())
    ) AS _last_dbt_run,
    systemmodstamp,

    -- snapshot metadata
    dbt_scd_id,
    dbt_updated_at,
    dbt_valid_from,
    dbt_valid_to

  FROM source
)

SELECT *
FROM renamed3d:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}3f:T78c,WITH last_account_snapshot AS (

    SELECT *
    FROM {{ ref('sfdc_account_snapshots_source') }}
    WHERE dbt_valid_to IS NULL

), unioned AS (


    SELECT 
      account_id,
      master_record_id,
      is_deleted
    FROM {{ ref('sfdc_account_source') }}

    UNION ALL

    /*
      Union in accounts which have been hard deleted but are captured in the snapshot models for completeness. 
    */

    SELECT 
      last_account_snapshot.account_id,
      last_account_snapshot.master_record_id,
      last_account_snapshot.is_deleted
    FROM last_account_snapshot
    LEFT JOIN {{ ref('sfdc_account_source') }}
      ON last_account_snapshot.account_id = sfdc_account_source.account_id
    WHERE sfdc_account_source.account_id IS NULL

), recursive_cte(account_id, master_record_id, is_deleted, lineage) AS (

    SELECT
      account_id,
      master_record_id,
      is_deleted,
      TO_ARRAY(account_id) AS lineage
    FROM unioned
    WHERE master_record_id IS NULL

    UNION ALL

    SELECT
      iter.account_id,
      iter.master_record_id,
      iter.is_deleted,
      ARRAY_INSERT(anchor.lineage, 0, iter.account_id)  AS lineage
    FROM recursive_cte AS anchor
    INNER JOIN unioned AS iter
      ON iter.master_record_id = anchor.account_id

), final AS (

    SELECT
      account_id                                         AS sfdc_account_id,
      lineage[ARRAY_SIZE(lineage) - 1]::VARCHAR          AS merged_account_id,
      is_deleted,
      IFF(merged_account_id != account_id, TRUE, FALSE)  AS is_merged,
      IFF(is_deleted AND NOT is_merged, TRUE, FALSE)     AS deleted_not_merged,
      --return final common dimension mapping,
      IFF(deleted_not_merged, '-1', merged_account_id)   AS dim_crm_account_id
    FROM recursive_cte

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mcooperDD",
    updated_by="@michellecooper",
    created_date="2020-11-23",
    updated_date="2023-04-13",
) }}40:T87b,WITH last_account_snapshot AS (

    SELECT *
    FROM "PROD".legacy.sfdc_account_snapshots_source
    WHERE dbt_valid_to IS NULL

), unioned AS (


    SELECT 
      account_id,
      master_record_id,
      is_deleted
    FROM "PREP".sfdc.sfdc_account_source

    UNION ALL

    /*
      Union in accounts which have been hard deleted but are captured in the snapshot models for completeness. 
    */

    SELECT 
      last_account_snapshot.account_id,
      last_account_snapshot.master_record_id,
      last_account_snapshot.is_deleted
    FROM last_account_snapshot
    LEFT JOIN "PREP".sfdc.sfdc_account_source
      ON last_account_snapshot.account_id = sfdc_account_source.account_id
    WHERE sfdc_account_source.account_id IS NULL

), recursive_cte(account_id, master_record_id, is_deleted, lineage) AS (

    SELECT
      account_id,
      master_record_id,
      is_deleted,
      TO_ARRAY(account_id) AS lineage
    FROM unioned
    WHERE master_record_id IS NULL

    UNION ALL

    SELECT
      iter.account_id,
      iter.master_record_id,
      iter.is_deleted,
      ARRAY_INSERT(anchor.lineage, 0, iter.account_id)  AS lineage
    FROM recursive_cte AS anchor
    INNER JOIN unioned AS iter
      ON iter.master_record_id = anchor.account_id

), final AS (

    SELECT
      account_id                                         AS sfdc_account_id,
      lineage[ARRAY_SIZE(lineage) - 1]::VARCHAR          AS merged_account_id,
      is_deleted,
      IFF(merged_account_id != account_id, TRUE, FALSE)  AS is_merged,
      IFF(is_deleted AND NOT is_merged, TRUE, FALSE)     AS deleted_not_merged,
      --return final common dimension mapping,
      IFF(deleted_not_merged, '-1', merged_account_id)   AS dim_crm_account_id
    FROM recursive_cte

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-11-23'::DATE        AS model_created_date,
      '2023-04-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM finalc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.map_merged_crm_account"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"map_merged_crm_account"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","safe",{"children":[["$","code",null,{"children":["$","a",null,{"children":"safe"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.restricted_safe_common_mapping.map_merged_crm_account"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"5 MB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 08:52UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"This table maps an original crm_account_id to its final, non-deleted crm_account_id if the original crm_id has been deleted and merged. If the account has not been deleted and merged, the non-deleted crm_account_id is equal to the original crm_account_id."}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MAPPING","name":"MAP_MERGED_CRM_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SFDC_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"sfdc_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","crm_account"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"sfdc_account_id"},"MERGED_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"MERGED_ACCOUNT_ID","comment":null,"display_name":"merged_account_id"},"IS_DELETED":{"type":"BOOLEAN","index":3,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"IS_MERGED":{"type":"BOOLEAN","index":4,"name":"IS_MERGED","comment":null,"display_name":"is_merged"},"DELETED_NOT_MERGED":{"type":"BOOLEAN","index":5,"name":"DELETED_NOT_MERGED","comment":null,"display_name":"deleted_not_merged"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","crm_account"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"CREATED_BY":{"type":"TEXT","index":7,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":8,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":9,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":10,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":11,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:52UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4833280,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_merged_crm_account","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_account_snapshots_source","model.gitlab_snowflake.sfdc_account_snapshots_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mapping","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mapping","fqn":["gitlab_snowflake","common_mapping","restricted_safe","map_merged_crm_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/restricted_safe/map_merged_crm_account.sql","original_file_path":"models/common_mapping/restricted_safe/map_merged_crm_account.sql","name":"map_merged_crm_account","alias":"map_merged_crm_account","checksum":{"name":"sha256","checksum":"4749d641901a5bd3b7a5503d3a3f81baf559fdb39972cea2c5df1b8dc4a7bac4"},"tags":["safe"],"refs":[["sfdc_account_snapshots_source"],["sfdc_account_snapshots_source"],["sfdc_account_source"],["sfdc_account_source"],["sfdc_account_source"],["sfdc_account_source"]],"sources":[],"metrics":[],"description":"This table maps an original crm_account_id to its final, non-deleted crm_account_id if the original crm_id has been deleted and merged. If the account has not been deleted and merged, the non-deleted crm_account_id is equal to the original crm_account_id.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/restricted_safe/map_merged_crm_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.845014,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mapping.map_merged_crm_account","label":"map_merged_crm_account"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"PREP_CHARGE_CENTRAL_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_NAME":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"DIM_CHARGE_ID":{"type":"TEXT","index":7,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":8,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":9,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":14,"name":"EFFECTIVE_START_DATE_ID","comment":null,"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":15,"name":"EFFECTIVE_END_DATE_ID","comment":null,"display_name":"effective_end_date_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"RATE_PLAN_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":18,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":19,"name":"RATE_PLAN_CHARGE_DESCRIPTION","comment":null,"display_name":"rate_plan_charge_description"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":20,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":21,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":22,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":23,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":24,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":25,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":26,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":27,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":28,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"EFFECTIVE_START_DATE":{"type":"DATE","index":29,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":30,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":31,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":32,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":33,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":34,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":35,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":36,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"MRR":{"type":"FLOAT","index":37,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR_CALC":{"type":"FLOAT","index":38,"name":"PREVIOUS_MRR_CALC","comment":null,"display_name":"previous_mrr_calc"},"PREVIOUS_MRR":{"type":"FLOAT","index":39,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR_CALC":{"type":"FLOAT","index":40,"name":"DELTA_MRR_CALC","comment":null,"display_name":"delta_mrr_calc"},"DELTA_MRR":{"type":"FLOAT","index":41,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"DELTA_MRC":{"type":"FLOAT","index":42,"name":"DELTA_MRC","comment":null,"display_name":"delta_mrc"},"ARR":{"type":"FLOAT","index":43,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":44,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARC":{"type":"FLOAT","index":45,"name":"DELTA_ARC","comment":null,"display_name":"delta_arc"},"DELTA_ARR":{"type":"FLOAT","index":46,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":47,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY_CALC":{"type":"FLOAT","index":48,"name":"PREVIOUS_QUANTITY_CALC","comment":null,"display_name":"previous_quantity_calc"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":49,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY_CALC":{"type":"FLOAT","index":50,"name":"DELTA_QUANTITY_CALC","comment":null,"display_name":"delta_quantity_calc"},"DELTA_QUANTITY":{"type":"FLOAT","index":51,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"TCV":{"type":"FLOAT","index":52,"name":"TCV","comment":null,"display_name":"tcv"},"DELTA_TCV":{"type":"FLOAT","index":53,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":54,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":55,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"CREATED_BY":{"type":"TEXT","index":56,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":57,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":58,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":59,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_charge_central_sandbox","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe","mnpi"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","prep_charge_central_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/prep_charge_central_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/prep_charge_central_sandbox.sql","name":"prep_charge_central_sandbox","alias":"prep_charge_central_sandbox","checksum":{"name":"sha256","checksum":"bf393a03806624f791bd7ad929e037813beb1a810999a12223b00b6c29567ef8"},"tags":["workspace","safe","mnpi"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["sfdc_account_source"],["sfdc_account_source"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_rate_plan_source"],["zuora_central_sandbox_rate_plan_source"],["zuora_central_sandbox_rate_plan_charge_source"],["zuora_central_sandbox_rate_plan_charge_source"],["zuora_central_sandbox_subscription_source"],["zuora_central_sandbox_subscription_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/prep_charge_central_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi"],"secure":true},"created_at":1689033687.6080577,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.prep_charge_central_sandbox","label":"prep_charge_central_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_CRM_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_parent_crm_account_id","comment":null,"description":"ultimate parent account id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"DIM_CRM_USER_ID":{"type":"TEXT","index":3,"name":"DIM_CRM_USER_ID","comment":null,"display_name":"dim_crm_user_id"},"MERGED_TO_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"merged_to_account_id","comment":null,"description":"for deleted accounts this is the SFDC account they were merged to","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merged_to_account_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":5,"name":"record_type_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_type_id"},"CRM_ACCOUNT_OWNER_ID":{"type":"TEXT","index":6,"name":"CRM_ACCOUNT_OWNER_ID","comment":null,"display_name":"crm_account_owner_id"},"PROPOSED_CRM_ACCOUNT_OWNER_ID":{"type":"TEXT","index":7,"name":"PROPOSED_CRM_ACCOUNT_OWNER_ID","comment":null,"display_name":"proposed_crm_account_owner_id"},"TECHNICAL_ACCOUNT_MANAGER_ID":{"type":"TEXT","index":8,"name":"TECHNICAL_ACCOUNT_MANAGER_ID","comment":null,"display_name":"technical_account_manager_id"},"MASTER_RECORD_ID":{"type":"TEXT","index":9,"name":"MASTER_RECORD_ID","comment":null,"display_name":"master_record_id"},"DIM_CRM_PERSON_PRIMARY_CONTACT_ID":{"type":"TEXT","index":10,"name":"DIM_CRM_PERSON_PRIMARY_CONTACT_ID","comment":null,"display_name":"dim_crm_person_primary_contact_id"},"ACCOUNT_OWNER":{"type":"TEXT","index":11,"name":"account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner"},"PROPOSED_CRM_ACCOUNT_OWNER":{"type":"TEXT","index":12,"name":"PROPOSED_CRM_ACCOUNT_OWNER","comment":null,"display_name":"proposed_crm_account_owner"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":13,"name":"technical_account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"CRM_ACCOUNT_OWNER_SALES_SEGMENT":{"type":"TEXT","index":14,"name":"CRM_ACCOUNT_OWNER_SALES_SEGMENT","comment":null,"display_name":"crm_account_owner_sales_segment"},"CRM_ACCOUNT_OWNER_GEO":{"type":"TEXT","index":15,"name":"CRM_ACCOUNT_OWNER_GEO","comment":null,"display_name":"crm_account_owner_geo"},"CRM_ACCOUNT_OWNER_REGION":{"type":"TEXT","index":16,"name":"CRM_ACCOUNT_OWNER_REGION","comment":null,"display_name":"crm_account_owner_region"},"CRM_ACCOUNT_OWNER_AREA":{"type":"TEXT","index":17,"name":"CRM_ACCOUNT_OWNER_AREA","comment":null,"display_name":"crm_account_owner_area"},"CRM_ACCOUNT_OWNER_SALES_SEGMENT_GEO_REGION_AREA":{"type":"TEXT","index":18,"name":"CRM_ACCOUNT_OWNER_SALES_SEGMENT_GEO_REGION_AREA","comment":null,"display_name":"crm_account_owner_sales_segment_geo_region_area"},"CRM_ACCOUNT_OWNER_TITLE":{"type":"TEXT","index":19,"name":"CRM_ACCOUNT_OWNER_TITLE","comment":null,"display_name":"crm_account_owner_title"},"CRM_ACCOUNT_OWNER_ROLE":{"type":"TEXT","index":20,"name":"CRM_ACCOUNT_OWNER_ROLE","comment":null,"display_name":"crm_account_owner_role"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":21,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":22,"name":"crm_account_name","comment":null,"description":"account name from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":23,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":24,"name":"PARENT_CRM_ACCOUNT_GEO","comment":null,"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":25,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":26,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":27,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":28,"name":"PARENT_CRM_ACCOUNT_BUSINESS_UNIT","comment":null,"display_name":"parent_crm_account_business_unit"},"PARENT_CRM_ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":29,"name":"PARENT_CRM_ACCOUNT_ROLE_TYPE","comment":null,"display_name":"parent_crm_account_role_type"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":30,"name":"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"parent_crm_account_max_family_employee"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":31,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":32,"name":"PARENT_CRM_ACCOUNT_UPA_STATE","comment":null,"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":33,"name":"PARENT_CRM_ACCOUNT_UPA_CITY","comment":null,"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_STREET":{"type":"TEXT","index":34,"name":"PARENT_CRM_ACCOUNT_UPA_STREET","comment":null,"display_name":"parent_crm_account_upa_street"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":35,"name":"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE","comment":null,"display_name":"parent_crm_account_upa_postal_code"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":36,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"crm_account_employee_count"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":37,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"CRM_ACCOUNT_GTM_STRATEGY":{"type":"TEXT","index":38,"name":"CRM_ACCOUNT_GTM_STRATEGY","comment":null,"display_name":"crm_account_gtm_strategy"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":39,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT_GROUPED","comment":null,"display_name":"parent_crm_account_sales_segment_grouped"},"PARENT_CRM_ACCOUNT_SEGMENT_REGION_STAMPED_GROUPED":{"type":"TEXT","index":40,"name":"PARENT_CRM_ACCOUNT_SEGMENT_REGION_STAMPED_GROUPED","comment":null,"display_name":"parent_crm_account_segment_region_stamped_grouped"},"CRM_ACCOUNT_FOCUS_ACCOUNT":{"type":"TEXT","index":41,"name":"CRM_ACCOUNT_FOCUS_ACCOUNT","comment":null,"display_name":"crm_account_focus_account"},"CRM_ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":42,"name":"CRM_ACCOUNT_OWNER_USER_SEGMENT","comment":null,"display_name":"crm_account_owner_user_segment"},"CRM_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":43,"name":"CRM_ACCOUNT_BILLING_COUNTRY","comment":null,"display_name":"crm_account_billing_country"},"CRM_ACCOUNT_BILLING_COUNTRY_CODE":{"type":"TEXT","index":44,"name":"CRM_ACCOUNT_BILLING_COUNTRY_CODE","comment":null,"display_name":"crm_account_billing_country_code"},"CRM_ACCOUNT_TYPE":{"type":"TEXT","index":45,"name":"CRM_ACCOUNT_TYPE","comment":null,"display_name":"crm_account_type"},"CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":46,"name":"CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"crm_account_industry"},"CRM_ACCOUNT_SUB_INDUSTRY":{"type":"TEXT","index":47,"name":"CRM_ACCOUNT_SUB_INDUSTRY","comment":null,"display_name":"crm_account_sub_industry"},"CRM_ACCOUNT_OWNER":{"type":"TEXT","index":48,"name":"CRM_ACCOUNT_OWNER","comment":null,"display_name":"crm_account_owner"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":49,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND","comment":null,"display_name":"crm_account_employee_count_band"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":50,"name":"PARTNER_VAT_TAX_ID","comment":null,"display_name":"partner_vat_tax_id"},"ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"ACCOUNT_MANAGER","comment":null,"display_name":"account_manager"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":52,"name":"BUSINESS_DEVELOPMENT_REP","comment":null,"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":53,"name":"DEDICATED_SERVICE_ENGINEER","comment":null,"display_name":"dedicated_service_engineer"},"ACCOUNT_TIER":{"type":"TEXT","index":54,"name":"ACCOUNT_TIER","comment":null,"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":55,"name":"ACCOUNT_TIER_NOTES","comment":null,"display_name":"account_tier_notes"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":56,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":57,"name":"SUPPORT_LEVEL","comment":null,"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":58,"name":"NAMED_ACCOUNT","comment":null,"display_name":"named_account"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":59,"name":"BILLING_POSTAL_CODE","comment":null,"display_name":"billing_postal_code"},"PARTNER_TYPE":{"type":"TEXT","index":60,"name":"PARTNER_TYPE","comment":null,"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":61,"name":"PARTNER_STATUS","comment":null,"display_name":"partner_status"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":62,"name":"GITLAB_CUSTOMER_SUCCESS_PROJECT","comment":null,"display_name":"gitlab_customer_success_project"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":63,"name":"DEMANDBASE_ACCOUNT_LIST","comment":null,"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":64,"name":"DEMANDBASE_INTENT","comment":null,"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":65,"name":"DEMANDBASE_PAGE_VIEWS","comment":null,"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":66,"name":"DEMANDBASE_SCORE","comment":null,"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":67,"name":"DEMANDBASE_SESSIONS","comment":null,"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":68,"name":"DEMANDBASE_TRENDING_OFFSITE_INTENT","comment":null,"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":69,"name":"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT","comment":null,"display_name":"demandbase_trending_onsite_engagement"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":70,"name":"IS_LOCALLY_MANAGED_ACCOUNT","comment":null,"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":71,"name":"IS_STRATEGIC_ACCOUNT","comment":null,"display_name":"is_strategic_account"},"PARTNER_TRACK":{"type":"TEXT","index":72,"name":"PARTNER_TRACK","comment":null,"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":73,"name":"PARTNERS_PARTNER_TYPE","comment":null,"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":74,"name":"GITLAB_PARTNER_PROGRAM","comment":null,"display_name":"gitlab_partner_program"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":75,"name":"ZOOM_INFO_COMPANY_NAME","comment":null,"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":76,"name":"ZOOM_INFO_COMPANY_REVENUE","comment":null,"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":77,"name":"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT","comment":null,"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":78,"name":"ZOOM_INFO_COMPANY_INDUSTRY","comment":null,"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":79,"name":"ZOOM_INFO_COMPANY_CITY","comment":null,"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":80,"name":"ZOOM_INFO_COMPANY_STATE_PROVINCE","comment":null,"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":81,"name":"ZOOM_INFO_COMPANY_COUNTRY","comment":null,"display_name":"zoom_info_company_country"},"ACCOUNT_PHONE":{"type":"TEXT","index":82,"name":"ACCOUNT_PHONE","comment":null,"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":83,"name":"ZOOMINFO_ACCOUNT_PHONE","comment":null,"display_name":"zoominfo_account_phone"},"ABM_TIER":{"type":"TEXT","index":84,"name":"ABM_TIER","comment":null,"display_name":"abm_tier"},"HEALTH_NUMBER":{"type":"FLOAT","index":85,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":86,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":87,"name":"PARTNER_ACCOUNT_IBAN_NUMBER","comment":null,"display_name":"partner_account_iban_number"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":88,"name":"gitlab_com_user","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user"},"CRM_ACCOUNT_ZI_TECHNOLOGIES":{"type":"TEXT","index":89,"name":"CRM_ACCOUNT_ZI_TECHNOLOGIES","comment":null,"display_name":"crm_account_zi_technologies"},"CRM_ACCOUNT_ZOOM_INFO_WEBSITE":{"type":"TEXT","index":90,"name":"CRM_ACCOUNT_ZOOM_INFO_WEBSITE","comment":null,"display_name":"crm_account_zoom_info_website"},"CRM_ACCOUNT_ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":91,"name":"CRM_ACCOUNT_ZOOM_INFO_COMPANY_OTHER_DOMAINS","comment":null,"display_name":"crm_account_zoom_info_company_other_domains"},"CRM_ACCOUNT_ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":92,"name":"CRM_ACCOUNT_ZOOM_INFO_DOZISF_ZI_ID","comment":null,"display_name":"crm_account_zoom_info_dozisf_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":93,"name":"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_ZI_ID","comment":null,"display_name":"crm_account_zoom_info_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":94,"name":"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_NAME","comment":null,"display_name":"crm_account_zoom_info_parent_company_name"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":95,"name":"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID","comment":null,"display_name":"crm_account_zoom_info_ultimate_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":96,"name":"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME","comment":null,"display_name":"crm_account_zoom_info_ultimate_parent_company_name"},"CRM_ACCOUNT_ZOOM_INFO_NUMBER_OF_DEVELOPERS":{"type":"FLOAT","index":97,"name":"CRM_ACCOUNT_ZOOM_INFO_NUMBER_OF_DEVELOPERS","comment":null,"display_name":"crm_account_zoom_info_number_of_developers"},"CRM_ACCOUNT_ZOOM_INFO_TOTAL_FUNDING":{"type":"TEXT","index":98,"name":"CRM_ACCOUNT_ZOOM_INFO_TOTAL_FUNDING","comment":null,"display_name":"crm_account_zoom_info_total_funding"},"FORBES_2000_RANK":{"type":"TEXT","index":99,"name":"FORBES_2000_RANK","comment":null,"display_name":"forbes_2000_rank"},"PARENT_ACCOUNT_INDUSTRY_HIERARCHY":{"type":"TEXT","index":100,"name":"PARENT_ACCOUNT_INDUSTRY_HIERARCHY","comment":null,"display_name":"parent_account_industry_hierarchy"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":101,"name":"SALES_DEVELOPMENT_REP","comment":null,"display_name":"sales_development_rep"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":102,"name":"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES","comment":null,"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":103,"name":"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS","comment":null,"display_name":"admin_manual_source_account_address"},"EOA_SENTIMENT":{"type":"TEXT","index":104,"name":"EOA_SENTIMENT","comment":null,"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":105,"name":"GS_HEALTH_USER_ENGAGEMENT","comment":null,"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":106,"name":"GS_HEALTH_CD","comment":null,"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":107,"name":"GS_HEALTH_DEVSECOPS","comment":null,"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":108,"name":"GS_HEALTH_CI","comment":null,"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":109,"name":"GS_HEALTH_SCM","comment":null,"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":110,"name":"RISK_IMPACT","comment":null,"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":111,"name":"RISK_REASON","comment":null,"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":112,"name":"LAST_TIMELINE_AT_RISK_UPDATE","comment":null,"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":113,"name":"LAST_AT_RISK_UPDATE_COMMENTS","comment":null,"display_name":"last_at_risk_update_comments"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":114,"name":"BDR_PROSPECTING_STATUS","comment":null,"display_name":"bdr_prospecting_status"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":115,"name":"IS_SDR_TARGET_ACCOUNT","comment":null,"display_name":"is_sdr_target_account"},"IS_RESELLER":{"type":"BOOLEAN","index":116,"name":"is_reseller","comment":null,"description":"Identify whether a crm_account is a reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_reseller"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":117,"name":"is_jihu_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_jihu_account"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":118,"name":"IS_FIRST_ORDER_AVAILABLE","comment":null,"display_name":"is_first_order_available"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":119,"name":"IS_KEY_ACCOUNT","comment":null,"display_name":"is_key_account"},"IS_ZI_JENKINS_PRESENT":{"type":"NUMBER","index":120,"name":"IS_ZI_JENKINS_PRESENT","comment":null,"display_name":"is_zi_jenkins_present"},"IS_ZI_SVN_PRESENT":{"type":"NUMBER","index":121,"name":"IS_ZI_SVN_PRESENT","comment":null,"display_name":"is_zi_svn_present"},"IS_ZI_TORTOISE_SVN_PRESENT":{"type":"NUMBER","index":122,"name":"IS_ZI_TORTOISE_SVN_PRESENT","comment":null,"display_name":"is_zi_tortoise_svn_present"},"IS_ZI_GCP_PRESENT":{"type":"NUMBER","index":123,"name":"IS_ZI_GCP_PRESENT","comment":null,"display_name":"is_zi_gcp_present"},"IS_ZI_ATLASSIAN_PRESENT":{"type":"NUMBER","index":124,"name":"IS_ZI_ATLASSIAN_PRESENT","comment":null,"display_name":"is_zi_atlassian_present"},"IS_ZI_GITHUB_PRESENT":{"type":"NUMBER","index":125,"name":"IS_ZI_GITHUB_PRESENT","comment":null,"display_name":"is_zi_github_present"},"IS_ZI_GITHUB_ENTERPRISE_PRESENT":{"type":"NUMBER","index":126,"name":"IS_ZI_GITHUB_ENTERPRISE_PRESENT","comment":null,"display_name":"is_zi_github_enterprise_present"},"IS_ZI_AWS_PRESENT":{"type":"NUMBER","index":127,"name":"IS_ZI_AWS_PRESENT","comment":null,"display_name":"is_zi_aws_present"},"IS_ZI_KUBERNETES_PRESENT":{"type":"NUMBER","index":128,"name":"IS_ZI_KUBERNETES_PRESENT","comment":null,"display_name":"is_zi_kubernetes_present"},"IS_ZI_APACHE_SUBVERSION_PRESENT":{"type":"NUMBER","index":129,"name":"IS_ZI_APACHE_SUBVERSION_PRESENT","comment":null,"display_name":"is_zi_apache_subversion_present"},"IS_ZI_APACHE_SUBVERSION_SVN_PRESENT":{"type":"NUMBER","index":130,"name":"IS_ZI_APACHE_SUBVERSION_SVN_PRESENT","comment":null,"display_name":"is_zi_apache_subversion_svn_present"},"IS_ZI_HASHICORP_PRESENT":{"type":"NUMBER","index":131,"name":"IS_ZI_HASHICORP_PRESENT","comment":null,"display_name":"is_zi_hashicorp_present"},"IS_ZI_AWS_CLOUD_TRAIL_PRESENT":{"type":"NUMBER","index":132,"name":"IS_ZI_AWS_CLOUD_TRAIL_PRESENT","comment":null,"display_name":"is_zi_aws_cloud_trail_present"},"IS_ZI_CIRCLE_CI_PRESENT":{"type":"NUMBER","index":133,"name":"IS_ZI_CIRCLE_CI_PRESENT","comment":null,"display_name":"is_zi_circle_ci_present"},"IS_ZI_BIT_BUCKET_PRESENT":{"type":"NUMBER","index":134,"name":"IS_ZI_BIT_BUCKET_PRESENT","comment":null,"display_name":"is_zi_bit_bucket_present"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":135,"name":"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH","comment":null,"display_name":"is_excluded_from_zoom_info_enrich"},"CRM_ACCOUNT_CREATED_DATE_ID":{"type":"NUMBER","index":136,"name":"CRM_ACCOUNT_CREATED_DATE_ID","comment":null,"display_name":"crm_account_created_date_id"},"CRM_ACCOUNT_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":137,"name":"crm_account_created_date","comment":null,"description":"The date on which the CRM account was created in SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_created_date"},"ABM_TIER_1_DATE_ID":{"type":"NUMBER","index":138,"name":"ABM_TIER_1_DATE_ID","comment":null,"display_name":"abm_tier_1_date_id"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":139,"name":"ABM_TIER_1_DATE","comment":null,"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE_ID":{"type":"NUMBER","index":140,"name":"ABM_TIER_2_DATE_ID","comment":null,"display_name":"abm_tier_2_date_id"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":141,"name":"ABM_TIER_2_DATE","comment":null,"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE_ID":{"type":"NUMBER","index":142,"name":"ABM_TIER_3_DATE_ID","comment":null,"display_name":"abm_tier_3_date_id"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":143,"name":"ABM_TIER_3_DATE","comment":null,"display_name":"abm_tier_3_date"},"GTM_ACCELERATION_DATE_ID":{"type":"NUMBER","index":144,"name":"GTM_ACCELERATION_DATE_ID","comment":null,"display_name":"gtm_acceleration_date_id"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":145,"name":"GTM_ACCELERATION_DATE","comment":null,"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE_ID":{"type":"NUMBER","index":146,"name":"GTM_ACCOUNT_BASED_DATE_ID","comment":null,"display_name":"gtm_account_based_date_id"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":147,"name":"GTM_ACCOUNT_BASED_DATE","comment":null,"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE_ID":{"type":"NUMBER","index":148,"name":"GTM_ACCOUNT_CENTRIC_DATE_ID","comment":null,"display_name":"gtm_account_centric_date_id"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":149,"name":"GTM_ACCOUNT_CENTRIC_DATE","comment":null,"display_name":"gtm_account_centric_date"},"PARTNERS_SIGNED_CONTRACT_DATE_ID":{"type":"NUMBER","index":150,"name":"PARTNERS_SIGNED_CONTRACT_DATE_ID","comment":null,"display_name":"partners_signed_contract_date_id"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"DATE","index":151,"name":"PARTNERS_SIGNED_CONTRACT_DATE","comment":null,"display_name":"partners_signed_contract_date"},"TECHNICAL_ACCOUNT_MANAGER_DATE_ID":{"type":"NUMBER","index":152,"name":"TECHNICAL_ACCOUNT_MANAGER_DATE_ID","comment":null,"display_name":"technical_account_manager_date_id"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":153,"name":"TECHNICAL_ACCOUNT_MANAGER_DATE","comment":null,"display_name":"technical_account_manager_date"},"CUSTOMER_SINCE_DATE_ID":{"type":"NUMBER","index":154,"name":"CUSTOMER_SINCE_DATE_ID","comment":null,"display_name":"customer_since_date_id"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":155,"name":"CUSTOMER_SINCE_DATE","comment":null,"display_name":"customer_since_date"},"NEXT_RENEWAL_DATE_ID":{"type":"NUMBER","index":156,"name":"NEXT_RENEWAL_DATE_ID","comment":null,"display_name":"next_renewal_date_id"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":157,"name":"NEXT_RENEWAL_DATE","comment":null,"display_name":"next_renewal_date"},"GS_FIRST_VALUE_DATE_ID":{"type":"NUMBER","index":158,"name":"GS_FIRST_VALUE_DATE_ID","comment":null,"display_name":"gs_first_value_date_id"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":159,"name":"GS_FIRST_VALUE_DATE","comment":null,"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE_ID":{"type":"NUMBER","index":160,"name":"GS_LAST_CSM_ACTIVITY_DATE_ID","comment":null,"display_name":"gs_last_csm_activity_date_id"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":161,"name":"GS_LAST_CSM_ACTIVITY_DATE","comment":null,"display_name":"gs_last_csm_activity_date"},"COUNT_ACTIVE_SUBSCRIPTION_CHARGES":{"type":"FLOAT","index":162,"name":"COUNT_ACTIVE_SUBSCRIPTION_CHARGES","comment":null,"display_name":"count_active_subscription_charges"},"COUNT_ACTIVE_SUBSCRIPTIONS":{"type":"FLOAT","index":163,"name":"COUNT_ACTIVE_SUBSCRIPTIONS","comment":null,"display_name":"count_active_subscriptions"},"COUNT_BILLING_ACCOUNTS":{"type":"FLOAT","index":164,"name":"COUNT_BILLING_ACCOUNTS","comment":null,"display_name":"count_billing_accounts"},"COUNT_LICENSED_USERS":{"type":"FLOAT","index":165,"name":"COUNT_LICENSED_USERS","comment":null,"display_name":"count_licensed_users"},"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES":{"type":"FLOAT","index":166,"name":"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES","comment":null,"display_name":"count_of_new_business_won_opportunities"},"COUNT_OPEN_RENEWAL_OPPORTUNITIES":{"type":"FLOAT","index":167,"name":"COUNT_OPEN_RENEWAL_OPPORTUNITIES","comment":null,"display_name":"count_open_renewal_opportunities"},"COUNT_OPPORTUNITIES":{"type":"FLOAT","index":168,"name":"COUNT_OPPORTUNITIES","comment":null,"display_name":"count_opportunities"},"COUNT_PRODUCTS_PURCHASED":{"type":"FLOAT","index":169,"name":"COUNT_PRODUCTS_PURCHASED","comment":null,"display_name":"count_products_purchased"},"COUNT_WON_OPPORTUNITIES":{"type":"FLOAT","index":170,"name":"COUNT_WON_OPPORTUNITIES","comment":null,"display_name":"count_won_opportunities"},"COUNT_CONCURRENT_EE_SUBSCRIPTIONS":{"type":"FLOAT","index":171,"name":"COUNT_CONCURRENT_EE_SUBSCRIPTIONS","comment":null,"display_name":"count_concurrent_ee_subscriptions"},"COUNT_CE_INSTANCES":{"type":"FLOAT","index":172,"name":"COUNT_CE_INSTANCES","comment":null,"display_name":"count_ce_instances"},"COUNT_ACTIVE_CE_USERS":{"type":"FLOAT","index":173,"name":"COUNT_ACTIVE_CE_USERS","comment":null,"display_name":"count_active_ce_users"},"COUNT_OPEN_OPPORTUNITIES":{"type":"FLOAT","index":174,"name":"COUNT_OPEN_OPPORTUNITIES","comment":null,"display_name":"count_open_opportunities"},"COUNT_USING_CE":{"type":"BOOLEAN","index":175,"name":"COUNT_USING_CE","comment":null,"display_name":"count_using_ce"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":176,"name":"CARR_THIS_ACCOUNT","comment":null,"display_name":"carr_this_account"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":177,"name":"CARR_ACCOUNT_FAMILY","comment":null,"display_name":"carr_account_family"},"POTENTIAL_USERS":{"type":"FLOAT","index":178,"name":"POTENTIAL_USERS","comment":null,"display_name":"potential_users"},"NUMBER_OF_LICENSES_THIS_ACCOUNT":{"type":"FLOAT","index":179,"name":"NUMBER_OF_LICENSES_THIS_ACCOUNT","comment":null,"display_name":"number_of_licenses_this_account"},"DECISION_MAKER_COUNT_LINKEDIN":{"type":"FLOAT","index":180,"name":"DECISION_MAKER_COUNT_LINKEDIN","comment":null,"display_name":"decision_maker_count_linkedin"},"NUMBER_OF_EMPLOYEES":{"type":"NUMBER","index":181,"name":"NUMBER_OF_EMPLOYEES","comment":null,"display_name":"number_of_employees"},"USER_ROLE_TYPE":{"type":"TEXT","index":182,"name":"USER_ROLE_TYPE","comment":null,"display_name":"user_role_type"},"OWNER_ROLE":{"type":"TEXT","index":183,"name":"OWNER_ROLE","comment":null,"display_name":"owner_role"},"PARENT_CRM_ACCOUNT_LAM":{"type":"FLOAT","index":184,"name":"PARENT_CRM_ACCOUNT_LAM","comment":null,"display_name":"parent_crm_account_lam"},"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT":{"type":"FLOAT","index":185,"name":"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT","comment":null,"display_name":"parent_crm_account_lam_dev_count"},"PTE_SCORE":{"type":"NUMBER","index":186,"name":"PTE_SCORE","comment":null,"display_name":"pte_score"},"PTE_DECILE":{"type":"NUMBER","index":187,"name":"PTE_DECILE","comment":null,"display_name":"pte_decile"},"PTE_SCORE_GROUP":{"type":"NUMBER","index":188,"name":"PTE_SCORE_GROUP","comment":null,"display_name":"pte_score_group"},"PTC_SCORE":{"type":"NUMBER","index":189,"name":"PTC_SCORE","comment":null,"display_name":"ptc_score"},"PTC_DECILE":{"type":"NUMBER","index":190,"name":"PTC_DECILE","comment":null,"display_name":"ptc_decile"},"PTC_SCORE_GROUP":{"type":"NUMBER","index":191,"name":"PTC_SCORE_GROUP","comment":null,"display_name":"ptc_score_group"},"CREATED_BY_ID":{"type":"TEXT","index":192,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_BY_NAME":{"type":"TEXT","index":193,"name":"CREATED_BY_NAME","comment":null,"display_name":"created_by_name"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":194,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_BY_NAME":{"type":"TEXT","index":195,"name":"LAST_MODIFIED_BY_NAME","comment":null,"display_name":"last_modified_by_name"},"LAST_MODIFIED_DATE_ID":{"type":"NUMBER","index":196,"name":"LAST_MODIFIED_DATE_ID","comment":null,"display_name":"last_modified_date_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":197,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE_ID":{"type":"NUMBER","index":198,"name":"LAST_ACTIVITY_DATE_ID","comment":null,"display_name":"last_activity_date_id"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":199,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"IS_DELETED":{"type":"BOOLEAN","index":200,"name":"is_deleted","comment":null,"description":"flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"CREATED_BY":{"type":"TEXT","index":201,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":202,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":203,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":204,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":205,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":206,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"crm_account_country":{"name":"crm_account_country","description":"billing country of SFDC account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_country"},"ultimate_parent_account_name":{"name":"ultimate_parent_account_name","description":"parent account name","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_name"},"ultimate_parent_account_segment":{"name":"ultimate_parent_account_segment","description":"Sales segment of the parent account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_segment"},"ultimate_parent_billing_country":{"name":"ultimate_parent_billing_country","description":"billing country of parent account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_billing_country"},"account_owner_team":{"name":"account_owner_team","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner_team"},"account_type":{"name":"account_type","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_type"},"gtm_strategy":{"name":"gtm_strategy","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_strategy"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:04UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":80442880,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_crm_account","raw_sql":"{{ sfdc_account_fields('live') }}\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@msendal\",\n    updated_by=\"@michellecooper\",\n    created_date=\"2020-06-01\",\n    updated_date=\"2022-03-02\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.sfdc_account_fields","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.sfdc_user_roles_source","model.gitlab_snowflake.sfdc_user_roles_source","model.gitlab_snowflake.prep_crm_user","model.gitlab_snowflake.prep_crm_user","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_users_source","model.gitlab_snowflake.sfdc_users_source","model.gitlab_snowflake.sfdc_record_type","model.gitlab_snowflake.sfdc_record_type","model.gitlab_snowflake.pte_scores_source","model.gitlab_snowflake.pte_scores_source","model.gitlab_snowflake.ptc_scores_source","model.gitlab_snowflake.ptc_scores_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_crm_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_crm_account.sql","original_file_path":"models/common_prep/restricted_safe/prep_crm_account.sql","name":"prep_crm_account","alias":"prep_crm_account","checksum":{"name":"sha256","checksum":"8249bc0b327b437d9c590ca7079e67606701ec579cc03123a790d9090872ca28"},"tags":["safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["prep_crm_person"],["prep_crm_person"],["sfdc_user_roles_source"],["sfdc_user_roles_source"],["prep_crm_user"],["prep_crm_user"],["sfdc_account_source"],["sfdc_account_source"],["sfdc_users_source"],["sfdc_users_source"],["sfdc_record_type"],["sfdc_record_type"],["pte_scores_source"],["pte_scores_source"],["ptc_scores_source"],["ptc_scores_source"]],"sources":[],"metrics":[],"description":"Prep model for the live crm account dimension.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_crm_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033757.9712517,"compiled_sql":"$15","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_crm_account","label":"prep_crm_account"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_INVOICE_ITEM","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"INVOICE_ITEM_ID":{"type":"TEXT","index":1,"name":"invoice_item_id","comment":null,"description":"unique invoice item id that identifies a line item on the invoice","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"invoice_item_id"},"DIM_INVOICE_ID":{"type":"TEXT","index":2,"name":"dim_invoice_id","comment":null,"description":"The ID of the invoice that's associated with the invoice item","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_invoice_id"},"DIM_BILLING_ACCOUNT_ID_SUBSCRIPTION":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_billing_account_id_subscription"},"DIM_CRM_ACCOUNT_ID_SUBSCRIPTION":{"type":"TEXT","index":4,"name":"DIM_CRM_ACCOUNT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_crm_account_id_subscription"},"DIM_BILLING_ACCOUNT_ID_INVOICE":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE","comment":null,"display_name":"dim_billing_account_id_invoice"},"DIM_CRM_ACCOUNT_ID_INVOICE":{"type":"TEXT","index":6,"name":"dim_crm_account_id_invoice","comment":null,"description":"The ID of the customer account associated with the invoice","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id_invoice"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_REVENUE_CONTRACT_LINE_ID":{"type":"TEXT","index":8,"name":"DIM_REVENUE_CONTRACT_LINE_ID","comment":null,"display_name":"dim_revenue_contract_line_id"},"CHARGE_ID":{"type":"TEXT","index":9,"name":"charge_id","comment":null,"description":"The unique identifier of a verion of a rate plan charge associated with the invoice item","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":10,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"INVOICE_NUMBER":{"type":"TEXT","index":11,"name":"invoice_number","comment":null,"description":"The unique identification number of the invoice","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"invoice_number"},"INVOICE_DATE":{"type":"DATE","index":12,"name":"invoice_date","comment":null,"description":"The date the invoice was generated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_date"},"SERVICE_START_DATE":{"type":"DATE","index":13,"name":"service_start_date","comment":null,"description":"The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_start_date"},"SERVICE_END_DATE":{"type":"DATE","index":14,"name":"service_end_date","comment":null,"description":"The end date of the service period associated with this invoice item. Service ends one second before the date in this value.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":15,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":16,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"QUANTITY":{"type":"FLOAT","index":17,"name":"QUANTITY","comment":null,"display_name":"quantity"},"MRR":{"type":"FLOAT","index":18,"name":"MRR","comment":null,"display_name":"mrr"},"ARR":{"type":"FLOAT","index":19,"name":"ARR","comment":null,"display_name":"arr"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":20,"name":"invoice_item_charge_amount","comment":null,"description":"The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_item_charge_amount"},"INVOICE_ITEM_UNIT_PRICE":{"type":"FLOAT","index":21,"name":"invoice_item_unit_price","comment":null,"description":"The per-unit price of the invoice item. Calculated from multiple fields in Product Rate Plan Charge and Product Rate Plan Charge Tier objects.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_item_unit_price"},"INVOICE_AMOUNT_WITHOUT_TAX":{"type":"FLOAT","index":22,"name":"invoice_amount_without_tax","comment":null,"description":"The invoice amount excluding tax","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_amount_without_tax"},"TAX_AMOUNT_SUM":{"type":"FLOAT","index":23,"name":"TAX_AMOUNT_SUM","comment":null,"display_name":"tax_amount_sum"},"IS_LAST_SEGMENT_VERSION":{"type":"BOOLEAN","index":24,"name":"IS_LAST_SEGMENT_VERSION","comment":null,"display_name":"is_last_segment_version"},"CREATED_BY":{"type":"TEXT","index":25,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":26,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":27,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":28,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":29,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":30,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":53168640,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_invoice_item","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_bill_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_bill_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_financial","restricted_safe","fct_invoice_item"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_financial/restricted_safe/fct_invoice_item.sql","original_file_path":"models/common/facts_financial/restricted_safe/fct_invoice_item.sql","name":"fct_invoice_item","alias":"fct_invoice_item","checksum":{"name":"sha256","checksum":"f8d7f077c9546d6df0ef38a0d859d684666ede882d7bdc46d83cd49887a40de3"},"tags":["safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_account_source"],["zuora_account_source"],["zuora_invoice_source"],["zuora_invoice_source"],["zuora_invoice_item_source"],["zuora_invoice_item_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"],["zuora_revenue_revenue_contract_bill_source"],["zuora_revenue_revenue_contract_bill_source"]],"sources":[],"metrics":[],"description":"Fact table providing invoice line item details.\n\nThe invoicing to customers business process can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#6-invoicing-to-customers).\n\nData comes from [Zuora Documentation](https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics/D_Data_Sources_and_Exports/C_Data_Source_Reference/Invoice_Item_Data_Source).\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_financial/restricted_safe/fct_invoice_item.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.2693381,"compiled_sql":"$17","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_invoice_item","label":"fct_invoice_item"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_BILLING_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_SK":{"type":"TEXT","index":1,"name":"dim_billing_account_sk","comment":null,"description":"A surrogate key that uniquely identifes each row of the billing account table.  It is currently formed by hashing the billing account IDs from Zuora that uniquely identify a Zuora account associated with a given Subscription ID. This is built as a conceptual [dimension](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/dimension-table-structure/) and can be used to build a dimension table to limit the number of columns on a fact table.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_billing_account_sk"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_crm_account_id","comment":null,"description":"The customer account ID for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":4,"name":"billing_account_number","comment":null,"description":"A unique Zuora account number","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_number"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":5,"name":"billing_account_name","comment":null,"description":"The name of the Zuora account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_name"},"ACCOUNT_STATUS":{"type":"TEXT","index":6,"name":"account_status","comment":null,"description":"The status of the account in the system. Can be draft, active, cancelled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_status"},"PARENT_ID":{"type":"TEXT","index":7,"name":"parent_id","comment":null,"description":"The identifier of the parent customer account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":8,"name":"sfdc_account_code","comment":null,"description":"The code for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_account_code"},"SFDC_ENTITY":{"type":"TEXT","index":9,"name":"sfdc_entity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_entity"},"ACCOUNT_CURRENCY":{"type":"TEXT","index":10,"name":"account_currency","comment":null,"description":"A currency as defined in Billing Settings in the Zuora UI","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_currency"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":11,"name":"sold_to_country","comment":null,"description":"The country of the sold to contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sold_to_country"},"SSP_CHANNEL":{"type":"TEXT","index":12,"name":"ssp_channel","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":13,"name":"po_required","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":14,"name":"auto_pay","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":15,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"IS_DELETED":{"type":"BOOLEAN","index":16,"name":"is_deleted","comment":null,"description":"The flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"BATCH":{"type":"TEXT","index":17,"name":"batch","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"batch"},"RECORD_DATA_SOURCE":{"type":"TEXT","index":18,"name":"record_data_source","comment":null,"description":"An indicator flag to identify if the record exists in Zuora or CDot or in both the sources. This column can be used to identify any missing records or data sync issues in both the sources.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_data_source"},"CREATED_BY":{"type":"TEXT","index":19,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":20,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":21,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":22,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":24,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:59UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6629888,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_billing_account","raw_sql":"$18","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_payment_method_source","model.gitlab_snowflake.zuora_payment_method_source","model.gitlab_snowflake.customers_db_billing_accounts_source","model.gitlab_snowflake.customers_db_billing_accounts_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_billing_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_billing_account.sql","original_file_path":"models/common_prep/prep_billing_account.sql","name":"prep_billing_account","alias":"prep_billing_account","checksum":{"name":"sha256","checksum":"bcfdabd1f09c24aa8ccfb2a1e01707966f7348693eabb457562d4da5c663afd1"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_contact_source"],["zuora_contact_source"],["zuora_payment_method_source"],["zuora_payment_method_source"],["customers_db_billing_accounts_source"],["customers_db_billing_accounts_source"],["zuora_account_source"],["zuora_account_source"],["zuora_account_source"],["zuora_account_source"]],"sources":[],"metrics":[],"description":"Prep model for merging the billing accounts data from both Zuora and CDot sources. This model will be used as a source model for creating `dim_billing_account` core business data object downstream.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_billing_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.8841963,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_billing_account","label":"prep_billing_account"},{"metadata":{"type":"VIEW","schema":"WORKSPACE_FINANCE","name":"PREP_SUBSCRIPTION_API_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER","comment":null,"display_name":"dim_billing_account_id_invoice_owner"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":5,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":6,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":7,"name":"DIM_SUBSCRIPTION_ID_PREVIOUS","comment":null,"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":8,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":9,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":10,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":11,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":14,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":15,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":16,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":17,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":18,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":19,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":20,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":22,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":24,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":25,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":26,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":27,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":28,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":29,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":30,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":31,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":32,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":33,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":34,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":35,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":36,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":37,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":38,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":39,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":40,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":41,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":42,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":43,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":44,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":45,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":46,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":47,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":48,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription_api_sandbox","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_account_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_finance","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","prep_subscription_api_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/prep_subscription_api_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/prep_subscription_api_sandbox.sql","name":"prep_subscription_api_sandbox","alias":"prep_subscription_api_sandbox","checksum":{"name":"sha256","checksum":"64e3ed49b9e60cf350904e9648c5d4bfaf93fa9c1362deba4cc15bdbe1bb499a"},"tags":["workspace","mnpi_exception"],"refs":[["date_details"],["date_details"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_api_sandbox_subscription_source"],["zuora_api_sandbox_subscription_source"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/prep_subscription_api_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033734.0692322,"compiled_sql":"$1b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_finance.prep_subscription_api_sandbox","label":"prep_subscription_api_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_SUBSCRIPTION_SNAPSHOT_BOTTOM_UP","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"subscription_snapshot_id","comment":null,"description":"Unique identifier of a subscription snapshot","meta":{},"data_type":null,"quote":null,"tags":["tdf","arr_snapshots"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"subscription_snapshot_id"},"SNAPSHOT_ID":{"type":"NUMBER","index":2,"name":"SNAPSHOT_ID","comment":null,"display_name":"snapshot_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":3,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":4,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":5,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":8,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":9,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":10,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":14,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":15,"name":"DIM_SUBSCRIPTION_ID_PREVIOUS","comment":null,"display_name":"dim_subscription_id_previous"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":16,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":17,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":18,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":19,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":20,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":21,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":22,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":23,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":24,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":25,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":26,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":27,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":28,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":29,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":30,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"TIMESTAMP_TZ","index":31,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"TIMESTAMP_TZ","index":32,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"TIMESTAMP_TZ","index":33,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"TIMESTAMP_TZ","index":34,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":36,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":37,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"TERM_START_DATE":{"type":"DATE","index":38,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":39,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":40,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":41,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":42,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":43,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":44,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":45,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":46,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":47,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"SUBSCRIPTION_COHORT_YEAR":{"type":"DATE","index":48,"name":"SUBSCRIPTION_COHORT_YEAR","comment":null,"display_name":"subscription_cohort_year"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":49,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":50,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":51,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":52,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":53,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":54,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":55,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"CREATED_BY":{"type":"TEXT","index":56,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":57,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":58,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":59,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:15UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":8020221440,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_subscription_snapshot_bottom_up","raw_sql":"$1c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.get_keyed_nulls","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.zuora_account_snapshots_source","model.gitlab_snowflake.zuora_account_snapshots_source","model.gitlab_snowflake.zuora_subscription_snapshots_source","model.gitlab_snowflake.zuora_subscription_snapshots_source","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.map_subscription_lineage","model.gitlab_snowflake.map_subscription_lineage"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["arr_snapshots","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_subscription_snapshot_bottom_up"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_subscription_snapshot_bottom_up.sql","original_file_path":"models/common/dimensions_shared/dim_subscription_snapshot_bottom_up.sql","name":"dim_subscription_snapshot_bottom_up","alias":"dim_subscription_snapshot_bottom_up","checksum":{"name":"sha256","checksum":"32b5e0177cc7367d038e0716a3053deeedd8203f0fec63156547631ae64c3723"},"tags":["arr_snapshots","mnpi_exception"],"refs":[["dim_date"],["dim_date"],["zuora_account_snapshots_source"],["zuora_account_snapshots_source"],["zuora_subscription_snapshots_source"],["zuora_subscription_snapshots_source"],["map_merged_crm_account"],["map_merged_crm_account"],["prep_amendment"],["prep_amendment"],["map_subscription_lineage"],["map_subscription_lineage"]],"sources":[],"metrics":[],"description":"Daily snapshot of subscriptions starting from 2020-03-01. This is built from the bottom up using snapshotted source tables.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_subscription_snapshot_bottom_up.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["arr_snapshots","mnpi_exception"]},"created_at":1689033750.8204737,"compiled_sql":"$1d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_subscription_snapshot_bottom_up","label":"dim_subscription_snapshot_bottom_up"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"RPT_MANUAL_TRUE_UP_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_NAME":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"TEXT","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"TEXT","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"DIM_CHARGE_ID":{"type":"TEXT","index":7,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":8,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":9,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"Unique identifier of a billing account","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":14,"name":"EFFECTIVE_START_DATE_ID","comment":null,"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":15,"name":"EFFECTIVE_END_DATE_ID","comment":null,"display_name":"effective_end_date_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"RATE_PLAN_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":18,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"IS_LAST_SEGMENT":{"type":"TEXT","index":19,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":20,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":21,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":22,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":23,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"TEXT","index":24,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":25,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":26,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":27,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"EFFECTIVE_START_DATE":{"type":"DATE","index":28,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":29,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":30,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":31,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":32,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":33,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":34,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":35,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"ADJUSTMENT":{"type":"FLOAT","index":36,"name":"adjustment","comment":null,"description":"Amount of ARR which needs to be adjusted for the true-up","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"adjustment"},"MRR":{"type":"FLOAT","index":37,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR_CALC":{"type":"TEXT","index":38,"name":"PREVIOUS_MRR_CALC","comment":null,"display_name":"previous_mrr_calc"},"PREVIOUS_MRR":{"type":"TEXT","index":39,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR_CALC":{"type":"TEXT","index":40,"name":"DELTA_MRR_CALC","comment":null,"display_name":"delta_mrr_calc"},"DELTA_MRR":{"type":"TEXT","index":41,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"DELTA_MRC":{"type":"TEXT","index":42,"name":"DELTA_MRC","comment":null,"display_name":"delta_mrc"},"ARR":{"type":"FLOAT","index":43,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"TEXT","index":44,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARC":{"type":"TEXT","index":45,"name":"DELTA_ARC","comment":null,"display_name":"delta_arc"},"DELTA_ARR":{"type":"TEXT","index":46,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"NUMBER","index":47,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY_CALC":{"type":"TEXT","index":48,"name":"PREVIOUS_QUANTITY_CALC","comment":null,"display_name":"previous_quantity_calc"},"PREVIOUS_QUANTITY":{"type":"TEXT","index":49,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY_CALC":{"type":"TEXT","index":50,"name":"DELTA_QUANTITY_CALC","comment":null,"display_name":"delta_quantity_calc"},"DELTA_QUANTITY":{"type":"TEXT","index":51,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"TCV":{"type":"TEXT","index":52,"name":"TCV","comment":null,"display_name":"tcv"},"DELTA_TCV":{"type":"TEXT","index":53,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":54,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"CREATED_BY":{"type":"TEXT","index":55,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":56,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":57,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":58,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":59,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_manual_true_up_charge","raw_sql":"$1e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","rpt_manual_true_up_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/rpt_manual_true_up_charge.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/rpt_manual_true_up_charge.sql","name":"rpt_manual_true_up_charge","alias":"rpt_manual_true_up_charge","checksum":{"name":"sha256","checksum":"7aae28b9dd2ac4dcc82abd2d3bb0461ab2fbbd2216a31b7c7e4fcbbdba990c17"},"tags":["workspace","safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["sfdc_account_source"],["sfdc_account_source"],["zuora_account_source"],["zuora_account_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"Report table for tracking true up changes from Zuora Revenue which are added manually into ARR modeling.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/rpt_manual_true_up_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["safe"],"secure":true},"created_at":1689033734.2425058,"compiled_sql":"$1f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.rpt_manual_true_up_charge","label":"rpt_manual_true_up_charge"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"PREP_CHARGE_API_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_NAME":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"DIM_CHARGE_ID":{"type":"TEXT","index":7,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":8,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":9,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_ORDER_ID":{"type":"TEXT","index":14,"name":"DIM_ORDER_ID","comment":null,"display_name":"dim_order_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":15,"name":"EFFECTIVE_START_DATE_ID","comment":null,"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":16,"name":"EFFECTIVE_END_DATE_ID","comment":null,"display_name":"effective_end_date_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":17,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"RATE_PLAN_NAME":{"type":"TEXT","index":18,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":19,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":20,"name":"RATE_PLAN_CHARGE_DESCRIPTION","comment":null,"display_name":"rate_plan_charge_description"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":21,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":22,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":23,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":24,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":25,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":26,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":27,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":28,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":29,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"EFFECTIVE_START_DATE":{"type":"DATE","index":30,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":31,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":32,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":33,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":34,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":35,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":36,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":37,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"MRR":{"type":"FLOAT","index":38,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR_CALC":{"type":"FLOAT","index":39,"name":"PREVIOUS_MRR_CALC","comment":null,"display_name":"previous_mrr_calc"},"PREVIOUS_MRR":{"type":"FLOAT","index":40,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR_CALC":{"type":"FLOAT","index":41,"name":"DELTA_MRR_CALC","comment":null,"display_name":"delta_mrr_calc"},"DELTA_MRR":{"type":"FLOAT","index":42,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"DELTA_MRC":{"type":"FLOAT","index":43,"name":"DELTA_MRC","comment":null,"display_name":"delta_mrc"},"ARR":{"type":"FLOAT","index":44,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":45,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARC":{"type":"FLOAT","index":46,"name":"DELTA_ARC","comment":null,"display_name":"delta_arc"},"DELTA_ARR":{"type":"FLOAT","index":47,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":48,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY_CALC":{"type":"FLOAT","index":49,"name":"PREVIOUS_QUANTITY_CALC","comment":null,"display_name":"previous_quantity_calc"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":50,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY_CALC":{"type":"FLOAT","index":51,"name":"DELTA_QUANTITY_CALC","comment":null,"display_name":"delta_quantity_calc"},"DELTA_QUANTITY":{"type":"FLOAT","index":52,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"TCV":{"type":"FLOAT","index":53,"name":"TCV","comment":null,"display_name":"tcv"},"DELTA_TCV":{"type":"FLOAT","index":54,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":55,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":56,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"CREATED_BY":{"type":"TEXT","index":57,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_charge_api_sandbox","raw_sql":"$20","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_api_sandbox_order_action_source","model.gitlab_snowflake.zuora_api_sandbox_order_action_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_api_sandbox_order_source","model.gitlab_snowflake.zuora_api_sandbox_order_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe","mnpi"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","prep_charge_api_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/prep_charge_api_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/prep_charge_api_sandbox.sql","name":"prep_charge_api_sandbox","alias":"prep_charge_api_sandbox","checksum":{"name":"sha256","checksum":"90d586471b22fed1725299c68a20aecaa2e08439e16da4592bae2fe2f5c30302"},"tags":["workspace","safe","mnpi"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_api_sandbox_rate_plan_source"],["zuora_api_sandbox_rate_plan_source"],["zuora_api_sandbox_rate_plan_charge_source"],["zuora_api_sandbox_rate_plan_charge_source"],["zuora_api_sandbox_order_action_source"],["zuora_api_sandbox_order_action_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_api_sandbox_order_source"],["zuora_api_sandbox_order_source"],["sfdc_account_source"],["sfdc_account_source"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_rate_plan_source"],["zuora_api_sandbox_rate_plan_source"],["zuora_api_sandbox_rate_plan_charge_source"],["zuora_api_sandbox_rate_plan_charge_source"],["zuora_api_sandbox_subscription_source"],["zuora_api_sandbox_subscription_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/prep_charge_api_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi"],"secure":true},"created_at":1689033687.568465,"compiled_sql":"$21","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.prep_charge_api_sandbox","label":"prep_charge_api_sandbox"},{"metadata":{"type":"VIEW","schema":"WORKSPACE_FINANCE","name":"DIM_BILLING_ACCOUNT_API_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"dim_billing_account_id","comment":null,"description":"Unique id of the Zuora account","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"CRM account ID for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":4,"name":"BILLING_ACCOUNT_NAME","comment":null,"display_name":"billing_account_name"},"ACCOUNT_STATUS":{"type":"TEXT","index":5,"name":"account_status","comment":null,"description":"Status of the account in the system. Can be draft, active, cancelled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_status"},"PARENT_ID":{"type":"TEXT","index":6,"name":"parent_id","comment":null,"description":"Identifier of the parent customer account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":7,"name":"sfdc_account_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_account_code"},"ACCOUNT_CURRENCY":{"type":"TEXT","index":8,"name":"account_currency","comment":null,"description":"A currency as defined in Billing Settings in the Zuora UI","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_currency"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":9,"name":"sold_to_country","comment":null,"description":"The country of the sold to contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sold_to_country"},"IS_DELETED":{"type":"BOOLEAN","index":10,"name":"is_deleted","comment":null,"description":"flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"BATCH":{"type":"TEXT","index":11,"name":"BATCH","comment":null,"display_name":"batch"},"CREATED_BY":{"type":"TEXT","index":12,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":13,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":14,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":15,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":16,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":17,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"account_number":{"name":"account_number","description":"A unique Zuora account number","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_number"},"account_name":{"name":"account_name","description":"Zuora account name","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_name"},"is_excluded":{"name":"is_excluded","description":"Field used to exclude test accounts from downstream models","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_billing_account_api_sandbox","raw_sql":"$22","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_api_sandbox_contact_source","model.gitlab_snowflake.zuora_api_sandbox_contact_source","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_account_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_finance","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","dim_billing_account_api_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/dim_billing_account_api_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/dim_billing_account_api_sandbox.sql","name":"dim_billing_account_api_sandbox","alias":"dim_billing_account_api_sandbox","checksum":{"name":"sha256","checksum":"26af6b560c055af0d1b720f7ba50eec4a7258a6b24c99401975b6997601fa4b5"},"tags":["workspace","mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_api_sandbox_contact_source"],["zuora_api_sandbox_contact_source"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/dim_billing_account_api_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033734.0664215,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_finance.dim_billing_account_api_sandbox","label":"dim_billing_account_api_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_WORKSPACE_SALES","name":"RPT_DELETED_CRM_ACCOUNT_ON_BILLING_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID_MERGED":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID_MERGED","comment":null,"display_name":"dim_crm_account_id_merged"},"DIM_CRM_ACCOUNT_ID_ZUORA":{"type":"TEXT","index":3,"name":"DIM_CRM_ACCOUNT_ID_ZUORA","comment":null,"display_name":"dim_crm_account_id_zuora"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":4,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"CREATED_BY":{"type":"TEXT","index":5,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":6,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":7,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":8,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":9,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":10,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":10752,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_deleted_crm_account_on_billing_account","raw_sql":"$24","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_query_api_users_source","model.gitlab_snowflake.zuora_query_api_users_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_sales","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_sales","fqn":["gitlab_snowflake","workspaces","workspace_sales","restricted_safe","rpt_deleted_crm_account_on_billing_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_sales/restricted_safe/rpt_deleted_crm_account_on_billing_account.sql","original_file_path":"models/workspaces/workspace_sales/restricted_safe/rpt_deleted_crm_account_on_billing_account.sql","name":"rpt_deleted_crm_account_on_billing_account","alias":"rpt_deleted_crm_account_on_billing_account","checksum":{"name":"sha256","checksum":"2af2591508af0bc904cd66992da9a645822f1d159b74bf72cd99416e643b17bc"},"tags":["workspace","safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_query_api_users_source"],["zuora_query_api_users_source"]],"sources":[],"metrics":[],"description":"Zuora billing accounts with the original CRM account id, and the merged CRM account id computed in the data warehouse. This will be used to create a report for the billing team to track Zuora accounts associated with deleted CRM accounts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_sales/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_sales/restricted_safe/rpt_deleted_crm_account_on_billing_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033731.9647126,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_sales.rpt_deleted_crm_account_on_billing_account","label":"rpt_deleted_crm_account_on_billing_account"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_CRM_ACCOUNT_DAILY_SNAPSHOT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"CRM_ACCOUNT_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"CRM_ACCOUNT_SNAPSHOT_ID","comment":null,"display_name":"crm_account_snapshot_id"},"SNAPSHOT_ID":{"type":"NUMBER","index":2,"name":"SNAPSHOT_ID","comment":null,"display_name":"snapshot_id"},"SNAPSHOT_DATE":{"type":"DATE","index":3,"name":"SNAPSHOT_DATE","comment":null,"display_name":"snapshot_date"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_CRM_USER_ID":{"type":"TEXT","index":6,"name":"DIM_CRM_USER_ID","comment":null,"display_name":"dim_crm_user_id"},"MERGED_TO_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"MERGED_TO_ACCOUNT_ID","comment":null,"display_name":"merged_to_account_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":8,"name":"RECORD_TYPE_ID","comment":null,"display_name":"record_type_id"},"CRM_ACCOUNT_OWNER_ID":{"type":"TEXT","index":9,"name":"CRM_ACCOUNT_OWNER_ID","comment":null,"display_name":"crm_account_owner_id"},"PROPOSED_CRM_ACCOUNT_OWNER_ID":{"type":"TEXT","index":10,"name":"PROPOSED_CRM_ACCOUNT_OWNER_ID","comment":null,"display_name":"proposed_crm_account_owner_id"},"TECHNICAL_ACCOUNT_MANAGER_ID":{"type":"TEXT","index":11,"name":"TECHNICAL_ACCOUNT_MANAGER_ID","comment":null,"display_name":"technical_account_manager_id"},"MASTER_RECORD_ID":{"type":"TEXT","index":12,"name":"MASTER_RECORD_ID","comment":null,"display_name":"master_record_id"},"DIM_CRM_PERSON_PRIMARY_CONTACT_ID":{"type":"TEXT","index":13,"name":"DIM_CRM_PERSON_PRIMARY_CONTACT_ID","comment":null,"display_name":"dim_crm_person_primary_contact_id"},"ACCOUNT_OWNER":{"type":"TEXT","index":14,"name":"ACCOUNT_OWNER","comment":null,"display_name":"account_owner"},"PROPOSED_CRM_ACCOUNT_OWNER":{"type":"TEXT","index":15,"name":"PROPOSED_CRM_ACCOUNT_OWNER","comment":null,"display_name":"proposed_crm_account_owner"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":16,"name":"TECHNICAL_ACCOUNT_MANAGER","comment":null,"display_name":"technical_account_manager"},"CRM_ACCOUNT_OWNER_SALES_SEGMENT":{"type":"TEXT","index":17,"name":"CRM_ACCOUNT_OWNER_SALES_SEGMENT","comment":null,"display_name":"crm_account_owner_sales_segment"},"CRM_ACCOUNT_OWNER_GEO":{"type":"TEXT","index":18,"name":"CRM_ACCOUNT_OWNER_GEO","comment":null,"display_name":"crm_account_owner_geo"},"CRM_ACCOUNT_OWNER_REGION":{"type":"TEXT","index":19,"name":"CRM_ACCOUNT_OWNER_REGION","comment":null,"display_name":"crm_account_owner_region"},"CRM_ACCOUNT_OWNER_AREA":{"type":"TEXT","index":20,"name":"CRM_ACCOUNT_OWNER_AREA","comment":null,"display_name":"crm_account_owner_area"},"CRM_ACCOUNT_OWNER_SALES_SEGMENT_GEO_REGION_AREA":{"type":"TEXT","index":21,"name":"CRM_ACCOUNT_OWNER_SALES_SEGMENT_GEO_REGION_AREA","comment":null,"display_name":"crm_account_owner_sales_segment_geo_region_area"},"CRM_ACCOUNT_OWNER_TITLE":{"type":"TEXT","index":22,"name":"CRM_ACCOUNT_OWNER_TITLE","comment":null,"display_name":"crm_account_owner_title"},"CRM_ACCOUNT_OWNER_ROLE":{"type":"TEXT","index":23,"name":"CRM_ACCOUNT_OWNER_ROLE","comment":null,"display_name":"crm_account_owner_role"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":24,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":25,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":26,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":27,"name":"PARENT_CRM_ACCOUNT_GEO","comment":null,"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":28,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":29,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":30,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":31,"name":"PARENT_CRM_ACCOUNT_BUSINESS_UNIT","comment":null,"display_name":"parent_crm_account_business_unit"},"PARENT_CRM_ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":32,"name":"PARENT_CRM_ACCOUNT_ROLE_TYPE","comment":null,"display_name":"parent_crm_account_role_type"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":33,"name":"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"parent_crm_account_max_family_employee"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":34,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":35,"name":"PARENT_CRM_ACCOUNT_UPA_STATE","comment":null,"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":36,"name":"PARENT_CRM_ACCOUNT_UPA_CITY","comment":null,"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_STREET":{"type":"TEXT","index":37,"name":"PARENT_CRM_ACCOUNT_UPA_STREET","comment":null,"display_name":"parent_crm_account_upa_street"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":38,"name":"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE","comment":null,"display_name":"parent_crm_account_upa_postal_code"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":39,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"crm_account_employee_count"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":40,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"CRM_ACCOUNT_GTM_STRATEGY":{"type":"TEXT","index":41,"name":"CRM_ACCOUNT_GTM_STRATEGY","comment":null,"display_name":"crm_account_gtm_strategy"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":42,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT_GROUPED","comment":null,"display_name":"parent_crm_account_sales_segment_grouped"},"PARENT_CRM_ACCOUNT_SEGMENT_REGION_STAMPED_GROUPED":{"type":"TEXT","index":43,"name":"PARENT_CRM_ACCOUNT_SEGMENT_REGION_STAMPED_GROUPED","comment":null,"display_name":"parent_crm_account_segment_region_stamped_grouped"},"CRM_ACCOUNT_FOCUS_ACCOUNT":{"type":"TEXT","index":44,"name":"CRM_ACCOUNT_FOCUS_ACCOUNT","comment":null,"display_name":"crm_account_focus_account"},"CRM_ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":45,"name":"CRM_ACCOUNT_OWNER_USER_SEGMENT","comment":null,"display_name":"crm_account_owner_user_segment"},"CRM_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":46,"name":"CRM_ACCOUNT_BILLING_COUNTRY","comment":null,"display_name":"crm_account_billing_country"},"CRM_ACCOUNT_BILLING_COUNTRY_CODE":{"type":"TEXT","index":47,"name":"CRM_ACCOUNT_BILLING_COUNTRY_CODE","comment":null,"display_name":"crm_account_billing_country_code"},"CRM_ACCOUNT_TYPE":{"type":"TEXT","index":48,"name":"CRM_ACCOUNT_TYPE","comment":null,"display_name":"crm_account_type"},"CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"crm_account_industry"},"CRM_ACCOUNT_SUB_INDUSTRY":{"type":"TEXT","index":50,"name":"CRM_ACCOUNT_SUB_INDUSTRY","comment":null,"display_name":"crm_account_sub_industry"},"CRM_ACCOUNT_OWNER":{"type":"TEXT","index":51,"name":"CRM_ACCOUNT_OWNER","comment":null,"display_name":"crm_account_owner"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":52,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND","comment":null,"display_name":"crm_account_employee_count_band"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":53,"name":"PARTNER_VAT_TAX_ID","comment":null,"display_name":"partner_vat_tax_id"},"ACCOUNT_MANAGER":{"type":"TEXT","index":54,"name":"ACCOUNT_MANAGER","comment":null,"display_name":"account_manager"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":55,"name":"BUSINESS_DEVELOPMENT_REP","comment":null,"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":56,"name":"DEDICATED_SERVICE_ENGINEER","comment":null,"display_name":"dedicated_service_engineer"},"ACCOUNT_TIER":{"type":"TEXT","index":57,"name":"ACCOUNT_TIER","comment":null,"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":58,"name":"ACCOUNT_TIER_NOTES","comment":null,"display_name":"account_tier_notes"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":59,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":60,"name":"SUPPORT_LEVEL","comment":null,"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":61,"name":"NAMED_ACCOUNT","comment":null,"display_name":"named_account"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":62,"name":"BILLING_POSTAL_CODE","comment":null,"display_name":"billing_postal_code"},"PARTNER_TYPE":{"type":"TEXT","index":63,"name":"PARTNER_TYPE","comment":null,"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":64,"name":"PARTNER_STATUS","comment":null,"display_name":"partner_status"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":65,"name":"GITLAB_CUSTOMER_SUCCESS_PROJECT","comment":null,"display_name":"gitlab_customer_success_project"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":66,"name":"DEMANDBASE_ACCOUNT_LIST","comment":null,"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":67,"name":"DEMANDBASE_INTENT","comment":null,"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":68,"name":"DEMANDBASE_PAGE_VIEWS","comment":null,"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":69,"name":"DEMANDBASE_SCORE","comment":null,"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":70,"name":"DEMANDBASE_SESSIONS","comment":null,"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":71,"name":"DEMANDBASE_TRENDING_OFFSITE_INTENT","comment":null,"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":72,"name":"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT","comment":null,"display_name":"demandbase_trending_onsite_engagement"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":73,"name":"IS_LOCALLY_MANAGED_ACCOUNT","comment":null,"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":74,"name":"IS_STRATEGIC_ACCOUNT","comment":null,"display_name":"is_strategic_account"},"PARTNER_TRACK":{"type":"TEXT","index":75,"name":"PARTNER_TRACK","comment":null,"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":76,"name":"PARTNERS_PARTNER_TYPE","comment":null,"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":77,"name":"GITLAB_PARTNER_PROGRAM","comment":null,"display_name":"gitlab_partner_program"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":78,"name":"ZOOM_INFO_COMPANY_NAME","comment":null,"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":79,"name":"ZOOM_INFO_COMPANY_REVENUE","comment":null,"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":80,"name":"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT","comment":null,"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":81,"name":"ZOOM_INFO_COMPANY_INDUSTRY","comment":null,"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":82,"name":"ZOOM_INFO_COMPANY_CITY","comment":null,"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":83,"name":"ZOOM_INFO_COMPANY_STATE_PROVINCE","comment":null,"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":84,"name":"ZOOM_INFO_COMPANY_COUNTRY","comment":null,"display_name":"zoom_info_company_country"},"ACCOUNT_PHONE":{"type":"TEXT","index":85,"name":"ACCOUNT_PHONE","comment":null,"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":86,"name":"ZOOMINFO_ACCOUNT_PHONE","comment":null,"display_name":"zoominfo_account_phone"},"ABM_TIER":{"type":"TEXT","index":87,"name":"ABM_TIER","comment":null,"display_name":"abm_tier"},"HEALTH_NUMBER":{"type":"FLOAT","index":88,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":89,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":90,"name":"PARTNER_ACCOUNT_IBAN_NUMBER","comment":null,"display_name":"partner_account_iban_number"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":91,"name":"GITLAB_COM_USER","comment":null,"display_name":"gitlab_com_user"},"CRM_ACCOUNT_ZI_TECHNOLOGIES":{"type":"TEXT","index":92,"name":"CRM_ACCOUNT_ZI_TECHNOLOGIES","comment":null,"display_name":"crm_account_zi_technologies"},"CRM_ACCOUNT_ZOOM_INFO_WEBSITE":{"type":"TEXT","index":93,"name":"CRM_ACCOUNT_ZOOM_INFO_WEBSITE","comment":null,"display_name":"crm_account_zoom_info_website"},"CRM_ACCOUNT_ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":94,"name":"CRM_ACCOUNT_ZOOM_INFO_COMPANY_OTHER_DOMAINS","comment":null,"display_name":"crm_account_zoom_info_company_other_domains"},"CRM_ACCOUNT_ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":95,"name":"CRM_ACCOUNT_ZOOM_INFO_DOZISF_ZI_ID","comment":null,"display_name":"crm_account_zoom_info_dozisf_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":96,"name":"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_ZI_ID","comment":null,"display_name":"crm_account_zoom_info_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":97,"name":"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_NAME","comment":null,"display_name":"crm_account_zoom_info_parent_company_name"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":98,"name":"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID","comment":null,"display_name":"crm_account_zoom_info_ultimate_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":99,"name":"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME","comment":null,"display_name":"crm_account_zoom_info_ultimate_parent_company_name"},"CRM_ACCOUNT_ZOOM_INFO_NUMBER_OF_DEVELOPERS":{"type":"FLOAT","index":100,"name":"CRM_ACCOUNT_ZOOM_INFO_NUMBER_OF_DEVELOPERS","comment":null,"display_name":"crm_account_zoom_info_number_of_developers"},"CRM_ACCOUNT_ZOOM_INFO_TOTAL_FUNDING":{"type":"TEXT","index":101,"name":"CRM_ACCOUNT_ZOOM_INFO_TOTAL_FUNDING","comment":null,"display_name":"crm_account_zoom_info_total_funding"},"FORBES_2000_RANK":{"type":"TEXT","index":102,"name":"FORBES_2000_RANK","comment":null,"display_name":"forbes_2000_rank"},"PARENT_ACCOUNT_INDUSTRY_HIERARCHY":{"type":"TEXT","index":103,"name":"PARENT_ACCOUNT_INDUSTRY_HIERARCHY","comment":null,"display_name":"parent_account_industry_hierarchy"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":104,"name":"SALES_DEVELOPMENT_REP","comment":null,"display_name":"sales_development_rep"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":105,"name":"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES","comment":null,"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":106,"name":"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS","comment":null,"display_name":"admin_manual_source_account_address"},"EOA_SENTIMENT":{"type":"TEXT","index":107,"name":"EOA_SENTIMENT","comment":null,"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":108,"name":"GS_HEALTH_USER_ENGAGEMENT","comment":null,"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":109,"name":"GS_HEALTH_CD","comment":null,"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":110,"name":"GS_HEALTH_DEVSECOPS","comment":null,"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":111,"name":"GS_HEALTH_CI","comment":null,"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":112,"name":"GS_HEALTH_SCM","comment":null,"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":113,"name":"RISK_IMPACT","comment":null,"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":114,"name":"RISK_REASON","comment":null,"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":115,"name":"LAST_TIMELINE_AT_RISK_UPDATE","comment":null,"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":116,"name":"LAST_AT_RISK_UPDATE_COMMENTS","comment":null,"display_name":"last_at_risk_update_comments"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":117,"name":"BDR_PROSPECTING_STATUS","comment":null,"display_name":"bdr_prospecting_status"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":118,"name":"IS_SDR_TARGET_ACCOUNT","comment":null,"display_name":"is_sdr_target_account"},"IS_RESELLER":{"type":"BOOLEAN","index":119,"name":"IS_RESELLER","comment":null,"display_name":"is_reseller"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":120,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":121,"name":"IS_FIRST_ORDER_AVAILABLE","comment":null,"display_name":"is_first_order_available"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":122,"name":"IS_KEY_ACCOUNT","comment":null,"display_name":"is_key_account"},"IS_ZI_JENKINS_PRESENT":{"type":"NUMBER","index":123,"name":"IS_ZI_JENKINS_PRESENT","comment":null,"display_name":"is_zi_jenkins_present"},"IS_ZI_SVN_PRESENT":{"type":"NUMBER","index":124,"name":"IS_ZI_SVN_PRESENT","comment":null,"display_name":"is_zi_svn_present"},"IS_ZI_TORTOISE_SVN_PRESENT":{"type":"NUMBER","index":125,"name":"IS_ZI_TORTOISE_SVN_PRESENT","comment":null,"display_name":"is_zi_tortoise_svn_present"},"IS_ZI_GCP_PRESENT":{"type":"NUMBER","index":126,"name":"IS_ZI_GCP_PRESENT","comment":null,"display_name":"is_zi_gcp_present"},"IS_ZI_ATLASSIAN_PRESENT":{"type":"NUMBER","index":127,"name":"IS_ZI_ATLASSIAN_PRESENT","comment":null,"display_name":"is_zi_atlassian_present"},"IS_ZI_GITHUB_PRESENT":{"type":"NUMBER","index":128,"name":"IS_ZI_GITHUB_PRESENT","comment":null,"display_name":"is_zi_github_present"},"IS_ZI_GITHUB_ENTERPRISE_PRESENT":{"type":"NUMBER","index":129,"name":"IS_ZI_GITHUB_ENTERPRISE_PRESENT","comment":null,"display_name":"is_zi_github_enterprise_present"},"IS_ZI_AWS_PRESENT":{"type":"NUMBER","index":130,"name":"IS_ZI_AWS_PRESENT","comment":null,"display_name":"is_zi_aws_present"},"IS_ZI_KUBERNETES_PRESENT":{"type":"NUMBER","index":131,"name":"IS_ZI_KUBERNETES_PRESENT","comment":null,"display_name":"is_zi_kubernetes_present"},"IS_ZI_APACHE_SUBVERSION_PRESENT":{"type":"NUMBER","index":132,"name":"IS_ZI_APACHE_SUBVERSION_PRESENT","comment":null,"display_name":"is_zi_apache_subversion_present"},"IS_ZI_APACHE_SUBVERSION_SVN_PRESENT":{"type":"NUMBER","index":133,"name":"IS_ZI_APACHE_SUBVERSION_SVN_PRESENT","comment":null,"display_name":"is_zi_apache_subversion_svn_present"},"IS_ZI_HASHICORP_PRESENT":{"type":"NUMBER","index":134,"name":"IS_ZI_HASHICORP_PRESENT","comment":null,"display_name":"is_zi_hashicorp_present"},"IS_ZI_AWS_CLOUD_TRAIL_PRESENT":{"type":"NUMBER","index":135,"name":"IS_ZI_AWS_CLOUD_TRAIL_PRESENT","comment":null,"display_name":"is_zi_aws_cloud_trail_present"},"IS_ZI_CIRCLE_CI_PRESENT":{"type":"NUMBER","index":136,"name":"IS_ZI_CIRCLE_CI_PRESENT","comment":null,"display_name":"is_zi_circle_ci_present"},"IS_ZI_BIT_BUCKET_PRESENT":{"type":"NUMBER","index":137,"name":"IS_ZI_BIT_BUCKET_PRESENT","comment":null,"display_name":"is_zi_bit_bucket_present"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":138,"name":"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH","comment":null,"display_name":"is_excluded_from_zoom_info_enrich"},"CRM_ACCOUNT_CREATED_DATE_ID":{"type":"NUMBER","index":139,"name":"CRM_ACCOUNT_CREATED_DATE_ID","comment":null,"display_name":"crm_account_created_date_id"},"CRM_ACCOUNT_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":140,"name":"CRM_ACCOUNT_CREATED_DATE","comment":null,"display_name":"crm_account_created_date"},"ABM_TIER_1_DATE_ID":{"type":"NUMBER","index":141,"name":"ABM_TIER_1_DATE_ID","comment":null,"display_name":"abm_tier_1_date_id"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":142,"name":"ABM_TIER_1_DATE","comment":null,"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE_ID":{"type":"NUMBER","index":143,"name":"ABM_TIER_2_DATE_ID","comment":null,"display_name":"abm_tier_2_date_id"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":144,"name":"ABM_TIER_2_DATE","comment":null,"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE_ID":{"type":"NUMBER","index":145,"name":"ABM_TIER_3_DATE_ID","comment":null,"display_name":"abm_tier_3_date_id"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":146,"name":"ABM_TIER_3_DATE","comment":null,"display_name":"abm_tier_3_date"},"GTM_ACCELERATION_DATE_ID":{"type":"NUMBER","index":147,"name":"GTM_ACCELERATION_DATE_ID","comment":null,"display_name":"gtm_acceleration_date_id"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":148,"name":"GTM_ACCELERATION_DATE","comment":null,"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE_ID":{"type":"NUMBER","index":149,"name":"GTM_ACCOUNT_BASED_DATE_ID","comment":null,"display_name":"gtm_account_based_date_id"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":150,"name":"GTM_ACCOUNT_BASED_DATE","comment":null,"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE_ID":{"type":"NUMBER","index":151,"name":"GTM_ACCOUNT_CENTRIC_DATE_ID","comment":null,"display_name":"gtm_account_centric_date_id"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":152,"name":"GTM_ACCOUNT_CENTRIC_DATE","comment":null,"display_name":"gtm_account_centric_date"},"PARTNERS_SIGNED_CONTRACT_DATE_ID":{"type":"NUMBER","index":153,"name":"PARTNERS_SIGNED_CONTRACT_DATE_ID","comment":null,"display_name":"partners_signed_contract_date_id"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"DATE","index":154,"name":"PARTNERS_SIGNED_CONTRACT_DATE","comment":null,"display_name":"partners_signed_contract_date"},"TECHNICAL_ACCOUNT_MANAGER_DATE_ID":{"type":"NUMBER","index":155,"name":"TECHNICAL_ACCOUNT_MANAGER_DATE_ID","comment":null,"display_name":"technical_account_manager_date_id"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":156,"name":"TECHNICAL_ACCOUNT_MANAGER_DATE","comment":null,"display_name":"technical_account_manager_date"},"CUSTOMER_SINCE_DATE_ID":{"type":"NUMBER","index":157,"name":"CUSTOMER_SINCE_DATE_ID","comment":null,"display_name":"customer_since_date_id"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":158,"name":"CUSTOMER_SINCE_DATE","comment":null,"display_name":"customer_since_date"},"NEXT_RENEWAL_DATE_ID":{"type":"NUMBER","index":159,"name":"NEXT_RENEWAL_DATE_ID","comment":null,"display_name":"next_renewal_date_id"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":160,"name":"NEXT_RENEWAL_DATE","comment":null,"display_name":"next_renewal_date"},"GS_FIRST_VALUE_DATE_ID":{"type":"NUMBER","index":161,"name":"GS_FIRST_VALUE_DATE_ID","comment":null,"display_name":"gs_first_value_date_id"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":162,"name":"GS_FIRST_VALUE_DATE","comment":null,"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE_ID":{"type":"NUMBER","index":163,"name":"GS_LAST_CSM_ACTIVITY_DATE_ID","comment":null,"display_name":"gs_last_csm_activity_date_id"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":164,"name":"GS_LAST_CSM_ACTIVITY_DATE","comment":null,"display_name":"gs_last_csm_activity_date"},"COUNT_ACTIVE_SUBSCRIPTION_CHARGES":{"type":"FLOAT","index":165,"name":"COUNT_ACTIVE_SUBSCRIPTION_CHARGES","comment":null,"display_name":"count_active_subscription_charges"},"COUNT_ACTIVE_SUBSCRIPTIONS":{"type":"FLOAT","index":166,"name":"COUNT_ACTIVE_SUBSCRIPTIONS","comment":null,"display_name":"count_active_subscriptions"},"COUNT_BILLING_ACCOUNTS":{"type":"FLOAT","index":167,"name":"COUNT_BILLING_ACCOUNTS","comment":null,"display_name":"count_billing_accounts"},"COUNT_LICENSED_USERS":{"type":"FLOAT","index":168,"name":"COUNT_LICENSED_USERS","comment":null,"display_name":"count_licensed_users"},"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES":{"type":"FLOAT","index":169,"name":"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES","comment":null,"display_name":"count_of_new_business_won_opportunities"},"COUNT_OPEN_RENEWAL_OPPORTUNITIES":{"type":"FLOAT","index":170,"name":"COUNT_OPEN_RENEWAL_OPPORTUNITIES","comment":null,"display_name":"count_open_renewal_opportunities"},"COUNT_OPPORTUNITIES":{"type":"FLOAT","index":171,"name":"COUNT_OPPORTUNITIES","comment":null,"display_name":"count_opportunities"},"COUNT_PRODUCTS_PURCHASED":{"type":"FLOAT","index":172,"name":"COUNT_PRODUCTS_PURCHASED","comment":null,"display_name":"count_products_purchased"},"COUNT_WON_OPPORTUNITIES":{"type":"FLOAT","index":173,"name":"COUNT_WON_OPPORTUNITIES","comment":null,"display_name":"count_won_opportunities"},"COUNT_CONCURRENT_EE_SUBSCRIPTIONS":{"type":"FLOAT","index":174,"name":"COUNT_CONCURRENT_EE_SUBSCRIPTIONS","comment":null,"display_name":"count_concurrent_ee_subscriptions"},"COUNT_CE_INSTANCES":{"type":"FLOAT","index":175,"name":"COUNT_CE_INSTANCES","comment":null,"display_name":"count_ce_instances"},"COUNT_ACTIVE_CE_USERS":{"type":"FLOAT","index":176,"name":"COUNT_ACTIVE_CE_USERS","comment":null,"display_name":"count_active_ce_users"},"COUNT_OPEN_OPPORTUNITIES":{"type":"FLOAT","index":177,"name":"COUNT_OPEN_OPPORTUNITIES","comment":null,"display_name":"count_open_opportunities"},"COUNT_USING_CE":{"type":"BOOLEAN","index":178,"name":"COUNT_USING_CE","comment":null,"display_name":"count_using_ce"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":179,"name":"CARR_THIS_ACCOUNT","comment":null,"display_name":"carr_this_account"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":180,"name":"CARR_ACCOUNT_FAMILY","comment":null,"display_name":"carr_account_family"},"POTENTIAL_USERS":{"type":"FLOAT","index":181,"name":"POTENTIAL_USERS","comment":null,"display_name":"potential_users"},"NUMBER_OF_LICENSES_THIS_ACCOUNT":{"type":"FLOAT","index":182,"name":"NUMBER_OF_LICENSES_THIS_ACCOUNT","comment":null,"display_name":"number_of_licenses_this_account"},"DECISION_MAKER_COUNT_LINKEDIN":{"type":"FLOAT","index":183,"name":"DECISION_MAKER_COUNT_LINKEDIN","comment":null,"display_name":"decision_maker_count_linkedin"},"NUMBER_OF_EMPLOYEES":{"type":"NUMBER","index":184,"name":"NUMBER_OF_EMPLOYEES","comment":null,"display_name":"number_of_employees"},"USER_ROLE_TYPE":{"type":"TEXT","index":185,"name":"USER_ROLE_TYPE","comment":null,"display_name":"user_role_type"},"OWNER_ROLE":{"type":"TEXT","index":186,"name":"OWNER_ROLE","comment":null,"display_name":"owner_role"},"PARENT_CRM_ACCOUNT_LAM":{"type":"FLOAT","index":187,"name":"PARENT_CRM_ACCOUNT_LAM","comment":null,"display_name":"parent_crm_account_lam"},"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT":{"type":"FLOAT","index":188,"name":"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT","comment":null,"display_name":"parent_crm_account_lam_dev_count"},"PTE_SCORE":{"type":"NUMBER","index":189,"name":"PTE_SCORE","comment":null,"display_name":"pte_score"},"PTE_DECILE":{"type":"NUMBER","index":190,"name":"PTE_DECILE","comment":null,"display_name":"pte_decile"},"PTE_SCORE_GROUP":{"type":"NUMBER","index":191,"name":"PTE_SCORE_GROUP","comment":null,"display_name":"pte_score_group"},"PTC_SCORE":{"type":"NUMBER","index":192,"name":"PTC_SCORE","comment":null,"display_name":"ptc_score"},"PTC_DECILE":{"type":"NUMBER","index":193,"name":"PTC_DECILE","comment":null,"display_name":"ptc_decile"},"PTC_SCORE_GROUP":{"type":"NUMBER","index":194,"name":"PTC_SCORE_GROUP","comment":null,"display_name":"ptc_score_group"},"CREATED_BY_ID":{"type":"TEXT","index":195,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_BY_NAME":{"type":"TEXT","index":196,"name":"CREATED_BY_NAME","comment":null,"display_name":"created_by_name"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":197,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_BY_NAME":{"type":"TEXT","index":198,"name":"LAST_MODIFIED_BY_NAME","comment":null,"display_name":"last_modified_by_name"},"LAST_MODIFIED_DATE_ID":{"type":"NUMBER","index":199,"name":"LAST_MODIFIED_DATE_ID","comment":null,"display_name":"last_modified_date_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":200,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE_ID":{"type":"NUMBER","index":201,"name":"LAST_ACTIVITY_DATE_ID","comment":null,"display_name":"last_activity_date_id"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":202,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"IS_DELETED":{"type":"BOOLEAN","index":203,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"CREATED_BY":{"type":"TEXT","index":204,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":205,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":206,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":207,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":208,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":209,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":48220597760,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_crm_account_daily_snapshot","raw_sql":"{{ config({\n        \"materialized\": \"incremental\",\n        \"unique_key\": \"crm_account_snapshot_id\",\n        \"tags\": [\"account_snapshots\"],\n    })\n}}\n\n{{sfdc_account_fields('snapshot') }}\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@michellecooper\",\n    updated_by=\"@michellecooper\",\n    created_date=\"2023-03-27\",\n    updated_date=\"2023-03-27\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.sfdc_account_fields","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.sfdc_user_roles_source","model.gitlab_snowflake.sfdc_user_roles_source","model.gitlab_snowflake.dim_crm_user_daily_snapshot","model.gitlab_snowflake.dim_crm_user_daily_snapshot","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.driveload_lam_corrections_source","model.gitlab_snowflake.driveload_lam_corrections_source","model.gitlab_snowflake.sfdc_account_snapshots_source","model.gitlab_snowflake.sfdc_account_snapshots_source","model.gitlab_snowflake.sfdc_user_snapshots_source","model.gitlab_snowflake.sfdc_user_snapshots_source","model.gitlab_snowflake.sfdc_record_type","model.gitlab_snowflake.sfdc_record_type","model.gitlab_snowflake.pte_scores_source","model.gitlab_snowflake.pte_scores_source","model.gitlab_snowflake.ptc_scores_source","model.gitlab_snowflake.ptc_scores_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe","account_snapshots"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"crm_account_snapshot_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_crm_account_daily_snapshot"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_crm_account_daily_snapshot.sql","original_file_path":"models/common_prep/restricted_safe/prep_crm_account_daily_snapshot.sql","name":"prep_crm_account_daily_snapshot","alias":"prep_crm_account_daily_snapshot","checksum":{"name":"sha256","checksum":"d640969bf81292e137d47ea40b64d5bec90d5100562e90596a74df1a0b257fb3"},"tags":["safe","account_snapshots"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["prep_crm_person"],["prep_crm_person"],["sfdc_user_roles_source"],["sfdc_user_roles_source"],["dim_crm_user_daily_snapshot"],["dim_crm_user_daily_snapshot"],["dim_date"],["dim_date"],["driveload_lam_corrections_source"],["driveload_lam_corrections_source"],["sfdc_account_snapshots_source"],["sfdc_account_snapshots_source"],["sfdc_user_snapshots_source"],["sfdc_user_snapshots_source"],["sfdc_record_type"],["sfdc_record_type"],["pte_scores_source"],["pte_scores_source"],["ptc_scores_source"],["ptc_scores_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_crm_account_daily_snapshot.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["account_snapshots"],"secure":true,"unique_key":"crm_account_snapshot_id"},"created_at":1689033711.8992662,"compiled_sql":"$26","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_crm_account_daily_snapshot","label":"prep_crm_account_daily_snapshot"},{"metadata":{"type":"VIEW","schema":"WORKSPACE_FINANCE","name":"PREP_SUBSCRIPTION_CENTRAL_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER","comment":null,"display_name":"dim_billing_account_id_invoice_owner"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":5,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":6,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":7,"name":"DIM_SUBSCRIPTION_ID_PREVIOUS","comment":null,"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":8,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":9,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":10,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":11,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":14,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":15,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":16,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":17,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":18,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":19,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":20,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":22,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":24,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":25,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":26,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":27,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":28,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":29,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":30,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":31,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":32,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":33,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":34,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":35,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":36,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":37,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":38,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":39,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":40,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":41,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":42,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":43,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CREATED_BY":{"type":"TEXT","index":44,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":45,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":46,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":47,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":48,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":49,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription_central_sandbox","raw_sql":"$27","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_account_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_finance","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","prep_subscription_central_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/prep_subscription_central_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/prep_subscription_central_sandbox.sql","name":"prep_subscription_central_sandbox","alias":"prep_subscription_central_sandbox","checksum":{"name":"sha256","checksum":"8d1d66e6f6d85e59e7c216d25d2e91ac2861210de00a36e6833189fcb381f2cf"},"tags":["workspace","mnpi_exception"],"refs":[["date_details"],["date_details"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_central_sandbox_subscription_source"],["zuora_central_sandbox_subscription_source"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/prep_subscription_central_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033734.1797192,"compiled_sql":"$28","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_finance.prep_subscription_central_sandbox","label":"prep_subscription_central_sandbox"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"PREP_RECURRING_CHARGE_API_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MRR_ID":{"type":"TEXT","index":1,"name":"mrr_id","comment":null,"description":"The unique identifier of the MRR.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"mrr_id"},"DIM_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_date_id","comment":null,"description":"The identifier of date month in dim_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_date_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"Zuora account id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"account id frm crm","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":5,"name":"dim_subscription_id","comment":null,"description":"The identifier of subscription in dim_subscriptions table","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":6,"name":"dim_product_detail_id","comment":null,"description":"The identifier of product details in dim_product_detail","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_detail_id"},"DIM_CHARGE_ID":{"type":"TEXT","index":7,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":8,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"MRR":{"type":"FLOAT","index":9,"name":"mrr","comment":null,"description":"Monthly Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"mrr"},"ARR":{"type":"FLOAT","index":10,"name":"arr","comment":null,"description":"Annual Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":11,"name":"quantity","comment":null,"description":"Total quantity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":12,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"CREATED_BY":{"type":"TEXT","index":13,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":14,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":15,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":16,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":17,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_recurring_charge_api_sandbox","raw_sql":"$29","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_api_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.sheetload_manual_arr_true_up_allocation_source","model.gitlab_snowflake.sheetload_manual_arr_true_up_allocation_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe","mnpi"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","prep_recurring_charge_api_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/prep_recurring_charge_api_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/prep_recurring_charge_api_sandbox.sql","name":"prep_recurring_charge_api_sandbox","alias":"prep_recurring_charge_api_sandbox","checksum":{"name":"sha256","checksum":"a3acffdd7aae35f50923d517f8d0a9f36508bfcf0bdd39937d69fdfa1c9f0eb3"},"tags":["workspace","safe","mnpi"],"refs":[["dim_date"],["dim_date"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_rate_plan_source"],["zuora_api_sandbox_rate_plan_source"],["zuora_api_sandbox_rate_plan_charge_source"],["zuora_api_sandbox_rate_plan_charge_source"],["zuora_api_sandbox_subscription_source"],["zuora_api_sandbox_subscription_source"],["sheetload_manual_arr_true_up_allocation_source"],["sheetload_manual_arr_true_up_allocation_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/prep_recurring_charge_api_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi"],"secure":true},"created_at":1689033734.1269996,"compiled_sql":"$2a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.prep_recurring_charge_api_sandbox","label":"prep_recurring_charge_api_sandbox"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"PREP_RECURRING_CHARGE_CENTRAL_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MRR_ID":{"type":"TEXT","index":1,"name":"mrr_id","comment":null,"description":"The unique identifier of the MRR.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"mrr_id"},"DIM_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_date_id","comment":null,"description":"The identifier of date month in dim_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_date_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"Zuora account id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"account id frm crm","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":5,"name":"dim_subscription_id","comment":null,"description":"The identifier of subscription in dim_subscriptions table","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":6,"name":"dim_product_detail_id","comment":null,"description":"The identifier of product details in dim_product_detail","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_detail_id"},"DIM_CHARGE_ID":{"type":"TEXT","index":7,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":8,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"MRR":{"type":"FLOAT","index":9,"name":"mrr","comment":null,"description":"Monthly Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"mrr"},"ARR":{"type":"FLOAT","index":10,"name":"arr","comment":null,"description":"Annual Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":11,"name":"quantity","comment":null,"description":"Total quantity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":12,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"CREATED_BY":{"type":"TEXT","index":13,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":14,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":15,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":16,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":17,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_recurring_charge_central_sandbox","raw_sql":"$2b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_central_sandbox_rate_plan_charge_source","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe","mnpi"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","prep_recurring_charge_central_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/prep_recurring_charge_central_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/prep_recurring_charge_central_sandbox.sql","name":"prep_recurring_charge_central_sandbox","alias":"prep_recurring_charge_central_sandbox","checksum":{"name":"sha256","checksum":"7a9833da5d8cf6adcd868f5505e00110e6e2b1f89e21040cb6208f2321e71783"},"tags":["workspace","safe","mnpi"],"refs":[["dim_date"],["dim_date"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_rate_plan_source"],["zuora_central_sandbox_rate_plan_source"],["zuora_central_sandbox_rate_plan_charge_source"],["zuora_central_sandbox_rate_plan_charge_source"],["zuora_central_sandbox_subscription_source"],["zuora_central_sandbox_subscription_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/prep_recurring_charge_central_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi"],"secure":true},"created_at":1689033734.2308044,"compiled_sql":"$2c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.prep_recurring_charge_central_sandbox","label":"prep_recurring_charge_central_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":7,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":9,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":10,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":15,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":17,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":18,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":19,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":20,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":21,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":22,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":23,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":24,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"NAMESPACE_NAME":{"type":"TEXT","index":25,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_ID":{"type":"TEXT","index":26,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":27,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":28,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":29,"name":"WAS_PURCHASED_THROUGH_RESELLER","comment":null,"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":30,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":33,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":34,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":37,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":38,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":39,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":40,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":41,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":42,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":44,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":45,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":46,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":47,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":48,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":49,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":50,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":51,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":52,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":53,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":54,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":55,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":56,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":57,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34212352,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription","raw_sql":"$2d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_subscription.sql","original_file_path":"models/common_prep/prep_subscription.sql","name":"prep_subscription","alias":"prep_subscription","checksum":{"name":"sha256","checksum":"1769b1b9c9fad9c8514abcf0c021261c8f88d9797bd412568b7e9982fec2041a"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["prep_billing_account_user"],["prep_billing_account_user"],["sfdc_customer_subscription_source"],["sfdc_customer_subscription_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the subscription shared dimension and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.5360272,"compiled_sql":"$2e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_subscription","label":"prep_subscription"},{"metadata":{"type":"VIEW","schema":"WORKSPACE_FINANCE","name":"DIM_BILLING_ACCOUNT_CENTRAL_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"dim_billing_account_id","comment":null,"description":"Unique id of the Zuora account","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"CRM account ID for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":4,"name":"BILLING_ACCOUNT_NAME","comment":null,"display_name":"billing_account_name"},"ACCOUNT_STATUS":{"type":"TEXT","index":5,"name":"account_status","comment":null,"description":"Status of the account in the system. Can be draft, active, cancelled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_status"},"PARENT_ID":{"type":"TEXT","index":6,"name":"parent_id","comment":null,"description":"Identifier of the parent customer account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":7,"name":"sfdc_account_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_account_code"},"ACCOUNT_CURRENCY":{"type":"TEXT","index":8,"name":"account_currency","comment":null,"description":"A currency as defined in Billing Settings in the Zuora UI","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_currency"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":9,"name":"sold_to_country","comment":null,"description":"The country of the sold to contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sold_to_country"},"IS_DELETED":{"type":"BOOLEAN","index":10,"name":"is_deleted","comment":null,"description":"flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"BATCH":{"type":"TEXT","index":11,"name":"BATCH","comment":null,"display_name":"batch"},"SSP_CHANNEL":{"type":"TEXT","index":12,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":13,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"CREATED_BY":{"type":"TEXT","index":14,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":15,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":16,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":17,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":19,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"account_number":{"name":"account_number","description":"A unique Zuora account number","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_number"},"account_name":{"name":"account_name","description":"Zuora account name","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_name"},"is_excluded":{"name":"is_excluded","description":"Field used to exclude test accounts from downstream models","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_billing_account_central_sandbox","raw_sql":"$2f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_central_sandbox_contact_source","model.gitlab_snowflake.zuora_central_sandbox_contact_source","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_account_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_finance","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","dim_billing_account_central_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/dim_billing_account_central_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/dim_billing_account_central_sandbox.sql","name":"dim_billing_account_central_sandbox","alias":"dim_billing_account_central_sandbox","checksum":{"name":"sha256","checksum":"a02781b16795c167dcda2de900bec744b2b1b9035dfcfe58cccea6824a58f09c"},"tags":["workspace","mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_central_sandbox_contact_source"],["zuora_central_sandbox_contact_source"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/dim_billing_account_central_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033734.1769505,"compiled_sql":"$30","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_finance.dim_billing_account_central_sandbox","label":"dim_billing_account_central_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_INVOICE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_INVOICE_ID":{"type":"TEXT","index":1,"name":"dim_invoice_id","comment":null,"description":"The unique identifier of an invoice","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_invoice_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_PARENT_SALES_SEGMENT_ID":{"type":"TEXT","index":5,"name":"DIM_PARENT_SALES_SEGMENT_ID","comment":null,"display_name":"dim_parent_sales_segment_id"},"DIM_PARENT_SALES_TERRITORY_ID":{"type":"TEXT","index":6,"name":"DIM_PARENT_SALES_TERRITORY_ID","comment":null,"display_name":"dim_parent_sales_territory_id"},"DIM_PARENT_INDUSTRY_ID":{"type":"TEXT","index":7,"name":"DIM_PARENT_INDUSTRY_ID","comment":null,"display_name":"dim_parent_industry_id"},"DIM_ACCOUNT_SALES_SEGMENT_ID":{"type":"TEXT","index":8,"name":"DIM_ACCOUNT_SALES_SEGMENT_ID","comment":null,"display_name":"dim_account_sales_segment_id"},"DIM_ACCOUNT_SALES_TERRITORY_ID":{"type":"TEXT","index":9,"name":"DIM_ACCOUNT_SALES_TERRITORY_ID","comment":null,"display_name":"dim_account_sales_territory_id"},"DIM_ACCOUNT_INDUSTRY_ID":{"type":"TEXT","index":10,"name":"DIM_ACCOUNT_INDUSTRY_ID","comment":null,"display_name":"dim_account_industry_id"},"DIM_ACCOUNT_LOCATION_COUNTRY_ID":{"type":"TEXT","index":11,"name":"DIM_ACCOUNT_LOCATION_COUNTRY_ID","comment":null,"display_name":"dim_account_location_country_id"},"DIM_ACCOUNT_LOCATION_REGION_ID":{"type":"TEXT","index":12,"name":"DIM_ACCOUNT_LOCATION_REGION_ID","comment":null,"display_name":"dim_account_location_region_id"},"INVOICE_DATE_ID":{"type":"NUMBER","index":13,"name":"INVOICE_DATE_ID","comment":null,"display_name":"invoice_date_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":14,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DUE_DATE_ID":{"type":"NUMBER","index":15,"name":"DUE_DATE_ID","comment":null,"display_name":"due_date_id"},"POSTED_DATE_ID":{"type":"NUMBER","index":16,"name":"POSTED_DATE_ID","comment":null,"display_name":"posted_date_id"},"TARGET_DATE_ID":{"type":"NUMBER","index":17,"name":"TARGET_DATE_ID","comment":null,"display_name":"target_date_id"},"INCLUDES_ONE_TIME":{"type":"BOOLEAN","index":18,"name":"INCLUDES_ONE_TIME","comment":null,"display_name":"includes_one_time"},"INCLUDESRECURRING":{"type":"BOOLEAN","index":19,"name":"INCLUDESRECURRING","comment":null,"display_name":"includesrecurring"},"INCLUDES_USAGE":{"type":"BOOLEAN","index":20,"name":"INCLUDES_USAGE","comment":null,"display_name":"includes_usage"},"TRANSFERRED_TO_ACCOUNTING":{"type":"TEXT","index":21,"name":"TRANSFERRED_TO_ACCOUNTING","comment":null,"display_name":"transferred_to_accounting"},"ADJUSTMENT_AMOUNT":{"type":"FLOAT","index":22,"name":"ADJUSTMENT_AMOUNT","comment":null,"display_name":"adjustment_amount"},"AMOUNT":{"type":"FLOAT","index":23,"name":"AMOUNT","comment":null,"display_name":"amount"},"AMOUNT_WITHOUT_TAX":{"type":"FLOAT","index":24,"name":"AMOUNT_WITHOUT_TAX","comment":null,"display_name":"amount_without_tax"},"BALANCE":{"type":"FLOAT","index":25,"name":"BALANCE","comment":null,"display_name":"balance"},"CREDIT_BALANCE_ADJUSTMENT_AMOUNT":{"type":"FLOAT","index":26,"name":"CREDIT_BALANCE_ADJUSTMENT_AMOUNT","comment":null,"display_name":"credit_balance_adjustment_amount"},"PAYMENT_AMOUNT":{"type":"FLOAT","index":27,"name":"PAYMENT_AMOUNT","comment":null,"display_name":"payment_amount"},"REFUND_AMOUNT":{"type":"FLOAT","index":28,"name":"REFUND_AMOUNT","comment":null,"display_name":"refund_amount"},"TAX_AMOUNT":{"type":"FLOAT","index":29,"name":"TAX_AMOUNT","comment":null,"display_name":"tax_amount"},"TAX_EXEMPT_AMOUNT":{"type":"FLOAT","index":30,"name":"TAX_EXEMPT_AMOUNT","comment":null,"display_name":"tax_exempt_amount"},"CREATED_BY_ID":{"type":"TEXT","index":31,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":32,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE_ID":{"type":"NUMBER","index":33,"name":"UPDATED_DATE_ID","comment":null,"display_name":"updated_date_id"},"CREATED_BY":{"type":"TEXT","index":34,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":35,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":36,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":37,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":38,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":39,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:05UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":15666176,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_invoice","raw_sql":"$31","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_crm_account","model.gitlab_snowflake.map_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_financial","restricted_safe","fct_invoice"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_financial/restricted_safe/fct_invoice.sql","original_file_path":"models/common/facts_financial/restricted_safe/fct_invoice.sql","name":"fct_invoice","alias":"fct_invoice","checksum":{"name":"sha256","checksum":"aecba7022e34ef4a67444f58320479593865e82ee491e5cf996234dc67af7a9f"},"tags":["safe"],"refs":[["map_crm_account"],["map_crm_account"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_account_source"],["zuora_account_source"],["zuora_invoice_source"],["zuora_invoice_source"]],"sources":[],"metrics":[],"description":"Fact table providing invoice details at the single invoice grain.\n\nThe invoicing to customers business process can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#6-invoicing-to-customers).\n\nData comes from [Zuora Documentation](https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics/D_Data_Sources_and_Exports/C_Data_Source_Reference/Invoice_Item_Data_Source).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_financial/restricted_safe/fct_invoice.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.2566378,"compiled_sql":"$32","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_invoice","label":"fct_invoice"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_BILLING_ACCOUNT_SNAPSHOT_BOTTOM_UP","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"BILLING_ACCOUNT_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"billing_account_snapshot_id","comment":null,"description":"Unique identifier of a billing account snapshot","meta":{},"data_type":null,"quote":null,"tags":["tdf","arr_snapshots"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"billing_account_snapshot_id"},"SNAPSHOT_ID":{"type":"NUMBER","index":2,"name":"snapshot_id","comment":null,"description":"Unique Date Id between dbt_valid_from and dbt_valid_to in Snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"The customer account ID for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":5,"name":"billing_account_number","comment":null,"description":"A unique Zuora account number","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_number"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":6,"name":"billing_account_name","comment":null,"description":"The name of the Zuora account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_name"},"ACCOUNT_STATUS":{"type":"TEXT","index":7,"name":"account_status","comment":null,"description":"The status of the account in the system. Can be draft, active, cancelled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_status"},"PARENT_ID":{"type":"TEXT","index":8,"name":"parent_id","comment":null,"description":"The identifier of the parent customer account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"CRM_ACCOUNT_CODE":{"type":"TEXT","index":9,"name":"crm_account_code","comment":null,"description":"The code for the crm sfdc account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_code"},"CRM_ENTITY":{"type":"TEXT","index":10,"name":"crm_entity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_entity"},"ACCOUNT_CURRENCY":{"type":"TEXT","index":11,"name":"account_currency","comment":null,"description":"A currency as defined in Billing Settings in the Zuora UI","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_currency"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":12,"name":"sold_to_country","comment":null,"description":"The country of the sold to contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sold_to_country"},"SSP_CHANNEL":{"type":"TEXT","index":13,"name":"ssp_channel","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":14,"name":"po_required","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"po_required"},"IS_DELETED":{"type":"BOOLEAN","index":15,"name":"is_deleted","comment":null,"description":"The flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"BATCH":{"type":"TEXT","index":16,"name":"batch","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"batch"},"RECORD_DATA_SOURCE":{"type":"TEXT","index":17,"name":"record_data_source","comment":null,"description":"An indicator flag to identify if the record exists in Zuora or CDot or in both the sources. This column can be used to identify any missing records or data sync issues in both the sources.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_data_source"},"CREATED_BY":{"type":"TEXT","index":18,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":19,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":20,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":21,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":22,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:04UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1720162304,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_billing_account_snapshot_bottom_up","raw_sql":"$33","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_account_snapshots_source","model.gitlab_snowflake.zuora_account_snapshots_source","model.gitlab_snowflake.customers_db_billing_accounts_snapshots_base","model.gitlab_snowflake.customers_db_billing_accounts_snapshots_base","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_billing_account_snapshot_bottom_up"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_billing_account_snapshot_bottom_up.sql","original_file_path":"models/common/dimensions_shared/dim_billing_account_snapshot_bottom_up.sql","name":"dim_billing_account_snapshot_bottom_up","alias":"dim_billing_account_snapshot_bottom_up","checksum":{"name":"sha256","checksum":"30c2ae2353ae68d9bbee1fd5381d4671f222457276376afea5323efb6d989361"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_contact_source"],["zuora_contact_source"],["zuora_account_snapshots_source"],["zuora_account_snapshots_source"],["customers_db_billing_accounts_snapshots_base"],["customers_db_billing_accounts_snapshots_base"],["dim_date"],["dim_date"]],"sources":[],"metrics":[],"description":"Daily snapshot of billing accounts starting from 2020-03-01. This is built from the bottom up using snapshotted source tables from Zuora and CDot.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_billing_account_snapshot_bottom_up.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033750.5698104,"compiled_sql":"$34","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_billing_account_snapshot_bottom_up","label":"dim_billing_account_snapshot_bottom_up"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_NAME":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"SUBSCRIPTION_CREATED_BY_ID":{"type":"TEXT","index":4,"name":"SUBSCRIPTION_CREATED_BY_ID","comment":null,"display_name":"subscription_created_by_id"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":5,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":7,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"DIM_CHARGE_ID":{"type":"TEXT","index":8,"name":"dim_charge_id","comment":null,"description":"The unique identifier of the rate plan charge.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":9,"name":"dim_product_detail_id","comment":null,"description":"The identifier of product details in dim_product_detail","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":10,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":11,"name":"dim_subscription_id","comment":null,"description":"The identifier of subscription in dim_subscriptions table","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_billing_account_id","comment":null,"description":"Zuora account id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"dim_crm_account_id","comment":null,"description":"account id frm crm","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":14,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_ORDER_ID":{"type":"TEXT","index":15,"name":"DIM_ORDER_ID","comment":null,"display_name":"dim_order_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":16,"name":"EFFECTIVE_START_DATE_ID","comment":null,"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":17,"name":"EFFECTIVE_END_DATE_ID","comment":null,"display_name":"effective_end_date_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":18,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"RATE_PLAN_NAME":{"type":"TEXT","index":19,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":20,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":21,"name":"RATE_PLAN_CHARGE_DESCRIPTION","comment":null,"display_name":"rate_plan_charge_description"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":22,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":23,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":24,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":25,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":26,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":27,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":28,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":29,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":30,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"EFFECTIVE_START_DATE":{"type":"DATE","index":31,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":32,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":33,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":34,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":35,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":36,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":37,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":38,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"MRR":{"type":"FLOAT","index":39,"name":"mrr","comment":null,"description":"Monthly Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"mrr"},"PREVIOUS_MRR_CALC":{"type":"FLOAT","index":40,"name":"PREVIOUS_MRR_CALC","comment":null,"display_name":"previous_mrr_calc"},"PREVIOUS_MRR":{"type":"FLOAT","index":41,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR_CALC":{"type":"FLOAT","index":42,"name":"DELTA_MRR_CALC","comment":null,"display_name":"delta_mrr_calc"},"DELTA_MRR":{"type":"FLOAT","index":43,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"DELTA_MRC":{"type":"FLOAT","index":44,"name":"DELTA_MRC","comment":null,"display_name":"delta_mrc"},"ARR":{"type":"FLOAT","index":45,"name":"arr","comment":null,"description":"Annual Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":46,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARC":{"type":"FLOAT","index":47,"name":"DELTA_ARC","comment":null,"display_name":"delta_arc"},"DELTA_ARR":{"type":"FLOAT","index":48,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":49,"name":"quantity","comment":null,"description":"Total quantity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"PREVIOUS_QUANTITY_CALC":{"type":"FLOAT","index":50,"name":"PREVIOUS_QUANTITY_CALC","comment":null,"display_name":"previous_quantity_calc"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":51,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY_CALC":{"type":"FLOAT","index":52,"name":"DELTA_QUANTITY_CALC","comment":null,"display_name":"delta_quantity_calc"},"DELTA_QUANTITY":{"type":"FLOAT","index":53,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"TCV":{"type":"FLOAT","index":54,"name":"TCV","comment":null,"display_name":"tcv"},"DELTA_TCV":{"type":"FLOAT","index":55,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":56,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"IS_MANUAL_CHARGE":{"type":"NUMBER","index":57,"name":"IS_MANUAL_CHARGE","comment":null,"display_name":"is_manual_charge"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":58,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"CREATED_BY":{"type":"TEXT","index":59,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":60,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":61,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":62,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":64,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_date_id":{"name":"dim_date_id","description":"The identifier of date month in dim_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_date_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":227328000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_charge","raw_sql":"$35","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_query_api_order_action_rate_plan_source","model.gitlab_snowflake.zuora_query_api_order_action_rate_plan_source","model.gitlab_snowflake.zuora_order_action_source","model.gitlab_snowflake.zuora_order_action_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_order_source","model.gitlab_snowflake.zuora_order_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_charge.sql","original_file_path":"models/common_prep/restricted_safe/prep_charge.sql","name":"prep_charge","alias":"prep_charge","checksum":{"name":"sha256","checksum":"2e3b6055e99dff1af429c98acc314052a2235fec14976b94f4a94a0a858f4f94"},"tags":["safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_query_api_order_action_rate_plan_source"],["zuora_query_api_order_action_rate_plan_source"],["zuora_order_action_source"],["zuora_order_action_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_order_source"],["zuora_order_source"],["sfdc_account_source"],["sfdc_account_source"],["zuora_account_source"],["zuora_account_source"],["zuora_subscription_source"],["zuora_subscription_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"Creates a base view of recurring charges that are not amortized over the months. This prep table is used for transaction line analyses that do not require amortization of charges.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033757.951199,"compiled_sql":"$36","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_charge","label":"prep_charge"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_RECURRING_CHARGE_SUBSCRIPTION_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":2,"name":"dim_subscription_id_original","comment":null,"description":"Identifier of the original subscription in lineage of a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"ID of the Zuora account associated with a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"Account ID from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_DATE_ID":{"type":"NUMBER","index":5,"name":"dim_date_id","comment":null,"description":"The identifier of date month in dim_date","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_date_id"},"CHARGE_MONTH":{"type":"DATE","index":6,"name":"CHARGE_MONTH","comment":null,"display_name":"charge_month"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":7,"name":"subscription_status","comment":null,"description":"Status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":8,"name":"unit_of_measure","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unit_of_measure"},"TOTAL_MRR":{"type":"FLOAT","index":9,"name":"total_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month for a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_mrr"},"TOTAL_ARR":{"type":"FLOAT","index":10,"name":"total_arr","comment":null,"description":"Annual Recurring Revenue value for given month for a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_arr"},"TOTAL_QUANTITY":{"type":"FLOAT","index":11,"name":"total_quantity","comment":null,"description":"Total quantity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_quantity"},"SM_MRR":{"type":"FLOAT","index":12,"name":"sm_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month from Self-Managed products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sm_mrr"},"SM_ARR":{"type":"FLOAT","index":13,"name":"sm_arr","comment":null,"description":"Annual Recurring Revenue value for given month from Self-Managed products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sm_arr"},"SM_QUANTITY":{"type":"FLOAT","index":14,"name":"sm_quantity","comment":null,"description":"Total quantity of Self-Managed products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sm_quantity"},"SAAS_MRR":{"type":"FLOAT","index":15,"name":"saas_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month from SaaS products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_mrr"},"SAAS_ARR":{"type":"FLOAT","index":16,"name":"saas_arr","comment":null,"description":"Annual Recurring Revenue value for given month from SaaS products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_arr"},"SAAS_QUANTITY":{"type":"FLOAT","index":17,"name":"saas_quantity","comment":null,"description":"Total quantity of SaaS products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_quantity"},"OTHER_MRR":{"type":"FLOAT","index":18,"name":"other_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month from products that are neither Self-Managed nor SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"other_mrr"},"OTHER_ARR":{"type":"FLOAT","index":19,"name":"other_arr","comment":null,"description":"Annual Recurring Revenue value for given month from products that are neither Self-Managed nor SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"other_arr"},"OTHER_QUANTITY":{"type":"FLOAT","index":20,"name":"other_quantity","comment":null,"description":"Total quantity of products that are neither Self-Managed nor SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"other_quantity"},"IS_LATEST_RECORD_PER_SUBSCRIPTION":{"type":"BOOLEAN","index":21,"name":"is_latest_record_per_subscription","comment":null,"description":"Flags if the row contains the most recent record received for the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_latest_record_per_subscription"},"CREATED_BY":{"type":"TEXT","index":22,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":23,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":24,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":25,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":26,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":27,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:08UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":89666048,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_recurring_charge_subscription_monthly","raw_sql":"$37","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.dbt_utils.group_by","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_recurring_charge_subscription_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_recurring_charge_subscription_monthly.sql","original_file_path":"models/common_prep/restricted_safe/prep_recurring_charge_subscription_monthly.sql","name":"prep_recurring_charge_subscription_monthly","alias":"prep_recurring_charge_subscription_monthly","checksum":{"name":"sha256","checksum":"8d9005aa26061baedafd5091c6bc22e131982dceefbc6fb18655b2a732f9b12e"},"tags":["safe"],"refs":[["zuora_rate_plan_source"],["zuora_rate_plan_source"],["map_merged_crm_account"],["map_merged_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_date"],["dim_date"],["zuora_account_source"],["zuora_account_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Sums MRR and ARR charges by subscription by month. MRR and ARR values are also broken out by delivery type (Self-Managed, SaaS, Others) at the same grain.\n\nTo align the subscriptions in this table with `prep_recurring_charge`, filter on `subscription_status IN ('Active', Cancelled')`.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_recurring_charge_subscription_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033758.01075,"compiled_sql":"$38","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_recurring_charge_subscription_monthly","label":"prep_recurring_charge_subscription_monthly"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"sfdc_account_id","model":"{{ get_where_subquery(ref('map_merged_crm_account')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.map_merged_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_mapping","restricted_safe","not_null_map_merged_crm_account_sfdc_account_id"],"unique_id":"test.gitlab_snowflake.not_null_map_merged_crm_account_sfdc_account_id.4c6ebfc9a0","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_map_merged_crm_account_sfdc_account_id.sql","original_file_path":"models/common_mapping/restricted_safe/schema.yml","name":"not_null_map_merged_crm_account_sfdc_account_id","alias":"not_null_map_merged_crm_account_sfdc_account_id","checksum":{"name":"none","checksum":""},"tags":["common","crm_account","tdf"],"refs":[["map_merged_crm_account"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/restricted_safe/schema.yml/not_null_map_merged_crm_account_sfdc_account_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033765.8630924,"compiled_sql":"\n    \n    \n\n\n\nselect sfdc_account_id\nfrom \"PROD\".restricted_safe_common_mapping.map_merged_crm_account\nwhere sfdc_account_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"sfdc_account_id","file_key_name":"models.map_merged_crm_account","label":"not_null_map_merged_crm_account_sfdc_account_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"sfdc_account_id","model":"{{ get_where_subquery(ref('map_merged_crm_account')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.map_merged_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_mapping","restricted_safe","unique_map_merged_crm_account_sfdc_account_id"],"unique_id":"test.gitlab_snowflake.unique_map_merged_crm_account_sfdc_account_id.84e5963dde","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_map_merged_crm_account_sfdc_account_id.sql","original_file_path":"models/common_mapping/restricted_safe/schema.yml","name":"unique_map_merged_crm_account_sfdc_account_id","alias":"unique_map_merged_crm_account_sfdc_account_id","checksum":{"name":"none","checksum":""},"tags":["common","crm_account","tdf"],"refs":[["map_merged_crm_account"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/restricted_safe/schema.yml/unique_map_merged_crm_account_sfdc_account_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033765.8668106,"compiled_sql":"\n    \n    \n\nselect\n    sfdc_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".restricted_safe_common_mapping.map_merged_crm_account\nwhere sfdc_account_id is not null\ngroup by sfdc_account_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"sfdc_account_id","file_key_name":"models.map_merged_crm_account","label":"unique_map_merged_crm_account_sfdc_account_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_crm_account_id","model":"{{ get_where_subquery(ref('map_merged_crm_account')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.map_merged_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_mapping","restricted_safe","not_null_map_merged_crm_account_dim_crm_account_id"],"unique_id":"test.gitlab_snowflake.not_null_map_merged_crm_account_dim_crm_account_id.2f94ca4368","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_map_merged_crm_account_dim_crm_account_id.sql","original_file_path":"models/common_mapping/restricted_safe/schema.yml","name":"not_null_map_merged_crm_account_dim_crm_account_id","alias":"not_null_map_merged_crm_account_dim_crm_account_id","checksum":{"name":"none","checksum":""},"tags":["common","crm_account","tdf"],"refs":[["map_merged_crm_account"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/restricted_safe/schema.yml/not_null_map_merged_crm_account_dim_crm_account_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033765.8705182,"compiled_sql":"\n    \n    \n\n\n\nselect dim_crm_account_id\nfrom \"PROD\".restricted_safe_common_mapping.map_merged_crm_account\nwhere dim_crm_account_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_crm_account_id","file_key_name":"models.map_merged_crm_account","label":"not_null_map_merged_crm_account_dim_crm_account_id"}]},"node":{"resource_type":"model","name":"map_merged_crm_account","unique_id":"model.gitlab_snowflake.map_merged_crm_account"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"SFDC","name":"SFDC_ACCOUNT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"ACCOUNT_ID_18":{"type":"TEXT","index":3,"name":"account_id_18","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_id_18"},"MASTER_RECORD_ID":{"type":"TEXT","index":4,"name":"master_record_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"master_record_id"},"OWNER_ID":{"type":"TEXT","index":5,"name":"owner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"PRIMARY_CONTACT_ID":{"type":"TEXT","index":7,"name":"primary_contact_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"primary_contact_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":8,"name":"record_type_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_type_id"},"ULTIMATE_PARENT_ID":{"type":"TEXT","index":9,"name":"ultimate_parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_id"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":10,"name":"partner_vat_tax_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_vat_tax_id"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":11,"name":"gitlab_com_user","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user"},"ACCOUNT_MANAGER":{"type":"TEXT","index":12,"name":"account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_manager"},"ACCOUNT_OWNER":{"type":"TEXT","index":13,"name":"account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner"},"ACCOUNT_OWNER_TEAM":{"type":"TEXT","index":14,"name":"account_owner_team","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner_team"},"PROPOSED_ACCOUNT_OWNER":{"type":"TEXT","index":15,"name":"proposed_account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"proposed_account_owner"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":16,"name":"business_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":17,"name":"dedicated_service_engineer","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dedicated_service_engineer"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":18,"name":"sales_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_development_rep"},"TECHNICAL_ACCOUNT_MANAGER_ID":{"type":"TEXT","index":19,"name":"technical_account_manager_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager_id"},"ULTIMATE_PARENT_ACCOUNT_ID":{"type":"TEXT","index":20,"name":"ultimate_parent_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_id"},"ULTIMATE_PARENT_ACCOUNT_NAME":{"type":"TEXT","index":21,"name":"ultimate_parent_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_name"},"ACCOUNT_TYPE":{"type":"TEXT","index":22,"name":"account_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_type"},"DF_INDUSTRY":{"type":"TEXT","index":23,"name":"df_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"df_industry"},"INDUSTRY":{"type":"TEXT","index":24,"name":"industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"industry"},"SUB_INDUSTRY":{"type":"TEXT","index":25,"name":"sub_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sub_industry"},"PARENT_ACCOUNT_INDUSTRY_HIERARCHY":{"type":"TEXT","index":26,"name":"parent_account_industry_hierarchy","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_account_industry_hierarchy"},"ACCOUNT_TIER":{"type":"TEXT","index":27,"name":"account_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":28,"name":"account_tier_notes","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier_notes"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":29,"name":"customer_since_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_since_date"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":30,"name":"carr_this_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_this_account"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":31,"name":"carr_account_family","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_account_family"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":32,"name":"next_renewal_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_renewal_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":33,"name":"license_utilization","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":34,"name":"support_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":35,"name":"named_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"named_account"},"BILLING_COUNTRY":{"type":"TEXT","index":36,"name":"billing_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_country"},"BILLING_COUNTRY_CODE":{"type":"TEXT","index":37,"name":"billing_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_country_code"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":38,"name":"billing_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_postal_code"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":39,"name":"is_sdr_target_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_sdr_target_account"},"LAM":{"type":"FLOAT","index":40,"name":"lam","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lam"},"LAM_DEV_COUNT":{"type":"FLOAT","index":41,"name":"lam_dev_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lam_dev_count"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":42,"name":"is_jihu_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_jihu_account"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"TIMESTAMP_TZ","index":43,"name":"partners_signed_contract_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_signed_contract_date"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":44,"name":"partner_account_iban_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_account_iban_number"},"PARTNER_TYPE":{"type":"TEXT","index":45,"name":"partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":46,"name":"partner_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_status"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":47,"name":"bdr_prospecting_status","comment":null,"description":"Indicates whether the account is actively being prospected by a BDR.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"bdr_prospecting_status"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":48,"name":"is_first_order_available","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_order_available"},"ZI_TECHNOLOGIES":{"type":"TEXT","index":49,"name":"zi_technologies","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zi_technologies"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":50,"name":"technical_account_manager_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager_date"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":51,"name":"gitlab_customer_success_project","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_customer_success_project"},"FORBES_2000_RANK":{"type":"TEXT","index":52,"name":"forbes_2000_rank","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"forbes_2000_rank"},"POTENTIAL_USERS":{"type":"FLOAT","index":53,"name":"potential_users","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"potential_users"},"NUMBER_OF_LICENSES_THIS_ACCOUNT":{"type":"FLOAT","index":54,"name":"number_of_licenses_this_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"number_of_licenses_this_account"},"DECISION_MAKER_COUNT_LINKEDIN":{"type":"FLOAT","index":55,"name":"decision_maker_count_linkedin","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"decision_maker_count_linkedin"},"NUMBER_OF_EMPLOYEES":{"type":"NUMBER","index":56,"name":"number_of_employees","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"number_of_employees"},"ACCOUNT_PHONE":{"type":"TEXT","index":57,"name":"account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":58,"name":"zoominfo_account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_account_phone"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":59,"name":"admin_manual_source_number_of_employees","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":60,"name":"admin_manual_source_account_address","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_account_address"},"ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":61,"name":"account_sales_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_sales_segment"},"ACCOUNT_GEO":{"type":"TEXT","index":62,"name":"account_geo","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_geo"},"ACCOUNT_REGION":{"type":"TEXT","index":63,"name":"account_region","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_region"},"ACCOUNT_AREA":{"type":"TEXT","index":64,"name":"account_area","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_area"},"ACCOUNT_TERRITORY":{"type":"TEXT","index":65,"name":"account_territory","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_territory"},"ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":66,"name":"account_business_unit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_business_unit"},"ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":67,"name":"account_role_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_role_type"},"ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":68,"name":"account_employee_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_employee_count"},"ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":69,"name":"account_max_family_employee","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_max_family_employee"},"ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":70,"name":"account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_country"},"ACCOUNT_UPA_STATE":{"type":"TEXT","index":71,"name":"account_upa_state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_state"},"ACCOUNT_UPA_CITY":{"type":"TEXT","index":72,"name":"account_upa_city","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_city"},"ACCOUNT_UPA_STREET":{"type":"TEXT","index":73,"name":"account_upa_street","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_street"},"ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":74,"name":"account_upa_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_postal_code"},"HEALTH_NUMBER":{"type":"FLOAT","index":75,"name":"health_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":76,"name":"health_score_color","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_score_color"},"COUNT_ACTIVE_SUBSCRIPTION_CHARGES":{"type":"FLOAT","index":77,"name":"count_active_subscription_charges","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_active_subscription_charges"},"COUNT_ACTIVE_SUBSCRIPTIONS":{"type":"FLOAT","index":78,"name":"count_active_subscriptions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_active_subscriptions"},"COUNT_BILLING_ACCOUNTS":{"type":"FLOAT","index":79,"name":"count_billing_accounts","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_billing_accounts"},"COUNT_LICENSED_USERS":{"type":"FLOAT","index":80,"name":"count_licensed_users","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_licensed_users"},"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES":{"type":"FLOAT","index":81,"name":"count_of_new_business_won_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_new_business_won_opportunities"},"COUNT_OPEN_RENEWAL_OPPORTUNITIES":{"type":"FLOAT","index":82,"name":"count_open_renewal_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_open_renewal_opportunities"},"COUNT_OPPORTUNITIES":{"type":"FLOAT","index":83,"name":"count_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_opportunities"},"COUNT_PRODUCTS_PURCHASED":{"type":"FLOAT","index":84,"name":"count_products_purchased","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_products_purchased"},"COUNT_WON_OPPORTUNITIES":{"type":"FLOAT","index":85,"name":"count_won_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_won_opportunities"},"COUNT_CONCURRENT_EE_SUBSCRIPTIONS":{"type":"FLOAT","index":86,"name":"count_concurrent_ee_subscriptions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_concurrent_ee_subscriptions"},"COUNT_CE_INSTANCES":{"type":"FLOAT","index":87,"name":"count_ce_instances","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_ce_instances"},"COUNT_ACTIVE_CE_USERS":{"type":"FLOAT","index":88,"name":"count_active_ce_users","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_active_ce_users"},"COUNT_OPEN_OPPORTUNITIES":{"type":"FLOAT","index":89,"name":"count_open_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_open_opportunities"},"COUNT_USING_CE":{"type":"BOOLEAN","index":90,"name":"count_using_ce","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_using_ce"},"ABM_TIER":{"type":"TEXT","index":91,"name":"abm_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier"},"GTM_STRATEGY":{"type":"TEXT","index":92,"name":"gtm_strategy","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_strategy"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":93,"name":"gtm_acceleration_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":94,"name":"gtm_account_based_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":95,"name":"gtm_account_centric_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_centric_date"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":96,"name":"abm_tier_1_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":97,"name":"abm_tier_2_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":98,"name":"abm_tier_3_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_3_date"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":99,"name":"demandbase_account_list","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":100,"name":"demandbase_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":101,"name":"demandbase_page_views","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":102,"name":"demandbase_score","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":103,"name":"demandbase_sessions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":104,"name":"demandbase_trending_offsite_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":105,"name":"demandbase_trending_onsite_engagement","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_onsite_engagement"},"ULTIMATE_PARENT_SALES_SEGMENT":{"type":"TEXT","index":106,"name":"ultimate_parent_sales_segment","comment":null,"description":"Sales segment of the parent of the account hierarchy.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_sales_segment"},"DIVISION_SALES_SEGMENT":{"type":"TEXT","index":107,"name":"division_sales_segment","comment":null,"description":"Sales segment of the specific account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division_sales_segment"},"ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":108,"name":"account_owner_user_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner_user_segment"},"SALES_SEGMENT":{"type":"TEXT","index":109,"name":"sales_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_segment"},"ACCOUNT_SEGMENT":{"type":"TEXT","index":110,"name":"account_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_segment"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":111,"name":"is_locally_managed_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":112,"name":"is_strategic_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_strategic_account"},"NEXT_FY_ACCOUNT_OWNER_TEMP":{"type":"TEXT","index":113,"name":"next_fy_account_owner_temp","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_fy_account_owner_temp"},"NEXT_FY_PLANNING_NOTES_TEMP":{"type":"TEXT","index":114,"name":"next_fy_planning_notes_temp","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_fy_planning_notes_temp"},"PARTNER_TRACK":{"type":"TEXT","index":115,"name":"partner_track","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":116,"name":"partners_partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":117,"name":"gitlab_partner_program","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_partner_program"},"IS_FOCUS_PARTNER":{"type":"BOOLEAN","index":118,"name":"IS_FOCUS_PARTNER","comment":null,"display_name":"is_focus_partner"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":119,"name":"zoom_info_company_name","comment":null,"description":"The name of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":120,"name":"zoom_info_company_revenue","comment":null,"description":"The estimated revenue of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":121,"name":"zoom_info_company_employee_count","comment":null,"description":"The number of employees of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":122,"name":"zoom_info_company_industry","comment":null,"description":"The the primary industry of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":123,"name":"zoom_info_company_city","comment":null,"description":"The city of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":124,"name":"zoom_info_company_state_province","comment":null,"description":"The state or province of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":125,"name":"zoom_info_company_country","comment":null,"description":"The country of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_country"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":126,"name":"is_excluded_from_zoom_info_enrich","comment":null,"description":"A flag to indicate if the account should be included in the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded_from_zoom_info_enrich"},"ZOOM_INFO_WEBSITE":{"type":"TEXT","index":127,"name":"zoom_info_website","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_website"},"ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":128,"name":"zoom_info_company_other_domains","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_other_domains"},"ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":129,"name":"zoom_info_dozisf_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_dozisf_zi_id"},"ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":130,"name":"zoom_info_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_parent_company_zi_id"},"ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":131,"name":"zoom_info_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_parent_company_name"},"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":132,"name":"zoom_info_ultimate_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_ultimate_parent_company_zi_id"},"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":133,"name":"zoom_info_ultimate_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_ultimate_parent_company_name"},"ZOOM_INFO_NUMBER_OF_DEVELOPERS":{"type":"FLOAT","index":134,"name":"zoom_info_number_of_developers","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_number_of_developers"},"ZOOM_INFO_TOTAL_FUNDING":{"type":"TEXT","index":135,"name":"zoom_info_total_funding","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_total_funding"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":136,"name":"is_key_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_key_account"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":137,"name":"gs_first_value_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":138,"name":"gs_last_csm_activity_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_last_csm_activity_date"},"EOA_SENTIMENT":{"type":"TEXT","index":139,"name":"eoa_sentiment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":140,"name":"gs_health_user_engagement","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":141,"name":"gs_health_cd","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":142,"name":"gs_health_devsecops","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":143,"name":"gs_health_ci","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":144,"name":"gs_health_scm","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":145,"name":"risk_impact","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":146,"name":"risk_reason","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":147,"name":"last_timeline_at_risk_update","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":148,"name":"last_at_risk_update_comments","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_at_risk_update_comments"},"CREATED_BY_ID":{"type":"TEXT","index":149,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":150,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":151,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":152,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":153,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":154,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"_LAST_DBT_RUN":{"type":"TIMESTAMP_TZ","index":155,"name":"_LAST_DBT_RUN","comment":null,"display_name":"_last_dbt_run"},"SYSTEMMODSTAMP":{"type":"TIMESTAMP_TZ","index":156,"name":"SYSTEMMODSTAMP","comment":null,"display_name":"systemmodstamp"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_account_source","raw_sql":"$39","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.sales_segment_cleaning","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.salesforce.account"]},"config":{"enabled":true,"alias":null,"schema":"sfdc","database":"PREP","tags":["sources","mnpi"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sfdc","fqn":["gitlab_snowflake","sources","sfdc","sfdc_account_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/sfdc/sfdc_account_source.sql","original_file_path":"models/sources/sfdc/sfdc_account_source.sql","name":"sfdc_account_source","alias":"sfdc_account_source","checksum":{"name":"sha256","checksum":"eb152dc64e1759387331420a34ae89212d0734a722c857c28949ea876c1297ef"},"tags":["sources","mnpi"],"refs":[],"sources":[["salesforce","account"]],"metrics":[],"description":"Source model for SFDC Accounts","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/sfdc/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/sfdc/sfdc_account_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sfdc","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi"]},"created_at":1689033749.548663,"compiled_sql":"$3a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sfdc.sfdc_account_source","label":"sfdc_account_source"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"SFDC_ACCOUNT_SNAPSHOTS_SOURCE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_ID_18":{"type":"TEXT","index":3,"name":"ACCOUNT_ID_18","comment":null,"display_name":"account_id_18"},"MASTER_RECORD_ID":{"type":"TEXT","index":4,"name":"MASTER_RECORD_ID","comment":null,"display_name":"master_record_id"},"OWNER_ID":{"type":"TEXT","index":5,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"PRIMARY_CONTACT_ID":{"type":"TEXT","index":7,"name":"PRIMARY_CONTACT_ID","comment":null,"display_name":"primary_contact_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":8,"name":"RECORD_TYPE_ID","comment":null,"display_name":"record_type_id"},"ULTIMATE_PARENT_ID":{"type":"TEXT","index":9,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_ACCOUNT_NAME":{"type":"TEXT","index":10,"name":"ULTIMATE_PARENT_ACCOUNT_NAME","comment":null,"display_name":"ultimate_parent_account_name"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":11,"name":"PARTNER_VAT_TAX_ID","comment":null,"display_name":"partner_vat_tax_id"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":12,"name":"GITLAB_COM_USER","comment":null,"display_name":"gitlab_com_user"},"ACCOUNT_MANAGER":{"type":"TEXT","index":13,"name":"ACCOUNT_MANAGER","comment":null,"display_name":"account_manager"},"ACCOUNT_OWNER":{"type":"TEXT","index":14,"name":"ACCOUNT_OWNER","comment":null,"display_name":"account_owner"},"ACCOUNT_OWNER_TEAM":{"type":"TEXT","index":15,"name":"ACCOUNT_OWNER_TEAM","comment":null,"display_name":"account_owner_team"},"PROPOSED_ACCOUNT_OWNER":{"type":"TEXT","index":16,"name":"PROPOSED_ACCOUNT_OWNER","comment":null,"display_name":"proposed_account_owner"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":17,"name":"BUSINESS_DEVELOPMENT_REP","comment":null,"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":18,"name":"DEDICATED_SERVICE_ENGINEER","comment":null,"display_name":"dedicated_service_engineer"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":19,"name":"SALES_DEVELOPMENT_REP","comment":null,"display_name":"sales_development_rep"},"TECHNICAL_ACCOUNT_MANAGER_ID":{"type":"TEXT","index":20,"name":"TECHNICAL_ACCOUNT_MANAGER_ID","comment":null,"display_name":"technical_account_manager_id"},"ULTIMATE_PARENT_ACCOUNT_ID":{"type":"TEXT","index":21,"name":"ULTIMATE_PARENT_ACCOUNT_ID","comment":null,"display_name":"ultimate_parent_account_id"},"ACCOUNT_TYPE":{"type":"TEXT","index":22,"name":"ACCOUNT_TYPE","comment":null,"display_name":"account_type"},"DF_INDUSTRY":{"type":"TEXT","index":23,"name":"DF_INDUSTRY","comment":null,"display_name":"df_industry"},"INDUSTRY":{"type":"TEXT","index":24,"name":"INDUSTRY","comment":null,"display_name":"industry"},"SUB_INDUSTRY":{"type":"TEXT","index":25,"name":"SUB_INDUSTRY","comment":null,"display_name":"sub_industry"},"PARENT_ACCOUNT_INDUSTRY_HIERARCHY":{"type":"TEXT","index":26,"name":"PARENT_ACCOUNT_INDUSTRY_HIERARCHY","comment":null,"display_name":"parent_account_industry_hierarchy"},"ACCOUNT_TIER":{"type":"TEXT","index":27,"name":"ACCOUNT_TIER","comment":null,"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":28,"name":"ACCOUNT_TIER_NOTES","comment":null,"display_name":"account_tier_notes"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":29,"name":"CUSTOMER_SINCE_DATE","comment":null,"display_name":"customer_since_date"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":30,"name":"CARR_THIS_ACCOUNT","comment":null,"display_name":"carr_this_account"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":31,"name":"CARR_ACCOUNT_FAMILY","comment":null,"display_name":"carr_account_family"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":32,"name":"NEXT_RENEWAL_DATE","comment":null,"display_name":"next_renewal_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":33,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":34,"name":"SUPPORT_LEVEL","comment":null,"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":35,"name":"NAMED_ACCOUNT","comment":null,"display_name":"named_account"},"BILLING_COUNTRY":{"type":"TEXT","index":36,"name":"BILLING_COUNTRY","comment":null,"display_name":"billing_country"},"BILLING_COUNTRY_CODE":{"type":"TEXT","index":37,"name":"BILLING_COUNTRY_CODE","comment":null,"display_name":"billing_country_code"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":38,"name":"BILLING_POSTAL_CODE","comment":null,"display_name":"billing_postal_code"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":39,"name":"IS_SDR_TARGET_ACCOUNT","comment":null,"display_name":"is_sdr_target_account"},"LAM":{"type":"FLOAT","index":40,"name":"LAM","comment":null,"display_name":"lam"},"LAM_DEV_COUNT":{"type":"FLOAT","index":41,"name":"LAM_DEV_COUNT","comment":null,"display_name":"lam_dev_count"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":42,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"TIMESTAMP_TZ","index":43,"name":"PARTNERS_SIGNED_CONTRACT_DATE","comment":null,"display_name":"partners_signed_contract_date"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":44,"name":"PARTNER_ACCOUNT_IBAN_NUMBER","comment":null,"display_name":"partner_account_iban_number"},"PARTNER_TYPE":{"type":"TEXT","index":45,"name":"PARTNER_TYPE","comment":null,"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":46,"name":"PARTNER_STATUS","comment":null,"display_name":"partner_status"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":47,"name":"bdr_prospecting_status","comment":null,"description":"Indicates whether the account is actively being prospected by a BDR.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"bdr_prospecting_status"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":48,"name":"IS_FIRST_ORDER_AVAILABLE","comment":null,"display_name":"is_first_order_available"},"ZI_TECHNOLOGIES":{"type":"TEXT","index":49,"name":"ZI_TECHNOLOGIES","comment":null,"display_name":"zi_technologies"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":50,"name":"TECHNICAL_ACCOUNT_MANAGER_DATE","comment":null,"display_name":"technical_account_manager_date"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":51,"name":"GITLAB_CUSTOMER_SUCCESS_PROJECT","comment":null,"display_name":"gitlab_customer_success_project"},"FORBES_2000_RANK":{"type":"TEXT","index":52,"name":"FORBES_2000_RANK","comment":null,"display_name":"forbes_2000_rank"},"POTENTIAL_USERS":{"type":"FLOAT","index":53,"name":"POTENTIAL_USERS","comment":null,"display_name":"potential_users"},"NUMBER_OF_LICENSES_THIS_ACCOUNT":{"type":"FLOAT","index":54,"name":"NUMBER_OF_LICENSES_THIS_ACCOUNT","comment":null,"display_name":"number_of_licenses_this_account"},"DECISION_MAKER_COUNT_LINKEDIN":{"type":"FLOAT","index":55,"name":"DECISION_MAKER_COUNT_LINKEDIN","comment":null,"display_name":"decision_maker_count_linkedin"},"NUMBER_OF_EMPLOYEES":{"type":"NUMBER","index":56,"name":"NUMBER_OF_EMPLOYEES","comment":null,"display_name":"number_of_employees"},"ACCOUNT_PHONE":{"type":"TEXT","index":57,"name":"ACCOUNT_PHONE","comment":null,"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":58,"name":"ZOOMINFO_ACCOUNT_PHONE","comment":null,"display_name":"zoominfo_account_phone"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":59,"name":"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES","comment":null,"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":60,"name":"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS","comment":null,"display_name":"admin_manual_source_account_address"},"ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":61,"name":"ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"account_sales_segment"},"ACCOUNT_GEO":{"type":"TEXT","index":62,"name":"ACCOUNT_GEO","comment":null,"display_name":"account_geo"},"ACCOUNT_REGION":{"type":"TEXT","index":63,"name":"ACCOUNT_REGION","comment":null,"display_name":"account_region"},"ACCOUNT_AREA":{"type":"TEXT","index":64,"name":"ACCOUNT_AREA","comment":null,"display_name":"account_area"},"ACCOUNT_TERRITORY":{"type":"TEXT","index":65,"name":"ACCOUNT_TERRITORY","comment":null,"display_name":"account_territory"},"ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":66,"name":"ACCOUNT_BUSINESS_UNIT","comment":null,"display_name":"account_business_unit"},"ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":67,"name":"ACCOUNT_ROLE_TYPE","comment":null,"display_name":"account_role_type"},"ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":68,"name":"ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"account_employee_count"},"ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":69,"name":"ACCOUNT_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"account_max_family_employee"},"ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":70,"name":"ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"account_upa_country"},"ACCOUNT_UPA_STATE":{"type":"TEXT","index":71,"name":"ACCOUNT_UPA_STATE","comment":null,"display_name":"account_upa_state"},"ACCOUNT_UPA_CITY":{"type":"TEXT","index":72,"name":"ACCOUNT_UPA_CITY","comment":null,"display_name":"account_upa_city"},"ACCOUNT_UPA_STREET":{"type":"TEXT","index":73,"name":"ACCOUNT_UPA_STREET","comment":null,"display_name":"account_upa_street"},"ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":74,"name":"ACCOUNT_UPA_POSTAL_CODE","comment":null,"display_name":"account_upa_postal_code"},"HEALTH_NUMBER":{"type":"FLOAT","index":75,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":76,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"COUNT_ACTIVE_SUBSCRIPTION_CHARGES":{"type":"FLOAT","index":77,"name":"COUNT_ACTIVE_SUBSCRIPTION_CHARGES","comment":null,"display_name":"count_active_subscription_charges"},"COUNT_ACTIVE_SUBSCRIPTIONS":{"type":"FLOAT","index":78,"name":"COUNT_ACTIVE_SUBSCRIPTIONS","comment":null,"display_name":"count_active_subscriptions"},"COUNT_BILLING_ACCOUNTS":{"type":"FLOAT","index":79,"name":"COUNT_BILLING_ACCOUNTS","comment":null,"display_name":"count_billing_accounts"},"COUNT_LICENSED_USERS":{"type":"FLOAT","index":80,"name":"COUNT_LICENSED_USERS","comment":null,"display_name":"count_licensed_users"},"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES":{"type":"FLOAT","index":81,"name":"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES","comment":null,"display_name":"count_of_new_business_won_opportunities"},"COUNT_OPEN_RENEWAL_OPPORTUNITIES":{"type":"FLOAT","index":82,"name":"COUNT_OPEN_RENEWAL_OPPORTUNITIES","comment":null,"display_name":"count_open_renewal_opportunities"},"COUNT_OPPORTUNITIES":{"type":"FLOAT","index":83,"name":"COUNT_OPPORTUNITIES","comment":null,"display_name":"count_opportunities"},"COUNT_PRODUCTS_PURCHASED":{"type":"FLOAT","index":84,"name":"COUNT_PRODUCTS_PURCHASED","comment":null,"display_name":"count_products_purchased"},"COUNT_WON_OPPORTUNITIES":{"type":"FLOAT","index":85,"name":"COUNT_WON_OPPORTUNITIES","comment":null,"display_name":"count_won_opportunities"},"COUNT_CONCURRENT_EE_SUBSCRIPTIONS":{"type":"FLOAT","index":86,"name":"COUNT_CONCURRENT_EE_SUBSCRIPTIONS","comment":null,"display_name":"count_concurrent_ee_subscriptions"},"COUNT_CE_INSTANCES":{"type":"FLOAT","index":87,"name":"COUNT_CE_INSTANCES","comment":null,"display_name":"count_ce_instances"},"COUNT_ACTIVE_CE_USERS":{"type":"FLOAT","index":88,"name":"COUNT_ACTIVE_CE_USERS","comment":null,"display_name":"count_active_ce_users"},"COUNT_OPEN_OPPORTUNITIES":{"type":"FLOAT","index":89,"name":"COUNT_OPEN_OPPORTUNITIES","comment":null,"display_name":"count_open_opportunities"},"COUNT_USING_CE":{"type":"BOOLEAN","index":90,"name":"COUNT_USING_CE","comment":null,"display_name":"count_using_ce"},"ABM_TIER":{"type":"TEXT","index":91,"name":"ABM_TIER","comment":null,"display_name":"abm_tier"},"GTM_STRATEGY":{"type":"TEXT","index":92,"name":"GTM_STRATEGY","comment":null,"display_name":"gtm_strategy"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":93,"name":"GTM_ACCELERATION_DATE","comment":null,"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":94,"name":"GTM_ACCOUNT_BASED_DATE","comment":null,"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":95,"name":"GTM_ACCOUNT_CENTRIC_DATE","comment":null,"display_name":"gtm_account_centric_date"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":96,"name":"ABM_TIER_1_DATE","comment":null,"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":97,"name":"ABM_TIER_2_DATE","comment":null,"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":98,"name":"ABM_TIER_3_DATE","comment":null,"display_name":"abm_tier_3_date"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":99,"name":"DEMANDBASE_ACCOUNT_LIST","comment":null,"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":100,"name":"DEMANDBASE_INTENT","comment":null,"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":101,"name":"DEMANDBASE_PAGE_VIEWS","comment":null,"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":102,"name":"DEMANDBASE_SCORE","comment":null,"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":103,"name":"DEMANDBASE_SESSIONS","comment":null,"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":104,"name":"DEMANDBASE_TRENDING_OFFSITE_INTENT","comment":null,"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":105,"name":"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT","comment":null,"display_name":"demandbase_trending_onsite_engagement"},"ULTIMATE_PARENT_SALES_SEGMENT":{"type":"TEXT","index":106,"name":"ULTIMATE_PARENT_SALES_SEGMENT","comment":null,"display_name":"ultimate_parent_sales_segment"},"DIVISION_SALES_SEGMENT":{"type":"TEXT","index":107,"name":"DIVISION_SALES_SEGMENT","comment":null,"display_name":"division_sales_segment"},"ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":108,"name":"ACCOUNT_OWNER_USER_SEGMENT","comment":null,"display_name":"account_owner_user_segment"},"SALES_SEGMENT":{"type":"TEXT","index":109,"name":"SALES_SEGMENT","comment":null,"display_name":"sales_segment"},"ACCOUNT_SEGMENT":{"type":"TEXT","index":110,"name":"ACCOUNT_SEGMENT","comment":null,"display_name":"account_segment"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":111,"name":"IS_LOCALLY_MANAGED_ACCOUNT","comment":null,"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":112,"name":"IS_STRATEGIC_ACCOUNT","comment":null,"display_name":"is_strategic_account"},"NEXT_FY_ACCOUNT_OWNER_TEMP":{"type":"TEXT","index":113,"name":"NEXT_FY_ACCOUNT_OWNER_TEMP","comment":null,"display_name":"next_fy_account_owner_temp"},"NEXT_FY_PLANNING_NOTES_TEMP":{"type":"TEXT","index":114,"name":"NEXT_FY_PLANNING_NOTES_TEMP","comment":null,"display_name":"next_fy_planning_notes_temp"},"PARTNER_TRACK":{"type":"TEXT","index":115,"name":"PARTNER_TRACK","comment":null,"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":116,"name":"PARTNERS_PARTNER_TYPE","comment":null,"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":117,"name":"GITLAB_PARTNER_PROGRAM","comment":null,"display_name":"gitlab_partner_program"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":118,"name":"zoom_info_company_name","comment":null,"description":"The name of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":119,"name":"zoom_info_company_revenue","comment":null,"description":"The estimated revenue of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":120,"name":"zoom_info_company_employee_count","comment":null,"description":"The number of employees of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":121,"name":"zoom_info_company_industry","comment":null,"description":"The the primary industry of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":122,"name":"zoom_info_company_city","comment":null,"description":"The city of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":123,"name":"zoom_info_company_state_province","comment":null,"description":"The state or province of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":124,"name":"zoom_info_company_country","comment":null,"description":"The country of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_country"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":125,"name":"is_excluded_from_zoom_info_enrich","comment":null,"description":"A flag to indicate if the account should be included in the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded_from_zoom_info_enrich"},"ZOOM_INFO_WEBSITE":{"type":"TEXT","index":126,"name":"ZOOM_INFO_WEBSITE","comment":null,"display_name":"zoom_info_website"},"ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":127,"name":"ZOOM_INFO_COMPANY_OTHER_DOMAINS","comment":null,"display_name":"zoom_info_company_other_domains"},"ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":128,"name":"ZOOM_INFO_DOZISF_ZI_ID","comment":null,"display_name":"zoom_info_dozisf_zi_id"},"ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":129,"name":"ZOOM_INFO_PARENT_COMPANY_ZI_ID","comment":null,"display_name":"zoom_info_parent_company_zi_id"},"ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":130,"name":"ZOOM_INFO_PARENT_COMPANY_NAME","comment":null,"display_name":"zoom_info_parent_company_name"},"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":131,"name":"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID","comment":null,"display_name":"zoom_info_ultimate_parent_company_zi_id"},"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":132,"name":"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME","comment":null,"display_name":"zoom_info_ultimate_parent_company_name"},"ZOOM_INFO_NUMBER_OF_DEVELOPERS":{"type":"FLOAT","index":133,"name":"ZOOM_INFO_NUMBER_OF_DEVELOPERS","comment":null,"display_name":"zoom_info_number_of_developers"},"ZOOM_INFO_TOTAL_FUNDING":{"type":"TEXT","index":134,"name":"ZOOM_INFO_TOTAL_FUNDING","comment":null,"display_name":"zoom_info_total_funding"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":135,"name":"IS_KEY_ACCOUNT","comment":null,"display_name":"is_key_account"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":136,"name":"GS_FIRST_VALUE_DATE","comment":null,"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":137,"name":"GS_LAST_CSM_ACTIVITY_DATE","comment":null,"display_name":"gs_last_csm_activity_date"},"EOA_SENTIMENT":{"type":"TEXT","index":138,"name":"EOA_SENTIMENT","comment":null,"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":139,"name":"GS_HEALTH_USER_ENGAGEMENT","comment":null,"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":140,"name":"GS_HEALTH_CD","comment":null,"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":141,"name":"GS_HEALTH_DEVSECOPS","comment":null,"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":142,"name":"GS_HEALTH_CI","comment":null,"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":143,"name":"GS_HEALTH_SCM","comment":null,"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":144,"name":"RISK_IMPACT","comment":null,"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":145,"name":"RISK_REASON","comment":null,"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":146,"name":"LAST_TIMELINE_AT_RISK_UPDATE","comment":null,"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":147,"name":"LAST_AT_RISK_UPDATE_COMMENTS","comment":null,"display_name":"last_at_risk_update_comments"},"CREATED_BY_ID":{"type":"TEXT","index":148,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":149,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":150,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":151,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":152,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":153,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"_LAST_DBT_RUN":{"type":"TIMESTAMP_TZ","index":154,"name":"_LAST_DBT_RUN","comment":null,"display_name":"_last_dbt_run"},"SYSTEMMODSTAMP":{"type":"TIMESTAMP_TZ","index":155,"name":"SYSTEMMODSTAMP","comment":null,"display_name":"systemmodstamp"},"DBT_SCD_ID":{"type":"TEXT","index":156,"name":"DBT_SCD_ID","comment":null,"display_name":"dbt_scd_id"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_TZ","index":157,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_VALID_FROM":{"type":"TIMESTAMP_TZ","index":158,"name":"dbt_valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dbt_valid_from"},"DBT_VALID_TO":{"type":"TIMESTAMP_TZ","index":159,"name":"DBT_VALID_TO","comment":null,"display_name":"dbt_valid_to"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 07:34UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":44866563072,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_account_snapshots_source","raw_sql":"$3b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.sales_segment_cleaning","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.snapshots.sfdc_account_snapshots"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","snapshots","base","sfdc_account_snapshots_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/snapshots/base/sfdc_account_snapshots_source.sql","original_file_path":"models/legacy/snapshots/base/sfdc_account_snapshots_source.sql","name":"sfdc_account_snapshots_source","alias":"sfdc_account_snapshots_source","checksum":{"name":"sha256","checksum":"0cf533c687f06582e1ac0714699bf27985c02cae9df1c29f4ebcbddeca6232bc"},"tags":[],"refs":[],"sources":[["snapshots","sfdc_account_snapshots"]],"metrics":[],"description":"This is the source model for snapshots of the salesforce account table for cleaning and renaming.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/snapshots/base/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/snapshots/base/sfdc_account_snapshots_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033761.4605322,"compiled_sql":"$3c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.sfdc_account_snapshots_source","label":"sfdc_account_snapshots_source"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$3d","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527}]},"node":{"resource_type":"model","name":"map_merged_crm_account","unique_id":"model.gitlab_snowflake.map_merged_crm_account"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L3e",null,{"versions":{"Source":"$3f","Compiled":"$40"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
