1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.dim_marketing_contact","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.dim_marketing_contact\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.dim_marketing_contact","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.dim_marketing_contact\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.dim_marketing_contact","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
3b:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T5510,WITH sfdc_lead AS (

    SELECT *
    FROM {{ref('sfdc_lead_source') }}

), sfdc_contact AS (

    SELECT *
    FROM {{ref('sfdc_contact_source') }}

), sfdc_account AS (

    SELECT *
    FROM {{ref('sfdc_account_source') }}

), marketo AS (

    SELECT *
    FROM {{ref('marketo_lead_source') }}
    
), crm_account AS (

    SELECT *
    FROM {{ref('dim_crm_account') }}

), sales_segment AS (

    SELECT *
    FROM {{ref('prep_sales_segment') }}

), crm_person AS (

    SELECT *
    FROM {{ref('prep_crm_person') }}

), gitlab_users AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_users_source') }}

), customer_db_source AS (

    SELECT *
    FROM {{ref('customers_db_customers_source') }}

), zuora_contact_source AS (

    SELECT *
    FROM {{ref('zuora_contact_source') }}

), zuora_account_source AS (

    SELECT *
    FROM {{ref('zuora_account_source') }}

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM {{ref('driveload_marketing_dnc_list_source')}}
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['emails.email_address']) }}                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      {{ days_buckets('days_since_saas_signup') }}                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      {{ days_buckets('days_since_self_managed_owner_signup') }}                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2023-06-19"
) }}11:T5da8,WITH sfdc_lead AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_lead_source

), sfdc_contact AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_contact_source

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source

), marketo AS (

    SELECT *
    FROM "PREP".marketo.marketo_lead_source
    
), crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), sales_segment AS (

    SELECT *
    FROM "PROD".common_prep.prep_sales_segment

), crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), gitlab_users AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT *
    FROM "PREP".customers.customers_db_customers_source

), zuora_contact_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_account_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM "PREP".driveload.driveload_marketing_dnc_list_source
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      md5(cast(coalesce(cast(emails.email_address as 
    varchar
), '') as 
    varchar
))                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      CASE 
  WHEN days_since_saas_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_signup > 1095
    THEN '[12] 3+ Years'
END                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      CASE 
  WHEN days_since_self_managed_owner_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_self_managed_owner_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_self_managed_owner_signup > 1095
    THEN '[12] 3+ Years'
END                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final13:T401,This macro maps a job title to the IT job title hierarchy. It works by doing string matching on the job title and categorizing them into 3 buckets:

1. **IT Decision Makers**: CIO, CTO, VP of IT, ...
2. **IT Managers**: Manager of IT. Manager of Procurement, ...
3. **IT Individual contributors**: Software Developer, Application Developer, IT programmer, ...

These buckets are only for IT, information systems, engineering, ... Everything else gets a NULL value assigned to it.

This macro uses the pad_column macro to "pad" the job title field with spaces and discard unrelated pattern matching.

An example of this is the matching for the job title of `IT Manager`. The string pattern for it `%it%manager%` also gets unrelated matches like `Junior Digital Project Manager` or `Supplier Quality Section Manager`. To overcome this problem, the job title field is "padded" with spaces to the both sides of the string and the string pattern changed `% it%manager%`. This way the previous unrelated job titles would not match.14:Td833,{{ config(
    tags=["product"]
) }}
    
{{ simple_cte ([
  ('marketing_contact', 'dim_marketing_contact'),
  ('marketing_contact_order', 'bdg_marketing_contact_order'),
  ('dim_namespace', 'dim_namespace'),
  ('gitlab_dotcom_namespaces_source', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source'),
  ('gitlab_dotcom_members_source', 'gitlab_dotcom_members_source'),
  ('gitlab_dotcom_memberships', 'gitlab_dotcom_memberships'),
  ('customers_db_charges_xf', 'customers_db_charges_xf'),
  ('customers_db_trials', 'customers_db_trials'),
  ('customers_db_leads', 'customers_db_leads_source'),
  ('fct_event_user_daily', 'fct_event_user_daily'),
  ('map_gitlab_dotcom_xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
  ('services', 'gitlab_dotcom_integrations_source'),
  ('project', 'prep_project'),
  ('ptpt_scores_by_user', 'prep_ptpt_scores_by_user'),
  ('ptpf_scores_by_user', 'prep_ptpf_scores_by_user'),
  ('ptp_scores_by_user', 'prep_ptp_scores_by_user'),
  ('namespace_details', 'gitlab_dotcom_namespace_details_source')
]) }}

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    {{ dbt_utils.group_by(3) }}

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    {{ dbt_utils.group_by(7) }}
  
), pqls_with_product_information AS (

    SELECT
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION ALL

    SELECT 
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), latest_pql AS (

    SELECT
      pqls_with_product_information.*,
      gitlab_dotcom_namespaces_source.namespace_name                        AS pql_namespace_name
    FROM pqls_with_product_information
    LEFT JOIN gitlab_dotcom_namespaces_source
      ON gitlab_dotcom_namespaces_source.namespace_id = pqls_with_product_information.pql_namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email ORDER BY pql_event_created_at DESC) = 1

), services_by_email AS (

    SELECT
      latest_pql.email                                                                           AS email,
      COUNT(*)                                                                                   AS pql_nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS pql_integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    LEFT JOIN latest_pql
      ON latest_pql.pql_namespace_id = project.dim_namespace_id
    GROUP BY 1

), users_role_by_email AS (

    SELECT
      latest_pql.email,
      marketing_contact.job_title AS pql_namespace_creator_job_description
    FROM latest_pql 
    INNER JOIN dim_namespace
      ON latest_pql.pql_namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN marketing_contact
      ON dim_namespace.creator_id = marketing_contact.gitlab_dotcom_user_id

)
-------------------------- End of PQL logic --------------------------

, subscription_aggregate AS (

    SELECT
      dim_marketing_contact_id,
      MIN(subscription_start_date)                                                               AS min_subscription_start_date,
      MAX(subscription_end_date)                                                                 AS max_subscription_end_date
    FROM marketing_contact_order
    WHERE subscription_start_date is not null
    GROUP BY dim_marketing_contact_id

), namespace_notifications AS (

    SELECT
      COALESCE(notification_email, email) AS email_address,
      namespace_details.namespace_id      AS user_limit_namespace_id,
      dashboard_notification_at           AS user_limit_notification_at,
      dashboard_enforcement_at            AS user_limit_enforcement_at
    FROM namespace_details
    INNER JOIN dim_namespace
      ON namespace_details.namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN gitlab_dotcom_users_source AS user
      ON user.user_id = dim_namespace.creator_id
      AND state = 'active'
    WHERE dashboard_notification_at IS NOT NULL OR dashboard_enforcement_at IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY COALESCE(dashboard_notification_at, dashboard_enforcement_at) ASC) = 1

), paid_subscription_aggregate AS (

    SELECT 
      dim_marketing_contact_id,
      COUNT(DISTINCT dim_subscription_id)                                                        AS nbr_of_paid_subscriptions
    FROM marketing_contact_order
    WHERE dim_subscription_id is not null
      AND (is_saas_bronze_tier 
           OR is_saas_premium_tier 
           OR is_saas_ultimate_tier 
           OR is_self_managed_starter_tier
           OR is_self_managed_premium_tier
           OR is_self_managed_ultimate_tier
          )
    GROUP BY dim_marketing_contact_id

), distinct_contact_subscription AS (

    SELECT DISTINCT
      dim_marketing_contact_id,
      dim_subscription_id,
      usage_umau_28_days_user,
      usage_action_monthly_active_users_project_repo_28_days_user,
      usage_merge_requests_28_days_user,
      usage_commit_comment_all_time_event,
      usage_source_code_pushes_all_time_event,
      usage_ci_pipelines_28_days_user,
      usage_ci_internal_pipelines_28_days_user,
      usage_ci_builds_28_days_user,
      usage_ci_builds_all_time_user,
      usage_ci_builds_all_time_event,
      usage_ci_runners_all_time_event,
      usage_auto_devops_enabled_all_time_event,
      usage_template_repositories_all_time_event,
      usage_ci_pipeline_config_repository_28_days_user,
      usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_user_container_scanning_jobs_28_days_user,
      usage_user_sast_jobs_28_days_user,
      usage_user_dast_jobs_28_days_user,
      usage_user_dependency_scanning_jobs_28_days_user,
      usage_user_license_management_jobs_28_days_user,
      usage_user_secret_detection_jobs_28_days_user,
      usage_projects_with_packages_all_time_event,
      usage_projects_with_packages_28_days_event,
      usage_deployments_28_days_user,
      usage_releases_28_days_user,
      usage_epics_28_days_user,
      usage_issues_28_days_user,
      usage_instance_user_count_not_aligned,
      usage_historical_max_users_not_aligned
    FROM marketing_contact_order
    WHERE dim_subscription_id IS NOT NULL

), usage_metrics AS (

    SELECT 
      dim_marketing_contact_id,
      SUM(usage_umau_28_days_user)                                                                  AS usage_umau_28_days_user,
      SUM(usage_action_monthly_active_users_project_repo_28_days_user)                              AS usage_action_monthly_active_users_project_repo_28_days_user,
      SUM(usage_merge_requests_28_days_user)                                                        AS usage_merge_requests_28_days_user,
      SUM(usage_commit_comment_all_time_event)                                                      AS usage_commit_comment_all_time_event,
      SUM(usage_source_code_pushes_all_time_event)                                                  AS usage_source_code_pushes_all_time_event,
      SUM(usage_ci_pipelines_28_days_user)                                                          AS usage_ci_pipelines_28_days_user,
      SUM(usage_ci_internal_pipelines_28_days_user)                                                 AS usage_ci_internal_pipelines_28_days_user,
      SUM(usage_ci_builds_28_days_user)                                                             AS usage_ci_builds_28_days_user,
      SUM(usage_ci_builds_all_time_user)                                                            AS usage_ci_builds_all_time_user,
      SUM(usage_ci_builds_all_time_event)                                                           AS usage_ci_builds_all_time_event,
      SUM(usage_ci_runners_all_time_event)                                                          AS usage_ci_runners_all_time_event,
      SUM(usage_auto_devops_enabled_all_time_event)                                                 AS usage_auto_devops_enabled_all_time_event,
      SUM(usage_template_repositories_all_time_event)                                               AS usage_template_repositories_all_time_event,
      SUM(usage_ci_pipeline_config_repository_28_days_user)                                         AS usage_ci_pipeline_config_repository_28_days_user,
      SUM(usage_user_unique_users_all_secure_scanners_28_days_user)                                 AS usage_user_unique_users_all_secure_scanners_28_days_user,
      SUM(usage_user_container_scanning_jobs_28_days_user)                                          AS usage_user_container_scanning_jobs_28_days_user,
      SUM(usage_user_sast_jobs_28_days_user)                                                        AS usage_user_sast_jobs_28_days_user,
      SUM(usage_user_dast_jobs_28_days_user)                                                        AS usage_user_dast_jobs_28_days_user,
      SUM(usage_user_dependency_scanning_jobs_28_days_user)                                         AS usage_user_dependency_scanning_jobs_28_days_user,
      SUM(usage_user_license_management_jobs_28_days_user)                                          AS usage_user_license_management_jobs_28_days_user,
      SUM(usage_user_secret_detection_jobs_28_days_user)                                            AS usage_user_secret_detection_jobs_28_days_user,
      SUM(usage_projects_with_packages_all_time_event)                                              AS usage_projects_with_packages_all_time_event,
      SUM(usage_projects_with_packages_28_days_event)                                               AS usage_projects_with_packages_28_days_event,
      SUM(usage_deployments_28_days_user)                                                           AS usage_deployments_28_days_user,
      SUM(usage_releases_28_days_user)                                                              AS usage_releases_28_days_user,
      SUM(usage_epics_28_days_user)                                                                 AS usage_epics_28_days_user,
      SUM(usage_issues_28_days_user)                                                                AS usage_issues_28_days_user,
      SUM(usage_instance_user_count_not_aligned)                                                    AS usage_instance_user_count_not_aligned,
      SUM(usage_historical_max_users_not_aligned)                                                   AS usage_historical_max_users_not_aligned
    FROM distinct_contact_subscription
    GROUP BY dim_marketing_contact_id

), prep AS (
  
    SELECT     
      marketing_contact.dim_marketing_contact_id,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Member' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_member,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Personal Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_individual_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND (marketing_contact_order.is_saas_ultimate_tier OR marketing_contact_order.is_saas_premium_tier OR marketing_contact_order.is_saas_bronze_tier)
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_paid_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND marketing_contact_order.is_saas_free_tier
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_free_tier,
      IFF(is_group_maintainer_of_saas_free_tier OR is_group_maintainer_of_saas_paid_tier, TRUE, FALSE) AS is_group_maintainer_of_saas,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Customer DB Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_customer_db_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Zuora Billing Contact' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_zuora_billing_contact,
      MIN(marketing_contact_order.days_since_saas_trial_ended)                                   AS days_since_saas_trial_ended,
      MIN(marketing_contact_order.days_since_saas_trial_ended_bucket)                            AS days_since_saas_trial_ended_bucket,
      MAX(marketing_contact_order.days_until_saas_trial_ends)                                    AS days_until_saas_trial_ends,
      MAX(marketing_contact_order.days_until_saas_trial_ends_bucket)                             AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_trial,   
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_trial,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_ultimate_tier,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_ultimate_tier,      
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_starter_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_starter_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_premium_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_premium_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_ultimate_tier) >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_ultimate_tier,
      CASE
        WHEN MAX(marketing_contact_order.is_setup_for_company) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_setup_for_company_use,
      CASE
        WHEN MAX(marketing_contact_order.does_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.does_free_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_free_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_public) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_public_ultimate_parent_namespace,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_private) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_private_ultimate_parent_namespace,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_public = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS public_ultimate_parent_namespaces,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_private = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS private_ultimate_parent_namespaces,
      ARRAY_AGG(
                DISTINCT
                CASE
                  WHEN marketing_contact_order.is_ultimate_parent_namespace = FALSE
                    THEN NULL
                  ELSE IFNULL(marketing_contact_order.marketing_contact_role || ': ' || 
                    IFNULL(marketing_contact_order.namespace_path, CASE 
                                            WHEN marketing_contact_order.self_managed_product_tier IS NOT NULL
                                              THEN 'Self-Managed' 
                                            ELSE '' 
                                          END)  || ' | ' || 
                    IFNULL(marketing_contact_order.saas_product_tier, '') || 
                    IFNULL(marketing_contact_order.self_managed_product_tier, ''),
                    
                    'No Namespace') END
               )                                                                                 AS role_tier_ultimate_namespace_text

    FROM marketing_contact
    LEFT JOIN  marketing_contact_order
      ON marketing_contact_order.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    GROUP BY marketing_contact.dim_marketing_contact_id

), joined AS (

    SELECT 
      prep.*,
      IFF(individual_namespace_is_saas_bronze_tier
        OR group_owner_of_saas_bronze_tier
        OR group_member_of_saas_bronze_tier
        OR responsible_for_group_saas_bronze_tier,
        TRUE, FALSE)                                        AS is_saas_bronze_tier,
      IFF(individual_namespace_is_saas_premium_tier
        OR group_owner_of_saas_premium_tier
        OR group_member_of_saas_premium_tier
        OR responsible_for_group_saas_premium_tier,
        TRUE, FALSE)                                        AS is_saas_premium_tier,
      IFF(individual_namespace_is_saas_ultimate_tier
        OR group_owner_of_saas_ultimate_tier
        OR group_member_of_saas_ultimate_tier
        OR responsible_for_group_saas_ultimate_tier, 
        TRUE, FALSE)                                        AS is_saas_ultimate_tier,
      IFF(is_saas_bronze_tier
        OR is_self_managed_starter_tier,
        TRUE, FALSE)                                        AS is_bronze_starter_tier,
      IFF(is_saas_premium_tier
        OR is_self_managed_premium_tier,
        TRUE, FALSE)                                        AS is_premium_tier,
      IFF(is_saas_ultimate_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_ultimate_tier,                                                      
      IFF(is_saas_bronze_tier
        OR is_saas_premium_tier
        OR is_saas_ultimate_tier,
        TRUE, FALSE)                                        AS is_saas_delivery,
      IFF(is_self_managed_starter_tier
        OR is_self_managed_premium_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_self_managed_delivery,
      IFF(individual_namespace_is_saas_free_tier
        OR group_member_of_saas_free_tier
        OR group_owner_of_saas_free_tier,
        TRUE, FALSE)                                        AS is_saas_free_tier,
      IFF(is_saas_delivery
        OR is_self_managed_delivery,
        TRUE, FALSE)                                        AS is_paid_tier,
      marketing_contact.is_paid_tier_marketo,
      IFF(is_paid_tier = TRUE OR (is_paid_tier = FALSE AND marketing_contact.is_paid_tier_marketo = TRUE), TRUE, FALSE)
                                                            AS is_paid_tier_change,
      subscription_aggregate.min_subscription_start_date,
      subscription_aggregate.max_subscription_end_date,
      paid_subscription_aggregate.nbr_of_paid_subscriptions,
      CASE 
        WHEN (prep.responsible_for_group_saas_free_tier
              OR prep.individual_namespace_is_saas_free_tier
              OR prep.group_owner_of_saas_free_tier
             ) 
             AND NOT (prep.responsible_for_group_saas_ultimate_tier
                      OR prep.responsible_for_group_saas_premium_tier
                      OR prep.responsible_for_group_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_premium_tier
                      OR prep.individual_namespace_is_saas_ultimate_tier
                      OR prep.group_owner_of_saas_bronze_tier
                      OR prep.group_owner_of_saas_premium_tier
                      OR prep.group_owner_of_saas_ultimate_tier
                     )
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_free_tier_only,
      marketing_contact.email_address,
      marketing_contact.first_name,
      IFNULL(marketing_contact.last_name, 'Unknown')                                             AS last_name,
      marketing_contact.gitlab_user_name,
      IFNULL(marketing_contact.company_name, 'Unknown')                                          AS company_name,
      marketing_contact.sfdc_record_id,
      marketing_contact.dim_crm_account_id,
      marketing_contact.job_title,
      marketing_contact.it_job_title_hierarchy,
      marketing_contact.country,
      marketing_contact.mobile_phone,
      marketing_contact.sfdc_parent_sales_segment,
      marketing_contact.sfdc_parent_crm_account_region,
      marketing_contact.marketo_lead_id,
      marketing_contact.is_marketo_lead,
      marketing_contact.is_marketo_email_hard_bounced,
      marketing_contact.marketo_email_hard_bounced_date,
      marketing_contact.is_marketo_unsubscribed,
      marketing_contact.is_marketo_opted_in,
      marketing_contact.has_marketo_unsubscribed,
      marketing_contact.marketo_compliance_segment_value,
      marketing_contact.is_sfdc_lead_contact,
      marketing_contact.sfdc_lead_contact,
      marketing_contact.sfdc_created_date,
      marketing_contact.is_sfdc_opted_out,
      marketing_contact.is_gitlab_dotcom_user,
      marketing_contact.gitlab_dotcom_user_id,
      marketing_contact.gitlab_dotcom_created_date,
      marketing_contact.gitlab_dotcom_confirmed_date,
      marketing_contact.gitlab_dotcom_active_state,
      marketing_contact.gitlab_dotcom_last_login_date,
      marketing_contact.gitlab_dotcom_email_opted_in,
      marketing_contact.days_since_saas_signup,
      marketing_contact.days_since_saas_signup_bucket,
      marketing_contact.is_customer_db_user,
      marketing_contact.customer_db_customer_id,
      marketing_contact.customer_db_created_date,
      marketing_contact.customer_db_confirmed_date,
      IFF(latest_pql.email IS NOT NULL, TRUE, FALSE) AS is_pql,
      marketing_contact.is_pql_marketo,
      IFF(is_pql = TRUE OR (is_pql = FALSE AND marketing_contact.is_pql_marketo = TRUE), TRUE, FALSE)
                                            AS is_pql_change,
      latest_pql.pql_namespace_id,
      latest_pql.pql_namespace_name,
      latest_pql.pql_namespace_name_masked, 
      latest_pql.pql_product_interaction,
      latest_pql.pql_list_stages,
      latest_pql.pql_nbr_stages,
      latest_pql.pql_nbr_namespace_users,
      latest_pql.pql_trial_start_date,
      latest_pql.pql_min_subscription_start_date,
      latest_pql.pql_event_created_at,
      services_by_email.pql_nbr_integrations_installed,
      services_by_email.pql_integrations_installed,
      users_role_by_email.pql_namespace_creator_job_description,
      marketing_contact.days_since_self_managed_owner_signup,
      marketing_contact.days_since_self_managed_owner_signup_bucket,
      marketing_contact.zuora_contact_id,
      marketing_contact.zuora_created_date,
      marketing_contact.zuora_active_state,
      marketing_contact.wip_is_valid_email_address,
      marketing_contact.wip_invalid_email_address_reason,

      -- Propensity to purchase trials fields
      IFF(ptpt_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpt_contact,
      IFF(is_ptpt_contact = TRUE OR (is_ptpt_contact = FALSE AND marketing_contact.is_ptpt_contact_marketo = TRUE), TRUE, FALSE)
                                                  AS is_ptpt_contact_change,
      ptpt_scores_by_user.namespace_id            AS ptpt_namespace_id,
      ptpt_scores_by_user.score_group             AS ptpt_score_group,
      ptpt_scores_by_user.insights                AS ptpt_insights,
      ptpt_scores_by_user.score_date              AS ptpt_score_date,
      ptpt_scores_by_user.past_score_group        AS ptpt_past_score_group,
      ptpt_scores_by_user.past_score_date         AS ptpt_past_score_date,

      -- Propensity to purchase Free fields
      IFF(ptpf_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpf_contact,
      ptpf_scores_by_user.namespace_id            AS ptpf_namespace_id,
      ptpf_scores_by_user.score_group             AS ptpf_score_group,
      ptpf_scores_by_user.score_date              AS ptpf_score_date,
      ptpf_scores_by_user.past_score_group        AS ptpf_past_score_group,
      ptpf_scores_by_user.past_score_date         AS ptpf_past_score_date,

      -- Propensity to purchase fields
      IFF(ptp_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptp_contact,
      IFF(is_ptp_contact = TRUE OR (is_ptp_contact = FALSE AND marketing_contact.is_ptp_contact_marketo = TRUE
        ), TRUE, FALSE)
                                                  AS is_ptp_contact_change,
      ptp_scores_by_user.namespace_id             AS ptp_namespace_id,
      ptp_scores_by_user.score_group              AS ptp_score_group,
      ptp_scores_by_user.score_date               AS ptp_score_date,
      ptp_scores_by_user.insights                 AS ptp_insights,
      ptp_scores_by_user.past_insights            AS ptp_past_insights,
      ptp_scores_by_user.past_score_group         AS ptp_past_score_group,
      ptp_scores_by_user.past_score_date          AS ptp_past_score_date,
      CASE
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 0 AND 30 THEN '< 30 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 30 AND 60 THEN '30 - 60 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 60 AND 90 THEN '60 - 90 days'
        WHEN ptp_scores_by_user.days_since_trial_start >= 90 THEN '90+ days'
      END                                         AS ptp_days_since_trial_start,
      ptp_scores_by_user.ptp_source               AS ptp_source,

      -- Namespace notification dates
      namespace_notifications.user_limit_namespace_id,
      namespace_notifications.user_limit_notification_at,
      namespace_notifications.user_limit_enforcement_at,
      IFF(namespace_notifications.user_limit_notification_at IS NOT NULL OR namespace_notifications.user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                              AS is_impacted_by_user_limit,
      IFF(is_impacted_by_user_limit = TRUE OR (is_impacted_by_user_limit = FALSE AND marketing_contact.is_impacted_by_user_limit_marketo = TRUE), TRUE, FALSE)
                                                  AS is_impacted_by_user_limit_change,

      usage_metrics.usage_umau_28_days_user,
      usage_metrics.usage_action_monthly_active_users_project_repo_28_days_user,
      usage_metrics.usage_merge_requests_28_days_user,
      usage_metrics.usage_commit_comment_all_time_event,
      usage_metrics.usage_source_code_pushes_all_time_event,
      usage_metrics.usage_ci_pipelines_28_days_user,
      usage_metrics.usage_ci_internal_pipelines_28_days_user,
      usage_metrics.usage_ci_builds_28_days_user,
      usage_metrics.usage_ci_builds_all_time_user,
      usage_metrics.usage_ci_builds_all_time_event,
      usage_metrics.usage_ci_runners_all_time_event,
      usage_metrics.usage_auto_devops_enabled_all_time_event,
      usage_metrics.usage_template_repositories_all_time_event,
      usage_metrics.usage_ci_pipeline_config_repository_28_days_user,
      usage_metrics.usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_metrics.usage_user_container_scanning_jobs_28_days_user,
      usage_metrics.usage_user_sast_jobs_28_days_user,
      usage_metrics.usage_user_dast_jobs_28_days_user,
      usage_metrics.usage_user_dependency_scanning_jobs_28_days_user,
      usage_metrics.usage_user_license_management_jobs_28_days_user,
      usage_metrics.usage_user_secret_detection_jobs_28_days_user,
      usage_metrics.usage_projects_with_packages_all_time_event,
      usage_metrics.usage_projects_with_packages_28_days_event,
      usage_metrics.usage_deployments_28_days_user,
      usage_metrics.usage_releases_28_days_user,
      usage_metrics.usage_epics_28_days_user,
      usage_metrics.usage_issues_28_days_user,
      usage_metrics.usage_instance_user_count_not_aligned,
      usage_metrics.usage_historical_max_users_not_aligned,
      'Raw'                                                                                      AS lead_status,
      'Snowflake Email Marketing Database'                                                       AS lead_source      
    FROM prep
    LEFT JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN subscription_aggregate
      ON subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN paid_subscription_aggregate
      ON paid_subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN usage_metrics
      ON usage_metrics.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN latest_pql
      ON latest_pql.email = marketing_contact.email_address
    LEFT JOIN services_by_email
      ON services_by_email.email = marketing_contact.email_address
    LEFT JOIN users_role_by_email
      ON users_role_by_email.email = marketing_contact.email_address
    LEFT JOIN ptpt_scores_by_user
      ON ptpt_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptpf_scores_by_user
      ON ptpf_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptp_scores_by_user
      ON ptp_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN namespace_notifications
      ON namespace_notifications.email_address = marketing_contact.email_address
)

{{ hash_diff(
    cte_ref="joined",
    return_cte="final",
    columns=[
      'is_group_namespace_owner',
      'is_group_namespace_member',
      'is_individual_namespace_owner',
      'is_customer_db_owner',
      'is_zuora_billing_contact',
      'days_since_saas_trial_ended_bucket',
      'individual_namespace_is_saas_trial',
      'individual_namespace_is_saas_free_tier',
      'individual_namespace_is_saas_bronze_tier',
      'individual_namespace_is_saas_premium_tier',
      'individual_namespace_is_saas_ultimate_tier',
      'group_member_of_saas_trial',
      'group_member_of_saas_free_tier',
      'group_member_of_saas_bronze_tier',
      'group_member_of_saas_premium_tier',
      'group_member_of_saas_ultimate_tier',
      'group_owner_of_saas_trial',
      'group_owner_of_saas_free_tier',
      'group_owner_of_saas_bronze_tier',
      'group_owner_of_saas_premium_tier',
      'group_owner_of_saas_ultimate_tier',
      'responsible_for_group_saas_trial',
      'responsible_for_group_saas_free_tier',
      'responsible_for_group_saas_bronze_tier',
      'responsible_for_group_saas_premium_tier',
      'responsible_for_group_saas_ultimate_tier',
      'is_self_managed_starter_tier',
      'is_self_managed_premium_tier',
      'is_self_managed_ultimate_tier',
      'email_address',
      'first_name',
      'last_name',
      'gitlab_user_name',
      'company_name',
      'country',
      'is_gitlab_dotcom_user',
      'gitlab_dotcom_user_id',
      'gitlab_dotcom_created_date',
      'gitlab_dotcom_confirmed_date',
      'gitlab_dotcom_active_state',
      'gitlab_dotcom_last_login_date',
      'gitlab_dotcom_email_opted_in',
      'is_customer_db_user',
      'customer_db_customer_id',
      'customer_db_created_date',
      'customer_db_confirmed_date',
      'zuora_contact_id',
      'zuora_created_date',
      'zuora_active_state',
      'pql_list_stages',
      'pql_nbr_stages',
      'pql_nbr_namespace_users',
      'has_namespace_setup_for_company_use',
      'pql_namespace_id',
      'pql_namespace_name',
      'pql_nbr_integrations_installed',
      'pql_integrations_installed',
      'pql_namespace_creator_job_description',
      'is_pql',
      'is_paid_tier',
      'is_pql_change',
      'is_paid_tier_change',
      'is_ptpt_contact',
      'is_ptpt_contact_change',
      'ptpt_namespace_id',
      'ptpt_score_group',
      'ptpt_insights',
      'ptpt_score_date',
      'ptpt_past_score_group',
      'is_member_of_public_ultimate_parent_namespace',
      'is_member_of_private_ultimate_parent_namespace',
      'user_limit_notification_at',
      'user_limit_enforcement_at',
      'is_impacted_by_user_limit',
      'is_impacted_by_user_limit_change',
      'user_limit_namespace_id',
      'marketo_lead_id',
      'is_ptp_contact',
      'is_ptp_contact_change',
      'ptp_namespace_id',
      'ptp_score_group',
      'ptp_score_date',
      'ptp_insights',
      'ptp_past_insights',
      'ptp_past_score_group',
      'ptp_days_since_trial_start',
      'ptp_source'
      ]
) }}

{{ dbt_audit(
    cte_ref="final",
    created_by="@trevor31",
    updated_by="@jpeguero",
    created_date="2021-02-09",
    updated_date="2023-06-19"
) }}15:Tea0b,
    


WITH marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), marketing_contact_order AS (

    SELECT * 
    FROM "PREP".sensitive.bdg_marketing_contact_order

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), gitlab_dotcom_namespaces_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), gitlab_dotcom_members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_dotcom_memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), customers_db_charges_xf AS (

    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

), customers_db_trials AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_trials

), customers_db_leads AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), fct_event_user_daily AS (

    SELECT * 
    FROM "PROD".common.fct_event_user_daily

), map_gitlab_dotcom_xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), services AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), ptpt_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptpt_scores_by_user

), ptpf_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptpf_scores_by_user

), ptp_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptp_scores_by_user

), namespace_details AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_details_source

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    group by 1,2,3

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    group by 1,2,3,4,5,6,7
  
), pqls_with_product_information AS (

    SELECT
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION ALL

    SELECT 
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), latest_pql AS (

    SELECT
      pqls_with_product_information.*,
      gitlab_dotcom_namespaces_source.namespace_name                        AS pql_namespace_name
    FROM pqls_with_product_information
    LEFT JOIN gitlab_dotcom_namespaces_source
      ON gitlab_dotcom_namespaces_source.namespace_id = pqls_with_product_information.pql_namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email ORDER BY pql_event_created_at DESC) = 1

), services_by_email AS (

    SELECT
      latest_pql.email                                                                           AS email,
      COUNT(*)                                                                                   AS pql_nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS pql_integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    LEFT JOIN latest_pql
      ON latest_pql.pql_namespace_id = project.dim_namespace_id
    GROUP BY 1

), users_role_by_email AS (

    SELECT
      latest_pql.email,
      marketing_contact.job_title AS pql_namespace_creator_job_description
    FROM latest_pql 
    INNER JOIN dim_namespace
      ON latest_pql.pql_namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN marketing_contact
      ON dim_namespace.creator_id = marketing_contact.gitlab_dotcom_user_id

)
-------------------------- End of PQL logic --------------------------

, subscription_aggregate AS (

    SELECT
      dim_marketing_contact_id,
      MIN(subscription_start_date)                                                               AS min_subscription_start_date,
      MAX(subscription_end_date)                                                                 AS max_subscription_end_date
    FROM marketing_contact_order
    WHERE subscription_start_date is not null
    GROUP BY dim_marketing_contact_id

), namespace_notifications AS (

    SELECT
      COALESCE(notification_email, email) AS email_address,
      namespace_details.namespace_id      AS user_limit_namespace_id,
      dashboard_notification_at           AS user_limit_notification_at,
      dashboard_enforcement_at            AS user_limit_enforcement_at
    FROM namespace_details
    INNER JOIN dim_namespace
      ON namespace_details.namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN gitlab_dotcom_users_source AS user
      ON user.user_id = dim_namespace.creator_id
      AND state = 'active'
    WHERE dashboard_notification_at IS NOT NULL OR dashboard_enforcement_at IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY COALESCE(dashboard_notification_at, dashboard_enforcement_at) ASC) = 1

), paid_subscription_aggregate AS (

    SELECT 
      dim_marketing_contact_id,
      COUNT(DISTINCT dim_subscription_id)                                                        AS nbr_of_paid_subscriptions
    FROM marketing_contact_order
    WHERE dim_subscription_id is not null
      AND (is_saas_bronze_tier 
           OR is_saas_premium_tier 
           OR is_saas_ultimate_tier 
           OR is_self_managed_starter_tier
           OR is_self_managed_premium_tier
           OR is_self_managed_ultimate_tier
          )
    GROUP BY dim_marketing_contact_id

), distinct_contact_subscription AS (

    SELECT DISTINCT
      dim_marketing_contact_id,
      dim_subscription_id,
      usage_umau_28_days_user,
      usage_action_monthly_active_users_project_repo_28_days_user,
      usage_merge_requests_28_days_user,
      usage_commit_comment_all_time_event,
      usage_source_code_pushes_all_time_event,
      usage_ci_pipelines_28_days_user,
      usage_ci_internal_pipelines_28_days_user,
      usage_ci_builds_28_days_user,
      usage_ci_builds_all_time_user,
      usage_ci_builds_all_time_event,
      usage_ci_runners_all_time_event,
      usage_auto_devops_enabled_all_time_event,
      usage_template_repositories_all_time_event,
      usage_ci_pipeline_config_repository_28_days_user,
      usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_user_container_scanning_jobs_28_days_user,
      usage_user_sast_jobs_28_days_user,
      usage_user_dast_jobs_28_days_user,
      usage_user_dependency_scanning_jobs_28_days_user,
      usage_user_license_management_jobs_28_days_user,
      usage_user_secret_detection_jobs_28_days_user,
      usage_projects_with_packages_all_time_event,
      usage_projects_with_packages_28_days_event,
      usage_deployments_28_days_user,
      usage_releases_28_days_user,
      usage_epics_28_days_user,
      usage_issues_28_days_user,
      usage_instance_user_count_not_aligned,
      usage_historical_max_users_not_aligned
    FROM marketing_contact_order
    WHERE dim_subscription_id IS NOT NULL

), usage_metrics AS (

    SELECT 
      dim_marketing_contact_id,
      SUM(usage_umau_28_days_user)                                                                  AS usage_umau_28_days_user,
      SUM(usage_action_monthly_active_users_project_repo_28_days_user)                              AS usage_action_monthly_active_users_project_repo_28_days_user,
      SUM(usage_merge_requests_28_days_user)                                                        AS usage_merge_requests_28_days_user,
      SUM(usage_commit_comment_all_time_event)                                                      AS usage_commit_comment_all_time_event,
      SUM(usage_source_code_pushes_all_time_event)                                                  AS usage_source_code_pushes_all_time_event,
      SUM(usage_ci_pipelines_28_days_user)                                                          AS usage_ci_pipelines_28_days_user,
      SUM(usage_ci_internal_pipelines_28_days_user)                                                 AS usage_ci_internal_pipelines_28_days_user,
      SUM(usage_ci_builds_28_days_user)                                                             AS usage_ci_builds_28_days_user,
      SUM(usage_ci_builds_all_time_user)                                                            AS usage_ci_builds_all_time_user,
      SUM(usage_ci_builds_all_time_event)                                                           AS usage_ci_builds_all_time_event,
      SUM(usage_ci_runners_all_time_event)                                                          AS usage_ci_runners_all_time_event,
      SUM(usage_auto_devops_enabled_all_time_event)                                                 AS usage_auto_devops_enabled_all_time_event,
      SUM(usage_template_repositories_all_time_event)                                               AS usage_template_repositories_all_time_event,
      SUM(usage_ci_pipeline_config_repository_28_days_user)                                         AS usage_ci_pipeline_config_repository_28_days_user,
      SUM(usage_user_unique_users_all_secure_scanners_28_days_user)                                 AS usage_user_unique_users_all_secure_scanners_28_days_user,
      SUM(usage_user_container_scanning_jobs_28_days_user)                                          AS usage_user_container_scanning_jobs_28_days_user,
      SUM(usage_user_sast_jobs_28_days_user)                                                        AS usage_user_sast_jobs_28_days_user,
      SUM(usage_user_dast_jobs_28_days_user)                                                        AS usage_user_dast_jobs_28_days_user,
      SUM(usage_user_dependency_scanning_jobs_28_days_user)                                         AS usage_user_dependency_scanning_jobs_28_days_user,
      SUM(usage_user_license_management_jobs_28_days_user)                                          AS usage_user_license_management_jobs_28_days_user,
      SUM(usage_user_secret_detection_jobs_28_days_user)                                            AS usage_user_secret_detection_jobs_28_days_user,
      SUM(usage_projects_with_packages_all_time_event)                                              AS usage_projects_with_packages_all_time_event,
      SUM(usage_projects_with_packages_28_days_event)                                               AS usage_projects_with_packages_28_days_event,
      SUM(usage_deployments_28_days_user)                                                           AS usage_deployments_28_days_user,
      SUM(usage_releases_28_days_user)                                                              AS usage_releases_28_days_user,
      SUM(usage_epics_28_days_user)                                                                 AS usage_epics_28_days_user,
      SUM(usage_issues_28_days_user)                                                                AS usage_issues_28_days_user,
      SUM(usage_instance_user_count_not_aligned)                                                    AS usage_instance_user_count_not_aligned,
      SUM(usage_historical_max_users_not_aligned)                                                   AS usage_historical_max_users_not_aligned
    FROM distinct_contact_subscription
    GROUP BY dim_marketing_contact_id

), prep AS (
  
    SELECT     
      marketing_contact.dim_marketing_contact_id,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Member' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_member,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Personal Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_individual_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND (marketing_contact_order.is_saas_ultimate_tier OR marketing_contact_order.is_saas_premium_tier OR marketing_contact_order.is_saas_bronze_tier)
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_paid_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND marketing_contact_order.is_saas_free_tier
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_free_tier,
      IFF(is_group_maintainer_of_saas_free_tier OR is_group_maintainer_of_saas_paid_tier, TRUE, FALSE) AS is_group_maintainer_of_saas,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Customer DB Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_customer_db_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Zuora Billing Contact' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_zuora_billing_contact,
      MIN(marketing_contact_order.days_since_saas_trial_ended)                                   AS days_since_saas_trial_ended,
      MIN(marketing_contact_order.days_since_saas_trial_ended_bucket)                            AS days_since_saas_trial_ended_bucket,
      MAX(marketing_contact_order.days_until_saas_trial_ends)                                    AS days_until_saas_trial_ends,
      MAX(marketing_contact_order.days_until_saas_trial_ends_bucket)                             AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_trial,   
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_trial,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_ultimate_tier,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_ultimate_tier,      
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_starter_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_starter_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_premium_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_premium_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_ultimate_tier) >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_ultimate_tier,
      CASE
        WHEN MAX(marketing_contact_order.is_setup_for_company) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_setup_for_company_use,
      CASE
        WHEN MAX(marketing_contact_order.does_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.does_free_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_free_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_public) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_public_ultimate_parent_namespace,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_private) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_private_ultimate_parent_namespace,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_public = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS public_ultimate_parent_namespaces,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_private = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS private_ultimate_parent_namespaces,
      ARRAY_AGG(
                DISTINCT
                CASE
                  WHEN marketing_contact_order.is_ultimate_parent_namespace = FALSE
                    THEN NULL
                  ELSE IFNULL(marketing_contact_order.marketing_contact_role || ': ' || 
                    IFNULL(marketing_contact_order.namespace_path, CASE 
                                            WHEN marketing_contact_order.self_managed_product_tier IS NOT NULL
                                              THEN 'Self-Managed' 
                                            ELSE '' 
                                          END)  || ' | ' || 
                    IFNULL(marketing_contact_order.saas_product_tier, '') || 
                    IFNULL(marketing_contact_order.self_managed_product_tier, ''),
                    
                    'No Namespace') END
               )                                                                                 AS role_tier_ultimate_namespace_text

    FROM marketing_contact
    LEFT JOIN  marketing_contact_order
      ON marketing_contact_order.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    GROUP BY marketing_contact.dim_marketing_contact_id

), joined AS (

    SELECT 
      prep.*,
      IFF(individual_namespace_is_saas_bronze_tier
        OR group_owner_of_saas_bronze_tier
        OR group_member_of_saas_bronze_tier
        OR responsible_for_group_saas_bronze_tier,
        TRUE, FALSE)                                        AS is_saas_bronze_tier,
      IFF(individual_namespace_is_saas_premium_tier
        OR group_owner_of_saas_premium_tier
        OR group_member_of_saas_premium_tier
        OR responsible_for_group_saas_premium_tier,
        TRUE, FALSE)                                        AS is_saas_premium_tier,
      IFF(individual_namespace_is_saas_ultimate_tier
        OR group_owner_of_saas_ultimate_tier
        OR group_member_of_saas_ultimate_tier
        OR responsible_for_group_saas_ultimate_tier, 
        TRUE, FALSE)                                        AS is_saas_ultimate_tier,
      IFF(is_saas_bronze_tier
        OR is_self_managed_starter_tier,
        TRUE, FALSE)                                        AS is_bronze_starter_tier,
      IFF(is_saas_premium_tier
        OR is_self_managed_premium_tier,
        TRUE, FALSE)                                        AS is_premium_tier,
      IFF(is_saas_ultimate_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_ultimate_tier,                                                      
      IFF(is_saas_bronze_tier
        OR is_saas_premium_tier
        OR is_saas_ultimate_tier,
        TRUE, FALSE)                                        AS is_saas_delivery,
      IFF(is_self_managed_starter_tier
        OR is_self_managed_premium_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_self_managed_delivery,
      IFF(individual_namespace_is_saas_free_tier
        OR group_member_of_saas_free_tier
        OR group_owner_of_saas_free_tier,
        TRUE, FALSE)                                        AS is_saas_free_tier,
      IFF(is_saas_delivery
        OR is_self_managed_delivery,
        TRUE, FALSE)                                        AS is_paid_tier,
      marketing_contact.is_paid_tier_marketo,
      IFF(is_paid_tier = TRUE OR (is_paid_tier = FALSE AND marketing_contact.is_paid_tier_marketo = TRUE), TRUE, FALSE)
                                                            AS is_paid_tier_change,
      subscription_aggregate.min_subscription_start_date,
      subscription_aggregate.max_subscription_end_date,
      paid_subscription_aggregate.nbr_of_paid_subscriptions,
      CASE 
        WHEN (prep.responsible_for_group_saas_free_tier
              OR prep.individual_namespace_is_saas_free_tier
              OR prep.group_owner_of_saas_free_tier
             ) 
             AND NOT (prep.responsible_for_group_saas_ultimate_tier
                      OR prep.responsible_for_group_saas_premium_tier
                      OR prep.responsible_for_group_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_premium_tier
                      OR prep.individual_namespace_is_saas_ultimate_tier
                      OR prep.group_owner_of_saas_bronze_tier
                      OR prep.group_owner_of_saas_premium_tier
                      OR prep.group_owner_of_saas_ultimate_tier
                     )
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_free_tier_only,
      marketing_contact.email_address,
      marketing_contact.first_name,
      IFNULL(marketing_contact.last_name, 'Unknown')                                             AS last_name,
      marketing_contact.gitlab_user_name,
      IFNULL(marketing_contact.company_name, 'Unknown')                                          AS company_name,
      marketing_contact.sfdc_record_id,
      marketing_contact.dim_crm_account_id,
      marketing_contact.job_title,
      marketing_contact.it_job_title_hierarchy,
      marketing_contact.country,
      marketing_contact.mobile_phone,
      marketing_contact.sfdc_parent_sales_segment,
      marketing_contact.sfdc_parent_crm_account_region,
      marketing_contact.marketo_lead_id,
      marketing_contact.is_marketo_lead,
      marketing_contact.is_marketo_email_hard_bounced,
      marketing_contact.marketo_email_hard_bounced_date,
      marketing_contact.is_marketo_unsubscribed,
      marketing_contact.is_marketo_opted_in,
      marketing_contact.has_marketo_unsubscribed,
      marketing_contact.marketo_compliance_segment_value,
      marketing_contact.is_sfdc_lead_contact,
      marketing_contact.sfdc_lead_contact,
      marketing_contact.sfdc_created_date,
      marketing_contact.is_sfdc_opted_out,
      marketing_contact.is_gitlab_dotcom_user,
      marketing_contact.gitlab_dotcom_user_id,
      marketing_contact.gitlab_dotcom_created_date,
      marketing_contact.gitlab_dotcom_confirmed_date,
      marketing_contact.gitlab_dotcom_active_state,
      marketing_contact.gitlab_dotcom_last_login_date,
      marketing_contact.gitlab_dotcom_email_opted_in,
      marketing_contact.days_since_saas_signup,
      marketing_contact.days_since_saas_signup_bucket,
      marketing_contact.is_customer_db_user,
      marketing_contact.customer_db_customer_id,
      marketing_contact.customer_db_created_date,
      marketing_contact.customer_db_confirmed_date,
      IFF(latest_pql.email IS NOT NULL, TRUE, FALSE) AS is_pql,
      marketing_contact.is_pql_marketo,
      IFF(is_pql = TRUE OR (is_pql = FALSE AND marketing_contact.is_pql_marketo = TRUE), TRUE, FALSE)
                                            AS is_pql_change,
      latest_pql.pql_namespace_id,
      latest_pql.pql_namespace_name,
      latest_pql.pql_namespace_name_masked, 
      latest_pql.pql_product_interaction,
      latest_pql.pql_list_stages,
      latest_pql.pql_nbr_stages,
      latest_pql.pql_nbr_namespace_users,
      latest_pql.pql_trial_start_date,
      latest_pql.pql_min_subscription_start_date,
      latest_pql.pql_event_created_at,
      services_by_email.pql_nbr_integrations_installed,
      services_by_email.pql_integrations_installed,
      users_role_by_email.pql_namespace_creator_job_description,
      marketing_contact.days_since_self_managed_owner_signup,
      marketing_contact.days_since_self_managed_owner_signup_bucket,
      marketing_contact.zuora_contact_id,
      marketing_contact.zuora_created_date,
      marketing_contact.zuora_active_state,
      marketing_contact.wip_is_valid_email_address,
      marketing_contact.wip_invalid_email_address_reason,

      -- Propensity to purchase trials fields
      IFF(ptpt_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpt_contact,
      IFF(is_ptpt_contact = TRUE OR (is_ptpt_contact = FALSE AND marketing_contact.is_ptpt_contact_marketo = TRUE), TRUE, FALSE)
                                                  AS is_ptpt_contact_change,
      ptpt_scores_by_user.namespace_id            AS ptpt_namespace_id,
      ptpt_scores_by_user.score_group             AS ptpt_score_group,
      ptpt_scores_by_user.insights                AS ptpt_insights,
      ptpt_scores_by_user.score_date              AS ptpt_score_date,
      ptpt_scores_by_user.past_score_group        AS ptpt_past_score_group,
      ptpt_scores_by_user.past_score_date         AS ptpt_past_score_date,

      -- Propensity to purchase Free fields
      IFF(ptpf_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpf_contact,
      ptpf_scores_by_user.namespace_id            AS ptpf_namespace_id,
      ptpf_scores_by_user.score_group             AS ptpf_score_group,
      ptpf_scores_by_user.score_date              AS ptpf_score_date,
      ptpf_scores_by_user.past_score_group        AS ptpf_past_score_group,
      ptpf_scores_by_user.past_score_date         AS ptpf_past_score_date,

      -- Propensity to purchase fields
      IFF(ptp_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptp_contact,
      IFF(is_ptp_contact = TRUE OR (is_ptp_contact = FALSE AND marketing_contact.is_ptp_contact_marketo = TRUE
        ), TRUE, FALSE)
                                                  AS is_ptp_contact_change,
      ptp_scores_by_user.namespace_id             AS ptp_namespace_id,
      ptp_scores_by_user.score_group              AS ptp_score_group,
      ptp_scores_by_user.score_date               AS ptp_score_date,
      ptp_scores_by_user.insights                 AS ptp_insights,
      ptp_scores_by_user.past_insights            AS ptp_past_insights,
      ptp_scores_by_user.past_score_group         AS ptp_past_score_group,
      ptp_scores_by_user.past_score_date          AS ptp_past_score_date,
      CASE
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 0 AND 30 THEN '< 30 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 30 AND 60 THEN '30 - 60 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 60 AND 90 THEN '60 - 90 days'
        WHEN ptp_scores_by_user.days_since_trial_start >= 90 THEN '90+ days'
      END                                         AS ptp_days_since_trial_start,
      ptp_scores_by_user.ptp_source               AS ptp_source,

      -- Namespace notification dates
      namespace_notifications.user_limit_namespace_id,
      namespace_notifications.user_limit_notification_at,
      namespace_notifications.user_limit_enforcement_at,
      IFF(namespace_notifications.user_limit_notification_at IS NOT NULL OR namespace_notifications.user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                              AS is_impacted_by_user_limit,
      IFF(is_impacted_by_user_limit = TRUE OR (is_impacted_by_user_limit = FALSE AND marketing_contact.is_impacted_by_user_limit_marketo = TRUE), TRUE, FALSE)
                                                  AS is_impacted_by_user_limit_change,

      usage_metrics.usage_umau_28_days_user,
      usage_metrics.usage_action_monthly_active_users_project_repo_28_days_user,
      usage_metrics.usage_merge_requests_28_days_user,
      usage_metrics.usage_commit_comment_all_time_event,
      usage_metrics.usage_source_code_pushes_all_time_event,
      usage_metrics.usage_ci_pipelines_28_days_user,
      usage_metrics.usage_ci_internal_pipelines_28_days_user,
      usage_metrics.usage_ci_builds_28_days_user,
      usage_metrics.usage_ci_builds_all_time_user,
      usage_metrics.usage_ci_builds_all_time_event,
      usage_metrics.usage_ci_runners_all_time_event,
      usage_metrics.usage_auto_devops_enabled_all_time_event,
      usage_metrics.usage_template_repositories_all_time_event,
      usage_metrics.usage_ci_pipeline_config_repository_28_days_user,
      usage_metrics.usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_metrics.usage_user_container_scanning_jobs_28_days_user,
      usage_metrics.usage_user_sast_jobs_28_days_user,
      usage_metrics.usage_user_dast_jobs_28_days_user,
      usage_metrics.usage_user_dependency_scanning_jobs_28_days_user,
      usage_metrics.usage_user_license_management_jobs_28_days_user,
      usage_metrics.usage_user_secret_detection_jobs_28_days_user,
      usage_metrics.usage_projects_with_packages_all_time_event,
      usage_metrics.usage_projects_with_packages_28_days_event,
      usage_metrics.usage_deployments_28_days_user,
      usage_metrics.usage_releases_28_days_user,
      usage_metrics.usage_epics_28_days_user,
      usage_metrics.usage_issues_28_days_user,
      usage_metrics.usage_instance_user_count_not_aligned,
      usage_metrics.usage_historical_max_users_not_aligned,
      'Raw'                                                                                      AS lead_status,
      'Snowflake Email Marketing Database'                                                       AS lead_source      
    FROM prep
    LEFT JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN subscription_aggregate
      ON subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN paid_subscription_aggregate
      ON paid_subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN usage_metrics
      ON usage_metrics.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN latest_pql
      ON latest_pql.email = marketing_contact.email_address
    LEFT JOIN services_by_email
      ON services_by_email.email = marketing_contact.email_address
    LEFT JOIN users_role_by_email
      ON users_role_by_email.email = marketing_contact.email_address
    LEFT JOIN ptpt_scores_by_user
      ON ptpt_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptpf_scores_by_user
      ON ptpf_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptp_scores_by_user
      ON ptp_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN namespace_notifications
      ON namespace_notifications.email_address = marketing_contact.email_address
)



  , hashing AS (

    SELECT *,

      md5(cast(coalesce(cast(is_group_namespace_owner as 
    varchar
), '') || '-' || coalesce(cast(is_group_namespace_member as 
    varchar
), '') || '-' || coalesce(cast(is_individual_namespace_owner as 
    varchar
), '') || '-' || coalesce(cast(is_customer_db_owner as 
    varchar
), '') || '-' || coalesce(cast(is_zuora_billing_contact as 
    varchar
), '') || '-' || coalesce(cast(days_since_saas_trial_ended_bucket as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_starter_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(email_address as 
    varchar
), '') || '-' || coalesce(cast(first_name as 
    varchar
), '') || '-' || coalesce(cast(last_name as 
    varchar
), '') || '-' || coalesce(cast(gitlab_user_name as 
    varchar
), '') || '-' || coalesce(cast(company_name as 
    varchar
), '') || '-' || coalesce(cast(country as 
    varchar
), '') || '-' || coalesce(cast(is_gitlab_dotcom_user as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_user_id as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_created_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_active_state as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_last_login_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_email_opted_in as 
    varchar
), '') || '-' || coalesce(cast(is_customer_db_user as 
    varchar
), '') || '-' || coalesce(cast(customer_db_customer_id as 
    varchar
), '') || '-' || coalesce(cast(customer_db_created_date as 
    varchar
), '') || '-' || coalesce(cast(customer_db_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(zuora_contact_id as 
    varchar
), '') || '-' || coalesce(cast(zuora_created_date as 
    varchar
), '') || '-' || coalesce(cast(zuora_active_state as 
    varchar
), '') || '-' || coalesce(cast(pql_list_stages as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_stages as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_namespace_users as 
    varchar
), '') || '-' || coalesce(cast(has_namespace_setup_for_company_use as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_name as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_integrations_installed as 
    varchar
), '') || '-' || coalesce(cast(pql_integrations_installed as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_creator_job_description as 
    varchar
), '') || '-' || coalesce(cast(is_pql as 
    varchar
), '') || '-' || coalesce(cast(is_paid_tier as 
    varchar
), '') || '-' || coalesce(cast(is_pql_change as 
    varchar
), '') || '-' || coalesce(cast(is_paid_tier_change as 
    varchar
), '') || '-' || coalesce(cast(is_ptpt_contact as 
    varchar
), '') || '-' || coalesce(cast(is_ptpt_contact_change as 
    varchar
), '') || '-' || coalesce(cast(ptpt_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(ptpt_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptpt_insights as 
    varchar
), '') || '-' || coalesce(cast(ptpt_score_date as 
    varchar
), '') || '-' || coalesce(cast(ptpt_past_score_group as 
    varchar
), '') || '-' || coalesce(cast(is_member_of_public_ultimate_parent_namespace as 
    varchar
), '') || '-' || coalesce(cast(is_member_of_private_ultimate_parent_namespace as 
    varchar
), '') || '-' || coalesce(cast(user_limit_notification_at as 
    varchar
), '') || '-' || coalesce(cast(user_limit_enforcement_at as 
    varchar
), '') || '-' || coalesce(cast(is_impacted_by_user_limit as 
    varchar
), '') || '-' || coalesce(cast(is_impacted_by_user_limit_change as 
    varchar
), '') || '-' || coalesce(cast(user_limit_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(marketo_lead_id as 
    varchar
), '') || '-' || coalesce(cast(is_ptp_contact as 
    varchar
), '') || '-' || coalesce(cast(is_ptp_contact_change as 
    varchar
), '') || '-' || coalesce(cast(ptp_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(ptp_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptp_score_date as 
    varchar
), '') || '-' || coalesce(cast(ptp_insights as 
    varchar
), '') || '-' || coalesce(cast(ptp_past_insights as 
    varchar
), '') || '-' || coalesce(cast(ptp_past_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptp_days_since_trial_start as 
    varchar
), '') || '-' || coalesce(cast(ptp_source as 
    varchar
), '') as 
    varchar
)) as prev_hash

    FROM joined

  ), final as (

      

        SELECT hashing.*,
          CASE
            WHEN hashing.prev_hash = t.prev_hash THEN last_changed
            ELSE CURRENT_TIMESTAMP()
          END AS last_changed
        FROM hashing
        LEFT JOIN "PREP".sensitive.mart_marketing_contact as t on t.prev_hash = hashing.prev_hash

      

  )


SELECT
      *,
      '@trevor31'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-09'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final16:T1783,{{ simple_cte ([
  ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_members', 'gitlab_dotcom_members_source'),
  ('gitlab_users', 'gitlab_dotcom_users_source'),
  ('customer_db_source', 'customers_db_customers_source'),
  ('zuora_account', 'zuora_account_source'),
  ('zuora_contact', 'zuora_contact_source'),
  ('dim_marketing_contact', 'dim_marketing_contact'),
  ('prep_namespace', 'prep_namespace')
]) }}

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2022-10-03"
) }}17:T19aa,

WITH gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_members AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_users AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_customers_source

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

)

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2022-10-03'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final18:T4a63,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('marketing_contact', 'dim_marketing_contact'),
    ('marketing_contact_role', 'bdg_marketing_contact_role'),
    ('namespace_lineage', 'prep_namespace'),
    ('project', 'prep_project'),
    ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
    ('instance_metric_wave', 'fct_ping_instance_metric_wave_monthly')
]) }}

, namespace_project_visibility AS (

    SELECT
      dim_namespace_id,
      MAX(IFF(visibility_level = 'public', TRUE, FALSE)) AS does_namespace_have_public_project
    FROM project
    GROUP BY 1

), free_namespace_project_visibility AS (

    SELECT
      project.dim_namespace_id,
      MAX(IFF(namespace_lineage.gitlab_plan_title = 'Free' AND project.visibility_level = 'public', TRUE, FALSE)) AS does_free_namespace_have_public_project
    FROM project
    LEFT JOIN namespace_lineage
      ON project.dim_namespace_id = namespace_lineage.dim_namespace_id
    GROUP BY 1

), saas_namespace_subscription AS (
    
    SELECT *
    FROM {{ref('bdg_namespace_order_subscription')}}
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), self_managed_namespace_subscription AS (
    
    SELECT *
    FROM {{ref('bdg_self_managed_order_subscription')}}
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), instance_metric_wave_aggregate AS (

    SELECT 
      dim_subscription_id,
      umau_28_days_user,
      action_monthly_active_users_project_repo_28_days_user,
      merge_requests_28_days_user,
      commit_comment_all_time_event,
      source_code_pushes_all_time_event,
      ci_pipelines_28_days_user,
      ci_internal_pipelines_28_days_user,
      ci_builds_28_days_user,
      ci_builds_all_time_user,
      ci_builds_all_time_event,
      ci_runners_all_time_event,
      auto_devops_enabled_all_time_event,
      template_repositories_all_time_event,
      ci_pipeline_config_repository_28_days_user,
      user_unique_users_all_secure_scanners_28_days_user,
      user_container_scanning_jobs_28_days_user,
      user_sast_jobs_28_days_user,
      user_dast_jobs_28_days_user,
      user_dependency_scanning_jobs_28_days_user,
      user_license_management_jobs_28_days_user,
      user_secret_detection_jobs_28_days_user,
      projects_with_packages_all_time_event,
      projects_with_packages_28_days_event,
      deployments_28_days_user,
      releases_28_days_user,
      epics_28_days_user,
      issues_28_days_user,
      instance_user_count_not_aligned,
      historical_max_users_not_aligned
    FROM instance_metric_wave
    WHERE snapshot_month = DATE_TRUNC(MONTH, CURRENT_DATE)

), prep AS (

     SELECT DISTINCT
      marketing_contact.dim_marketing_contact_id,
      marketing_contact_role.marketing_contact_role,
      marketing_contact.email_address, 
      COALESCE(marketing_contact_role.namespace_id, 
               saas_namespace.dim_namespace_id, 
               saas_customer.dim_namespace_id, 
               saas_billing_account.dim_namespace_id)                                         AS dim_namespace_id,
      gitlab_namespaces.namespace_path,
      namespace_lineage.namespace_is_ultimate_parent                                          AS is_ultimate_parent_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'User' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_individual_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'Group' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_group_namespace,
      namespace_lineage.is_setup_for_company                                                  AS is_setup_for_company,
      namespace_project_visibility.does_namespace_have_public_project                         AS does_namespace_have_public_project,
      free_namespace_project_visibility.does_free_namespace_have_public_project               AS does_free_namespace_have_public_project,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'public', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_public,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'private', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_private,
      marketing_contact_role.customer_db_customer_id                                          AS customer_id,
      marketing_contact_role.zuora_billing_account_id                                         AS dim_billing_account_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.dim_subscription_id
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.dim_subscription_id
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.dim_subscription_id
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.dim_subscription_id
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.dim_subscription_id
      END                                                                                     AS dim_subscription_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_start_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_start_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_start_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_start_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_start_date
      END                                                                                     AS subscription_start_date,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_end_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_end_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_end_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_end_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_end_date
      END                                                                                     AS subscription_end_date,
      CASE 
        WHEN marketing_contact_role.namespace_id IS NOT NULL 
          AND saas_namespace.product_tier_name_namespace is NULL
          THEN 'SaaS - Free' 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Personal Namespace Owner'
                                                                , 'Group Namespace Owner'
                                                                , 'Group Namespace Member'
                                                                , 'Group Namespace Maintainer'
                                                              ) 
          THEN saas_namespace.product_tier_name_namespace
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN saas_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN saas_billing_account.product_tier_name_subscription     
      END                                                                                     AS saas_product_tier,
      CASE 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN self_managed_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN self_managed_billing_account.product_tier_name_subscription     
      END                                                                                     AS self_managed_product_tier,
      CASE 
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate' 
          OR saas_customer.order_is_trial = TRUE 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_trial,
      CASE 
        WHEN saas_customer.order_is_trial 
          THEN CAST(saas_customer.order_end_date AS DATE)
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate'
          THEN CAST(COALESCE(saas_namespace.saas_trial_expired_on, saas_namespace.order_end_date) AS DATE)
      END                                                                                     AS trial_end_date,    
      IFF(trial_end_date < CURRENT_DATE, CURRENT_DATE - trial_end_date, NULL)                 AS days_since_saas_trial_ended,
      {{ days_buckets('days_since_saas_trial_ended') }}                                       AS days_since_saas_trial_ended_bucket,
      CASE 
        WHEN trial_end_date IS NOT NULL AND CURRENT_DATE <= trial_end_date
          THEN trial_end_date - CURRENT_DATE
      END                                                                                     AS days_until_saas_trial_ends,
      {{ days_buckets('days_until_saas_trial_ends') }}                                        AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN saas_product_tier = 'SaaS - Free' 
          THEN 1
        ELSE 0
      END                                                                                     AS is_saas_free_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Bronze' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_bronze_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_premium_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_ultimate_tier,       
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Starter' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_starter_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_premium_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_ultimate_tier
    
    FROM marketing_contact_role 
    INNER JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = marketing_contact_role.dim_marketing_contact_id
    LEFT JOIN saas_namespace_subscription saas_namespace 
      ON saas_namespace.dim_namespace_id = marketing_contact_role.namespace_id
    LEFT JOIN saas_namespace_subscription saas_customer 
      ON saas_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN saas_namespace_subscription saas_billing_account 
      ON saas_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN self_managed_namespace_subscription self_managed_customer 
      ON self_managed_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN self_managed_namespace_subscription self_managed_billing_account 
      ON self_managed_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN namespace_lineage 
      ON namespace_lineage.dim_namespace_id = COALESCE(marketing_contact_role.namespace_id,
                                                   saas_namespace.dim_namespace_id,
                                                   saas_customer.dim_namespace_id,
                                                   saas_billing_account.dim_namespace_id)
    LEFT JOIN gitlab_namespaces 
      ON namespace_lineage.dim_namespace_id = gitlab_namespaces.namespace_id
    LEFT JOIN namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = namespace_project_visibility.dim_namespace_id
    LEFT JOIN free_namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = free_namespace_project_visibility.dim_namespace_id
      
), final AS (

    SELECT 
      prep.*,
      instance_metric_wave_aggregate.umau_28_days_user                                                                          AS usage_umau_28_days_user,
      instance_metric_wave_aggregate.action_monthly_active_users_project_repo_28_days_user                                      AS usage_action_monthly_active_users_project_repo_28_days_user,
      instance_metric_wave_aggregate.merge_requests_28_days_user                                                                AS usage_merge_requests_28_days_user,
      instance_metric_wave_aggregate.commit_comment_all_time_event                                                              AS usage_commit_comment_all_time_event,
      instance_metric_wave_aggregate.source_code_pushes_all_time_event                                                          AS usage_source_code_pushes_all_time_event,
      instance_metric_wave_aggregate.ci_pipelines_28_days_user                                                                  AS usage_ci_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_internal_pipelines_28_days_user                                                         AS usage_ci_internal_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_builds_28_days_user                                                                     AS usage_ci_builds_28_days_user,
      instance_metric_wave_aggregate.ci_builds_all_time_user                                                                    AS usage_ci_builds_all_time_user,
      instance_metric_wave_aggregate.ci_builds_all_time_event                                                                   AS usage_ci_builds_all_time_event,
      instance_metric_wave_aggregate.ci_runners_all_time_event                                                                  AS usage_ci_runners_all_time_event,
      instance_metric_wave_aggregate.auto_devops_enabled_all_time_event                                                         AS usage_auto_devops_enabled_all_time_event,
      instance_metric_wave_aggregate.template_repositories_all_time_event                                                       AS usage_template_repositories_all_time_event,
      instance_metric_wave_aggregate.ci_pipeline_config_repository_28_days_user                                                 AS usage_ci_pipeline_config_repository_28_days_user,
      instance_metric_wave_aggregate.user_unique_users_all_secure_scanners_28_days_user                                         AS usage_user_unique_users_all_secure_scanners_28_days_user,
      instance_metric_wave_aggregate.user_container_scanning_jobs_28_days_user                                                  AS usage_user_container_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_sast_jobs_28_days_user                                                                AS usage_user_sast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dast_jobs_28_days_user                                                                AS usage_user_dast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dependency_scanning_jobs_28_days_user                                                 AS usage_user_dependency_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_license_management_jobs_28_days_user                                                  AS usage_user_license_management_jobs_28_days_user,
      instance_metric_wave_aggregate.user_secret_detection_jobs_28_days_user                                                    AS usage_user_secret_detection_jobs_28_days_user,
      instance_metric_wave_aggregate.projects_with_packages_all_time_event                                                      AS usage_projects_with_packages_all_time_event,
      instance_metric_wave_aggregate.projects_with_packages_28_days_event                                                       AS usage_projects_with_packages_28_days_event,
      instance_metric_wave_aggregate.deployments_28_days_user                                                                   AS usage_deployments_28_days_user,
      instance_metric_wave_aggregate.releases_28_days_user                                                                      AS usage_releases_28_days_user,
      instance_metric_wave_aggregate.epics_28_days_user                                                                         AS usage_epics_28_days_user,
      instance_metric_wave_aggregate.issues_28_days_user                                                                        AS usage_issues_28_days_user,
      instance_metric_wave_aggregate.instance_user_count_not_aligned                                                            AS usage_instance_user_count_not_aligned,
      instance_metric_wave_aggregate.historical_max_users_not_aligned                                                           AS usage_historical_max_users_not_aligned
    FROM prep
    LEFT JOIN instance_metric_wave_aggregate
      ON instance_metric_wave_aggregate.dim_subscription_id = prep.dim_subscription_id

)
    

{{ dbt_audit(
    cte_ref="final",
    created_by="@trevor31",
    updated_by="@jpeguero",
    created_date="2021-02-04",
    updated_date="2022-10-17"
) }}19:T5329,



WITH marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), marketing_contact_role AS (

    SELECT * 
    FROM "PREP".sensitive.bdg_marketing_contact_role

), namespace_lineage AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), instance_metric_wave AS (

    SELECT * 
    FROM "PROD".common.fct_ping_instance_metric_wave_monthly

)

, namespace_project_visibility AS (

    SELECT
      dim_namespace_id,
      MAX(IFF(visibility_level = 'public', TRUE, FALSE)) AS does_namespace_have_public_project
    FROM project
    GROUP BY 1

), free_namespace_project_visibility AS (

    SELECT
      project.dim_namespace_id,
      MAX(IFF(namespace_lineage.gitlab_plan_title = 'Free' AND project.visibility_level = 'public', TRUE, FALSE)) AS does_free_namespace_have_public_project
    FROM project
    LEFT JOIN namespace_lineage
      ON project.dim_namespace_id = namespace_lineage.dim_namespace_id
    GROUP BY 1

), saas_namespace_subscription AS (
    
    SELECT *
    FROM "PROD".common.bdg_namespace_order_subscription
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), self_managed_namespace_subscription AS (
    
    SELECT *
    FROM "PROD".common.bdg_self_managed_order_subscription
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), instance_metric_wave_aggregate AS (

    SELECT 
      dim_subscription_id,
      umau_28_days_user,
      action_monthly_active_users_project_repo_28_days_user,
      merge_requests_28_days_user,
      commit_comment_all_time_event,
      source_code_pushes_all_time_event,
      ci_pipelines_28_days_user,
      ci_internal_pipelines_28_days_user,
      ci_builds_28_days_user,
      ci_builds_all_time_user,
      ci_builds_all_time_event,
      ci_runners_all_time_event,
      auto_devops_enabled_all_time_event,
      template_repositories_all_time_event,
      ci_pipeline_config_repository_28_days_user,
      user_unique_users_all_secure_scanners_28_days_user,
      user_container_scanning_jobs_28_days_user,
      user_sast_jobs_28_days_user,
      user_dast_jobs_28_days_user,
      user_dependency_scanning_jobs_28_days_user,
      user_license_management_jobs_28_days_user,
      user_secret_detection_jobs_28_days_user,
      projects_with_packages_all_time_event,
      projects_with_packages_28_days_event,
      deployments_28_days_user,
      releases_28_days_user,
      epics_28_days_user,
      issues_28_days_user,
      instance_user_count_not_aligned,
      historical_max_users_not_aligned
    FROM instance_metric_wave
    WHERE snapshot_month = DATE_TRUNC(MONTH, CURRENT_DATE)

), prep AS (

     SELECT DISTINCT
      marketing_contact.dim_marketing_contact_id,
      marketing_contact_role.marketing_contact_role,
      marketing_contact.email_address, 
      COALESCE(marketing_contact_role.namespace_id, 
               saas_namespace.dim_namespace_id, 
               saas_customer.dim_namespace_id, 
               saas_billing_account.dim_namespace_id)                                         AS dim_namespace_id,
      gitlab_namespaces.namespace_path,
      namespace_lineage.namespace_is_ultimate_parent                                          AS is_ultimate_parent_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'User' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_individual_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'Group' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_group_namespace,
      namespace_lineage.is_setup_for_company                                                  AS is_setup_for_company,
      namespace_project_visibility.does_namespace_have_public_project                         AS does_namespace_have_public_project,
      free_namespace_project_visibility.does_free_namespace_have_public_project               AS does_free_namespace_have_public_project,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'public', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_public,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'private', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_private,
      marketing_contact_role.customer_db_customer_id                                          AS customer_id,
      marketing_contact_role.zuora_billing_account_id                                         AS dim_billing_account_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.dim_subscription_id
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.dim_subscription_id
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.dim_subscription_id
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.dim_subscription_id
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.dim_subscription_id
      END                                                                                     AS dim_subscription_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_start_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_start_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_start_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_start_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_start_date
      END                                                                                     AS subscription_start_date,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_end_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_end_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_end_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_end_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_end_date
      END                                                                                     AS subscription_end_date,
      CASE 
        WHEN marketing_contact_role.namespace_id IS NOT NULL 
          AND saas_namespace.product_tier_name_namespace is NULL
          THEN 'SaaS - Free' 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Personal Namespace Owner'
                                                                , 'Group Namespace Owner'
                                                                , 'Group Namespace Member'
                                                                , 'Group Namespace Maintainer'
                                                              ) 
          THEN saas_namespace.product_tier_name_namespace
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN saas_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN saas_billing_account.product_tier_name_subscription     
      END                                                                                     AS saas_product_tier,
      CASE 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN self_managed_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN self_managed_billing_account.product_tier_name_subscription     
      END                                                                                     AS self_managed_product_tier,
      CASE 
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate' 
          OR saas_customer.order_is_trial = TRUE 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_trial,
      CASE 
        WHEN saas_customer.order_is_trial 
          THEN CAST(saas_customer.order_end_date AS DATE)
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate'
          THEN CAST(COALESCE(saas_namespace.saas_trial_expired_on, saas_namespace.order_end_date) AS DATE)
      END                                                                                     AS trial_end_date,    
      IFF(trial_end_date < CURRENT_DATE, CURRENT_DATE - trial_end_date, NULL)                 AS days_since_saas_trial_ended,
      CASE 
  WHEN days_since_saas_trial_ended BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_trial_ended BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_trial_ended BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_trial_ended BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_trial_ended BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_trial_ended BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_trial_ended BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_trial_ended BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_trial_ended BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_trial_ended BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_trial_ended BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_trial_ended > 1095
    THEN '[12] 3+ Years'
END                                       AS days_since_saas_trial_ended_bucket,
      CASE 
        WHEN trial_end_date IS NOT NULL AND CURRENT_DATE <= trial_end_date
          THEN trial_end_date - CURRENT_DATE
      END                                                                                     AS days_until_saas_trial_ends,
      CASE 
  WHEN days_until_saas_trial_ends BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_until_saas_trial_ends BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_until_saas_trial_ends BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_until_saas_trial_ends BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_until_saas_trial_ends BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_until_saas_trial_ends BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_until_saas_trial_ends BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_until_saas_trial_ends BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_until_saas_trial_ends BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_until_saas_trial_ends BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_until_saas_trial_ends BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_until_saas_trial_ends > 1095
    THEN '[12] 3+ Years'
END                                        AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN saas_product_tier = 'SaaS - Free' 
          THEN 1
        ELSE 0
      END                                                                                     AS is_saas_free_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Bronze' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_bronze_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_premium_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_ultimate_tier,       
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Starter' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_starter_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_premium_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_ultimate_tier
    
    FROM marketing_contact_role 
    INNER JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = marketing_contact_role.dim_marketing_contact_id
    LEFT JOIN saas_namespace_subscription saas_namespace 
      ON saas_namespace.dim_namespace_id = marketing_contact_role.namespace_id
    LEFT JOIN saas_namespace_subscription saas_customer 
      ON saas_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN saas_namespace_subscription saas_billing_account 
      ON saas_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN self_managed_namespace_subscription self_managed_customer 
      ON self_managed_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN self_managed_namespace_subscription self_managed_billing_account 
      ON self_managed_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN namespace_lineage 
      ON namespace_lineage.dim_namespace_id = COALESCE(marketing_contact_role.namespace_id,
                                                   saas_namespace.dim_namespace_id,
                                                   saas_customer.dim_namespace_id,
                                                   saas_billing_account.dim_namespace_id)
    LEFT JOIN gitlab_namespaces 
      ON namespace_lineage.dim_namespace_id = gitlab_namespaces.namespace_id
    LEFT JOIN namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = namespace_project_visibility.dim_namespace_id
    LEFT JOIN free_namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = free_namespace_project_visibility.dim_namespace_id
      
), final AS (

    SELECT 
      prep.*,
      instance_metric_wave_aggregate.umau_28_days_user                                                                          AS usage_umau_28_days_user,
      instance_metric_wave_aggregate.action_monthly_active_users_project_repo_28_days_user                                      AS usage_action_monthly_active_users_project_repo_28_days_user,
      instance_metric_wave_aggregate.merge_requests_28_days_user                                                                AS usage_merge_requests_28_days_user,
      instance_metric_wave_aggregate.commit_comment_all_time_event                                                              AS usage_commit_comment_all_time_event,
      instance_metric_wave_aggregate.source_code_pushes_all_time_event                                                          AS usage_source_code_pushes_all_time_event,
      instance_metric_wave_aggregate.ci_pipelines_28_days_user                                                                  AS usage_ci_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_internal_pipelines_28_days_user                                                         AS usage_ci_internal_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_builds_28_days_user                                                                     AS usage_ci_builds_28_days_user,
      instance_metric_wave_aggregate.ci_builds_all_time_user                                                                    AS usage_ci_builds_all_time_user,
      instance_metric_wave_aggregate.ci_builds_all_time_event                                                                   AS usage_ci_builds_all_time_event,
      instance_metric_wave_aggregate.ci_runners_all_time_event                                                                  AS usage_ci_runners_all_time_event,
      instance_metric_wave_aggregate.auto_devops_enabled_all_time_event                                                         AS usage_auto_devops_enabled_all_time_event,
      instance_metric_wave_aggregate.template_repositories_all_time_event                                                       AS usage_template_repositories_all_time_event,
      instance_metric_wave_aggregate.ci_pipeline_config_repository_28_days_user                                                 AS usage_ci_pipeline_config_repository_28_days_user,
      instance_metric_wave_aggregate.user_unique_users_all_secure_scanners_28_days_user                                         AS usage_user_unique_users_all_secure_scanners_28_days_user,
      instance_metric_wave_aggregate.user_container_scanning_jobs_28_days_user                                                  AS usage_user_container_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_sast_jobs_28_days_user                                                                AS usage_user_sast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dast_jobs_28_days_user                                                                AS usage_user_dast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dependency_scanning_jobs_28_days_user                                                 AS usage_user_dependency_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_license_management_jobs_28_days_user                                                  AS usage_user_license_management_jobs_28_days_user,
      instance_metric_wave_aggregate.user_secret_detection_jobs_28_days_user                                                    AS usage_user_secret_detection_jobs_28_days_user,
      instance_metric_wave_aggregate.projects_with_packages_all_time_event                                                      AS usage_projects_with_packages_all_time_event,
      instance_metric_wave_aggregate.projects_with_packages_28_days_event                                                       AS usage_projects_with_packages_28_days_event,
      instance_metric_wave_aggregate.deployments_28_days_user                                                                   AS usage_deployments_28_days_user,
      instance_metric_wave_aggregate.releases_28_days_user                                                                      AS usage_releases_28_days_user,
      instance_metric_wave_aggregate.epics_28_days_user                                                                         AS usage_epics_28_days_user,
      instance_metric_wave_aggregate.issues_28_days_user                                                                        AS usage_issues_28_days_user,
      instance_metric_wave_aggregate.instance_user_count_not_aligned                                                            AS usage_instance_user_count_not_aligned,
      instance_metric_wave_aggregate.historical_max_users_not_aligned                                                           AS usage_historical_max_users_not_aligned
    FROM prep
    LEFT JOIN instance_metric_wave_aggregate
      ON instance_metric_wave_aggregate.dim_subscription_id = prep.dim_subscription_id

)
    

SELECT
      *,
      '@trevor31'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-04'::DATE        AS model_created_date,
      '2022-10-17'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1a:Tbf3,Array of objects containing information related to each ultimate parent namespace that the marketing contact is directly related to. Each object inside the array is a different namespace.

For the trial fields in the objects, in case a namespace has had multiple trials only the latest one will be used to populate the fields. If a namespace never had a trials, these fields will not exist in the object.

Each object in the array contains the following fields (in case it does not, it means that the attribute is not applicable to that namespace):

- **Namespace_id**: Gitlab.com namespace_id of the namespace in question.
- **user_access_level**: Numerical value representing the access level the marketing user contact has to the namespace. Mapping of the numerical values can be seen [HERE](https://docs.gitlab.com/ee/api/access_requests.html).
- **user_access_level_name**: Name of the access level the marketing user contact has to the namespace.
- **gitlab_plan_title**: Plan of the namespace.
- **gitlab_plan_is_paid**: Flag indicating whether the namespace is paid or not.
- **is_setup_for_company**: Flag indicating whether the namespace was set up for company use or not.
- **current_member_count**: Number of members in the namespace
- **created_at**: Creation timestamp of the namespace.
- **creator_user_id**: The gitlab_dotcom_user_id of the creator of the namespace.
- **is_setup_for_company**: Flag indicating whether the namespace was set up for company use or not.
- **trial_start_date**: Trial start date of the namespace. 
- **trial_expired_date**: Date in which the trial expires/expired at. 
- **is_active_trial**: Flag that indicates whether the namespace is in an active trial. 
- **glm_content**: GLM content of the trial. 
- **glm_source**: GLM source of the trial. 
- **is_namespace_pql**: Flag indicating whether the namespace is part of the PQL program (Product Qualified Lead). 
- **list_of_stages**: Array listing all the stages adopted by the namespace during Trial and/or Free process. 
- **nbr_integrations_installed**: Number integrations installed in the namespace. 
- **integrations_installed**: Array listing all the integrations installed in the namespace. 
- **ptp_source**: Source of the propensity to purchase model. Currently, that can be from either PtPT (Propensity to Purchase: Trial) or PtPF (Propensity to Purchase: Free) models. 
- **ptp_score_date**: Date in which the ptp_score_group was calculated. 
- **ptp_score_group**: Score group for the namespace given by the PtP machine learning model. 
- **ptp_insights**: List of insights on the PtP scores. 
- **ptp_previous_score_group**: Previous score group for the namespace given by the PtP machine learning model. 
- **user_limit_notification_at**: Datetime detailing when the user limit notification happened for the namespace. 
- **user_limit_enforcement_at**: Datetime detailing when the user limit enforcement will happen for the namespace. 
- **is_impacted_by_user_limit**: Flag indicating whether the namespace is impacted by the user limits project.1b:T49a2,{{ config(
    materialized='table'
) }}

{{ simple_cte([
    ('dim_marketing_contact','dim_marketing_contact'),
    ('gitlab_dotcom_members_source','gitlab_dotcom_members_source'),
    ('dim_namespace', 'dim_namespace'),
    ('ptpt_scores', 'ptpt_scores'),
    ('ptpf_scores', 'ptpf_scores'),
    ('customers_db_trial_histories_source', 'customers_db_trial_histories_source'),
    ('gitlab_dotcom_namespace_details_source', 'gitlab_dotcom_namespace_details_source'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source'),

    ('gitlab_dotcom_memberships', 'gitlab_dotcom_memberships'),
    ('customers_db_trials', 'customers_db_trials'),
    ('customers_db_charges_xf', 'customers_db_charges_xf'),
    ('customers_db_leads', 'customers_db_leads_source'),
    ('map_gitlab_dotcom_xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
    ('services', 'gitlab_dotcom_integrations_source'),
    ('project', 'prep_project'),
    ('fct_event_user_daily', 'fct_event_user_daily')
]) }}

, ptpt_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), ptpt_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpt_score_dates
    LIMIT 1

), ptpf_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), ptpf_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpf_score_dates
    LIMIT 1

), namespace_user_mapping AS (

  SELECT DISTINCT
    gitlab_dotcom_members_source.user_id,
    gitlab_dotcom_members_source.source_id AS namespace_id,
    dim_namespace.ultimate_parent_namespace_id,
    gitlab_dotcom_members_source.access_level
  FROM gitlab_dotcom_members_source
  LEFT JOIN dim_namespace
    ON gitlab_dotcom_members_source.source_id = dim_namespace.dim_namespace_id
  WHERE gitlab_dotcom_members_source.is_currently_valid = TRUE
    AND gitlab_dotcom_members_source.member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('gitlab_dotcom_members_source', 'user_id') }}
    AND gitlab_dotcom_members_source.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_dotcom_members_source.user_id, gitlab_dotcom_members_source.source_id
    ORDER BY gitlab_dotcom_members_source.access_level DESC) = 1 -- There are less than 100 cases where a user has more than one access level to
    -- the same namespace. This selects the highest of said access levels

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    {{ dbt_utils.group_by(3) }}

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    {{ dbt_utils.group_by(7) }}
  
), pqls_filtered AS (

    SELECT
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION

    SELECT 
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), services_by_namespace AS (

    SELECT
      project.dim_namespace_id                                                                   AS dim_namespace_id,
      COUNT(*)                                                                                   AS nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    INNER JOIN namespaces
      ON namespaces.dim_namespace_id = project.dim_namespace_id
    GROUP BY 1

), pqls_by_user AS (

    SELECT DISTINCT user_id
    FROM pqls

)

-------------------------- End of PQL logic --------------------------

, stages_adopted_by_namespace AS (

  SELECT DISTINCT
    dim_namespace_id,
    list_of_stages,
    active_stage_count
  FROM stages_adopted

), namespace_details AS (

  SELECT
    namespace_user_mapping.user_id,
    dim_namespace.dim_namespace_id                                              AS namespace_id,
    namespace_user_mapping.access_level                                         AS user_access_level,
    CASE user_access_level
      WHEN 50 THEN 'Owner'
      WHEN 40 THEN 'Maintainer'
      WHEN 30 THEN 'Developer'
      WHEN 20 THEN 'Reporter'
      WHEN 10 THEN 'Guest'
      WHEN 5  THEN 'Minimal access'
      ELSE 'Other'
    END                                                                         AS user_access_level_name,

    dim_namespace.gitlab_plan_title,
    dim_namespace.gitlab_plan_is_paid,
    dim_namespace.is_setup_for_company,
    dim_namespace.current_member_count,
    dim_namespace.created_at                                                    AS created_at,
    dim_namespace.creator_id                                                    AS creator_user_id,

    customers_db_trial_histories_source.start_date                              AS trial_start_date,
    customers_db_trial_histories_source.expired_on                              AS trial_expired_date,
    IFF(CURRENT_DATE() >= trial_start_date AND CURRENT_DATE() <= COALESCE(trial_expired_date, CURRENT_DATE()), TRUE, FALSE) 
                                                                                AS is_active_trial,
    customers_db_trial_histories_source.glm_content,
    customers_db_trial_histories_source.glm_source,

    IFF(pqls_filtered.pql_namespace_id IS NOT NULL, TRUE, FALSE)                AS is_namespace_pql,

    stages_adopted_by_namespace.list_of_stages,
    stages_adopted_by_namespace.active_stage_count,
    services_by_namespace.nbr_integrations_installed,
    services_by_namespace.integrations_installed,

    
    CASE
      WHEN last_ptpt_scores.score_group >= 4
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group >= 4
        THEN 'Free'
      WHEN last_ptpt_scores.score_group IS NOT NULL
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group IS NOT NULL
        THEN 'Free'
      ELSE NULL
    END                                                                         AS ptp_source,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_date, last_ptpf_scores.score_date)
                                                                                AS ptp_score_date,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_group, last_ptpf_scores.score_group)
                                                                                AS ptp_score_group,
    IFF(ptp_source = 'Trial', last_ptpt_scores.insights, last_ptpf_scores.insights)
                                                                                AS ptp_insights,
    IFF(ptp_source = 'Trial', second_last_ptpt_scores.score_group, second_last_ptpf_scores.score_group)
                                                                                AS ptp_previous_score_group,

    gitlab_dotcom_namespace_details_source.dashboard_notification_at            AS user_limit_notification_at,
    gitlab_dotcom_namespace_details_source.dashboard_enforcement_at             AS user_limit_enforcement_at,
    IFF(user_limit_notification_at IS NOT NULL OR user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                                                            AS is_impacted_by_user_limit

  FROM namespace_user_mapping
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
    AND namespace_is_ultimate_parent = TRUE
  LEFT JOIN ptpt_last_dates
  LEFT JOIN ptpt_scores AS last_ptpt_scores
    ON last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpt_scores.score_date = ptpt_last_dates.last_score_date
  LEFT JOIN ptpt_scores AS second_last_ptpt_scores
    ON second_last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpt_scores.score_date = ptpt_last_dates.second_last_score_date
  LEFT JOIN ptpf_last_dates
  LEFT JOIN ptpf_scores AS last_ptpf_scores
    ON last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpf_scores.score_date = ptpf_last_dates.last_score_date
  LEFT JOIN ptpf_scores AS second_last_ptpf_scores
    ON second_last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpf_scores.score_date = ptpf_last_dates.second_last_score_date
  LEFT JOIN customers_db_trial_histories_source
    ON customers_db_trial_histories_source.gl_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN gitlab_dotcom_namespace_details_source
    ON gitlab_dotcom_namespace_details_source.namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN stages_adopted_by_namespace
    ON stages_adopted_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN pqls_filtered
    ON pqls_filtered.pql_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN services_by_namespace
    ON services_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id

), user_aggregated_namespace_details AS (

  SELECT 
    user_id,
    ARRAY_AGG(OBJECT_CONSTRUCT(*)) AS namespaces_array
  FROM namespace_details
  GROUP BY 1
  
), user_trials AS (

  SELECT
    user_id,
    MAX(trial_start_date) AS max_trial_start_date
  FROM namespace_details
  GROUP BY 1

  ), user_details_and_namespace_details AS (

  SELECT
    dim_marketing_contact.dim_marketing_contact_id,
    dim_marketing_contact.email_address,
    dim_marketing_contact.first_name,
    dim_marketing_contact.last_name,
    dim_marketing_contact.country,
    dim_marketing_contact.company_name,
    dim_marketing_contact.job_title,
    dim_marketing_contact.gitlab_dotcom_user_id,
    dim_marketing_contact.gitlab_user_name,
    dim_marketing_contact.gitlab_dotcom_active_state,
    dim_marketing_contact.gitlab_dotcom_confirmed_date,
    dim_marketing_contact.gitlab_dotcom_created_date,
    dim_marketing_contact.gitlab_dotcom_last_login_date,
    dim_marketing_contact.gitlab_dotcom_email_opted_in,
    IFF(pqls_by_user.user_id IS NOT NULL, TRUE, FALSE) AS is_pql,
    user_trials.max_trial_start_date,
    user_aggregated_namespace_details.namespaces_array

  FROM dim_marketing_contact
  LEFT JOIN user_aggregated_namespace_details
    ON dim_marketing_contact.gitlab_dotcom_user_id = user_aggregated_namespace_details.user_id
  LEFT JOIN pqls_by_user
    ON pqls_by_user.user_id = dim_marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN user_trials
    ON user_trials.user_id = dim_marketing_contact.gitlab_dotcom_user_id

  WHERE dim_marketing_contact.gitlab_dotcom_user_id IS NOT NULL
    AND (
      dim_marketing_contact.gitlab_dotcom_created_date::DATE >= '2022-06-01'
      OR user_trials.max_trial_start_date::DATE >= DATEADD('month', -3, CURRENT_DATE)
    )

)

{{ hash_diff(
    cte_ref="user_details_and_namespace_details",
    return_cte="final",
    columns=[
      'first_name',
      'last_name',
      'country',
      'company_name',
      'job_title',
      'gitlab_dotcom_user_id',
      'gitlab_user_name',
      'gitlab_dotcom_active_state',
      'gitlab_dotcom_confirmed_date',
      'gitlab_dotcom_created_date',
      'gitlab_dotcom_last_login_date',
      'gitlab_dotcom_email_opted_in',
      'is_pql',
      'max_trial_start_date',
      'namespaces_array'
      ]
) }}

SELECT *
FROM final1c:T502a,



WITH dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), gitlab_dotcom_members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), ptpt_scores AS (

    SELECT * 
    FROM "PROD".workspace_data_science.ptpt_scores

), ptpf_scores AS (

    SELECT * 
    FROM "PROD".workspace_data_science.ptpf_scores

), customers_db_trial_histories_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), gitlab_dotcom_namespace_details_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_details_source

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), gitlab_dotcom_memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), customers_db_trials AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_trials

), customers_db_charges_xf AS (

    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

), customers_db_leads AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), map_gitlab_dotcom_xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), services AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), fct_event_user_daily AS (

    SELECT * 
    FROM "PROD".common.fct_event_user_daily

)

, ptpt_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), ptpt_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpt_score_dates
    LIMIT 1

), ptpf_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), ptpf_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpf_score_dates
    LIMIT 1

), namespace_user_mapping AS (

  SELECT DISTINCT
    gitlab_dotcom_members_source.user_id,
    gitlab_dotcom_members_source.source_id AS namespace_id,
    dim_namespace.ultimate_parent_namespace_id,
    gitlab_dotcom_members_source.access_level
  FROM gitlab_dotcom_members_source
  LEFT JOIN dim_namespace
    ON gitlab_dotcom_members_source.source_id = dim_namespace.dim_namespace_id
  WHERE gitlab_dotcom_members_source.is_currently_valid = TRUE
    AND gitlab_dotcom_members_source.member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = gitlab_dotcom_members_source.user_id

    )
    AND gitlab_dotcom_members_source.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_dotcom_members_source.user_id, gitlab_dotcom_members_source.source_id
    ORDER BY gitlab_dotcom_members_source.access_level DESC) = 1 -- There are less than 100 cases where a user has more than one access level to
    -- the same namespace. This selects the highest of said access levels

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    group by 1,2,3

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    group by 1,2,3,4,5,6,7
  
), pqls_filtered AS (

    SELECT
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION

    SELECT 
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), services_by_namespace AS (

    SELECT
      project.dim_namespace_id                                                                   AS dim_namespace_id,
      COUNT(*)                                                                                   AS nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    INNER JOIN namespaces
      ON namespaces.dim_namespace_id = project.dim_namespace_id
    GROUP BY 1

), pqls_by_user AS (

    SELECT DISTINCT user_id
    FROM pqls

)

-------------------------- End of PQL logic --------------------------

, stages_adopted_by_namespace AS (

  SELECT DISTINCT
    dim_namespace_id,
    list_of_stages,
    active_stage_count
  FROM stages_adopted

), namespace_details AS (

  SELECT
    namespace_user_mapping.user_id,
    dim_namespace.dim_namespace_id                                              AS namespace_id,
    namespace_user_mapping.access_level                                         AS user_access_level,
    CASE user_access_level
      WHEN 50 THEN 'Owner'
      WHEN 40 THEN 'Maintainer'
      WHEN 30 THEN 'Developer'
      WHEN 20 THEN 'Reporter'
      WHEN 10 THEN 'Guest'
      WHEN 5  THEN 'Minimal access'
      ELSE 'Other'
    END                                                                         AS user_access_level_name,

    dim_namespace.gitlab_plan_title,
    dim_namespace.gitlab_plan_is_paid,
    dim_namespace.is_setup_for_company,
    dim_namespace.current_member_count,
    dim_namespace.created_at                                                    AS created_at,
    dim_namespace.creator_id                                                    AS creator_user_id,

    customers_db_trial_histories_source.start_date                              AS trial_start_date,
    customers_db_trial_histories_source.expired_on                              AS trial_expired_date,
    IFF(CURRENT_DATE() >= trial_start_date AND CURRENT_DATE() <= COALESCE(trial_expired_date, CURRENT_DATE()), TRUE, FALSE) 
                                                                                AS is_active_trial,
    customers_db_trial_histories_source.glm_content,
    customers_db_trial_histories_source.glm_source,

    IFF(pqls_filtered.pql_namespace_id IS NOT NULL, TRUE, FALSE)                AS is_namespace_pql,

    stages_adopted_by_namespace.list_of_stages,
    stages_adopted_by_namespace.active_stage_count,
    services_by_namespace.nbr_integrations_installed,
    services_by_namespace.integrations_installed,

    
    CASE
      WHEN last_ptpt_scores.score_group >= 4
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group >= 4
        THEN 'Free'
      WHEN last_ptpt_scores.score_group IS NOT NULL
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group IS NOT NULL
        THEN 'Free'
      ELSE NULL
    END                                                                         AS ptp_source,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_date, last_ptpf_scores.score_date)
                                                                                AS ptp_score_date,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_group, last_ptpf_scores.score_group)
                                                                                AS ptp_score_group,
    IFF(ptp_source = 'Trial', last_ptpt_scores.insights, last_ptpf_scores.insights)
                                                                                AS ptp_insights,
    IFF(ptp_source = 'Trial', second_last_ptpt_scores.score_group, second_last_ptpf_scores.score_group)
                                                                                AS ptp_previous_score_group,

    gitlab_dotcom_namespace_details_source.dashboard_notification_at            AS user_limit_notification_at,
    gitlab_dotcom_namespace_details_source.dashboard_enforcement_at             AS user_limit_enforcement_at,
    IFF(user_limit_notification_at IS NOT NULL OR user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                                                            AS is_impacted_by_user_limit

  FROM namespace_user_mapping
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
    AND namespace_is_ultimate_parent = TRUE
  LEFT JOIN ptpt_last_dates
  LEFT JOIN ptpt_scores AS last_ptpt_scores
    ON last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpt_scores.score_date = ptpt_last_dates.last_score_date
  LEFT JOIN ptpt_scores AS second_last_ptpt_scores
    ON second_last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpt_scores.score_date = ptpt_last_dates.second_last_score_date
  LEFT JOIN ptpf_last_dates
  LEFT JOIN ptpf_scores AS last_ptpf_scores
    ON last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpf_scores.score_date = ptpf_last_dates.last_score_date
  LEFT JOIN ptpf_scores AS second_last_ptpf_scores
    ON second_last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpf_scores.score_date = ptpf_last_dates.second_last_score_date
  LEFT JOIN customers_db_trial_histories_source
    ON customers_db_trial_histories_source.gl_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN gitlab_dotcom_namespace_details_source
    ON gitlab_dotcom_namespace_details_source.namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN stages_adopted_by_namespace
    ON stages_adopted_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN pqls_filtered
    ON pqls_filtered.pql_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN services_by_namespace
    ON services_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id

), user_aggregated_namespace_details AS (

  SELECT 
    user_id,
    ARRAY_AGG(OBJECT_CONSTRUCT(*)) AS namespaces_array
  FROM namespace_details
  GROUP BY 1
  
), user_trials AS (

  SELECT
    user_id,
    MAX(trial_start_date) AS max_trial_start_date
  FROM namespace_details
  GROUP BY 1

  ), user_details_and_namespace_details AS (

  SELECT
    dim_marketing_contact.dim_marketing_contact_id,
    dim_marketing_contact.email_address,
    dim_marketing_contact.first_name,
    dim_marketing_contact.last_name,
    dim_marketing_contact.country,
    dim_marketing_contact.company_name,
    dim_marketing_contact.job_title,
    dim_marketing_contact.gitlab_dotcom_user_id,
    dim_marketing_contact.gitlab_user_name,
    dim_marketing_contact.gitlab_dotcom_active_state,
    dim_marketing_contact.gitlab_dotcom_confirmed_date,
    dim_marketing_contact.gitlab_dotcom_created_date,
    dim_marketing_contact.gitlab_dotcom_last_login_date,
    dim_marketing_contact.gitlab_dotcom_email_opted_in,
    IFF(pqls_by_user.user_id IS NOT NULL, TRUE, FALSE) AS is_pql,
    user_trials.max_trial_start_date,
    user_aggregated_namespace_details.namespaces_array

  FROM dim_marketing_contact
  LEFT JOIN user_aggregated_namespace_details
    ON dim_marketing_contact.gitlab_dotcom_user_id = user_aggregated_namespace_details.user_id
  LEFT JOIN pqls_by_user
    ON pqls_by_user.user_id = dim_marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN user_trials
    ON user_trials.user_id = dim_marketing_contact.gitlab_dotcom_user_id

  WHERE dim_marketing_contact.gitlab_dotcom_user_id IS NOT NULL
    AND (
      dim_marketing_contact.gitlab_dotcom_created_date::DATE >= '2022-06-01'
      OR user_trials.max_trial_start_date::DATE >= DATEADD('month', -3, CURRENT_DATE)
    )

)



  , hashing AS (

    SELECT *,

      md5(cast(coalesce(cast(first_name as 
    varchar
), '') || '-' || coalesce(cast(last_name as 
    varchar
), '') || '-' || coalesce(cast(country as 
    varchar
), '') || '-' || coalesce(cast(company_name as 
    varchar
), '') || '-' || coalesce(cast(job_title as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_user_id as 
    varchar
), '') || '-' || coalesce(cast(gitlab_user_name as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_active_state as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_created_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_last_login_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_email_opted_in as 
    varchar
), '') || '-' || coalesce(cast(is_pql as 
    varchar
), '') || '-' || coalesce(cast(max_trial_start_date as 
    varchar
), '') || '-' || coalesce(cast(namespaces_array as 
    varchar
), '') as 
    varchar
)) as prev_hash

    FROM user_details_and_namespace_details

  ), final as (

      

        SELECT hashing.*,
          CASE
            WHEN hashing.prev_hash = t.prev_hash THEN last_changed
            ELSE CURRENT_TIMESTAMP()
          END AS last_changed
        FROM hashing
        LEFT JOIN "PREP".sensitive.poc_pump_marketing_contact_namespace_detail as t on t.prev_hash = hashing.prev_hash

      

  )


SELECT *
FROM final1d:T72d,{{ config(
    materialized='table',
    tags=["mnpi_exception"]
) }}

with 
memberships AS (
  SELECT *
  FROM {{ ref('gitlab_dotcom_memberships') }}
),

namespace AS (
  SELECT *
  FROM {{ ref('dim_namespace') }}
),

company_bridge AS (
  SELECT *
  FROM {{ ref('wk_bdg_user_company') }}
),

marketing_contact AS (
  SELECT *
  FROM {{ ref('dim_marketing_contact') }}
),

crm_company AS (
  SELECT *
  FROM {{ ref('dim_crm_account') }}
),

namespace_companies AS (
  SELECT
    memberships.user_id,
    memberships.user_type,
    memberships.membership_source_type,
    memberships.access_level,
    memberships.ultimate_parent_id,
    namespace.namespace_type,
    namespace.creator_id,
    CASE
      WHEN memberships.user_id = namespace.creator_id THEN 'creator'
      WHEN memberships.access_level = 50 AND memberships.membership_source_type = 'group_membership' THEN 'owner'
      WHEN memberships.access_level = 50 THEN 'owner'
      ELSE 'user'
    END AS relationship_type,
    IFF(namespace.creator_id = memberships.user_id, TRUE, FALSE) AS is_creator,
    IFF(access_level = 50, TRUE, FALSE) AS is_owner,
    company_bridge.company_id,
    COALESCE(marketing_contact.dim_crm_account_id, crm_company.dim_crm_account_id) AS crm_account_id
  FROM memberships
  LEFT JOIN namespace
    ON memberships.ultimate_parent_id = namespace.dim_namespace_id
  LEFT JOIN company_bridge
    ON memberships.user_id = company_bridge.gitlab_dotcom_user_id
  LEFT JOIN marketing_contact
    ON memberships.user_id = marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN crm_company
    ON company_bridge.company_id = crm_company.crm_account_zoom_info_dozisf_zi_id
  WHERE true
    and memberships.is_billable
  QUALIFY ROW_NUMBER() OVER (PARTITION BY ultimate_parent_id,user_id ORDER BY access_level DESC) = 1
)

SELECT *
FROM namespace_companies1e:T70d,

with 
memberships AS (
  SELECT *
  FROM "PROD".legacy.gitlab_dotcom_memberships
),

namespace AS (
  SELECT *
  FROM "PROD".common.dim_namespace
),

company_bridge AS (
  SELECT *
  FROM "PROD".workspace_marketing.wk_bdg_user_company
),

marketing_contact AS (
  SELECT *
  FROM "PREP".sensitive.dim_marketing_contact
),

crm_company AS (
  SELECT *
  FROM "PROD".restricted_safe_common.dim_crm_account
),

namespace_companies AS (
  SELECT
    memberships.user_id,
    memberships.user_type,
    memberships.membership_source_type,
    memberships.access_level,
    memberships.ultimate_parent_id,
    namespace.namespace_type,
    namespace.creator_id,
    CASE
      WHEN memberships.user_id = namespace.creator_id THEN 'creator'
      WHEN memberships.access_level = 50 AND memberships.membership_source_type = 'group_membership' THEN 'owner'
      WHEN memberships.access_level = 50 THEN 'owner'
      ELSE 'user'
    END AS relationship_type,
    IFF(namespace.creator_id = memberships.user_id, TRUE, FALSE) AS is_creator,
    IFF(access_level = 50, TRUE, FALSE) AS is_owner,
    company_bridge.company_id,
    COALESCE(marketing_contact.dim_crm_account_id, crm_company.dim_crm_account_id) AS crm_account_id
  FROM memberships
  LEFT JOIN namespace
    ON memberships.ultimate_parent_id = namespace.dim_namespace_id
  LEFT JOIN company_bridge
    ON memberships.user_id = company_bridge.gitlab_dotcom_user_id
  LEFT JOIN marketing_contact
    ON memberships.user_id = marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN crm_company
    ON company_bridge.company_id = crm_company.crm_account_zoom_info_dozisf_zi_id
  WHERE true
    and memberships.is_billable
  QUALIFY ROW_NUMBER() OVER (PARTITION BY ultimate_parent_id,user_id ORDER BY access_level DESC) = 1
)

SELECT *
FROM namespace_companies1f:T102e,{{ config(
    tags=["mnpi_exception"]
) }}

WITH namespaces AS (

  SELECT 
    creator_id,
    namespace_id
  FROM {{ref('gitlab_dotcom_namespaces_xf')}}

), user_preferences AS (

  SELECT 
    user_id,
    setup_for_company
  FROM {{ref('gitlab_dotcom_user_preferences')}}

), memberships AS (

  SELECT 
    user_id,
    ultimate_parent_id,
    is_billable
  FROM {{ref('gitlab_dotcom_memberships')}}

), users_xf AS (

  SELECT 
    user_id,
    first_name,
    last_name,
    users_name,
    notification_email
  FROM {{ref('gitlab_dotcom_users_xf')}}

), dim_marketing_contact AS (

  SELECT 
    gitlab_dotcom_user_id,
    email_address,
    dim_crm_account_id
  FROM {{ref('dim_marketing_contact')}}

), dim_crm_account AS (

  SELECT 
    crm_account_name,
    dim_crm_account_id,
    parent_crm_account_name
  FROM {{ref('dim_crm_account')}}
      
), is_user_in_company_namespace AS (

  SELECT DISTINCT 
    memberships.user_id
  FROM  namespaces 
  INNER JOIN user_preferences 
    ON user_preferences.user_id = namespaces.creator_id 
      AND user_preferences.setup_for_company = TRUE
  INNER JOIN memberships
    ON memberships.ultimate_parent_id = namespaces.namespace_id 
      AND memberships.is_billable = 'TRUE'
  
),  users AS ( 

  SELECT 
    users_xf.user_id                                                                                 AS row_integer,
    users_xf.first_name,
    users_xf.last_name, 
    users_xf.users_name,
    COALESCE(users_xf.notification_email, dim_marketing_contact.email_address)                       AS email_id,
    setup_for_company                                                                                AS internal_value1,
    CASE 
      WHEN is_user_in_company_namespace.user_id IS NOT NULL 
      THEN 1 
      ELSE 0 
    END                                                                                              AS internal_value2,
    dim_crm_account.crm_account_name                                                                 AS company_name, 
    dim_crm_account.parent_crm_account_name                                                          AS parent_company_name,
    CASE 
      WHEN email_id IS NULL 
      THEN 'missing' 
      WHEN RLIKE(SUBSTRING(email_id ,CHARINDEX('@', email_id ) +1, LEN(email_id ) - CHARINDEX('@', email_id )),'(yahoo)|(gmail)|(hotmail)|(rediff)|(outlook)|(verizon\\.net)|(live\\.)|(sbcglobal\\.net)|(laposte)|(pm\\.me)|(inbox)|(yandex)|(fastmail)|(protonmail)|(email\\.)|(att\\.net)|(posteo)|(rocketmail)|(bk\\.ru)') OR SUBSTRING(email_id ,CHARINDEX('@',email_id ) +1, LEN(email_id ) - CHARINDEX('@', email_id )) IN ('gmail.com','qq.com', 'hotmail.com','', 'yahoo.com','outlook.com','163.com','mail.ru','googlemail.com','yandex.ru', 'protonmail.com',  'icloud.com',  't-mobile.com','example.com',  'live.com', '126.com','me.com',  'gmx.de', 'hotmail.fr', 'web.de',  'google.com',  'yahoo.fr','naver.com', 'foxmail.com', 'aol.com', 'msn.com',  'hotmail.co.uk',   'ya.ru', 'wp.pl',   'gmx.net', 'live.fr','ymail.com',   'orange.fr',  'yahoo.co.uk',    'ancestry.com','free.fr', 'comcast.net', 'hotmail.de', 'mail.com', 'ukr.net',   'yahoo.co.jp',   'mac.com',  'yahoo.co.in',   'gitlab.com', 'yahoo.com.br','gitlab.localhost')  
      THEN 'personal_email' 
      ELSE 'business email' 
    END                                                                                              AS email_type 
  FROM users_xf
  LEFT JOIN user_preferences
    ON user_preferences.user_id = users_xf.user_id 
  LEFT JOIN dim_marketing_contact
   ON dim_marketing_contact.gitlab_dotcom_user_id = users_xf.user_id  
  LEFT JOIN dim_crm_account
   ON dim_crm_account.dim_crm_account_id = dim_marketing_contact.dim_crm_account_id
  LEFT JOIN is_user_in_company_namespace
   ON is_user_in_company_namespace.user_id = users_xf.user_id 


)
---- pulls all business email users or personal email users who have set up for company = True or belongs to a namespace where set up for company is true. 

SELECT *
FROM users
WHERE email_type = 'business email' OR (email_type  = 'personal_email' AND (internal_value1 = TRUE OR internal_value2 = 1))20:T1028,

WITH namespaces AS (

  SELECT 
    creator_id,
    namespace_id
  FROM "PROD".legacy.gitlab_dotcom_namespaces_xf

), user_preferences AS (

  SELECT 
    user_id,
    setup_for_company
  FROM "PROD".legacy.gitlab_dotcom_user_preferences

), memberships AS (

  SELECT 
    user_id,
    ultimate_parent_id,
    is_billable
  FROM "PROD".legacy.gitlab_dotcom_memberships

), users_xf AS (

  SELECT 
    user_id,
    first_name,
    last_name,
    users_name,
    notification_email
  FROM "PROD".legacy.gitlab_dotcom_users_xf

), dim_marketing_contact AS (

  SELECT 
    gitlab_dotcom_user_id,
    email_address,
    dim_crm_account_id
  FROM "PREP".sensitive.dim_marketing_contact

), dim_crm_account AS (

  SELECT 
    crm_account_name,
    dim_crm_account_id,
    parent_crm_account_name
  FROM "PROD".restricted_safe_common.dim_crm_account
      
), is_user_in_company_namespace AS (

  SELECT DISTINCT 
    memberships.user_id
  FROM  namespaces 
  INNER JOIN user_preferences 
    ON user_preferences.user_id = namespaces.creator_id 
      AND user_preferences.setup_for_company = TRUE
  INNER JOIN memberships
    ON memberships.ultimate_parent_id = namespaces.namespace_id 
      AND memberships.is_billable = 'TRUE'
  
),  users AS ( 

  SELECT 
    users_xf.user_id                                                                                 AS row_integer,
    users_xf.first_name,
    users_xf.last_name, 
    users_xf.users_name,
    COALESCE(users_xf.notification_email, dim_marketing_contact.email_address)                       AS email_id,
    setup_for_company                                                                                AS internal_value1,
    CASE 
      WHEN is_user_in_company_namespace.user_id IS NOT NULL 
      THEN 1 
      ELSE 0 
    END                                                                                              AS internal_value2,
    dim_crm_account.crm_account_name                                                                 AS company_name, 
    dim_crm_account.parent_crm_account_name                                                          AS parent_company_name,
    CASE 
      WHEN email_id IS NULL 
      THEN 'missing' 
      WHEN RLIKE(SUBSTRING(email_id ,CHARINDEX('@', email_id ) +1, LEN(email_id ) - CHARINDEX('@', email_id )),'(yahoo)|(gmail)|(hotmail)|(rediff)|(outlook)|(verizon\\.net)|(live\\.)|(sbcglobal\\.net)|(laposte)|(pm\\.me)|(inbox)|(yandex)|(fastmail)|(protonmail)|(email\\.)|(att\\.net)|(posteo)|(rocketmail)|(bk\\.ru)') OR SUBSTRING(email_id ,CHARINDEX('@',email_id ) +1, LEN(email_id ) - CHARINDEX('@', email_id )) IN ('gmail.com','qq.com', 'hotmail.com','', 'yahoo.com','outlook.com','163.com','mail.ru','googlemail.com','yandex.ru', 'protonmail.com',  'icloud.com',  't-mobile.com','example.com',  'live.com', '126.com','me.com',  'gmx.de', 'hotmail.fr', 'web.de',  'google.com',  'yahoo.fr','naver.com', 'foxmail.com', 'aol.com', 'msn.com',  'hotmail.co.uk',   'ya.ru', 'wp.pl',   'gmx.net', 'live.fr','ymail.com',   'orange.fr',  'yahoo.co.uk',    'ancestry.com','free.fr', 'comcast.net', 'hotmail.de', 'mail.com', 'ukr.net',   'yahoo.co.jp',   'mac.com',  'yahoo.co.in',   'gitlab.com', 'yahoo.com.br','gitlab.localhost')  
      THEN 'personal_email' 
      ELSE 'business email' 
    END                                                                                              AS email_type 
  FROM users_xf
  LEFT JOIN user_preferences
    ON user_preferences.user_id = users_xf.user_id 
  LEFT JOIN dim_marketing_contact
   ON dim_marketing_contact.gitlab_dotcom_user_id = users_xf.user_id  
  LEFT JOIN dim_crm_account
   ON dim_crm_account.dim_crm_account_id = dim_marketing_contact.dim_crm_account_id
  LEFT JOIN is_user_in_company_namespace
   ON is_user_in_company_namespace.user_id = users_xf.user_id 


)
---- pulls all business email users or personal email users who have set up for company = True or belongs to a namespace where set up for company is true. 

SELECT *
FROM users
WHERE email_type = 'business email' OR (email_type  = 'personal_email' AND (internal_value1 = TRUE OR internal_value2 = 1))21:T901,{{ config(
    materialized='table',
    tags=["mnpi_exception"]
) }}

/*
This table is a derived fct table from a future fct_membership.
This table has a grain of user_id->namespace_id->crm_account_id->company_id
This table assumes the highest access level for the user on the namespace
*/
{{ simple_cte([
    ('memberships','gitlab_dotcom_memberships'),
    ('namespace','dim_namespace'),
    ('company_bridge','wk_bdg_user_company'),
    ('marketing_contact','dim_marketing_contact'),
    ('access_levels','gitlab_dotcom_access_levels_source')
]) }},

namespace_companies_accounts AS (

  SELECT
    -- Primary Key
    {{ dbt_utils.surrogate_key(['memberships.user_id',
      'namespace.dim_namespace_id',
      'company_bridge.company_id',
      'marketing_contact.dim_crm_account_id']) }} AS user_namespace_account_company_pk,

    -- Foreign Keys
    {{ get_keyed_nulls(dbt_utils.surrogate_key(['memberships.user_id'])) }} AS dim_user_sk,
    {{ get_keyed_nulls(dbt_utils.surrogate_key(['namespace.dim_namespace_id'])) }} AS dim_namespace_sk,
    {{ get_keyed_nulls(dbt_utils.surrogate_key(['company_bridge.company_id'])) }} AS dim_company_sk,
    {{ get_keyed_nulls(dbt_utils.surrogate_key(['marketing_contact.dim_crm_account_id'])) }} AS dim_crm_account_sk,

    -- Legacy Keys
    memberships.user_id,
    namespace.dim_namespace_id AS namespace_id,
    company_bridge.company_id,
    marketing_contact.dim_crm_account_id AS crm_account_id,

    -- Degenerate Dimensions
    memberships.is_billable,
    memberships.access_level,
    access_levels.access_level_name,
    IFF(namespace.creator_id = memberships.user_id, TRUE, FALSE) AS is_creator,
    IFF(memberships.access_level = 50, TRUE, FALSE) AS is_owner

    -- Facts   

  FROM memberships
  LEFT JOIN namespace
    ON memberships.namespace_id = namespace.dim_namespace_id
  LEFT JOIN company_bridge
    ON memberships.user_id = company_bridge.gitlab_dotcom_user_id
  LEFT JOIN marketing_contact
    ON memberships.user_id = marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN access_levels
    ON memberships.access_level = access_levels.access_level_id
  QUALIFY ROW_NUMBER() OVER (PARTITION BY namespace.dim_namespace_id,
    memberships.user_id ORDER BY memberships.access_level DESC) = 1
)

SELECT *
FROM namespace_companies_accounts22:Taa4,

/*
This table is a derived fct table from a future fct_membership.
This table has a grain of user_id->namespace_id->crm_account_id->company_id
This table assumes the highest access level for the user on the namespace
*/


WITH memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), company_bridge AS (

    SELECT * 
    FROM "PROD".workspace_marketing.wk_bdg_user_company

), marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), access_levels AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_access_levels_source

),

namespace_companies_accounts AS (

  SELECT
    -- Primary Key
    md5(cast(coalesce(cast(memberships.user_id as 
    varchar
), '') || '-' || coalesce(cast(namespace.dim_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(company_bridge.company_id as 
    varchar
), '') || '-' || coalesce(cast(marketing_contact.dim_crm_account_id as 
    varchar
), '') as 
    varchar
)) AS user_namespace_account_company_pk,

    -- Foreign Keys
    

  COALESCE(md5(cast(coalesce(cast(memberships.user_id as 
    varchar
), '') as 
    varchar
)), MD5(-1)) 

 AS dim_user_sk,
    

  COALESCE(md5(cast(coalesce(cast(namespace.dim_namespace_id as 
    varchar
), '') as 
    varchar
)), MD5(-1)) 

 AS dim_namespace_sk,
    

  COALESCE(md5(cast(coalesce(cast(company_bridge.company_id as 
    varchar
), '') as 
    varchar
)), MD5(-1)) 

 AS dim_company_sk,
    

  COALESCE(md5(cast(coalesce(cast(marketing_contact.dim_crm_account_id as 
    varchar
), '') as 
    varchar
)), MD5(-1)) 

 AS dim_crm_account_sk,

    -- Legacy Keys
    memberships.user_id,
    namespace.dim_namespace_id AS namespace_id,
    company_bridge.company_id,
    marketing_contact.dim_crm_account_id AS crm_account_id,

    -- Degenerate Dimensions
    memberships.is_billable,
    memberships.access_level,
    access_levels.access_level_name,
    IFF(namespace.creator_id = memberships.user_id, TRUE, FALSE) AS is_creator,
    IFF(memberships.access_level = 50, TRUE, FALSE) AS is_owner

    -- Facts   

  FROM memberships
  LEFT JOIN namespace
    ON memberships.namespace_id = namespace.dim_namespace_id
  LEFT JOIN company_bridge
    ON memberships.user_id = company_bridge.gitlab_dotcom_user_id
  LEFT JOIN marketing_contact
    ON memberships.user_id = marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN access_levels
    ON memberships.access_level = access_levels.access_level_id
  QUALIFY ROW_NUMBER() OVER (PARTITION BY namespace.dim_namespace_id,
    memberships.user_id ORDER BY memberships.access_level DESC) = 1
)

SELECT *
FROM namespace_companies_accounts23:T94c,

WITH dim_marketing_contact AS (
  
    SELECT
      

    sha2(
        TRIM(
            LOWER(
                email_address || 
                ENCRYPT_RAW(
                  to_binary('SALT_EMAIL6', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS email_address_hash,


      "DIM_MARKETING_CONTACT_ID",
  "COMPANY_NAME",
  "JOB_TITLE",
  "IT_JOB_TITLE_HIERARCHY",
  "COUNTRY",
  "SFDC_PARENT_SALES_SEGMENT",
  "SFDC_PARENT_CRM_ACCOUNT_REGION",
  "MARKETO_LEAD_ID",
  "IS_MARKETO_LEAD",
  "IS_MARKETO_EMAIL_HARD_BOUNCED",
  "MARKETO_EMAIL_HARD_BOUNCED_DATE",
  "IS_MARKETO_UNSUBSCRIBED",
  "IS_MARKETO_OPTED_IN",
  "HAS_MARKETO_UNSUBSCRIBED",
  "MARKETO_COMPLIANCE_SEGMENT_VALUE",
  "IS_PQL_MARKETO",
  "IS_PAID_TIER_MARKETO",
  "IS_PTPT_CONTACT_MARKETO",
  "IS_PTP_CONTACT_MARKETO",
  "IS_IMPACTED_BY_USER_LIMIT_MARKETO",
  "IS_CURRENTLY_IN_TRIAL_MARKETO",
  "TRIAL_START_DATE_MARKETO",
  "TRIAL_END_DATE_MARKETO",
  "IS_SFDC_LEAD_CONTACT",
  "SFDC_RECORD_ID",
  "DIM_CRM_ACCOUNT_ID",
  "SFDC_LEAD_CONTACT",
  "SFDC_CREATED_DATE",
  "IS_SFDC_OPTED_OUT",
  "IS_GITLAB_DOTCOM_USER",
  "GITLAB_DOTCOM_USER_ID",
  "GITLAB_DOTCOM_CREATED_DATE",
  "GITLAB_DOTCOM_CONFIRMED_DATE",
  "GITLAB_DOTCOM_ACTIVE_STATE",
  "GITLAB_DOTCOM_LAST_LOGIN_DATE",
  "GITLAB_DOTCOM_EMAIL_OPTED_IN",
  "DAYS_SINCE_SAAS_SIGNUP",
  "DAYS_SINCE_SAAS_SIGNUP_BUCKET",
  "IS_CUSTOMER_DB_USER",
  "CUSTOMER_DB_CUSTOMER_ID",
  "CUSTOMER_DB_CREATED_DATE",
  "CUSTOMER_DB_CONFIRMED_DATE",
  "DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP",
  "DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET",
  "IS_ZUORA_BILLING_CONTACT",
  "ZUORA_CONTACT_ID",
  "ZUORA_CREATED_DATE",
  "ZUORA_ACTIVE_STATE",
  "DNC_LIST_RESULT",
  "WIP_IS_VALID_EMAIL_ADDRESS",
  "WIP_INVALID_EMAIL_ADDRESS_REASON"
    FROM "PREP".sensitive.dim_marketing_contact

)

SELECT
      *,
      '@jpeguero'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-04-06'::DATE        AS model_created_date,
      '2022-04-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM dim_marketing_contact24:T62c,WITH source AS (

    SELECT *
    FROM {{ source('customers', 'customers_db_customers') }}
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed25:T622,WITH source AS (

    SELECT *
    FROM "RAW".tap_postgres.customers_db_customers
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed26:T263e,{{ config(
    tags=["mnpi"]
) }}

/*

  ATTENTION: When a field is added to this live model, add it to the SFDC_ACCOUNT_SNAPSHOTS_SOURCE model to keep the live and snapshot models in alignment.

*/

WITH source AS (

  SELECT *
  FROM {{ source('salesforce', 'account') }}

),

renamed AS (

  SELECT
    id AS account_id,
    name AS account_name,

    -- keys
    account_id_18__c AS account_id_18,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    parentid AS parent_id,
    primary_contact_id__c AS primary_contact_id,
    recordtypeid AS record_type_id,
    ultimate_parent_account_id__c AS ultimate_parent_id,
    partner_vat_tax_id__c AS partner_vat_tax_id,


    -- key people GL side
    gitlab_com_user__c AS gitlab_com_user,
    account_manager__c AS account_manager,
    account_owner_calc__c AS account_owner,
    account_owner_team__c AS account_owner_team,
    proposed_account_owner__c AS proposed_account_owner,
    business_development_rep__c AS business_development_rep,
    dedicated_service_engineer__c AS dedicated_service_engineer,
    sdr_assigned__c AS sales_development_rep,
    -- solutions_architect__c                     AS solutions_architect,
    technical_account_manager_lu__c AS technical_account_manager_id,

    -- info
    "{{ this.database }}".{{ target.schema }}.ID15TO18(SUBSTRING(REGEXP_REPLACE(
      ultimate_parent_account__c, '_HL_ENCODED_/|<a\\s+href="/', ''
      ), 0, 15)) AS ultimate_parent_account_id,
    ultimate_parent_account_text__c AS ultimate_parent_account_name,
    type AS account_type,
    dfox_industry__c AS df_industry,
    parent_lam_industry_acct_heirarchy__c AS industry,
    sub_industry__c AS sub_industry,
    parent_lam_industry_acct_heirarchy__c AS parent_account_industry_hierarchy,
    account_tier__c AS account_tier,
    account_tier_notes__c AS account_tier_notes,
    customer_since__c::DATE AS customer_since_date,
    carr_this_account__c AS carr_this_account,
    carr_acct_family__c AS carr_account_family,
    next_renewal_date__c AS next_renewal_date,
    license_utilization__c AS license_utilization,
    support_level__c AS support_level,
    named_account__c AS named_account,
    billingcountry AS billing_country,
    account_demographics_upa_country__c AS billing_country_code,
    billingpostalcode AS billing_postal_code,
    sdr_target_account__c::BOOLEAN AS is_sdr_target_account,
    lam_tier__c AS lam,
    lam_dev_count__c AS lam_dev_count,
    jihu_account__c::BOOLEAN AS is_jihu_account,
    partners_signed_contract_date__c AS partners_signed_contract_date,
    partner_account_iban_number__c AS partner_account_iban_number,
    partners_partner_type__c AS partner_type,
    partners_partner_status__c AS partner_status,
    bdr_prospecting_status__c AS bdr_prospecting_status,
    first_order_available__c::BOOLEAN AS is_first_order_available,
    REPLACE(
      zi_technologies__c,
      'The technologies that are used and not used at this account, according to ZoomInfo, after completing a scan are:', -- noqa:L016
      ''
    ) AS zi_technologies,
    technical_account_manager_date__c::DATE AS technical_account_manager_date,
    gitlab_customer_success_project__c::VARCHAR AS gitlab_customer_success_project,
    forbes_2000_rank__c AS forbes_2000_rank,
    potential_users__c AS potential_users,
    number_of_licenses_this_account__c AS number_of_licenses_this_account,
    decision_maker_count_linkedin__c AS decision_maker_count_linkedin,
    numberofemployees                AS number_of_employees,
    phone AS account_phone,
    zi_phone__c AS zoominfo_account_phone,
    number_of_employees_manual_source_admin__c AS admin_manual_source_number_of_employees,
    account_address_manual_source_admin__c AS admin_manual_source_account_address,

    -- account demographics fields

    -- Add sales_segment_cleaning macro to avoid duplication in downstream models
    {{sales_segment_cleaning('account_demographics_sales_segment__c')}} AS account_sales_segment,
    account_demographics_geo__c AS account_geo,
    account_demographics_region__c AS account_region,
    account_demographics_area__c AS account_area,
    account_demographics_territory__c AS account_territory,
    account_demographics_business_unit__c AS account_business_unit,
    account_demographics_role_type__c AS account_role_type,
    account_demographics_employee_count__c AS account_employee_count,
    account_demographic_max_family_employees__c AS account_max_family_employee,
    account_demographics_upa_country__c AS account_upa_country,
    account_demographics_upa_state__c AS account_upa_state,
    account_demographics_upa_city__c AS account_upa_city,
    account_demographics_upa_street__c AS account_upa_street,
    account_demographics_upa_postal_code__c AS account_upa_postal_code,

    -- present state info
    gs_health_score__c AS health_number,
    gs_health_score_color__c AS health_score_color,

    -- opportunity metrics
    count_of_active_subscription_charges__c AS count_active_subscription_charges,
    count_of_active_subscriptions__c AS count_active_subscriptions,
    count_of_billing_accounts__c AS count_billing_accounts,
    license_user_count__c AS count_licensed_users,
    count_of_new_business_won_opps__c AS count_of_new_business_won_opportunities,
    count_of_open_renewal_opportunities__c AS count_open_renewal_opportunities,
    count_of_opportunities__c AS count_opportunities,
    count_of_products_purchased__c AS count_products_purchased,
    count_of_won_opportunities__c AS count_won_opportunities,
    concurrent_ee_subscriptions__c AS count_concurrent_ee_subscriptions,
    ce_instances__c AS count_ce_instances,
    active_ce_users__c AS count_active_ce_users,
    number_of_open_opportunities__c AS count_open_opportunities,
    using_ce__c AS count_using_ce,

    --account based marketing fields
    abm_tier__c AS abm_tier,
    gtm_strategy__c AS gtm_strategy,
    gtm_acceleration_date__c AS gtm_acceleration_date,
    gtm_account_based_date__c AS gtm_account_based_date,
    gtm_account_centric_date__c AS gtm_account_centric_date,
    abm_tier_1_date__c AS abm_tier_1_date,
    abm_tier_2_date__c AS abm_tier_2_date,
    abm_tier_3_date__c AS abm_tier_3_date,

    --demandbase fields
    account_list__c AS demandbase_account_list,
    intent__c AS demandbase_intent,
    page_views__c AS demandbase_page_views,
    score__c AS demandbase_score,
    sessions__c AS demandbase_sessions,
    trending_offsite_intent__c AS demandbase_trending_offsite_intent,
    trending_onsite_engagement__c AS demandbase_trending_onsite_engagement,

    -- sales segment fields
    account_demographics_sales_segment__c AS ultimate_parent_sales_segment,
    sales_segmentation_new__c AS division_sales_segment,
    account_owner_user_segment__c AS account_owner_user_segment,
    ultimate_parent_sales_segment_employees__c AS sales_segment,
    sales_segmentation_new__c AS account_segment,

    locally_managed__c AS is_locally_managed_account,
    strategic__c AS is_strategic_account,

    -- ************************************
    -- New SFDC Account Fields for FY22 Planning
    next_fy_account_owner_temp__c AS next_fy_account_owner_temp,
    next_fy_planning_notes_temp__c AS next_fy_planning_notes_temp,
    --*************************************
    -- Partner Account fields
    partner_track__c AS partner_track,
    partners_partner_type__c AS partners_partner_type,
    gitlab_partner_programs__c AS gitlab_partner_program,
    focus_partner__c AS is_focus_partner,

    --*************************************
    -- Zoom Info Fields
    zi_account_name__c AS zoom_info_company_name,
    zi_revenue__c AS zoom_info_company_revenue,
    zi_employees__c AS zoom_info_company_employee_count,
    zi_industry__c AS zoom_info_company_industry,
    zi_city__c AS zoom_info_company_city,
    zi_state_province__c AS zoom_info_company_state_province,
    zi_country__c AS zoom_info_company_country,
    exclude_from_zoominfo_enrich__c AS is_excluded_from_zoom_info_enrich,
    zi_website__c AS zoom_info_website,
    zi_company_other_domains__c AS zoom_info_company_other_domains,
    dozisf__zoominfo_id__c AS zoom_info_dozisf_zi_id,
    zi_parent_company_zoominfo_id__c AS zoom_info_parent_company_zi_id,
    zi_parent_company_name__c AS zoom_info_parent_company_name,
    zi_ultimate_parent_company_zoominfo_id__c AS zoom_info_ultimate_parent_company_zi_id,
    zi_ultimate_parent_company_name__c AS zoom_info_ultimate_parent_company_name,
    zi_number_of_developers__c AS zoom_info_number_of_developers,
    zi_total_funding__c AS zoom_info_total_funding,

    -- NF: Added on 20220427 to support EMEA reporting
    key_account__c                     AS is_key_account,

    -- Gainsight Fields
    gs_first_value_date__c AS gs_first_value_date,
    gs_last_tam_activity_date__c AS gs_last_csm_activity_date,
    eoa_sentiment__c AS eoa_sentiment,
    gs_health_user_engagement__c AS gs_health_user_engagement,
    gs_health_cd__c AS gs_health_cd,
    gs_health_devsecops__c AS gs_health_devsecops,
    gs_health_ci__c AS gs_health_ci,
    gs_health_scm__c AS gs_health_scm,

    -- Risk Fields
    risk_impact__c AS risk_impact,
    risk_reason__c AS risk_reason,
    last_timeline_at_risk_update__c AS last_timeline_at_risk_update,
    last_at_risk_update_comments__c AS last_at_risk_update_comments,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    lastactivitydate AS last_activity_date,
    CONVERT_TIMEZONE(
      'America/Los_Angeles', CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP())
    ) AS _last_dbt_run,
    systemmodstamp

  FROM source
)

SELECT *
FROM renamed27:T28a7,

/*

  ATTENTION: When a field is added to this live model, add it to the SFDC_ACCOUNT_SNAPSHOTS_SOURCE model to keep the live and snapshot models in alignment.

*/

WITH source AS (

  SELECT *
  FROM "RAW".salesforce_stitch.account

),

renamed AS (

  SELECT
    id AS account_id,
    name AS account_name,

    -- keys
    account_id_18__c AS account_id_18,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    parentid AS parent_id,
    primary_contact_id__c AS primary_contact_id,
    recordtypeid AS record_type_id,
    ultimate_parent_account_id__c AS ultimate_parent_id,
    partner_vat_tax_id__c AS partner_vat_tax_id,


    -- key people GL side
    gitlab_com_user__c AS gitlab_com_user,
    account_manager__c AS account_manager,
    account_owner_calc__c AS account_owner,
    account_owner_team__c AS account_owner_team,
    proposed_account_owner__c AS proposed_account_owner,
    business_development_rep__c AS business_development_rep,
    dedicated_service_engineer__c AS dedicated_service_engineer,
    sdr_assigned__c AS sales_development_rep,
    -- solutions_architect__c                     AS solutions_architect,
    technical_account_manager_lu__c AS technical_account_manager_id,

    -- info
    "PREP".preparation.ID15TO18(SUBSTRING(REGEXP_REPLACE(
      ultimate_parent_account__c, '_HL_ENCODED_/|<a\\s+href="/', ''
      ), 0, 15)) AS ultimate_parent_account_id,
    ultimate_parent_account_text__c AS ultimate_parent_account_name,
    type AS account_type,
    dfox_industry__c AS df_industry,
    parent_lam_industry_acct_heirarchy__c AS industry,
    sub_industry__c AS sub_industry,
    parent_lam_industry_acct_heirarchy__c AS parent_account_industry_hierarchy,
    account_tier__c AS account_tier,
    account_tier_notes__c AS account_tier_notes,
    customer_since__c::DATE AS customer_since_date,
    carr_this_account__c AS carr_this_account,
    carr_acct_family__c AS carr_account_family,
    next_renewal_date__c AS next_renewal_date,
    license_utilization__c AS license_utilization,
    support_level__c AS support_level,
    named_account__c AS named_account,
    billingcountry AS billing_country,
    account_demographics_upa_country__c AS billing_country_code,
    billingpostalcode AS billing_postal_code,
    sdr_target_account__c::BOOLEAN AS is_sdr_target_account,
    lam_tier__c AS lam,
    lam_dev_count__c AS lam_dev_count,
    jihu_account__c::BOOLEAN AS is_jihu_account,
    partners_signed_contract_date__c AS partners_signed_contract_date,
    partner_account_iban_number__c AS partner_account_iban_number,
    partners_partner_type__c AS partner_type,
    partners_partner_status__c AS partner_status,
    bdr_prospecting_status__c AS bdr_prospecting_status,
    first_order_available__c::BOOLEAN AS is_first_order_available,
    REPLACE(
      zi_technologies__c,
      'The technologies that are used and not used at this account, according to ZoomInfo, after completing a scan are:', -- noqa:L016
      ''
    ) AS zi_technologies,
    technical_account_manager_date__c::DATE AS technical_account_manager_date,
    gitlab_customer_success_project__c::VARCHAR AS gitlab_customer_success_project,
    forbes_2000_rank__c AS forbes_2000_rank,
    potential_users__c AS potential_users,
    number_of_licenses_this_account__c AS number_of_licenses_this_account,
    decision_maker_count_linkedin__c AS decision_maker_count_linkedin,
    numberofemployees                AS number_of_employees,
    phone AS account_phone,
    zi_phone__c AS zoominfo_account_phone,
    number_of_employees_manual_source_admin__c AS admin_manual_source_number_of_employees,
    account_address_manual_source_admin__c AS admin_manual_source_account_address,

    -- account demographics fields

    -- Add sales_segment_cleaning macro to avoid duplication in downstream models
    CASE WHEN LOWER(account_demographics_sales_segment__c) = 'smb' THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(account_demographics_sales_segment__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) IS NULL THEN 'SMB'
     WHEN LOWER(account_demographics_sales_segment__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(account_demographics_sales_segment__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(account_demographics_sales_segment__c) = 'lrg' THEN 'Large'
     WHEN LOWER(account_demographics_sales_segment__c) = 'jihu' THEN 'JiHu'
     WHEN account_demographics_sales_segment__c IS NOT NULL THEN initcap(account_demographics_sales_segment__c)
END AS account_sales_segment,
    account_demographics_geo__c AS account_geo,
    account_demographics_region__c AS account_region,
    account_demographics_area__c AS account_area,
    account_demographics_territory__c AS account_territory,
    account_demographics_business_unit__c AS account_business_unit,
    account_demographics_role_type__c AS account_role_type,
    account_demographics_employee_count__c AS account_employee_count,
    account_demographic_max_family_employees__c AS account_max_family_employee,
    account_demographics_upa_country__c AS account_upa_country,
    account_demographics_upa_state__c AS account_upa_state,
    account_demographics_upa_city__c AS account_upa_city,
    account_demographics_upa_street__c AS account_upa_street,
    account_demographics_upa_postal_code__c AS account_upa_postal_code,

    -- present state info
    gs_health_score__c AS health_number,
    gs_health_score_color__c AS health_score_color,

    -- opportunity metrics
    count_of_active_subscription_charges__c AS count_active_subscription_charges,
    count_of_active_subscriptions__c AS count_active_subscriptions,
    count_of_billing_accounts__c AS count_billing_accounts,
    license_user_count__c AS count_licensed_users,
    count_of_new_business_won_opps__c AS count_of_new_business_won_opportunities,
    count_of_open_renewal_opportunities__c AS count_open_renewal_opportunities,
    count_of_opportunities__c AS count_opportunities,
    count_of_products_purchased__c AS count_products_purchased,
    count_of_won_opportunities__c AS count_won_opportunities,
    concurrent_ee_subscriptions__c AS count_concurrent_ee_subscriptions,
    ce_instances__c AS count_ce_instances,
    active_ce_users__c AS count_active_ce_users,
    number_of_open_opportunities__c AS count_open_opportunities,
    using_ce__c AS count_using_ce,

    --account based marketing fields
    abm_tier__c AS abm_tier,
    gtm_strategy__c AS gtm_strategy,
    gtm_acceleration_date__c AS gtm_acceleration_date,
    gtm_account_based_date__c AS gtm_account_based_date,
    gtm_account_centric_date__c AS gtm_account_centric_date,
    abm_tier_1_date__c AS abm_tier_1_date,
    abm_tier_2_date__c AS abm_tier_2_date,
    abm_tier_3_date__c AS abm_tier_3_date,

    --demandbase fields
    account_list__c AS demandbase_account_list,
    intent__c AS demandbase_intent,
    page_views__c AS demandbase_page_views,
    score__c AS demandbase_score,
    sessions__c AS demandbase_sessions,
    trending_offsite_intent__c AS demandbase_trending_offsite_intent,
    trending_onsite_engagement__c AS demandbase_trending_onsite_engagement,

    -- sales segment fields
    account_demographics_sales_segment__c AS ultimate_parent_sales_segment,
    sales_segmentation_new__c AS division_sales_segment,
    account_owner_user_segment__c AS account_owner_user_segment,
    ultimate_parent_sales_segment_employees__c AS sales_segment,
    sales_segmentation_new__c AS account_segment,

    locally_managed__c AS is_locally_managed_account,
    strategic__c AS is_strategic_account,

    -- ************************************
    -- New SFDC Account Fields for FY22 Planning
    next_fy_account_owner_temp__c AS next_fy_account_owner_temp,
    next_fy_planning_notes_temp__c AS next_fy_planning_notes_temp,
    --*************************************
    -- Partner Account fields
    partner_track__c AS partner_track,
    partners_partner_type__c AS partners_partner_type,
    gitlab_partner_programs__c AS gitlab_partner_program,
    focus_partner__c AS is_focus_partner,

    --*************************************
    -- Zoom Info Fields
    zi_account_name__c AS zoom_info_company_name,
    zi_revenue__c AS zoom_info_company_revenue,
    zi_employees__c AS zoom_info_company_employee_count,
    zi_industry__c AS zoom_info_company_industry,
    zi_city__c AS zoom_info_company_city,
    zi_state_province__c AS zoom_info_company_state_province,
    zi_country__c AS zoom_info_company_country,
    exclude_from_zoominfo_enrich__c AS is_excluded_from_zoom_info_enrich,
    zi_website__c AS zoom_info_website,
    zi_company_other_domains__c AS zoom_info_company_other_domains,
    dozisf__zoominfo_id__c AS zoom_info_dozisf_zi_id,
    zi_parent_company_zoominfo_id__c AS zoom_info_parent_company_zi_id,
    zi_parent_company_name__c AS zoom_info_parent_company_name,
    zi_ultimate_parent_company_zoominfo_id__c AS zoom_info_ultimate_parent_company_zi_id,
    zi_ultimate_parent_company_name__c AS zoom_info_ultimate_parent_company_name,
    zi_number_of_developers__c AS zoom_info_number_of_developers,
    zi_total_funding__c AS zoom_info_total_funding,

    -- NF: Added on 20220427 to support EMEA reporting
    key_account__c                     AS is_key_account,

    -- Gainsight Fields
    gs_first_value_date__c AS gs_first_value_date,
    gs_last_tam_activity_date__c AS gs_last_csm_activity_date,
    eoa_sentiment__c AS eoa_sentiment,
    gs_health_user_engagement__c AS gs_health_user_engagement,
    gs_health_cd__c AS gs_health_cd,
    gs_health_devsecops__c AS gs_health_devsecops,
    gs_health_ci__c AS gs_health_ci,
    gs_health_scm__c AS gs_health_scm,

    -- Risk Fields
    risk_impact__c AS risk_impact,
    risk_reason__c AS risk_reason,
    last_timeline_at_risk_update__c AS last_timeline_at_risk_update,
    last_at_risk_update_comments__c AS last_at_risk_update_comments,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    lastactivitydate AS last_activity_date,
    CONVERT_TIMEZONE(
      'America/Los_Angeles', CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP())
    ) AS _last_dbt_run,
    systemmodstamp

  FROM source
)

SELECT *
FROM renamed28:Te2f,{{ config({
    "alias": "zuora_account_source"
}) }}

-- depends_on: {{ ref('zuora_excluded_accounts') }}
WITH source AS (

    SELECT *
    FROM {{ source('zuora', 'account') }}

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("{{this.database}}".{{target.schema}}.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed29:Tde2,

-- depends_on: "PROD".legacy.zuora_excluded_accounts
WITH source AS (

    SELECT *
    FROM "RAW".zuora_stitch.account

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("PREP".preparation.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed2a:T1d73,WITH source AS (

  SELECT *
  FROM {{ source('salesforce', 'contact') }}



),

renamed AS (

  SELECT
    -- id
    id AS contact_id,
    name AS contact_name,
    firstname AS contact_first_name,
    lastname AS contact_last_name,
    email AS contact_email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    {{ email_domain_type("split_part(email,'@',2)", 'leadsource') }} AS email_domain_type,

    -- keys
    accountid AS account_id,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    recordtypeid AS record_type_id,
    reportstoid AS reports_to_id,

    --contact info
    title AS contact_title,
    {{ it_job_title_hierarchy('title') }},
    role__c AS contact_role,
    mobilephone AS mobile_phone,
    mkto71_lead_score__c AS person_score,

    department AS department,
    contact_status__c AS contact_status,
    requested_contact__c AS requested_contact,
    inactive_contact__c AS inactive_contact,
    hasoptedoutofemail AS has_opted_out_email,
    invalid_email_address__c AS invalid_email_address,
    isemailbounced AS email_is_bounced,
    emailbounceddate AS email_bounced_date,
    emailbouncedreason AS email_bounced_reason,

    mailingstreet AS mailing_address,
    mailingcity AS mailing_city,
    mailingstate AS mailing_state,
    mailingstatecode AS mailing_state_code,
    mailingcountry AS mailing_country,
    mailingcountrycode AS mailing_country_code,
    mailingpostalcode AS mailing_zip_code,

    -- info
    dozisf__zoominfo_company_id__c AS zoominfo_company_id,
    dozisf__zoominfo_id__c AS zoominfo_contact_id,
    zi_company_revenue__c AS zoominfo_company_revenue,
    zi_employee_count__c AS zoominfo_company_employee_count,
    cognism_number_of_employees__c AS cognism_employee_count,
    zi_contact_city__c AS zoominfo_contact_city,
    zi_company_city__c AS zoominfo_company_city,
    zi_industry__c AS zoominfo_company_industry,
    zi_company_state__c AS zoominfo_company_state,
    zi_contact_state__c AS zoominfo_contact_state,
    zi_company_country__c AS zoominfo_company_country,
    zi_contact_country__c AS zoominfo_contact_country,
    zi_phone_number__c AS zoominfo_phone_number, 
    zi_mobile_phone_number__c AS zoominfo_mobile_phone_number,
    zi_do_not_call_direct_phone__c AS zoominfo_do_not_call_direct_phone,
    zi_do_not_call_mobile_phone__c AS zoominfo_do_not_call_mobile_phone,
    using_ce__c AS using_ce,
    ee_trial_start_date__c AS ee_trial_start_date,
    ee_trial_end_date__c AS ee_trial_end_date,
    industry__c AS industry,
    -- maybe we can exclude this if it's not relevant
    responded_to_githost_price_change__c AS responded_to_githost_price_change,
    core_check_in_notes__c AS core_check_in_notes,
    leadsource AS lead_source,
    lead_source_type__c AS lead_source_type,
    behavior_score__c AS behavior_score,
    outreach_stage__c AS outreach_stage,
    sequence_step_number__c AS outreach_step_number,
    account_type__c AS account_type,
    contact_assigned_datetime__c::TIMESTAMP AS assigned_datetime,
    mql_timestamp__c AS marketo_qualified_lead_timestamp,
    mql_datetime__c AS marketo_qualified_lead_datetime,
    mql_date__c AS marketo_qualified_lead_date,
    mql_datetime_inferred__c AS mql_datetime_inferred,
    inquiry_datetime__c AS inquiry_datetime,
    inquiry_datetime_inferred__c AS inquiry_datetime_inferred,
    accepted_datetime__c AS accepted_datetime,
    qualifying_datetime__c AS qualifying_datetime,
    qualified_datetime__c AS qualified_datetime,
    unqualified_datetime__c AS unqualified_datetime,
    nurture_datetime__c AS nurture_datetime,
    bad_data_datetime__c AS bad_data_datetime,
    worked_date__c AS worked_datetime,
    web_portal_purchase_datetime__c AS web_portal_purchase_datetime,
    mkto_si__last_interesting_moment__c AS marketo_last_interesting_moment,
    mkto_si__last_interesting_moment_date__c AS marketo_last_interesting_moment_date,
    last_utm_campaign__c AS last_utm_campaign,
    last_utm_content__c AS last_utm_content,
    vartopiadrs__partner_prospect_acceptance__c AS prospect_share_status,
    vartopiadrs__partner_prospect_status__c AS partner_prospect_status,
    vartopiadrs__vartopia_prospect_id__c AS partner_prospect_id,
    vartopiadrs__partner_prospect_owner_name__c AS partner_prospect_owner_name,
    sequence_step_type2__c AS sequence_step_type,
    name_of_active_sequence__c AS name_of_active_sequence,
    sequence_task_due_date__c::DATE AS sequence_task_due_date,
    sequence_status__c AS sequence_status,
    actively_being_sequenced__c::BOOLEAN AS is_actively_being_sequenced,
    fo_initial_mql__c AS is_first_order_initial_mql,
    fo_mql__c AS is_first_order_mql,
    is_first_order_person__c AS is_first_order_person,
    true_initial_mql_date__c AS true_initial_mql_date,
    true_mql_date__c AS true_mql_date,
    initial_mql_date__c AS initial_marketo_mql_date_time,
	  last_transfer_date_time__c AS last_transfer_date_time,
	  time_from_last_transfer_to_sequence__c AS time_from_last_transfer_to_sequence,
	  time_from_mql_to_last_transfer__c AS time_from_mql_to_last_transfer,
    high_priority__c AS is_high_priority,
    {{ sfdc_source_buckets('leadsource') }}


    -- account demographics fields
    account_demographics_sales_segment__c AS account_demographics_sales_segment,
    CASE
      WHEN account_demographics_sales_segment__c IN ('Large', 'PubSec') THEN 'Large'
      ELSE account_demographics_sales_segment__c
    END AS account_demographics_sales_segment_grouped,
    account_demographics_geo__c AS account_demographics_geo,
    account_demographics_region__c AS account_demographics_region,
    account_demographics_area__c AS account_demographics_area,
    {{ sales_segment_region_grouped('account_demographics_sales_segment__c', 'account_demographics_geo__c', 'account_demographics_region__c') }}
    AS account_demographics_segment_region_grouped,
    account_demographics_territory__c AS account_demographics_territory,
    account_demographic_employee_count__c AS account_demographics_employee_count,
    account_demographics_max_family_employe__c AS account_demographics_max_family_employee,
    account_demographics_upa_country__c AS account_demographics_upa_country,
    account_demographics_upa_state__c AS account_demographics_upa_state,
    account_demographics_upa_city__c AS account_demographics_upa_city,
    account_demographics_upa_street__c AS account_demographics_upa_street,
    account_demographics_upa_postal_code__c AS account_demographics_upa_postal_code,

    --path factory info
    pathfactory_experience_name__c AS pathfactory_experience_name,
    pathfactory_engagement_score__c AS pathfactory_engagement_score,
    pathfactory_content_count__c AS pathfactory_content_count,
    pathfactory_content_list__c AS pathfactory_content_list,
    pathfactory_content_journey__c AS pathfactory_content_journey,
    pathfactory_topic_list__c AS pathfactory_topic_list,

    --gl info
    account_owner__c AS account_owner,
    ae_comments__c AS ae_comments,
    business_development_rep__c AS business_development_rep_name,
    outbound_bdr__c AS outbound_business_development_rep_name,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastactivitydate::DATE AS last_activity_date,
    lastcurequestdate AS last_cu_request_date,
    lastcuupdatedate AS last_cu_update_date,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    systemmodstamp

  FROM source

)

SELECT *
FROM renamed2b:T3c87,WITH source AS (

  SELECT *
  FROM "RAW".salesforce_stitch.contact



),

renamed AS (

  SELECT
    -- id
    id AS contact_id,
    name AS contact_name,
    firstname AS contact_first_name,
    lastname AS contact_last_name,
    email AS contact_email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    CASE
  WHEN leadsource IN ('DiscoverOrg', 'Zoominfo', 'Purchased List', 'GitLab.com') THEN 'Bulk load or list purchase or spam impacted'
  WHEN TRIM(split_part(email,'@',2)) IS NULL THEN 'Missing email domain'

  WHEN split_part(email,'@',2) LIKE ANY ('%yahoo%', 
    '%rediff%', 
    '%gmail%', 
    '%hotmail%', 
    '%outlook%', 
    '%verizon.net%', 
    '%live%', 
    '%sbcglobal.net%', 
    '%laposte%', 
    '%yandex%', 
    '%bk.ru%', 
    '%inbox%', 
    '%protonmail.%', 
    '%posteo%', 
    '%pm.me%', 
    '%email.%', 
    '%fastmail.%', 
    '%att.net%', 
    '%rocketmail%'
    
  )

  OR split_part(email,'@',2) IN ('qq.com', 
    '163.com', 
    'mail.ru', 
    'googlemail.com', 
    'yandex.ru', 
    'protonmail.com', 
    'icloud.com', 
    't-mobile.com', 
    'example.com', 
    '126.com', 
    'me.com', 
    'web.de', 
    'naver.com', 
    'foxmail.com', 
    'aol.com', 
    'msn.com', 
    'ya.ru', 
    'ymail.com', 
    'orange.fr', 
    'free.fr', 
    'comcast.net', 
    'mac.com', 
    'gitlab.com', 
    'gitlab.localhost', 
    'yahoo.co.uk', 
    'ukr.net', 
    'live.com', 
    'gmx.de', 
    'gmx.net', 
    'wp.pl', 
    'mail.com', 
    'live.fr', 
    'ancestry.com'
    
  )

  THEN 'Personal email domain'
  ELSE 'Business email domain'
END

 AS email_domain_type,

    -- keys
    accountid AS account_id,
    masterrecordid AS master_record_id,
    ownerid AS owner_id,
    recordtypeid AS record_type_id,
    reportstoid AS reports_to_id,

    --contact info
    title AS contact_title,
    CASE
    WHEN LOWER(INSERT(INSERT(title, 1, 0, ''), LEN(title)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(title), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(title), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(title), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(title), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(title), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(title), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(title, 1, 0, ''), LEN(title)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(title), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(title, 1, 0, ''), LEN(title)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy,
    role__c AS contact_role,
    mobilephone AS mobile_phone,
    mkto71_lead_score__c AS person_score,

    department AS department,
    contact_status__c AS contact_status,
    requested_contact__c AS requested_contact,
    inactive_contact__c AS inactive_contact,
    hasoptedoutofemail AS has_opted_out_email,
    invalid_email_address__c AS invalid_email_address,
    isemailbounced AS email_is_bounced,
    emailbounceddate AS email_bounced_date,
    emailbouncedreason AS email_bounced_reason,

    mailingstreet AS mailing_address,
    mailingcity AS mailing_city,
    mailingstate AS mailing_state,
    mailingstatecode AS mailing_state_code,
    mailingcountry AS mailing_country,
    mailingcountrycode AS mailing_country_code,
    mailingpostalcode AS mailing_zip_code,

    -- info
    dozisf__zoominfo_company_id__c AS zoominfo_company_id,
    dozisf__zoominfo_id__c AS zoominfo_contact_id,
    zi_company_revenue__c AS zoominfo_company_revenue,
    zi_employee_count__c AS zoominfo_company_employee_count,
    cognism_number_of_employees__c AS cognism_employee_count,
    zi_contact_city__c AS zoominfo_contact_city,
    zi_company_city__c AS zoominfo_company_city,
    zi_industry__c AS zoominfo_company_industry,
    zi_company_state__c AS zoominfo_company_state,
    zi_contact_state__c AS zoominfo_contact_state,
    zi_company_country__c AS zoominfo_company_country,
    zi_contact_country__c AS zoominfo_contact_country,
    zi_phone_number__c AS zoominfo_phone_number, 
    zi_mobile_phone_number__c AS zoominfo_mobile_phone_number,
    zi_do_not_call_direct_phone__c AS zoominfo_do_not_call_direct_phone,
    zi_do_not_call_mobile_phone__c AS zoominfo_do_not_call_mobile_phone,
    using_ce__c AS using_ce,
    ee_trial_start_date__c AS ee_trial_start_date,
    ee_trial_end_date__c AS ee_trial_end_date,
    industry__c AS industry,
    -- maybe we can exclude this if it's not relevant
    responded_to_githost_price_change__c AS responded_to_githost_price_change,
    core_check_in_notes__c AS core_check_in_notes,
    leadsource AS lead_source,
    lead_source_type__c AS lead_source_type,
    behavior_score__c AS behavior_score,
    outreach_stage__c AS outreach_stage,
    sequence_step_number__c AS outreach_step_number,
    account_type__c AS account_type,
    contact_assigned_datetime__c::TIMESTAMP AS assigned_datetime,
    mql_timestamp__c AS marketo_qualified_lead_timestamp,
    mql_datetime__c AS marketo_qualified_lead_datetime,
    mql_date__c AS marketo_qualified_lead_date,
    mql_datetime_inferred__c AS mql_datetime_inferred,
    inquiry_datetime__c AS inquiry_datetime,
    inquiry_datetime_inferred__c AS inquiry_datetime_inferred,
    accepted_datetime__c AS accepted_datetime,
    qualifying_datetime__c AS qualifying_datetime,
    qualified_datetime__c AS qualified_datetime,
    unqualified_datetime__c AS unqualified_datetime,
    nurture_datetime__c AS nurture_datetime,
    bad_data_datetime__c AS bad_data_datetime,
    worked_date__c AS worked_datetime,
    web_portal_purchase_datetime__c AS web_portal_purchase_datetime,
    mkto_si__last_interesting_moment__c AS marketo_last_interesting_moment,
    mkto_si__last_interesting_moment_date__c AS marketo_last_interesting_moment_date,
    last_utm_campaign__c AS last_utm_campaign,
    last_utm_content__c AS last_utm_content,
    vartopiadrs__partner_prospect_acceptance__c AS prospect_share_status,
    vartopiadrs__partner_prospect_status__c AS partner_prospect_status,
    vartopiadrs__vartopia_prospect_id__c AS partner_prospect_id,
    vartopiadrs__partner_prospect_owner_name__c AS partner_prospect_owner_name,
    sequence_step_type2__c AS sequence_step_type,
    name_of_active_sequence__c AS name_of_active_sequence,
    sequence_task_due_date__c::DATE AS sequence_task_due_date,
    sequence_status__c AS sequence_status,
    actively_being_sequenced__c::BOOLEAN AS is_actively_being_sequenced,
    fo_initial_mql__c AS is_first_order_initial_mql,
    fo_mql__c AS is_first_order_mql,
    is_first_order_person__c AS is_first_order_person,
    true_initial_mql_date__c AS true_initial_mql_date,
    true_mql_date__c AS true_mql_date,
    initial_mql_date__c AS initial_marketo_mql_date_time,
	  last_transfer_date_time__c AS last_transfer_date_time,
	  time_from_last_transfer_to_sequence__c AS time_from_last_transfer_to_sequence,
	  time_from_mql_to_last_transfer__c AS time_from_mql_to_last_transfer,
    high_priority__c AS is_high_priority,
    CASE
      WHEN leadsource in ('CORE Check-Up','Free Registration')
        THEN 'Core'
      WHEN leadsource in ('GitLab Subscription Portal', 'Gitlab.com', 'GitLab.com', 'Trial - Gitlab.com', 'Trial - GitLab.com')
        THEN 'GitLab.com'
      WHEN leadsource in ('Education', 'OSS')
        THEN 'Marketing/Community'
      WHEN leadsource in ('CE Download', 'Demo', 'Drift', 'Email Request', 'Email Subscription', 'Gated Content - General', 'Gated Content - Report', 'Gated Content - Video'
                           , 'Gated Content - Whitepaper', 'Live Event', 'Newsletter', 'Request - Contact', 'Request - Professional Services', 'Request - Public Sector'
                           , 'Security Newsletter', 'Trial - Enterprise', 'Virtual Sponsorship', 'Web Chat', 'Web Direct', 'Web', 'Webcast')
        THEN 'Marketing/Inbound'
      WHEN leadsource in ('Advertisement', 'Conference', 'Field Event', 'Owned Event')
        THEN 'Marketing/Outbound'
      WHEN leadsource in ('Clearbit', 'Datanyze','GovWin IQ', 'Leadware', 'LinkedIn', 'Prospecting - LeadIQ', 'Prospecting - General', 'Prospecting', 'SDR Generated')
        THEN 'Prospecting'
      WHEN leadsource in ('Employee Referral', 'External Referral', 'Partner', 'Word of mouth')
        THEN 'Referral'
      WHEN leadsource in ('AE Generated')
        THEN 'Sales'
      WHEN leadsource in ('DiscoverOrg')
        THEN 'DiscoverOrg'
      ELSE 'Other'
    END                               AS net_new_source_categories,
   CASE
      WHEN leadsource in ('CORE Check-Up', 'CE Download', 'CE Usage Ping','CE Version Check')
        THEN 'core'
      WHEN leadsource in ('Consultancy Request','Contact Request','Content','Demo','Drift','Education','EE Version Check','Email Request','Email Subscription','Enterprise Trial','Gated Content - eBook','Gated Content - General','Gated Content - Report','Gated Content - Video','Gated Content - Whitepaper','GitLab.com','MovingtoGitLab','Newsletter','OSS','Request - Community','Request - Contact','Request - Professional Services','Request - Public Sector','Security Newsletter','Startup Application','Web','Web Chat','White Paper')
        THEN 'inbound'
      WHEN leadsource in ('AE Generated', 'Clearbit','Datanyze','DiscoverOrg','Gemnasium','GitLab Hosted','Gitorious','gmail','GovWin IQ','Leadware','LinkedIn','Live Event','Prospecting','Prospecting - General','Prospecting - LeadIQ','SDR Generated','seamless.ai','Zoominfo')
        THEN 'outbound'
      WHEN leadsource in ('Advertisement', 'Conference', 'Executive Roundtable', 'Field Event', 'Owned Event','Promotion','Virtual Sponsorship')
        THEN 'paid demand gen'
      WHEN leadsource in ('Purchased List')
        THEN 'purchased list'
      WHEN leadsource in ('Employee Referral', 'Event Partner', 'Existing Client', 'External Referral','Partner','Seminar - Partner','Word of mouth')
        THEN 'referral'
      WHEN leadsource in('Trial - Enterprise','Trial - GitLab.com')
        THEN 'trial'
      WHEN leadsource in ('Webcast','Webinar', 'CSM Webinar')
        THEN 'virtual event'
      WHEN leadsource in ('GitLab Subscription Portal','Web Direct')
        THEN 'web direct'
      ELSE 'Other'
    END                               AS source_buckets,


    -- account demographics fields
    account_demographics_sales_segment__c AS account_demographics_sales_segment,
    CASE
      WHEN account_demographics_sales_segment__c IN ('Large', 'PubSec') THEN 'Large'
      ELSE account_demographics_sales_segment__c
    END AS account_demographics_sales_segment_grouped,
    account_demographics_geo__c AS account_demographics_geo,
    account_demographics_region__c AS account_demographics_region,
    account_demographics_area__c AS account_demographics_area,
    CASE 
  WHEN UPPER(account_demographics_sales_segment__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) = 'AMER' AND UPPER(account_demographics_region__c) = 'WEST'
    THEN 'US WEST'
  WHEN UPPER(account_demographics_sales_segment__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) IN ('AMER', 'LATAM') AND UPPER(account_demographics_region__c) IN ('EAST', 'LATAM')
    THEN 'US EAST'
  WHEN UPPER(account_demographics_sales_segment__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) IN ('APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN account_demographics_geo__c
  WHEN UPPER(account_demographics_sales_segment__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_region__c) = 'PUBSEC'
    THEN 'PUBSEC'
  WHEN UPPER(account_demographics_sales_segment__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) NOT IN ('WEST', 'EAST', 'APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN 'LARGE OTHER'
  WHEN UPPER(account_demographics_sales_segment__c) NOT IN ('LARGE', 'PUBSEC')
    THEN account_demographics_sales_segment__c
  ELSE 'Missing segment_region_grouped'
END
    AS account_demographics_segment_region_grouped,
    account_demographics_territory__c AS account_demographics_territory,
    account_demographic_employee_count__c AS account_demographics_employee_count,
    account_demographics_max_family_employe__c AS account_demographics_max_family_employee,
    account_demographics_upa_country__c AS account_demographics_upa_country,
    account_demographics_upa_state__c AS account_demographics_upa_state,
    account_demographics_upa_city__c AS account_demographics_upa_city,
    account_demographics_upa_street__c AS account_demographics_upa_street,
    account_demographics_upa_postal_code__c AS account_demographics_upa_postal_code,

    --path factory info
    pathfactory_experience_name__c AS pathfactory_experience_name,
    pathfactory_engagement_score__c AS pathfactory_engagement_score,
    pathfactory_content_count__c AS pathfactory_content_count,
    pathfactory_content_list__c AS pathfactory_content_list,
    pathfactory_content_journey__c AS pathfactory_content_journey,
    pathfactory_topic_list__c AS pathfactory_topic_list,

    --gl info
    account_owner__c AS account_owner,
    ae_comments__c AS ae_comments,
    business_development_rep__c AS business_development_rep_name,
    outbound_bdr__c AS outbound_business_development_rep_name,

    -- metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastactivitydate::DATE AS last_activity_date,
    lastcurequestdate AS last_cu_request_date,
    lastcuupdatedate AS last_cu_update_date,
    lastmodifiedbyid AS last_modified_by_id,
    lastmodifieddate AS last_modified_date,
    systemmodstamp

  FROM source

)

SELECT *
FROM renamed2c:T8da,WITH source AS (

    SELECT *
    FROM {{ source('marketo', 'lead') }}

), renamed AS (

    SELECT
      --Primary Key
      id::FLOAT                                 AS marketo_lead_id,

      --Info
      email::VARCHAR                            AS email,
      {{ hash_of_column('EMAIL') }}
      sfdc_lead_id::VARCHAR                     AS sfdc_lead_id,
      sfdc_contact_id::VARCHAR                  AS sfdc_contact_id,
      first_name::VARCHAR                       AS first_name,
      last_name::VARCHAR                        AS last_name,
      company::VARCHAR                          AS company_name,
      title::VARCHAR                            AS job_title,
      {{it_job_title_hierarchy('job_title')}},
      country::VARCHAR                          AS country,
      mobile_phone::VARCHAR                     AS mobile_phone,
      sfdc_type::VARCHAR                        AS sfdc_type,
      inactive_lead_c::BOOLEAN                  AS is_lead_inactive,
      inactive_contact_c::BOOLEAN               AS is_contact_inactive,
      sales_segmentation_c::VARCHAR             AS sales_segmentation,
      is_email_bounced::BOOLEAN                 AS is_email_bounced,
      email_bounced_date::DATE                  AS email_bounced_date,
      unsubscribed::BOOLEAN                     AS is_unsubscribed,
      opt_in::BOOLEAN                           AS is_opt_in,
      compliance_segment_value::VARCHAR         AS compliance_segment_value,
      pql_product_qualified_lead_c::BOOLEAN     AS is_pql_marketo,
      cdbispaidtier_c::BOOLEAN                  AS is_paid_tier_marketo,
      ptpt_is_contact_c::BOOLEAN                AS is_ptpt_contact_marketo,
      ptp_is_ptp_contact_c::BOOLEAN             AS is_ptp_contact_marketo,
      cdb_impacted_by_user_limit_c::BOOLEAN     AS is_impacted_by_user_limit_marketo,
      currently_in_trial_c::BOOLEAN             AS is_currently_in_trial_marketo,
      trial_start_date_c::DATE                  AS trial_start_date_marketo,
      trial_end_date_c::DATE                    AS trial_end_date_marketo,
      updated_at::TIMESTAMP                     AS updated_at

    FROM source
    QUALIFY ROW_NUMBER() OVER(PARTITION BY id ORDER BY updated_at DESC) = 1

)

SELECT *
FROM renamed2d:T1456,WITH source AS (

    SELECT *
    FROM "RAW".marketo.lead

), renamed AS (

    SELECT
      --Primary Key
      id::FLOAT                                 AS marketo_lead_id,

      --Info
      email::VARCHAR                            AS email,
      

    sha2(
        TRIM(
            LOWER(
                email || 
                ENCRYPT_RAW(
                  to_binary('SALT_EMAIL6', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS email_hash,


      sfdc_lead_id::VARCHAR                     AS sfdc_lead_id,
      sfdc_contact_id::VARCHAR                  AS sfdc_contact_id,
      first_name::VARCHAR                       AS first_name,
      last_name::VARCHAR                        AS last_name,
      company::VARCHAR                          AS company_name,
      title::VARCHAR                            AS job_title,
      CASE
    WHEN LOWER(INSERT(INSERT(job_title, 1, 0, ''), LEN(job_title)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(job_title), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(job_title), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(job_title), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(job_title), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(job_title), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(job_title), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(job_title, 1, 0, ''), LEN(job_title)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(job_title), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(job_title, 1, 0, ''), LEN(job_title)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy,
      country::VARCHAR                          AS country,
      mobile_phone::VARCHAR                     AS mobile_phone,
      sfdc_type::VARCHAR                        AS sfdc_type,
      inactive_lead_c::BOOLEAN                  AS is_lead_inactive,
      inactive_contact_c::BOOLEAN               AS is_contact_inactive,
      sales_segmentation_c::VARCHAR             AS sales_segmentation,
      is_email_bounced::BOOLEAN                 AS is_email_bounced,
      email_bounced_date::DATE                  AS email_bounced_date,
      unsubscribed::BOOLEAN                     AS is_unsubscribed,
      opt_in::BOOLEAN                           AS is_opt_in,
      compliance_segment_value::VARCHAR         AS compliance_segment_value,
      pql_product_qualified_lead_c::BOOLEAN     AS is_pql_marketo,
      cdbispaidtier_c::BOOLEAN                  AS is_paid_tier_marketo,
      ptpt_is_contact_c::BOOLEAN                AS is_ptpt_contact_marketo,
      ptp_is_ptp_contact_c::BOOLEAN             AS is_ptp_contact_marketo,
      cdb_impacted_by_user_limit_c::BOOLEAN     AS is_impacted_by_user_limit_marketo,
      currently_in_trial_c::BOOLEAN             AS is_currently_in_trial_marketo,
      trial_start_date_c::DATE                  AS trial_start_date_marketo,
      trial_end_date_c::DATE                    AS trial_end_date_marketo,
      updated_at::TIMESTAMP                     AS updated_at

    FROM source
    QUALIFY ROW_NUMBER() OVER(PARTITION BY id ORDER BY updated_at DESC) = 1

)

SELECT *
FROM renamed2e:Tff8,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_users_dedupe_source') }}

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    {{ user_role_mapping(user_role='role') }}::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    {{ it_job_title_hierarchy('role') }}
  FROM renamed

)

SELECT *
FROM add_job_hierarchy2f:T1bb4,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_dedupe_source

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    CASE
      WHEN role = 0 THEN 'Software Developer'
      WHEN role = 1 THEN 'Development Team Lead'
      WHEN role = 2 THEN 'Devops Engineer'
      WHEN role = 3 THEN 'Systems Administrator'
      WHEN role = 4 THEN 'Security Analyst'
      WHEN role = 5 THEN 'Data Analyst'
      WHEN role = 6 THEN 'Product Manager'
      WHEN role = 7 THEN 'Product Designer'
      WHEN role = 8 THEN 'Other'
      WHEN role = 99 THEN 'Experiment Default Value - Signup Not Completed'
      ELSE NULL
    END::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    CASE
    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(role), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy
  FROM renamed

)

SELECT *
FROM add_job_hierarchy30:T4b6,-- depends_on: {{ ref('zuora_excluded_accounts') }}

WITH source AS (

    SELECT *
    FROM {{ source('zuora', 'contact') }}

), renamed AS(

    SELECT 
      id                  AS contact_id,
      -- keys
      accountid           AS account_id,


      -- contact info
      firstname           AS first_name,
      lastname            AS last_name,
      nickname,
      address1            AS street_address,
      address2            AS street_address2,
      county,
      state,
      postalcode          AS postal_code,
      city,
      country,
      taxregion           AS tax_region,
      workemail           AS work_email,
      workphone           AS work_phone,
      otherphone          AS other_phone,
      otherphonetype      AS other_phone_type,
      fax,
      homephone           AS home_phone,
      mobilephone         AS mobile_phone,
      personalemail       AS personal_email,
      description,


      -- metadata
      createdbyid         AS created_by_id,
      createddate         AS created_date,
      updatedbyid         AS updated_by_id,
      updateddate         AS updated_date,
      deleted             AS is_deleted

    FROM source

)

SELECT *
FROM renamed31:T4b1,-- depends_on: "PROD".legacy.zuora_excluded_accounts

WITH source AS (

    SELECT *
    FROM "RAW".zuora_stitch.contact

), renamed AS(

    SELECT 
      id                  AS contact_id,
      -- keys
      accountid           AS account_id,


      -- contact info
      firstname           AS first_name,
      lastname            AS last_name,
      nickname,
      address1            AS street_address,
      address2            AS street_address2,
      county,
      state,
      postalcode          AS postal_code,
      city,
      country,
      taxregion           AS tax_region,
      workemail           AS work_email,
      workphone           AS work_phone,
      otherphone          AS other_phone,
      otherphonetype      AS other_phone_type,
      fax,
      homephone           AS home_phone,
      mobilephone         AS mobile_phone,
      personalemail       AS personal_email,
      description,


      -- metadata
      createdbyid         AS created_by_id,
      createddate         AS created_date,
      updatedbyid         AS updated_by_id,
      updateddate         AS updated_date,
      deleted             AS is_deleted

    FROM source

)

SELECT *
FROM renamed32:T246d,WITH source AS (

  SELECT *
  FROM {{ source('salesforce', 'lead') }}

),

renamed AS (

  SELECT
    --id
    id AS lead_id,
    name AS lead_name,
    firstname AS lead_first_name,
    lastname AS lead_last_name,
    email AS lead_email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    {{ email_domain_type("split_part(email,'@',2)", 'leadsource') }} AS email_domain_type,

    --keys
    masterrecordid AS master_record_id,
    convertedaccountid AS converted_account_id,
    convertedcontactid AS converted_contact_id,
    convertedopportunityid AS converted_opportunity_id,
    ownerid AS owner_id,
    recordtypeid AS record_type_id,
    round_robin_id__c AS round_robin_id,
    instance_uuid__c AS instance_uuid,
    lean_data_matched_account__c AS lean_data_matched_account,

    --lead info
    isconverted AS is_converted,
    converteddate AS converted_date,
    title AS title,
    {{ it_job_title_hierarchy('title') }},
    donotcall AS is_do_not_call,
    hasoptedoutofemail AS has_opted_out_email,
    emailbounceddate AS email_bounced_date,
    emailbouncedreason AS email_bounced_reason,
    behavior_score__c AS behavior_score,
    leadsource AS lead_source,
    lead_from__c AS lead_from,
    lead_source_type__c AS lead_source_type,
    lead_conversion_approval_status__c AS lead_conversion_approval_status,
    street AS street,
    city AS city,
    state AS state,
    statecode AS state_code,
    country AS country,
    countrycode AS country_code,
    postalcode AS postal_code,
    zi_company_country__c AS zoominfo_company_country,
    zi_contact_country__c AS zoominfo_contact_country,
    zi_company_state__c AS zoominfo_company_state,
    zi_contact_state__c AS zoominfo_contact_state,

    -- info
    requested_contact__c AS requested_contact,
    company AS company,
    dozisf__zoominfo_company_id__c AS zoominfo_company_id,
    zi_company_revenue__c AS zoominfo_company_revenue,
    zi_employee_count__c AS zoominfo_company_employee_count,
    zi_contact_city__c AS zoominfo_contact_city,
    zi_company_city__c AS zoominfo_company_city,
    zi_industry__c AS zoominfo_company_industry,
    zi_phone_number__c AS zoominfo_phone_number, 
    zi_mobile_phone_number__c AS zoominfo_mobile_phone_number, 
    zi_do_not_call_direct_phone__c AS zoominfo_do_not_call_direct_phone,
    zi_do_not_call_mobile_phone__c AS zoominfo_do_not_call_mobile_phone,
    buying_process_for_procuring_gitlab__c AS buying_process,
    core_check_in_notes__c AS core_check_in_notes,
    industry AS industry,
    largeaccount__c AS is_large_account,
    outreach_stage__c AS outreach_stage,
    sequence_step_number__c AS outreach_step_number,
    interested_in_gitlab_ee__c AS is_interested_gitlab_ee,
    interested_in_hosted_solution__c AS is_interested_in_hosted,
    lead_assigned_datetime__c::TIMESTAMP AS assigned_datetime,
    matched_account_top_list__c AS matched_account_top_list,
    matched_account_owner_role__c AS matched_account_owner_role,
    matched_account_sdr_assigned__c AS matched_account_sdr_assigned,
    matched_account_gtm_strategy__c AS matched_account_gtm_strategy,
    matched_account_bdr_prospecting_status__c AS matched_account_bdr_prospecting_status,
    engagio__matched_account_type__c AS matched_account_type,
    engagio__matched_account_owner_name__c AS matched_account_account_owner_name,
    mql_date__c AS marketo_qualified_lead_date,
    mql_datetime__c AS marketo_qualified_lead_datetime,
    mql_datetime_inferred__c AS mql_datetime_inferred,
    inquiry_datetime__c AS inquiry_datetime,
    inquiry_datetime_inferred__c AS inquiry_datetime_inferred,
    accepted_datetime__c AS accepted_datetime,
    qualifying_datetime__c AS qualifying_datetime,
    qualified_datetime__c AS qualified_datetime,
    unqualified_datetime__c AS unqualified_datetime,
    nurture_datetime__c AS nurture_datetime,
    bad_data_datetime__c AS bad_data_datetime,
    worked_date__c AS worked_datetime,
    web_portal_purchase_datetime__c AS web_portal_purchase_datetime,
    {{ sales_segment_cleaning('sales_segmentation__c') }} AS sales_segmentation,
    mkto71_lead_score__c AS person_score,
    status AS lead_status,
    last_utm_campaign__c AS last_utm_campaign,
    last_utm_content__c AS last_utm_content,
    crm_partner_id_lookup__c AS crm_partner_id,
    vartopiadrs__partner_prospect_acceptance__c AS prospect_share_status,
    vartopiadrs__partner_prospect_status__c AS partner_prospect_status,
    vartopiadrs__vartopia_prospect_id__c AS partner_prospect_id,
    vartopiadrs__partner_prospect_owner_name__c AS partner_prospect_owner_name,
    name_of_active_sequence__c AS name_of_active_sequence,
    sequence_task_due_date__c::DATE AS sequence_task_due_date,
    sequence_status__c AS sequence_status,
    sequence_step_type2__c AS sequence_step_type,
    actively_being_sequenced__c::BOOLEAN AS is_actively_being_sequenced,
    gaclientid__c AS ga_client_id,
    employee_buckets__c AS employee_bucket,
    fo_initial_mql__c AS is_first_order_initial_mql,
    fo_mql__c AS is_first_order_mql,
    is_first_order_person__c AS is_first_order_person,
    true_initial_mql_date__c AS true_initial_mql_date,
    true_mql_date__c AS true_mql_date,
    last_transfer_date_time__c AS last_transfer_date_time,
    initial_mql_date__c AS initial_marketo_mql_date_time,
	  time_from_last_transfer_to_sequence__c AS time_from_last_transfer_to_sequence,
	  time_from_mql_to_last_transfer__c AS time_from_mql_to_last_transfer,
    high_priority__c AS is_high_priority,


    {{ sfdc_source_buckets('leadsource') }}

    -- territory success planning info
    leandata_owner__c AS tsp_owner,
    leandata_region__c AS tsp_region,
    leandata_sub_region__c AS tsp_sub_region,
    leandata_territory__c AS tsp_territory,

    -- account demographics fields
    account_demographics_sales_segment_2__c AS account_demographics_sales_segment,
    account_demographics_sales_segment__c AS account_demographics_sales_segment_deprecated,
    CASE
      WHEN account_demographics_sales_segment_2__c IN ('Large', 'PubSec') THEN 'Large'
      ELSE account_demographics_sales_segment_2__c
    END AS account_demographics_sales_segment_grouped,
    account_demographics_geo__c AS account_demographics_geo,
    account_demographics_region__c AS account_demographics_region,
    account_demographics_area__c AS account_demographics_area,
    {{ sales_segment_region_grouped('account_demographics_sales_segment_2__c', 'account_demographics_geo__c', 'account_demographics_region__c') }}
    AS account_demographics_segment_region_grouped,
    account_demographics_territory__c AS account_demographics_territory,
    account_demographics_employee_count__c AS account_demographics_employee_count,
    account_demographics_max_family_employe__c AS account_demographics_max_family_employee,
    account_demographics_upa_country__c AS account_demographics_upa_country,
    account_demographics_upa_state__c AS account_demographics_upa_state,
    account_demographics_upa_city__c AS account_demographics_upa_city,
    account_demographics_upa_street__c AS account_demographics_upa_street,
    account_demographics_upa_postal_code__c AS account_demographics_upa_postal_code,


    --path factory info
    pathfactory_experience_name__c AS pathfactory_experience_name,
    pathfactory_engagement_score__c AS pathfactory_engagement_score,
    pathfactory_content_count__c AS pathfactory_content_count,
    pathfactory_content_list__c AS pathfactory_content_list,
    pathfactory_content_journey__c AS pathfactory_content_journey,
    pathfactory_topic_list__c AS pathfactory_topic_list,

    --marketo sales insight
    mkto_si__last_interesting_moment_desc__c AS marketo_last_interesting_moment,
    mkto_si__last_interesting_moment_date__c AS marketo_last_interesting_moment_date,

    --gitlab internal
    bdr_lu__c AS business_development_look_up,
    business_development_rep_contact__c AS business_development_representative_contact,
    business_development_representative__c AS business_development_representative,
    sdr_lu__c AS sales_development_representative,
    competition__c AS competition,

    -- Cognism Data
    cognism_company_office_city__c AS cognism_company_office_city,
    cognism_company_office_state__c AS cognism_company_office_state,
    cognism_company_office_country__c AS cognism_company_office_country,
    cognism_city__c as cognism_city,
    cognism_state__c as cognism_state,
    cognism_country__c as cognism_country,
    cognism_number_of_employees__c AS cognism_employee_count,

    --LeanData
    leandata__matched_account_billing_state__c as leandata_matched_account_billing_state,
    leandata__matched_account_billing_postal_code__c as leandata_matched_account_billing_postal_code,
    leandata__matched_account_billing_country__c as leandata_matched_account_billing_country,
    leandata__matched_account_employees__c AS leandata_matched_account_employee_count,
    lean_data_matched_account_sales_segment__c AS leandata_matched_account_sales_segment,


    --metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastactivitydate::DATE AS last_activity_date,
    lastmodifiedbyid AS last_modified_id,
    lastmodifieddate AS last_modified_date,
    systemmodstamp

  FROM source

)

SELECT *
FROM renamed33:T45a2,WITH source AS (

  SELECT *
  FROM "RAW".salesforce_stitch.lead

),

renamed AS (

  SELECT
    --id
    id AS lead_id,
    name AS lead_name,
    firstname AS lead_first_name,
    lastname AS lead_last_name,
    email AS lead_email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    CASE
  WHEN leadsource IN ('DiscoverOrg', 'Zoominfo', 'Purchased List', 'GitLab.com') THEN 'Bulk load or list purchase or spam impacted'
  WHEN TRIM(split_part(email,'@',2)) IS NULL THEN 'Missing email domain'

  WHEN split_part(email,'@',2) LIKE ANY ('%yahoo%', 
    '%rediff%', 
    '%gmail%', 
    '%hotmail%', 
    '%outlook%', 
    '%verizon.net%', 
    '%live%', 
    '%sbcglobal.net%', 
    '%laposte%', 
    '%yandex%', 
    '%bk.ru%', 
    '%inbox%', 
    '%protonmail.%', 
    '%posteo%', 
    '%pm.me%', 
    '%email.%', 
    '%fastmail.%', 
    '%att.net%', 
    '%rocketmail%'
    
  )

  OR split_part(email,'@',2) IN ('qq.com', 
    '163.com', 
    'mail.ru', 
    'googlemail.com', 
    'yandex.ru', 
    'protonmail.com', 
    'icloud.com', 
    't-mobile.com', 
    'example.com', 
    '126.com', 
    'me.com', 
    'web.de', 
    'naver.com', 
    'foxmail.com', 
    'aol.com', 
    'msn.com', 
    'ya.ru', 
    'ymail.com', 
    'orange.fr', 
    'free.fr', 
    'comcast.net', 
    'mac.com', 
    'gitlab.com', 
    'gitlab.localhost', 
    'yahoo.co.uk', 
    'ukr.net', 
    'live.com', 
    'gmx.de', 
    'gmx.net', 
    'wp.pl', 
    'mail.com', 
    'live.fr', 
    'ancestry.com'
    
  )

  THEN 'Personal email domain'
  ELSE 'Business email domain'
END

 AS email_domain_type,

    --keys
    masterrecordid AS master_record_id,
    convertedaccountid AS converted_account_id,
    convertedcontactid AS converted_contact_id,
    convertedopportunityid AS converted_opportunity_id,
    ownerid AS owner_id,
    recordtypeid AS record_type_id,
    round_robin_id__c AS round_robin_id,
    instance_uuid__c AS instance_uuid,
    lean_data_matched_account__c AS lean_data_matched_account,

    --lead info
    isconverted AS is_converted,
    converteddate AS converted_date,
    title AS title,
    CASE
    WHEN LOWER(INSERT(INSERT(title, 1, 0, ''), LEN(title)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(title), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(title), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(title), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(title), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(title), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(title), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(title, 1, 0, ''), LEN(title)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(title), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(title, 1, 0, ''), LEN(title)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy,
    donotcall AS is_do_not_call,
    hasoptedoutofemail AS has_opted_out_email,
    emailbounceddate AS email_bounced_date,
    emailbouncedreason AS email_bounced_reason,
    behavior_score__c AS behavior_score,
    leadsource AS lead_source,
    lead_from__c AS lead_from,
    lead_source_type__c AS lead_source_type,
    lead_conversion_approval_status__c AS lead_conversion_approval_status,
    street AS street,
    city AS city,
    state AS state,
    statecode AS state_code,
    country AS country,
    countrycode AS country_code,
    postalcode AS postal_code,
    zi_company_country__c AS zoominfo_company_country,
    zi_contact_country__c AS zoominfo_contact_country,
    zi_company_state__c AS zoominfo_company_state,
    zi_contact_state__c AS zoominfo_contact_state,

    -- info
    requested_contact__c AS requested_contact,
    company AS company,
    dozisf__zoominfo_company_id__c AS zoominfo_company_id,
    zi_company_revenue__c AS zoominfo_company_revenue,
    zi_employee_count__c AS zoominfo_company_employee_count,
    zi_contact_city__c AS zoominfo_contact_city,
    zi_company_city__c AS zoominfo_company_city,
    zi_industry__c AS zoominfo_company_industry,
    zi_phone_number__c AS zoominfo_phone_number, 
    zi_mobile_phone_number__c AS zoominfo_mobile_phone_number, 
    zi_do_not_call_direct_phone__c AS zoominfo_do_not_call_direct_phone,
    zi_do_not_call_mobile_phone__c AS zoominfo_do_not_call_mobile_phone,
    buying_process_for_procuring_gitlab__c AS buying_process,
    core_check_in_notes__c AS core_check_in_notes,
    industry AS industry,
    largeaccount__c AS is_large_account,
    outreach_stage__c AS outreach_stage,
    sequence_step_number__c AS outreach_step_number,
    interested_in_gitlab_ee__c AS is_interested_gitlab_ee,
    interested_in_hosted_solution__c AS is_interested_in_hosted,
    lead_assigned_datetime__c::TIMESTAMP AS assigned_datetime,
    matched_account_top_list__c AS matched_account_top_list,
    matched_account_owner_role__c AS matched_account_owner_role,
    matched_account_sdr_assigned__c AS matched_account_sdr_assigned,
    matched_account_gtm_strategy__c AS matched_account_gtm_strategy,
    matched_account_bdr_prospecting_status__c AS matched_account_bdr_prospecting_status,
    engagio__matched_account_type__c AS matched_account_type,
    engagio__matched_account_owner_name__c AS matched_account_account_owner_name,
    mql_date__c AS marketo_qualified_lead_date,
    mql_datetime__c AS marketo_qualified_lead_datetime,
    mql_datetime_inferred__c AS mql_datetime_inferred,
    inquiry_datetime__c AS inquiry_datetime,
    inquiry_datetime_inferred__c AS inquiry_datetime_inferred,
    accepted_datetime__c AS accepted_datetime,
    qualifying_datetime__c AS qualifying_datetime,
    qualified_datetime__c AS qualified_datetime,
    unqualified_datetime__c AS unqualified_datetime,
    nurture_datetime__c AS nurture_datetime,
    bad_data_datetime__c AS bad_data_datetime,
    worked_date__c AS worked_datetime,
    web_portal_purchase_datetime__c AS web_portal_purchase_datetime,
    CASE WHEN LOWER(sales_segmentation__c) = 'smb' THEN 'SMB'
     WHEN LOWER(sales_segmentation__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(sales_segmentation__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(sales_segmentation__c) IS NULL THEN 'SMB'
     WHEN LOWER(sales_segmentation__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(sales_segmentation__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(sales_segmentation__c) = 'lrg' THEN 'Large'
     WHEN LOWER(sales_segmentation__c) = 'jihu' THEN 'JiHu'
     WHEN sales_segmentation__c IS NOT NULL THEN initcap(sales_segmentation__c)
END AS sales_segmentation,
    mkto71_lead_score__c AS person_score,
    status AS lead_status,
    last_utm_campaign__c AS last_utm_campaign,
    last_utm_content__c AS last_utm_content,
    crm_partner_id_lookup__c AS crm_partner_id,
    vartopiadrs__partner_prospect_acceptance__c AS prospect_share_status,
    vartopiadrs__partner_prospect_status__c AS partner_prospect_status,
    vartopiadrs__vartopia_prospect_id__c AS partner_prospect_id,
    vartopiadrs__partner_prospect_owner_name__c AS partner_prospect_owner_name,
    name_of_active_sequence__c AS name_of_active_sequence,
    sequence_task_due_date__c::DATE AS sequence_task_due_date,
    sequence_status__c AS sequence_status,
    sequence_step_type2__c AS sequence_step_type,
    actively_being_sequenced__c::BOOLEAN AS is_actively_being_sequenced,
    gaclientid__c AS ga_client_id,
    employee_buckets__c AS employee_bucket,
    fo_initial_mql__c AS is_first_order_initial_mql,
    fo_mql__c AS is_first_order_mql,
    is_first_order_person__c AS is_first_order_person,
    true_initial_mql_date__c AS true_initial_mql_date,
    true_mql_date__c AS true_mql_date,
    last_transfer_date_time__c AS last_transfer_date_time,
    initial_mql_date__c AS initial_marketo_mql_date_time,
	  time_from_last_transfer_to_sequence__c AS time_from_last_transfer_to_sequence,
	  time_from_mql_to_last_transfer__c AS time_from_mql_to_last_transfer,
    high_priority__c AS is_high_priority,


    CASE
      WHEN leadsource in ('CORE Check-Up','Free Registration')
        THEN 'Core'
      WHEN leadsource in ('GitLab Subscription Portal', 'Gitlab.com', 'GitLab.com', 'Trial - Gitlab.com', 'Trial - GitLab.com')
        THEN 'GitLab.com'
      WHEN leadsource in ('Education', 'OSS')
        THEN 'Marketing/Community'
      WHEN leadsource in ('CE Download', 'Demo', 'Drift', 'Email Request', 'Email Subscription', 'Gated Content - General', 'Gated Content - Report', 'Gated Content - Video'
                           , 'Gated Content - Whitepaper', 'Live Event', 'Newsletter', 'Request - Contact', 'Request - Professional Services', 'Request - Public Sector'
                           , 'Security Newsletter', 'Trial - Enterprise', 'Virtual Sponsorship', 'Web Chat', 'Web Direct', 'Web', 'Webcast')
        THEN 'Marketing/Inbound'
      WHEN leadsource in ('Advertisement', 'Conference', 'Field Event', 'Owned Event')
        THEN 'Marketing/Outbound'
      WHEN leadsource in ('Clearbit', 'Datanyze','GovWin IQ', 'Leadware', 'LinkedIn', 'Prospecting - LeadIQ', 'Prospecting - General', 'Prospecting', 'SDR Generated')
        THEN 'Prospecting'
      WHEN leadsource in ('Employee Referral', 'External Referral', 'Partner', 'Word of mouth')
        THEN 'Referral'
      WHEN leadsource in ('AE Generated')
        THEN 'Sales'
      WHEN leadsource in ('DiscoverOrg')
        THEN 'DiscoverOrg'
      ELSE 'Other'
    END                               AS net_new_source_categories,
   CASE
      WHEN leadsource in ('CORE Check-Up', 'CE Download', 'CE Usage Ping','CE Version Check')
        THEN 'core'
      WHEN leadsource in ('Consultancy Request','Contact Request','Content','Demo','Drift','Education','EE Version Check','Email Request','Email Subscription','Enterprise Trial','Gated Content - eBook','Gated Content - General','Gated Content - Report','Gated Content - Video','Gated Content - Whitepaper','GitLab.com','MovingtoGitLab','Newsletter','OSS','Request - Community','Request - Contact','Request - Professional Services','Request - Public Sector','Security Newsletter','Startup Application','Web','Web Chat','White Paper')
        THEN 'inbound'
      WHEN leadsource in ('AE Generated', 'Clearbit','Datanyze','DiscoverOrg','Gemnasium','GitLab Hosted','Gitorious','gmail','GovWin IQ','Leadware','LinkedIn','Live Event','Prospecting','Prospecting - General','Prospecting - LeadIQ','SDR Generated','seamless.ai','Zoominfo')
        THEN 'outbound'
      WHEN leadsource in ('Advertisement', 'Conference', 'Executive Roundtable', 'Field Event', 'Owned Event','Promotion','Virtual Sponsorship')
        THEN 'paid demand gen'
      WHEN leadsource in ('Purchased List')
        THEN 'purchased list'
      WHEN leadsource in ('Employee Referral', 'Event Partner', 'Existing Client', 'External Referral','Partner','Seminar - Partner','Word of mouth')
        THEN 'referral'
      WHEN leadsource in('Trial - Enterprise','Trial - GitLab.com')
        THEN 'trial'
      WHEN leadsource in ('Webcast','Webinar', 'CSM Webinar')
        THEN 'virtual event'
      WHEN leadsource in ('GitLab Subscription Portal','Web Direct')
        THEN 'web direct'
      ELSE 'Other'
    END                               AS source_buckets,

    -- territory success planning info
    leandata_owner__c AS tsp_owner,
    leandata_region__c AS tsp_region,
    leandata_sub_region__c AS tsp_sub_region,
    leandata_territory__c AS tsp_territory,

    -- account demographics fields
    account_demographics_sales_segment_2__c AS account_demographics_sales_segment,
    account_demographics_sales_segment__c AS account_demographics_sales_segment_deprecated,
    CASE
      WHEN account_demographics_sales_segment_2__c IN ('Large', 'PubSec') THEN 'Large'
      ELSE account_demographics_sales_segment_2__c
    END AS account_demographics_sales_segment_grouped,
    account_demographics_geo__c AS account_demographics_geo,
    account_demographics_region__c AS account_demographics_region,
    account_demographics_area__c AS account_demographics_area,
    CASE 
  WHEN UPPER(account_demographics_sales_segment_2__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) = 'AMER' AND UPPER(account_demographics_region__c) = 'WEST'
    THEN 'US WEST'
  WHEN UPPER(account_demographics_sales_segment_2__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) IN ('AMER', 'LATAM') AND UPPER(account_demographics_region__c) IN ('EAST', 'LATAM')
    THEN 'US EAST'
  WHEN UPPER(account_demographics_sales_segment_2__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) IN ('APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN account_demographics_geo__c
  WHEN UPPER(account_demographics_sales_segment_2__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_region__c) = 'PUBSEC'
    THEN 'PUBSEC'
  WHEN UPPER(account_demographics_sales_segment_2__c) IN ('LARGE', 'PUBSEC') AND UPPER(account_demographics_geo__c) NOT IN ('WEST', 'EAST', 'APAC', 'PUBSEC','EMEA', 'GLOBAL')
    THEN 'LARGE OTHER'
  WHEN UPPER(account_demographics_sales_segment_2__c) NOT IN ('LARGE', 'PUBSEC')
    THEN account_demographics_sales_segment_2__c
  ELSE 'Missing segment_region_grouped'
END
    AS account_demographics_segment_region_grouped,
    account_demographics_territory__c AS account_demographics_territory,
    account_demographics_employee_count__c AS account_demographics_employee_count,
    account_demographics_max_family_employe__c AS account_demographics_max_family_employee,
    account_demographics_upa_country__c AS account_demographics_upa_country,
    account_demographics_upa_state__c AS account_demographics_upa_state,
    account_demographics_upa_city__c AS account_demographics_upa_city,
    account_demographics_upa_street__c AS account_demographics_upa_street,
    account_demographics_upa_postal_code__c AS account_demographics_upa_postal_code,


    --path factory info
    pathfactory_experience_name__c AS pathfactory_experience_name,
    pathfactory_engagement_score__c AS pathfactory_engagement_score,
    pathfactory_content_count__c AS pathfactory_content_count,
    pathfactory_content_list__c AS pathfactory_content_list,
    pathfactory_content_journey__c AS pathfactory_content_journey,
    pathfactory_topic_list__c AS pathfactory_topic_list,

    --marketo sales insight
    mkto_si__last_interesting_moment_desc__c AS marketo_last_interesting_moment,
    mkto_si__last_interesting_moment_date__c AS marketo_last_interesting_moment_date,

    --gitlab internal
    bdr_lu__c AS business_development_look_up,
    business_development_rep_contact__c AS business_development_representative_contact,
    business_development_representative__c AS business_development_representative,
    sdr_lu__c AS sales_development_representative,
    competition__c AS competition,

    -- Cognism Data
    cognism_company_office_city__c AS cognism_company_office_city,
    cognism_company_office_state__c AS cognism_company_office_state,
    cognism_company_office_country__c AS cognism_company_office_country,
    cognism_city__c as cognism_city,
    cognism_state__c as cognism_state,
    cognism_country__c as cognism_country,
    cognism_number_of_employees__c AS cognism_employee_count,

    --LeanData
    leandata__matched_account_billing_state__c as leandata_matched_account_billing_state,
    leandata__matched_account_billing_postal_code__c as leandata_matched_account_billing_postal_code,
    leandata__matched_account_billing_country__c as leandata_matched_account_billing_country,
    leandata__matched_account_employees__c AS leandata_matched_account_employee_count,
    lean_data_matched_account_sales_segment__c AS leandata_matched_account_sales_segment,


    --metadata
    createdbyid AS created_by_id,
    createddate AS created_date,
    isdeleted AS is_deleted,
    lastactivitydate::DATE AS last_activity_date,
    lastmodifiedbyid AS last_modified_id,
    lastmodifieddate AS last_modified_date,
    systemmodstamp

  FROM source

)

SELECT *
FROM renamed34:T1ef1,{{ config({
    "alias": "dim_crm_account",
    "post-hook": "{{ missing_member_column(primary_key = 'dim_crm_account_id', not_null_test_cols = ['is_reseller']) }}"
}) }}

WITH final AS (

    SELECT 
      --primary key
      prep_crm_account.dim_crm_account_id,

      --surrogate keys
      prep_crm_account.dim_parent_crm_account_id,
      prep_crm_account.dim_crm_user_id,
      prep_crm_account.merged_to_account_id,
      prep_crm_account.record_type_id,
      prep_crm_account.master_record_id,
      prep_crm_account.dim_crm_person_primary_contact_id,

      --account people
      prep_crm_account.crm_account_owner,
      prep_crm_account.proposed_crm_account_owner,
      prep_crm_account.account_owner,
      prep_crm_account.technical_account_manager,
      prep_crm_account.owner_role,
      prep_crm_account.user_role_type,

      ----ultimate parent crm account info
      prep_crm_account.parent_crm_account_name,
      prep_crm_account.parent_crm_account_sales_segment,
      prep_crm_account.parent_crm_account_sales_segment_grouped,
      prep_crm_account.parent_crm_account_segment_region_stamped_grouped,
      prep_crm_account.parent_crm_account_industry,
      prep_crm_account.parent_crm_account_business_unit,
      prep_crm_account.parent_crm_account_geo,
      prep_crm_account.parent_crm_account_region,
      prep_crm_account.parent_crm_account_area,
      prep_crm_account.parent_crm_account_territory,
      prep_crm_account.parent_crm_account_role_type,
      prep_crm_account.parent_crm_account_max_family_employee,
      prep_crm_account.parent_crm_account_upa_country,
      prep_crm_account.parent_crm_account_upa_state,
      prep_crm_account.parent_crm_account_upa_city,
      prep_crm_account.parent_crm_account_upa_street,
      prep_crm_account.parent_crm_account_upa_postal_code,

      --descriptive attributes
      prep_crm_account.crm_account_name,
      prep_crm_account.crm_account_employee_count,
      prep_crm_account.crm_account_gtm_strategy,
      prep_crm_account.crm_account_focus_account,
      prep_crm_account.crm_account_owner_user_segment,
      prep_crm_account.crm_account_billing_country,
      prep_crm_account.crm_account_billing_country_code,
      prep_crm_account.crm_account_type,
      prep_crm_account.crm_account_industry,
      prep_crm_account.crm_account_sub_industry,
      prep_crm_account.crm_account_employee_count_band,
      prep_crm_account.partner_vat_tax_id,
      prep_crm_account.account_manager,
      prep_crm_account.business_development_rep,
      prep_crm_account.dedicated_service_engineer,
      prep_crm_account.account_tier,
      prep_crm_account.account_tier_notes,
      prep_crm_account.license_utilization,
      prep_crm_account.support_level,
      prep_crm_account.named_account,
      prep_crm_account.billing_postal_code,
      prep_crm_account.partner_type,
      prep_crm_account.partner_status,
      prep_crm_account.gitlab_customer_success_project,
      prep_crm_account.demandbase_account_list,
      prep_crm_account.demandbase_intent,
      prep_crm_account.demandbase_page_views,
      prep_crm_account.demandbase_score,
      prep_crm_account.demandbase_sessions,
      prep_crm_account.demandbase_trending_offsite_intent,
      prep_crm_account.demandbase_trending_onsite_engagement,
      prep_crm_account.is_locally_managed_account,
      prep_crm_account.is_strategic_account,
      prep_crm_account.partner_track,
      prep_crm_account.partners_partner_type,
      prep_crm_account.gitlab_partner_program,
      prep_crm_account.zoom_info_company_name,
      prep_crm_account.zoom_info_company_revenue,
      prep_crm_account.zoom_info_company_employee_count,
      prep_crm_account.zoom_info_company_industry,
      prep_crm_account.zoom_info_company_city,
      prep_crm_account.zoom_info_company_state_province,
      prep_crm_account.zoom_info_company_country,
      prep_crm_account.account_phone,
      prep_crm_account.zoominfo_account_phone,
      prep_crm_account.abm_tier,
      prep_crm_account.health_number,
      prep_crm_account.health_score_color,
      prep_crm_account.partner_account_iban_number,
      prep_crm_account.gitlab_com_user,
      prep_crm_account.crm_account_zi_technologies,
      prep_crm_account.crm_account_zoom_info_website,
      prep_crm_account.crm_account_zoom_info_company_other_domains,
      prep_crm_account.crm_account_zoom_info_dozisf_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_name,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_name,
      prep_crm_account.forbes_2000_rank,
      prep_crm_account.sales_development_rep,
      prep_crm_account.admin_manual_source_number_of_employees,
      prep_crm_account.admin_manual_source_account_address,
      prep_crm_account.eoa_sentiment,
      prep_crm_account.gs_health_user_engagement,
      prep_crm_account.gs_health_cd,
      prep_crm_account.gs_health_devsecops,
      prep_crm_account.gs_health_ci,
      prep_crm_account.gs_health_scm,
      prep_crm_account.risk_impact,
      prep_crm_account.risk_reason,
      prep_crm_account.last_timeline_at_risk_update,
      prep_crm_account.last_at_risk_update_comments,
      prep_crm_account.bdr_prospecting_status,

      --measures (maintain for now to not break reporting)
      prep_crm_account.parent_crm_account_lam,
      prep_crm_account.parent_crm_account_lam_dev_count,
      prep_crm_account.carr_account_family,
      prep_crm_account.carr_this_account,

      --degenerative dimensions
      prep_crm_account.is_sdr_target_account,
      prep_crm_account.is_key_account,
      prep_crm_account.is_reseller,
      prep_crm_account.is_jihu_account,
      prep_crm_account.is_first_order_available,
      prep_crm_account.is_zi_jenkins_present,
      prep_crm_account.is_zi_svn_present,
      prep_crm_account.is_zi_tortoise_svn_present,
      prep_crm_account.is_zi_gcp_present,
      prep_crm_account.is_zi_atlassian_present,
      prep_crm_account.is_zi_github_present,
      prep_crm_account.is_zi_github_enterprise_present,
      prep_crm_account.is_zi_aws_present,
      prep_crm_account.is_zi_kubernetes_present,
      prep_crm_account.is_zi_apache_subversion_present,
      prep_crm_account.is_zi_apache_subversion_svn_present,
      prep_crm_account.is_zi_hashicorp_present,
      prep_crm_account.is_zi_aws_cloud_trail_present,
      prep_crm_account.is_zi_circle_ci_present,
      prep_crm_account.is_zi_bit_bucket_present,
      prep_crm_account.is_excluded_from_zoom_info_enrich,

      --dates
      prep_crm_account.crm_account_created_date,
      prep_crm_account.abm_tier_1_date,
      prep_crm_account.abm_tier_2_date,
      prep_crm_account.abm_tier_3_date,
      prep_crm_account.gtm_acceleration_date,
      prep_crm_account.gtm_account_based_date,
      prep_crm_account.gtm_account_centric_date,
      prep_crm_account.partners_signed_contract_date,
      prep_crm_account.technical_account_manager_date,
      prep_crm_account.customer_since_date,
      prep_crm_account.next_renewal_date,
      prep_crm_account.gs_first_value_date,
      prep_crm_account.gs_last_csm_activity_date,

      --metadata
      prep_crm_account.created_by_name,
      prep_crm_account.last_modified_by_name,
      prep_crm_account.last_modified_date,
      prep_crm_account.last_activity_date,
      prep_crm_account.is_deleted,
      prep_crm_account.pte_score,
      prep_crm_account.pte_decile,
      prep_crm_account.pte_score_group,
      prep_crm_account.ptc_score,
      prep_crm_account.ptc_decile,
      prep_crm_account.ptc_score_group
    FROM {{ ref('prep_crm_account') }}

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@msendal",
    updated_by="@lisvinueza",
    created_date="2020-06-01",
    updated_date="2023-05-21"
) }}35:T1f4e,

WITH final AS (

    SELECT 
      --primary key
      prep_crm_account.dim_crm_account_id,

      --surrogate keys
      prep_crm_account.dim_parent_crm_account_id,
      prep_crm_account.dim_crm_user_id,
      prep_crm_account.merged_to_account_id,
      prep_crm_account.record_type_id,
      prep_crm_account.master_record_id,
      prep_crm_account.dim_crm_person_primary_contact_id,

      --account people
      prep_crm_account.crm_account_owner,
      prep_crm_account.proposed_crm_account_owner,
      prep_crm_account.account_owner,
      prep_crm_account.technical_account_manager,
      prep_crm_account.owner_role,
      prep_crm_account.user_role_type,

      ----ultimate parent crm account info
      prep_crm_account.parent_crm_account_name,
      prep_crm_account.parent_crm_account_sales_segment,
      prep_crm_account.parent_crm_account_sales_segment_grouped,
      prep_crm_account.parent_crm_account_segment_region_stamped_grouped,
      prep_crm_account.parent_crm_account_industry,
      prep_crm_account.parent_crm_account_business_unit,
      prep_crm_account.parent_crm_account_geo,
      prep_crm_account.parent_crm_account_region,
      prep_crm_account.parent_crm_account_area,
      prep_crm_account.parent_crm_account_territory,
      prep_crm_account.parent_crm_account_role_type,
      prep_crm_account.parent_crm_account_max_family_employee,
      prep_crm_account.parent_crm_account_upa_country,
      prep_crm_account.parent_crm_account_upa_state,
      prep_crm_account.parent_crm_account_upa_city,
      prep_crm_account.parent_crm_account_upa_street,
      prep_crm_account.parent_crm_account_upa_postal_code,

      --descriptive attributes
      prep_crm_account.crm_account_name,
      prep_crm_account.crm_account_employee_count,
      prep_crm_account.crm_account_gtm_strategy,
      prep_crm_account.crm_account_focus_account,
      prep_crm_account.crm_account_owner_user_segment,
      prep_crm_account.crm_account_billing_country,
      prep_crm_account.crm_account_billing_country_code,
      prep_crm_account.crm_account_type,
      prep_crm_account.crm_account_industry,
      prep_crm_account.crm_account_sub_industry,
      prep_crm_account.crm_account_employee_count_band,
      prep_crm_account.partner_vat_tax_id,
      prep_crm_account.account_manager,
      prep_crm_account.business_development_rep,
      prep_crm_account.dedicated_service_engineer,
      prep_crm_account.account_tier,
      prep_crm_account.account_tier_notes,
      prep_crm_account.license_utilization,
      prep_crm_account.support_level,
      prep_crm_account.named_account,
      prep_crm_account.billing_postal_code,
      prep_crm_account.partner_type,
      prep_crm_account.partner_status,
      prep_crm_account.gitlab_customer_success_project,
      prep_crm_account.demandbase_account_list,
      prep_crm_account.demandbase_intent,
      prep_crm_account.demandbase_page_views,
      prep_crm_account.demandbase_score,
      prep_crm_account.demandbase_sessions,
      prep_crm_account.demandbase_trending_offsite_intent,
      prep_crm_account.demandbase_trending_onsite_engagement,
      prep_crm_account.is_locally_managed_account,
      prep_crm_account.is_strategic_account,
      prep_crm_account.partner_track,
      prep_crm_account.partners_partner_type,
      prep_crm_account.gitlab_partner_program,
      prep_crm_account.zoom_info_company_name,
      prep_crm_account.zoom_info_company_revenue,
      prep_crm_account.zoom_info_company_employee_count,
      prep_crm_account.zoom_info_company_industry,
      prep_crm_account.zoom_info_company_city,
      prep_crm_account.zoom_info_company_state_province,
      prep_crm_account.zoom_info_company_country,
      prep_crm_account.account_phone,
      prep_crm_account.zoominfo_account_phone,
      prep_crm_account.abm_tier,
      prep_crm_account.health_number,
      prep_crm_account.health_score_color,
      prep_crm_account.partner_account_iban_number,
      prep_crm_account.gitlab_com_user,
      prep_crm_account.crm_account_zi_technologies,
      prep_crm_account.crm_account_zoom_info_website,
      prep_crm_account.crm_account_zoom_info_company_other_domains,
      prep_crm_account.crm_account_zoom_info_dozisf_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_name,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_name,
      prep_crm_account.forbes_2000_rank,
      prep_crm_account.sales_development_rep,
      prep_crm_account.admin_manual_source_number_of_employees,
      prep_crm_account.admin_manual_source_account_address,
      prep_crm_account.eoa_sentiment,
      prep_crm_account.gs_health_user_engagement,
      prep_crm_account.gs_health_cd,
      prep_crm_account.gs_health_devsecops,
      prep_crm_account.gs_health_ci,
      prep_crm_account.gs_health_scm,
      prep_crm_account.risk_impact,
      prep_crm_account.risk_reason,
      prep_crm_account.last_timeline_at_risk_update,
      prep_crm_account.last_at_risk_update_comments,
      prep_crm_account.bdr_prospecting_status,

      --measures (maintain for now to not break reporting)
      prep_crm_account.parent_crm_account_lam,
      prep_crm_account.parent_crm_account_lam_dev_count,
      prep_crm_account.carr_account_family,
      prep_crm_account.carr_this_account,

      --degenerative dimensions
      prep_crm_account.is_sdr_target_account,
      prep_crm_account.is_key_account,
      prep_crm_account.is_reseller,
      prep_crm_account.is_jihu_account,
      prep_crm_account.is_first_order_available,
      prep_crm_account.is_zi_jenkins_present,
      prep_crm_account.is_zi_svn_present,
      prep_crm_account.is_zi_tortoise_svn_present,
      prep_crm_account.is_zi_gcp_present,
      prep_crm_account.is_zi_atlassian_present,
      prep_crm_account.is_zi_github_present,
      prep_crm_account.is_zi_github_enterprise_present,
      prep_crm_account.is_zi_aws_present,
      prep_crm_account.is_zi_kubernetes_present,
      prep_crm_account.is_zi_apache_subversion_present,
      prep_crm_account.is_zi_apache_subversion_svn_present,
      prep_crm_account.is_zi_hashicorp_present,
      prep_crm_account.is_zi_aws_cloud_trail_present,
      prep_crm_account.is_zi_circle_ci_present,
      prep_crm_account.is_zi_bit_bucket_present,
      prep_crm_account.is_excluded_from_zoom_info_enrich,

      --dates
      prep_crm_account.crm_account_created_date,
      prep_crm_account.abm_tier_1_date,
      prep_crm_account.abm_tier_2_date,
      prep_crm_account.abm_tier_3_date,
      prep_crm_account.gtm_acceleration_date,
      prep_crm_account.gtm_account_based_date,
      prep_crm_account.gtm_account_centric_date,
      prep_crm_account.partners_signed_contract_date,
      prep_crm_account.technical_account_manager_date,
      prep_crm_account.customer_since_date,
      prep_crm_account.next_renewal_date,
      prep_crm_account.gs_first_value_date,
      prep_crm_account.gs_last_csm_activity_date,

      --metadata
      prep_crm_account.created_by_name,
      prep_crm_account.last_modified_by_name,
      prep_crm_account.last_modified_date,
      prep_crm_account.last_activity_date,
      prep_crm_account.is_deleted,
      prep_crm_account.pte_score,
      prep_crm_account.pte_decile,
      prep_crm_account.pte_score_group,
      prep_crm_account.ptc_score,
      prep_crm_account.ptc_decile,
      prep_crm_account.ptc_score_group
    FROM "PROD".restricted_safe_common_prep.prep_crm_account

)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2020-06-01'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final36:T2b29,WITH biz_person AS (

    SELECT *
    FROM {{ref('sfdc_bizible_person_source')}}
    WHERE is_deleted = 'FALSE'

), biz_touchpoints AS (

    SELECT *
    FROM {{ref('sfdc_bizible_touchpoint_source')}}
    WHERE bizible_touchpoint_position LIKE '%FT%'
     AND is_deleted = 'FALSE'

), biz_person_with_touchpoints AS (

    SELECT

      biz_touchpoints.*,
      biz_person.bizible_contact_id,
      biz_person.bizible_lead_id

    FROM biz_touchpoints
    JOIN biz_person
      ON biz_touchpoints.bizible_person_id = biz_person.person_id

), sfdc_contacts AS (

    SELECT
    {{ hash_sensitive_columns('sfdc_contact_source') }}
    FROM {{ref('sfdc_contact_source')}}
    WHERE is_deleted = 'FALSE'

), sfdc_leads AS (

    SELECT
    {{ hash_sensitive_columns('sfdc_lead_source') }}
    FROM {{ref('sfdc_lead_source')}}
    WHERE is_deleted = 'FALSE'

),  was_converted_lead AS (

    SELECT DISTINCT
      contact_id,
      1 AS was_converted_lead
    FROM {{ ref('sfdc_contact_source') }}
    INNER JOIN {{ ref('sfdc_lead_source') }}
      ON sfdc_contact_source.contact_id = sfdc_lead_source.converted_contact_id

),  marketo_persons AS (

    SELECT
      marketo_lead_id,
      sfdc_type,
      sfdc_lead_id,
      sfdc_contact_id
    FROM {{ ref('marketo_lead_source') }}

),  crm_person_final AS (

    SELECT
      --id
      {{ dbt_utils.surrogate_key(['sfdc_contacts.contact_id']) }} AS dim_crm_person_id,
      sfdc_contacts.contact_id                      AS sfdc_record_id,
      bizible_person_id                             AS bizible_person_id,
      'contact'                                     AS sfdc_record_type,
      contact_email_hash                            AS email_hash,
      email_domain,
      email_domain_type,
      marketo_lead_id,

      --keys
      master_record_id,
      owner_id,
      record_type_id,
      account_id                                    AS dim_crm_account_id,
      reports_to_id,
      owner_id                                      AS dim_crm_user_id,

      --info
      person_score,
      behavior_score,
      contact_title                                 AS title,
      it_job_title_hierarchy,
      has_opted_out_email,
      email_bounced_date,
      email_bounced_reason,
      contact_status                                AS status,
      lead_source,
      lead_source_type,
      was_converted_lead.was_converted_lead         AS was_converted_lead,
      source_buckets,
      net_new_source_categories,
      bizible_touchpoint_position,
      bizible_marketing_channel_path,
      bizible_touchpoint_date,
      marketo_last_interesting_moment,
      marketo_last_interesting_moment_date,
      outreach_step_number,
      NULL                                          AS matched_account_owner_role,
      NULL                                          AS matched_account_account_owner_name,
      NULL                                          AS matched_account_sdr_assigned,
      NULL                                          AS matched_account_type,
      NULL                                          AS matched_account_gtm_strategy,
      NULL                                          AS matched_account_bdr_prospecting_status,
      is_first_order_initial_mql,
      is_first_order_mql,
      is_first_order_person,
      last_utm_content,
      last_utm_campaign,
      sequence_step_type,
      name_of_active_sequence,
      sequence_task_due_date,
      sequence_status,
      is_actively_being_sequenced,
      is_high_priority,
      prospect_share_status,
      partner_prospect_status,
      partner_prospect_id,
      partner_prospect_owner_name,
      mailing_country                               AS country,
      mailing_state                                 AS state,
      last_activity_date,
      NULL                                          AS employee_bucket,
      account_demographics_sales_segment,
      account_demographics_sales_segment_grouped,
      account_demographics_geo,
      account_demographics_region,
      account_demographics_area,
      account_demographics_segment_region_grouped,
      account_demographics_territory,
      account_demographics_employee_count,
      account_demographics_max_family_employee,
      account_demographics_upa_country,
      account_demographics_upa_state,
      account_demographics_upa_city,
      account_demographics_upa_street,
      account_demographics_upa_postal_code,
      NULL                                          AS crm_partner_id,
      NULL                                          AS ga_client_id,
      NULL                                          AS cognism_company_office_city,
      NULL                                          AS cognism_company_office_state,
      NULL                                          AS cognism_company_office_country,
      NULL                                          AS cognism_city,
      NULL                                          AS cognism_state,
      NULL                                          AS cognism_country,
      cognism_employee_count,
      NULL                                          AS leandata_matched_account_billing_state,
      NULL                                          AS leandata_matched_account_billing_postal_code,
      NULL                                          AS leandata_matched_account_billing_country,
      NULL                                          AS leandata_matched_account_employee_count,
      NULL                                          AS leandata_matched_account_sales_segment,
      zoominfo_contact_city,
      zoominfo_contact_state,
      zoominfo_contact_country,
      zoominfo_company_city,
      zoominfo_company_state,
      zoominfo_company_country,
      zoominfo_phone_number, 
      zoominfo_mobile_phone_number,
      zoominfo_do_not_call_direct_phone,
      zoominfo_do_not_call_mobile_phone,
      last_transfer_date_time,
      time_from_last_transfer_to_sequence,
      time_from_mql_to_last_transfer,
      NULL                                           AS zoominfo_company_employee_count,
      zoominfo_contact_id


    FROM sfdc_contacts
    LEFT JOIN biz_person_with_touchpoints
      ON sfdc_contacts.contact_id = biz_person_with_touchpoints.bizible_contact_id
    LEFT JOIN was_converted_lead
      ON was_converted_lead.contact_id = sfdc_contacts.contact_id
    LEFT JOIN marketo_persons
      ON sfdc_contacts.contact_id = marketo_persons.sfdc_contact_id and sfdc_type = 'Contact'

    UNION

    SELECT
      --id
      {{ dbt_utils.surrogate_key(['lead_id']) }} AS dim_crm_person_id,
      lead_id                                    AS sfdc_record_id,
      bizible_person_id                          AS bizible_person_id,
      'lead'                                     AS sfdc_record_type,
      lead_email_hash                            AS email_hash,
      email_domain,
      email_domain_type,
      marketo_lead_id,

      --keys
      master_record_id,
      owner_id,
      record_type_id,
      lean_data_matched_account                  AS dim_crm_account_id,
      NULL                                       AS reports_to_id,
      owner_id                                   AS dim_crm_user_id,

      --info
      person_score,
      behavior_score,
      title,
      it_job_title_hierarchy,
      has_opted_out_email,
      email_bounced_date,
      email_bounced_reason,
      lead_status                                AS status,
      lead_source,
      lead_source_type,
      0                                          AS was_converted_lead,
      source_buckets,
      net_new_source_categories,
      bizible_touchpoint_position,
      bizible_marketing_channel_path,
      bizible_touchpoint_date,
      marketo_last_interesting_moment,
      marketo_last_interesting_moment_date,
      outreach_step_number,
      matched_account_owner_role,
      matched_account_account_owner_name,
      matched_account_sdr_assigned,
      matched_account_type,
      matched_account_gtm_strategy,
      matched_account_bdr_prospecting_status,
      is_first_order_initial_mql,
      is_first_order_mql,
      is_first_order_person,
      last_utm_content,
      last_utm_campaign,
      sequence_step_type,
      name_of_active_sequence,
      sequence_task_due_date,
      sequence_status,
      is_actively_being_sequenced,
      is_high_priority,
      prospect_share_status,
      partner_prospect_status,
      partner_prospect_id,
      partner_prospect_owner_name,
      country,
      state,
      last_activity_date,
      employee_bucket,
      account_demographics_sales_segment,
      account_demographics_sales_segment_grouped,
      account_demographics_geo,
      account_demographics_region,
      account_demographics_area,
      account_demographics_segment_region_grouped,
      account_demographics_territory,
      account_demographics_employee_count,
      account_demographics_max_family_employee,
      account_demographics_upa_country,
      account_demographics_upa_state,
      account_demographics_upa_city,
      account_demographics_upa_street,
      account_demographics_upa_postal_code,
      crm_partner_id,
      ga_client_id,
      cognism_company_office_city,
      cognism_company_office_state,
      cognism_company_office_country,
      cognism_city,
      cognism_state,
      cognism_country,
      cognism_employee_count,
      leandata_matched_account_billing_state,
      leandata_matched_account_billing_postal_code,
      leandata_matched_account_billing_country,
      leandata_matched_account_employee_count,
      leandata_matched_account_sales_segment,
      zoominfo_contact_city,
      zoominfo_contact_state,
      zoominfo_contact_country,
      zoominfo_company_city,
      zoominfo_company_state,
      zoominfo_company_country,
      zoominfo_phone_number, 
      zoominfo_mobile_phone_number,
      zoominfo_do_not_call_direct_phone,
      zoominfo_do_not_call_mobile_phone,
      last_transfer_date_time,
      time_from_last_transfer_to_sequence,
      time_from_mql_to_last_transfer,
      zoominfo_company_employee_count,
      NULL AS zoominfo_contact_id

    FROM sfdc_leads
    LEFT JOIN biz_person_with_touchpoints
      ON sfdc_leads.lead_id = biz_person_with_touchpoints.bizible_lead_id
    LEFT JOIN marketo_persons
      ON sfdc_leads.lead_id = marketo_persons.sfdc_lead_id and sfdc_type = 'Lead'
    WHERE is_converted = 'FALSE'

), duplicates AS (

    SELECT
      dim_crm_person_id
    FROM crm_person_final
    GROUP BY 1
    HAVING COUNT(*) > 1

), final AS (

    SELECT *
    FROM crm_person_final
    WHERE dim_crm_person_id NOT IN (
                                    SELECT *
                                    FROM duplicates
                                      )
      AND sfdc_record_id != '00Q4M00000kDDKuUAO' --DQ issue: https://gitlab.com/gitlab-data/analytics/-/issues/11559

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mcooperDD",
    updated_by="@dmicovic",
    created_date="2020-12-08",
    updated_date="2023-05-30"
) }}37:T5176,WITH biz_person AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_bizible_person_source
    WHERE is_deleted = 'FALSE'

), biz_touchpoints AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_bizible_touchpoint_source
    WHERE bizible_touchpoint_position LIKE '%FT%'
     AND is_deleted = 'FALSE'

), biz_person_with_touchpoints AS (

    SELECT

      biz_touchpoints.*,
      biz_person.bizible_contact_id,
      biz_person.bizible_lead_id

    FROM biz_touchpoints
    JOIN biz_person
      ON biz_touchpoints.bizible_person_id = biz_person.person_id

), sfdc_contacts AS (

    SELECT
    

    

    sha2(
        TRIM(
            LOWER(
                contact_email || 
                ENCRYPT_RAW(
                  to_binary('SALT_EMAIL6', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS contact_email_hash,



        
    
    

    sha2(
        TRIM(
            LOWER(
                contact_name || 
                ENCRYPT_RAW(
                  to_binary('SALT_NAME8', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS contact_name_hash,



        
    
    

    "CONTACT_ID",
  "CONTACT_FIRST_NAME",
  "CONTACT_LAST_NAME",
  "EMAIL_DOMAIN",
  "EMAIL_DOMAIN_TYPE",
  "ACCOUNT_ID",
  "MASTER_RECORD_ID",
  "OWNER_ID",
  "RECORD_TYPE_ID",
  "REPORTS_TO_ID",
  "CONTACT_TITLE",
  "IT_JOB_TITLE_HIERARCHY",
  "CONTACT_ROLE",
  "MOBILE_PHONE",
  "PERSON_SCORE",
  "DEPARTMENT",
  "CONTACT_STATUS",
  "REQUESTED_CONTACT",
  "INACTIVE_CONTACT",
  "HAS_OPTED_OUT_EMAIL",
  "INVALID_EMAIL_ADDRESS",
  "EMAIL_IS_BOUNCED",
  "EMAIL_BOUNCED_DATE",
  "EMAIL_BOUNCED_REASON",
  "MAILING_ADDRESS",
  "MAILING_CITY",
  "MAILING_STATE",
  "MAILING_STATE_CODE",
  "MAILING_COUNTRY",
  "MAILING_COUNTRY_CODE",
  "MAILING_ZIP_CODE",
  "ZOOMINFO_COMPANY_ID",
  "ZOOMINFO_CONTACT_ID",
  "ZOOMINFO_COMPANY_REVENUE",
  "ZOOMINFO_COMPANY_EMPLOYEE_COUNT",
  "COGNISM_EMPLOYEE_COUNT",
  "ZOOMINFO_CONTACT_CITY",
  "ZOOMINFO_COMPANY_CITY",
  "ZOOMINFO_COMPANY_INDUSTRY",
  "ZOOMINFO_COMPANY_STATE",
  "ZOOMINFO_CONTACT_STATE",
  "ZOOMINFO_COMPANY_COUNTRY",
  "ZOOMINFO_CONTACT_COUNTRY",
  "ZOOMINFO_PHONE_NUMBER",
  "ZOOMINFO_MOBILE_PHONE_NUMBER",
  "ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE",
  "ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE",
  "USING_CE",
  "EE_TRIAL_START_DATE",
  "EE_TRIAL_END_DATE",
  "INDUSTRY",
  "RESPONDED_TO_GITHOST_PRICE_CHANGE",
  "CORE_CHECK_IN_NOTES",
  "LEAD_SOURCE",
  "LEAD_SOURCE_TYPE",
  "BEHAVIOR_SCORE",
  "OUTREACH_STAGE",
  "OUTREACH_STEP_NUMBER",
  "ACCOUNT_TYPE",
  "ASSIGNED_DATETIME",
  "MARKETO_QUALIFIED_LEAD_TIMESTAMP",
  "MARKETO_QUALIFIED_LEAD_DATETIME",
  "MARKETO_QUALIFIED_LEAD_DATE",
  "MQL_DATETIME_INFERRED",
  "INQUIRY_DATETIME",
  "INQUIRY_DATETIME_INFERRED",
  "ACCEPTED_DATETIME",
  "QUALIFYING_DATETIME",
  "QUALIFIED_DATETIME",
  "UNQUALIFIED_DATETIME",
  "NURTURE_DATETIME",
  "BAD_DATA_DATETIME",
  "WORKED_DATETIME",
  "WEB_PORTAL_PURCHASE_DATETIME",
  "MARKETO_LAST_INTERESTING_MOMENT",
  "MARKETO_LAST_INTERESTING_MOMENT_DATE",
  "LAST_UTM_CAMPAIGN",
  "LAST_UTM_CONTENT",
  "PROSPECT_SHARE_STATUS",
  "PARTNER_PROSPECT_STATUS",
  "PARTNER_PROSPECT_ID",
  "PARTNER_PROSPECT_OWNER_NAME",
  "SEQUENCE_STEP_TYPE",
  "NAME_OF_ACTIVE_SEQUENCE",
  "SEQUENCE_TASK_DUE_DATE",
  "SEQUENCE_STATUS",
  "IS_ACTIVELY_BEING_SEQUENCED",
  "IS_FIRST_ORDER_INITIAL_MQL",
  "IS_FIRST_ORDER_MQL",
  "IS_FIRST_ORDER_PERSON",
  "TRUE_INITIAL_MQL_DATE",
  "TRUE_MQL_DATE",
  "INITIAL_MARKETO_MQL_DATE_TIME",
  "LAST_TRANSFER_DATE_TIME",
  "TIME_FROM_LAST_TRANSFER_TO_SEQUENCE",
  "TIME_FROM_MQL_TO_LAST_TRANSFER",
  "IS_HIGH_PRIORITY",
  "NET_NEW_SOURCE_CATEGORIES",
  "SOURCE_BUCKETS",
  "ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT",
  "ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED",
  "ACCOUNT_DEMOGRAPHICS_GEO",
  "ACCOUNT_DEMOGRAPHICS_REGION",
  "ACCOUNT_DEMOGRAPHICS_AREA",
  "ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED",
  "ACCOUNT_DEMOGRAPHICS_TERRITORY",
  "ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT",
  "ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE",
  "ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY",
  "ACCOUNT_DEMOGRAPHICS_UPA_STATE",
  "ACCOUNT_DEMOGRAPHICS_UPA_CITY",
  "ACCOUNT_DEMOGRAPHICS_UPA_STREET",
  "ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE",
  "PATHFACTORY_EXPERIENCE_NAME",
  "PATHFACTORY_ENGAGEMENT_SCORE",
  "PATHFACTORY_CONTENT_COUNT",
  "PATHFACTORY_CONTENT_LIST",
  "PATHFACTORY_CONTENT_JOURNEY",
  "PATHFACTORY_TOPIC_LIST",
  "ACCOUNT_OWNER",
  "AE_COMMENTS",
  "BUSINESS_DEVELOPMENT_REP_NAME",
  "OUTBOUND_BUSINESS_DEVELOPMENT_REP_NAME",
  "CREATED_BY_ID",
  "CREATED_DATE",
  "IS_DELETED",
  "LAST_ACTIVITY_DATE",
  "LAST_CU_REQUEST_DATE",
  "LAST_CU_UPDATE_DATE",
  "LAST_MODIFIED_BY_ID",
  "LAST_MODIFIED_DATE",
  "SYSTEMMODSTAMP"


    FROM "PREP".sfdc.sfdc_contact_source
    WHERE is_deleted = 'FALSE'

), sfdc_leads AS (

    SELECT
    

    

    sha2(
        TRIM(
            LOWER(
                lead_email || 
                ENCRYPT_RAW(
                  to_binary('SALT_EMAIL6', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS lead_email_hash,



        
    
    

    sha2(
        TRIM(
            LOWER(
                lead_name || 
                ENCRYPT_RAW(
                  to_binary('SALT_NAME8', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS lead_name_hash,



        
    
    

    "LEAD_ID",
  "LEAD_FIRST_NAME",
  "LEAD_LAST_NAME",
  "EMAIL_DOMAIN",
  "EMAIL_DOMAIN_TYPE",
  "MASTER_RECORD_ID",
  "CONVERTED_ACCOUNT_ID",
  "CONVERTED_CONTACT_ID",
  "CONVERTED_OPPORTUNITY_ID",
  "OWNER_ID",
  "RECORD_TYPE_ID",
  "ROUND_ROBIN_ID",
  "INSTANCE_UUID",
  "LEAN_DATA_MATCHED_ACCOUNT",
  "IS_CONVERTED",
  "CONVERTED_DATE",
  "TITLE",
  "IT_JOB_TITLE_HIERARCHY",
  "IS_DO_NOT_CALL",
  "HAS_OPTED_OUT_EMAIL",
  "EMAIL_BOUNCED_DATE",
  "EMAIL_BOUNCED_REASON",
  "BEHAVIOR_SCORE",
  "LEAD_SOURCE",
  "LEAD_FROM",
  "LEAD_SOURCE_TYPE",
  "LEAD_CONVERSION_APPROVAL_STATUS",
  "STREET",
  "CITY",
  "STATE",
  "STATE_CODE",
  "COUNTRY",
  "COUNTRY_CODE",
  "POSTAL_CODE",
  "ZOOMINFO_COMPANY_COUNTRY",
  "ZOOMINFO_CONTACT_COUNTRY",
  "ZOOMINFO_COMPANY_STATE",
  "ZOOMINFO_CONTACT_STATE",
  "REQUESTED_CONTACT",
  "COMPANY",
  "ZOOMINFO_COMPANY_ID",
  "ZOOMINFO_COMPANY_REVENUE",
  "ZOOMINFO_COMPANY_EMPLOYEE_COUNT",
  "ZOOMINFO_CONTACT_CITY",
  "ZOOMINFO_COMPANY_CITY",
  "ZOOMINFO_COMPANY_INDUSTRY",
  "ZOOMINFO_PHONE_NUMBER",
  "ZOOMINFO_MOBILE_PHONE_NUMBER",
  "ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE",
  "ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE",
  "BUYING_PROCESS",
  "CORE_CHECK_IN_NOTES",
  "INDUSTRY",
  "IS_LARGE_ACCOUNT",
  "OUTREACH_STAGE",
  "OUTREACH_STEP_NUMBER",
  "IS_INTERESTED_GITLAB_EE",
  "IS_INTERESTED_IN_HOSTED",
  "ASSIGNED_DATETIME",
  "MATCHED_ACCOUNT_TOP_LIST",
  "MATCHED_ACCOUNT_OWNER_ROLE",
  "MATCHED_ACCOUNT_SDR_ASSIGNED",
  "MATCHED_ACCOUNT_GTM_STRATEGY",
  "MATCHED_ACCOUNT_BDR_PROSPECTING_STATUS",
  "MATCHED_ACCOUNT_TYPE",
  "MATCHED_ACCOUNT_ACCOUNT_OWNER_NAME",
  "MARKETO_QUALIFIED_LEAD_DATE",
  "MARKETO_QUALIFIED_LEAD_DATETIME",
  "MQL_DATETIME_INFERRED",
  "INQUIRY_DATETIME",
  "INQUIRY_DATETIME_INFERRED",
  "ACCEPTED_DATETIME",
  "QUALIFYING_DATETIME",
  "QUALIFIED_DATETIME",
  "UNQUALIFIED_DATETIME",
  "NURTURE_DATETIME",
  "BAD_DATA_DATETIME",
  "WORKED_DATETIME",
  "WEB_PORTAL_PURCHASE_DATETIME",
  "SALES_SEGMENTATION",
  "PERSON_SCORE",
  "LEAD_STATUS",
  "LAST_UTM_CAMPAIGN",
  "LAST_UTM_CONTENT",
  "CRM_PARTNER_ID",
  "PROSPECT_SHARE_STATUS",
  "PARTNER_PROSPECT_STATUS",
  "PARTNER_PROSPECT_ID",
  "PARTNER_PROSPECT_OWNER_NAME",
  "NAME_OF_ACTIVE_SEQUENCE",
  "SEQUENCE_TASK_DUE_DATE",
  "SEQUENCE_STATUS",
  "SEQUENCE_STEP_TYPE",
  "IS_ACTIVELY_BEING_SEQUENCED",
  "GA_CLIENT_ID",
  "EMPLOYEE_BUCKET",
  "IS_FIRST_ORDER_INITIAL_MQL",
  "IS_FIRST_ORDER_MQL",
  "IS_FIRST_ORDER_PERSON",
  "TRUE_INITIAL_MQL_DATE",
  "TRUE_MQL_DATE",
  "LAST_TRANSFER_DATE_TIME",
  "INITIAL_MARKETO_MQL_DATE_TIME",
  "TIME_FROM_LAST_TRANSFER_TO_SEQUENCE",
  "TIME_FROM_MQL_TO_LAST_TRANSFER",
  "IS_HIGH_PRIORITY",
  "NET_NEW_SOURCE_CATEGORIES",
  "SOURCE_BUCKETS",
  "TSP_OWNER",
  "TSP_REGION",
  "TSP_SUB_REGION",
  "TSP_TERRITORY",
  "ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT",
  "ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_DEPRECATED",
  "ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED",
  "ACCOUNT_DEMOGRAPHICS_GEO",
  "ACCOUNT_DEMOGRAPHICS_REGION",
  "ACCOUNT_DEMOGRAPHICS_AREA",
  "ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED",
  "ACCOUNT_DEMOGRAPHICS_TERRITORY",
  "ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT",
  "ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE",
  "ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY",
  "ACCOUNT_DEMOGRAPHICS_UPA_STATE",
  "ACCOUNT_DEMOGRAPHICS_UPA_CITY",
  "ACCOUNT_DEMOGRAPHICS_UPA_STREET",
  "ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE",
  "PATHFACTORY_EXPERIENCE_NAME",
  "PATHFACTORY_ENGAGEMENT_SCORE",
  "PATHFACTORY_CONTENT_COUNT",
  "PATHFACTORY_CONTENT_LIST",
  "PATHFACTORY_CONTENT_JOURNEY",
  "PATHFACTORY_TOPIC_LIST",
  "MARKETO_LAST_INTERESTING_MOMENT",
  "MARKETO_LAST_INTERESTING_MOMENT_DATE",
  "BUSINESS_DEVELOPMENT_LOOK_UP",
  "BUSINESS_DEVELOPMENT_REPRESENTATIVE_CONTACT",
  "BUSINESS_DEVELOPMENT_REPRESENTATIVE",
  "SALES_DEVELOPMENT_REPRESENTATIVE",
  "COMPETITION",
  "COGNISM_COMPANY_OFFICE_CITY",
  "COGNISM_COMPANY_OFFICE_STATE",
  "COGNISM_COMPANY_OFFICE_COUNTRY",
  "COGNISM_CITY",
  "COGNISM_STATE",
  "COGNISM_COUNTRY",
  "COGNISM_EMPLOYEE_COUNT",
  "LEANDATA_MATCHED_ACCOUNT_BILLING_STATE",
  "LEANDATA_MATCHED_ACCOUNT_BILLING_POSTAL_CODE",
  "LEANDATA_MATCHED_ACCOUNT_BILLING_COUNTRY",
  "LEANDATA_MATCHED_ACCOUNT_EMPLOYEE_COUNT",
  "LEANDATA_MATCHED_ACCOUNT_SALES_SEGMENT",
  "CREATED_BY_ID",
  "CREATED_DATE",
  "IS_DELETED",
  "LAST_ACTIVITY_DATE",
  "LAST_MODIFIED_ID",
  "LAST_MODIFIED_DATE",
  "SYSTEMMODSTAMP"


    FROM "PREP".sfdc.sfdc_lead_source
    WHERE is_deleted = 'FALSE'

),  was_converted_lead AS (

    SELECT DISTINCT
      contact_id,
      1 AS was_converted_lead
    FROM "PREP".sfdc.sfdc_contact_source
    INNER JOIN "PREP".sfdc.sfdc_lead_source
      ON sfdc_contact_source.contact_id = sfdc_lead_source.converted_contact_id

),  marketo_persons AS (

    SELECT
      marketo_lead_id,
      sfdc_type,
      sfdc_lead_id,
      sfdc_contact_id
    FROM "PREP".marketo.marketo_lead_source

),  crm_person_final AS (

    SELECT
      --id
      md5(cast(coalesce(cast(sfdc_contacts.contact_id as 
    varchar
), '') as 
    varchar
)) AS dim_crm_person_id,
      sfdc_contacts.contact_id                      AS sfdc_record_id,
      bizible_person_id                             AS bizible_person_id,
      'contact'                                     AS sfdc_record_type,
      contact_email_hash                            AS email_hash,
      email_domain,
      email_domain_type,
      marketo_lead_id,

      --keys
      master_record_id,
      owner_id,
      record_type_id,
      account_id                                    AS dim_crm_account_id,
      reports_to_id,
      owner_id                                      AS dim_crm_user_id,

      --info
      person_score,
      behavior_score,
      contact_title                                 AS title,
      it_job_title_hierarchy,
      has_opted_out_email,
      email_bounced_date,
      email_bounced_reason,
      contact_status                                AS status,
      lead_source,
      lead_source_type,
      was_converted_lead.was_converted_lead         AS was_converted_lead,
      source_buckets,
      net_new_source_categories,
      bizible_touchpoint_position,
      bizible_marketing_channel_path,
      bizible_touchpoint_date,
      marketo_last_interesting_moment,
      marketo_last_interesting_moment_date,
      outreach_step_number,
      NULL                                          AS matched_account_owner_role,
      NULL                                          AS matched_account_account_owner_name,
      NULL                                          AS matched_account_sdr_assigned,
      NULL                                          AS matched_account_type,
      NULL                                          AS matched_account_gtm_strategy,
      NULL                                          AS matched_account_bdr_prospecting_status,
      is_first_order_initial_mql,
      is_first_order_mql,
      is_first_order_person,
      last_utm_content,
      last_utm_campaign,
      sequence_step_type,
      name_of_active_sequence,
      sequence_task_due_date,
      sequence_status,
      is_actively_being_sequenced,
      is_high_priority,
      prospect_share_status,
      partner_prospect_status,
      partner_prospect_id,
      partner_prospect_owner_name,
      mailing_country                               AS country,
      mailing_state                                 AS state,
      last_activity_date,
      NULL                                          AS employee_bucket,
      account_demographics_sales_segment,
      account_demographics_sales_segment_grouped,
      account_demographics_geo,
      account_demographics_region,
      account_demographics_area,
      account_demographics_segment_region_grouped,
      account_demographics_territory,
      account_demographics_employee_count,
      account_demographics_max_family_employee,
      account_demographics_upa_country,
      account_demographics_upa_state,
      account_demographics_upa_city,
      account_demographics_upa_street,
      account_demographics_upa_postal_code,
      NULL                                          AS crm_partner_id,
      NULL                                          AS ga_client_id,
      NULL                                          AS cognism_company_office_city,
      NULL                                          AS cognism_company_office_state,
      NULL                                          AS cognism_company_office_country,
      NULL                                          AS cognism_city,
      NULL                                          AS cognism_state,
      NULL                                          AS cognism_country,
      cognism_employee_count,
      NULL                                          AS leandata_matched_account_billing_state,
      NULL                                          AS leandata_matched_account_billing_postal_code,
      NULL                                          AS leandata_matched_account_billing_country,
      NULL                                          AS leandata_matched_account_employee_count,
      NULL                                          AS leandata_matched_account_sales_segment,
      zoominfo_contact_city,
      zoominfo_contact_state,
      zoominfo_contact_country,
      zoominfo_company_city,
      zoominfo_company_state,
      zoominfo_company_country,
      zoominfo_phone_number, 
      zoominfo_mobile_phone_number,
      zoominfo_do_not_call_direct_phone,
      zoominfo_do_not_call_mobile_phone,
      last_transfer_date_time,
      time_from_last_transfer_to_sequence,
      time_from_mql_to_last_transfer,
      NULL                                           AS zoominfo_company_employee_count,
      zoominfo_contact_id


    FROM sfdc_contacts
    LEFT JOIN biz_person_with_touchpoints
      ON sfdc_contacts.contact_id = biz_person_with_touchpoints.bizible_contact_id
    LEFT JOIN was_converted_lead
      ON was_converted_lead.contact_id = sfdc_contacts.contact_id
    LEFT JOIN marketo_persons
      ON sfdc_contacts.contact_id = marketo_persons.sfdc_contact_id and sfdc_type = 'Contact'

    UNION

    SELECT
      --id
      md5(cast(coalesce(cast(lead_id as 
    varchar
), '') as 
    varchar
)) AS dim_crm_person_id,
      lead_id                                    AS sfdc_record_id,
      bizible_person_id                          AS bizible_person_id,
      'lead'                                     AS sfdc_record_type,
      lead_email_hash                            AS email_hash,
      email_domain,
      email_domain_type,
      marketo_lead_id,

      --keys
      master_record_id,
      owner_id,
      record_type_id,
      lean_data_matched_account                  AS dim_crm_account_id,
      NULL                                       AS reports_to_id,
      owner_id                                   AS dim_crm_user_id,

      --info
      person_score,
      behavior_score,
      title,
      it_job_title_hierarchy,
      has_opted_out_email,
      email_bounced_date,
      email_bounced_reason,
      lead_status                                AS status,
      lead_source,
      lead_source_type,
      0                                          AS was_converted_lead,
      source_buckets,
      net_new_source_categories,
      bizible_touchpoint_position,
      bizible_marketing_channel_path,
      bizible_touchpoint_date,
      marketo_last_interesting_moment,
      marketo_last_interesting_moment_date,
      outreach_step_number,
      matched_account_owner_role,
      matched_account_account_owner_name,
      matched_account_sdr_assigned,
      matched_account_type,
      matched_account_gtm_strategy,
      matched_account_bdr_prospecting_status,
      is_first_order_initial_mql,
      is_first_order_mql,
      is_first_order_person,
      last_utm_content,
      last_utm_campaign,
      sequence_step_type,
      name_of_active_sequence,
      sequence_task_due_date,
      sequence_status,
      is_actively_being_sequenced,
      is_high_priority,
      prospect_share_status,
      partner_prospect_status,
      partner_prospect_id,
      partner_prospect_owner_name,
      country,
      state,
      last_activity_date,
      employee_bucket,
      account_demographics_sales_segment,
      account_demographics_sales_segment_grouped,
      account_demographics_geo,
      account_demographics_region,
      account_demographics_area,
      account_demographics_segment_region_grouped,
      account_demographics_territory,
      account_demographics_employee_count,
      account_demographics_max_family_employee,
      account_demographics_upa_country,
      account_demographics_upa_state,
      account_demographics_upa_city,
      account_demographics_upa_street,
      account_demographics_upa_postal_code,
      crm_partner_id,
      ga_client_id,
      cognism_company_office_city,
      cognism_company_office_state,
      cognism_company_office_country,
      cognism_city,
      cognism_state,
      cognism_country,
      cognism_employee_count,
      leandata_matched_account_billing_state,
      leandata_matched_account_billing_postal_code,
      leandata_matched_account_billing_country,
      leandata_matched_account_employee_count,
      leandata_matched_account_sales_segment,
      zoominfo_contact_city,
      zoominfo_contact_state,
      zoominfo_contact_country,
      zoominfo_company_city,
      zoominfo_company_state,
      zoominfo_company_country,
      zoominfo_phone_number, 
      zoominfo_mobile_phone_number,
      zoominfo_do_not_call_direct_phone,
      zoominfo_do_not_call_mobile_phone,
      last_transfer_date_time,
      time_from_last_transfer_to_sequence,
      time_from_mql_to_last_transfer,
      zoominfo_company_employee_count,
      NULL AS zoominfo_contact_id

    FROM sfdc_leads
    LEFT JOIN biz_person_with_touchpoints
      ON sfdc_leads.lead_id = biz_person_with_touchpoints.bizible_lead_id
    LEFT JOIN marketo_persons
      ON sfdc_leads.lead_id = marketo_persons.sfdc_lead_id and sfdc_type = 'Lead'
    WHERE is_converted = 'FALSE'

), duplicates AS (

    SELECT
      dim_crm_person_id
    FROM crm_person_final
    GROUP BY 1
    HAVING COUNT(*) > 1

), final AS (

    SELECT *
    FROM crm_person_final
    WHERE dim_crm_person_id NOT IN (
                                    SELECT *
                                    FROM duplicates
                                      )
      AND sfdc_record_id != '00Q4M00000kDDKuUAO' --DQ issue: https://gitlab.com/gitlab-data/analytics/-/issues/11559

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@dmicovic'::VARCHAR       AS updated_by,
      '2020-12-08'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final38:T429,{{ config(
    tags=["mnpi_exception"]
) }}

WITH source_data AS (

    SELECT *
    FROM {{ ref('prep_sfdc_account') }}
    WHERE dim_parent_sales_segment_name_source IS NOT NULL
    
), unioned AS (

    SELECT DISTINCT
      {{ dbt_utils.surrogate_key(['dim_parent_sales_segment_name_source']) }}   AS dim_sales_segment_id,
      dim_parent_sales_segment_name_source                                      AS sales_segment_name,
      dim_parent_sales_segment_grouped_source                                   AS sales_segment_grouped
    FROM source_data
    
    UNION ALL

    SELECT
      MD5('-1')                                                                 AS dim_sales_segment_id,
      'Missing sales_segment_name'                                              AS sales_segment_name,
      'Missing sales_segment_grouped'                                           AS sales_segment_grouped

)

{{ dbt_audit(
    cte_ref="unioned",
    created_by="@mcooperDD",
    updated_by="@lisvinueza",
    created_date="2020-12-18",
    updated_date="2023-05-21"
) }}39:T523,

WITH source_data AS (

    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_sfdc_account
    WHERE dim_parent_sales_segment_name_source IS NOT NULL
    
), unioned AS (

    SELECT DISTINCT
      md5(cast(coalesce(cast(dim_parent_sales_segment_name_source as 
    varchar
), '') as 
    varchar
))   AS dim_sales_segment_id,
      dim_parent_sales_segment_name_source                                      AS sales_segment_name,
      dim_parent_sales_segment_grouped_source                                   AS sales_segment_grouped
    FROM source_data
    
    UNION ALL

    SELECT
      MD5('-1')                                                                 AS dim_sales_segment_id,
      'Missing sales_segment_name'                                              AS sales_segment_name,
      'Missing sales_segment_grouped'                                           AS sales_segment_grouped

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2020-12-18'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM unioned3a:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}3c:T5510,WITH sfdc_lead AS (

    SELECT *
    FROM {{ref('sfdc_lead_source') }}

), sfdc_contact AS (

    SELECT *
    FROM {{ref('sfdc_contact_source') }}

), sfdc_account AS (

    SELECT *
    FROM {{ref('sfdc_account_source') }}

), marketo AS (

    SELECT *
    FROM {{ref('marketo_lead_source') }}
    
), crm_account AS (

    SELECT *
    FROM {{ref('dim_crm_account') }}

), sales_segment AS (

    SELECT *
    FROM {{ref('prep_sales_segment') }}

), crm_person AS (

    SELECT *
    FROM {{ref('prep_crm_person') }}

), gitlab_users AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_users_source') }}

), customer_db_source AS (

    SELECT *
    FROM {{ref('customers_db_customers_source') }}

), zuora_contact_source AS (

    SELECT *
    FROM {{ref('zuora_contact_source') }}

), zuora_account_source AS (

    SELECT *
    FROM {{ref('zuora_account_source') }}

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM {{ref('driveload_marketing_dnc_list_source')}}
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['emails.email_address']) }}                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      {{ days_buckets('days_since_saas_signup') }}                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      {{ days_buckets('days_since_self_managed_owner_signup') }}                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2023-06-19"
) }}3d:T5da8,WITH sfdc_lead AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_lead_source

), sfdc_contact AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_contact_source

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source

), marketo AS (

    SELECT *
    FROM "PREP".marketo.marketo_lead_source
    
), crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), sales_segment AS (

    SELECT *
    FROM "PROD".common_prep.prep_sales_segment

), crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), gitlab_users AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT *
    FROM "PREP".customers.customers_db_customers_source

), zuora_contact_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_account_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM "PREP".driveload.driveload_marketing_dnc_list_source
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      md5(cast(coalesce(cast(emails.email_address as 
    varchar
), '') as 
    varchar
))                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      CASE 
  WHEN days_since_saas_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_signup > 1095
    THEN '[12] 3+ Years'
END                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      CASE 
  WHEN days_since_self_managed_owner_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_self_managed_owner_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_self_managed_owner_signup > 1095
    THEN '[12] 3+ Years'
END                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM finalc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.dim_marketing_contact"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"dim_marketing_contact"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],null,["$","dd",null,{"className":"detail-value","children":"untagged"}]]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PREP.sensitive.dim_marketing_contact"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"1 GB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 09:10UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"A dimension table for marketing contacts, combining contacts from GitLab.com, Salesforce, CustomerDB, and Zuora Sources."}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"DIM_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":5,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":8,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":9,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":10,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":11,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":12,"name":"MARKETO_LEAD_ID","comment":null,"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":13,"name":"IS_MARKETO_LEAD","comment":null,"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":14,"name":"IS_MARKETO_EMAIL_HARD_BOUNCED","comment":null,"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":15,"name":"MARKETO_EMAIL_HARD_BOUNCED_DATE","comment":null,"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":16,"name":"IS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":17,"name":"IS_MARKETO_OPTED_IN","comment":null,"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":18,"name":"HAS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":19,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":20,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":21,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PTPT_CONTACT_MARKETO":{"type":"BOOLEAN","index":22,"name":"IS_PTPT_CONTACT_MARKETO","comment":null,"display_name":"is_ptpt_contact_marketo"},"IS_PTP_CONTACT_MARKETO":{"type":"BOOLEAN","index":23,"name":"IS_PTP_CONTACT_MARKETO","comment":null,"display_name":"is_ptp_contact_marketo"},"IS_IMPACTED_BY_USER_LIMIT_MARKETO":{"type":"BOOLEAN","index":24,"name":"IS_IMPACTED_BY_USER_LIMIT_MARKETO","comment":null,"display_name":"is_impacted_by_user_limit_marketo"},"IS_CURRENTLY_IN_TRIAL_MARKETO":{"type":"BOOLEAN","index":25,"name":"IS_CURRENTLY_IN_TRIAL_MARKETO","comment":null,"display_name":"is_currently_in_trial_marketo"},"TRIAL_START_DATE_MARKETO":{"type":"DATE","index":26,"name":"TRIAL_START_DATE_MARKETO","comment":null,"display_name":"trial_start_date_marketo"},"TRIAL_END_DATE_MARKETO":{"type":"DATE","index":27,"name":"TRIAL_END_DATE_MARKETO","comment":null,"display_name":"trial_end_date_marketo"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":28,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_RECORD_ID":{"type":"TEXT","index":29,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":30,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":31,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"MOBILE_PHONE":{"type":"TEXT","index":32,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":33,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":34,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":35,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":36,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":37,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":38,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":39,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":40,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":41,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":42,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":43,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":44,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":45,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":46,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":47,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":48,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":49,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":50,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":51,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":52,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":53,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"DNC_LIST_RESULT":{"type":"TEXT","index":54,"name":"DNC_LIST_RESULT","comment":null,"display_name":"dnc_list_result"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":55,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":56,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"CREATED_BY":{"type":"TEXT","index":57,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1261721088,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_marketing_contact","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.days_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","dim_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/dim_marketing_contact.sql","original_file_path":"models/common/sensitive/dim_marketing_contact.sql","name":"dim_marketing_contact","alias":"dim_marketing_contact","checksum":{"name":"sha256","checksum":"2cf8e313c4a64673b3780dac0bcffd6f46d21244d42c4263aba32674d460b42c"},"tags":[],"refs":[["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_account_source"],["sfdc_account_source"],["marketo_lead_source"],["marketo_lead_source"],["dim_crm_account"],["dim_crm_account"],["prep_sales_segment"],["prep_sales_segment"],["prep_crm_person"],["prep_crm_person"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_account_source"],["zuora_account_source"],["driveload_marketing_dnc_list_source"],["driveload_marketing_dnc_list_source"]],"sources":[],"metrics":[],"description":"A dimension table for marketing contacts, combining contacts from GitLab.com, Salesforce, CustomerDB, and Zuora Sources.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/dim_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.211765,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.dim_marketing_contact","label":"dim_marketing_contact"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"MART_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"IS_GROUP_NAMESPACE_OWNER":{"type":"BOOLEAN","index":2,"name":"is_group_namespace_owner","comment":null,"description":"Flags if group namespace owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace_owner"},"IS_GROUP_NAMESPACE_MEMBER":{"type":"BOOLEAN","index":3,"name":"is_group_namespace_member","comment":null,"description":"Flags if group namespace member","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace_member"},"IS_INDIVIDUAL_NAMESPACE_OWNER":{"type":"BOOLEAN","index":4,"name":"is_individual_namespace_owner","comment":null,"description":"Flags if personal namespace owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_individual_namespace_owner"},"IS_GROUP_MAINTAINER_OF_SAAS_PAID_TIER":{"type":"BOOLEAN","index":5,"name":"is_group_maintainer_of_saas_paid_tier","comment":null,"description":"Flags if group maintainer of a SaaS paid tier namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas_paid_tier"},"IS_GROUP_MAINTAINER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":6,"name":"is_group_maintainer_of_saas_free_tier","comment":null,"description":"Flags if group maintainer of a SaaS free tier namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas_free_tier"},"IS_GROUP_MAINTAINER_OF_SAAS":{"type":"BOOLEAN","index":7,"name":"is_group_maintainer_of_saas","comment":null,"description":"Flags if group maintainer of a SaaS namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas"},"IS_CUSTOMER_DB_OWNER":{"type":"BOOLEAN","index":8,"name":"is_customer_db_owner","comment":null,"description":"Flags if customer db owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_owner"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":9,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"DAYS_SINCE_SAAS_TRIAL_ENDED":{"type":"NUMBER","index":10,"name":"days_since_saas_trial_ended","comment":null,"description":"Number of days since saas trial ended","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_trial_ended"},"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET":{"type":"TEXT","index":11,"name":"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET","comment":null,"display_name":"days_since_saas_trial_ended_bucket"},"DAYS_UNTIL_SAAS_TRIAL_ENDS":{"type":"NUMBER","index":12,"name":"days_until_saas_trial_ends","comment":null,"description":"Number of days until saas trial ends","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_until_saas_trial_ends"},"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET":{"type":"TEXT","index":13,"name":"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET","comment":null,"display_name":"days_until_saas_trial_ends_bucket"},"INDIVIDUAL_NAMESPACE_IS_SAAS_TRIAL":{"type":"BOOLEAN","index":14,"name":"individual_namespace_is_saas_trial","comment":null,"description":"Flags if individual namespace is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_trial"},"INDIVIDUAL_NAMESPACE_IS_SAAS_FREE_TIER":{"type":"BOOLEAN","index":15,"name":"individual_namespace_is_saas_free_tier","comment":null,"description":"Flags if individual namespace is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_free_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":16,"name":"individual_namespace_is_saas_bronze_tier","comment":null,"description":"Flags if individual namespace is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_bronze_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":17,"name":"individual_namespace_is_saas_premium_tier","comment":null,"description":"Flags if individual namespace is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_premium_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":18,"name":"individual_namespace_is_saas_ultimate_tier","comment":null,"description":"Flags if individual namespace is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_ultimate_tier"},"GROUP_MEMBER_OF_SAAS_TRIAL":{"type":"BOOLEAN","index":19,"name":"group_member_of_saas_trial","comment":null,"description":"Flags if namespace of group member is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_trial"},"GROUP_MEMBER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":20,"name":"group_member_of_saas_free_tier","comment":null,"description":"Flags if namespace of group member is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_free_tier"},"GROUP_MEMBER_OF_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":21,"name":"group_member_of_saas_bronze_tier","comment":null,"description":"Flags if namespace of group member is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_bronze_tier"},"GROUP_MEMBER_OF_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":22,"name":"group_member_of_saas_premium_tier","comment":null,"description":"Flags if namespace of group member is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_premium_tier"},"GROUP_MEMBER_OF_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":23,"name":"group_member_of_saas_ultimate_tier","comment":null,"description":"Flags if namespace of group member is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_ultimate_tier"},"GROUP_OWNER_OF_SAAS_TRIAL":{"type":"BOOLEAN","index":24,"name":"group_owner_of_saas_trial","comment":null,"description":"Flags if namespace of group owner is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_trial"},"GROUP_OWNER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":25,"name":"group_owner_of_saas_free_tier","comment":null,"description":"Flags if namespace of group owner is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_free_tier"},"GROUP_OWNER_OF_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":26,"name":"group_owner_of_saas_bronze_tier","comment":null,"description":"Flags if namespace of group owner is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_bronze_tier"},"GROUP_OWNER_OF_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":27,"name":"group_owner_of_saas_premium_tier","comment":null,"description":"Flags if namespace of group owner is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_premium_tier"},"GROUP_OWNER_OF_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":28,"name":"group_owner_of_saas_ultimate_tier","comment":null,"description":"Flags if namespace of group owner is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_ultimate_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_TRIAL":{"type":"BOOLEAN","index":29,"name":"responsible_for_group_saas_trial","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_trial"},"RESPONSIBLE_FOR_GROUP_SAAS_FREE_TIER":{"type":"BOOLEAN","index":30,"name":"responsible_for_group_saas_free_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_free_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":31,"name":"responsible_for_group_saas_bronze_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_bronze_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":32,"name":"responsible_for_group_saas_premium_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_premium_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":33,"name":"responsible_for_group_saas_ultimate_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_ultimate_tier"},"IS_SELF_MANAGED_STARTER_TIER":{"type":"BOOLEAN","index":34,"name":"is_self_managed_starter_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on starter tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_starter_tier"},"IS_SELF_MANAGED_PREMIUM_TIER":{"type":"BOOLEAN","index":35,"name":"is_self_managed_premium_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on premium tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_premium_tier"},"IS_SELF_MANAGED_ULTIMATE_TIER":{"type":"BOOLEAN","index":36,"name":"is_self_managed_ultimate_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on ultimate tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_ultimate_tier"},"HAS_NAMESPACE_SETUP_FOR_COMPANY_USE":{"type":"BOOLEAN","index":37,"name":"has_namespace_setup_for_company_use","comment":null,"description":"If True, the marketing contact is a member of a namespace that has been checked for company use","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_namespace_setup_for_company_use"},"HAS_NAMESPACE_WITH_PUBLIC_PROJECT":{"type":"BOOLEAN","index":38,"name":"has_namespace_with_public_project","comment":null,"description":"If True, the marketing contact is a member of a namespace that has at least one public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_namespace_with_public_project"},"HAS_FREE_NAMESPACE_WITH_PUBLIC_PROJECT":{"type":"BOOLEAN","index":39,"name":"has_free_namespace_with_public_project","comment":null,"description":"If True, the marketing contact is a member of a Free namespace that has at least one public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_free_namespace_with_public_project"},"IS_MEMBER_OF_PUBLIC_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":40,"name":"is_member_of_public_ultimate_parent_namespace","comment":null,"description":"If True, the marketing contact is a member of an ultimate parent namespace that is public.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_member_of_public_ultimate_parent_namespace"},"IS_MEMBER_OF_PRIVATE_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":41,"name":"is_member_of_private_ultimate_parent_namespace","comment":null,"description":"If True, the marketing contact is a member of an ultimate parent namespace that is private.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_member_of_private_ultimate_parent_namespace"},"PUBLIC_ULTIMATE_PARENT_NAMESPACES":{"type":"ARRAY","index":42,"name":"public_ultimate_parent_namespaces","comment":null,"description":"Array containing all the public ultimate parent namespaces the marketing contact is a member of.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"public_ultimate_parent_namespaces"},"PRIVATE_ULTIMATE_PARENT_NAMESPACES":{"type":"ARRAY","index":43,"name":"private_ultimate_parent_namespaces","comment":null,"description":"Array containing all the private ultimate parent namespaces the marketing contact is a member of.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"private_ultimate_parent_namespaces"},"ROLE_TIER_ULTIMATE_NAMESPACE_TEXT":{"type":"ARRAY","index":44,"name":"ROLE_TIER_ULTIMATE_NAMESPACE_TEXT","comment":null,"display_name":"role_tier_ultimate_namespace_text"},"IS_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":45,"name":"IS_SAAS_BRONZE_TIER","comment":null,"display_name":"is_saas_bronze_tier"},"IS_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":46,"name":"IS_SAAS_PREMIUM_TIER","comment":null,"display_name":"is_saas_premium_tier"},"IS_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":47,"name":"IS_SAAS_ULTIMATE_TIER","comment":null,"display_name":"is_saas_ultimate_tier"},"IS_BRONZE_STARTER_TIER":{"type":"BOOLEAN","index":48,"name":"IS_BRONZE_STARTER_TIER","comment":null,"display_name":"is_bronze_starter_tier"},"IS_PREMIUM_TIER":{"type":"BOOLEAN","index":49,"name":"IS_PREMIUM_TIER","comment":null,"display_name":"is_premium_tier"},"IS_ULTIMATE_TIER":{"type":"BOOLEAN","index":50,"name":"IS_ULTIMATE_TIER","comment":null,"display_name":"is_ultimate_tier"},"IS_SAAS_DELIVERY":{"type":"BOOLEAN","index":51,"name":"IS_SAAS_DELIVERY","comment":null,"display_name":"is_saas_delivery"},"IS_SELF_MANAGED_DELIVERY":{"type":"BOOLEAN","index":52,"name":"IS_SELF_MANAGED_DELIVERY","comment":null,"display_name":"is_self_managed_delivery"},"IS_SAAS_FREE_TIER":{"type":"BOOLEAN","index":53,"name":"IS_SAAS_FREE_TIER","comment":null,"display_name":"is_saas_free_tier"},"IS_PAID_TIER":{"type":"BOOLEAN","index":54,"name":"IS_PAID_TIER","comment":null,"display_name":"is_paid_tier"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":55,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PAID_TIER_CHANGE":{"type":"BOOLEAN","index":56,"name":"is_paid_tier_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_paid_tier flag is set to True OR the is_paid_tier flag is set to False and the is_paid_tier_marketo set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_tier_change"},"MIN_SUBSCRIPTION_START_DATE":{"type":"DATE","index":57,"name":"min_subscription_start_date","comment":null,"description":"Earliest subscription start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"min_subscription_start_date"},"MAX_SUBSCRIPTION_END_DATE":{"type":"DATE","index":58,"name":"max_subscription_end_date","comment":null,"description":"Latest subscription end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_subscription_end_date"},"NBR_OF_PAID_SUBSCRIPTIONS":{"type":"NUMBER","index":59,"name":"nbr_of_paid_subscriptions","comment":null,"description":"Number of paid subscriptions the user is on","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"nbr_of_paid_subscriptions"},"RESPONSIBLE_FOR_FREE_TIER_ONLY":{"type":"BOOLEAN","index":60,"name":"responsible_for_free_tier_only","comment":null,"description":"Flags if responsible for or individual namespace of only free tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_free_tier_only"},"EMAIL_ADDRESS":{"type":"TEXT","index":61,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":62,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":63,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":64,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":65,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"SFDC_RECORD_ID":{"type":"TEXT","index":66,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":67,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"JOB_TITLE":{"type":"TEXT","index":68,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":69,"name":"it_job_title_hierarchy","comment":null,"description":"$13","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":70,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"MOBILE_PHONE":{"type":"TEXT","index":71,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":72,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":73,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":74,"name":"marketo_lead_id","comment":null,"description":"Marketo id assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":75,"name":"is_marketo_lead","comment":null,"description":"Flags if marketo lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":76,"name":"is_marketo_email_hard_bounced","comment":null,"description":"Flags if marketing contact email has hard bounced","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":77,"name":"marketo_email_hard_bounced_date","comment":null,"description":"Date when the marketing contact email hard bounced","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":78,"name":"is_marketo_unsubscribed","comment":null,"description":"A flag indicating if a lead is unsubscribed in Marketo","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":79,"name":"is_marketo_opted_in","comment":null,"description":"Flag if a lead in marketo is opted in. This can be false and `has_marketo_unsubscribed` can be false as a lead could have started unsubscribed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":80,"name":"has_marketo_unsubscribed","comment":null,"description":"A flag to indicate if a lead in Marketo has been unsubscribed either the preference center or other method","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":81,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":82,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":83,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":84,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":85,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":86,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":87,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":88,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":89,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":90,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":91,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":92,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":93,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":94,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":95,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":96,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":97,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":98,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"IS_PQL":{"type":"BOOLEAN","index":99,"name":"IS_PQL","comment":null,"display_name":"is_pql"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":100,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PQL_CHANGE":{"type":"BOOLEAN","index":101,"name":"is_pql_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_pql flag is set to True OR the is_pql flag is set to False and the is_pql_marketo flag set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_pql_change"},"PQL_NAMESPACE_ID":{"type":"NUMBER","index":102,"name":"pql_namespace_id","comment":null,"description":"Namespace id of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_id"},"PQL_NAMESPACE_NAME":{"type":"TEXT","index":103,"name":"pql_namespace_name","comment":null,"description":"Namespace name of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_name"},"PQL_NAMESPACE_NAME_MASKED":{"type":"TEXT","index":104,"name":"pql_namespace_name_masked","comment":null,"description":"Masked version of PQL namespace_name. Field created to be used in mart_marketing_contact_no_pii.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_name_masked"},"PQL_PRODUCT_INTERACTION":{"type":"TEXT","index":105,"name":"pql_product_interaction","comment":null,"description":"Type of product interaction that the PQL had. As of now, it can either be SaaS Trial or Hand Raise PQL.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_product_interaction"},"PQL_LIST_STAGES":{"type":"ARRAY","index":106,"name":"pql_list_stages","comment":null,"description":"List of product stages adopted by the PQL namespace. It only counts the events done before any conversion was done (if any), SMAU events and events done in the first year of the creation of the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_list_stages"},"PQL_NBR_STAGES":{"type":"NUMBER","index":107,"name":"pql_nbr_stages","comment":null,"description":"Number of product stages adopted by the PQL namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_stages"},"PQL_NBR_NAMESPACE_USERS":{"type":"NUMBER","index":108,"name":"pql_nbr_namespace_users","comment":null,"description":"Current member count of the PQL namespace. This is calculated using the data in the Gitlab.com members table based on the number of accepted invites. If this number is zero, this is replaced to be 1 as all namespaces have at least one member, the creator.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_namespace_users"},"PQL_TRIAL_START_DATE":{"type":"DATE","index":109,"name":"pql_trial_start_date","comment":null,"description":"Trial start date of the PQL namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_trial_start_date"},"PQL_MIN_SUBSCRIPTION_START_DATE":{"type":"DATE","index":110,"name":"PQL_MIN_SUBSCRIPTION_START_DATE","comment":null,"display_name":"pql_min_subscription_start_date"},"PQL_EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":111,"name":"pql_event_created_at","comment":null,"description":"Date that the PQL lead was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_event_created_at"},"PQL_NBR_INTEGRATIONS_INSTALLED":{"type":"NUMBER","index":112,"name":"pql_nbr_integrations_installed","comment":null,"description":"Number of integrations services installed in the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_integrations_installed"},"PQL_INTEGRATIONS_INSTALLED":{"type":"ARRAY","index":113,"name":"pql_integrations_installed","comment":null,"description":"List of all the integrations services installed in the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_integrations_installed"},"PQL_NAMESPACE_CREATOR_JOB_DESCRIPTION":{"type":"TEXT","index":114,"name":"pql_namespace_creator_job_description","comment":null,"description":"Namespace creator job description of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_creator_job_description"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":115,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":116,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":117,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":118,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":119,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":120,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":121,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"IS_PTPT_CONTACT":{"type":"BOOLEAN","index":122,"name":"is_ptpt_contact","comment":null,"description":"Flag if marketing contact has a ptpt score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptpt_contact"},"IS_PTPT_CONTACT_CHANGE":{"type":"BOOLEAN","index":123,"name":"IS_PTPT_CONTACT_CHANGE","comment":null,"display_name":"is_ptpt_contact_change"},"PTPT_NAMESPACE_ID":{"type":"TEXT","index":124,"name":"ptpt_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase Trial score. More information on the propensity to purchase project can be seen [HERE](https://docs.google.com/presentation/d/1EyS9Wq6F0qlQwt5sj7x8VnSSGD1vIy3AcSpMGddZdbk/edit#slide=id.g13222807856_0_0)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_namespace_id"},"PTPT_SCORE_GROUP":{"type":"NUMBER","index":125,"name":"ptpt_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptpt_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_score_group"},"PTPT_INSIGHTS":{"type":"TEXT","index":126,"name":"ptpt_insights","comment":null,"description":"Top explanatory insights for the ptpt_namespace_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_insights"},"PTPT_SCORE_DATE":{"type":"DATE","index":127,"name":"ptpt_score_date","comment":null,"description":"Date the ptpt_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_score_date"},"PTPT_PAST_SCORE_GROUP":{"type":"NUMBER","index":128,"name":"ptpt_past_score_group","comment":null,"description":"Past ptpt_score_group given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_past_score_group"},"PTPT_PAST_SCORE_DATE":{"type":"DATE","index":129,"name":"ptpt_past_score_date","comment":null,"description":"Past ptpt_score_date given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_past_score_date"},"IS_PTPF_CONTACT":{"type":"BOOLEAN","index":130,"name":"is_ptpf_contact","comment":null,"description":"Flag if marketing contact has a ptpf score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptpf_contact"},"PTPF_NAMESPACE_ID":{"type":"TEXT","index":131,"name":"ptpf_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase Free score.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_namespace_id"},"PTPF_SCORE_GROUP":{"type":"NUMBER","index":132,"name":"ptpf_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptpf_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_score_group"},"PTPF_SCORE_DATE":{"type":"DATE","index":133,"name":"ptpf_score_date","comment":null,"description":"Date the ptpf_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_score_date"},"PTPF_PAST_SCORE_GROUP":{"type":"NUMBER","index":134,"name":"ptpf_past_score_group","comment":null,"description":"Past ptpf_score_group given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_past_score_group"},"PTPF_PAST_SCORE_DATE":{"type":"DATE","index":135,"name":"ptpf_past_score_date","comment":null,"description":"Past ptpf_score_date givene to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_past_score_date"},"IS_PTP_CONTACT":{"type":"BOOLEAN","index":136,"name":"is_ptp_contact","comment":null,"description":"Flag if marketing contact has a ptp score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptp_contact"},"IS_PTP_CONTACT_CHANGE":{"type":"BOOLEAN","index":137,"name":"is_ptp_contact_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_ptp_contact flag is set to True OR the is_ptp_contact flag is set to False and the is_ptp_contact_marketo flag set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptp_contact_change"},"PTP_NAMESPACE_ID":{"type":"TEXT","index":138,"name":"ptp_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase score. This is in turn a combination of the ptpt and ptpf scores and is the score that will be ultimately shown in SFDC. More information on how the scores where combined can be found in the documentation of the prep_ptp_scores_by_user dbt model.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_namespace_id"},"PTP_SCORE_GROUP":{"type":"NUMBER","index":139,"name":"ptp_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptp_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_score_group"},"PTP_SCORE_DATE":{"type":"DATE","index":140,"name":"ptp_score_date","comment":null,"description":"Date the ptp_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_score_date"},"PTP_INSIGHTS":{"type":"TEXT","index":141,"name":"ptp_insights","comment":null,"description":"Top explanatory insights for the ptp_namespace_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_insights"},"PTP_PAST_INSIGHTS":{"type":"TEXT","index":142,"name":"ptp_past_insights","comment":null,"description":"Top explanatory insights for the past score given to the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_insights"},"PTP_PAST_SCORE_GROUP":{"type":"NUMBER","index":143,"name":"ptp_past_score_group","comment":null,"description":"Past ptp_score_group assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_score_group"},"PTP_PAST_SCORE_DATE":{"type":"DATE","index":144,"name":"ptp_past_score_date","comment":null,"description":"Past ptp_score_date assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_score_date"},"PTP_DAYS_SINCE_TRIAL_START":{"type":"TEXT","index":145,"name":"ptp_days_since_trial_start","comment":null,"description":"Days since last trial started. Currently, only filled for marketing contacts with `ptp_source = Free`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_days_since_trial_start"},"PTP_SOURCE":{"type":"TEXT","index":146,"name":"ptp_source","comment":null,"description":"The source of the score. Currently, only two values are possible, Free (PtPF model) or Trial (PtPT model)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_source"},"USER_LIMIT_NAMESPACE_ID":{"type":"NUMBER","index":147,"name":"user_limit_namespace_id","comment":null,"description":"Namespace id corresponding to the user limit campaign","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_namespace_id"},"USER_LIMIT_NOTIFICATION_AT":{"type":"TIMESTAMP_NTZ","index":148,"name":"user_limit_notification_at","comment":null,"description":"Date time indicating when the marketing contact user_limit_namespace_id entered the user limit notification state. More information about this field can be seen [HERE](https://gitlab.com/gitlab-org/gitlab/-/issues/375748)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_notification_at"},"USER_LIMIT_ENFORCEMENT_AT":{"type":"TIMESTAMP_NTZ","index":149,"name":"user_limit_enforcement_at","comment":null,"description":"Date time indicating when the marketing contact user_limit_namespace_id entered the user limit enforcement state. More information about this field can be seen [HERE](https://gitlab.com/gitlab-org/gitlab/-/issues/375748)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_enforcement_at"},"IS_IMPACTED_BY_USER_LIMIT":{"type":"BOOLEAN","index":150,"name":"is_impacted_by_user_limit","comment":null,"description":"Flag that indicates if marketing contact is affected by namespace user limit campaign","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_impacted_by_user_limit"},"IS_IMPACTED_BY_USER_LIMIT_CHANGE":{"type":"BOOLEAN","index":151,"name":"IS_IMPACTED_BY_USER_LIMIT_CHANGE","comment":null,"display_name":"is_impacted_by_user_limit_change"},"USAGE_UMAU_28_DAYS_USER":{"type":"NUMBER","index":152,"name":"USAGE_UMAU_28_DAYS_USER","comment":null,"display_name":"usage_umau_28_days_user"},"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":153,"name":"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"usage_action_monthly_active_users_project_repo_28_days_user"},"USAGE_MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":154,"name":"USAGE_MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"usage_merge_requests_28_days_user"},"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":155,"name":"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"usage_commit_comment_all_time_event"},"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":156,"name":"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"usage_source_code_pushes_all_time_event"},"USAGE_CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"USAGE_CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipelines_28_days_user"},"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":158,"name":"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_internal_pipelines_28_days_user"},"USAGE_CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":159,"name":"USAGE_CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"usage_ci_builds_28_days_user"},"USAGE_CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":160,"name":"USAGE_CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"usage_ci_builds_all_time_user"},"USAGE_CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"USAGE_CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_builds_all_time_event"},"USAGE_CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"USAGE_CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_runners_all_time_event"},"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":163,"name":"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"usage_auto_devops_enabled_all_time_event"},"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":164,"name":"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"usage_template_repositories_all_time_event"},"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":165,"name":"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipeline_config_repository_28_days_user"},"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":166,"name":"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"usage_user_unique_users_all_secure_scanners_28_days_user"},"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":167,"name":"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_container_scanning_jobs_28_days_user"},"USAGE_USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":168,"name":"USAGE_USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_sast_jobs_28_days_user"},"USAGE_USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":169,"name":"USAGE_USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dast_jobs_28_days_user"},"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":170,"name":"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dependency_scanning_jobs_28_days_user"},"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":171,"name":"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_license_management_jobs_28_days_user"},"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":172,"name":"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_secret_detection_jobs_28_days_user"},"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":173,"name":"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"usage_projects_with_packages_all_time_event"},"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":174,"name":"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"usage_projects_with_packages_28_days_event"},"USAGE_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":175,"name":"USAGE_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"usage_deployments_28_days_user"},"USAGE_RELEASES_28_DAYS_USER":{"type":"NUMBER","index":176,"name":"USAGE_RELEASES_28_DAYS_USER","comment":null,"display_name":"usage_releases_28_days_user"},"USAGE_EPICS_28_DAYS_USER":{"type":"NUMBER","index":177,"name":"USAGE_EPICS_28_DAYS_USER","comment":null,"display_name":"usage_epics_28_days_user"},"USAGE_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":178,"name":"USAGE_ISSUES_28_DAYS_USER","comment":null,"display_name":"usage_issues_28_days_user"},"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED":{"type":"NUMBER","index":179,"name":"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED","comment":null,"display_name":"usage_instance_user_count_not_aligned"},"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED":{"type":"NUMBER","index":180,"name":"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED","comment":null,"display_name":"usage_historical_max_users_not_aligned"},"LEAD_STATUS":{"type":"TEXT","index":181,"name":"LEAD_STATUS","comment":null,"display_name":"lead_status"},"LEAD_SOURCE":{"type":"TEXT","index":182,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"PREV_HASH":{"type":"TEXT","index":183,"name":"PREV_HASH","comment":null,"display_name":"prev_hash"},"LAST_CHANGED":{"type":"TIMESTAMP_LTZ","index":184,"name":"LAST_CHANGED","comment":null,"display_name":"last_changed"},"CREATED_BY":{"type":"TEXT","index":185,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":186,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":187,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":188,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":189,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":190,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"role_tier_text":{"name":"role_tier_text","description":"Json array of the person's roles and product tiers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role_tier_text"},"role_tier_namespace_text":{"name":"role_tier_namespace_text","description":"Json array of the person's roles and namespaces and product tiers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role_tier_namespace_text"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2033378816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_marketing_contact","raw_sql":"$14","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.hash_diff","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.bdg_marketing_contact_order","model.gitlab_snowflake.bdg_marketing_contact_order","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_ptpt_scores_by_user","model.gitlab_snowflake.prep_ptpt_scores_by_user","model.gitlab_snowflake.prep_ptpf_scores_by_user","model.gitlab_snowflake.prep_ptpf_scores_by_user","model.gitlab_snowflake.prep_ptp_scores_by_user","model.gitlab_snowflake.prep_ptp_scores_by_user","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","mart_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/mart_marketing_contact.sql","original_file_path":"models/common/sensitive/mart_marketing_contact.sql","name":"mart_marketing_contact","alias":"mart_marketing_contact","checksum":{"name":"sha256","checksum":"82f4387b0d23609d1e098201843c1ab45ea28ba701ac9a5eab34193c76ed905d"},"tags":["product"],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["bdg_marketing_contact_order"],["bdg_marketing_contact_order"],["dim_namespace"],["dim_namespace"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["customers_db_charges_xf"],["customers_db_charges_xf"],["customers_db_trials"],["customers_db_trials"],["customers_db_leads_source"],["customers_db_leads_source"],["fct_event_user_daily"],["fct_event_user_daily"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"],["prep_project"],["prep_project"],["prep_ptpt_scores_by_user"],["prep_ptpt_scores_by_user"],["prep_ptpf_scores_by_user"],["prep_ptpf_scores_by_user"],["prep_ptp_scores_by_user"],["prep_ptp_scores_by_user"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_namespace_details_source"]],"sources":[],"metrics":[],"description":"This table aggregates data from namespaces, orders, and subscriptions to the level of a marketing contact. Therefore a marketing contact can fall into multiple plan types. An individual could be a Free Individual namespace owner, a member of an Ultimate Group Namespace, and an Owner of a Premium Group Namespace. Each column aggregates data to answers a specific question at the contact level.\n\nAll the usage metrics, fields prefixed by `usage_` come from the latest month of data from the Self-Managed Usage Ping data. This data is related to marketing contact by the user that makes the order in the customers portal or the billing account related to the subscription_id  of the self-managed instance. In case there are multiple self-managed instances per user, then these are summed.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/mart_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["product"]},"created_at":1689033756.29843,"compiled_sql":"$15","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.mart_marketing_contact","label":"mart_marketing_contact"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ROLE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"USER_ID":{"type":"NUMBER","index":3,"name":"user_id","comment":null,"description":"GitLab.com user id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_id"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"customer_db_customer_id","comment":null,"description":"Customer DB customer id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"namespace_id","comment":null,"description":"Gitlab.com namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"ZUORA_BILLING_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"zuora_billing_account_id","comment":null,"description":"Zuora billing account id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_billing_account_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":7,"name":"marketing_contact_role","comment":null,"description":"Role of the marketing contact. A marketing contact can have many roles. Could be 'Personal Namespace Owner', Group Namespace Owner', 'Group Namespace Member', 'Group Namespace Maintainer', 'Customer DB Owner', 'Zuora Billing Contact'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketing_contact_role"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:33UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":814894080,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_role","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_role"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_role.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_role.sql","name":"bdg_marketing_contact_role","alias":"bdg_marketing_contact_role","checksum":{"name":"sha256","checksum":"e555905c1956abb5024b7a48afbad97f4bc0ee59f3e012af876674204fed8088"},"tags":[],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["dim_marketing_contact"],["dim_marketing_contact"],["prep_namespace"],["prep_namespace"]],"sources":[],"metrics":[],"description":"A bridge table that lists all roles for the marketing contacts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_role.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.216212,"compiled_sql":"$17","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_role","label":"bdg_marketing_contact_role"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ORDER","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":2,"name":"MARKETING_CONTACT_ROLE","comment":null,"display_name":"marketing_contact_role"},"EMAIL_ADDRESS":{"type":"TEXT","index":3,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"dim_namespace_id","comment":null,"description":"Namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"NAMESPACE_PATH":{"type":"TEXT","index":5,"name":"namespace_path","comment":null,"description":"Namespace path associated to the user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"IS_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":6,"name":"IS_ULTIMATE_PARENT_NAMESPACE","comment":null,"display_name":"is_ultimate_parent_namespace"},"IS_INDIVIDUAL_NAMESPACE":{"type":"NUMBER","index":7,"name":"is_individual_namespace","comment":null,"description":"Flags if the namespace id is individual (and not a group)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_individual_namespace"},"IS_GROUP_NAMESPACE":{"type":"NUMBER","index":8,"name":"is_group_namespace","comment":null,"description":"Flags if the namespace id a group","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":9,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"DOES_NAMESPACE_HAVE_PUBLIC_PROJECT":{"type":"BOOLEAN","index":10,"name":"DOES_NAMESPACE_HAVE_PUBLIC_PROJECT","comment":null,"display_name":"does_namespace_have_public_project"},"DOES_FREE_NAMESPACE_HAVE_PUBLIC_PROJECT":{"type":"BOOLEAN","index":11,"name":"DOES_FREE_NAMESPACE_HAVE_PUBLIC_PROJECT","comment":null,"display_name":"does_free_namespace_have_public_project"},"IS_ULTIMATE_PARENT_NAMESPACE_PUBLIC":{"type":"BOOLEAN","index":12,"name":"IS_ULTIMATE_PARENT_NAMESPACE_PUBLIC","comment":null,"display_name":"is_ultimate_parent_namespace_public"},"IS_ULTIMATE_PARENT_NAMESPACE_PRIVATE":{"type":"BOOLEAN","index":13,"name":"IS_ULTIMATE_PARENT_NAMESPACE_PRIVATE","comment":null,"display_name":"is_ultimate_parent_namespace_private"},"CUSTOMER_ID":{"type":"NUMBER","index":14,"name":"customer_id","comment":null,"description":"Customer DB customer id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":15,"name":"dim_billing_account_id","comment":null,"description":"zuora billing account id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":16,"name":"dim_subscription_id","comment":null,"description":"zuora subscription id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":17,"name":"subscription_start_date","comment":null,"description":"zuora subscription start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":18,"name":"subscription_end_date","comment":null,"description":"zuora subscription end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SAAS_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"saas_product_tier","comment":null,"description":"Product tier name if it is SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_product_tier"},"SELF_MANAGED_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"self_managed_product_tier","comment":null,"description":"Product tier name if it is Self-Managed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"self_managed_product_tier"},"IS_SAAS_TRIAL":{"type":"NUMBER","index":21,"name":"is_saas_trial","comment":null,"description":"Flags if it is a SaaS trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_trial"},"TRIAL_END_DATE":{"type":"DATE","index":22,"name":"trial_end_date","comment":null,"description":"Date the SaaS trial expires.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"trial_end_date"},"DAYS_SINCE_SAAS_TRIAL_ENDED":{"type":"NUMBER","index":23,"name":"days_since_saas_trial_ended","comment":null,"description":"Number of days since SaaS trial expired.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_trial_ended"},"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET":{"type":"TEXT","index":24,"name":"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET","comment":null,"display_name":"days_since_saas_trial_ended_bucket"},"DAYS_UNTIL_SAAS_TRIAL_ENDS":{"type":"NUMBER","index":25,"name":"days_until_saas_trial_ends","comment":null,"description":"Number of days until SaaS trial expires.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_until_saas_trial_ends"},"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET":{"type":"TEXT","index":26,"name":"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET","comment":null,"display_name":"days_until_saas_trial_ends_bucket"},"IS_SAAS_FREE_TIER":{"type":"NUMBER","index":27,"name":"is_saas_free_tier","comment":null,"description":"Flags if product tier is SaaS free.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_free_tier"},"IS_SAAS_BRONZE_TIER":{"type":"NUMBER","index":28,"name":"is_saas_bronze_tier","comment":null,"description":"Flags if product tier is SaaS bronze.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_bronze_tier"},"IS_SAAS_PREMIUM_TIER":{"type":"NUMBER","index":29,"name":"is_saas_premium_tier","comment":null,"description":"Flags if product tier is SaaS premium.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_premium_tier"},"IS_SAAS_ULTIMATE_TIER":{"type":"NUMBER","index":30,"name":"is_saas_ultimate_tier","comment":null,"description":"Flags if product tier is SaaS ultimate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_ultimate_tier"},"IS_SELF_MANAGED_STARTER_TIER":{"type":"NUMBER","index":31,"name":"is_self_managed_starter_tier","comment":null,"description":"Flags if product tier is Self-Managed starter.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_starter_tier"},"IS_SELF_MANAGED_PREMIUM_TIER":{"type":"NUMBER","index":32,"name":"is_self_managed_premium_tier","comment":null,"description":"Flags if product tier is Self_Managed premium.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_premium_tier"},"IS_SELF_MANAGED_ULTIMATE_TIER":{"type":"NUMBER","index":33,"name":"is_self_managed_ultimate_tier","comment":null,"description":"Flags if product tier is Self-Managed ultimate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_ultimate_tier"},"USAGE_UMAU_28_DAYS_USER":{"type":"NUMBER","index":34,"name":"USAGE_UMAU_28_DAYS_USER","comment":null,"display_name":"usage_umau_28_days_user"},"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":35,"name":"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"usage_action_monthly_active_users_project_repo_28_days_user"},"USAGE_MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":36,"name":"USAGE_MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"usage_merge_requests_28_days_user"},"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":37,"name":"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"usage_commit_comment_all_time_event"},"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":38,"name":"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"usage_source_code_pushes_all_time_event"},"USAGE_CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":39,"name":"USAGE_CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipelines_28_days_user"},"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":40,"name":"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_internal_pipelines_28_days_user"},"USAGE_CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":41,"name":"USAGE_CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"usage_ci_builds_28_days_user"},"USAGE_CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":42,"name":"USAGE_CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"usage_ci_builds_all_time_user"},"USAGE_CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":43,"name":"USAGE_CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_builds_all_time_event"},"USAGE_CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":44,"name":"USAGE_CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_runners_all_time_event"},"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":45,"name":"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"usage_auto_devops_enabled_all_time_event"},"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":46,"name":"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"usage_template_repositories_all_time_event"},"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":47,"name":"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipeline_config_repository_28_days_user"},"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":48,"name":"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"usage_user_unique_users_all_secure_scanners_28_days_user"},"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":49,"name":"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_container_scanning_jobs_28_days_user"},"USAGE_USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":50,"name":"USAGE_USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_sast_jobs_28_days_user"},"USAGE_USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":51,"name":"USAGE_USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dast_jobs_28_days_user"},"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":52,"name":"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dependency_scanning_jobs_28_days_user"},"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":53,"name":"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_license_management_jobs_28_days_user"},"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":54,"name":"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_secret_detection_jobs_28_days_user"},"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":55,"name":"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"usage_projects_with_packages_all_time_event"},"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":56,"name":"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"usage_projects_with_packages_28_days_event"},"USAGE_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":57,"name":"USAGE_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"usage_deployments_28_days_user"},"USAGE_RELEASES_28_DAYS_USER":{"type":"NUMBER","index":58,"name":"USAGE_RELEASES_28_DAYS_USER","comment":null,"display_name":"usage_releases_28_days_user"},"USAGE_EPICS_28_DAYS_USER":{"type":"NUMBER","index":59,"name":"USAGE_EPICS_28_DAYS_USER","comment":null,"display_name":"usage_epics_28_days_user"},"USAGE_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":60,"name":"USAGE_ISSUES_28_DAYS_USER","comment":null,"display_name":"usage_issues_28_days_user"},"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED":{"type":"NUMBER","index":61,"name":"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED","comment":null,"display_name":"usage_instance_user_count_not_aligned"},"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED":{"type":"NUMBER","index":62,"name":"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED","comment":null,"display_name":"usage_historical_max_users_not_aligned"},"CREATED_BY":{"type":"TEXT","index":63,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":64,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":65,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":66,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":67,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":68,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":989317120,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_order","raw_sql":"$18","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.days_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.bdg_marketing_contact_role","model.gitlab_snowflake.bdg_marketing_contact_role","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.bdg_self_managed_order_subscription","model.gitlab_snowflake.bdg_self_managed_order_subscription"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_order"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_order.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_order.sql","name":"bdg_marketing_contact_order","alias":"bdg_marketing_contact_order","checksum":{"name":"sha256","checksum":"e1ad79244f74f8c3d2d7508052f69696086f8beac379dc101e80d18b35914dbf"},"tags":["product"],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["bdg_marketing_contact_role"],["bdg_marketing_contact_role"],["prep_namespace"],["prep_namespace"],["prep_project"],["prep_project"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["fct_ping_instance_metric_wave_monthly"],["fct_ping_instance_metric_wave_monthly"],["bdg_namespace_order_subscription"],["bdg_namespace_order_subscription"],["bdg_self_managed_order_subscription"],["bdg_self_managed_order_subscription"]],"sources":[],"metrics":[],"description":"A bridge table that lists all the orders, subsciptions, and namespaces per role per contact.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_order.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["product"]},"created_at":1689033756.2294703,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_order","label":"bdg_marketing_contact_order"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"POC_PUMP_MARKETING_CONTACT_NAMESPACE_DETAIL","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"EMAIL_ADDRESS","comment":null,"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"COUNTRY":{"type":"TEXT","index":5,"name":"COUNTRY","comment":null,"display_name":"country"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"COMPANY_NAME","comment":null,"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"JOB_TITLE","comment":null,"display_name":"job_title"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":8,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_USER_NAME":{"type":"TEXT","index":9,"name":"GITLAB_USER_NAME","comment":null,"display_name":"gitlab_user_name"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":10,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":11,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":12,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":13,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":14,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"IS_PQL":{"type":"BOOLEAN","index":15,"name":"IS_PQL","comment":null,"display_name":"is_pql"},"MAX_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":16,"name":"max_trial_start_date","comment":null,"description":"The most recent trial start date across all the namespaces associated with the marketing_contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_trial_start_date"},"NAMESPACES_ARRAY":{"type":"ARRAY","index":17,"name":"namespaces_array","comment":null,"description":"$1a","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespaces_array"},"PREV_HASH":{"type":"TEXT","index":18,"name":"PREV_HASH","comment":null,"display_name":"prev_hash"},"LAST_CHANGED":{"type":"TIMESTAMP_LTZ","index":19,"name":"LAST_CHANGED","comment":null,"display_name":"last_changed"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:50UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":318652416,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.poc_pump_marketing_contact_namespace_detail","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.hash_diff","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.ptpt_scores","model.gitlab_snowflake.ptpt_scores","model.gitlab_snowflake.ptpf_scores","model.gitlab_snowflake.ptpf_scores","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","poc_pump_marketing_contact_namespace_detail"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","original_file_path":"models/common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","name":"poc_pump_marketing_contact_namespace_detail","alias":"poc_pump_marketing_contact_namespace_detail","checksum":{"name":"sha256","checksum":"b4c6a11217caa9a515d07b42f1e6819823a5b4717d2314ade4e35276553606fd"},"tags":[],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["dim_namespace"],["dim_namespace"],["ptpt_scores"],["ptpt_scores"],["ptpf_scores"],["ptpf_scores"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["customers_db_trials"],["customers_db_trials"],["customers_db_charges_xf"],["customers_db_charges_xf"],["customers_db_leads_source"],["customers_db_leads_source"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"],["prep_project"],["prep_project"],["fct_event_user_daily"],["fct_event_user_daily"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table contains information of the marketing contact (email address) and namespace information for Gitlab.com users. The grain of the table is one row per email address, the namespace details are then stored in an array of JSON objects.  Only the ultimate parent namespaces are being synced into the namespace details array. If an user has access only to a subgroup of a ultimate parent namespace, the ultimate namespace is not linked to the ultimate namespace. For example, user A is a member of the sub group namespace 2. The ultimate parent namespace of namespace 2 is namespace 1. Since user A is only a direct member of namespace 2 and namespace 2 is not an ultimate namespace, user A has no namespaces listed in the namespace array list.  ","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.3011067,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.poc_pump_marketing_contact_namespace_detail","label":"poc_pump_marketing_contact_namespace_detail"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_MARKETING","name":"NAMESPACE_COMPANY_BASE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"USER_ID","comment":null,"display_name":"user_id"},"USER_TYPE":{"type":"NUMBER","index":2,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"MEMBERSHIP_SOURCE_TYPE":{"type":"TEXT","index":3,"name":"MEMBERSHIP_SOURCE_TYPE","comment":null,"display_name":"membership_source_type"},"ACCESS_LEVEL":{"type":"NUMBER","index":4,"name":"ACCESS_LEVEL","comment":null,"display_name":"access_level"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":5,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":6,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"CREATOR_ID":{"type":"NUMBER","index":7,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"RELATIONSHIP_TYPE":{"type":"TEXT","index":8,"name":"RELATIONSHIP_TYPE","comment":null,"display_name":"relationship_type"},"IS_CREATOR":{"type":"BOOLEAN","index":9,"name":"IS_CREATOR","comment":null,"display_name":"is_creator"},"IS_OWNER":{"type":"BOOLEAN","index":10,"name":"IS_OWNER","comment":null,"display_name":"is_owner"},"COMPANY_ID":{"type":"TEXT","index":11,"name":"COMPANY_ID","comment":null,"display_name":"company_id"},"CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"CRM_ACCOUNT_ID","comment":null,"display_name":"crm_account_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:58UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":214398464,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.namespace_company_base","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.wk_bdg_user_company","model.gitlab_snowflake.wk_bdg_user_company","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"workspace_marketing","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_marketing","fqn":["gitlab_snowflake","workspaces","workspace_marketing","namespace_account_matching","namespace_company_base"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_marketing/namespace_account_matching/namespace_company_base.sql","original_file_path":"models/workspaces/workspace_marketing/namespace_account_matching/namespace_company_base.sql","name":"namespace_company_base","alias":"namespace_company_base","checksum":{"name":"sha256","checksum":"4d2259bd632eb00116c23402481ab79d5c05009e3f49c92bc6bfd2b7fef22b13"},"tags":["workspace","mnpi_exception"],"refs":[["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["dim_namespace"],["dim_namespace"],["wk_bdg_user_company"],["wk_bdg_user_company"],["dim_marketing_contact"],["dim_marketing_contact"],["dim_crm_account"],["dim_crm_account"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_marketing/namespace_account_matching/namespace_company_base.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_marketing","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033684.1327882,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_marketing.namespace_company_base","label":"namespace_company_base"},{"metadata":{"type":"BASE TABLE","schema":"SHARE","name":"GITLAB_USER_OUTBOUND","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ROW_INTEGER":{"type":"NUMBER","index":1,"name":"row_integer","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"row_integer"},"FIRST_NAME":{"type":"TEXT","index":2,"name":"first_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":3,"name":"last_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":4,"name":"users_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"users_name"},"EMAIL_ID":{"type":"TEXT","index":5,"name":"email_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_id"},"INTERNAL_VALUE1":{"type":"BOOLEAN","index":6,"name":"internal_value1","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"internal_value1"},"INTERNAL_VALUE2":{"type":"NUMBER","index":7,"name":"internal_value2","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"internal_value2"},"COMPANY_NAME":{"type":"TEXT","index":8,"name":"company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"PARENT_COMPANY_NAME":{"type":"TEXT","index":9,"name":"parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_company_name"},"EMAIL_TYPE":{"type":"TEXT","index":10,"name":"email_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_type"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":276680192,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_user_outbound","raw_sql":"$1f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_user_preferences","model.gitlab_snowflake.gitlab_dotcom_user_preferences","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_users_xf","model.gitlab_snowflake.gitlab_dotcom_users_xf","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"share","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"share","fqn":["gitlab_snowflake","share","gitlab_user_outbound"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"share/gitlab_user_outbound.sql","original_file_path":"models/share/gitlab_user_outbound.sql","name":"gitlab_user_outbound","alias":"gitlab_user_outbound","checksum":{"name":"sha256","checksum":"7bd7e16c305b53ad6e22e20a1782f288927d33ad1adc113e60b2ffa930a5157a"},"tags":["mnpi_exception"],"refs":[["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_user_preferences"],["gitlab_dotcom_user_preferences"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["gitlab_dotcom_users_xf"],["gitlab_dotcom_users_xf"],["dim_marketing_contact"],["dim_marketing_contact"],["dim_crm_account"],["dim_crm_account"]],"sources":[],"metrics":[],"description":"Provides gitlab user data with business emails to zoominfo.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/share/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/share/gitlab_user_outbound.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"share","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033765.1880994,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".share.gitlab_user_outbound","label":"gitlab_user_outbound"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_MARKETING","name":"WK_FCT_USER_NAMESPACE_ACCOUNT_COMPANY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_NAMESPACE_ACCOUNT_COMPANY_PK":{"type":"TEXT","index":1,"name":"user_namespace_account_company_pk","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_namespace_account_company_pk"},"DIM_USER_SK":{"type":"TEXT","index":2,"name":"DIM_USER_SK","comment":null,"display_name":"dim_user_sk"},"DIM_NAMESPACE_SK":{"type":"TEXT","index":3,"name":"DIM_NAMESPACE_SK","comment":null,"display_name":"dim_namespace_sk"},"DIM_COMPANY_SK":{"type":"TEXT","index":4,"name":"DIM_COMPANY_SK","comment":null,"display_name":"dim_company_sk"},"DIM_CRM_ACCOUNT_SK":{"type":"TEXT","index":5,"name":"DIM_CRM_ACCOUNT_SK","comment":null,"display_name":"dim_crm_account_sk"},"USER_ID":{"type":"NUMBER","index":6,"name":"USER_ID","comment":null,"display_name":"user_id"},"NAMESPACE_ID":{"type":"NUMBER","index":7,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"COMPANY_ID":{"type":"TEXT","index":8,"name":"COMPANY_ID","comment":null,"display_name":"company_id"},"CRM_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"CRM_ACCOUNT_ID","comment":null,"display_name":"crm_account_id"},"IS_BILLABLE":{"type":"BOOLEAN","index":10,"name":"IS_BILLABLE","comment":null,"display_name":"is_billable"},"ACCESS_LEVEL":{"type":"NUMBER","index":11,"name":"ACCESS_LEVEL","comment":null,"display_name":"access_level"},"ACCESS_LEVEL_NAME":{"type":"TEXT","index":12,"name":"ACCESS_LEVEL_NAME","comment":null,"display_name":"access_level_name"},"IS_CREATOR":{"type":"BOOLEAN","index":13,"name":"IS_CREATOR","comment":null,"display_name":"is_creator"},"IS_OWNER":{"type":"BOOLEAN","index":14,"name":"IS_OWNER","comment":null,"display_name":"is_owner"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:50UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2614292992,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.wk_fct_user_namespace_account_company","raw_sql":"$21","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.wk_bdg_user_company","model.gitlab_snowflake.wk_bdg_user_company","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.gitlab_dotcom_access_levels_source","model.gitlab_snowflake.gitlab_dotcom_access_levels_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_marketing","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_marketing","fqn":["gitlab_snowflake","workspaces","workspace_marketing","namespace_account_matching","wk_fct_user_namespace_account_company"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_marketing/namespace_account_matching/wk_fct_user_namespace_account_company.sql","original_file_path":"models/workspaces/workspace_marketing/namespace_account_matching/wk_fct_user_namespace_account_company.sql","name":"wk_fct_user_namespace_account_company","alias":"wk_fct_user_namespace_account_company","checksum":{"name":"sha256","checksum":"a3bfcff2db0019359780623201fe3ea9e1598f9169f61f2a08fe54eef34a9568"},"tags":["workspace","mnpi_exception"],"refs":[["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["dim_namespace"],["dim_namespace"],["wk_bdg_user_company"],["wk_bdg_user_company"],["dim_marketing_contact"],["dim_marketing_contact"],["gitlab_dotcom_access_levels_source"],["gitlab_dotcom_access_levels_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_marketing/namespace_account_matching/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_marketing/namespace_account_matching/wk_fct_user_namespace_account_company.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_marketing","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033733.306022,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_marketing.wk_fct_user_namespace_account_company","label":"wk_fct_user_namespace_account_company"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_MARKETING_CONTACT_NO_PII","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EMAIL_ADDRESS_HASH":{"type":"TEXT","index":1,"name":"EMAIL_ADDRESS_HASH","comment":null,"display_name":"email_address_hash"},"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":2,"name":"DIM_MARKETING_CONTACT_ID","comment":null,"display_name":"dim_marketing_contact_id"},"COMPANY_NAME":{"type":"TEXT","index":3,"name":"COMPANY_NAME","comment":null,"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":4,"name":"JOB_TITLE","comment":null,"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":5,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":6,"name":"COUNTRY","comment":null,"display_name":"country"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":7,"name":"SFDC_PARENT_SALES_SEGMENT","comment":null,"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":8,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":9,"name":"MARKETO_LEAD_ID","comment":null,"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":10,"name":"IS_MARKETO_LEAD","comment":null,"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":11,"name":"IS_MARKETO_EMAIL_HARD_BOUNCED","comment":null,"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":12,"name":"MARKETO_EMAIL_HARD_BOUNCED_DATE","comment":null,"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":13,"name":"IS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":14,"name":"IS_MARKETO_OPTED_IN","comment":null,"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":15,"name":"HAS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":16,"name":"MARKETO_COMPLIANCE_SEGMENT_VALUE","comment":null,"display_name":"marketo_compliance_segment_value"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":17,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":18,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PTPT_CONTACT_MARKETO":{"type":"BOOLEAN","index":19,"name":"IS_PTPT_CONTACT_MARKETO","comment":null,"display_name":"is_ptpt_contact_marketo"},"IS_PTP_CONTACT_MARKETO":{"type":"BOOLEAN","index":20,"name":"IS_PTP_CONTACT_MARKETO","comment":null,"display_name":"is_ptp_contact_marketo"},"IS_IMPACTED_BY_USER_LIMIT_MARKETO":{"type":"BOOLEAN","index":21,"name":"IS_IMPACTED_BY_USER_LIMIT_MARKETO","comment":null,"display_name":"is_impacted_by_user_limit_marketo"},"IS_CURRENTLY_IN_TRIAL_MARKETO":{"type":"BOOLEAN","index":22,"name":"IS_CURRENTLY_IN_TRIAL_MARKETO","comment":null,"display_name":"is_currently_in_trial_marketo"},"TRIAL_START_DATE_MARKETO":{"type":"DATE","index":23,"name":"TRIAL_START_DATE_MARKETO","comment":null,"display_name":"trial_start_date_marketo"},"TRIAL_END_DATE_MARKETO":{"type":"DATE","index":24,"name":"TRIAL_END_DATE_MARKETO","comment":null,"display_name":"trial_end_date_marketo"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":25,"name":"IS_SFDC_LEAD_CONTACT","comment":null,"display_name":"is_sfdc_lead_contact"},"SFDC_RECORD_ID":{"type":"TEXT","index":26,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":27,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":28,"name":"SFDC_LEAD_CONTACT","comment":null,"display_name":"sfdc_lead_contact"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":29,"name":"SFDC_CREATED_DATE","comment":null,"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":30,"name":"IS_SFDC_OPTED_OUT","comment":null,"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":31,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":32,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":33,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":34,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":35,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":36,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":37,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":38,"name":"DAYS_SINCE_SAAS_SIGNUP","comment":null,"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":39,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":40,"name":"IS_CUSTOMER_DB_USER","comment":null,"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":41,"name":"CUSTOMER_DB_CUSTOMER_ID","comment":null,"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":42,"name":"CUSTOMER_DB_CREATED_DATE","comment":null,"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":43,"name":"CUSTOMER_DB_CONFIRMED_DATE","comment":null,"display_name":"customer_db_confirmed_date"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":44,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP","comment":null,"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":45,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":46,"name":"IS_ZUORA_BILLING_CONTACT","comment":null,"display_name":"is_zuora_billing_contact"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":47,"name":"ZUORA_CONTACT_ID","comment":null,"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":48,"name":"ZUORA_CREATED_DATE","comment":null,"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":49,"name":"ZUORA_ACTIVE_STATE","comment":null,"display_name":"zuora_active_state"},"DNC_LIST_RESULT":{"type":"TEXT","index":50,"name":"DNC_LIST_RESULT","comment":null,"display_name":"dnc_list_result"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":51,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":52,"name":"WIP_INVALID_EMAIL_ADDRESS_REASON","comment":null,"display_name":"wip_invalid_email_address_reason"},"CREATED_BY":{"type":"TEXT","index":53,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":54,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":55,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":56,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":57,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":58,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1335474176,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_marketing_contact_no_pii","raw_sql":"{{ config(\n    tags=[\"mnpi_exception\"]\n) }}\n\nWITH dim_marketing_contact AS (\n  \n    SELECT\n      {{ hash_of_column('EMAIL_ADDRESS') }}\n      {{ dbt_utils.star(from=ref('dim_marketing_contact'), except=['EMAIL_ADDRESS', 'FIRST_NAME', 'LAST_NAME', 'GITLAB_USER_NAME',\n      'MOBILE_PHONE', 'CREATED_BY', 'UPDATED_BY', 'MODEL_CREATED_DATE', 'MODEL_UPDATED_DATE', 'DBT_UPDATED_AT', 'DBT_CREATED_AT']) }}\n    FROM {{ ref('dim_marketing_contact') }}\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"dim_marketing_contact\",\n    created_by=\"@jpeguero\",\n    updated_by=\"@jpeguero\",\n    created_date=\"2022-04-06\",\n    updated_date=\"2022-04-19\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.hash_of_column","macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_local","sales_and_marketing","dim_marketing_contact_no_pii"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_local/sales_and_marketing/dim_marketing_contact_no_pii.sql","original_file_path":"models/common/dimensions_local/sales_and_marketing/dim_marketing_contact_no_pii.sql","name":"dim_marketing_contact_no_pii","alias":"dim_marketing_contact_no_pii","checksum":{"name":"sha256","checksum":"e98eb0962c93779981aac245d0f30535ace1b7d478bd3e2776403aee92fc1ab7"},"tags":["mnpi_exception"],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["dim_marketing_contact"],["dim_marketing_contact"]],"sources":[],"metrics":[],"description":"Non sensitive version of the dim_marketing_contact model.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_local/sales_and_marketing/dim_marketing_contact_no_pii.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033750.7299724,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_marketing_contact_no_pii","label":"dim_marketing_contact_no_pii"}],"test":[{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"dim_marketing_contact_id","model":"{{ get_where_subquery(ref('dim_marketing_contact')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_marketing_contact"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","sensitive","unique_dim_marketing_contact_dim_marketing_contact_id"],"unique_id":"test.gitlab_snowflake.unique_dim_marketing_contact_dim_marketing_contact_id.e1eb6f4583","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_dim_marketing_contact_dim_marketing_contact_id.sql","original_file_path":"models/common/sensitive/schema.yml","name":"unique_dim_marketing_contact_dim_marketing_contact_id","alias":"unique_dim_marketing_contact_dim_marketing_contact_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_marketing_contact"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/schema.yml/unique_dim_marketing_contact_dim_marketing_contact_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033756.3221493,"compiled_sql":"\n    \n    \n\nselect\n    dim_marketing_contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"PREP\".sensitive.dim_marketing_contact\nwhere dim_marketing_contact_id is not null\ngroup by dim_marketing_contact_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_marketing_contact_id","file_key_name":"models.dim_marketing_contact","label":"unique_dim_marketing_contact_dim_marketing_contact_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_marketing_contact_id","model":"{{ get_where_subquery(ref('dim_marketing_contact')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_marketing_contact"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","sensitive","not_null_dim_marketing_contact_dim_marketing_contact_id"],"unique_id":"test.gitlab_snowflake.not_null_dim_marketing_contact_dim_marketing_contact_id.b30246dd1e","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_marketing_contact_dim_marketing_contact_id.sql","original_file_path":"models/common/sensitive/schema.yml","name":"not_null_dim_marketing_contact_dim_marketing_contact_id","alias":"not_null_dim_marketing_contact_dim_marketing_contact_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_marketing_contact"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/schema.yml/not_null_dim_marketing_contact_dim_marketing_contact_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033756.3265162,"compiled_sql":"\n    \n    \n\n\n\nselect dim_marketing_contact_id\nfrom \"PREP\".sensitive.dim_marketing_contact\nwhere dim_marketing_contact_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_marketing_contact_id","file_key_name":"models.dim_marketing_contact","label":"not_null_dim_marketing_contact_dim_marketing_contact_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"email_address","model":"{{ get_where_subquery(ref('dim_marketing_contact')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_marketing_contact"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","sensitive","unique_dim_marketing_contact_email_address"],"unique_id":"test.gitlab_snowflake.unique_dim_marketing_contact_email_address.7e60495d9d","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_dim_marketing_contact_email_address.sql","original_file_path":"models/common/sensitive/schema.yml","name":"unique_dim_marketing_contact_email_address","alias":"unique_dim_marketing_contact_email_address","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_marketing_contact"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/schema.yml/unique_dim_marketing_contact_email_address.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033756.3305433,"compiled_sql":"\n    \n    \n\nselect\n    email_address as unique_field,\n    count(*) as n_records\n\nfrom \"PREP\".sensitive.dim_marketing_contact\nwhere email_address is not null\ngroup by email_address\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"email_address","file_key_name":"models.dim_marketing_contact","label":"unique_dim_marketing_contact_email_address"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"email_address","model":"{{ get_where_subquery(ref('dim_marketing_contact')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_marketing_contact"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","sensitive","not_null_dim_marketing_contact_email_address"],"unique_id":"test.gitlab_snowflake.not_null_dim_marketing_contact_email_address.bda77f7939","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_marketing_contact_email_address.sql","original_file_path":"models/common/sensitive/schema.yml","name":"not_null_dim_marketing_contact_email_address","alias":"not_null_dim_marketing_contact_email_address","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_marketing_contact"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/schema.yml/not_null_dim_marketing_contact_email_address.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033756.3340452,"compiled_sql":"\n    \n    \n\n\n\nselect email_address\nfrom \"PREP\".sensitive.dim_marketing_contact\nwhere email_address is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"email_address","file_key_name":"models.dim_marketing_contact","label":"not_null_dim_marketing_contact_email_address"}],"exposure":[{"fqn":["gitlab_snowflake","marts","pumps_sensitive","pump_marketing_contact"],"unique_id":"exposure.gitlab_snowflake.pump_marketing_contact","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/pumps_sensitive/pump_exposures.yml","original_file_path":"models/marts/pumps_sensitive/pump_exposures.yml","name":"pump_marketing_contact","type":"application","owner":{"email":"gitlab_id@amy.waller","name":"Amy Waller"},"resource_type":"exposure","description":"Send to Marketo for use in email campaigns\n","maturity":"low","meta":{},"tags":[],"url":null,"depends_on":{"macros":[],"nodes":["model.gitlab_snowflake.mart_marketing_contact","model.gitlab_snowflake.dim_marketing_contact"]},"refs":[["mart_marketing_contact"],["dim_marketing_contact"]],"sources":[],"created_at":1689033729.3406167,"label":"pump_marketing_contact"}]},"node":{"resource_type":"model","name":"dim_marketing_contact","unique_id":"model.gitlab_snowflake.dim_marketing_contact"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"CUSTOMERS","name":"CUSTOMERS_DB_CUSTOMERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CUSTOMER_ID":{"type":"NUMBER","index":1,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"customer_id"},"CUSTOMER_FIRST_NAME":{"type":"TEXT","index":2,"name":"customer_first_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_first_name"},"CUSTOMER_LAST_NAME":{"type":"TEXT","index":3,"name":"customer_last_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_last_name"},"CUSTOMER_EMAIL":{"type":"TEXT","index":4,"name":"customer_email","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_email"},"CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"customer_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_created_at"},"CUSTOMER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"customer_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_updated_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":7,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"current_sign_in_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"last_sign_in_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_sign_in_at"},"CUSTOMER_PROVIDER":{"type":"TEXT","index":10,"name":"CUSTOMER_PROVIDER","comment":null,"display_name":"customer_provider"},"CUSTOMER_PROVIDER_USER_ID":{"type":"TEXT","index":11,"name":"CUSTOMER_PROVIDER_USER_ID","comment":null,"display_name":"customer_provider_user_id"},"ZUORA_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"zuora_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_account_id"},"COUNTRY":{"type":"TEXT","index":13,"name":"COUNTRY","comment":null,"display_name":"country"},"STATE":{"type":"TEXT","index":14,"name":"STATE","comment":null,"display_name":"state"},"CITY":{"type":"TEXT","index":15,"name":"CITY","comment":null,"display_name":"city"},"VAT_CODE":{"type":"TEXT","index":16,"name":"VAT_CODE","comment":null,"display_name":"vat_code"},"COMPANY":{"type":"TEXT","index":17,"name":"COMPANY","comment":null,"display_name":"company"},"COMPANY_SIZE":{"type":"TEXT","index":18,"name":"COMPANY_SIZE","comment":null,"display_name":"company_size"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":19,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"CUSTOMER_IS_BILLABLE":{"type":"BOOLEAN","index":20,"name":"CUSTOMER_IS_BILLABLE","comment":null,"display_name":"customer_is_billable"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"salesforce_account_id":{"name":"salesforce_account_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"salesforce_account_id"},"billable":{"name":"billable","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billable"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_customers_source","raw_sql":"$24","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.customers.customers_db_customers"]},"config":{"enabled":true,"alias":null,"schema":"customers","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"customers","fqn":["gitlab_snowflake","sources","customers","customers_db_customers_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/customers/customers_db_customers_source.sql","original_file_path":"models/sources/customers/customers_db_customers_source.sql","name":"customers_db_customers_source","alias":"customers_db_customers_source","checksum":{"name":"sha256","checksum":"c86673f73b373e1ab6a8dcfaa2a29493006dd689c0fca6757037ba2b22256e24"},"tags":["sources"],"refs":[],"sources":[["customers","customers_db_customers"]],"metrics":[],"description":"This model is the data from tap-postgres for the customers table from customers.gitlab.com. The schema of the database is defined in [this ruby code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/master/db/schema.rb).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/customers/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/customers_db_customers_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"customers","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033748.403538,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".customers.customers_db_customers_source","label":"customers_db_customers_source"},{"metadata":{"type":"VIEW","schema":"SFDC","name":"SFDC_ACCOUNT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"ACCOUNT_ID_18":{"type":"TEXT","index":3,"name":"account_id_18","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_id_18"},"MASTER_RECORD_ID":{"type":"TEXT","index":4,"name":"master_record_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"master_record_id"},"OWNER_ID":{"type":"TEXT","index":5,"name":"owner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"PRIMARY_CONTACT_ID":{"type":"TEXT","index":7,"name":"primary_contact_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"primary_contact_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":8,"name":"record_type_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_type_id"},"ULTIMATE_PARENT_ID":{"type":"TEXT","index":9,"name":"ultimate_parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_id"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":10,"name":"partner_vat_tax_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_vat_tax_id"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":11,"name":"gitlab_com_user","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user"},"ACCOUNT_MANAGER":{"type":"TEXT","index":12,"name":"account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_manager"},"ACCOUNT_OWNER":{"type":"TEXT","index":13,"name":"account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner"},"ACCOUNT_OWNER_TEAM":{"type":"TEXT","index":14,"name":"account_owner_team","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner_team"},"PROPOSED_ACCOUNT_OWNER":{"type":"TEXT","index":15,"name":"proposed_account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"proposed_account_owner"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":16,"name":"business_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":17,"name":"dedicated_service_engineer","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dedicated_service_engineer"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":18,"name":"sales_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_development_rep"},"TECHNICAL_ACCOUNT_MANAGER_ID":{"type":"TEXT","index":19,"name":"technical_account_manager_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager_id"},"ULTIMATE_PARENT_ACCOUNT_ID":{"type":"TEXT","index":20,"name":"ultimate_parent_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_id"},"ULTIMATE_PARENT_ACCOUNT_NAME":{"type":"TEXT","index":21,"name":"ultimate_parent_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_name"},"ACCOUNT_TYPE":{"type":"TEXT","index":22,"name":"account_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_type"},"DF_INDUSTRY":{"type":"TEXT","index":23,"name":"df_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"df_industry"},"INDUSTRY":{"type":"TEXT","index":24,"name":"industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"industry"},"SUB_INDUSTRY":{"type":"TEXT","index":25,"name":"sub_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sub_industry"},"PARENT_ACCOUNT_INDUSTRY_HIERARCHY":{"type":"TEXT","index":26,"name":"parent_account_industry_hierarchy","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_account_industry_hierarchy"},"ACCOUNT_TIER":{"type":"TEXT","index":27,"name":"account_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":28,"name":"account_tier_notes","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier_notes"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":29,"name":"customer_since_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_since_date"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":30,"name":"carr_this_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_this_account"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":31,"name":"carr_account_family","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_account_family"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":32,"name":"next_renewal_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_renewal_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":33,"name":"license_utilization","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":34,"name":"support_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":35,"name":"named_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"named_account"},"BILLING_COUNTRY":{"type":"TEXT","index":36,"name":"billing_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_country"},"BILLING_COUNTRY_CODE":{"type":"TEXT","index":37,"name":"billing_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_country_code"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":38,"name":"billing_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_postal_code"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":39,"name":"is_sdr_target_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_sdr_target_account"},"LAM":{"type":"FLOAT","index":40,"name":"lam","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lam"},"LAM_DEV_COUNT":{"type":"FLOAT","index":41,"name":"lam_dev_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lam_dev_count"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":42,"name":"is_jihu_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_jihu_account"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"TIMESTAMP_TZ","index":43,"name":"partners_signed_contract_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_signed_contract_date"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":44,"name":"partner_account_iban_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_account_iban_number"},"PARTNER_TYPE":{"type":"TEXT","index":45,"name":"partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":46,"name":"partner_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_status"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":47,"name":"bdr_prospecting_status","comment":null,"description":"Indicates whether the account is actively being prospected by a BDR.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"bdr_prospecting_status"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":48,"name":"is_first_order_available","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_order_available"},"ZI_TECHNOLOGIES":{"type":"TEXT","index":49,"name":"zi_technologies","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zi_technologies"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":50,"name":"technical_account_manager_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager_date"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":51,"name":"gitlab_customer_success_project","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_customer_success_project"},"FORBES_2000_RANK":{"type":"TEXT","index":52,"name":"forbes_2000_rank","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"forbes_2000_rank"},"POTENTIAL_USERS":{"type":"FLOAT","index":53,"name":"potential_users","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"potential_users"},"NUMBER_OF_LICENSES_THIS_ACCOUNT":{"type":"FLOAT","index":54,"name":"number_of_licenses_this_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"number_of_licenses_this_account"},"DECISION_MAKER_COUNT_LINKEDIN":{"type":"FLOAT","index":55,"name":"decision_maker_count_linkedin","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"decision_maker_count_linkedin"},"NUMBER_OF_EMPLOYEES":{"type":"NUMBER","index":56,"name":"number_of_employees","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"number_of_employees"},"ACCOUNT_PHONE":{"type":"TEXT","index":57,"name":"account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":58,"name":"zoominfo_account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_account_phone"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":59,"name":"admin_manual_source_number_of_employees","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":60,"name":"admin_manual_source_account_address","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_account_address"},"ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":61,"name":"account_sales_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_sales_segment"},"ACCOUNT_GEO":{"type":"TEXT","index":62,"name":"account_geo","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_geo"},"ACCOUNT_REGION":{"type":"TEXT","index":63,"name":"account_region","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_region"},"ACCOUNT_AREA":{"type":"TEXT","index":64,"name":"account_area","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_area"},"ACCOUNT_TERRITORY":{"type":"TEXT","index":65,"name":"account_territory","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_territory"},"ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":66,"name":"account_business_unit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_business_unit"},"ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":67,"name":"account_role_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_role_type"},"ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":68,"name":"account_employee_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_employee_count"},"ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":69,"name":"account_max_family_employee","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_max_family_employee"},"ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":70,"name":"account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_country"},"ACCOUNT_UPA_STATE":{"type":"TEXT","index":71,"name":"account_upa_state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_state"},"ACCOUNT_UPA_CITY":{"type":"TEXT","index":72,"name":"account_upa_city","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_city"},"ACCOUNT_UPA_STREET":{"type":"TEXT","index":73,"name":"account_upa_street","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_street"},"ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":74,"name":"account_upa_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_upa_postal_code"},"HEALTH_NUMBER":{"type":"FLOAT","index":75,"name":"health_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":76,"name":"health_score_color","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_score_color"},"COUNT_ACTIVE_SUBSCRIPTION_CHARGES":{"type":"FLOAT","index":77,"name":"count_active_subscription_charges","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_active_subscription_charges"},"COUNT_ACTIVE_SUBSCRIPTIONS":{"type":"FLOAT","index":78,"name":"count_active_subscriptions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_active_subscriptions"},"COUNT_BILLING_ACCOUNTS":{"type":"FLOAT","index":79,"name":"count_billing_accounts","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_billing_accounts"},"COUNT_LICENSED_USERS":{"type":"FLOAT","index":80,"name":"count_licensed_users","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_licensed_users"},"COUNT_OF_NEW_BUSINESS_WON_OPPORTUNITIES":{"type":"FLOAT","index":81,"name":"count_of_new_business_won_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_new_business_won_opportunities"},"COUNT_OPEN_RENEWAL_OPPORTUNITIES":{"type":"FLOAT","index":82,"name":"count_open_renewal_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_open_renewal_opportunities"},"COUNT_OPPORTUNITIES":{"type":"FLOAT","index":83,"name":"count_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_opportunities"},"COUNT_PRODUCTS_PURCHASED":{"type":"FLOAT","index":84,"name":"count_products_purchased","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_products_purchased"},"COUNT_WON_OPPORTUNITIES":{"type":"FLOAT","index":85,"name":"count_won_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_won_opportunities"},"COUNT_CONCURRENT_EE_SUBSCRIPTIONS":{"type":"FLOAT","index":86,"name":"count_concurrent_ee_subscriptions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_concurrent_ee_subscriptions"},"COUNT_CE_INSTANCES":{"type":"FLOAT","index":87,"name":"count_ce_instances","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_ce_instances"},"COUNT_ACTIVE_CE_USERS":{"type":"FLOAT","index":88,"name":"count_active_ce_users","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_active_ce_users"},"COUNT_OPEN_OPPORTUNITIES":{"type":"FLOAT","index":89,"name":"count_open_opportunities","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_open_opportunities"},"COUNT_USING_CE":{"type":"BOOLEAN","index":90,"name":"count_using_ce","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_using_ce"},"ABM_TIER":{"type":"TEXT","index":91,"name":"abm_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier"},"GTM_STRATEGY":{"type":"TEXT","index":92,"name":"gtm_strategy","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_strategy"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":93,"name":"gtm_acceleration_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":94,"name":"gtm_account_based_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":95,"name":"gtm_account_centric_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_centric_date"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":96,"name":"abm_tier_1_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":97,"name":"abm_tier_2_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":98,"name":"abm_tier_3_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_3_date"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":99,"name":"demandbase_account_list","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":100,"name":"demandbase_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":101,"name":"demandbase_page_views","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":102,"name":"demandbase_score","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":103,"name":"demandbase_sessions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":104,"name":"demandbase_trending_offsite_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":105,"name":"demandbase_trending_onsite_engagement","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_onsite_engagement"},"ULTIMATE_PARENT_SALES_SEGMENT":{"type":"TEXT","index":106,"name":"ultimate_parent_sales_segment","comment":null,"description":"Sales segment of the parent of the account hierarchy.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_sales_segment"},"DIVISION_SALES_SEGMENT":{"type":"TEXT","index":107,"name":"division_sales_segment","comment":null,"description":"Sales segment of the specific account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division_sales_segment"},"ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":108,"name":"account_owner_user_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner_user_segment"},"SALES_SEGMENT":{"type":"TEXT","index":109,"name":"sales_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_segment"},"ACCOUNT_SEGMENT":{"type":"TEXT","index":110,"name":"account_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_segment"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":111,"name":"is_locally_managed_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":112,"name":"is_strategic_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_strategic_account"},"NEXT_FY_ACCOUNT_OWNER_TEMP":{"type":"TEXT","index":113,"name":"next_fy_account_owner_temp","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_fy_account_owner_temp"},"NEXT_FY_PLANNING_NOTES_TEMP":{"type":"TEXT","index":114,"name":"next_fy_planning_notes_temp","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_fy_planning_notes_temp"},"PARTNER_TRACK":{"type":"TEXT","index":115,"name":"partner_track","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":116,"name":"partners_partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":117,"name":"gitlab_partner_program","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_partner_program"},"IS_FOCUS_PARTNER":{"type":"BOOLEAN","index":118,"name":"IS_FOCUS_PARTNER","comment":null,"display_name":"is_focus_partner"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":119,"name":"zoom_info_company_name","comment":null,"description":"The name of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":120,"name":"zoom_info_company_revenue","comment":null,"description":"The estimated revenue of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":121,"name":"zoom_info_company_employee_count","comment":null,"description":"The number of employees of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":122,"name":"zoom_info_company_industry","comment":null,"description":"The the primary industry of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":123,"name":"zoom_info_company_city","comment":null,"description":"The city of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":124,"name":"zoom_info_company_state_province","comment":null,"description":"The state or province of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":125,"name":"zoom_info_company_country","comment":null,"description":"The country of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_country"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":126,"name":"is_excluded_from_zoom_info_enrich","comment":null,"description":"A flag to indicate if the account should be included in the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded_from_zoom_info_enrich"},"ZOOM_INFO_WEBSITE":{"type":"TEXT","index":127,"name":"zoom_info_website","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_website"},"ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":128,"name":"zoom_info_company_other_domains","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_other_domains"},"ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":129,"name":"zoom_info_dozisf_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_dozisf_zi_id"},"ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":130,"name":"zoom_info_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_parent_company_zi_id"},"ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":131,"name":"zoom_info_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_parent_company_name"},"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":132,"name":"zoom_info_ultimate_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_ultimate_parent_company_zi_id"},"ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":133,"name":"zoom_info_ultimate_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_ultimate_parent_company_name"},"ZOOM_INFO_NUMBER_OF_DEVELOPERS":{"type":"FLOAT","index":134,"name":"zoom_info_number_of_developers","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_number_of_developers"},"ZOOM_INFO_TOTAL_FUNDING":{"type":"TEXT","index":135,"name":"zoom_info_total_funding","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_total_funding"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":136,"name":"is_key_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_key_account"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":137,"name":"gs_first_value_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":138,"name":"gs_last_csm_activity_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_last_csm_activity_date"},"EOA_SENTIMENT":{"type":"TEXT","index":139,"name":"eoa_sentiment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":140,"name":"gs_health_user_engagement","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":141,"name":"gs_health_cd","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":142,"name":"gs_health_devsecops","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":143,"name":"gs_health_ci","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":144,"name":"gs_health_scm","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":145,"name":"risk_impact","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":146,"name":"risk_reason","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":147,"name":"last_timeline_at_risk_update","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":148,"name":"last_at_risk_update_comments","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_at_risk_update_comments"},"CREATED_BY_ID":{"type":"TEXT","index":149,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":150,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":151,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":152,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":153,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":154,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"_LAST_DBT_RUN":{"type":"TIMESTAMP_TZ","index":155,"name":"_LAST_DBT_RUN","comment":null,"display_name":"_last_dbt_run"},"SYSTEMMODSTAMP":{"type":"TIMESTAMP_TZ","index":156,"name":"SYSTEMMODSTAMP","comment":null,"display_name":"systemmodstamp"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_account_source","raw_sql":"$26","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.sales_segment_cleaning","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.salesforce.account"]},"config":{"enabled":true,"alias":null,"schema":"sfdc","database":"PREP","tags":["sources","mnpi"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sfdc","fqn":["gitlab_snowflake","sources","sfdc","sfdc_account_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/sfdc/sfdc_account_source.sql","original_file_path":"models/sources/sfdc/sfdc_account_source.sql","name":"sfdc_account_source","alias":"sfdc_account_source","checksum":{"name":"sha256","checksum":"eb152dc64e1759387331420a34ae89212d0734a722c857c28949ea876c1297ef"},"tags":["sources","mnpi"],"refs":[],"sources":[["salesforce","account"]],"metrics":[],"description":"Source model for SFDC Accounts","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/sfdc/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/sfdc/sfdc_account_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sfdc","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi"]},"created_at":1689033749.548663,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sfdc.sfdc_account_source","label":"sfdc_account_source"},{"metadata":{"type":"BASE TABLE","schema":"DRIVELOAD","name":"DRIVELOAD_MARKETING_DNC_LIST_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"EMAIL_ADDRESS":{"type":"TEXT","index":1,"name":"email_address","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"email_address"},"IS_ROLE_ADDRESS":{"type":"BOOLEAN","index":2,"name":"IS_ROLE_ADDRESS","comment":null,"display_name":"is_role_address"},"IS_DISPOSABLE_ADDRESS":{"type":"BOOLEAN","index":3,"name":"IS_DISPOSABLE_ADDRESS","comment":null,"display_name":"is_disposable_address"},"DID_YOU_MEAN":{"type":"TEXT","index":4,"name":"DID_YOU_MEAN","comment":null,"display_name":"did_you_mean"},"RESULT":{"type":"TEXT","index":5,"name":"RESULT","comment":null,"display_name":"result"},"REASON":{"type":"VARIANT","index":6,"name":"REASON","comment":null,"display_name":"reason"},"RISK":{"type":"TEXT","index":7,"name":"RISK","comment":null,"display_name":"risk"},"ROOT_ADDRESS":{"type":"TEXT","index":8,"name":"ROOT_ADDRESS","comment":null,"display_name":"root_address"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":172032,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.driveload_marketing_dnc_list_source","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ source('driveload', 'marketing_dnc_list') }}\n\n), renamed AS (\n\n    SELECT\n      address::VARCHAR                       AS email_address,\n      is_role_address::BOOLEAN               AS is_role_address,\n      is_disposable_address::BOOLEAN         AS is_disposable_address,\n      did_you_mean::VARCHAR                  AS did_you_mean,\n      result::VARCHAR                        AS result,\n      reason::VARIANT                        AS reason,\n      risk::VARCHAR                          AS risk,\n      root_address::VARCHAR                  AS root_address\n    FROM source\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY _updated_at DESC) = 1\n\n)\n\nSELECT *\nFROM renamed","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.driveload.marketing_dnc_list"]},"config":{"enabled":true,"alias":null,"schema":"driveload","database":"PREP","tags":["sources","driveload"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"driveload","fqn":["gitlab_snowflake","sources","driveload","driveload_marketing_dnc_list_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/driveload/driveload_marketing_dnc_list_source.sql","original_file_path":"models/sources/driveload/driveload_marketing_dnc_list_source.sql","name":"driveload_marketing_dnc_list_source","alias":"driveload_marketing_dnc_list_source","checksum":{"name":"sha256","checksum":"b399015056b9865f382cbfd18c32b37cd4674cdf3164c3710a0c9a5ad8832811"},"tags":["sources","driveload"],"refs":[],"sources":[["driveload","marketing_dnc_list"]],"metrics":[],"description":"List for unmarketable contacts in the email marketing db.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/driveload/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/driveload/driveload_marketing_dnc_list_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"driveload","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["driveload"]},"created_at":1689033749.3961854,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"RAW\".driveload.marketing_dnc_list\n\n), renamed AS (\n\n    SELECT\n      address::VARCHAR                       AS email_address,\n      is_role_address::BOOLEAN               AS is_role_address,\n      is_disposable_address::BOOLEAN         AS is_disposable_address,\n      did_you_mean::VARCHAR                  AS did_you_mean,\n      result::VARCHAR                        AS result,\n      reason::VARIANT                        AS reason,\n      risk::VARCHAR                          AS risk,\n      root_address::VARCHAR                  AS root_address\n    FROM source\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY _updated_at DESC) = 1\n\n)\n\nSELECT *\nFROM renamed","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".driveload.driveload_marketing_dnc_list_source","label":"driveload_marketing_dnc_list_source"},{"metadata":{"type":"VIEW","schema":"ZUORA","name":"ZUORA_ACCOUNT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"COMMUNICATION_PROFILE_ID":{"type":"TEXT","index":2,"name":"COMMUNICATION_PROFILE_ID","comment":null,"display_name":"communication_profile_id"},"CRM_ID":{"type":"TEXT","index":3,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"DEFAULT_PAYMENT_METHOD_ID":{"type":"TEXT","index":4,"name":"DEFAULT_PAYMENT_METHOD_ID","comment":null,"display_name":"default_payment_method_id"},"INVOICE_TEMPLATE_ID":{"type":"TEXT","index":5,"name":"INVOICE_TEMPLATE_ID","comment":null,"display_name":"invoice_template_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SOLD_TO_CONTACT_ID":{"type":"TEXT","index":7,"name":"SOLD_TO_CONTACT_ID","comment":null,"display_name":"sold_to_contact_id"},"BILL_TO_CONTACT_ID":{"type":"TEXT","index":8,"name":"BILL_TO_CONTACT_ID","comment":null,"display_name":"bill_to_contact_id"},"TAX_EXEMPT_CERTIFICATE_ID":{"type":"TEXT","index":9,"name":"TAX_EXEMPT_CERTIFICATE_ID","comment":null,"display_name":"tax_exempt_certificate_id"},"TAX_EXEMPT_CERTIFICATE_TYPE":{"type":"TEXT","index":10,"name":"TAX_EXEMPT_CERTIFICATE_TYPE","comment":null,"display_name":"tax_exempt_certificate_type"},"ACCOUNT_NUMBER":{"type":"TEXT","index":11,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"ACCOUNT_NAME":{"type":"TEXT","index":12,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_NOTES":{"type":"TEXT","index":13,"name":"ACCOUNT_NOTES","comment":null,"display_name":"account_notes"},"PURCHASE_ORDER_NUMBER":{"type":"TEXT","index":14,"name":"PURCHASE_ORDER_NUMBER","comment":null,"display_name":"purchase_order_number"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":15,"name":"SFDC_ACCOUNT_CODE","comment":null,"display_name":"sfdc_account_code"},"STATUS":{"type":"TEXT","index":16,"name":"STATUS","comment":null,"display_name":"status"},"SFDC_ENTITY":{"type":"TEXT","index":17,"name":"SFDC_ENTITY","comment":null,"display_name":"sfdc_entity"},"AUTO_PAY":{"type":"BOOLEAN","index":18,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"BALANCE":{"type":"FLOAT","index":19,"name":"BALANCE","comment":null,"display_name":"balance"},"CREDIT_BALANCE":{"type":"FLOAT","index":20,"name":"CREDIT_BALANCE","comment":null,"display_name":"credit_balance"},"BILL_CYCLE_DAY":{"type":"NUMBER","index":21,"name":"BILL_CYCLE_DAY","comment":null,"display_name":"bill_cycle_day"},"CURRENCY":{"type":"TEXT","index":22,"name":"CURRENCY","comment":null,"display_name":"currency"},"SFDC_CONVERSION_RATE":{"type":"TEXT","index":23,"name":"SFDC_CONVERSION_RATE","comment":null,"display_name":"sfdc_conversion_rate"},"PAYMENT_TERM":{"type":"TEXT","index":24,"name":"PAYMENT_TERM","comment":null,"display_name":"payment_term"},"ALLOW_INVOICE_EDIT":{"type":"BOOLEAN","index":25,"name":"ALLOW_INVOICE_EDIT","comment":null,"display_name":"allow_invoice_edit"},"BATCH":{"type":"TEXT","index":26,"name":"BATCH","comment":null,"display_name":"batch"},"INVOICE_DELIVERY_PREFS_EMAIL":{"type":"BOOLEAN","index":27,"name":"INVOICE_DELIVERY_PREFS_EMAIL","comment":null,"display_name":"invoice_delivery_prefs_email"},"INVOICE_DELIVERY_PREFS_PRINT":{"type":"BOOLEAN","index":28,"name":"INVOICE_DELIVERY_PREFS_PRINT","comment":null,"display_name":"invoice_delivery_prefs_print"},"PAYMENT_GATEWAY":{"type":"TEXT","index":29,"name":"PAYMENT_GATEWAY","comment":null,"display_name":"payment_gateway"},"CUSTOMER_SERVICE_REP_NAME":{"type":"TEXT","index":30,"name":"CUSTOMER_SERVICE_REP_NAME","comment":null,"display_name":"customer_service_rep_name"},"SALES_REP_NAME":{"type":"TEXT","index":31,"name":"SALES_REP_NAME","comment":null,"display_name":"sales_rep_name"},"ADDITIONAL_EMAIL_ADDRESSES":{"type":"TEXT","index":32,"name":"ADDITIONAL_EMAIL_ADDRESSES","comment":null,"display_name":"additional_email_addresses"},"SFDC_PARENT":{"type":"TEXT","index":33,"name":"SFDC_PARENT","comment":null,"display_name":"sfdc_parent"},"SSP_CHANNEL":{"type":"TEXT","index":34,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":35,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"LAST_INVOICE_DATE":{"type":"TIMESTAMP_TZ","index":36,"name":"LAST_INVOICE_DATE","comment":null,"display_name":"last_invoice_date"},"CREATED_BY_ID":{"type":"TEXT","index":37,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":38,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"UPDATED_BY_ID":{"type":"TEXT","index":39,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":40,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"IS_DELETED":{"type":"BOOLEAN","index":41,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_account_source","raw_sql":"$28","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.zuora.account","seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts"]},"config":{"enabled":true,"alias":"zuora_account_source","schema":"zuora","database":"PREP","tags":["sources","zuora"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"zuora","fqn":["gitlab_snowflake","sources","zuora","zuora_account_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/zuora/zuora_account_source.sql","original_file_path":"models/sources/zuora/zuora_account_source.sql","name":"zuora_account_source","alias":"zuora_account_source","checksum":{"name":"sha256","checksum":"8c48348187a27d94d7c66edb5171c988a9aa6ce01a461c613d295da91f9a4fd5"},"tags":["sources","zuora"],"refs":[["zuora_excluded_accounts"],["zuora_excluded_accounts"]],"sources":[["zuora","account"]],"metrics":[],"description":"Source layer for Zuora Accounts for cleaning and renaming","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/zuora/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/zuora/zuora_account_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"zuora","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["zuora"],"alias":"zuora_account_source"},"created_at":1689033748.6565464,"compiled_sql":"$29","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".zuora.zuora_account_source","label":"zuora_account_source"},{"metadata":{"type":"VIEW","schema":"SFDC","name":"SFDC_CONTACT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CONTACT_ID":{"type":"TEXT","index":1,"name":"contact_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"contact_id"},"CONTACT_NAME":{"type":"TEXT","index":2,"name":"contact_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"contact_name"},"CONTACT_FIRST_NAME":{"type":"TEXT","index":3,"name":"CONTACT_FIRST_NAME","comment":null,"display_name":"contact_first_name"},"CONTACT_LAST_NAME":{"type":"TEXT","index":4,"name":"CONTACT_LAST_NAME","comment":null,"display_name":"contact_last_name"},"CONTACT_EMAIL":{"type":"TEXT","index":5,"name":"contact_email","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"contact_email"},"EMAIL_DOMAIN":{"type":"TEXT","index":6,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"EMAIL_DOMAIN_TYPE":{"type":"TEXT","index":7,"name":"EMAIL_DOMAIN_TYPE","comment":null,"display_name":"email_domain_type"},"ACCOUNT_ID":{"type":"TEXT","index":8,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"MASTER_RECORD_ID":{"type":"TEXT","index":9,"name":"MASTER_RECORD_ID","comment":null,"display_name":"master_record_id"},"OWNER_ID":{"type":"TEXT","index":10,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":11,"name":"RECORD_TYPE_ID","comment":null,"display_name":"record_type_id"},"REPORTS_TO_ID":{"type":"TEXT","index":12,"name":"REPORTS_TO_ID","comment":null,"display_name":"reports_to_id"},"CONTACT_TITLE":{"type":"TEXT","index":13,"name":"CONTACT_TITLE","comment":null,"display_name":"contact_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":14,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"CONTACT_ROLE":{"type":"TEXT","index":15,"name":"CONTACT_ROLE","comment":null,"display_name":"contact_role"},"MOBILE_PHONE":{"type":"TEXT","index":16,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"PERSON_SCORE":{"type":"FLOAT","index":17,"name":"PERSON_SCORE","comment":null,"display_name":"person_score"},"DEPARTMENT":{"type":"TEXT","index":18,"name":"DEPARTMENT","comment":null,"display_name":"department"},"CONTACT_STATUS":{"type":"TEXT","index":19,"name":"CONTACT_STATUS","comment":null,"display_name":"contact_status"},"REQUESTED_CONTACT":{"type":"BOOLEAN","index":20,"name":"REQUESTED_CONTACT","comment":null,"display_name":"requested_contact"},"INACTIVE_CONTACT":{"type":"BOOLEAN","index":21,"name":"INACTIVE_CONTACT","comment":null,"display_name":"inactive_contact"},"HAS_OPTED_OUT_EMAIL":{"type":"BOOLEAN","index":22,"name":"HAS_OPTED_OUT_EMAIL","comment":null,"display_name":"has_opted_out_email"},"INVALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":23,"name":"INVALID_EMAIL_ADDRESS","comment":null,"display_name":"invalid_email_address"},"EMAIL_IS_BOUNCED":{"type":"BOOLEAN","index":24,"name":"EMAIL_IS_BOUNCED","comment":null,"display_name":"email_is_bounced"},"EMAIL_BOUNCED_DATE":{"type":"TIMESTAMP_TZ","index":25,"name":"EMAIL_BOUNCED_DATE","comment":null,"display_name":"email_bounced_date"},"EMAIL_BOUNCED_REASON":{"type":"TEXT","index":26,"name":"EMAIL_BOUNCED_REASON","comment":null,"display_name":"email_bounced_reason"},"MAILING_ADDRESS":{"type":"TEXT","index":27,"name":"MAILING_ADDRESS","comment":null,"display_name":"mailing_address"},"MAILING_CITY":{"type":"TEXT","index":28,"name":"MAILING_CITY","comment":null,"display_name":"mailing_city"},"MAILING_STATE":{"type":"TEXT","index":29,"name":"MAILING_STATE","comment":null,"display_name":"mailing_state"},"MAILING_STATE_CODE":{"type":"TEXT","index":30,"name":"MAILING_STATE_CODE","comment":null,"display_name":"mailing_state_code"},"MAILING_COUNTRY":{"type":"TEXT","index":31,"name":"MAILING_COUNTRY","comment":null,"display_name":"mailing_country"},"MAILING_COUNTRY_CODE":{"type":"TEXT","index":32,"name":"MAILING_COUNTRY_CODE","comment":null,"display_name":"mailing_country_code"},"MAILING_ZIP_CODE":{"type":"TEXT","index":33,"name":"MAILING_ZIP_CODE","comment":null,"display_name":"mailing_zip_code"},"ZOOMINFO_COMPANY_ID":{"type":"TEXT","index":34,"name":"zoominfo_company_id","comment":null,"description":"The zoom info id of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_id"},"ZOOMINFO_CONTACT_ID":{"type":"TEXT","index":35,"name":"ZOOMINFO_CONTACT_ID","comment":null,"display_name":"zoominfo_contact_id"},"ZOOMINFO_COMPANY_REVENUE":{"type":"TEXT","index":36,"name":"zoominfo_company_revenue","comment":null,"description":"The estimated revenue of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_revenue"},"ZOOMINFO_COMPANY_EMPLOYEE_COUNT":{"type":"TEXT","index":37,"name":"zoominfo_company_employee_count","comment":null,"description":"The number of employees of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_employee_count"},"COGNISM_EMPLOYEE_COUNT":{"type":"FLOAT","index":38,"name":"COGNISM_EMPLOYEE_COUNT","comment":null,"display_name":"cognism_employee_count"},"ZOOMINFO_CONTACT_CITY":{"type":"TEXT","index":39,"name":"ZOOMINFO_CONTACT_CITY","comment":null,"display_name":"zoominfo_contact_city"},"ZOOMINFO_COMPANY_CITY":{"type":"TEXT","index":40,"name":"zoominfo_company_city","comment":null,"description":"The city of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_city"},"ZOOMINFO_COMPANY_INDUSTRY":{"type":"TEXT","index":41,"name":"zoominfo_company_industry","comment":null,"description":"The industry of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_industry"},"ZOOMINFO_COMPANY_STATE":{"type":"TEXT","index":42,"name":"zoominfo_company_state","comment":null,"description":"The state or province of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_state"},"ZOOMINFO_CONTACT_STATE":{"type":"TEXT","index":43,"name":"ZOOMINFO_CONTACT_STATE","comment":null,"display_name":"zoominfo_contact_state"},"ZOOMINFO_COMPANY_COUNTRY":{"type":"TEXT","index":44,"name":"zoominfo_company_country","comment":null,"description":"The country of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_country"},"ZOOMINFO_CONTACT_COUNTRY":{"type":"TEXT","index":45,"name":"ZOOMINFO_CONTACT_COUNTRY","comment":null,"display_name":"zoominfo_contact_country"},"ZOOMINFO_PHONE_NUMBER":{"type":"TEXT","index":46,"name":"ZOOMINFO_PHONE_NUMBER","comment":null,"display_name":"zoominfo_phone_number"},"ZOOMINFO_MOBILE_PHONE_NUMBER":{"type":"TEXT","index":47,"name":"ZOOMINFO_MOBILE_PHONE_NUMBER","comment":null,"display_name":"zoominfo_mobile_phone_number"},"ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE":{"type":"TEXT","index":48,"name":"ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE","comment":null,"display_name":"zoominfo_do_not_call_direct_phone"},"ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE":{"type":"TEXT","index":49,"name":"ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE","comment":null,"display_name":"zoominfo_do_not_call_mobile_phone"},"USING_CE":{"type":"BOOLEAN","index":50,"name":"USING_CE","comment":null,"display_name":"using_ce"},"EE_TRIAL_START_DATE":{"type":"TIMESTAMP_TZ","index":51,"name":"EE_TRIAL_START_DATE","comment":null,"display_name":"ee_trial_start_date"},"EE_TRIAL_END_DATE":{"type":"TIMESTAMP_TZ","index":52,"name":"EE_TRIAL_END_DATE","comment":null,"display_name":"ee_trial_end_date"},"INDUSTRY":{"type":"TEXT","index":53,"name":"INDUSTRY","comment":null,"display_name":"industry"},"RESPONDED_TO_GITHOST_PRICE_CHANGE":{"type":"BOOLEAN","index":54,"name":"RESPONDED_TO_GITHOST_PRICE_CHANGE","comment":null,"display_name":"responded_to_githost_price_change"},"CORE_CHECK_IN_NOTES":{"type":"TEXT","index":55,"name":"CORE_CHECK_IN_NOTES","comment":null,"display_name":"core_check_in_notes"},"LEAD_SOURCE":{"type":"TEXT","index":56,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"LEAD_SOURCE_TYPE":{"type":"TEXT","index":57,"name":"LEAD_SOURCE_TYPE","comment":null,"display_name":"lead_source_type"},"BEHAVIOR_SCORE":{"type":"FLOAT","index":58,"name":"BEHAVIOR_SCORE","comment":null,"display_name":"behavior_score"},"OUTREACH_STAGE":{"type":"TEXT","index":59,"name":"OUTREACH_STAGE","comment":null,"display_name":"outreach_stage"},"OUTREACH_STEP_NUMBER":{"type":"FLOAT","index":60,"name":"OUTREACH_STEP_NUMBER","comment":null,"display_name":"outreach_step_number"},"ACCOUNT_TYPE":{"type":"TEXT","index":61,"name":"ACCOUNT_TYPE","comment":null,"display_name":"account_type"},"ASSIGNED_DATETIME":{"type":"TIMESTAMP_NTZ","index":62,"name":"ASSIGNED_DATETIME","comment":null,"display_name":"assigned_datetime"},"MARKETO_QUALIFIED_LEAD_TIMESTAMP":{"type":"TIMESTAMP_TZ","index":63,"name":"MARKETO_QUALIFIED_LEAD_TIMESTAMP","comment":null,"display_name":"marketo_qualified_lead_timestamp"},"MARKETO_QUALIFIED_LEAD_DATETIME":{"type":"TIMESTAMP_TZ","index":64,"name":"MARKETO_QUALIFIED_LEAD_DATETIME","comment":null,"display_name":"marketo_qualified_lead_datetime"},"MARKETO_QUALIFIED_LEAD_DATE":{"type":"TIMESTAMP_TZ","index":65,"name":"MARKETO_QUALIFIED_LEAD_DATE","comment":null,"display_name":"marketo_qualified_lead_date"},"MQL_DATETIME_INFERRED":{"type":"TIMESTAMP_TZ","index":66,"name":"MQL_DATETIME_INFERRED","comment":null,"display_name":"mql_datetime_inferred"},"INQUIRY_DATETIME":{"type":"TIMESTAMP_TZ","index":67,"name":"INQUIRY_DATETIME","comment":null,"display_name":"inquiry_datetime"},"INQUIRY_DATETIME_INFERRED":{"type":"TIMESTAMP_TZ","index":68,"name":"INQUIRY_DATETIME_INFERRED","comment":null,"display_name":"inquiry_datetime_inferred"},"ACCEPTED_DATETIME":{"type":"TIMESTAMP_TZ","index":69,"name":"ACCEPTED_DATETIME","comment":null,"display_name":"accepted_datetime"},"QUALIFYING_DATETIME":{"type":"TIMESTAMP_TZ","index":70,"name":"QUALIFYING_DATETIME","comment":null,"display_name":"qualifying_datetime"},"QUALIFIED_DATETIME":{"type":"TIMESTAMP_TZ","index":71,"name":"QUALIFIED_DATETIME","comment":null,"display_name":"qualified_datetime"},"UNQUALIFIED_DATETIME":{"type":"TIMESTAMP_TZ","index":72,"name":"UNQUALIFIED_DATETIME","comment":null,"display_name":"unqualified_datetime"},"NURTURE_DATETIME":{"type":"TIMESTAMP_TZ","index":73,"name":"NURTURE_DATETIME","comment":null,"display_name":"nurture_datetime"},"BAD_DATA_DATETIME":{"type":"TIMESTAMP_TZ","index":74,"name":"BAD_DATA_DATETIME","comment":null,"display_name":"bad_data_datetime"},"WORKED_DATETIME":{"type":"TIMESTAMP_TZ","index":75,"name":"WORKED_DATETIME","comment":null,"display_name":"worked_datetime"},"WEB_PORTAL_PURCHASE_DATETIME":{"type":"TIMESTAMP_TZ","index":76,"name":"WEB_PORTAL_PURCHASE_DATETIME","comment":null,"display_name":"web_portal_purchase_datetime"},"MARKETO_LAST_INTERESTING_MOMENT":{"type":"TEXT","index":77,"name":"MARKETO_LAST_INTERESTING_MOMENT","comment":null,"display_name":"marketo_last_interesting_moment"},"MARKETO_LAST_INTERESTING_MOMENT_DATE":{"type":"TIMESTAMP_TZ","index":78,"name":"MARKETO_LAST_INTERESTING_MOMENT_DATE","comment":null,"display_name":"marketo_last_interesting_moment_date"},"LAST_UTM_CAMPAIGN":{"type":"TEXT","index":79,"name":"LAST_UTM_CAMPAIGN","comment":null,"display_name":"last_utm_campaign"},"LAST_UTM_CONTENT":{"type":"TEXT","index":80,"name":"LAST_UTM_CONTENT","comment":null,"display_name":"last_utm_content"},"PROSPECT_SHARE_STATUS":{"type":"TEXT","index":81,"name":"PROSPECT_SHARE_STATUS","comment":null,"display_name":"prospect_share_status"},"PARTNER_PROSPECT_STATUS":{"type":"TEXT","index":82,"name":"PARTNER_PROSPECT_STATUS","comment":null,"display_name":"partner_prospect_status"},"PARTNER_PROSPECT_ID":{"type":"TEXT","index":83,"name":"PARTNER_PROSPECT_ID","comment":null,"display_name":"partner_prospect_id"},"PARTNER_PROSPECT_OWNER_NAME":{"type":"TEXT","index":84,"name":"PARTNER_PROSPECT_OWNER_NAME","comment":null,"display_name":"partner_prospect_owner_name"},"SEQUENCE_STEP_TYPE":{"type":"TEXT","index":85,"name":"SEQUENCE_STEP_TYPE","comment":null,"display_name":"sequence_step_type"},"NAME_OF_ACTIVE_SEQUENCE":{"type":"TEXT","index":86,"name":"NAME_OF_ACTIVE_SEQUENCE","comment":null,"display_name":"name_of_active_sequence"},"SEQUENCE_TASK_DUE_DATE":{"type":"DATE","index":87,"name":"SEQUENCE_TASK_DUE_DATE","comment":null,"display_name":"sequence_task_due_date"},"SEQUENCE_STATUS":{"type":"TEXT","index":88,"name":"SEQUENCE_STATUS","comment":null,"display_name":"sequence_status"},"IS_ACTIVELY_BEING_SEQUENCED":{"type":"BOOLEAN","index":89,"name":"IS_ACTIVELY_BEING_SEQUENCED","comment":null,"display_name":"is_actively_being_sequenced"},"IS_FIRST_ORDER_INITIAL_MQL":{"type":"BOOLEAN","index":90,"name":"IS_FIRST_ORDER_INITIAL_MQL","comment":null,"display_name":"is_first_order_initial_mql"},"IS_FIRST_ORDER_MQL":{"type":"BOOLEAN","index":91,"name":"IS_FIRST_ORDER_MQL","comment":null,"display_name":"is_first_order_mql"},"IS_FIRST_ORDER_PERSON":{"type":"BOOLEAN","index":92,"name":"IS_FIRST_ORDER_PERSON","comment":null,"display_name":"is_first_order_person"},"TRUE_INITIAL_MQL_DATE":{"type":"TIMESTAMP_TZ","index":93,"name":"TRUE_INITIAL_MQL_DATE","comment":null,"display_name":"true_initial_mql_date"},"TRUE_MQL_DATE":{"type":"TIMESTAMP_TZ","index":94,"name":"TRUE_MQL_DATE","comment":null,"display_name":"true_mql_date"},"INITIAL_MARKETO_MQL_DATE_TIME":{"type":"TIMESTAMP_TZ","index":95,"name":"INITIAL_MARKETO_MQL_DATE_TIME","comment":null,"display_name":"initial_marketo_mql_date_time"},"LAST_TRANSFER_DATE_TIME":{"type":"TIMESTAMP_TZ","index":96,"name":"LAST_TRANSFER_DATE_TIME","comment":null,"display_name":"last_transfer_date_time"},"TIME_FROM_LAST_TRANSFER_TO_SEQUENCE":{"type":"FLOAT","index":97,"name":"TIME_FROM_LAST_TRANSFER_TO_SEQUENCE","comment":null,"display_name":"time_from_last_transfer_to_sequence"},"TIME_FROM_MQL_TO_LAST_TRANSFER":{"type":"FLOAT","index":98,"name":"TIME_FROM_MQL_TO_LAST_TRANSFER","comment":null,"display_name":"time_from_mql_to_last_transfer"},"IS_HIGH_PRIORITY":{"type":"BOOLEAN","index":99,"name":"is_high_priority","comment":null,"description":"Indicates whether the record is of high priority to contact by sales.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_high_priority"},"NET_NEW_SOURCE_CATEGORIES":{"type":"TEXT","index":100,"name":"NET_NEW_SOURCE_CATEGORIES","comment":null,"display_name":"net_new_source_categories"},"SOURCE_BUCKETS":{"type":"TEXT","index":101,"name":"SOURCE_BUCKETS","comment":null,"display_name":"source_buckets"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT":{"type":"TEXT","index":102,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT","comment":null,"display_name":"account_demographics_sales_segment"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":103,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED","comment":null,"display_name":"account_demographics_sales_segment_grouped"},"ACCOUNT_DEMOGRAPHICS_GEO":{"type":"TEXT","index":104,"name":"ACCOUNT_DEMOGRAPHICS_GEO","comment":null,"display_name":"account_demographics_geo"},"ACCOUNT_DEMOGRAPHICS_REGION":{"type":"TEXT","index":105,"name":"ACCOUNT_DEMOGRAPHICS_REGION","comment":null,"display_name":"account_demographics_region"},"ACCOUNT_DEMOGRAPHICS_AREA":{"type":"TEXT","index":106,"name":"ACCOUNT_DEMOGRAPHICS_AREA","comment":null,"display_name":"account_demographics_area"},"ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED":{"type":"TEXT","index":107,"name":"ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED","comment":null,"display_name":"account_demographics_segment_region_grouped"},"ACCOUNT_DEMOGRAPHICS_TERRITORY":{"type":"TEXT","index":108,"name":"ACCOUNT_DEMOGRAPHICS_TERRITORY","comment":null,"display_name":"account_demographics_territory"},"ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT":{"type":"FLOAT","index":109,"name":"ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT","comment":null,"display_name":"account_demographics_employee_count"},"ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":110,"name":"ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"account_demographics_max_family_employee"},"ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY":{"type":"TEXT","index":111,"name":"ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY","comment":null,"display_name":"account_demographics_upa_country"},"ACCOUNT_DEMOGRAPHICS_UPA_STATE":{"type":"TEXT","index":112,"name":"ACCOUNT_DEMOGRAPHICS_UPA_STATE","comment":null,"display_name":"account_demographics_upa_state"},"ACCOUNT_DEMOGRAPHICS_UPA_CITY":{"type":"TEXT","index":113,"name":"ACCOUNT_DEMOGRAPHICS_UPA_CITY","comment":null,"display_name":"account_demographics_upa_city"},"ACCOUNT_DEMOGRAPHICS_UPA_STREET":{"type":"TEXT","index":114,"name":"ACCOUNT_DEMOGRAPHICS_UPA_STREET","comment":null,"display_name":"account_demographics_upa_street"},"ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE":{"type":"TEXT","index":115,"name":"ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE","comment":null,"display_name":"account_demographics_upa_postal_code"},"PATHFACTORY_EXPERIENCE_NAME":{"type":"TEXT","index":116,"name":"PATHFACTORY_EXPERIENCE_NAME","comment":null,"display_name":"pathfactory_experience_name"},"PATHFACTORY_ENGAGEMENT_SCORE":{"type":"FLOAT","index":117,"name":"PATHFACTORY_ENGAGEMENT_SCORE","comment":null,"display_name":"pathfactory_engagement_score"},"PATHFACTORY_CONTENT_COUNT":{"type":"FLOAT","index":118,"name":"PATHFACTORY_CONTENT_COUNT","comment":null,"display_name":"pathfactory_content_count"},"PATHFACTORY_CONTENT_LIST":{"type":"TEXT","index":119,"name":"PATHFACTORY_CONTENT_LIST","comment":null,"display_name":"pathfactory_content_list"},"PATHFACTORY_CONTENT_JOURNEY":{"type":"TEXT","index":120,"name":"PATHFACTORY_CONTENT_JOURNEY","comment":null,"display_name":"pathfactory_content_journey"},"PATHFACTORY_TOPIC_LIST":{"type":"TEXT","index":121,"name":"PATHFACTORY_TOPIC_LIST","comment":null,"display_name":"pathfactory_topic_list"},"ACCOUNT_OWNER":{"type":"TEXT","index":122,"name":"ACCOUNT_OWNER","comment":null,"display_name":"account_owner"},"AE_COMMENTS":{"type":"TEXT","index":123,"name":"AE_COMMENTS","comment":null,"display_name":"ae_comments"},"BUSINESS_DEVELOPMENT_REP_NAME":{"type":"TEXT","index":124,"name":"BUSINESS_DEVELOPMENT_REP_NAME","comment":null,"display_name":"business_development_rep_name"},"OUTBOUND_BUSINESS_DEVELOPMENT_REP_NAME":{"type":"TEXT","index":125,"name":"OUTBOUND_BUSINESS_DEVELOPMENT_REP_NAME","comment":null,"display_name":"outbound_business_development_rep_name"},"CREATED_BY_ID":{"type":"TEXT","index":126,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":127,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":128,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_ACTIVITY_DATE":{"type":"DATE","index":129,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"LAST_CU_REQUEST_DATE":{"type":"TIMESTAMP_TZ","index":130,"name":"LAST_CU_REQUEST_DATE","comment":null,"display_name":"last_cu_request_date"},"LAST_CU_UPDATE_DATE":{"type":"TIMESTAMP_TZ","index":131,"name":"LAST_CU_UPDATE_DATE","comment":null,"display_name":"last_cu_update_date"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":132,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":133,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"SYSTEMMODSTAMP":{"type":"TIMESTAMP_TZ","index":134,"name":"SYSTEMMODSTAMP","comment":null,"display_name":"systemmodstamp"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_contact_source","raw_sql":"$2a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.email_domain_type","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.sfdc_source_buckets","macro.gitlab_snowflake.sales_segment_region_grouped","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.salesforce.contact","seed.gitlab_snowflake.personal_email_domains","seed.gitlab_snowflake.personal_email_domains","seed.gitlab_snowflake.personal_email_domains","seed.gitlab_snowflake.personal_email_domains"]},"config":{"enabled":true,"alias":null,"schema":"sfdc","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sfdc","fqn":["gitlab_snowflake","sources","sfdc","sfdc_contact_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/sfdc/sfdc_contact_source.sql","original_file_path":"models/sources/sfdc/sfdc_contact_source.sql","name":"sfdc_contact_source","alias":"sfdc_contact_source","checksum":{"name":"sha256","checksum":"2281f458e5f362813f9817c810871ac8298ceb1bddd656568c6a59f7b81bcd71"},"tags":["sources"],"refs":[["personal_email_domains"],["personal_email_domains"],["personal_email_domains"],["personal_email_domains"]],"sources":[["salesforce","contact"]],"metrics":[],"description":"Source model for SFDC Contacts","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/sfdc/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/sfdc/sfdc_contact_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sfdc","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033749.6081398,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sfdc.sfdc_contact_source","label":"sfdc_contact_source"},{"metadata":{"type":"VIEW","schema":"MARKETO","name":"MARKETO_LEAD_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"MARKETO_LEAD_ID":{"type":"FLOAT","index":1,"name":"marketo_lead_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"marketo_lead_id"},"EMAIL":{"type":"TEXT","index":2,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_HASH":{"type":"TEXT","index":3,"name":"EMAIL_HASH","comment":null,"display_name":"email_hash"},"SFDC_LEAD_ID":{"type":"TEXT","index":4,"name":"SFDC_LEAD_ID","comment":null,"display_name":"sfdc_lead_id"},"SFDC_CONTACT_ID":{"type":"TEXT","index":5,"name":"SFDC_CONTACT_ID","comment":null,"display_name":"sfdc_contact_id"},"FIRST_NAME":{"type":"TEXT","index":6,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":7,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"COMPANY_NAME":{"type":"TEXT","index":8,"name":"COMPANY_NAME","comment":null,"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":9,"name":"JOB_TITLE","comment":null,"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":10,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":11,"name":"COUNTRY","comment":null,"display_name":"country"},"MOBILE_PHONE":{"type":"TEXT","index":12,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_TYPE":{"type":"TEXT","index":13,"name":"SFDC_TYPE","comment":null,"display_name":"sfdc_type"},"IS_LEAD_INACTIVE":{"type":"BOOLEAN","index":14,"name":"IS_LEAD_INACTIVE","comment":null,"display_name":"is_lead_inactive"},"IS_CONTACT_INACTIVE":{"type":"BOOLEAN","index":15,"name":"IS_CONTACT_INACTIVE","comment":null,"display_name":"is_contact_inactive"},"SALES_SEGMENTATION":{"type":"TEXT","index":16,"name":"SALES_SEGMENTATION","comment":null,"display_name":"sales_segmentation"},"IS_EMAIL_BOUNCED":{"type":"BOOLEAN","index":17,"name":"IS_EMAIL_BOUNCED","comment":null,"display_name":"is_email_bounced"},"EMAIL_BOUNCED_DATE":{"type":"DATE","index":18,"name":"EMAIL_BOUNCED_DATE","comment":null,"display_name":"email_bounced_date"},"IS_UNSUBSCRIBED":{"type":"BOOLEAN","index":19,"name":"IS_UNSUBSCRIBED","comment":null,"display_name":"is_unsubscribed"},"IS_OPT_IN":{"type":"BOOLEAN","index":20,"name":"IS_OPT_IN","comment":null,"display_name":"is_opt_in"},"COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":21,"name":"COMPLIANCE_SEGMENT_VALUE","comment":null,"display_name":"compliance_segment_value"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":22,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":23,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PTPT_CONTACT_MARKETO":{"type":"BOOLEAN","index":24,"name":"IS_PTPT_CONTACT_MARKETO","comment":null,"display_name":"is_ptpt_contact_marketo"},"IS_PTP_CONTACT_MARKETO":{"type":"BOOLEAN","index":25,"name":"IS_PTP_CONTACT_MARKETO","comment":null,"display_name":"is_ptp_contact_marketo"},"IS_IMPACTED_BY_USER_LIMIT_MARKETO":{"type":"BOOLEAN","index":26,"name":"IS_IMPACTED_BY_USER_LIMIT_MARKETO","comment":null,"display_name":"is_impacted_by_user_limit_marketo"},"IS_CURRENTLY_IN_TRIAL_MARKETO":{"type":"BOOLEAN","index":27,"name":"IS_CURRENTLY_IN_TRIAL_MARKETO","comment":null,"display_name":"is_currently_in_trial_marketo"},"TRIAL_START_DATE_MARKETO":{"type":"DATE","index":28,"name":"TRIAL_START_DATE_MARKETO","comment":null,"display_name":"trial_start_date_marketo"},"TRIAL_END_DATE_MARKETO":{"type":"DATE","index":29,"name":"TRIAL_END_DATE_MARKETO","comment":null,"display_name":"trial_end_date_marketo"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":30,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.marketo_lead_source","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.hash_of_column","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.marketo.lead"]},"config":{"enabled":true,"alias":null,"schema":"marketo","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"marketo","fqn":["gitlab_snowflake","sources","marketo","marketo_lead_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/marketo/marketo_lead_source.sql","original_file_path":"models/sources/marketo/marketo_lead_source.sql","name":"marketo_lead_source","alias":"marketo_lead_source","checksum":{"name":"sha256","checksum":"5b29b2a32b21286782e7ec76aea2d6144344ffe5638e7c1e2cf7b0947926b4af"},"tags":["sources"],"refs":[],"sources":[["marketo","lead"]],"metrics":[],"description":"This table has marketo lead information.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/marketo/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/marketo/marketo_lead_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"marketo","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033744.957236,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".marketo.marketo_lead_source","label":"marketo_lead_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_USERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"role_id","comment":null,"description":"This is the integer representation of a user's role, as it's stored in the database.","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 99"}],"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"role","comment":null,"description":"This is the string translation of the \"role\" column stored as an integer in the source database. It is converted using the `user_role_mapping` macro.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_source","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.user_role_mapping","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_users_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","name":"gitlab_dotcom_users_source","alias":"gitlab_dotcom_users_source","checksum":{"name":"sha256","checksum":"d544057bc6881cafe8a9b9ae7e63e13e9a9a247622c8e2cd0f8f04b45698f970"},"tags":["sources"],"refs":[["gitlab_dotcom_users_dedupe_source"],["gitlab_dotcom_users_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com users, the following fields are hidden for privacy `current_sign_in_ip`, `last_sign_in_ip`, `unconfirmed_email`, `website_url`, `notification_email`, `public_email`, `note`, `organization`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.402963,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_users_source","label":"gitlab_dotcom_users_source"},{"metadata":{"type":"VIEW","schema":"ZUORA","name":"ZUORA_CONTACT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CONTACT_ID":{"type":"TEXT","index":1,"name":"CONTACT_ID","comment":null,"display_name":"contact_id"},"ACCOUNT_ID":{"type":"TEXT","index":2,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"NICKNAME":{"type":"TEXT","index":5,"name":"NICKNAME","comment":null,"display_name":"nickname"},"STREET_ADDRESS":{"type":"TEXT","index":6,"name":"STREET_ADDRESS","comment":null,"display_name":"street_address"},"STREET_ADDRESS2":{"type":"TEXT","index":7,"name":"STREET_ADDRESS2","comment":null,"display_name":"street_address2"},"COUNTY":{"type":"TEXT","index":8,"name":"COUNTY","comment":null,"display_name":"county"},"STATE":{"type":"TEXT","index":9,"name":"STATE","comment":null,"display_name":"state"},"POSTAL_CODE":{"type":"TEXT","index":10,"name":"POSTAL_CODE","comment":null,"display_name":"postal_code"},"CITY":{"type":"TEXT","index":11,"name":"CITY","comment":null,"display_name":"city"},"COUNTRY":{"type":"TEXT","index":12,"name":"COUNTRY","comment":null,"display_name":"country"},"TAX_REGION":{"type":"TEXT","index":13,"name":"TAX_REGION","comment":null,"display_name":"tax_region"},"WORK_EMAIL":{"type":"TEXT","index":14,"name":"WORK_EMAIL","comment":null,"display_name":"work_email"},"WORK_PHONE":{"type":"TEXT","index":15,"name":"WORK_PHONE","comment":null,"display_name":"work_phone"},"OTHER_PHONE":{"type":"TEXT","index":16,"name":"OTHER_PHONE","comment":null,"display_name":"other_phone"},"OTHER_PHONE_TYPE":{"type":"TEXT","index":17,"name":"OTHER_PHONE_TYPE","comment":null,"display_name":"other_phone_type"},"FAX":{"type":"TEXT","index":18,"name":"FAX","comment":null,"display_name":"fax"},"HOME_PHONE":{"type":"TEXT","index":19,"name":"HOME_PHONE","comment":null,"display_name":"home_phone"},"MOBILE_PHONE":{"type":"TEXT","index":20,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"PERSONAL_EMAIL":{"type":"TEXT","index":21,"name":"PERSONAL_EMAIL","comment":null,"display_name":"personal_email"},"DESCRIPTION":{"type":"TEXT","index":22,"name":"DESCRIPTION","comment":null,"display_name":"description"},"CREATED_BY_ID":{"type":"TEXT","index":23,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":24,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"UPDATED_BY_ID":{"type":"TEXT","index":25,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":26,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"IS_DELETED":{"type":"BOOLEAN","index":27,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_contact_source","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.zuora.contact","seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts"]},"config":{"enabled":true,"alias":null,"schema":"zuora","database":"PREP","tags":["sources","zuora"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"zuora","fqn":["gitlab_snowflake","sources","zuora","zuora_contact_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/zuora/zuora_contact_source.sql","original_file_path":"models/sources/zuora/zuora_contact_source.sql","name":"zuora_contact_source","alias":"zuora_contact_source","checksum":{"name":"sha256","checksum":"b97790493910518476265ffa74a1f11bf7f1b49e7544cee54f2a93ace72cce74"},"tags":["sources","zuora"],"refs":[["zuora_excluded_accounts"],["zuora_excluded_accounts"]],"sources":[["zuora","contact"]],"metrics":[],"description":"Source layer for Zuora Contacts for cleaning and renaming","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/zuora/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/zuora/zuora_contact_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"zuora","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["zuora"]},"created_at":1689033748.663681,"compiled_sql":"$31","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".zuora.zuora_contact_source","label":"zuora_contact_source"},{"metadata":{"type":"VIEW","schema":"SFDC","name":"SFDC_LEAD_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"LEAD_ID":{"type":"TEXT","index":1,"name":"lead_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"lead_id"},"LEAD_NAME":{"type":"TEXT","index":2,"name":"lead_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"lead_name"},"LEAD_FIRST_NAME":{"type":"TEXT","index":3,"name":"LEAD_FIRST_NAME","comment":null,"display_name":"lead_first_name"},"LEAD_LAST_NAME":{"type":"TEXT","index":4,"name":"LEAD_LAST_NAME","comment":null,"display_name":"lead_last_name"},"LEAD_EMAIL":{"type":"TEXT","index":5,"name":"lead_email","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"lead_email"},"EMAIL_DOMAIN":{"type":"TEXT","index":6,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"EMAIL_DOMAIN_TYPE":{"type":"TEXT","index":7,"name":"EMAIL_DOMAIN_TYPE","comment":null,"display_name":"email_domain_type"},"MASTER_RECORD_ID":{"type":"TEXT","index":8,"name":"MASTER_RECORD_ID","comment":null,"display_name":"master_record_id"},"CONVERTED_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"CONVERTED_ACCOUNT_ID","comment":null,"display_name":"converted_account_id"},"CONVERTED_CONTACT_ID":{"type":"TEXT","index":10,"name":"CONVERTED_CONTACT_ID","comment":null,"display_name":"converted_contact_id"},"CONVERTED_OPPORTUNITY_ID":{"type":"TEXT","index":11,"name":"CONVERTED_OPPORTUNITY_ID","comment":null,"display_name":"converted_opportunity_id"},"OWNER_ID":{"type":"TEXT","index":12,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":13,"name":"RECORD_TYPE_ID","comment":null,"display_name":"record_type_id"},"ROUND_ROBIN_ID":{"type":"FLOAT","index":14,"name":"ROUND_ROBIN_ID","comment":null,"display_name":"round_robin_id"},"INSTANCE_UUID":{"type":"TEXT","index":15,"name":"INSTANCE_UUID","comment":null,"display_name":"instance_uuid"},"LEAN_DATA_MATCHED_ACCOUNT":{"type":"TEXT","index":16,"name":"LEAN_DATA_MATCHED_ACCOUNT","comment":null,"display_name":"lean_data_matched_account"},"IS_CONVERTED":{"type":"BOOLEAN","index":17,"name":"IS_CONVERTED","comment":null,"display_name":"is_converted"},"CONVERTED_DATE":{"type":"TIMESTAMP_TZ","index":18,"name":"CONVERTED_DATE","comment":null,"display_name":"converted_date"},"TITLE":{"type":"TEXT","index":19,"name":"TITLE","comment":null,"display_name":"title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":20,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"IS_DO_NOT_CALL":{"type":"BOOLEAN","index":21,"name":"IS_DO_NOT_CALL","comment":null,"display_name":"is_do_not_call"},"HAS_OPTED_OUT_EMAIL":{"type":"BOOLEAN","index":22,"name":"HAS_OPTED_OUT_EMAIL","comment":null,"display_name":"has_opted_out_email"},"EMAIL_BOUNCED_DATE":{"type":"TIMESTAMP_TZ","index":23,"name":"EMAIL_BOUNCED_DATE","comment":null,"display_name":"email_bounced_date"},"EMAIL_BOUNCED_REASON":{"type":"TEXT","index":24,"name":"EMAIL_BOUNCED_REASON","comment":null,"display_name":"email_bounced_reason"},"BEHAVIOR_SCORE":{"type":"FLOAT","index":25,"name":"BEHAVIOR_SCORE","comment":null,"display_name":"behavior_score"},"LEAD_SOURCE":{"type":"TEXT","index":26,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"LEAD_FROM":{"type":"TEXT","index":27,"name":"LEAD_FROM","comment":null,"display_name":"lead_from"},"LEAD_SOURCE_TYPE":{"type":"TEXT","index":28,"name":"LEAD_SOURCE_TYPE","comment":null,"display_name":"lead_source_type"},"LEAD_CONVERSION_APPROVAL_STATUS":{"type":"TEXT","index":29,"name":"LEAD_CONVERSION_APPROVAL_STATUS","comment":null,"display_name":"lead_conversion_approval_status"},"STREET":{"type":"TEXT","index":30,"name":"STREET","comment":null,"display_name":"street"},"CITY":{"type":"TEXT","index":31,"name":"CITY","comment":null,"display_name":"city"},"STATE":{"type":"TEXT","index":32,"name":"STATE","comment":null,"display_name":"state"},"STATE_CODE":{"type":"TEXT","index":33,"name":"STATE_CODE","comment":null,"display_name":"state_code"},"COUNTRY":{"type":"TEXT","index":34,"name":"COUNTRY","comment":null,"display_name":"country"},"COUNTRY_CODE":{"type":"TEXT","index":35,"name":"COUNTRY_CODE","comment":null,"display_name":"country_code"},"POSTAL_CODE":{"type":"TEXT","index":36,"name":"POSTAL_CODE","comment":null,"display_name":"postal_code"},"ZOOMINFO_COMPANY_COUNTRY":{"type":"TEXT","index":37,"name":"ZOOMINFO_COMPANY_COUNTRY","comment":null,"display_name":"zoominfo_company_country"},"ZOOMINFO_CONTACT_COUNTRY":{"type":"TEXT","index":38,"name":"ZOOMINFO_CONTACT_COUNTRY","comment":null,"display_name":"zoominfo_contact_country"},"ZOOMINFO_COMPANY_STATE":{"type":"TEXT","index":39,"name":"ZOOMINFO_COMPANY_STATE","comment":null,"display_name":"zoominfo_company_state"},"ZOOMINFO_CONTACT_STATE":{"type":"TEXT","index":40,"name":"ZOOMINFO_CONTACT_STATE","comment":null,"display_name":"zoominfo_contact_state"},"REQUESTED_CONTACT":{"type":"BOOLEAN","index":41,"name":"REQUESTED_CONTACT","comment":null,"display_name":"requested_contact"},"COMPANY":{"type":"TEXT","index":42,"name":"COMPANY","comment":null,"display_name":"company"},"ZOOMINFO_COMPANY_ID":{"type":"TEXT","index":43,"name":"zoominfo_company_id","comment":null,"description":"The zoom info id of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_id"},"ZOOMINFO_COMPANY_REVENUE":{"type":"TEXT","index":44,"name":"zoominfo_company_revenue","comment":null,"description":"The estimated revenue of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_revenue"},"ZOOMINFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":45,"name":"zoominfo_company_employee_count","comment":null,"description":"The number of employees of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_employee_count"},"ZOOMINFO_CONTACT_CITY":{"type":"TEXT","index":46,"name":"ZOOMINFO_CONTACT_CITY","comment":null,"display_name":"zoominfo_contact_city"},"ZOOMINFO_COMPANY_CITY":{"type":"TEXT","index":47,"name":"zoominfo_company_city","comment":null,"description":"The city of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_city"},"ZOOMINFO_COMPANY_INDUSTRY":{"type":"TEXT","index":48,"name":"zoominfo_company_industry","comment":null,"description":"The industry of the company matched by the Zoom Info enrichment process.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_company_industry"},"ZOOMINFO_PHONE_NUMBER":{"type":"TEXT","index":49,"name":"ZOOMINFO_PHONE_NUMBER","comment":null,"display_name":"zoominfo_phone_number"},"ZOOMINFO_MOBILE_PHONE_NUMBER":{"type":"TEXT","index":50,"name":"ZOOMINFO_MOBILE_PHONE_NUMBER","comment":null,"display_name":"zoominfo_mobile_phone_number"},"ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE":{"type":"TEXT","index":51,"name":"ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE","comment":null,"display_name":"zoominfo_do_not_call_direct_phone"},"ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE":{"type":"TEXT","index":52,"name":"ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE","comment":null,"display_name":"zoominfo_do_not_call_mobile_phone"},"BUYING_PROCESS":{"type":"TEXT","index":53,"name":"BUYING_PROCESS","comment":null,"display_name":"buying_process"},"CORE_CHECK_IN_NOTES":{"type":"TEXT","index":54,"name":"CORE_CHECK_IN_NOTES","comment":null,"display_name":"core_check_in_notes"},"INDUSTRY":{"type":"TEXT","index":55,"name":"INDUSTRY","comment":null,"display_name":"industry"},"IS_LARGE_ACCOUNT":{"type":"BOOLEAN","index":56,"name":"IS_LARGE_ACCOUNT","comment":null,"display_name":"is_large_account"},"OUTREACH_STAGE":{"type":"TEXT","index":57,"name":"OUTREACH_STAGE","comment":null,"display_name":"outreach_stage"},"OUTREACH_STEP_NUMBER":{"type":"FLOAT","index":58,"name":"OUTREACH_STEP_NUMBER","comment":null,"display_name":"outreach_step_number"},"IS_INTERESTED_GITLAB_EE":{"type":"TEXT","index":59,"name":"IS_INTERESTED_GITLAB_EE","comment":null,"display_name":"is_interested_gitlab_ee"},"IS_INTERESTED_IN_HOSTED":{"type":"BOOLEAN","index":60,"name":"IS_INTERESTED_IN_HOSTED","comment":null,"display_name":"is_interested_in_hosted"},"ASSIGNED_DATETIME":{"type":"TIMESTAMP_NTZ","index":61,"name":"ASSIGNED_DATETIME","comment":null,"display_name":"assigned_datetime"},"MATCHED_ACCOUNT_TOP_LIST":{"type":"TEXT","index":62,"name":"MATCHED_ACCOUNT_TOP_LIST","comment":null,"display_name":"matched_account_top_list"},"MATCHED_ACCOUNT_OWNER_ROLE":{"type":"TEXT","index":63,"name":"MATCHED_ACCOUNT_OWNER_ROLE","comment":null,"display_name":"matched_account_owner_role"},"MATCHED_ACCOUNT_SDR_ASSIGNED":{"type":"TEXT","index":64,"name":"MATCHED_ACCOUNT_SDR_ASSIGNED","comment":null,"display_name":"matched_account_sdr_assigned"},"MATCHED_ACCOUNT_GTM_STRATEGY":{"type":"TEXT","index":65,"name":"MATCHED_ACCOUNT_GTM_STRATEGY","comment":null,"display_name":"matched_account_gtm_strategy"},"MATCHED_ACCOUNT_BDR_PROSPECTING_STATUS":{"type":"TEXT","index":66,"name":"matched_account_bdr_prospecting_status","comment":null,"description":"Indicates whether the account of the lead record is actively being prospected by a BDR.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"matched_account_bdr_prospecting_status"},"MATCHED_ACCOUNT_TYPE":{"type":"TEXT","index":67,"name":"MATCHED_ACCOUNT_TYPE","comment":null,"display_name":"matched_account_type"},"MATCHED_ACCOUNT_ACCOUNT_OWNER_NAME":{"type":"TEXT","index":68,"name":"MATCHED_ACCOUNT_ACCOUNT_OWNER_NAME","comment":null,"display_name":"matched_account_account_owner_name"},"MARKETO_QUALIFIED_LEAD_DATE":{"type":"TIMESTAMP_TZ","index":69,"name":"MARKETO_QUALIFIED_LEAD_DATE","comment":null,"display_name":"marketo_qualified_lead_date"},"MARKETO_QUALIFIED_LEAD_DATETIME":{"type":"TIMESTAMP_TZ","index":70,"name":"MARKETO_QUALIFIED_LEAD_DATETIME","comment":null,"display_name":"marketo_qualified_lead_datetime"},"MQL_DATETIME_INFERRED":{"type":"TIMESTAMP_TZ","index":71,"name":"MQL_DATETIME_INFERRED","comment":null,"display_name":"mql_datetime_inferred"},"INQUIRY_DATETIME":{"type":"TIMESTAMP_TZ","index":72,"name":"INQUIRY_DATETIME","comment":null,"display_name":"inquiry_datetime"},"INQUIRY_DATETIME_INFERRED":{"type":"TIMESTAMP_TZ","index":73,"name":"INQUIRY_DATETIME_INFERRED","comment":null,"display_name":"inquiry_datetime_inferred"},"ACCEPTED_DATETIME":{"type":"TIMESTAMP_TZ","index":74,"name":"ACCEPTED_DATETIME","comment":null,"display_name":"accepted_datetime"},"QUALIFYING_DATETIME":{"type":"TIMESTAMP_TZ","index":75,"name":"QUALIFYING_DATETIME","comment":null,"display_name":"qualifying_datetime"},"QUALIFIED_DATETIME":{"type":"TIMESTAMP_TZ","index":76,"name":"QUALIFIED_DATETIME","comment":null,"display_name":"qualified_datetime"},"UNQUALIFIED_DATETIME":{"type":"TIMESTAMP_TZ","index":77,"name":"UNQUALIFIED_DATETIME","comment":null,"display_name":"unqualified_datetime"},"NURTURE_DATETIME":{"type":"TIMESTAMP_TZ","index":78,"name":"NURTURE_DATETIME","comment":null,"display_name":"nurture_datetime"},"BAD_DATA_DATETIME":{"type":"TIMESTAMP_TZ","index":79,"name":"BAD_DATA_DATETIME","comment":null,"display_name":"bad_data_datetime"},"WORKED_DATETIME":{"type":"TIMESTAMP_TZ","index":80,"name":"WORKED_DATETIME","comment":null,"display_name":"worked_datetime"},"WEB_PORTAL_PURCHASE_DATETIME":{"type":"TIMESTAMP_TZ","index":81,"name":"WEB_PORTAL_PURCHASE_DATETIME","comment":null,"display_name":"web_portal_purchase_datetime"},"SALES_SEGMENTATION":{"type":"TEXT","index":82,"name":"SALES_SEGMENTATION","comment":null,"display_name":"sales_segmentation"},"PERSON_SCORE":{"type":"FLOAT","index":83,"name":"PERSON_SCORE","comment":null,"display_name":"person_score"},"LEAD_STATUS":{"type":"TEXT","index":84,"name":"LEAD_STATUS","comment":null,"display_name":"lead_status"},"LAST_UTM_CAMPAIGN":{"type":"TEXT","index":85,"name":"LAST_UTM_CAMPAIGN","comment":null,"display_name":"last_utm_campaign"},"LAST_UTM_CONTENT":{"type":"TEXT","index":86,"name":"LAST_UTM_CONTENT","comment":null,"display_name":"last_utm_content"},"CRM_PARTNER_ID":{"type":"TEXT","index":87,"name":"CRM_PARTNER_ID","comment":null,"display_name":"crm_partner_id"},"PROSPECT_SHARE_STATUS":{"type":"TEXT","index":88,"name":"PROSPECT_SHARE_STATUS","comment":null,"display_name":"prospect_share_status"},"PARTNER_PROSPECT_STATUS":{"type":"TEXT","index":89,"name":"PARTNER_PROSPECT_STATUS","comment":null,"display_name":"partner_prospect_status"},"PARTNER_PROSPECT_ID":{"type":"TEXT","index":90,"name":"PARTNER_PROSPECT_ID","comment":null,"display_name":"partner_prospect_id"},"PARTNER_PROSPECT_OWNER_NAME":{"type":"TEXT","index":91,"name":"PARTNER_PROSPECT_OWNER_NAME","comment":null,"display_name":"partner_prospect_owner_name"},"NAME_OF_ACTIVE_SEQUENCE":{"type":"TEXT","index":92,"name":"NAME_OF_ACTIVE_SEQUENCE","comment":null,"display_name":"name_of_active_sequence"},"SEQUENCE_TASK_DUE_DATE":{"type":"DATE","index":93,"name":"SEQUENCE_TASK_DUE_DATE","comment":null,"display_name":"sequence_task_due_date"},"SEQUENCE_STATUS":{"type":"TEXT","index":94,"name":"SEQUENCE_STATUS","comment":null,"display_name":"sequence_status"},"SEQUENCE_STEP_TYPE":{"type":"TEXT","index":95,"name":"SEQUENCE_STEP_TYPE","comment":null,"display_name":"sequence_step_type"},"IS_ACTIVELY_BEING_SEQUENCED":{"type":"BOOLEAN","index":96,"name":"IS_ACTIVELY_BEING_SEQUENCED","comment":null,"display_name":"is_actively_being_sequenced"},"GA_CLIENT_ID":{"type":"TEXT","index":97,"name":"GA_CLIENT_ID","comment":null,"display_name":"ga_client_id"},"EMPLOYEE_BUCKET":{"type":"TEXT","index":98,"name":"EMPLOYEE_BUCKET","comment":null,"display_name":"employee_bucket"},"IS_FIRST_ORDER_INITIAL_MQL":{"type":"BOOLEAN","index":99,"name":"IS_FIRST_ORDER_INITIAL_MQL","comment":null,"display_name":"is_first_order_initial_mql"},"IS_FIRST_ORDER_MQL":{"type":"BOOLEAN","index":100,"name":"IS_FIRST_ORDER_MQL","comment":null,"display_name":"is_first_order_mql"},"IS_FIRST_ORDER_PERSON":{"type":"BOOLEAN","index":101,"name":"IS_FIRST_ORDER_PERSON","comment":null,"display_name":"is_first_order_person"},"TRUE_INITIAL_MQL_DATE":{"type":"TIMESTAMP_TZ","index":102,"name":"TRUE_INITIAL_MQL_DATE","comment":null,"display_name":"true_initial_mql_date"},"TRUE_MQL_DATE":{"type":"TIMESTAMP_TZ","index":103,"name":"TRUE_MQL_DATE","comment":null,"display_name":"true_mql_date"},"LAST_TRANSFER_DATE_TIME":{"type":"TIMESTAMP_TZ","index":104,"name":"LAST_TRANSFER_DATE_TIME","comment":null,"display_name":"last_transfer_date_time"},"INITIAL_MARKETO_MQL_DATE_TIME":{"type":"TIMESTAMP_TZ","index":105,"name":"INITIAL_MARKETO_MQL_DATE_TIME","comment":null,"display_name":"initial_marketo_mql_date_time"},"TIME_FROM_LAST_TRANSFER_TO_SEQUENCE":{"type":"FLOAT","index":106,"name":"TIME_FROM_LAST_TRANSFER_TO_SEQUENCE","comment":null,"display_name":"time_from_last_transfer_to_sequence"},"TIME_FROM_MQL_TO_LAST_TRANSFER":{"type":"FLOAT","index":107,"name":"TIME_FROM_MQL_TO_LAST_TRANSFER","comment":null,"display_name":"time_from_mql_to_last_transfer"},"IS_HIGH_PRIORITY":{"type":"BOOLEAN","index":108,"name":"is_high_priority","comment":null,"description":"Indicates whether the record is of high priority to contact by sales.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_high_priority"},"NET_NEW_SOURCE_CATEGORIES":{"type":"TEXT","index":109,"name":"NET_NEW_SOURCE_CATEGORIES","comment":null,"display_name":"net_new_source_categories"},"SOURCE_BUCKETS":{"type":"TEXT","index":110,"name":"SOURCE_BUCKETS","comment":null,"display_name":"source_buckets"},"TSP_OWNER":{"type":"TEXT","index":111,"name":"TSP_OWNER","comment":null,"display_name":"tsp_owner"},"TSP_REGION":{"type":"TEXT","index":112,"name":"TSP_REGION","comment":null,"display_name":"tsp_region"},"TSP_SUB_REGION":{"type":"TEXT","index":113,"name":"TSP_SUB_REGION","comment":null,"display_name":"tsp_sub_region"},"TSP_TERRITORY":{"type":"TEXT","index":114,"name":"TSP_TERRITORY","comment":null,"display_name":"tsp_territory"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT":{"type":"TEXT","index":115,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT","comment":null,"display_name":"account_demographics_sales_segment"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_DEPRECATED":{"type":"TEXT","index":116,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_DEPRECATED","comment":null,"display_name":"account_demographics_sales_segment_deprecated"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":117,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED","comment":null,"display_name":"account_demographics_sales_segment_grouped"},"ACCOUNT_DEMOGRAPHICS_GEO":{"type":"TEXT","index":118,"name":"ACCOUNT_DEMOGRAPHICS_GEO","comment":null,"display_name":"account_demographics_geo"},"ACCOUNT_DEMOGRAPHICS_REGION":{"type":"TEXT","index":119,"name":"ACCOUNT_DEMOGRAPHICS_REGION","comment":null,"display_name":"account_demographics_region"},"ACCOUNT_DEMOGRAPHICS_AREA":{"type":"TEXT","index":120,"name":"ACCOUNT_DEMOGRAPHICS_AREA","comment":null,"display_name":"account_demographics_area"},"ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED":{"type":"TEXT","index":121,"name":"ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED","comment":null,"display_name":"account_demographics_segment_region_grouped"},"ACCOUNT_DEMOGRAPHICS_TERRITORY":{"type":"TEXT","index":122,"name":"ACCOUNT_DEMOGRAPHICS_TERRITORY","comment":null,"display_name":"account_demographics_territory"},"ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT":{"type":"FLOAT","index":123,"name":"ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT","comment":null,"display_name":"account_demographics_employee_count"},"ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":124,"name":"ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"account_demographics_max_family_employee"},"ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY":{"type":"TEXT","index":125,"name":"ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY","comment":null,"display_name":"account_demographics_upa_country"},"ACCOUNT_DEMOGRAPHICS_UPA_STATE":{"type":"TEXT","index":126,"name":"ACCOUNT_DEMOGRAPHICS_UPA_STATE","comment":null,"display_name":"account_demographics_upa_state"},"ACCOUNT_DEMOGRAPHICS_UPA_CITY":{"type":"TEXT","index":127,"name":"ACCOUNT_DEMOGRAPHICS_UPA_CITY","comment":null,"display_name":"account_demographics_upa_city"},"ACCOUNT_DEMOGRAPHICS_UPA_STREET":{"type":"TEXT","index":128,"name":"ACCOUNT_DEMOGRAPHICS_UPA_STREET","comment":null,"display_name":"account_demographics_upa_street"},"ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE":{"type":"TEXT","index":129,"name":"ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE","comment":null,"display_name":"account_demographics_upa_postal_code"},"PATHFACTORY_EXPERIENCE_NAME":{"type":"TEXT","index":130,"name":"PATHFACTORY_EXPERIENCE_NAME","comment":null,"display_name":"pathfactory_experience_name"},"PATHFACTORY_ENGAGEMENT_SCORE":{"type":"FLOAT","index":131,"name":"PATHFACTORY_ENGAGEMENT_SCORE","comment":null,"display_name":"pathfactory_engagement_score"},"PATHFACTORY_CONTENT_COUNT":{"type":"FLOAT","index":132,"name":"PATHFACTORY_CONTENT_COUNT","comment":null,"display_name":"pathfactory_content_count"},"PATHFACTORY_CONTENT_LIST":{"type":"TEXT","index":133,"name":"PATHFACTORY_CONTENT_LIST","comment":null,"display_name":"pathfactory_content_list"},"PATHFACTORY_CONTENT_JOURNEY":{"type":"TEXT","index":134,"name":"PATHFACTORY_CONTENT_JOURNEY","comment":null,"display_name":"pathfactory_content_journey"},"PATHFACTORY_TOPIC_LIST":{"type":"TEXT","index":135,"name":"PATHFACTORY_TOPIC_LIST","comment":null,"display_name":"pathfactory_topic_list"},"MARKETO_LAST_INTERESTING_MOMENT":{"type":"TEXT","index":136,"name":"MARKETO_LAST_INTERESTING_MOMENT","comment":null,"display_name":"marketo_last_interesting_moment"},"MARKETO_LAST_INTERESTING_MOMENT_DATE":{"type":"TIMESTAMP_TZ","index":137,"name":"MARKETO_LAST_INTERESTING_MOMENT_DATE","comment":null,"display_name":"marketo_last_interesting_moment_date"},"BUSINESS_DEVELOPMENT_LOOK_UP":{"type":"TEXT","index":138,"name":"BUSINESS_DEVELOPMENT_LOOK_UP","comment":null,"display_name":"business_development_look_up"},"BUSINESS_DEVELOPMENT_REPRESENTATIVE_CONTACT":{"type":"TEXT","index":139,"name":"BUSINESS_DEVELOPMENT_REPRESENTATIVE_CONTACT","comment":null,"display_name":"business_development_representative_contact"},"BUSINESS_DEVELOPMENT_REPRESENTATIVE":{"type":"TEXT","index":140,"name":"BUSINESS_DEVELOPMENT_REPRESENTATIVE","comment":null,"display_name":"business_development_representative"},"SALES_DEVELOPMENT_REPRESENTATIVE":{"type":"TEXT","index":141,"name":"SALES_DEVELOPMENT_REPRESENTATIVE","comment":null,"display_name":"sales_development_representative"},"COMPETITION":{"type":"TEXT","index":142,"name":"COMPETITION","comment":null,"display_name":"competition"},"COGNISM_COMPANY_OFFICE_CITY":{"type":"TEXT","index":143,"name":"COGNISM_COMPANY_OFFICE_CITY","comment":null,"display_name":"cognism_company_office_city"},"COGNISM_COMPANY_OFFICE_STATE":{"type":"TEXT","index":144,"name":"COGNISM_COMPANY_OFFICE_STATE","comment":null,"display_name":"cognism_company_office_state"},"COGNISM_COMPANY_OFFICE_COUNTRY":{"type":"TEXT","index":145,"name":"COGNISM_COMPANY_OFFICE_COUNTRY","comment":null,"display_name":"cognism_company_office_country"},"COGNISM_CITY":{"type":"TEXT","index":146,"name":"COGNISM_CITY","comment":null,"display_name":"cognism_city"},"COGNISM_STATE":{"type":"TEXT","index":147,"name":"COGNISM_STATE","comment":null,"display_name":"cognism_state"},"COGNISM_COUNTRY":{"type":"TEXT","index":148,"name":"COGNISM_COUNTRY","comment":null,"display_name":"cognism_country"},"COGNISM_EMPLOYEE_COUNT":{"type":"FLOAT","index":149,"name":"COGNISM_EMPLOYEE_COUNT","comment":null,"display_name":"cognism_employee_count"},"LEANDATA_MATCHED_ACCOUNT_BILLING_STATE":{"type":"TEXT","index":150,"name":"LEANDATA_MATCHED_ACCOUNT_BILLING_STATE","comment":null,"display_name":"leandata_matched_account_billing_state"},"LEANDATA_MATCHED_ACCOUNT_BILLING_POSTAL_CODE":{"type":"TEXT","index":151,"name":"LEANDATA_MATCHED_ACCOUNT_BILLING_POSTAL_CODE","comment":null,"display_name":"leandata_matched_account_billing_postal_code"},"LEANDATA_MATCHED_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":152,"name":"LEANDATA_MATCHED_ACCOUNT_BILLING_COUNTRY","comment":null,"display_name":"leandata_matched_account_billing_country"},"LEANDATA_MATCHED_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":153,"name":"LEANDATA_MATCHED_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"leandata_matched_account_employee_count"},"LEANDATA_MATCHED_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":154,"name":"LEANDATA_MATCHED_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"leandata_matched_account_sales_segment"},"CREATED_BY_ID":{"type":"TEXT","index":155,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":156,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":157,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_ACTIVITY_DATE":{"type":"DATE","index":158,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"LAST_MODIFIED_ID":{"type":"TEXT","index":159,"name":"LAST_MODIFIED_ID","comment":null,"display_name":"last_modified_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":160,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"SYSTEMMODSTAMP":{"type":"TIMESTAMP_TZ","index":161,"name":"SYSTEMMODSTAMP","comment":null,"display_name":"systemmodstamp"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_lead_source","raw_sql":"$32","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.email_domain_type","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.sales_segment_cleaning","macro.gitlab_snowflake.sfdc_source_buckets","macro.gitlab_snowflake.sales_segment_region_grouped","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.salesforce.lead","seed.gitlab_snowflake.personal_email_domains","seed.gitlab_snowflake.personal_email_domains","seed.gitlab_snowflake.personal_email_domains","seed.gitlab_snowflake.personal_email_domains"]},"config":{"enabled":true,"alias":null,"schema":"sfdc","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sfdc","fqn":["gitlab_snowflake","sources","sfdc","sfdc_lead_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/sfdc/sfdc_lead_source.sql","original_file_path":"models/sources/sfdc/sfdc_lead_source.sql","name":"sfdc_lead_source","alias":"sfdc_lead_source","checksum":{"name":"sha256","checksum":"e6fb8ffa3dc62cba8d263144cac55abd143965ba150f84aecf8d2f32ee21b9db"},"tags":["sources"],"refs":[["personal_email_domains"],["personal_email_domains"],["personal_email_domains"],["personal_email_domains"]],"sources":[["salesforce","lead"]],"metrics":[],"description":"Source model for SFDC Leads","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/sfdc/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/sfdc/sfdc_lead_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sfdc","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033749.6331837,"compiled_sql":"$33","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sfdc.sfdc_lead_source","label":"sfdc_lead_source"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"DIM_CRM_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"dim_crm_account_id","comment":null,"description":"Account ID from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","sales_funnel"],"tests":[{"test_name":"dbt_utils.relationships_where","short":"+","label":"dbt_utils.relationships_where({\"to\":\"ref('dim_crm_account')\",\"field\":\"dim_crm_account_id\",\"from_condition\":\"GREATEST(IFNULL(lead_created_date, '1999-01-01'), IFNULL(contact_created_date, '1999-01-01')) <= DATEADD('day', -2, CURRENT_DATE)::DATE\",\"model\":\"{{ get_where_subquery(ref('fct_crm_person')) }}\"})"},{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"dbt_utils.relationships_where","short":"+","label":"dbt_utils.relationships_where({\"to\":\"ref('dim_crm_account')\",\"field\":\"dim_crm_account_id\",\"from_condition\":\"created_date <= DATEADD('day', -3, CURRENT_DATE)::DATE\",\"model\":\"{{ get_where_subquery(ref('fct_crm_opportunity')) }}\"})"}],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_parent_crm_account_id","comment":null,"description":"Ultimate parent account 18 character Salesforce ID","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"DIM_CRM_USER_ID":{"type":"TEXT","index":3,"name":"dim_crm_user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_user_id"},"MERGED_TO_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"merged_to_account_id","comment":null,"description":"For deleted accounts, this is the SFDC account they were merged into","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merged_to_account_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":5,"name":"record_type_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_type_id"},"MASTER_RECORD_ID":{"type":"TEXT","index":6,"name":"master_record_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"master_record_id"},"DIM_CRM_PERSON_PRIMARY_CONTACT_ID":{"type":"TEXT","index":7,"name":"dim_crm_person_primary_contact_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_person_primary_contact_id"},"CRM_ACCOUNT_OWNER":{"type":"TEXT","index":8,"name":"crm_account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_owner"},"PROPOSED_CRM_ACCOUNT_OWNER":{"type":"TEXT","index":9,"name":"proposed_crm_account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"proposed_crm_account_owner"},"ACCOUNT_OWNER":{"type":"TEXT","index":10,"name":"account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":11,"name":"technical_account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"OWNER_ROLE":{"type":"TEXT","index":12,"name":"owner_role","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_role"},"USER_ROLE_TYPE":{"type":"TEXT","index":13,"name":"user_role_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_role_type"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":14,"name":"parent_crm_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":15,"name":"parent_crm_account_sales_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":16,"name":"parent_crm_account_sales_segment_grouped","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment_grouped"},"PARENT_CRM_ACCOUNT_SEGMENT_REGION_STAMPED_GROUPED":{"type":"TEXT","index":17,"name":"parent_crm_account_segment_region_stamped_grouped","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_segment_region_stamped_grouped"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":18,"name":"parent_crm_account_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":19,"name":"parent_crm_account_business_unit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_business_unit"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":20,"name":"parent_crm_account_geo","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":21,"name":"parent_crm_account_region","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":22,"name":"parent_crm_account_area","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":23,"name":"parent_crm_account_territory","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":24,"name":"parent_crm_account_role_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_role_type"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":25,"name":"parent_crm_account_max_family_employee","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_max_family_employee"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":26,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":27,"name":"parent_crm_account_upa_state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":28,"name":"parent_crm_account_upa_city","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_STREET":{"type":"TEXT","index":29,"name":"parent_crm_account_upa_street","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_street"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":30,"name":"parent_crm_account_upa_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_postal_code"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":31,"name":"crm_account_name","comment":null,"description":"Account name from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":32,"name":"crm_account_employee_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_employee_count"},"CRM_ACCOUNT_GTM_STRATEGY":{"type":"TEXT","index":33,"name":"crm_account_gtm_strategy","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_gtm_strategy"},"CRM_ACCOUNT_FOCUS_ACCOUNT":{"type":"TEXT","index":34,"name":"crm_account_focus_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_focus_account"},"CRM_ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":35,"name":"crm_account_owner_user_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_owner_user_segment"},"CRM_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":36,"name":"crm_account_billing_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_billing_country"},"CRM_ACCOUNT_BILLING_COUNTRY_CODE":{"type":"TEXT","index":37,"name":"crm_account_billing_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_billing_country_code"},"CRM_ACCOUNT_TYPE":{"type":"TEXT","index":38,"name":"crm_account_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_type"},"CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":39,"name":"crm_account_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_industry"},"CRM_ACCOUNT_SUB_INDUSTRY":{"type":"TEXT","index":40,"name":"crm_account_sub_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_sub_industry"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":41,"name":"crm_account_employee_count_band","comment":null,"description":"Employee count band the account belongs to based on the account_max_family_employee. Bands include \"> 2K\", \"> 1.5K\", \"> 1K\".","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_employee_count_band"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":42,"name":"partner_vat_tax_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_vat_tax_id"},"ACCOUNT_MANAGER":{"type":"TEXT","index":43,"name":"account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_manager"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":44,"name":"business_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":45,"name":"dedicated_service_engineer","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dedicated_service_engineer"},"ACCOUNT_TIER":{"type":"TEXT","index":46,"name":"account_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":47,"name":"account_tier_notes","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier_notes"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":48,"name":"license_utilization","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":49,"name":"support_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":50,"name":"named_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"named_account"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":51,"name":"billing_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_postal_code"},"PARTNER_TYPE":{"type":"TEXT","index":52,"name":"partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":53,"name":"partner_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_status"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":54,"name":"gitlab_customer_success_project","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_customer_success_project"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":55,"name":"demandbase_account_list","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":56,"name":"demandbase_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":57,"name":"demandbase_page_views","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":58,"name":"demandbase_score","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":59,"name":"demandbase_sessions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":60,"name":"demandbase_trending_offsite_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":61,"name":"demandbase_trending_onsite_engagement","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_onsite_engagement"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":62,"name":"is_locally_managed_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":63,"name":"is_strategic_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_strategic_account"},"PARTNER_TRACK":{"type":"TEXT","index":64,"name":"partner_track","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":65,"name":"partners_partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":66,"name":"gitlab_partner_program","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_partner_program"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":67,"name":"zoom_info_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":68,"name":"zoom_info_company_revenue","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":69,"name":"zoom_info_company_employee_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":70,"name":"zoom_info_company_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":71,"name":"zoom_info_company_city","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":72,"name":"zoom_info_company_state_province","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":73,"name":"zoom_info_company_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_country"},"ACCOUNT_PHONE":{"type":"TEXT","index":74,"name":"account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":75,"name":"zoominfo_account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_account_phone"},"ABM_TIER":{"type":"TEXT","index":76,"name":"abm_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier"},"HEALTH_NUMBER":{"type":"FLOAT","index":77,"name":"health_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":78,"name":"health_score_color","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_score_color"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":79,"name":"partner_account_iban_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_account_iban_number"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":80,"name":"gitlab_com_user","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user"},"CRM_ACCOUNT_ZI_TECHNOLOGIES":{"type":"TEXT","index":81,"name":"crm_account_zi_technologies","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zi_technologies"},"CRM_ACCOUNT_ZOOM_INFO_WEBSITE":{"type":"TEXT","index":82,"name":"crm_account_zoom_info_website","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_website"},"CRM_ACCOUNT_ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":83,"name":"crm_account_zoom_info_company_other_domains","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_company_other_domains"},"CRM_ACCOUNT_ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":84,"name":"crm_account_zoom_info_dozisf_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_dozisf_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":85,"name":"crm_account_zoom_info_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":86,"name":"crm_account_zoom_info_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_parent_company_name"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":87,"name":"crm_account_zoom_info_ultimate_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_ultimate_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":88,"name":"crm_account_zoom_info_ultimate_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_ultimate_parent_company_name"},"FORBES_2000_RANK":{"type":"TEXT","index":89,"name":"forbes_2000_rank","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"forbes_2000_rank"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":90,"name":"sales_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_development_rep"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":91,"name":"admin_manual_source_number_of_employees","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":92,"name":"admin_manual_source_account_address","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_account_address"},"EOA_SENTIMENT":{"type":"TEXT","index":93,"name":"eoa_sentiment","comment":null,"description":" Red - customer was unhappy with the announcement and there's potential risk of churn\nYellow - customer exhibited some dissatisfaction with the announcement but likely won't churn\nGreen - customer responded favourably to the announcement and is a strong candidate to uptier ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":94,"name":"gs_health_user_engagement","comment":null,"description":" [Customer health score for engaging in meetings, cadence calls, or EBRs](https://about.gitlab.com/handbook/customer-success/customer-health-scoring/#customer-engagement). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":95,"name":"gs_health_cd","comment":null,"description":" Customer [health score for CD use case adoption](https://about.gitlab.com/handbook/customer-success/product-usage-data/maturity-scoring/#cd-adoption-scoring). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":96,"name":"gs_health_devsecops","comment":null,"description":" Customer [health score for DevSecOps use case adoption](https://about.gitlab.com/handbook/customer-success/product-usage-data/maturity-scoring/#devsecops-adoption-scoring). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":97,"name":"gs_health_ci","comment":null,"description":" Customer [health score for CI use case adoption](https://about.gitlab.com/handbook/customer-success/product-usage-data/maturity-scoring/#ci-adoption-scoring). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":98,"name":"gs_health_scm","comment":null,"description":" [Customer health score for source code management (SCM) use case adoption](https://about.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/usecase-gtm/version-control-collaboration/#adoption-guide). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":99,"name":"risk_impact","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":100,"name":"risk_reason","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":101,"name":"last_timeline_at_risk_update","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":102,"name":"last_at_risk_update_comments","comment":null,"description":" The most recent Account-level At-Risk Update timeline activity in Gainsight, synced to Salesforce. ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_at_risk_update_comments"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":103,"name":"BDR_PROSPECTING_STATUS","comment":null,"display_name":"bdr_prospecting_status"},"PARENT_CRM_ACCOUNT_LAM":{"type":"FLOAT","index":104,"name":"parent_crm_account_lam","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_lam"},"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT":{"type":"FLOAT","index":105,"name":"parent_crm_account_lam_dev_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_lam_dev_count"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":106,"name":"carr_account_family","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_account_family"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":107,"name":"carr_this_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_this_account"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":108,"name":"is_sdr_target_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sdr_target_account"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":109,"name":"is_key_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_key_account"},"IS_RESELLER":{"type":"BOOLEAN","index":110,"name":"is_reseller","comment":null,"description":"Identify whether a crm_account is a reseller.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","sales_funnel"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_reseller"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":111,"name":"is_jihu_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_jihu_account"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":112,"name":"is_first_order_available","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_order_available"},"IS_ZI_JENKINS_PRESENT":{"type":"NUMBER","index":113,"name":"is_zi_jenkins_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_jenkins_present"},"IS_ZI_SVN_PRESENT":{"type":"NUMBER","index":114,"name":"is_zi_svn_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_svn_present"},"IS_ZI_TORTOISE_SVN_PRESENT":{"type":"NUMBER","index":115,"name":"is_zi_tortoise_svn_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_tortoise_svn_present"},"IS_ZI_GCP_PRESENT":{"type":"NUMBER","index":116,"name":"is_zi_gcp_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_gcp_present"},"IS_ZI_ATLASSIAN_PRESENT":{"type":"NUMBER","index":117,"name":"is_zi_atlassian_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_atlassian_present"},"IS_ZI_GITHUB_PRESENT":{"type":"NUMBER","index":118,"name":"is_zi_github_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_github_present"},"IS_ZI_GITHUB_ENTERPRISE_PRESENT":{"type":"NUMBER","index":119,"name":"is_zi_github_enterprise_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_github_enterprise_present"},"IS_ZI_AWS_PRESENT":{"type":"NUMBER","index":120,"name":"is_zi_aws_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_aws_present"},"IS_ZI_KUBERNETES_PRESENT":{"type":"NUMBER","index":121,"name":"is_zi_kubernetes_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_kubernetes_present"},"IS_ZI_APACHE_SUBVERSION_PRESENT":{"type":"NUMBER","index":122,"name":"is_zi_apache_subversion_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_apache_subversion_present"},"IS_ZI_APACHE_SUBVERSION_SVN_PRESENT":{"type":"NUMBER","index":123,"name":"is_zi_apache_subversion_svn_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_apache_subversion_svn_present"},"IS_ZI_HASHICORP_PRESENT":{"type":"NUMBER","index":124,"name":"is_zi_hashicorp_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_hashicorp_present"},"IS_ZI_AWS_CLOUD_TRAIL_PRESENT":{"type":"NUMBER","index":125,"name":"is_zi_aws_cloud_trail_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_aws_cloud_trail_present"},"IS_ZI_CIRCLE_CI_PRESENT":{"type":"NUMBER","index":126,"name":"is_zi_circle_ci_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_circle_ci_present"},"IS_ZI_BIT_BUCKET_PRESENT":{"type":"NUMBER","index":127,"name":"is_zi_bit_bucket_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_bit_bucket_present"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":128,"name":"is_excluded_from_zoom_info_enrich","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded_from_zoom_info_enrich"},"CRM_ACCOUNT_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":129,"name":"crm_account_created_date","comment":null,"description":"The date on which the CRM account was created in SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_created_date"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":130,"name":"abm_tier_1_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":131,"name":"abm_tier_2_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":132,"name":"abm_tier_3_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_3_date"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":133,"name":"gtm_acceleration_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":134,"name":"gtm_account_based_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":135,"name":"gtm_account_centric_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_centric_date"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"DATE","index":136,"name":"partners_signed_contract_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_signed_contract_date"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":137,"name":"technical_account_manager_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager_date"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":138,"name":"customer_since_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_since_date"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":139,"name":"next_renewal_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_renewal_date"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":140,"name":"gs_first_value_date","comment":null,"description":" Date when the account reached 10% of license utiliztion. The goal is to reach this within 30 days. ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":141,"name":"gs_last_csm_activity_date","comment":null,"description":" Last time the CSM had contact with the customer. ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_last_csm_activity_date"},"CREATED_BY_NAME":{"type":"TEXT","index":142,"name":"created_by_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by_name"},"LAST_MODIFIED_BY_NAME":{"type":"TEXT","index":143,"name":"last_modified_by_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_modified_by_name"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":144,"name":"last_modified_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":145,"name":"last_activity_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_activity_date"},"IS_DELETED":{"type":"BOOLEAN","index":146,"name":"is_deleted","comment":null,"description":"Flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"PTE_SCORE":{"type":"NUMBER","index":147,"name":"pte_score","comment":null,"description":"Propensity to expand scores from pte_scores_source","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pte_score"},"PTE_DECILE":{"type":"NUMBER","index":148,"name":"pte_decile","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pte_decile"},"PTE_SCORE_GROUP":{"type":"NUMBER","index":149,"name":"pte_score_group","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pte_score_group"},"PTC_SCORE":{"type":"NUMBER","index":150,"name":"ptc_score","comment":null,"description":"Propensity to contract and churn scores from ptc_scores_source","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptc_score"},"PTC_DECILE":{"type":"NUMBER","index":151,"name":"ptc_decile","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptc_decile"},"PTC_SCORE_GROUP":{"type":"NUMBER","index":152,"name":"ptc_score_group","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptc_score_group"},"CREATED_BY":{"type":"TEXT","index":153,"name":"created_by","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":154,"name":"updated_by","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":155,"name":"model_created_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":156,"name":"model_updated_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":157,"name":"dbt_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":158,"name":"dbt_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":69577728,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_crm_account","raw_sql":"$34","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model","macro.gitlab_snowflake.missing_member_column"],"nodes":["model.gitlab_snowflake.prep_crm_account","model.gitlab_snowflake.prep_crm_account"]},"config":{"enabled":true,"alias":"dim_crm_account","schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null},{"sql":"{{ missing_member_column(primary_key = 'dim_crm_account_id', not_null_test_cols = ['is_reseller']) }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","dimensions_shared","restricted_safe","dim_crm_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/restricted_safe/dim_crm_account.sql","original_file_path":"models/common/dimensions_shared/restricted_safe/dim_crm_account.sql","name":"dim_crm_account","alias":"dim_crm_account","checksum":{"name":"sha256","checksum":"826460cc404a35e0194800d84ecc908ea8b1d4280f9a6190fe0fab28bb7e3456"},"tags":["safe"],"refs":[["prep_crm_account"],["prep_crm_account"]],"sources":[],"metrics":[],"description":"Dimensional customer table representing all existing and historical customers from SalesForce. There are customer definitions for external reporting and additional customer definitions for internal reporting defined in the [handbook](https://about.gitlab.com/handbook/sales/#customer).\n\nThe Customer Account Management business process can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#1-customer-account-management-and-conversion-of-lead-to-opportunity).\n\nThe grain of the table is the SalesForce Account, also referred to as `DIM_CRM_ACCOUNT_ID`.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/restricted_safe/dim_crm_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ missing_member_column(primary_key = 'dim_crm_account_id', not_null_test_cols = ['is_reseller']) }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"alias":"dim_crm_account"},"created_at":1689033752.0030825,"compiled_sql":"$35","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.dim_crm_account","label":"dim_crm_account"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_CRM_PERSON","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CRM_PERSON_ID":{"type":"TEXT","index":1,"name":"DIM_CRM_PERSON_ID","comment":null,"display_name":"dim_crm_person_id"},"SFDC_RECORD_ID":{"type":"TEXT","index":2,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"BIZIBLE_PERSON_ID":{"type":"TEXT","index":3,"name":"BIZIBLE_PERSON_ID","comment":null,"display_name":"bizible_person_id"},"SFDC_RECORD_TYPE":{"type":"TEXT","index":4,"name":"SFDC_RECORD_TYPE","comment":null,"display_name":"sfdc_record_type"},"EMAIL_HASH":{"type":"TEXT","index":5,"name":"EMAIL_HASH","comment":null,"display_name":"email_hash"},"EMAIL_DOMAIN":{"type":"TEXT","index":6,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"EMAIL_DOMAIN_TYPE":{"type":"TEXT","index":7,"name":"EMAIL_DOMAIN_TYPE","comment":null,"display_name":"email_domain_type"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":8,"name":"MARKETO_LEAD_ID","comment":null,"display_name":"marketo_lead_id"},"MASTER_RECORD_ID":{"type":"TEXT","index":9,"name":"MASTER_RECORD_ID","comment":null,"display_name":"master_record_id"},"OWNER_ID":{"type":"TEXT","index":10,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":11,"name":"RECORD_TYPE_ID","comment":null,"display_name":"record_type_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"REPORTS_TO_ID":{"type":"TEXT","index":13,"name":"REPORTS_TO_ID","comment":null,"display_name":"reports_to_id"},"DIM_CRM_USER_ID":{"type":"TEXT","index":14,"name":"DIM_CRM_USER_ID","comment":null,"display_name":"dim_crm_user_id"},"PERSON_SCORE":{"type":"FLOAT","index":15,"name":"PERSON_SCORE","comment":null,"display_name":"person_score"},"BEHAVIOR_SCORE":{"type":"FLOAT","index":16,"name":"BEHAVIOR_SCORE","comment":null,"display_name":"behavior_score"},"TITLE":{"type":"TEXT","index":17,"name":"TITLE","comment":null,"display_name":"title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":18,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"HAS_OPTED_OUT_EMAIL":{"type":"BOOLEAN","index":19,"name":"HAS_OPTED_OUT_EMAIL","comment":null,"display_name":"has_opted_out_email"},"EMAIL_BOUNCED_DATE":{"type":"TIMESTAMP_TZ","index":20,"name":"EMAIL_BOUNCED_DATE","comment":null,"display_name":"email_bounced_date"},"EMAIL_BOUNCED_REASON":{"type":"TEXT","index":21,"name":"EMAIL_BOUNCED_REASON","comment":null,"display_name":"email_bounced_reason"},"STATUS":{"type":"TEXT","index":22,"name":"STATUS","comment":null,"display_name":"status"},"LEAD_SOURCE":{"type":"TEXT","index":23,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"LEAD_SOURCE_TYPE":{"type":"TEXT","index":24,"name":"LEAD_SOURCE_TYPE","comment":null,"display_name":"lead_source_type"},"WAS_CONVERTED_LEAD":{"type":"NUMBER","index":25,"name":"WAS_CONVERTED_LEAD","comment":null,"display_name":"was_converted_lead"},"SOURCE_BUCKETS":{"type":"TEXT","index":26,"name":"SOURCE_BUCKETS","comment":null,"display_name":"source_buckets"},"NET_NEW_SOURCE_CATEGORIES":{"type":"TEXT","index":27,"name":"NET_NEW_SOURCE_CATEGORIES","comment":null,"display_name":"net_new_source_categories"},"BIZIBLE_TOUCHPOINT_POSITION":{"type":"TEXT","index":28,"name":"BIZIBLE_TOUCHPOINT_POSITION","comment":null,"display_name":"bizible_touchpoint_position"},"BIZIBLE_MARKETING_CHANNEL_PATH":{"type":"TEXT","index":29,"name":"BIZIBLE_MARKETING_CHANNEL_PATH","comment":null,"display_name":"bizible_marketing_channel_path"},"BIZIBLE_TOUCHPOINT_DATE":{"type":"TIMESTAMP_TZ","index":30,"name":"BIZIBLE_TOUCHPOINT_DATE","comment":null,"display_name":"bizible_touchpoint_date"},"MARKETO_LAST_INTERESTING_MOMENT":{"type":"TEXT","index":31,"name":"MARKETO_LAST_INTERESTING_MOMENT","comment":null,"display_name":"marketo_last_interesting_moment"},"MARKETO_LAST_INTERESTING_MOMENT_DATE":{"type":"TIMESTAMP_TZ","index":32,"name":"MARKETO_LAST_INTERESTING_MOMENT_DATE","comment":null,"display_name":"marketo_last_interesting_moment_date"},"OUTREACH_STEP_NUMBER":{"type":"FLOAT","index":33,"name":"OUTREACH_STEP_NUMBER","comment":null,"display_name":"outreach_step_number"},"MATCHED_ACCOUNT_OWNER_ROLE":{"type":"TEXT","index":34,"name":"MATCHED_ACCOUNT_OWNER_ROLE","comment":null,"display_name":"matched_account_owner_role"},"MATCHED_ACCOUNT_ACCOUNT_OWNER_NAME":{"type":"TEXT","index":35,"name":"MATCHED_ACCOUNT_ACCOUNT_OWNER_NAME","comment":null,"display_name":"matched_account_account_owner_name"},"MATCHED_ACCOUNT_SDR_ASSIGNED":{"type":"TEXT","index":36,"name":"MATCHED_ACCOUNT_SDR_ASSIGNED","comment":null,"display_name":"matched_account_sdr_assigned"},"MATCHED_ACCOUNT_TYPE":{"type":"TEXT","index":37,"name":"MATCHED_ACCOUNT_TYPE","comment":null,"display_name":"matched_account_type"},"MATCHED_ACCOUNT_GTM_STRATEGY":{"type":"TEXT","index":38,"name":"MATCHED_ACCOUNT_GTM_STRATEGY","comment":null,"display_name":"matched_account_gtm_strategy"},"MATCHED_ACCOUNT_BDR_PROSPECTING_STATUS":{"type":"TEXT","index":39,"name":"MATCHED_ACCOUNT_BDR_PROSPECTING_STATUS","comment":null,"display_name":"matched_account_bdr_prospecting_status"},"IS_FIRST_ORDER_INITIAL_MQL":{"type":"BOOLEAN","index":40,"name":"IS_FIRST_ORDER_INITIAL_MQL","comment":null,"display_name":"is_first_order_initial_mql"},"IS_FIRST_ORDER_MQL":{"type":"BOOLEAN","index":41,"name":"IS_FIRST_ORDER_MQL","comment":null,"display_name":"is_first_order_mql"},"IS_FIRST_ORDER_PERSON":{"type":"BOOLEAN","index":42,"name":"IS_FIRST_ORDER_PERSON","comment":null,"display_name":"is_first_order_person"},"LAST_UTM_CONTENT":{"type":"TEXT","index":43,"name":"LAST_UTM_CONTENT","comment":null,"display_name":"last_utm_content"},"LAST_UTM_CAMPAIGN":{"type":"TEXT","index":44,"name":"LAST_UTM_CAMPAIGN","comment":null,"display_name":"last_utm_campaign"},"SEQUENCE_STEP_TYPE":{"type":"TEXT","index":45,"name":"SEQUENCE_STEP_TYPE","comment":null,"display_name":"sequence_step_type"},"NAME_OF_ACTIVE_SEQUENCE":{"type":"TEXT","index":46,"name":"NAME_OF_ACTIVE_SEQUENCE","comment":null,"display_name":"name_of_active_sequence"},"SEQUENCE_TASK_DUE_DATE":{"type":"DATE","index":47,"name":"SEQUENCE_TASK_DUE_DATE","comment":null,"display_name":"sequence_task_due_date"},"SEQUENCE_STATUS":{"type":"TEXT","index":48,"name":"SEQUENCE_STATUS","comment":null,"display_name":"sequence_status"},"IS_ACTIVELY_BEING_SEQUENCED":{"type":"BOOLEAN","index":49,"name":"IS_ACTIVELY_BEING_SEQUENCED","comment":null,"display_name":"is_actively_being_sequenced"},"IS_HIGH_PRIORITY":{"type":"BOOLEAN","index":50,"name":"IS_HIGH_PRIORITY","comment":null,"display_name":"is_high_priority"},"PROSPECT_SHARE_STATUS":{"type":"TEXT","index":51,"name":"PROSPECT_SHARE_STATUS","comment":null,"display_name":"prospect_share_status"},"PARTNER_PROSPECT_STATUS":{"type":"TEXT","index":52,"name":"PARTNER_PROSPECT_STATUS","comment":null,"display_name":"partner_prospect_status"},"PARTNER_PROSPECT_ID":{"type":"TEXT","index":53,"name":"PARTNER_PROSPECT_ID","comment":null,"display_name":"partner_prospect_id"},"PARTNER_PROSPECT_OWNER_NAME":{"type":"TEXT","index":54,"name":"PARTNER_PROSPECT_OWNER_NAME","comment":null,"display_name":"partner_prospect_owner_name"},"COUNTRY":{"type":"TEXT","index":55,"name":"COUNTRY","comment":null,"display_name":"country"},"STATE":{"type":"TEXT","index":56,"name":"STATE","comment":null,"display_name":"state"},"LAST_ACTIVITY_DATE":{"type":"DATE","index":57,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"EMPLOYEE_BUCKET":{"type":"TEXT","index":58,"name":"EMPLOYEE_BUCKET","comment":null,"display_name":"employee_bucket"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT":{"type":"TEXT","index":59,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT","comment":null,"display_name":"account_demographics_sales_segment"},"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":60,"name":"ACCOUNT_DEMOGRAPHICS_SALES_SEGMENT_GROUPED","comment":null,"display_name":"account_demographics_sales_segment_grouped"},"ACCOUNT_DEMOGRAPHICS_GEO":{"type":"TEXT","index":61,"name":"ACCOUNT_DEMOGRAPHICS_GEO","comment":null,"display_name":"account_demographics_geo"},"ACCOUNT_DEMOGRAPHICS_REGION":{"type":"TEXT","index":62,"name":"ACCOUNT_DEMOGRAPHICS_REGION","comment":null,"display_name":"account_demographics_region"},"ACCOUNT_DEMOGRAPHICS_AREA":{"type":"TEXT","index":63,"name":"ACCOUNT_DEMOGRAPHICS_AREA","comment":null,"display_name":"account_demographics_area"},"ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED":{"type":"TEXT","index":64,"name":"ACCOUNT_DEMOGRAPHICS_SEGMENT_REGION_GROUPED","comment":null,"display_name":"account_demographics_segment_region_grouped"},"ACCOUNT_DEMOGRAPHICS_TERRITORY":{"type":"TEXT","index":65,"name":"ACCOUNT_DEMOGRAPHICS_TERRITORY","comment":null,"display_name":"account_demographics_territory"},"ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT":{"type":"FLOAT","index":66,"name":"ACCOUNT_DEMOGRAPHICS_EMPLOYEE_COUNT","comment":null,"display_name":"account_demographics_employee_count"},"ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":67,"name":"ACCOUNT_DEMOGRAPHICS_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"account_demographics_max_family_employee"},"ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY":{"type":"TEXT","index":68,"name":"ACCOUNT_DEMOGRAPHICS_UPA_COUNTRY","comment":null,"display_name":"account_demographics_upa_country"},"ACCOUNT_DEMOGRAPHICS_UPA_STATE":{"type":"TEXT","index":69,"name":"ACCOUNT_DEMOGRAPHICS_UPA_STATE","comment":null,"display_name":"account_demographics_upa_state"},"ACCOUNT_DEMOGRAPHICS_UPA_CITY":{"type":"TEXT","index":70,"name":"ACCOUNT_DEMOGRAPHICS_UPA_CITY","comment":null,"display_name":"account_demographics_upa_city"},"ACCOUNT_DEMOGRAPHICS_UPA_STREET":{"type":"TEXT","index":71,"name":"ACCOUNT_DEMOGRAPHICS_UPA_STREET","comment":null,"display_name":"account_demographics_upa_street"},"ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE":{"type":"TEXT","index":72,"name":"ACCOUNT_DEMOGRAPHICS_UPA_POSTAL_CODE","comment":null,"display_name":"account_demographics_upa_postal_code"},"CRM_PARTNER_ID":{"type":"TEXT","index":73,"name":"CRM_PARTNER_ID","comment":null,"display_name":"crm_partner_id"},"GA_CLIENT_ID":{"type":"TEXT","index":74,"name":"GA_CLIENT_ID","comment":null,"display_name":"ga_client_id"},"COGNISM_COMPANY_OFFICE_CITY":{"type":"TEXT","index":75,"name":"COGNISM_COMPANY_OFFICE_CITY","comment":null,"display_name":"cognism_company_office_city"},"COGNISM_COMPANY_OFFICE_STATE":{"type":"TEXT","index":76,"name":"COGNISM_COMPANY_OFFICE_STATE","comment":null,"display_name":"cognism_company_office_state"},"COGNISM_COMPANY_OFFICE_COUNTRY":{"type":"TEXT","index":77,"name":"COGNISM_COMPANY_OFFICE_COUNTRY","comment":null,"display_name":"cognism_company_office_country"},"COGNISM_CITY":{"type":"TEXT","index":78,"name":"COGNISM_CITY","comment":null,"display_name":"cognism_city"},"COGNISM_STATE":{"type":"TEXT","index":79,"name":"COGNISM_STATE","comment":null,"display_name":"cognism_state"},"COGNISM_COUNTRY":{"type":"TEXT","index":80,"name":"COGNISM_COUNTRY","comment":null,"display_name":"cognism_country"},"COGNISM_EMPLOYEE_COUNT":{"type":"FLOAT","index":81,"name":"COGNISM_EMPLOYEE_COUNT","comment":null,"display_name":"cognism_employee_count"},"LEANDATA_MATCHED_ACCOUNT_BILLING_STATE":{"type":"TEXT","index":82,"name":"LEANDATA_MATCHED_ACCOUNT_BILLING_STATE","comment":null,"display_name":"leandata_matched_account_billing_state"},"LEANDATA_MATCHED_ACCOUNT_BILLING_POSTAL_CODE":{"type":"TEXT","index":83,"name":"LEANDATA_MATCHED_ACCOUNT_BILLING_POSTAL_CODE","comment":null,"display_name":"leandata_matched_account_billing_postal_code"},"LEANDATA_MATCHED_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":84,"name":"LEANDATA_MATCHED_ACCOUNT_BILLING_COUNTRY","comment":null,"display_name":"leandata_matched_account_billing_country"},"LEANDATA_MATCHED_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":85,"name":"LEANDATA_MATCHED_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"leandata_matched_account_employee_count"},"LEANDATA_MATCHED_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":86,"name":"LEANDATA_MATCHED_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"leandata_matched_account_sales_segment"},"ZOOMINFO_CONTACT_CITY":{"type":"TEXT","index":87,"name":"ZOOMINFO_CONTACT_CITY","comment":null,"display_name":"zoominfo_contact_city"},"ZOOMINFO_CONTACT_STATE":{"type":"TEXT","index":88,"name":"ZOOMINFO_CONTACT_STATE","comment":null,"display_name":"zoominfo_contact_state"},"ZOOMINFO_CONTACT_COUNTRY":{"type":"TEXT","index":89,"name":"ZOOMINFO_CONTACT_COUNTRY","comment":null,"display_name":"zoominfo_contact_country"},"ZOOMINFO_COMPANY_CITY":{"type":"TEXT","index":90,"name":"ZOOMINFO_COMPANY_CITY","comment":null,"display_name":"zoominfo_company_city"},"ZOOMINFO_COMPANY_STATE":{"type":"TEXT","index":91,"name":"ZOOMINFO_COMPANY_STATE","comment":null,"display_name":"zoominfo_company_state"},"ZOOMINFO_COMPANY_COUNTRY":{"type":"TEXT","index":92,"name":"ZOOMINFO_COMPANY_COUNTRY","comment":null,"display_name":"zoominfo_company_country"},"ZOOMINFO_PHONE_NUMBER":{"type":"TEXT","index":93,"name":"ZOOMINFO_PHONE_NUMBER","comment":null,"display_name":"zoominfo_phone_number"},"ZOOMINFO_MOBILE_PHONE_NUMBER":{"type":"TEXT","index":94,"name":"ZOOMINFO_MOBILE_PHONE_NUMBER","comment":null,"display_name":"zoominfo_mobile_phone_number"},"ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE":{"type":"TEXT","index":95,"name":"ZOOMINFO_DO_NOT_CALL_DIRECT_PHONE","comment":null,"display_name":"zoominfo_do_not_call_direct_phone"},"ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE":{"type":"TEXT","index":96,"name":"ZOOMINFO_DO_NOT_CALL_MOBILE_PHONE","comment":null,"display_name":"zoominfo_do_not_call_mobile_phone"},"LAST_TRANSFER_DATE_TIME":{"type":"TIMESTAMP_TZ","index":97,"name":"LAST_TRANSFER_DATE_TIME","comment":null,"display_name":"last_transfer_date_time"},"TIME_FROM_LAST_TRANSFER_TO_SEQUENCE":{"type":"FLOAT","index":98,"name":"TIME_FROM_LAST_TRANSFER_TO_SEQUENCE","comment":null,"display_name":"time_from_last_transfer_to_sequence"},"TIME_FROM_MQL_TO_LAST_TRANSFER":{"type":"FLOAT","index":99,"name":"TIME_FROM_MQL_TO_LAST_TRANSFER","comment":null,"display_name":"time_from_mql_to_last_transfer"},"ZOOMINFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":100,"name":"ZOOMINFO_COMPANY_EMPLOYEE_COUNT","comment":null,"display_name":"zoominfo_company_employee_count"},"ZOOMINFO_CONTACT_ID":{"type":"TEXT","index":101,"name":"ZOOMINFO_CONTACT_ID","comment":null,"display_name":"zoominfo_contact_id"},"CREATED_BY":{"type":"TEXT","index":102,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":103,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":104,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":105,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":106,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":107,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:59UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":518599680,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_crm_person","raw_sql":"$36","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.hash_sensitive_columns","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_bizible_person_source","model.gitlab_snowflake.sfdc_bizible_person_source","model.gitlab_snowflake.sfdc_bizible_touchpoint_source","model.gitlab_snowflake.sfdc_bizible_touchpoint_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.marketo_lead_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_crm_person"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_crm_person.sql","original_file_path":"models/common_prep/prep_crm_person.sql","name":"prep_crm_person","alias":"prep_crm_person","checksum":{"name":"sha256","checksum":"415b00fb0d6df330ad543ee184479a3529133f1128d31b541044502854423e17"},"tags":[],"refs":[["sfdc_bizible_person_source"],["sfdc_bizible_person_source"],["sfdc_bizible_touchpoint_source"],["sfdc_bizible_touchpoint_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_lead_source"],["sfdc_lead_source"],["marketo_lead_source"],["marketo_lead_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_crm_person.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033709.5254047,"compiled_sql":"$37","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_crm_person","label":"prep_crm_person"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SALES_SEGMENT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SALES_SEGMENT_ID":{"type":"TEXT","index":1,"name":"dim_sales_segment_id","comment":null,"description":"Unique identifier of a sales segment","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_sales_segment_id"},"SALES_SEGMENT_NAME":{"type":"TEXT","index":2,"name":"SALES_SEGMENT_NAME","comment":null,"display_name":"sales_segment_name"},"SALES_SEGMENT_GROUPED":{"type":"TEXT","index":3,"name":"SALES_SEGMENT_GROUPED","comment":null,"display_name":"sales_segment_grouped"},"CREATED_BY":{"type":"TEXT","index":4,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":5,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":6,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":7,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":8,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":9,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:59UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":15360,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_sales_segment","raw_sql":"$38","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_sfdc_account","model.gitlab_snowflake.prep_sfdc_account"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_sales_segment"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_sales_segment.sql","original_file_path":"models/common_prep/prep_sales_segment.sql","name":"prep_sales_segment","alias":"prep_sales_segment","checksum":{"name":"sha256","checksum":"1ebb88bc5c8ef28c49b518bcc6b6f9eec36af9448fb5c693d8d67cdf8582232a"},"tags":["mnpi_exception"],"refs":[["prep_sfdc_account"],["prep_sfdc_account"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the sales segment shared dimension and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_sales_segment.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.5147343,"compiled_sql":"$39","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_sales_segment","label":"prep_sales_segment"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$3a","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527},{"unique_id":"macro.gitlab_snowflake.days_buckets","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/common/days_buckets.sql","original_file_path":"macros/common/days_buckets.sql","name":"days_buckets","macro_sql":"{%- macro days_buckets(day_field) -%}\n\nCASE \n  WHEN {{ day_field }} BETWEEN 0 AND 6\n    THEN '[01] 0-6 Days'\n  WHEN {{ day_field }} BETWEEN 7 AND 14\n    THEN '[02] 7-14 Days'\n  WHEN {{ day_field }} BETWEEN 15 AND 21\n    THEN '[03] 15-21 Days'\n  WHEN {{ day_field }} BETWEEN 22 AND 30\n    THEN '[04] 22-30 Days'\n  WHEN {{ day_field }} BETWEEN 31 AND 60\n    THEN '[05] 31-60 Days'\n  WHEN {{ day_field }} BETWEEN 61 AND 90\n    THEN '[06] 61-90 Days'\n  WHEN {{ day_field }} BETWEEN 91 AND 120\n    THEN '[07] 91-120 Days'\n  WHEN {{ day_field }} BETWEEN 121 AND 180\n    THEN '[08] 121-180 Days'\n  WHEN {{ day_field }} BETWEEN 181 AND 365\n    THEN '[09] 181-365 Days'\n  WHEN {{ day_field }} BETWEEN 366 AND 730\n    THEN '[10] 1-2 Years'\n  WHEN {{ day_field }} BETWEEN 731 AND 1095\n    THEN '[11] 2-3 Years'\n  WHEN {{ day_field }} > 1095\n    THEN '[12] 3+ Years'\nEND\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro creates grouping of number of days to be used in the `mart_marketing_contact` model.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/common/macros.yml","arguments":[{"name":"day_field","type":"number","description":"Day field to be grouped into bucket of days."}],"created_at":1689033766.1045332},{"unique_id":"macro.dbt_utils.surrogate_key","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","name":"surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__surrogate_key"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033676.082154}]},"node":{"resource_type":"model","name":"dim_marketing_contact","unique_id":"model.gitlab_snowflake.dim_marketing_contact"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L3b",null,{"versions":{"Source":"$3c","Compiled":"$3d"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
