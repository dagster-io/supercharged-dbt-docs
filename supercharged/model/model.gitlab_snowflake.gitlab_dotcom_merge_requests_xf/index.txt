1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
10:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
14:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
26:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
f:T577,Adds associated labels for Merge Requests when these exist.

In order to achieve that we first join issues to the `label links` relation table, and then use that to join to the labels
table.

The labels are filtered in a CTE to only include `target_type = MergeRequest` as the labels table contains both Issue and Merge Request information and misattribution can happen.

In order to also add Metrics data for a Merge Request, we want to get only the last available record from the `gitlab_dotcom_merge_request_metrics` table.   
First a CTE will get the ID of the latest Merge Request Metrics snapshot, then in the following CTE we inner join to that in order to ensure we only get the latest data.

We also need to know if a MR is related to our community contributor project, there are two conditions to know if this is true:

* The label for the MR needs to be set to `community contribution`
* the namespace for the target project of the MR needs to be Gitlab.org (namespace_id = 9970)

In order to achieve this we will build a CTE from the project table that contains only project from the Gitlab.org space, then we will use this as a logical condition in a case statement.

Information about the merge request's namespace (`namespace_id`) and ultimate parent namespace (`ultimate_parent_id`, `namespace_is_internal`) is found through the **project** that the merge request is associated with.11:T1442,-- depends_on: {{ ref('engineering_productivity_metrics_projects_to_include') }}
-- depends_on: {{ ref('projects_part_of_product') }}

WITH merge_requests AS (

    SELECT 
      {{ dbt_utils.star(from=ref('gitlab_dotcom_merge_requests') ) }},
      created_at AS merge_request_created_at,
      updated_at  AS merge_request_updated_at
    FROM {{ref('gitlab_dotcom_merge_requests')}} merge_requests
    WHERE {{ filter_out_blocked_users('merge_requests', 'author_id') }}

), label_links AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_label_links')}}
    WHERE is_currently_valid = True
      AND target_type = 'MergeRequest'

), all_labels AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_labels_xf')}}

), agg_labels AS (

    SELECT
      merge_requests.merge_request_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM merge_requests
    LEFT JOIN label_links
      ON merge_requests.merge_request_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY merge_requests.merge_request_id

),  latest_merge_request_metric AS (

    SELECT MAX(merge_request_metric_id) AS target_id
    FROM {{ref('gitlab_dotcom_merge_request_metrics')}}
    GROUP BY merge_request_id

),  merge_request_metrics AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_merge_request_metrics')}}
    INNER JOIN latest_merge_request_metric
    ON merge_request_metric_id = target_id

), milestones AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_milestones')}}

), projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects_xf')}}

), author_namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces_xf')}}
    WHERE namespace_type = 'User'

), gitlab_subscriptions AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base')}}

), joined AS (

    SELECT
      merge_requests.*, 
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_title)                                       AS milestone_title,
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_description)                                 AS milestone_description,
      projects.namespace_id,
      projects.ultimate_parent_id,
      projects.ultimate_parent_plan_id,
      projects.ultimate_parent_plan_title,
      projects.ultimate_parent_plan_is_paid,
      projects.namespace_is_internal,
      author_namespaces.namespace_path                                                      AS author_namespace_path,
      ARRAY_TO_STRING(agg_labels.labels,'|')                                                AS masked_label_title,
      agg_labels.labels,
      merge_request_metrics.merged_at,
      IFF(merge_requests.target_project_id IN ({{is_project_included_in_engineering_metrics()}}),
        TRUE, FALSE)                                                                        AS is_included_in_engineering_metrics,
      IFF(merge_requests.target_project_id IN ({{is_project_part_of_product()}}),
        TRUE, FALSE)                                                                        AS is_part_of_product,
      IFF(projects.namespace_is_internal IS NOT NULL
          AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels),
        TRUE, FALSE)                                                                        AS is_community_contributor_related,
      TIMESTAMPDIFF(HOURS, merge_requests.merge_request_created_at,
        merge_request_metrics.merged_at)                                                    AS hours_to_merged_status,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[]( |[xX])[\]]',1,'m') AS total_checkboxes,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[][xX][\]]',1,'m')     AS completed_checkboxes,
      -- Original regex, (?:(?:>\s{0,4})*)(?:\s*(?:[-+*]|(?:\d+\.)))+\s+(\[\s\]|\[[xX]\])(\s.+), found in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/models/concerns/taskable.rb

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_merge_request_creation

    FROM merge_requests
      LEFT JOIN agg_labels
        ON merge_requests.merge_request_id = agg_labels.merge_request_id
      LEFT JOIN merge_request_metrics
        ON merge_requests.merge_request_id = merge_request_metrics.merge_request_id
      LEFT JOIN milestones
        ON merge_requests.milestone_id = milestones.milestone_id
      LEFT JOIN projects
        ON merge_requests.target_project_id = projects.project_id
      LEFT JOIN author_namespaces
        ON merge_requests.author_id = author_namespaces.owner_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND merge_requests.created_at BETWEEN gitlab_subscriptions.valid_from AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}

)

SELECT *
FROM joined12:T577,Adds associated labels for Merge Requests when these exist.

In order to achieve that we first join issues to the `label links` relation table, and then use that to join to the labels
table.

The labels are filtered in a CTE to only include `target_type = MergeRequest` as the labels table contains both Issue and Merge Request information and misattribution can happen.

In order to also add Metrics data for a Merge Request, we want to get only the last available record from the `gitlab_dotcom_merge_request_metrics` table.   
First a CTE will get the ID of the latest Merge Request Metrics snapshot, then in the following CTE we inner join to that in order to ensure we only get the latest data.

We also need to know if a MR is related to our community contributor project, there are two conditions to know if this is true:

* The label for the MR needs to be set to `community contribution`
* the namespace for the target project of the MR needs to be Gitlab.org (namespace_id = 9970)

In order to achieve this we will build a CTE from the project table that contains only project from the Gitlab.org space, then we will use this as a logical condition in a case statement.

Information about the merge request's namespace (`namespace_id`) and ultimate parent namespace (`ultimate_parent_id`, `namespace_is_internal`) is found through the **project** that the merge request is associated with.13:T26f1,-- depends_on: "PROD".legacy.engineering_productivity_metrics_projects_to_include
-- depends_on: "PROD".legacy.projects_part_of_product

WITH merge_requests AS (

    SELECT 
      "MERGE_REQUEST_ID",
  "MERGE_REQUEST_IID",
  "MERGE_REQUEST_TITLE",
  "IS_MERGE_TO_MASTER",
  "MERGE_ERROR",
  "ASSIGNEE_ID",
  "UPDATED_BY_ID",
  "MERGE_USER_ID",
  "LAST_EDITED_BY_ID",
  "MILESTONE_ID",
  "HEAD_PIPELINE_ID",
  "LATEST_MERGE_REQUEST_DIFF_ID",
  "APPROVALS_BEFORE_MERGE",
  "LOCK_VERSION",
  "TIME_ESTIMATE",
  "PROJECT_ID",
  "TARGET_PROJECT_ID",
  "AUTHOR_ID",
  "MERGE_REQUEST_STATE_ID",
  "MERGE_REQUEST_STATE",
  "MERGE_REQUEST_STATUS",
  "DOES_MERGE_WHEN_PIPELINE_SUCCEEDS",
  "DOES_SQUASH",
  "IS_DISCUSSION_LOCKED",
  "DOES_ALLOW_MAINTAINER_TO_PUSH",
  "CREATED_AT",
  "UPDATED_AT",
  "MERGE_REQUEST_LAST_EDITED_AT",
  "MERGE_REQUEST_DESCRIPTION",
      created_at AS merge_request_created_at,
      updated_at  AS merge_request_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_merge_requests merge_requests
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = merge_requests.author_id

    )

), label_links AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_label_links
    WHERE is_currently_valid = True
      AND target_type = 'MergeRequest'

), all_labels AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_labels_xf

), agg_labels AS (

    SELECT
      merge_requests.merge_request_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM merge_requests
    LEFT JOIN label_links
      ON merge_requests.merge_request_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY merge_requests.merge_request_id

),  latest_merge_request_metric AS (

    SELECT MAX(merge_request_metric_id) AS target_id
    FROM "PROD".legacy.gitlab_dotcom_merge_request_metrics
    GROUP BY merge_request_id

),  merge_request_metrics AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_merge_request_metrics
    INNER JOIN latest_merge_request_metric
    ON merge_request_metric_id = target_id

), milestones AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_milestones

), projects AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), author_namespaces AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf
    WHERE namespace_type = 'User'

), gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), joined AS (

    SELECT
      merge_requests.*, 
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_title)                                       AS milestone_title,
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_description)                                 AS milestone_description,
      projects.namespace_id,
      projects.ultimate_parent_id,
      projects.ultimate_parent_plan_id,
      projects.ultimate_parent_plan_title,
      projects.ultimate_parent_plan_is_paid,
      projects.namespace_is_internal,
      author_namespaces.namespace_path                                                      AS author_namespace_path,
      ARRAY_TO_STRING(agg_labels.labels,'|')                                                AS masked_label_title,
      agg_labels.labels,
      merge_request_metrics.merged_at,
      IFF(merge_requests.target_project_id IN (13083, 278964, 250833, 7071551, 554859, 2009901, 2694799, 74823, 3674569, 430285, 5373222, 9762266, 5779760, 10476326, 9450197, 9450195, 9450192, 7145793, 6535935, 6280478, 6237091, 6237085, 5971589, 5606894, 4894834, 5851774, 5849726, 5778095, 5778093, 5778044, 5777976, 5777952, 5777939, 4157550, 1507906, 4382108, 8427052, 7524061, 7776928, 11520423, 10748426, 8368695, 5474112, 5467277, 10014839, 7660893, 6487905, 5777819, 145205, 3362933, 3430480, 4921652, 3626648, 6469877, 3601513, 12006272, 9049889, 734943, 14022, 1441932, 9396716, 6237088, 6126012, 6802300, 6143038, 5828233, 5777853, 8375261, 8368700, 5996549, 5727416, 5457755, 3828396, 7795571, 6392811, 6168240, 5778074, 5778037, 5777954, 5777179, 8362868, 9438583, 4949400, 5647182, 4359271, 4149988, 8226179, 11428501, 11432834, 7688358, 6328050, 5509547, 5456231, 11688089, 14240586, 11080193, 14694517, 6047528, 443787, 7750843, 4456656, 2670515, 6491770, 6130122, 11574953, 6388398, 5465687, 10619765, 9358979, 5778056, 5777918, 1075790, 3825482, 3787977, 11915984, 11317506, 10846938, 9712018, 6523803, 5737157, 5486671, 9184510, 20699, 10400718, 5457651, 27726, 6457868, 5467143, 10947578),
        TRUE, FALSE)                                                                        AS is_included_in_engineering_metrics,
      IFF(merge_requests.target_project_id IN (4359271, 7453181, 3828396, 6329679, 16590122, 13822214, 16240616, 1254421, 5279538, 17019611, 11173751, 19922160, 34675721, 15363819, 10400718, 11688089, 2670515, 23345837, 43513722, 150440, 13682597, 2694799, 1794617, 46649240, 21250701, 1507906, 13083, 1777822, 145205, 5981322, 14694517, 6457868, 27726, 9450192, 6392811, 9762266, 6126012, 13815397, 9184510, 1075790, 34770409, 5261717, 554859, 928825, 3843116, 11015994, 9450197, 5498087, 5779760, 5777853, 5777952, 5777954, 5778074, 39622674, 6237091, 6280478, 19871573, 19871264, 19413496, 24673064, 5467143, 24249085, 3430480, 2651596, 2009901, 4157550, 4534254, 734943, 13764, 250833, 7792567, 14378900, 10506825, 11196060, 9358979, 10846951, 27060148, 5778056, 37734140, 39233486, 11533294, 23070395, 20162469, 11915984, 6047528, 5647182, 2953390, 20699, 10586771, 3844141, 11380952, 15112583, 3362933, 4949400, 10476326, 6487905, 9450195, 30656896, 13922331, 10861561, 21479276, 15369510, 26751150, 21351796, 12006272, 5777179, 5777819, 5777939, 6130122, 39229232, 5606894, 13150952, 5971589, 5964710, 24298348, 25230764, 24313598, 23176783, 23070140, 24225194, 20334170, 24257614, 27821122, 5727416, 5737157, 14097509, 5465687, 16842968, 4456656, 18943607, 95156, 387896, 430285, 13017938, 17166102, 5778093, 39298809, 8362868, 13467157, 6237088, 6237085, 22111360, 24544330, 23069956, 23465101, 20773921, 23545481, 15232184, 27497069, 11432834, 13664986, 5457755, 6523803, 7688358, 14404642, 7776928, 10973541, 8368695, 15642544, 4176070, 12690061, 16573099, 13566613, 18899486, 27628435, 31202357, 24631368, 13331704, 26076251, 39193358, 25537666, 278964, 36743, 74823, 6043225, 14022, 11625232, 5772881, 5777976, 5828233, 5373222, 25538517, 24544020, 24317064, 23176971, 24111720, 19413101, 19413012, 19904939, 20337863, 20336302, 24075172, 16683102, 16239404, 3101096, 143237, 10953870, 4875494, 3842996, 7660893, 9396716, 11139665, 17035255, 5777918, 5778037, 5778044, 5778095, 11373038, 19617580, 24542363, 24313398, 24302484, 23599168, 23505725, 23070377, 23070164, 23069693, 21501997, 23597850, 23455079, 28589369, 27819859, 27821148, 28502955, 37954006, 13348998, 6388398, 11520423, 5996549, 9712018, 5457651, 5509547, 10748426, 5467277, 5486671, 5474112, 6328050, 11317506, 10846938, 13831684, 6491770, 38355982, 15704133, 15685912, 15683922, 15667093, 19047934, 11446522, 1441932, 7795571, 6535935, 8368700, 11511606, 7523614, 7524061, 7560116, 14477200, 11229385, 11880131, 12450931, 443787, 4149988, 4382108, 15114652, 19722963, 7444821, 5651817, 1755794, 22848448, 26392061, 32149347, 32189602, 32318686, 31202862, 31203942, 35104827, 37966217, 43788427, 29138380, 40916776, 1148549, 28496898, 7145793, 14853550, 11080193, 40857363, 24112430, 23365123, 5456231, 11574953, 9438583, 7071551, 19019153, 15685819, 14292404, 7560137, 13613417, 15208888, 1755701, 31203840, 32823351, 43473862, 34907799, 15821588, 15685887, 27919014),
        TRUE, FALSE)                                                                        AS is_part_of_product,
      IFF(projects.namespace_is_internal IS NOT NULL
          AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels),
        TRUE, FALSE)                                                                        AS is_community_contributor_related,
      TIMESTAMPDIFF(HOURS, merge_requests.merge_request_created_at,
        merge_request_metrics.merged_at)                                                    AS hours_to_merged_status,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[]( |[xX])[\]]',1,'m') AS total_checkboxes,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[][xX][\]]',1,'m')     AS completed_checkboxes,
      -- Original regex, (?:(?:>\s{0,4})*)(?:\s*(?:[-+*]|(?:\d+\.)))+\s+(\[\s\]|\[[xX]\])(\s.+), found in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/models/concerns/taskable.rb

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_merge_request_creation

    FROM merge_requests
      LEFT JOIN agg_labels
        ON merge_requests.merge_request_id = agg_labels.merge_request_id
      LEFT JOIN merge_request_metrics
        ON merge_requests.merge_request_id = merge_request_metrics.merge_request_id
      LEFT JOIN milestones
        ON merge_requests.milestone_id = milestones.milestone_id
      LEFT JOIN projects
        ON merge_requests.target_project_id = projects.project_id
      LEFT JOIN author_namespaces
        ON merge_requests.author_id = author_namespaces.owner_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND merge_requests.created_at BETWEEN gitlab_subscriptions.valid_from AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)

)

SELECT *
FROM joined15:T669,{{ config({
    "unique_key": "event_surrogate_key"
    })
}}

{%- set event_ctes = ["mr_created",
                      "mr_comment_added",
                      "snippet_comment_added"
                      ]
-%}

WITH mr_comment_added AS (
  
  SELECT
    note_author_id           AS user_id,
    TO_DATE(created_at)      AS event_date,
    'mr_comment_added'       AS event_type,
    {{ dbt_utils.surrogate_key(['event_date', 'event_type', 'note_id']) }}
                             AS event_surrogate_key 
     
  FROM {{ref('gitlab_dotcom_notes')}}
  WHERE noteable_type = 'MergeRequest'
    AND created_at >= '2015-01-01'
  
)

, mr_created AS (

  SELECT
    author_id                         AS user_id,
    TO_DATE(created_at) AS event_date,
    'mr_created'                      AS event_type,
    {{ dbt_utils.surrogate_key(['event_date', 'event_type', 'merge_request_id']) }}
                                      AS event_surrogate_key
    
  FROM {{ref('gitlab_dotcom_merge_requests_xf')}}
  WHERE created_at >= '2015-01-01'

)

, snippet_comment_added AS (
  
  SELECT
    note_author_id           AS user_id,
    TO_DATE(created_at) AS event_date,
    'snippet_comment_added'  AS event_type,
    {{ dbt_utils.surrogate_key(['event_date', 'event_type', 'note_id']) }}
                             AS event_surrogate_key
  
  FROM {{ref('gitlab_dotcom_notes')}}
  WHERE noteable_type = 'Snippet'
    AND created_at >= '2015-01-01'

)

, unioned AS (
  {% for event_cte in event_ctes %}

    SELECT *
    FROM {{ event_cte }}

    {%- if not loop.last %}
      UNION
    {%- endif %}

  {% endfor -%}

)

SELECT *
FROM unioned16:T708,WITH mr_comment_added AS (
  
  SELECT
    note_author_id           AS user_id,
    TO_DATE(created_at)      AS event_date,
    'mr_comment_added'       AS event_type,
    md5(cast(coalesce(cast(event_date as 
    varchar
), '') || '-' || coalesce(cast(event_type as 
    varchar
), '') || '-' || coalesce(cast(note_id as 
    varchar
), '') as 
    varchar
))
                             AS event_surrogate_key 
     
  FROM "PREP".sensitive.gitlab_dotcom_notes
  WHERE noteable_type = 'MergeRequest'
    AND created_at >= '2015-01-01'
  
)

, mr_created AS (

  SELECT
    author_id                         AS user_id,
    TO_DATE(created_at) AS event_date,
    'mr_created'                      AS event_type,
    md5(cast(coalesce(cast(event_date as 
    varchar
), '') || '-' || coalesce(cast(event_type as 
    varchar
), '') || '-' || coalesce(cast(merge_request_id as 
    varchar
), '') as 
    varchar
))
                                      AS event_surrogate_key
    
  FROM "PROD".legacy.gitlab_dotcom_merge_requests_xf
  WHERE created_at >= '2015-01-01'

)

, snippet_comment_added AS (
  
  SELECT
    note_author_id           AS user_id,
    TO_DATE(created_at) AS event_date,
    'snippet_comment_added'  AS event_type,
    md5(cast(coalesce(cast(event_date as 
    varchar
), '') || '-' || coalesce(cast(event_type as 
    varchar
), '') || '-' || coalesce(cast(note_id as 
    varchar
), '') as 
    varchar
))
                             AS event_surrogate_key
  
  FROM "PREP".sensitive.gitlab_dotcom_notes
  WHERE noteable_type = 'Snippet'
    AND created_at >= '2015-01-01'

)

, unioned AS (
  

    SELECT *
    FROM mr_created
      UNION

  

    SELECT *
    FROM mr_comment_added
      UNION

  

    SELECT *
    FROM snippet_comment_added

  )

SELECT *
FROM unioned17:T817,WITH merge_requests AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_merge_requests_xf') }}

), mr_files AS (
    
    SELECT 
      marketing_site_file_edited,
      REGEXP_REPLACE(plain_diff_url_path, '[^0-9]+', '')::NUMBER AS merge_request_iid
    FROM {{ ref('marketing_site_merge_requests_files') }}

), file_classifications AS (

    SELECT 
      marketing_site_path,
      file_classification
    FROM {{ ref('marketing_site_file_classification_mapping') }}

), joined_to_mr AS (

    SELECT 
      merge_requests.merge_request_state                               AS merge_request_state,
      merge_requests.updated_at                                        AS merge_request_updated_at,
      merge_requests.created_at                                        AS merge_request_created_at,
      merge_requests.merge_request_last_edited_at                      AS merge_request_last_edited_at,
      merge_requests.merged_at                                         AS merge_request_merged_at,
      mr_files.merge_request_iid                                       AS merge_request_iid,
      mr_files.marketing_site_file_edited                              AS merge_request_path, 
      IFNULL(file_classifications.file_classification, 'unclassified') AS file_classification
    FROM mr_files
    INNER JOIN merge_requests
      ON mr_files.merge_request_iid = merge_requests.merge_request_iid AND merge_requests.project_id = 7764 --marketing site project
    LEFT JOIN file_classifications
      ON LOWER(mr_files.marketing_site_file_edited) LIKE '%' || file_classifications.marketing_site_path || '%'
    WHERE merge_requests.is_merge_to_master 

), renamed AS (

    SELECT
      merge_request_state,
      merge_request_updated_at,
      merge_request_created_at,
      merge_request_last_edited_at,
      merge_request_merged_at,                
      merge_request_iid,
      merge_request_path, 
      ARRAY_AGG(DISTINCT file_classification) AS merge_request_department_list
    FROM joined_to_mr
    {{ dbt_utils.group_by(n=7) }} 

)
SELECT * 
FROM renamed18:Tadf,WITH  __dbt__cte__marketing_site_merge_requests_files as (


WITH base AS (

    SELECT *
    FROM "PREP".handbook.handbook_merge_requests_source

), exploded_file_paths AS ( -- explodes the files in the list of diffs
    
    SELECT 
      file_diffs.value:file_path::VARCHAR AS marketing_site_file_edited,
      base.plain_diff_url_path            AS plain_diff_url_path,
      base.merge_request_version_diffs    AS merge_request_version_diffs,
      base.source_branch_name             AS source_branch_name
    FROM base
    INNER JOIN TABLE(FLATTEN(INPUT => file_diffs, outer => true)) AS file_diffs
    WHERE LOWER(file_diffs.value:file_path) LIKE '%sites/marketing/source/%'

)
SELECT * 
FROM exploded_file_paths
),merge_requests AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_merge_requests_xf

), mr_files AS (
    
    SELECT 
      marketing_site_file_edited,
      REGEXP_REPLACE(plain_diff_url_path, '[^0-9]+', '')::NUMBER AS merge_request_iid
    FROM __dbt__cte__marketing_site_merge_requests_files

), file_classifications AS (

    SELECT 
      marketing_site_path,
      file_classification
    FROM "PROD".legacy.marketing_site_file_classification_mapping

), joined_to_mr AS (

    SELECT 
      merge_requests.merge_request_state                               AS merge_request_state,
      merge_requests.updated_at                                        AS merge_request_updated_at,
      merge_requests.created_at                                        AS merge_request_created_at,
      merge_requests.merge_request_last_edited_at                      AS merge_request_last_edited_at,
      merge_requests.merged_at                                         AS merge_request_merged_at,
      mr_files.merge_request_iid                                       AS merge_request_iid,
      mr_files.marketing_site_file_edited                              AS merge_request_path, 
      IFNULL(file_classifications.file_classification, 'unclassified') AS file_classification
    FROM mr_files
    INNER JOIN merge_requests
      ON mr_files.merge_request_iid = merge_requests.merge_request_iid AND merge_requests.project_id = 7764 --marketing site project
    LEFT JOIN file_classifications
      ON LOWER(mr_files.marketing_site_file_edited) LIKE '%' || file_classifications.marketing_site_path || '%'
    WHERE merge_requests.is_merge_to_master 

), renamed AS (

    SELECT
      merge_request_state,
      merge_request_updated_at,
      merge_request_created_at,
      merge_request_last_edited_at,
      merge_request_merged_at,                
      merge_request_iid,
      merge_request_path, 
      ARRAY_AGG(DISTINCT file_classification) AS merge_request_department_list
    FROM joined_to_mr
    group by 1,2,3,4,5,6,7 

)
SELECT * 
FROM renamed19:T7ed,WITH merge_requests AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_merge_requests_xf') }}

), mr_files AS (
    
    SELECT 
      handbook_file_edited,
      REGEXP_REPLACE(plain_diff_url_path, '[^0-9]+', '')::NUMBER AS merge_request_iid
    FROM {{ ref('handbook_merge_requests_files') }}

), file_classifications AS (

    SELECT 
      handbook_path,
      file_classification
    FROM {{ ref('handbook_file_classification_mapping') }}

), joined_to_mr AS (

    SELECT 
      merge_requests.merge_request_state                               AS merge_request_state,
      merge_requests.updated_at                                        AS merge_request_updated_at,
      merge_requests.created_at                                        AS merge_request_created_at,
      merge_requests.merge_request_last_edited_at                      AS merge_request_last_edited_at,
      merge_requests.merged_at                                         AS merge_request_merged_at,
      mr_files.merge_request_iid                                       AS merge_request_iid,
      mr_files.handbook_file_edited                                    AS merge_request_path, 
      IFNULL(file_classifications.file_classification, 'unclassified') AS file_classification
    FROM mr_files
    INNER JOIN merge_requests
      ON mr_files.merge_request_iid = merge_requests.merge_request_iid AND merge_requests.project_id = 7764 --handbook project
    LEFT JOIN file_classifications
      ON LOWER(mr_files.handbook_file_edited) LIKE '%' || file_classifications.handbook_path || '%'
    WHERE merge_requests.is_merge_to_master 

), renamed AS (

    SELECT
      merge_request_state,
      merge_request_updated_at,
      merge_request_created_at,
      merge_request_last_edited_at,
      merge_request_merged_at,                
      merge_request_iid,
      merge_request_path, 
      ARRAY_AGG(DISTINCT file_classification) AS merge_request_department_list
    FROM joined_to_mr
    {{ dbt_utils.group_by(n=7) }} 

)
SELECT * 
FROM renamed1a:Taea,WITH  __dbt__cte__handbook_merge_requests_files as (


WITH base AS (

    SELECT *
    FROM "PREP".handbook.handbook_merge_requests_source

), exploded_file_paths AS ( -- explodes the files in the list of diffs
    
    SELECT 
      file_diffs.value:file_path::VARCHAR AS handbook_file_edited,
      base.plain_diff_url_path            AS plain_diff_url_path,
      base.merge_request_version_diffs    AS merge_request_version_diffs,
      base.source_branch_name             AS source_branch_name
    FROM base
    INNER JOIN TABLE(FLATTEN(INPUT => file_diffs, outer => true)) AS file_diffs
    WHERE LOWER(file_diffs.value:file_path) LIKE '%/handbook/%'
    OR LOWER(file_diffs.value:file_path) LIKE '%data/performance_indicators%'

)
SELECT * 
FROM exploded_file_paths
),merge_requests AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_merge_requests_xf

), mr_files AS (
    
    SELECT 
      handbook_file_edited,
      REGEXP_REPLACE(plain_diff_url_path, '[^0-9]+', '')::NUMBER AS merge_request_iid
    FROM __dbt__cte__handbook_merge_requests_files

), file_classifications AS (

    SELECT 
      handbook_path,
      file_classification
    FROM "PROD".legacy.handbook_file_classification_mapping

), joined_to_mr AS (

    SELECT 
      merge_requests.merge_request_state                               AS merge_request_state,
      merge_requests.updated_at                                        AS merge_request_updated_at,
      merge_requests.created_at                                        AS merge_request_created_at,
      merge_requests.merge_request_last_edited_at                      AS merge_request_last_edited_at,
      merge_requests.merged_at                                         AS merge_request_merged_at,
      mr_files.merge_request_iid                                       AS merge_request_iid,
      mr_files.handbook_file_edited                                    AS merge_request_path, 
      IFNULL(file_classifications.file_classification, 'unclassified') AS file_classification
    FROM mr_files
    INNER JOIN merge_requests
      ON mr_files.merge_request_iid = merge_requests.merge_request_iid AND merge_requests.project_id = 7764 --handbook project
    LEFT JOIN file_classifications
      ON LOWER(mr_files.handbook_file_edited) LIKE '%' || file_classifications.handbook_path || '%'
    WHERE merge_requests.is_merge_to_master 

), renamed AS (

    SELECT
      merge_request_state,
      merge_request_updated_at,
      merge_request_created_at,
      merge_request_last_edited_at,
      merge_request_merged_at,                
      merge_request_iid,
      merge_request_path, 
      ARRAY_AGG(DISTINCT file_classification) AS merge_request_department_list
    FROM joined_to_mr
    group by 1,2,3,4,5,6,7 

)
SELECT * 
FROM renamed1b:T989,-- depends_on: {{ ref('engineering_productivity_metrics_projects_to_include') }}
-- depends_on: {{ ref('projects_part_of_product') }}

{{ simple_cte([
    ('gitlab_dotcom_merge_requests', 'gitlab_dotcom_merge_requests_xf'),
    ('gitlab_ops_merge_requests', 'gitlab_ops_merge_requests_xf'),
    ('mapped_employee', 'map_team_member_bamboo_gitlab_dotcom_gitlab_ops'),
    ('employee_directory', 'employee_directory_analysis')
]) }}

 
, joined AS (

    SELECT
      'gitlab_dotcom'                                                                     AS merge_request_data_source,
      merge_request_id,
      merge_request_iid,
      merge_request_state,
      merge_request_status,
      created_at,
      merged_at,
      project_id,
      target_project_id,
      author_id,
      assignee_id,
      is_part_of_product,
      IFF(target_project_id = 14274989,1,0)                                              AS people_engineering_project,
      mapped_employee.bamboohr_employee_id,
      employee_directory.division,
      employee_directory.department
    FROM gitlab_dotcom_merge_requests
    INNER JOIN mapped_employee
      ON gitlab_dotcom_merge_requests.author_id = mapped_employee.gitlab_dotcom_user_id
    LEFT JOIN employee_directory
      ON mapped_employee.bamboohr_employee_id = employee_directory.employee_id
      AND DATE_TRUNC(day, gitlab_dotcom_merge_requests.merged_at) = employee_directory.date_actual

    UNION ALL  
    
    SELECT
      'gitlab_ops'                                                                       AS merge_request_data_source,
      merge_request_id,
      merge_request_iid,
      merge_request_state,
      merge_request_status,
      created_at,
      merged_at,
      project_id,
      target_project_id,
      author_id,
      assignee_id,
      is_part_of_product_ops,
      IFF(target_project_id = 14274989,1,0)                                              AS people_engineering_project,
      mapped_employee.bamboohr_employee_id,
      employee_directory.division,
      employee_directory.department
    FROM gitlab_ops_merge_requests
    INNER JOIN mapped_employee
      ON gitlab_ops_merge_requests.author_id = mapped_employee.gitlab_ops_user_id
    LEFT JOIN employee_directory
      ON mapped_employee.bamboohr_employee_id = employee_directory.employee_id
      AND DATE_TRUNC(day, gitlab_ops_merge_requests.merged_at) = employee_directory.date_actual
)

SELECT *
FROM joined1c:Ta10,-- depends_on: "PROD".legacy.engineering_productivity_metrics_projects_to_include
-- depends_on: "PROD".legacy.projects_part_of_product



WITH gitlab_dotcom_merge_requests AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_merge_requests_xf

), gitlab_ops_merge_requests AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_ops_merge_requests_xf

), mapped_employee AS (

    SELECT * 
    FROM "PROD".common_mapping.map_team_member_bamboo_gitlab_dotcom_gitlab_ops

), employee_directory AS (

    SELECT * 
    FROM "PROD".legacy.employee_directory_analysis

)

 
, joined AS (

    SELECT
      'gitlab_dotcom'                                                                     AS merge_request_data_source,
      merge_request_id,
      merge_request_iid,
      merge_request_state,
      merge_request_status,
      created_at,
      merged_at,
      project_id,
      target_project_id,
      author_id,
      assignee_id,
      is_part_of_product,
      IFF(target_project_id = 14274989,1,0)                                              AS people_engineering_project,
      mapped_employee.bamboohr_employee_id,
      employee_directory.division,
      employee_directory.department
    FROM gitlab_dotcom_merge_requests
    INNER JOIN mapped_employee
      ON gitlab_dotcom_merge_requests.author_id = mapped_employee.gitlab_dotcom_user_id
    LEFT JOIN employee_directory
      ON mapped_employee.bamboohr_employee_id = employee_directory.employee_id
      AND DATE_TRUNC(day, gitlab_dotcom_merge_requests.merged_at) = employee_directory.date_actual

    UNION ALL  
    
    SELECT
      'gitlab_ops'                                                                       AS merge_request_data_source,
      merge_request_id,
      merge_request_iid,
      merge_request_state,
      merge_request_status,
      created_at,
      merged_at,
      project_id,
      target_project_id,
      author_id,
      assignee_id,
      is_part_of_product_ops,
      IFF(target_project_id = 14274989,1,0)                                              AS people_engineering_project,
      mapped_employee.bamboohr_employee_id,
      employee_directory.division,
      employee_directory.department
    FROM gitlab_ops_merge_requests
    INNER JOIN mapped_employee
      ON gitlab_ops_merge_requests.author_id = mapped_employee.gitlab_ops_user_id
    LEFT JOIN employee_directory
      ON mapped_employee.bamboohr_employee_id = employee_directory.employee_id
      AND DATE_TRUNC(day, gitlab_ops_merge_requests.merged_at) = employee_directory.date_actual
)

SELECT *
FROM joined1d:Tff8,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_users_dedupe_source') }}

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    {{ user_role_mapping(user_role='role') }}::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    {{ it_job_title_hierarchy('role') }}
  FROM renamed

)

SELECT *
FROM add_job_hierarchy1e:T1bb4,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_dedupe_source

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    CASE
      WHEN role = 0 THEN 'Software Developer'
      WHEN role = 1 THEN 'Development Team Lead'
      WHEN role = 2 THEN 'Devops Engineer'
      WHEN role = 3 THEN 'Systems Administrator'
      WHEN role = 4 THEN 'Security Analyst'
      WHEN role = 5 THEN 'Data Analyst'
      WHEN role = 6 THEN 'Product Manager'
      WHEN role = 7 THEN 'Product Designer'
      WHEN role = 8 THEN 'Other'
      WHEN role = 99 THEN 'Experiment Default Value - Signup Not Completed'
      ELSE NULL
    END::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    CASE
    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(role), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy
  FROM renamed

)

SELECT *
FROM add_job_hierarchy1f:T160b,{% set sensitive_fields = ['project_description', 'project_import_source', 'project_issues_template', 'project_build_coverage_regex',
                           'project_name', 'project_path', 'project_import_url', 'project_merge_requests_template'] %}

WITH projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects')}}

),

namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces')}}

),

members AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_members')}} members
    WHERE is_currently_valid = TRUE
      AND {{ filter_out_blocked_users('members', 'user_id') }}

),

namespace_lineage AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespace_lineage')}}

),

gitlab_subscriptions AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base')}}

),

active_services AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_integrations')}}
    WHERE is_active = True

),

joined AS (
    SELECT
      projects.project_id,
      projects.created_at, -- We will phase out `project_created_at`
      projects.created_at                                          AS project_created_at,
      projects.updated_at                                          AS project_updated_at,
      projects.creator_id,
      projects.namespace_id,
      projects.last_activity_at,
      projects.visibility_level,
      projects.archived,
      projects.has_avatar,
      projects.project_star_count,
      projects.merge_requests_rebase_enabled,
      projects.import_type,
      projects.approvals_before_merge,
      projects.reset_approvals_on_push,
      projects.merge_requests_ff_only_enabled,
      projects.mirror,
      projects.mirror_user_id,
      projects.shared_runners_enabled,
      projects.build_allow_git_fetch,
      projects.build_timeout,
      projects.mirror_trigger_builds,
      projects.pending_delete,
      projects.public_builds,
      projects.last_repository_check_failed,
      projects.last_repository_check_at,
      projects.container_registry_enabled,
      projects.only_allow_merge_if_pipeline_succeeds,
      projects.has_external_issue_tracker,
      projects.repository_storage,
      projects.repository_read_only,
      projects.request_access_enabled,
      projects.has_external_wiki,
      projects.ci_config_path,
      projects.lfs_enabled,
      projects.only_allow_merge_if_all_discussions_are_resolved,
      projects.repository_size_limit,
      projects.printing_merge_request_link_enabled,
      projects.has_auto_canceling_pending_pipelines,
      projects.service_desk_enabled,
      projects.delete_error,
      projects.last_repository_updated_at,
      projects.storage_version,
      projects.resolve_outdated_diff_discussions,
      projects.disable_overriding_approvers_per_merge_request,
      projects.remote_mirror_available_overridden,
      projects.only_mirror_protected_branches,
      projects.pull_mirror_available_overridden,
      projects.mirror_overwrites_diverged_branches,
      IFF(projects.import_type='gitlab_project' AND projects.project_path='learn-gitlab',
        TRUE,
        FALSE)                                                     AS is_learn_gitlab,

      {% for field in sensitive_fields %}
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE {{field}}
      END                                                          AS {{field}},
      {% endfor %}

      namespaces.namespace_name,
      namespaces.namespace_path,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.namespace_plan_id,
      namespace_lineage.namespace_plan_title,
      namespace_lineage.namespace_plan_is_paid,
      namespace_lineage.ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id,
      namespace_lineage.ultimate_parent_plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid,

      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
      END                                                          AS plan_id_at_project_creation,
      CASE
        WHEN import_type IS NULL
          THEN NULL
        WHEN import_type = 'gitlab_project' AND project_import_url IS NULL
          THEN 'project_template'
        WHEN import_type = 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'gitlab_project_import'
        WHEN import_type IS NOT NULL AND import_type != 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'other_source_project_import'
      END                                                          AS project_template,
      ARRAYAGG(active_services.service_type)                       AS active_service_types,
      COALESCE(COUNT(DISTINCT members.member_id), 0)               AS member_count
    FROM projects
      LEFT JOIN members
        ON projects.project_id = members.source_id
        AND members.member_source_type = 'Project'
      LEFT JOIN namespaces
        ON projects.namespace_id = namespaces.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN gitlab_subscriptions
        ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects.created_at BETWEEN gitlab_subscriptions.valid_from AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
      LEFT JOIN active_services
        ON projects.project_id = active_services.project_id
    {{ dbt_utils.group_by(n=70) }}
)

SELECT *
FROM joined20:T1e48,

WITH projects AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_projects

),

namespaces AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_namespaces

),

members AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_members members
    WHERE is_currently_valid = TRUE
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )

),

namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

),

gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

),

active_services AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_integrations
    WHERE is_active = True

),

joined AS (
    SELECT
      projects.project_id,
      projects.created_at, -- We will phase out `project_created_at`
      projects.created_at                                          AS project_created_at,
      projects.updated_at                                          AS project_updated_at,
      projects.creator_id,
      projects.namespace_id,
      projects.last_activity_at,
      projects.visibility_level,
      projects.archived,
      projects.has_avatar,
      projects.project_star_count,
      projects.merge_requests_rebase_enabled,
      projects.import_type,
      projects.approvals_before_merge,
      projects.reset_approvals_on_push,
      projects.merge_requests_ff_only_enabled,
      projects.mirror,
      projects.mirror_user_id,
      projects.shared_runners_enabled,
      projects.build_allow_git_fetch,
      projects.build_timeout,
      projects.mirror_trigger_builds,
      projects.pending_delete,
      projects.public_builds,
      projects.last_repository_check_failed,
      projects.last_repository_check_at,
      projects.container_registry_enabled,
      projects.only_allow_merge_if_pipeline_succeeds,
      projects.has_external_issue_tracker,
      projects.repository_storage,
      projects.repository_read_only,
      projects.request_access_enabled,
      projects.has_external_wiki,
      projects.ci_config_path,
      projects.lfs_enabled,
      projects.only_allow_merge_if_all_discussions_are_resolved,
      projects.repository_size_limit,
      projects.printing_merge_request_link_enabled,
      projects.has_auto_canceling_pending_pipelines,
      projects.service_desk_enabled,
      projects.delete_error,
      projects.last_repository_updated_at,
      projects.storage_version,
      projects.resolve_outdated_diff_discussions,
      projects.disable_overriding_approvers_per_merge_request,
      projects.remote_mirror_available_overridden,
      projects.only_mirror_protected_branches,
      projects.pull_mirror_available_overridden,
      projects.mirror_overwrites_diverged_branches,
      IFF(projects.import_type='gitlab_project' AND projects.project_path='learn-gitlab',
        TRUE,
        FALSE)                                                     AS is_learn_gitlab,

      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_description
      END                                                          AS project_description,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_source
      END                                                          AS project_import_source,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_issues_template
      END                                                          AS project_issues_template,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_build_coverage_regex
      END                                                          AS project_build_coverage_regex,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_name
      END                                                          AS project_name,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_path
      END                                                          AS project_path,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_url
      END                                                          AS project_import_url,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_merge_requests_template
      END                                                          AS project_merge_requests_template,
      

      namespaces.namespace_name,
      namespaces.namespace_path,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.namespace_plan_id,
      namespace_lineage.namespace_plan_title,
      namespace_lineage.namespace_plan_is_paid,
      namespace_lineage.ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id,
      namespace_lineage.ultimate_parent_plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid,

      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
      END                                                          AS plan_id_at_project_creation,
      CASE
        WHEN import_type IS NULL
          THEN NULL
        WHEN import_type = 'gitlab_project' AND project_import_url IS NULL
          THEN 'project_template'
        WHEN import_type = 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'gitlab_project_import'
        WHEN import_type IS NOT NULL AND import_type != 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'other_source_project_import'
      END                                                          AS project_template,
      ARRAYAGG(active_services.service_type)                       AS active_service_types,
      COALESCE(COUNT(DISTINCT members.member_id), 0)               AS member_count
    FROM projects
      LEFT JOIN members
        ON projects.project_id = members.source_id
        AND members.member_source_type = 'Project'
      LEFT JOIN namespaces
        ON projects.namespace_id = namespaces.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN gitlab_subscriptions
        ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects.created_at BETWEEN gitlab_subscriptions.valid_from AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
      LEFT JOIN active_services
        ON projects.project_id = active_services.project_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70
)

SELECT *
FROM joined21:T654,{{ config({
    "alias": "gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id"
    })
}}


WITH source AS (

  SELECT *
  FROM {{ source('snapshots', 'gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots') }}
  WHERE id != 572635 -- This ID has NULL values for many of the important columns.

), renamed AS (

  SELECT
    dbt_scd_id::VARCHAR                           AS gitlab_subscription_snapshot_id,
    id::NUMBER                                    AS gitlab_subscription_id,
    start_date::DATE                              AS gitlab_subscription_start_date,
    end_date::DATE                                AS gitlab_subscription_end_date,
    trial_ends_on::DATE                           AS gitlab_subscription_trial_ends_on,
    namespace_id::NUMBER                          AS namespace_id,
    hosted_plan_id::NUMBER                        AS plan_id,
    max_seats_used::NUMBER                        AS max_seats_used,
    seats::NUMBER                                 AS seats,
    trial::BOOLEAN                                AS is_trial,
    created_at::TIMESTAMP                         AS gitlab_subscription_created_at,
    updated_at::TIMESTAMP                         AS gitlab_subscription_updated_at,
    seats_in_use::NUMBER                          AS seats_in_use,
    seats_owed::NUMBER                            AS seats_owed,
    trial_extension_type::NUMBER                  AS trial_extension_type,
    "DBT_VALID_FROM"::TIMESTAMP                   AS valid_from,
    "DBT_VALID_TO"::TIMESTAMP                     AS valid_to
  
  FROM source
    
)

SELECT *
FROM renamed22:T5e9,


WITH source AS (

  SELECT *
  FROM "RAW".snapshots.gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots
  WHERE id != 572635 -- This ID has NULL values for many of the important columns.

), renamed AS (

  SELECT
    dbt_scd_id::VARCHAR                           AS gitlab_subscription_snapshot_id,
    id::NUMBER                                    AS gitlab_subscription_id,
    start_date::DATE                              AS gitlab_subscription_start_date,
    end_date::DATE                                AS gitlab_subscription_end_date,
    trial_ends_on::DATE                           AS gitlab_subscription_trial_ends_on,
    namespace_id::NUMBER                          AS namespace_id,
    hosted_plan_id::NUMBER                        AS plan_id,
    max_seats_used::NUMBER                        AS max_seats_used,
    seats::NUMBER                                 AS seats,
    trial::BOOLEAN                                AS is_trial,
    created_at::TIMESTAMP                         AS gitlab_subscription_created_at,
    updated_at::TIMESTAMP                         AS gitlab_subscription_updated_at,
    seats_in_use::NUMBER                          AS seats_in_use,
    seats_owed::NUMBER                            AS seats_owed,
    trial_extension_type::NUMBER                  AS trial_extension_type,
    "DBT_VALID_FROM"::TIMESTAMP                   AS valid_from,
    "DBT_VALID_TO"::TIMESTAMP                     AS valid_to
  
  FROM source
    
)

SELECT *
FROM renamed23:T409,with labels AS (

  SELECT *
  FROM "PREP".sensitive.gitlab_dotcom_labels

), projects AS (

  SELECT 
    project_id,
    visibility_level,
    namespace_id
  FROM "PREP".sensitive.gitlab_dotcom_projects

), internal_namespaces AS (

    SELECT
      namespace_id
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage
    WHERE namespace_is_internal

), joined AS (

    SELECT
      label_id,

    CASE
      WHEN projects.visibility_level != 'public' AND namespace_id NOT IN (SELECT * FROM internal_namespaces) THEN 'content masked'
      ELSE label_title
    END                                          AS masked_label_title,

    LENGTH(label_title)                          AS title_length,
    color,
    labels.project_id,
    group_id,
    template,
    label_type,
    created_at                                   AS label_created_at,
    updated_at                                   AS label_updated_at

    FROM labels
      LEFT JOIN projects
        ON labels.project_id = projects.project_id

)

SELECT *
FROM joined24:Te83,{{ config({
    "alias": "gitlab_dotcom_namespaces_xf"
}) }}

{% set fields_to_mask = ['namespace_name', 'namespace_path'] %}

WITH namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces')}}

),

members AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_members')}} members
    WHERE is_currently_valid = TRUE
      AND {{ filter_out_blocked_users('members', 'user_id') }}

),

projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects')}}

), namespace_lineage AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespace_lineage')}}

), creators AS (

    SELECT DISTINCT
      author_id AS creator_id,
      entity_id AS group_id
    FROM {{ ref('prep_audit_event_details_clean') }} AS audit_event_details_clean
    LEFT JOIN {{ ref('gitlab_dotcom_audit_events') }} AS audit_events 
        ON audit_event_details_clean.audit_event_id = audit_events.audit_event_id
    WHERE entity_type = 'Group'
      AND key_name = 'add'
      AND key_value = 'group'
  
), joined AS (
    SELECT
      namespaces.namespace_id,

      {% for field in fields_to_mask %}
      CASE
        WHEN namespaces.visibility_level = 'public' OR namespace_is_internal THEN {{field}}
        WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
        WHEN namespaces.visibility_level = 'private'  THEN 'private - masked'
      END                                                              AS {{field}},
      {% endfor %}

      namespaces.owner_id,
      namespaces.namespace_type                                        AS namespace_type,
      namespaces.has_avatar,
      namespaces.created_at                                            AS namespace_created_at,
      namespaces.updated_at                                            AS namespace_updated_at,
      namespaces.is_membership_locked,
      namespaces.has_request_access_enabled,
      namespaces.has_share_with_group_locked,
      namespaces.visibility_level,
      namespaces.ldap_sync_status,
      namespaces.ldap_sync_error,
      namespaces.ldap_sync_last_update_at,
      namespaces.ldap_sync_last_successful_update_at,
      namespaces.ldap_sync_last_sync_at,
      namespaces.lfs_enabled,
      namespaces.parent_id,
      namespaces.shared_runners_enabled, 
      namespaces.shared_runners_minutes_limit,
      namespaces.extra_shared_runners_minutes_limit,
      namespaces.repository_size_limit,
      namespaces.does_require_two_factor_authentication,
      namespaces.two_factor_grace_period,
      namespaces.project_creation_level,
      namespaces.push_rule_id,
      COALESCE(creators.creator_id, namespaces.owner_id)               AS creator_id,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.ultimate_parent_id                             AS namespace_ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id                        AS plan_id,
      namespace_lineage.ultimate_parent_plan_title                     AS plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid                   AS plan_is_paid,

      COALESCE(COUNT(DISTINCT members.member_id), 0)                   AS member_count,
      COALESCE(COUNT(DISTINCT projects.project_id), 0)                 AS project_count

    FROM namespaces
      LEFT JOIN members
        ON namespaces.namespace_id = members.source_id
        AND members.member_source_type = 'Namespace'
      LEFT JOIN projects
        ON namespaces.namespace_id = projects.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN creators
        ON namespaces.namespace_id = creators.group_id
    {{ dbt_utils.group_by(n=33) }}
)

SELECT *
FROM joined25:T104a,



WITH namespaces AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_namespaces

),

members AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_members members
    WHERE is_currently_valid = TRUE
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )

),

projects AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_projects

), namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

), creators AS (

    SELECT DISTINCT
      author_id AS creator_id,
      entity_id AS group_id
    FROM "PROD".common_prep.prep_audit_event_details_clean AS audit_event_details_clean
    LEFT JOIN "PROD".legacy.gitlab_dotcom_audit_events AS audit_events 
        ON audit_event_details_clean.audit_event_id = audit_events.audit_event_id
    WHERE entity_type = 'Group'
      AND key_name = 'add'
      AND key_value = 'group'
  
), joined AS (
    SELECT
      namespaces.namespace_id,

      
      CASE
        WHEN namespaces.visibility_level = 'public' OR namespace_is_internal THEN namespace_name
        WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
        WHEN namespaces.visibility_level = 'private'  THEN 'private - masked'
      END                                                              AS namespace_name,
      
      CASE
        WHEN namespaces.visibility_level = 'public' OR namespace_is_internal THEN namespace_path
        WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
        WHEN namespaces.visibility_level = 'private'  THEN 'private - masked'
      END                                                              AS namespace_path,
      

      namespaces.owner_id,
      namespaces.namespace_type                                        AS namespace_type,
      namespaces.has_avatar,
      namespaces.created_at                                            AS namespace_created_at,
      namespaces.updated_at                                            AS namespace_updated_at,
      namespaces.is_membership_locked,
      namespaces.has_request_access_enabled,
      namespaces.has_share_with_group_locked,
      namespaces.visibility_level,
      namespaces.ldap_sync_status,
      namespaces.ldap_sync_error,
      namespaces.ldap_sync_last_update_at,
      namespaces.ldap_sync_last_successful_update_at,
      namespaces.ldap_sync_last_sync_at,
      namespaces.lfs_enabled,
      namespaces.parent_id,
      namespaces.shared_runners_enabled, 
      namespaces.shared_runners_minutes_limit,
      namespaces.extra_shared_runners_minutes_limit,
      namespaces.repository_size_limit,
      namespaces.does_require_two_factor_authentication,
      namespaces.two_factor_grace_period,
      namespaces.project_creation_level,
      namespaces.push_rule_id,
      COALESCE(creators.creator_id, namespaces.owner_id)               AS creator_id,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.ultimate_parent_id                             AS namespace_ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id                        AS plan_id,
      namespace_lineage.ultimate_parent_plan_title                     AS plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid                   AS plan_is_paid,

      COALESCE(COUNT(DISTINCT members.member_id), 0)                   AS member_count,
      COALESCE(COUNT(DISTINCT projects.project_id), 0)                 AS project_count

    FROM namespaces
      LEFT JOIN members
        ON namespaces.namespace_id = members.source_id
        AND members.member_source_type = 'Namespace'
      LEFT JOIN projects
        ON namespaces.namespace_id = projects.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN creators
        ON namespaces.namespace_id = creators.group_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33
)

SELECT *
FROM joined27:T1442,-- depends_on: {{ ref('engineering_productivity_metrics_projects_to_include') }}
-- depends_on: {{ ref('projects_part_of_product') }}

WITH merge_requests AS (

    SELECT 
      {{ dbt_utils.star(from=ref('gitlab_dotcom_merge_requests') ) }},
      created_at AS merge_request_created_at,
      updated_at  AS merge_request_updated_at
    FROM {{ref('gitlab_dotcom_merge_requests')}} merge_requests
    WHERE {{ filter_out_blocked_users('merge_requests', 'author_id') }}

), label_links AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_label_links')}}
    WHERE is_currently_valid = True
      AND target_type = 'MergeRequest'

), all_labels AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_labels_xf')}}

), agg_labels AS (

    SELECT
      merge_requests.merge_request_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM merge_requests
    LEFT JOIN label_links
      ON merge_requests.merge_request_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY merge_requests.merge_request_id

),  latest_merge_request_metric AS (

    SELECT MAX(merge_request_metric_id) AS target_id
    FROM {{ref('gitlab_dotcom_merge_request_metrics')}}
    GROUP BY merge_request_id

),  merge_request_metrics AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_merge_request_metrics')}}
    INNER JOIN latest_merge_request_metric
    ON merge_request_metric_id = target_id

), milestones AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_milestones')}}

), projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects_xf')}}

), author_namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces_xf')}}
    WHERE namespace_type = 'User'

), gitlab_subscriptions AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base')}}

), joined AS (

    SELECT
      merge_requests.*, 
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_title)                                       AS milestone_title,
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_description)                                 AS milestone_description,
      projects.namespace_id,
      projects.ultimate_parent_id,
      projects.ultimate_parent_plan_id,
      projects.ultimate_parent_plan_title,
      projects.ultimate_parent_plan_is_paid,
      projects.namespace_is_internal,
      author_namespaces.namespace_path                                                      AS author_namespace_path,
      ARRAY_TO_STRING(agg_labels.labels,'|')                                                AS masked_label_title,
      agg_labels.labels,
      merge_request_metrics.merged_at,
      IFF(merge_requests.target_project_id IN ({{is_project_included_in_engineering_metrics()}}),
        TRUE, FALSE)                                                                        AS is_included_in_engineering_metrics,
      IFF(merge_requests.target_project_id IN ({{is_project_part_of_product()}}),
        TRUE, FALSE)                                                                        AS is_part_of_product,
      IFF(projects.namespace_is_internal IS NOT NULL
          AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels),
        TRUE, FALSE)                                                                        AS is_community_contributor_related,
      TIMESTAMPDIFF(HOURS, merge_requests.merge_request_created_at,
        merge_request_metrics.merged_at)                                                    AS hours_to_merged_status,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[]( |[xX])[\]]',1,'m') AS total_checkboxes,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[][xX][\]]',1,'m')     AS completed_checkboxes,
      -- Original regex, (?:(?:>\s{0,4})*)(?:\s*(?:[-+*]|(?:\d+\.)))+\s+(\[\s\]|\[[xX]\])(\s.+), found in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/models/concerns/taskable.rb

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_merge_request_creation

    FROM merge_requests
      LEFT JOIN agg_labels
        ON merge_requests.merge_request_id = agg_labels.merge_request_id
      LEFT JOIN merge_request_metrics
        ON merge_requests.merge_request_id = merge_request_metrics.merge_request_id
      LEFT JOIN milestones
        ON merge_requests.milestone_id = milestones.milestone_id
      LEFT JOIN projects
        ON merge_requests.target_project_id = projects.project_id
      LEFT JOIN author_namespaces
        ON merge_requests.author_id = author_namespaces.owner_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND merge_requests.created_at BETWEEN gitlab_subscriptions.valid_from AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}

)

SELECT *
FROM joined28:T26f1,-- depends_on: "PROD".legacy.engineering_productivity_metrics_projects_to_include
-- depends_on: "PROD".legacy.projects_part_of_product

WITH merge_requests AS (

    SELECT 
      "MERGE_REQUEST_ID",
  "MERGE_REQUEST_IID",
  "MERGE_REQUEST_TITLE",
  "IS_MERGE_TO_MASTER",
  "MERGE_ERROR",
  "ASSIGNEE_ID",
  "UPDATED_BY_ID",
  "MERGE_USER_ID",
  "LAST_EDITED_BY_ID",
  "MILESTONE_ID",
  "HEAD_PIPELINE_ID",
  "LATEST_MERGE_REQUEST_DIFF_ID",
  "APPROVALS_BEFORE_MERGE",
  "LOCK_VERSION",
  "TIME_ESTIMATE",
  "PROJECT_ID",
  "TARGET_PROJECT_ID",
  "AUTHOR_ID",
  "MERGE_REQUEST_STATE_ID",
  "MERGE_REQUEST_STATE",
  "MERGE_REQUEST_STATUS",
  "DOES_MERGE_WHEN_PIPELINE_SUCCEEDS",
  "DOES_SQUASH",
  "IS_DISCUSSION_LOCKED",
  "DOES_ALLOW_MAINTAINER_TO_PUSH",
  "CREATED_AT",
  "UPDATED_AT",
  "MERGE_REQUEST_LAST_EDITED_AT",
  "MERGE_REQUEST_DESCRIPTION",
      created_at AS merge_request_created_at,
      updated_at  AS merge_request_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_merge_requests merge_requests
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = merge_requests.author_id

    )

), label_links AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_label_links
    WHERE is_currently_valid = True
      AND target_type = 'MergeRequest'

), all_labels AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_labels_xf

), agg_labels AS (

    SELECT
      merge_requests.merge_request_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM merge_requests
    LEFT JOIN label_links
      ON merge_requests.merge_request_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY merge_requests.merge_request_id

),  latest_merge_request_metric AS (

    SELECT MAX(merge_request_metric_id) AS target_id
    FROM "PROD".legacy.gitlab_dotcom_merge_request_metrics
    GROUP BY merge_request_id

),  merge_request_metrics AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_merge_request_metrics
    INNER JOIN latest_merge_request_metric
    ON merge_request_metric_id = target_id

), milestones AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_milestones

), projects AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), author_namespaces AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf
    WHERE namespace_type = 'User'

), gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), joined AS (

    SELECT
      merge_requests.*, 
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_title)                                       AS milestone_title,
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_description)                                 AS milestone_description,
      projects.namespace_id,
      projects.ultimate_parent_id,
      projects.ultimate_parent_plan_id,
      projects.ultimate_parent_plan_title,
      projects.ultimate_parent_plan_is_paid,
      projects.namespace_is_internal,
      author_namespaces.namespace_path                                                      AS author_namespace_path,
      ARRAY_TO_STRING(agg_labels.labels,'|')                                                AS masked_label_title,
      agg_labels.labels,
      merge_request_metrics.merged_at,
      IFF(merge_requests.target_project_id IN (13083, 278964, 250833, 7071551, 554859, 2009901, 2694799, 74823, 3674569, 430285, 5373222, 9762266, 5779760, 10476326, 9450197, 9450195, 9450192, 7145793, 6535935, 6280478, 6237091, 6237085, 5971589, 5606894, 4894834, 5851774, 5849726, 5778095, 5778093, 5778044, 5777976, 5777952, 5777939, 4157550, 1507906, 4382108, 8427052, 7524061, 7776928, 11520423, 10748426, 8368695, 5474112, 5467277, 10014839, 7660893, 6487905, 5777819, 145205, 3362933, 3430480, 4921652, 3626648, 6469877, 3601513, 12006272, 9049889, 734943, 14022, 1441932, 9396716, 6237088, 6126012, 6802300, 6143038, 5828233, 5777853, 8375261, 8368700, 5996549, 5727416, 5457755, 3828396, 7795571, 6392811, 6168240, 5778074, 5778037, 5777954, 5777179, 8362868, 9438583, 4949400, 5647182, 4359271, 4149988, 8226179, 11428501, 11432834, 7688358, 6328050, 5509547, 5456231, 11688089, 14240586, 11080193, 14694517, 6047528, 443787, 7750843, 4456656, 2670515, 6491770, 6130122, 11574953, 6388398, 5465687, 10619765, 9358979, 5778056, 5777918, 1075790, 3825482, 3787977, 11915984, 11317506, 10846938, 9712018, 6523803, 5737157, 5486671, 9184510, 20699, 10400718, 5457651, 27726, 6457868, 5467143, 10947578),
        TRUE, FALSE)                                                                        AS is_included_in_engineering_metrics,
      IFF(merge_requests.target_project_id IN (4359271, 7453181, 3828396, 6329679, 16590122, 13822214, 16240616, 1254421, 5279538, 17019611, 11173751, 19922160, 34675721, 15363819, 10400718, 11688089, 2670515, 23345837, 43513722, 150440, 13682597, 2694799, 1794617, 46649240, 21250701, 1507906, 13083, 1777822, 145205, 5981322, 14694517, 6457868, 27726, 9450192, 6392811, 9762266, 6126012, 13815397, 9184510, 1075790, 34770409, 5261717, 554859, 928825, 3843116, 11015994, 9450197, 5498087, 5779760, 5777853, 5777952, 5777954, 5778074, 39622674, 6237091, 6280478, 19871573, 19871264, 19413496, 24673064, 5467143, 24249085, 3430480, 2651596, 2009901, 4157550, 4534254, 734943, 13764, 250833, 7792567, 14378900, 10506825, 11196060, 9358979, 10846951, 27060148, 5778056, 37734140, 39233486, 11533294, 23070395, 20162469, 11915984, 6047528, 5647182, 2953390, 20699, 10586771, 3844141, 11380952, 15112583, 3362933, 4949400, 10476326, 6487905, 9450195, 30656896, 13922331, 10861561, 21479276, 15369510, 26751150, 21351796, 12006272, 5777179, 5777819, 5777939, 6130122, 39229232, 5606894, 13150952, 5971589, 5964710, 24298348, 25230764, 24313598, 23176783, 23070140, 24225194, 20334170, 24257614, 27821122, 5727416, 5737157, 14097509, 5465687, 16842968, 4456656, 18943607, 95156, 387896, 430285, 13017938, 17166102, 5778093, 39298809, 8362868, 13467157, 6237088, 6237085, 22111360, 24544330, 23069956, 23465101, 20773921, 23545481, 15232184, 27497069, 11432834, 13664986, 5457755, 6523803, 7688358, 14404642, 7776928, 10973541, 8368695, 15642544, 4176070, 12690061, 16573099, 13566613, 18899486, 27628435, 31202357, 24631368, 13331704, 26076251, 39193358, 25537666, 278964, 36743, 74823, 6043225, 14022, 11625232, 5772881, 5777976, 5828233, 5373222, 25538517, 24544020, 24317064, 23176971, 24111720, 19413101, 19413012, 19904939, 20337863, 20336302, 24075172, 16683102, 16239404, 3101096, 143237, 10953870, 4875494, 3842996, 7660893, 9396716, 11139665, 17035255, 5777918, 5778037, 5778044, 5778095, 11373038, 19617580, 24542363, 24313398, 24302484, 23599168, 23505725, 23070377, 23070164, 23069693, 21501997, 23597850, 23455079, 28589369, 27819859, 27821148, 28502955, 37954006, 13348998, 6388398, 11520423, 5996549, 9712018, 5457651, 5509547, 10748426, 5467277, 5486671, 5474112, 6328050, 11317506, 10846938, 13831684, 6491770, 38355982, 15704133, 15685912, 15683922, 15667093, 19047934, 11446522, 1441932, 7795571, 6535935, 8368700, 11511606, 7523614, 7524061, 7560116, 14477200, 11229385, 11880131, 12450931, 443787, 4149988, 4382108, 15114652, 19722963, 7444821, 5651817, 1755794, 22848448, 26392061, 32149347, 32189602, 32318686, 31202862, 31203942, 35104827, 37966217, 43788427, 29138380, 40916776, 1148549, 28496898, 7145793, 14853550, 11080193, 40857363, 24112430, 23365123, 5456231, 11574953, 9438583, 7071551, 19019153, 15685819, 14292404, 7560137, 13613417, 15208888, 1755701, 31203840, 32823351, 43473862, 34907799, 15821588, 15685887, 27919014),
        TRUE, FALSE)                                                                        AS is_part_of_product,
      IFF(projects.namespace_is_internal IS NOT NULL
          AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels),
        TRUE, FALSE)                                                                        AS is_community_contributor_related,
      TIMESTAMPDIFF(HOURS, merge_requests.merge_request_created_at,
        merge_request_metrics.merged_at)                                                    AS hours_to_merged_status,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[]( |[xX])[\]]',1,'m') AS total_checkboxes,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[][xX][\]]',1,'m')     AS completed_checkboxes,
      -- Original regex, (?:(?:>\s{0,4})*)(?:\s*(?:[-+*]|(?:\d+\.)))+\s+(\[\s\]|\[[xX]\])(\s.+), found in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/models/concerns/taskable.rb

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_merge_request_creation

    FROM merge_requests
      LEFT JOIN agg_labels
        ON merge_requests.merge_request_id = agg_labels.merge_request_id
      LEFT JOIN merge_request_metrics
        ON merge_requests.merge_request_id = merge_request_metrics.merge_request_id
      LEFT JOIN milestones
        ON merge_requests.milestone_id = milestones.milestone_id
      LEFT JOIN projects
        ON merge_requests.target_project_id = projects.project_id
      LEFT JOIN author_namespaces
        ON merge_requests.author_id = author_namespaces.owner_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND merge_requests.created_at BETWEEN gitlab_subscriptions.valid_from AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)

)

SELECT *
FROM joinedc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"gitlab_dotcom_merge_requests_xf"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","product",{"children":[["$","code",null,{"children":["$","a",null,{"children":"product"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.legacy.gitlab_dotcom_merge_requests_xf"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"33 GB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 11:39UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"$f"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$L10",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_MERGE_REQUESTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_ID":{"type":"NUMBER","index":1,"name":"merge_request_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_id"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":2,"name":"MERGE_REQUEST_IID","comment":null,"display_name":"merge_request_iid"},"MERGE_REQUEST_TITLE":{"type":"TEXT","index":3,"name":"MERGE_REQUEST_TITLE","comment":null,"display_name":"merge_request_title"},"IS_MERGE_TO_MASTER":{"type":"BOOLEAN","index":4,"name":"IS_MERGE_TO_MASTER","comment":null,"display_name":"is_merge_to_master"},"MERGE_ERROR":{"type":"TEXT","index":5,"name":"MERGE_ERROR","comment":null,"display_name":"merge_error"},"ASSIGNEE_ID":{"type":"NUMBER","index":6,"name":"ASSIGNEE_ID","comment":null,"display_name":"assignee_id"},"UPDATED_BY_ID":{"type":"NUMBER","index":7,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"MERGE_USER_ID":{"type":"NUMBER","index":8,"name":"MERGE_USER_ID","comment":null,"display_name":"merge_user_id"},"LAST_EDITED_BY_ID":{"type":"NUMBER","index":9,"name":"LAST_EDITED_BY_ID","comment":null,"display_name":"last_edited_by_id"},"MILESTONE_ID":{"type":"NUMBER","index":10,"name":"MILESTONE_ID","comment":null,"display_name":"milestone_id"},"HEAD_PIPELINE_ID":{"type":"NUMBER","index":11,"name":"HEAD_PIPELINE_ID","comment":null,"display_name":"head_pipeline_id"},"LATEST_MERGE_REQUEST_DIFF_ID":{"type":"NUMBER","index":12,"name":"LATEST_MERGE_REQUEST_DIFF_ID","comment":null,"display_name":"latest_merge_request_diff_id"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":13,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"LOCK_VERSION":{"type":"NUMBER","index":14,"name":"LOCK_VERSION","comment":null,"display_name":"lock_version"},"TIME_ESTIMATE":{"type":"NUMBER","index":15,"name":"TIME_ESTIMATE","comment":null,"display_name":"time_estimate"},"PROJECT_ID":{"type":"NUMBER","index":16,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"TARGET_PROJECT_ID":{"type":"NUMBER","index":17,"name":"TARGET_PROJECT_ID","comment":null,"display_name":"target_project_id"},"AUTHOR_ID":{"type":"NUMBER","index":18,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"MERGE_REQUEST_STATE_ID":{"type":"NUMBER","index":19,"name":"MERGE_REQUEST_STATE_ID","comment":null,"display_name":"merge_request_state_id"},"MERGE_REQUEST_STATE":{"type":"TEXT","index":20,"name":"MERGE_REQUEST_STATE","comment":null,"display_name":"merge_request_state"},"MERGE_REQUEST_STATUS":{"type":"TEXT","index":21,"name":"MERGE_REQUEST_STATUS","comment":null,"display_name":"merge_request_status"},"DOES_MERGE_WHEN_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":22,"name":"DOES_MERGE_WHEN_PIPELINE_SUCCEEDS","comment":null,"display_name":"does_merge_when_pipeline_succeeds"},"DOES_SQUASH":{"type":"BOOLEAN","index":23,"name":"DOES_SQUASH","comment":null,"display_name":"does_squash"},"IS_DISCUSSION_LOCKED":{"type":"BOOLEAN","index":24,"name":"IS_DISCUSSION_LOCKED","comment":null,"display_name":"is_discussion_locked"},"DOES_ALLOW_MAINTAINER_TO_PUSH":{"type":"BOOLEAN","index":25,"name":"DOES_ALLOW_MAINTAINER_TO_PUSH","comment":null,"display_name":"does_allow_maintainer_to_push"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":27,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"MERGE_REQUEST_LAST_EDITED_AT":{"type":"TIMESTAMP_NTZ","index":28,"name":"MERGE_REQUEST_LAST_EDITED_AT","comment":null,"display_name":"merge_request_last_edited_at"},"MERGE_REQUEST_DESCRIPTION":{"type":"TEXT","index":29,"name":"MERGE_REQUEST_DESCRIPTION","comment":null,"display_name":"merge_request_description"},"MERGE_REQUEST_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":30,"name":"MERGE_REQUEST_CREATED_AT","comment":null,"display_name":"merge_request_created_at"},"MERGE_REQUEST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":31,"name":"MERGE_REQUEST_UPDATED_AT","comment":null,"display_name":"merge_request_updated_at"},"MILESTONE_TITLE":{"type":"TEXT","index":32,"name":"MILESTONE_TITLE","comment":null,"display_name":"milestone_title"},"MILESTONE_DESCRIPTION":{"type":"TEXT","index":33,"name":"MILESTONE_DESCRIPTION","comment":null,"display_name":"milestone_description"},"NAMESPACE_ID":{"type":"NUMBER","index":34,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":35,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":36,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":37,"name":"ULTIMATE_PARENT_PLAN_TITLE","comment":null,"display_name":"ultimate_parent_plan_title"},"ULTIMATE_PARENT_PLAN_IS_PAID":{"type":"BOOLEAN","index":38,"name":"ULTIMATE_PARENT_PLAN_IS_PAID","comment":null,"display_name":"ultimate_parent_plan_is_paid"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":39,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"AUTHOR_NAMESPACE_PATH":{"type":"TEXT","index":40,"name":"AUTHOR_NAMESPACE_PATH","comment":null,"display_name":"author_namespace_path"},"MASKED_LABEL_TITLE":{"type":"TEXT","index":41,"name":"MASKED_LABEL_TITLE","comment":null,"display_name":"masked_label_title"},"LABELS":{"type":"ARRAY","index":42,"name":"LABELS","comment":null,"display_name":"labels"},"MERGED_AT":{"type":"TIMESTAMP_NTZ","index":43,"name":"MERGED_AT","comment":null,"display_name":"merged_at"},"IS_INCLUDED_IN_ENGINEERING_METRICS":{"type":"BOOLEAN","index":44,"name":"IS_INCLUDED_IN_ENGINEERING_METRICS","comment":null,"display_name":"is_included_in_engineering_metrics"},"IS_PART_OF_PRODUCT":{"type":"BOOLEAN","index":45,"name":"IS_PART_OF_PRODUCT","comment":null,"display_name":"is_part_of_product"},"IS_COMMUNITY_CONTRIBUTOR_RELATED":{"type":"BOOLEAN","index":46,"name":"is_community_contributor_related","comment":null,"description":"Merge Request has 'community contribution' tag, and is on a project in the gitlab.org namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_community_contributor_related"},"HOURS_TO_MERGED_STATUS":{"type":"NUMBER","index":47,"name":"HOURS_TO_MERGED_STATUS","comment":null,"display_name":"hours_to_merged_status"},"TOTAL_CHECKBOXES":{"type":"NUMBER","index":48,"name":"total_checkboxes","comment":null,"description":"The number of checkbox tasks included in the description of the Merge Request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_checkboxes"},"COMPLETED_CHECKBOXES":{"type":"NUMBER","index":49,"name":"completed_checkboxes","comment":null,"description":"The number of checkbox tasks marked as completed in the description of the Merge Request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"completed_checkboxes"},"PLAN_ID_AT_MERGE_REQUEST_CREATION":{"type":"TEXT","index":50,"name":"PLAN_ID_AT_MERGE_REQUEST_CREATION","comment":null,"display_name":"plan_id_at_merge_request_creation"},"namespace_plan_id_at_merge_request_creation":{"name":"namespace_plan_id_at_merge_request_creation","description":"This column represents the gitlab_subscription plan_id (2, 3, 4, 34 or 'trial') of the namespace at the time that the object (issue, project, merge request) was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_id_at_merge_request_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:39UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34970484736,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","raw_sql":"$11","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.is_project_included_in_engineering_metrics","macro.gitlab_snowflake.is_project_part_of_product","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.projects_part_of_product","seed.gitlab_snowflake.projects_part_of_product","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_label_links","model.gitlab_snowflake.gitlab_dotcom_label_links","model.gitlab_snowflake.gitlab_dotcom_labels_xf","model.gitlab_snowflake.gitlab_dotcom_labels_xf","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_merge_requests_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_xf.sql","name":"gitlab_dotcom_merge_requests_xf","alias":"gitlab_dotcom_merge_requests_xf","checksum":{"name":"sha256","checksum":"2a388f408b46909f19455c1e2e4b59860e9f52fe3ddcf09b64c063cbbb60db09"},"tags":["product"],"refs":[["engineering_productivity_metrics_projects_to_include"],["engineering_productivity_metrics_projects_to_include"],["projects_part_of_product"],["projects_part_of_product"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_label_links"],["gitlab_dotcom_label_links"],["gitlab_dotcom_labels_xf"],["gitlab_dotcom_labels_xf"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_milestones"],["gitlab_dotcom_milestones"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"]],"sources":[],"metrics":[],"description":"$12","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3694623,"compiled_sql":"$13","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_merge_requests_xf","label":"gitlab_dotcom_merge_requests_xf"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CREATE_GITLAB_DOTCOM_SMAU_EVENTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"user_id"},"EVENT_DATE":{"type":"DATE","index":2,"name":"event_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_date"},"EVENT_TYPE":{"type":"TEXT","index":3,"name":"EVENT_TYPE","comment":null,"display_name":"event_type"},"EVENT_SURROGATE_KEY":{"type":"TEXT","index":4,"name":"event_surrogate_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_surrogate_key"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:41UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":19780314624,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.create_gitlab_dotcom_smau_events","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_notes"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"event_surrogate_key","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","smau_events","gitlab_dotcom_smau_events","create_gitlab_dotcom_smau_events"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/smau_events/gitlab_dotcom_smau_events/create_gitlab_dotcom_smau_events.sql","original_file_path":"models/legacy/smau_events/gitlab_dotcom_smau_events/create_gitlab_dotcom_smau_events.sql","name":"create_gitlab_dotcom_smau_events","alias":"create_gitlab_dotcom_smau_events","checksum":{"name":"sha256","checksum":"9f3d9577d52046b3bae3d89e07c17c96459db6554ccb291e65cd120e699ce6cd"},"tags":["product"],"refs":[["gitlab_dotcom_notes"],["gitlab_dotcom_notes"],["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_notes"],["gitlab_dotcom_notes"]],"sources":[],"metrics":[],"description":"This model provides a summary of relevant activation events for Create Stage coming from gitlab_dotcom database. A summary of all activation events is at the moment defined in this issue.\n\nFrom gitlab_dotcom database, at the moment we track the following events:\n\n* comment on a snippet\n* comment on a merge request\n* open a merge request","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/smau_events/gitlab_dotcom_smau_events/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/smau_events/gitlab_dotcom_smau_events/create_gitlab_dotcom_smau_events.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"],"unique_key":"event_surrogate_key"},"created_at":1689033764.0421107,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.create_gitlab_dotcom_smau_events","label":"create_gitlab_dotcom_smau_events"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CATEGORY_MARKETING_SITE_MERGE_REQUESTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_STATE":{"type":"TEXT","index":1,"name":"merge_request_state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_state"},"MERGE_REQUEST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"merge_request_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_updated_at"},"MERGE_REQUEST_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"merge_request_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_created_at"},"MERGE_REQUEST_LAST_EDITED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"merge_request_last_edited_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_last_edited_at"},"MERGE_REQUEST_MERGED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"merge_request_merged_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_merged_at"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":6,"name":"merge_request_iid","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_iid"},"MERGE_REQUEST_PATH":{"type":"TEXT","index":7,"name":"MERGE_REQUEST_PATH","comment":null,"display_name":"merge_request_path"},"MERGE_REQUEST_DEPARTMENT_LIST":{"type":"ARRAY","index":8,"name":"merge_request_department_list","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_department_list"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":766464,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.category_marketing_site_merge_requests","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.marketing_site_merge_requests_files","model.gitlab_snowflake.marketing_site_merge_requests_files","seed.gitlab_snowflake.marketing_site_file_classification_mapping","seed.gitlab_snowflake.marketing_site_file_classification_mapping"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","marketing_site","xf","category_marketing_site_merge_requests"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/marketing_site/xf/category_marketing_site_merge_requests.sql","original_file_path":"models/legacy/marketing_site/xf/category_marketing_site_merge_requests.sql","name":"category_marketing_site_merge_requests","alias":"category_marketing_site_merge_requests","checksum":{"name":"sha256","checksum":"7ba192cea2c264af95dfebf4f8b593048beaaf324a5c9a562eac80a67e3b0a40"},"tags":[],"refs":[["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"],["marketing_site_merge_requests_files"],["marketing_site_merge_requests_files"],["marketing_site_file_classification_mapping"],["marketing_site_file_classification_mapping"]],"sources":[],"metrics":[],"description":"This is a dbt model (view) of unique merge requests to the marketing site along with their categorization of a specific department/division.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/marketing_site/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/marketing_site/xf/category_marketing_site_merge_requests.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033758.3558588,"compiled_sql":"$18","extra_ctes_injected":true,"extra_ctes":[{"id":"model.gitlab_snowflake.marketing_site_merge_requests_files","sql":" __dbt__cte__marketing_site_merge_requests_files as (\n\n\nWITH base AS (\n\n    SELECT *\n    FROM \"PREP\".handbook.handbook_merge_requests_source\n\n), exploded_file_paths AS ( -- explodes the files in the list of diffs\n    \n    SELECT \n      file_diffs.value:file_path::VARCHAR AS marketing_site_file_edited,\n      base.plain_diff_url_path            AS plain_diff_url_path,\n      base.merge_request_version_diffs    AS merge_request_version_diffs,\n      base.source_branch_name             AS source_branch_name\n    FROM base\n    INNER JOIN TABLE(FLATTEN(INPUT => file_diffs, outer => true)) AS file_diffs\n    WHERE LOWER(file_diffs.value:file_path) LIKE '%sites/marketing/source/%'\n\n)\nSELECT * \nFROM exploded_file_paths\n)"}],"relation_name":"\"PROD\".legacy.category_marketing_site_merge_requests","label":"category_marketing_site_merge_requests"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"DB_STRUCTURE_MERGE_REQUESTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MR_PATH":{"type":"TEXT","index":1,"name":"mr_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mr_path"},"MERGE_REQUEST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"merge_request_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_updated_at"},"MERGED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"merged_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merged_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":154112,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.db_structure_merge_requests","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('engineering_part_of_product_merge_requests_source') }}\n\n), mr_information AS (\n\n    SELECT * FROM\n    {{ ref('gitlab_dotcom_merge_requests_xf') }}\n    WHERE ARRAY_CONTAINS('database::approved'::VARIANT, labels)\n    AND merged_at IS NOT NULL\n    AND project_id = 278964 --where the db schema is\n\n), changes_to_db_structure AS (\n\n    SELECT \n      DISTINCT\n      'gitlab.com' || plain_diff_url_path AS mr_path,\n      mr_information.merge_request_updated_at,\n      merged_at\n    FROM source\n      INNER JOIN LATERAL FLATTEN(INPUT => file_diffs, outer => true) d\n      INNER JOIN mr_information\n        ON source.product_merge_request_iid = mr_information.merge_request_iid\n    WHERE target_branch_name = 'master' \n      AND d.value['file_path'] = 'db/structure.sql'\n\n)\n\nSELECT *\nFROM changes_to_db_structure\nORDER BY merged_at DESC","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.engineering_part_of_product_merge_requests_source","model.gitlab_snowflake.engineering_part_of_product_merge_requests_source","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","engineering","db_structure_merge_requests"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/engineering/db_structure_merge_requests.sql","original_file_path":"models/legacy/engineering/db_structure_merge_requests.sql","name":"db_structure_merge_requests","alias":"db_structure_merge_requests","checksum":{"name":"sha256","checksum":"4e83d8fa0b3abbf0846b7d32282a27721f5612c11da022fec2bc744590d9afb2"},"tags":[],"refs":[["engineering_part_of_product_merge_requests_source"],["engineering_part_of_product_merge_requests_source"],["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"]],"sources":[],"metrics":[],"description":"All merge requests that have been merged that affect the main gitlab dot com schema file.  Used for data engineering monitoring.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/engineering/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/engineering/db_structure_merge_requests.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033759.166396,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PROD\".legacy.engineering_part_of_product_merge_requests_source\n\n), mr_information AS (\n\n    SELECT * FROM\n    \"PROD\".legacy.gitlab_dotcom_merge_requests_xf\n    WHERE ARRAY_CONTAINS('database::approved'::VARIANT, labels)\n    AND merged_at IS NOT NULL\n    AND project_id = 278964 --where the db schema is\n\n), changes_to_db_structure AS (\n\n    SELECT \n      DISTINCT\n      'gitlab.com' || plain_diff_url_path AS mr_path,\n      mr_information.merge_request_updated_at,\n      merged_at\n    FROM source\n      INNER JOIN LATERAL FLATTEN(INPUT => file_diffs, outer => true) d\n      INNER JOIN mr_information\n        ON source.product_merge_request_iid = mr_information.merge_request_iid\n    WHERE target_branch_name = 'master' \n      AND d.value['file_path'] = 'db/structure.sql'\n\n)\n\nSELECT *\nFROM changes_to_db_structure\nORDER BY merged_at DESC","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.db_structure_merge_requests","label":"db_structure_merge_requests"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CATEGORY_HANDBOOK_MERGE_REQUESTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_STATE":{"type":"TEXT","index":1,"name":"merge_request_state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_state"},"MERGE_REQUEST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"merge_request_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_updated_at"},"MERGE_REQUEST_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"merge_request_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_created_at"},"MERGE_REQUEST_LAST_EDITED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"merge_request_last_edited_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_last_edited_at"},"MERGE_REQUEST_MERGED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"merge_request_merged_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_merged_at"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":6,"name":"merge_request_iid","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_iid"},"MERGE_REQUEST_PATH":{"type":"TEXT","index":7,"name":"MERGE_REQUEST_PATH","comment":null,"display_name":"merge_request_path"},"MERGE_REQUEST_DEPARTMENT_LIST":{"type":"ARRAY","index":8,"name":"merge_request_department_list","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_department_list"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4940800,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.category_handbook_merge_requests","raw_sql":"$19","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.handbook_merge_requests_files","model.gitlab_snowflake.handbook_merge_requests_files","seed.gitlab_snowflake.handbook_file_classification_mapping","seed.gitlab_snowflake.handbook_file_classification_mapping"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","handbook","xf","category_handbook_merge_requests"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/handbook/xf/category_handbook_merge_requests.sql","original_file_path":"models/legacy/handbook/xf/category_handbook_merge_requests.sql","name":"category_handbook_merge_requests","alias":"category_handbook_merge_requests","checksum":{"name":"sha256","checksum":"e359da7bd569ef350080196e5fad65fea480fe23b56ed317a0988c6ea0e7793d"},"tags":[],"refs":[["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"],["handbook_merge_requests_files"],["handbook_merge_requests_files"],["handbook_file_classification_mapping"],["handbook_file_classification_mapping"]],"sources":[],"metrics":[],"description":"This is a dbt model (view) of unique merge requests to the handbook along with their categorization of a specific department/division in engineering.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/handbook/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/handbook/xf/category_handbook_merge_requests.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033761.013378,"compiled_sql":"$1a","extra_ctes_injected":true,"extra_ctes":[{"id":"model.gitlab_snowflake.handbook_merge_requests_files","sql":" __dbt__cte__handbook_merge_requests_files as (\n\n\nWITH base AS (\n\n    SELECT *\n    FROM \"PREP\".handbook.handbook_merge_requests_source\n\n), exploded_file_paths AS ( -- explodes the files in the list of diffs\n    \n    SELECT \n      file_diffs.value:file_path::VARCHAR AS handbook_file_edited,\n      base.plain_diff_url_path            AS plain_diff_url_path,\n      base.merge_request_version_diffs    AS merge_request_version_diffs,\n      base.source_branch_name             AS source_branch_name\n    FROM base\n    INNER JOIN TABLE(FLATTEN(INPUT => file_diffs, outer => true)) AS file_diffs\n    WHERE LOWER(file_diffs.value:file_path) LIKE '%/handbook/%'\n    OR LOWER(file_diffs.value:file_path) LIKE '%data/performance_indicators%'\n\n)\nSELECT * \nFROM exploded_file_paths\n)"}],"relation_name":"\"PROD\".legacy.category_handbook_merge_requests","label":"category_handbook_merge_requests"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_EMPLOYEES_MERGE_REQUESTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_DATA_SOURCE":{"type":"TEXT","index":1,"name":"MERGE_REQUEST_DATA_SOURCE","comment":null,"display_name":"merge_request_data_source"},"MERGE_REQUEST_ID":{"type":"NUMBER","index":2,"name":"MERGE_REQUEST_ID","comment":null,"display_name":"merge_request_id"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":3,"name":"MERGE_REQUEST_IID","comment":null,"display_name":"merge_request_iid"},"MERGE_REQUEST_STATE":{"type":"TEXT","index":4,"name":"MERGE_REQUEST_STATE","comment":null,"display_name":"merge_request_state"},"MERGE_REQUEST_STATUS":{"type":"TEXT","index":5,"name":"MERGE_REQUEST_STATUS","comment":null,"display_name":"merge_request_status"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"MERGED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"MERGED_AT","comment":null,"display_name":"merged_at"},"PROJECT_ID":{"type":"NUMBER","index":8,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"TARGET_PROJECT_ID":{"type":"NUMBER","index":9,"name":"TARGET_PROJECT_ID","comment":null,"display_name":"target_project_id"},"AUTHOR_ID":{"type":"NUMBER","index":10,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"ASSIGNEE_ID":{"type":"NUMBER","index":11,"name":"ASSIGNEE_ID","comment":null,"display_name":"assignee_id"},"IS_PART_OF_PRODUCT":{"type":"BOOLEAN","index":12,"name":"IS_PART_OF_PRODUCT","comment":null,"display_name":"is_part_of_product"},"PEOPLE_ENGINEERING_PROJECT":{"type":"NUMBER","index":13,"name":"PEOPLE_ENGINEERING_PROJECT","comment":null,"display_name":"people_engineering_project"},"BAMBOOHR_EMPLOYEE_ID":{"type":"NUMBER","index":14,"name":"BAMBOOHR_EMPLOYEE_ID","comment":null,"display_name":"bamboohr_employee_id"},"DIVISION":{"type":"TEXT","index":15,"name":"DIVISION","comment":null,"display_name":"division"},"DEPARTMENT":{"type":"TEXT","index":16,"name":"DEPARTMENT","comment":null,"display_name":"department"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":13583360,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_employees_merge_requests_xf","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.projects_part_of_product","seed.gitlab_snowflake.projects_part_of_product","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_ops_merge_requests_xf","model.gitlab_snowflake.gitlab_ops_merge_requests_xf","model.gitlab_snowflake.map_team_member_bamboo_gitlab_dotcom_gitlab_ops","model.gitlab_snowflake.map_team_member_bamboo_gitlab_dotcom_gitlab_ops","model.gitlab_snowflake.employee_directory_analysis","model.gitlab_snowflake.employee_directory_analysis"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_ops","sensitive","gitlab_employees_merge_requests_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_ops/sensitive/gitlab_employees_merge_requests_xf.sql","original_file_path":"models/legacy/gitlab_ops/sensitive/gitlab_employees_merge_requests_xf.sql","name":"gitlab_employees_merge_requests_xf","alias":"gitlab_employees_merge_requests_xf","checksum":{"name":"sha256","checksum":"ee91e3a891e8f1782890ecd5f45ea9fbcb877f5672f24f854ffd7791f76ff8b4"},"tags":[],"refs":[["engineering_productivity_metrics_projects_to_include"],["engineering_productivity_metrics_projects_to_include"],["projects_part_of_product"],["projects_part_of_product"],["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"],["gitlab_ops_merge_requests_xf"],["gitlab_ops_merge_requests_xf"],["map_team_member_bamboo_gitlab_dotcom_gitlab_ops"],["map_team_member_bamboo_gitlab_dotcom_gitlab_ops"],["employee_directory_analysis"],["employee_directory_analysis"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_ops/sensitive/gitlab_employees_merge_requests_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033716.7387774,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_employees_merge_requests_xf","label":"gitlab_employees_merge_requests_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_RESOURCE_LABEL_EVENTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RESOURCE_LABEL_EVENT_ID":{"type":"NUMBER","index":1,"name":"resource_label_event_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"resource_label_event_id"},"ACTION_TYPE_ID":{"type":"NUMBER","index":2,"name":"ACTION_TYPE_ID","comment":null,"display_name":"action_type_id"},"ACTION_TYPE":{"type":"TEXT","index":3,"name":"ACTION_TYPE","comment":null,"display_name":"action_type"},"ISSUE_ID":{"type":"NUMBER","index":4,"name":"ISSUE_ID","comment":null,"display_name":"issue_id"},"MERGE_REQUEST_ID":{"type":"NUMBER","index":5,"name":"MERGE_REQUEST_ID","comment":null,"display_name":"merge_request_id"},"EPIC_ID":{"type":"NUMBER","index":6,"name":"EPIC_ID","comment":null,"display_name":"epic_id"},"LABEL_ID":{"type":"NUMBER","index":7,"name":"LABEL_ID","comment":null,"display_name":"label_id"},"USER_ID":{"type":"NUMBER","index":8,"name":"USER_ID","comment":null,"display_name":"user_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"CACHED_MARKDOWN_VERSION":{"type":"TEXT","index":10,"name":"CACHED_MARKDOWN_VERSION","comment":null,"display_name":"cached_markdown_version"},"REFERRENCE":{"type":"TEXT","index":11,"name":"REFERRENCE","comment":null,"display_name":"referrence"},"REFERENCE_HTML":{"type":"TEXT","index":12,"name":"REFERENCE_HTML","comment":null,"display_name":"reference_html"},"NAMESPACE_ID":{"type":"NUMBER","index":13,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:40UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":5273773056,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_resource_label_events_xf","raw_sql":"WITH resource_label_events AS (\n  \n    SELECT *\n    FROM {{ ref('gitlab_dotcom_resource_label_events') }}\n  \n)\n\n, epics AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_epics') }} \n\n)\n\n, issues AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_issues_xf') }} \n\n)\n\n, mrs AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_merge_requests_xf') }} \n\n)\n\n, joined AS (\n\n    SELECT \n      resource_label_events.*,\n      COALESCE(epics.group_id,\n                issues.namespace_id,\n                mrs.namespace_id) AS namespace_id\n    FROM resource_label_events\n    LEFT JOIN epics\n      ON resource_label_events.epic_id = epics.epic_id\n    LEFT JOIN issues\n      ON resource_label_events.issue_id = issues.issue_id\n    LEFT JOIN mrs\n      ON resource_label_events.merge_request_id = mrs.merge_request_id\n\n)\n\nSELECT *\nFROM joined","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_resource_label_events","model.gitlab_snowflake.gitlab_dotcom_resource_label_events","model.gitlab_snowflake.gitlab_dotcom_epics","model.gitlab_snowflake.gitlab_dotcom_epics","model.gitlab_snowflake.gitlab_dotcom_issues_xf","model.gitlab_snowflake.gitlab_dotcom_issues_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_resource_label_events_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_resource_label_events_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_resource_label_events_xf.sql","name":"gitlab_dotcom_resource_label_events_xf","alias":"gitlab_dotcom_resource_label_events_xf","checksum":{"name":"sha256","checksum":"9b12f30d4e0e1643b45278aad305f615de7560581b3ec63cc49025ced280cbf4"},"tags":["product"],"refs":[["gitlab_dotcom_resource_label_events"],["gitlab_dotcom_resource_label_events"],["gitlab_dotcom_epics"],["gitlab_dotcom_epics"],["gitlab_dotcom_issues_xf"],["gitlab_dotcom_issues_xf"],["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"]],"sources":[],"metrics":[],"description":"xf model for gitlab_dotcom_resource_milestone_events joining with issues, epics and mrs.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_resource_label_events_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3929896,"compiled_sql":"WITH resource_label_events AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_resource_label_events\n  \n)\n\n, epics AS (\n\n    SELECT *\n    FROM \"PREP\".sensitive.gitlab_dotcom_epics \n\n)\n\n, issues AS (\n\n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_issues_xf \n\n)\n\n, mrs AS (\n\n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_merge_requests_xf \n\n)\n\n, joined AS (\n\n    SELECT \n      resource_label_events.*,\n      COALESCE(epics.group_id,\n                issues.namespace_id,\n                mrs.namespace_id) AS namespace_id\n    FROM resource_label_events\n    LEFT JOIN epics\n      ON resource_label_events.epic_id = epics.epic_id\n    LEFT JOIN issues\n      ON resource_label_events.issue_id = issues.issue_id\n    LEFT JOIN mrs\n      ON resource_label_events.merge_request_id = mrs.merge_request_id\n\n)\n\nSELECT *\nFROM joined","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_resource_label_events_xf","label":"gitlab_dotcom_resource_label_events_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_MERGE_REQUESTS_MERGED_AUTHORS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_ID":{"type":"NUMBER","index":1,"name":"project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_id"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":3,"name":"merge_request_iid","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_iid"},"MERGE_REQUEST_TITLE":{"type":"TEXT","index":4,"name":"MERGE_REQUEST_TITLE","comment":null,"display_name":"merge_request_title"},"MERGE_REQUEST_ID":{"type":"NUMBER","index":5,"name":"merge_request_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_id"},"NOTE_AUTHOR_ID":{"type":"NUMBER","index":6,"name":"note_author_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"note_author_id"},"USER_NAME":{"type":"TEXT","index":7,"name":"user_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"user_name"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:39UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":54043136,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_requests_merged_authors_xf","raw_sql":"{{ config(\n    tags=[\"mnpi_exception\"]\n) }}\n\nWITH merge_requests AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_merge_requests_xf') }}\n\n), notes AS (\n\n    SELECT\n      noteable_id,\n      note_author_id,\n      note \n    FROM {{ ref('gitlab_dotcom_notes_xf')}}\n\n), users AS (\n\n    SELECT \n      user_id,\n      user_name\n    FROM {{ ref('gitlab_dotcom_users_xf')}}\n\n), joined_to_mr AS (\n\n    SELECT \n      merge_requests.project_id,\n      merge_requests.namespace_id,\n      merge_requests.merge_request_iid,\n      merge_requests.merge_request_title,\n      merge_requests.merge_request_id,\n      notes.note_author_id,\n      users.user_name\n    FROM merge_requests\n    INNER JOIN notes\n      ON merge_requests.merge_request_id = notes.noteable_id\n    INNER JOIN users\n      ON notes.note_author_id = users.user_id\n    WHERE notes.note = 'merged'\n\n)\n\nSELECT *\nFROM joined_to_mr","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","model.gitlab_snowflake.gitlab_dotcom_notes_xf","model.gitlab_snowflake.gitlab_dotcom_notes_xf","model.gitlab_snowflake.gitlab_dotcom_users_xf","model.gitlab_snowflake.gitlab_dotcom_users_xf"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_merge_requests_merged_authors_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_merged_authors_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_merged_authors_xf.sql","name":"gitlab_dotcom_merge_requests_merged_authors_xf","alias":"gitlab_dotcom_merge_requests_merged_authors_xf","checksum":{"name":"sha256","checksum":"e6837d3593abff9f5703a038b638c28655c4233fb2d2e26eba60d076c0b2c248"},"tags":["product","mnpi_exception"],"refs":[["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_merge_requests_xf"],["gitlab_dotcom_notes_xf"],["gitlab_dotcom_notes_xf"],["gitlab_dotcom_users_xf"],["gitlab_dotcom_users_xf"]],"sources":[],"metrics":[],"description":"This is a dbt model of notes that signify a merge request being merged.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_merged_authors_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033759.3651583,"compiled_sql":"\n\nWITH merge_requests AS (\n\n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_merge_requests_xf\n\n), notes AS (\n\n    SELECT\n      noteable_id,\n      note_author_id,\n      note \n    FROM \"PROD\".legacy.gitlab_dotcom_notes_xf\n\n), users AS (\n\n    SELECT \n      user_id,\n      user_name\n    FROM \"PROD\".legacy.gitlab_dotcom_users_xf\n\n), joined_to_mr AS (\n\n    SELECT \n      merge_requests.project_id,\n      merge_requests.namespace_id,\n      merge_requests.merge_request_iid,\n      merge_requests.merge_request_title,\n      merge_requests.merge_request_id,\n      notes.note_author_id,\n      users.user_name\n    FROM merge_requests\n    INNER JOIN notes\n      ON merge_requests.merge_request_id = notes.noteable_id\n    INNER JOIN users\n      ON notes.note_author_id = users.user_id\n    WHERE notes.note = 'merged'\n\n)\n\nSELECT *\nFROM joined_to_mr","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_merge_requests_merged_authors_xf","label":"gitlab_dotcom_merge_requests_merged_authors_xf"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"merge_request_id","model":"{{ get_where_subquery(ref('gitlab_dotcom_merge_requests_xf')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","not_null_gitlab_dotcom_merge_requests_xf_merge_request_id"],"unique_id":"test.gitlab_snowflake.not_null_gitlab_dotcom_merge_requests_xf_merge_request_id.c64ca9381d","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_gitlab_dotcom_merge_requests_xf_merge_request_id.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/schema.yml","name":"not_null_gitlab_dotcom_merge_requests_xf_merge_request_id","alias":"not_null_gitlab_dotcom_merge_requests_xf_merge_request_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["gitlab_dotcom_merge_requests_xf"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/schema.yml/not_null_gitlab_dotcom_merge_requests_xf_merge_request_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033759.8830643,"compiled_sql":"\n    \n    \n\n\n\nselect merge_request_id\nfrom \"PROD\".legacy.gitlab_dotcom_merge_requests_xf\nwhere merge_request_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"merge_request_id","file_key_name":"models.gitlab_dotcom_merge_requests_xf","label":"not_null_gitlab_dotcom_merge_requests_xf_merge_request_id"}]},"node":{"resource_type":"model","name":"gitlab_dotcom_merge_requests_xf","unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"SENSITIVE","name":"GITLAB_DOTCOM_MILESTONES","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"MILESTONE_ID":{"type":"NUMBER","index":1,"name":"MILESTONE_ID","comment":null,"display_name":"milestone_id"},"MILESTONE_TITLE":{"type":"TEXT","index":2,"name":"MILESTONE_TITLE","comment":null,"display_name":"milestone_title"},"MILESTONE_DESCRIPTION":{"type":"TEXT","index":3,"name":"MILESTONE_DESCRIPTION","comment":null,"display_name":"milestone_description"},"PROJECT_ID":{"type":"NUMBER","index":4,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"GROUP_ID":{"type":"NUMBER","index":5,"name":"GROUP_ID","comment":null,"display_name":"group_id"},"START_DATE":{"type":"DATE","index":6,"name":"START_DATE","comment":null,"display_name":"start_date"},"DUE_DATE":{"type":"DATE","index":7,"name":"DUE_DATE","comment":null,"display_name":"due_date"},"MILESTONE_STATUS":{"type":"TEXT","index":8,"name":"MILESTONE_STATUS","comment":null,"display_name":"milestone_status"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_milestones","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_milestones_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_milestones_source","model.gitlab_snowflake.gitlab_dotcom_milestones_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","sensitive","gitlab_dotcom_milestones"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/sensitive/gitlab_dotcom_milestones.sql","original_file_path":"models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_milestones.sql","name":"gitlab_dotcom_milestones","alias":"gitlab_dotcom_milestones","checksum":{"name":"sha256","checksum":"3c15e03ace314623ae54247a8bd11a9ef1bcaecf098c313863aa7908f0602ad6"},"tags":["product"],"refs":[["gitlab_dotcom_milestones_source"],["gitlab_dotcom_milestones_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_milestones.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033715.287483,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_milestones_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.gitlab_dotcom_milestones","label":"gitlab_dotcom_milestones"},{"metadata":{"type":"VIEW","schema":"SENSITIVE","name":"GITLAB_DOTCOM_MERGE_REQUESTS","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_ID":{"type":"NUMBER","index":1,"name":"MERGE_REQUEST_ID","comment":null,"display_name":"merge_request_id"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":2,"name":"MERGE_REQUEST_IID","comment":null,"display_name":"merge_request_iid"},"MERGE_REQUEST_TITLE":{"type":"TEXT","index":3,"name":"MERGE_REQUEST_TITLE","comment":null,"display_name":"merge_request_title"},"IS_MERGE_TO_MASTER":{"type":"BOOLEAN","index":4,"name":"IS_MERGE_TO_MASTER","comment":null,"display_name":"is_merge_to_master"},"MERGE_ERROR":{"type":"TEXT","index":5,"name":"MERGE_ERROR","comment":null,"display_name":"merge_error"},"ASSIGNEE_ID":{"type":"NUMBER","index":6,"name":"ASSIGNEE_ID","comment":null,"display_name":"assignee_id"},"UPDATED_BY_ID":{"type":"NUMBER","index":7,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"MERGE_USER_ID":{"type":"NUMBER","index":8,"name":"MERGE_USER_ID","comment":null,"display_name":"merge_user_id"},"LAST_EDITED_BY_ID":{"type":"NUMBER","index":9,"name":"LAST_EDITED_BY_ID","comment":null,"display_name":"last_edited_by_id"},"MILESTONE_ID":{"type":"NUMBER","index":10,"name":"MILESTONE_ID","comment":null,"display_name":"milestone_id"},"HEAD_PIPELINE_ID":{"type":"NUMBER","index":11,"name":"HEAD_PIPELINE_ID","comment":null,"display_name":"head_pipeline_id"},"LATEST_MERGE_REQUEST_DIFF_ID":{"type":"NUMBER","index":12,"name":"LATEST_MERGE_REQUEST_DIFF_ID","comment":null,"display_name":"latest_merge_request_diff_id"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":13,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"LOCK_VERSION":{"type":"NUMBER","index":14,"name":"LOCK_VERSION","comment":null,"display_name":"lock_version"},"TIME_ESTIMATE":{"type":"NUMBER","index":15,"name":"TIME_ESTIMATE","comment":null,"display_name":"time_estimate"},"PROJECT_ID":{"type":"NUMBER","index":16,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"TARGET_PROJECT_ID":{"type":"NUMBER","index":17,"name":"TARGET_PROJECT_ID","comment":null,"display_name":"target_project_id"},"AUTHOR_ID":{"type":"NUMBER","index":18,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"MERGE_REQUEST_STATE_ID":{"type":"NUMBER","index":19,"name":"MERGE_REQUEST_STATE_ID","comment":null,"display_name":"merge_request_state_id"},"MERGE_REQUEST_STATE":{"type":"TEXT","index":20,"name":"MERGE_REQUEST_STATE","comment":null,"display_name":"merge_request_state"},"MERGE_REQUEST_STATUS":{"type":"TEXT","index":21,"name":"MERGE_REQUEST_STATUS","comment":null,"display_name":"merge_request_status"},"DOES_MERGE_WHEN_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":22,"name":"DOES_MERGE_WHEN_PIPELINE_SUCCEEDS","comment":null,"display_name":"does_merge_when_pipeline_succeeds"},"DOES_SQUASH":{"type":"BOOLEAN","index":23,"name":"DOES_SQUASH","comment":null,"display_name":"does_squash"},"IS_DISCUSSION_LOCKED":{"type":"BOOLEAN","index":24,"name":"IS_DISCUSSION_LOCKED","comment":null,"display_name":"is_discussion_locked"},"DOES_ALLOW_MAINTAINER_TO_PUSH":{"type":"BOOLEAN","index":25,"name":"DOES_ALLOW_MAINTAINER_TO_PUSH","comment":null,"display_name":"does_allow_maintainer_to_push"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":27,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"MERGE_REQUEST_LAST_EDITED_AT":{"type":"TIMESTAMP_NTZ","index":28,"name":"MERGE_REQUEST_LAST_EDITED_AT","comment":null,"display_name":"merge_request_last_edited_at"},"MERGE_REQUEST_DESCRIPTION":{"type":"TEXT","index":29,"name":"MERGE_REQUEST_DESCRIPTION","comment":null,"display_name":"merge_request_description"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_requests","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_merge_requests_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_merge_requests_source","model.gitlab_snowflake.gitlab_dotcom_merge_requests_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","sensitive","gitlab_dotcom_merge_requests"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/sensitive/gitlab_dotcom_merge_requests.sql","original_file_path":"models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_merge_requests.sql","name":"gitlab_dotcom_merge_requests","alias":"gitlab_dotcom_merge_requests","checksum":{"name":"sha256","checksum":"f1f782f7800cc9c592ff9685978006560f289f273e01f8fb451b298e66792d59"},"tags":["product"],"refs":[["gitlab_dotcom_merge_requests_source"],["gitlab_dotcom_merge_requests_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_merge_requests.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033715.392072,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_merge_requests_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.gitlab_dotcom_merge_requests","label":"gitlab_dotcom_merge_requests"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_USERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"role_id","comment":null,"description":"This is the integer representation of a user's role, as it's stored in the database.","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 99"}],"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"role","comment":null,"description":"This is the string translation of the \"role\" column stored as an integer in the source database. It is converted using the `user_role_mapping` macro.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_source","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.user_role_mapping","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_users_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","name":"gitlab_dotcom_users_source","alias":"gitlab_dotcom_users_source","checksum":{"name":"sha256","checksum":"d544057bc6881cafe8a9b9ae7e63e13e9a9a247622c8e2cd0f8f04b45698f970"},"tags":["sources"],"refs":[["gitlab_dotcom_users_dedupe_source"],["gitlab_dotcom_users_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com users, the following fields are hidden for privacy `current_sign_in_ip`, `last_sign_in_ip`, `unconfirmed_email`, `website_url`, `notification_email`, `public_email`, `note`, `organization`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.402963,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_users_source","label":"gitlab_dotcom_users_source"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_PROJECTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_ID":{"type":"NUMBER","index":1,"name":"project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"project_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"PROJECT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"PROJECT_CREATED_AT","comment":null,"display_name":"project_created_at"},"PROJECT_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"PROJECT_UPDATED_AT","comment":null,"display_name":"project_updated_at"},"CREATOR_ID":{"type":"NUMBER","index":5,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":8,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"ARCHIVED":{"type":"BOOLEAN","index":9,"name":"ARCHIVED","comment":null,"display_name":"archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":10,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":11,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":12,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":13,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":14,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":15,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":16,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":17,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":18,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":19,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":20,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":21,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":22,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":23,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":24,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":25,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":27,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":28,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":29,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":30,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":31,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":32,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":33,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":34,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":35,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":36,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":37,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":38,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":39,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":40,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":41,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":42,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":43,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":44,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":45,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":46,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":47,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":48,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":49,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"IS_LEARN_GITLAB":{"type":"BOOLEAN","index":50,"name":"IS_LEARN_GITLAB","comment":null,"display_name":"is_learn_gitlab"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":51,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":52,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":53,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":54,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":55,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":56,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":57,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":58,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"NAMESPACE_NAME":{"type":"TEXT","index":59,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":60,"name":"NAMESPACE_PATH","comment":null,"display_name":"namespace_path"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":61,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"NAMESPACE_PLAN_ID":{"type":"NUMBER","index":62,"name":"NAMESPACE_PLAN_ID","comment":null,"display_name":"namespace_plan_id"},"NAMESPACE_PLAN_TITLE":{"type":"TEXT","index":63,"name":"NAMESPACE_PLAN_TITLE","comment":null,"display_name":"namespace_plan_title"},"NAMESPACE_PLAN_IS_PAID":{"type":"BOOLEAN","index":64,"name":"namespace_plan_is_paid","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_is_paid"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":65,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":66,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":67,"name":"ULTIMATE_PARENT_PLAN_TITLE","comment":null,"display_name":"ultimate_parent_plan_title"},"ULTIMATE_PARENT_PLAN_IS_PAID":{"type":"BOOLEAN","index":68,"name":"ULTIMATE_PARENT_PLAN_IS_PAID","comment":null,"display_name":"ultimate_parent_plan_is_paid"},"PLAN_ID_AT_PROJECT_CREATION":{"type":"TEXT","index":69,"name":"PLAN_ID_AT_PROJECT_CREATION","comment":null,"display_name":"plan_id_at_project_creation"},"PROJECT_TEMPLATE":{"type":"TEXT","index":70,"name":"PROJECT_TEMPLATE","comment":null,"display_name":"project_template"},"ACTIVE_SERVICE_TYPES":{"type":"ARRAY","index":71,"name":"active_service_types","comment":null,"description":"The types of services currently active and associated with the project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"active_service_types"},"MEMBER_COUNT":{"type":"NUMBER","index":72,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"},"namespace_plan_id_at_project_creation":{"name":"namespace_plan_id_at_project_creation","description":"This column represents the gitlab_subscription plan_id (2, 3, 4, 34 or 'trial') of the namespace at the time that the object (issue, project, merge request) was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_id_at_project_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":3024472576,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_projects_xf","raw_sql":"$1f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_integrations","model.gitlab_snowflake.gitlab_dotcom_integrations"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_projects_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_projects_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_projects_xf.sql","name":"gitlab_dotcom_projects_xf","alias":"gitlab_dotcom_projects_xf","checksum":{"name":"sha256","checksum":"b9349af7b355d7efdaef3c5165139e20d92798c5753283034d4e2c53750ed51c"},"tags":["product"],"refs":[["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_members"],["gitlab_dotcom_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_integrations"],["gitlab_dotcom_integrations"]],"sources":[],"metrics":[],"description":"Includes all columns from the projects base model.\nAdds the count of members associated with the project.\nAdds a boolean column, `namespaces_plan_is_paid`, to provide extra context.\nAdds additional information about the associated namespace (name and path).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_projects_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3915958,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_projects_xf","label":"gitlab_dotcom_projects_xf"},{"metadata":{"type":"VIEW","schema":"LEGACY","name":"GITLAB_DOTCOM_MERGE_REQUEST_METRICS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_METRIC_ID":{"type":"NUMBER","index":1,"name":"MERGE_REQUEST_METRIC_ID","comment":null,"display_name":"merge_request_metric_id"},"MERGE_REQUEST_ID":{"type":"NUMBER","index":2,"name":"MERGE_REQUEST_ID","comment":null,"display_name":"merge_request_id"},"LATEST_BUILD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"LATEST_BUILD_STARTED_AT","comment":null,"display_name":"latest_build_started_at"},"LATEST_BUILD_FINISHED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"LATEST_BUILD_FINISHED_AT","comment":null,"display_name":"latest_build_finished_at"},"FIRST_DEPLOYED_TO_PRODUCTION_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"FIRST_DEPLOYED_TO_PRODUCTION_AT","comment":null,"display_name":"first_deployed_to_production_at"},"MERGED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"MERGED_AT","comment":null,"display_name":"merged_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"LATEST_CLOSED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"LATEST_CLOSED_AT","comment":null,"display_name":"latest_closed_at"},"FIRST_COMMENT_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"FIRST_COMMENT_AT","comment":null,"display_name":"first_comment_at"},"FIRST_COMMIT_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"FIRST_COMMIT_AT","comment":null,"display_name":"first_commit_at"},"LAST_COMMIT_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"LAST_COMMIT_AT","comment":null,"display_name":"last_commit_at"},"FIRST_APPROVED_AT":{"type":"TIMESTAMP_NTZ","index":13,"name":"FIRST_APPROVED_AT","comment":null,"display_name":"first_approved_at"},"FIRST_REASSIGNED_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"FIRST_REASSIGNED_AT","comment":null,"display_name":"first_reassigned_at"},"PIPELINE_ID":{"type":"NUMBER","index":15,"name":"PIPELINE_ID","comment":null,"display_name":"pipeline_id"},"MERGED_BY_ID":{"type":"NUMBER","index":16,"name":"MERGED_BY_ID","comment":null,"display_name":"merged_by_id"},"LATEST_CLOSED_BY_ID":{"type":"NUMBER","index":17,"name":"LATEST_CLOSED_BY_ID","comment":null,"display_name":"latest_closed_by_id"},"DIFF_SIZE":{"type":"NUMBER","index":18,"name":"DIFF_SIZE","comment":null,"display_name":"diff_size"},"MODIFIED_PATHS_SIZE":{"type":"NUMBER","index":19,"name":"MODIFIED_PATHS_SIZE","comment":null,"display_name":"modified_paths_size"},"COMMITS_COUNT":{"type":"NUMBER","index":20,"name":"COMMITS_COUNT","comment":null,"display_name":"commits_count"},"ADDED_LINES":{"type":"NUMBER","index":21,"name":"ADDED_LINES","comment":null,"display_name":"added_lines"},"REMOVED_LINES":{"type":"NUMBER","index":22,"name":"REMOVED_LINES","comment":null,"display_name":"removed_lines"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_merge_request_metrics_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics_source","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","source_view","gitlab_dotcom_merge_request_metrics"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/source_view/gitlab_dotcom_merge_request_metrics.sql","original_file_path":"models/legacy/gitlab_dotcom/source_view/gitlab_dotcom_merge_request_metrics.sql","name":"gitlab_dotcom_merge_request_metrics","alias":"gitlab_dotcom_merge_request_metrics","checksum":{"name":"sha256","checksum":"4dba0e49b5a6669f0cd76ab8482add4914bf539dbf8d62eec9f2e69dc73519a0"},"tags":["product"],"refs":[["gitlab_dotcom_merge_request_metrics_source"],["gitlab_dotcom_merge_request_metrics_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/source_view/gitlab_dotcom_merge_request_metrics.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033714.836232,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_merge_request_metrics_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_merge_request_metrics","label":"gitlab_dotcom_merge_request_metrics"},{"metadata":{"type":"VIEW","schema":"LEGACY","name":"GITLAB_DOTCOM_LABEL_LINKS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"LABEL_LINK_ID":{"type":"NUMBER","index":1,"name":"LABEL_LINK_ID","comment":null,"display_name":"label_link_id"},"LABEL_ID":{"type":"NUMBER","index":2,"name":"LABEL_ID","comment":null,"display_name":"label_id"},"TARGET_ID":{"type":"NUMBER","index":3,"name":"TARGET_ID","comment":null,"display_name":"target_id"},"TARGET_TYPE":{"type":"TEXT","index":4,"name":"TARGET_TYPE","comment":null,"display_name":"target_type"},"LABEL_LINK_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LABEL_LINK_CREATED_AT","comment":null,"display_name":"label_link_created_at"},"LABEL_LINK_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"LABEL_LINK_UPDATED_AT","comment":null,"display_name":"label_link_updated_at"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":7,"name":"VALID_FROM","comment":null,"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":8,"name":"VALID_TO","comment":null,"display_name":"valid_to"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":9,"name":"IS_CURRENTLY_VALID","comment":null,"display_name":"is_currently_valid"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_label_links","raw_sql":"{{ config({\n    \"schema\": \"legacy\"\n    })\n}}\n\nWITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_label_links_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_label_links_source","model.gitlab_snowflake.gitlab_dotcom_label_links_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","source_view","gitlab_dotcom_label_links"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/source_view/gitlab_dotcom_label_links.sql","original_file_path":"models/legacy/gitlab_dotcom/source_view/gitlab_dotcom_label_links.sql","name":"gitlab_dotcom_label_links","alias":"gitlab_dotcom_label_links","checksum":{"name":"sha256","checksum":"ba8c16cb0196ca9a561b4a18298d7541ef720f2f4de66581f1514dd4245472d9"},"tags":["product"],"refs":[["gitlab_dotcom_label_links_source"],["gitlab_dotcom_label_links_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/source_view/gitlab_dotcom_label_links.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033714.8864233,"compiled_sql":"\n\nWITH source AS (\n\n    SELECT *\n    FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_label_links_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_label_links","label":"gitlab_dotcom_label_links"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_GITLAB_SUBSCRIPTIONS_SNAPSHOTS_NAMESPACE_ID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"GITLAB_SUBSCRIPTION_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"GITLAB_SUBSCRIPTION_SNAPSHOT_ID","comment":null,"display_name":"gitlab_subscription_snapshot_id"},"GITLAB_SUBSCRIPTION_ID":{"type":"NUMBER","index":2,"name":"GITLAB_SUBSCRIPTION_ID","comment":null,"display_name":"gitlab_subscription_id"},"GITLAB_SUBSCRIPTION_START_DATE":{"type":"DATE","index":3,"name":"GITLAB_SUBSCRIPTION_START_DATE","comment":null,"display_name":"gitlab_subscription_start_date"},"GITLAB_SUBSCRIPTION_END_DATE":{"type":"DATE","index":4,"name":"GITLAB_SUBSCRIPTION_END_DATE","comment":null,"display_name":"gitlab_subscription_end_date"},"GITLAB_SUBSCRIPTION_TRIAL_ENDS_ON":{"type":"DATE","index":5,"name":"GITLAB_SUBSCRIPTION_TRIAL_ENDS_ON","comment":null,"display_name":"gitlab_subscription_trial_ends_on"},"NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PLAN_ID":{"type":"NUMBER","index":7,"name":"PLAN_ID","comment":null,"display_name":"plan_id"},"MAX_SEATS_USED":{"type":"NUMBER","index":8,"name":"MAX_SEATS_USED","comment":null,"display_name":"max_seats_used"},"SEATS":{"type":"NUMBER","index":9,"name":"SEATS","comment":null,"display_name":"seats"},"IS_TRIAL":{"type":"BOOLEAN","index":10,"name":"IS_TRIAL","comment":null,"display_name":"is_trial"},"GITLAB_SUBSCRIPTION_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"GITLAB_SUBSCRIPTION_CREATED_AT","comment":null,"display_name":"gitlab_subscription_created_at"},"GITLAB_SUBSCRIPTION_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"GITLAB_SUBSCRIPTION_UPDATED_AT","comment":null,"display_name":"gitlab_subscription_updated_at"},"SEATS_IN_USE":{"type":"NUMBER","index":13,"name":"SEATS_IN_USE","comment":null,"display_name":"seats_in_use"},"SEATS_OWED":{"type":"NUMBER","index":14,"name":"SEATS_OWED","comment":null,"display_name":"seats_owed"},"TRIAL_EXTENSION_TYPE":{"type":"NUMBER","index":15,"name":"TRIAL_EXTENSION_TYPE","comment":null,"display_name":"trial_extension_type"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":16,"name":"VALID_FROM","comment":null,"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":17,"name":"VALID_TO","comment":null,"display_name":"valid_to"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 07:25UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":751253504,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","raw_sql":"$21","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.snapshots.gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots"]},"config":{"enabled":true,"alias":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id","schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","snapshots","base","gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/snapshots/base/gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base.sql","original_file_path":"models/legacy/snapshots/base/gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base.sql","name":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","alias":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id","checksum":{"name":"sha256","checksum":"8544ae90a543f6820955ee3b6cbe0f5674525fdb44c33759d8b35c2341a17976"},"tags":[],"refs":[],"sources":[["snapshots","gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots"]],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/snapshots/base/gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id"},"created_at":1689033719.3482537,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id","label":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_LABELS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"LABEL_ID":{"type":"NUMBER","index":1,"name":"label_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"label_id"},"MASKED_LABEL_TITLE":{"type":"TEXT","index":2,"name":"masked_label_title","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"masked_label_title"},"TITLE_LENGTH":{"type":"NUMBER","index":3,"name":"TITLE_LENGTH","comment":null,"display_name":"title_length"},"COLOR":{"type":"TEXT","index":4,"name":"COLOR","comment":null,"display_name":"color"},"PROJECT_ID":{"type":"NUMBER","index":5,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"GROUP_ID":{"type":"NUMBER","index":6,"name":"GROUP_ID","comment":null,"display_name":"group_id"},"TEMPLATE":{"type":"BOOLEAN","index":7,"name":"TEMPLATE","comment":null,"display_name":"template"},"LABEL_TYPE":{"type":"TEXT","index":8,"name":"LABEL_TYPE","comment":null,"display_name":"label_type"},"LABEL_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"LABEL_CREATED_AT","comment":null,"display_name":"label_created_at"},"LABEL_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"LABEL_UPDATED_AT","comment":null,"display_name":"label_updated_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:21UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":671845888,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_labels_xf","raw_sql":"with labels AS (\n\n  SELECT *\n  FROM {{ ref('gitlab_dotcom_labels') }}\n\n), projects AS (\n\n  SELECT \n    project_id,\n    visibility_level,\n    namespace_id\n  FROM {{ ref('gitlab_dotcom_projects') }}\n\n), internal_namespaces AS (\n\n    SELECT\n      namespace_id\n    FROM {{ref('gitlab_dotcom_namespace_lineage')}}\n    WHERE namespace_is_internal\n\n), joined AS (\n\n    SELECT\n      label_id,\n\n    CASE\n      WHEN projects.visibility_level != 'public' AND namespace_id NOT IN (SELECT * FROM internal_namespaces) THEN 'content masked'\n      ELSE label_title\n    END                                          AS masked_label_title,\n\n    LENGTH(label_title)                          AS title_length,\n    color,\n    labels.project_id,\n    group_id,\n    template,\n    label_type,\n    created_at                                   AS label_created_at,\n    updated_at                                   AS label_updated_at\n\n    FROM labels\n      LEFT JOIN projects\n        ON labels.project_id = projects.project_id\n\n)\n\nSELECT *\nFROM joined","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_labels","model.gitlab_snowflake.gitlab_dotcom_labels","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_labels_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_labels_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_labels_xf.sql","name":"gitlab_dotcom_labels_xf","alias":"gitlab_dotcom_labels_xf","checksum":{"name":"sha256","checksum":"1f317eba3d6a5886fc26170270d908a27e9f1115c3cebf79a1494d112a071fe5"},"tags":["product"],"refs":[["gitlab_dotcom_labels"],["gitlab_dotcom_labels"],["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"]],"sources":[],"metrics":[],"description":"Masks the label description based on privacy of the project that it is on.\n\nA CTE will find projects that don't have visibility set to public and then joined to the labels in order to build a CASE statement to mask the content.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_labels_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.344891,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_labels_xf","label":"gitlab_dotcom_labels_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_NAMESPACES_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":2,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":3,"name":"namespace_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":4,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":5,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":6,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"NAMESPACE_UPDATED_AT","comment":null,"display_name":"namespace_updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":9,"name":"IS_MEMBERSHIP_LOCKED","comment":null,"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":10,"name":"HAS_REQUEST_ACCESS_ENABLED","comment":null,"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":11,"name":"HAS_SHARE_WITH_GROUP_LOCKED","comment":null,"display_name":"has_share_with_group_locked"},"VISIBILITY_LEVEL":{"type":"TEXT","index":12,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":13,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":14,"name":"LDAP_SYNC_ERROR","comment":null,"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LDAP_SYNC_LAST_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"LDAP_SYNC_LAST_SYNC_AT","comment":null,"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":18,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":19,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"VARIANT","index":20,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":21,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":22,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":23,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":24,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION","comment":null,"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":25,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":26,"name":"PROJECT_CREATION_LEVEL","comment":null,"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":27,"name":"PUSH_RULE_ID","comment":null,"display_name":"push_rule_id"},"CREATOR_ID":{"type":"NUMBER","index":28,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":29,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"NAMESPACE_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":30,"name":"NAMESPACE_ULTIMATE_PARENT_ID","comment":null,"display_name":"namespace_ultimate_parent_id"},"PLAN_ID":{"type":"NUMBER","index":31,"name":"plan_id","comment":null,"description":"The **plan_id** associated with the namespace's subscription. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_id"},"PLAN_TITLE":{"type":"TEXT","index":32,"name":"plan_title","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_title"},"PLAN_IS_PAID":{"type":"BOOLEAN","index":33,"name":"plan_is_paid","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_is_paid"},"MEMBER_COUNT":{"type":"NUMBER","index":34,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"},"PROJECT_COUNT":{"type":"NUMBER","index":35,"name":"project_count","comment":null,"description":"The number of projects that are presently associated with the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2367414272,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","raw_sql":"$24","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.gitlab_dotcom_audit_events","model.gitlab_snowflake.gitlab_dotcom_audit_events"]},"config":{"enabled":true,"alias":"gitlab_dotcom_namespaces_xf","schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_namespaces_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_namespaces_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespaces_xf.sql","name":"gitlab_dotcom_namespaces_xf","alias":"gitlab_dotcom_namespaces_xf","checksum":{"name":"sha256","checksum":"9e833e9810ae8536931be8fb89a4c88a59905f227bddc105bbdb0e93d9d29e1a"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_members"],["gitlab_dotcom_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"],["prep_audit_event_details_clean"],["prep_audit_event_details_clean"],["gitlab_dotcom_audit_events"],["gitlab_dotcom_audit_events"]],"sources":[],"metrics":[],"description":"Includes all columns from the namespaces base model.  \nThe plan columns here (plan_id, plan_title, plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\nAdds the count of members and projects associated with the namespace.  \nAlso adds boolean column `namespaces_plan_is_paid` to provide extra context.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespaces_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"],"alias":"gitlab_dotcom_namespaces_xf"},"created_at":1689033759.3823533,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_namespaces_xf","label":"gitlab_dotcom_namespaces_xf"}],"seed":[{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"ENGINEERING_PRODUCTIVITY_METRICS_PROJECTS_TO_INCLUDE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_PATH":{"type":"TEXT","index":1,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_ID":{"type":"NUMBER","index":2,"name":"PROJECT_ID","comment":null,"display_name":"project_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 17:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":3584,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","raw_sql":"","compiled":true,"resource_type":"seed","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":[]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"seed","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"quote_columns":false,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","engineering_productivity_metrics_projects_to_include"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"engineering_productivity_metrics_projects_to_include.csv","original_file_path":"data/engineering_productivity_metrics_projects_to_include.csv","name":"engineering_productivity_metrics_projects_to_include","alias":"engineering_productivity_metrics_projects_to_include","checksum":{"name":"sha256","checksum":"c36958c7ef332e86b0916a7c6b60fca3cf62b8c9f2304ea52821487e8e72a9c7"},"tags":[],"refs":[],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":null,"build_path":null,"deferred":false,"unrendered_config":{"enabled":true,"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","quote_columns":false,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt"},"created_at":1689033725.4208872,"compiled_sql":"","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.engineering_productivity_metrics_projects_to_include","label":"engineering_productivity_metrics_projects_to_include"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"PROJECTS_PART_OF_PRODUCT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_PATH":{"type":"TEXT","index":1,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_ID":{"type":"NUMBER","index":2,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"OWNER":{"type":"TEXT","index":3,"name":"OWNER","comment":null,"display_name":"owner"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 17:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":7168,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"seed.gitlab_snowflake.projects_part_of_product","raw_sql":"","compiled":true,"resource_type":"seed","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":[]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"seed","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"quote_columns":false,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","projects_part_of_product"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"projects_part_of_product.csv","original_file_path":"data/projects_part_of_product.csv","name":"projects_part_of_product","alias":"projects_part_of_product","checksum":{"name":"sha256","checksum":"c8725e2d8d2819c83edd8dae7cfb1be6e511ea5bcdf8d7d83860fd3fad33c229"},"tags":[],"refs":[],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":null,"build_path":null,"deferred":false,"unrendered_config":{"enabled":true,"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","quote_columns":false,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt"},"created_at":1689033725.5945444,"compiled_sql":"","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.projects_part_of_product","label":"projects_part_of_product"}],"macro":[{"unique_id":"macro.gitlab_snowflake.is_project_part_of_product","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/engineering/is_project_part_of_product.sql","original_file_path":"macros/engineering/is_project_part_of_product.sql","name":"is_project_part_of_product","macro_sql":"{% macro is_project_part_of_product() %}\n\n    {%- call statement('get_project_ids', fetch_result=True) %}\n\n        SELECT DISTINCT project_id\n        FROM {{ref('projects_part_of_product')}}\n        WHERE project_id IS NOT NULL\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_project_ids') -%}\n\n    {%- if value_list and value_list['data'] -%}\n      {%- set values = value_list['data'] | map(attribute=0) | join(', ') %}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n {% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.statement"]},"description":"This macro pulls all the engineering projects that are part of the product from\nthe seeded csv and adds a boolean in the model that can be used to filter on it.\nThis macro applies to data from GitLab.com database.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/engineering/macros.yml","arguments":[],"created_at":1689033765.9084244},{"unique_id":"macro.gitlab_snowflake.is_project_included_in_engineering_metrics","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/engineering/is_project_included_in_engineering_metrics.sql","original_file_path":"macros/engineering/is_project_included_in_engineering_metrics.sql","name":"is_project_included_in_engineering_metrics","macro_sql":"{% macro is_project_included_in_engineering_metrics() %}\n\n    {%- call statement('get_project_ids', fetch_result=True) %}\n\n        SELECT distinct project_id\n        FROM {{ref('engineering_productivity_metrics_projects_to_include')}}\n        WHERE project_id IS NOT NULL\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_project_ids') -%}\n\n    {%- if value_list and value_list['data'] -%}\n      {%- set values = value_list['data'] | map(attribute=0) | join(', ') %}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n {% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.statement"]},"description":"This macro pulls all the engineering projects to be included from the seeded csv and adds a boolean in the model that can be used to filter on it.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/engineering/macros.yml","arguments":[],"created_at":1689033765.909773},{"unique_id":"macro.gitlab_snowflake.filter_out_blocked_users","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/gitlab_dotcom/filter_out_blocked_users.sql","original_file_path":"macros/gitlab_dotcom/filter_out_blocked_users.sql","name":"filter_out_blocked_users","macro_sql":"{%- macro filter_out_blocked_users(table_to_filter, user_id_column_name) -%}\n\n    NOT EXISTS (\n\n        SELECT 1\n        FROM {{ ref('gitlab_dotcom_users_source') }} users_source\n        WHERE users_source.state = 'blocked' \n          AND users_source.user_id = {{table_to_filter}}.{{user_id_column_name}}\n\n    )\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro takes in the name of the table and column that contain GitLab user ids. This macro creates the SQL filter for filtering out users blocked by GitLab.\n\nThe SQL filter returned does not include a `WHERE`, `AND`, or `OR` so it can flexibly be used as any part of the `WHERE` clause.  For example, to filter out blocked users from a table named `users` with a column named `user_id`, the dbt model would look like\n\n```\n\nSELECT *\nFROM users\nWHERE {{ filter_out_blocked_users('users', 'user_id') }}\n\n```\n\nThis macro should be used downstream of source models, in models where activities of blocked users may introduce noise to metrics.  For example, this macro is used in `gitlab_dotcom_usage_data_events` to only keep events generated from legitimate use.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/gitlab_dotcom/macros.yml","arguments":[],"created_at":1689033765.9894016},{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.coalesce_to_infinity","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/coalesce_to_infinity.sql","original_file_path":"macros/utils/coalesce_to_infinity.sql","name":"coalesce_to_infinity","macro_sql":"{%- macro coalesce_to_infinity(value) -%}\n\n  COALESCE( {{ value }}, '9999-12-31'::TIMESTAMP)\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro expects a timestamp or date column as an input. If a non-null value is inputted, the same value is returned. If a null value is inputted, a large date representing 'infinity' is returned. This is useful for writing `BETWEEN` clauses using date columns that are sometimes NULL.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[],"created_at":1689033766.02736},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527},{"unique_id":"macro.dbt_utils.star","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","name":"star","macro_sql":"{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__star"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033675.9787252}]},"node":{"resource_type":"model","name":"gitlab_dotcom_merge_requests_xf","unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L26",null,{"versions":{"Source":"$27","Compiled":"$28"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
