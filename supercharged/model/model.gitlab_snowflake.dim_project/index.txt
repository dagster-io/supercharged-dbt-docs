1:HL["/supercharged-dbt-docs/supercharged/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css",{"as":"style"}]
0:["3_N3LAWgtmWGg2et9V1N1",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.dim_project","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.dim_project\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/supercharged-dbt-docs/supercharged/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_5f725a","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.dim_project","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.dim_project\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.dim_project","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ReferenceListClient","async":false}
41:I{"id":4431,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T890,WITH prep_project AS (

    SELECT 
      dim_project_id,
      dim_namespace_id,
      ultimate_parent_namespace_id,
      dim_user_id_creator,
      dim_date_id,

      -- plan/product tier metadata at creation
      dim_product_tier_id_at_creation,
      -- projects metadata
      created_at,
      updated_at,
      last_activity_at,
      visibility_level,
      is_archived,
      has_avatar,
      project_star_count,
      merge_requests_rebase_enabled,
      import_type,
      is_imported,
      approvals_before_merge,
      reset_approvals_on_push,
      merge_requests_ff_only_enabled,
      mirror,
      mirror_user_id,
      shared_runners_enabled,
      build_allow_git_fetch,
      build_timeout,
      mirror_trigger_builds,
      pending_delete,
      public_builds,
      last_repository_check_failed,
      last_repository_check_at,
      container_registry_enabled,
      only_allow_merge_if_pipeline_succeeds,
      has_external_issue_tracker,
      repository_storage,
      repository_read_only,
      request_access_enabled,
      has_external_wiki,
      ci_config_path,
      lfs_enabled,
      only_allow_merge_if_all_discussions_are_resolved,
      repository_size_limit,
      printing_merge_request_link_enabled,
      has_auto_canceling_pending_pipelines,
      service_desk_enabled,
      delete_error,
      last_repository_updated_at,
      storage_version,
      resolve_outdated_diff_discussions,
      disable_overriding_approvers_per_merge_request,
      remote_mirror_available_overridden,
      only_mirror_protected_branches,
      pull_mirror_available_overridden,
      mirror_overwrites_diverged_branches,
      namespace_is_internal,
      project_description, 
      project_import_source,
      project_issues_template,
      project_build_coverage_regex,
      project_name,
      project_path,
      project_import_url,
      project_merge_requests_template,
      active_service_types_array,
      is_learn_gitlab,
      member_count
    FROM {{ ref('prep_project') }}

)

{{ dbt_audit(
    cte_ref="prep_project",
    created_by="@mpeychet_",
    updated_by="@mpeychet_",
    created_date="2021-05-19",
    updated_date="2021-05-19"
) }}11:T987,WITH prep_project AS (

    SELECT 
      dim_project_id,
      dim_namespace_id,
      ultimate_parent_namespace_id,
      dim_user_id_creator,
      dim_date_id,

      -- plan/product tier metadata at creation
      dim_product_tier_id_at_creation,
      -- projects metadata
      created_at,
      updated_at,
      last_activity_at,
      visibility_level,
      is_archived,
      has_avatar,
      project_star_count,
      merge_requests_rebase_enabled,
      import_type,
      is_imported,
      approvals_before_merge,
      reset_approvals_on_push,
      merge_requests_ff_only_enabled,
      mirror,
      mirror_user_id,
      shared_runners_enabled,
      build_allow_git_fetch,
      build_timeout,
      mirror_trigger_builds,
      pending_delete,
      public_builds,
      last_repository_check_failed,
      last_repository_check_at,
      container_registry_enabled,
      only_allow_merge_if_pipeline_succeeds,
      has_external_issue_tracker,
      repository_storage,
      repository_read_only,
      request_access_enabled,
      has_external_wiki,
      ci_config_path,
      lfs_enabled,
      only_allow_merge_if_all_discussions_are_resolved,
      repository_size_limit,
      printing_merge_request_link_enabled,
      has_auto_canceling_pending_pipelines,
      service_desk_enabled,
      delete_error,
      last_repository_updated_at,
      storage_version,
      resolve_outdated_diff_discussions,
      disable_overriding_approvers_per_merge_request,
      remote_mirror_available_overridden,
      only_mirror_protected_branches,
      pull_mirror_available_overridden,
      mirror_overwrites_diverged_branches,
      namespace_is_internal,
      project_description, 
      project_import_source,
      project_issues_template,
      project_build_coverage_regex,
      project_name,
      project_path,
      project_import_url,
      project_merge_requests_template,
      active_service_types_array,
      is_learn_gitlab,
      member_count
    FROM "PROD".common_prep.prep_project

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@mpeychet_'::VARCHAR       AS updated_by,
      '2021-05-19'::DATE        AS model_created_date,
      '2021-05-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM prep_project13:T6d08,{{ config(
    tags=["product"]
) }}

{% set year_value = var('year', (run_started_at - modules.datetime.timedelta(2)).strftime('%Y')) %}
{% set month_value = var('month', (run_started_at - modules.datetime.timedelta(2)).strftime('%m')) %}
   

{%- set event_ctes = [
  {
    "event_name": "action",
    "source_cte_name": "prep_action",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "manage"
  },
  {
    "event_name": "dast_build_run",
    "source_cte_name": "dast_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "dependency_scanning_build_run",
    "source_cte_name": "dependency_scanning_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "deployment_creation",
    "source_cte_name": "prep_deployment",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_deployment_id",
    "stage_name": "release"
  },
  {
    "event_name": "epic_creation",
    "source_cte_name": "prep_epic",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "NULL",
    "primary_key": "dim_epic_id",
    "stage_name": "plan"
  },
  {
    "event_name": "issue_creation_other",
    "source_cte_name": "issue_creation_other_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_issue_id",
    "stage_name": "plan"
  },
  {
    "event_name": "issue_note_creation",
    "source_cte_name": "issue_note",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_note_id",
    "stage_name": "plan"
  },
  {
    "event_name": "license_scanning_build_run",
    "source_cte_name": "license_scanning_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "merge_request_creation",
    "source_cte_name": "prep_merge_request",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_merge_request_id",
    "stage_name": "create"
  },
  {
    "event_name": "merge_request_note_creation",
    "source_cte_name": "merge_request_note",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_note_id",
    "stage_name": "create"
  },
  {
    "event_name": "ci_pipeline_creation",
    "source_cte_name": "prep_ci_pipeline",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_pipeline_id",
    "stage_name": "verify"
  },
  {
    "event_name": "package_creation",
    "source_cte_name": "prep_package",
    "user_column_name": "creator_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_package_id",
    "stage_name": "package"
  },
  {
    "event_name": "container_scanning_build_run",
    "source_cte_name": "protect_ci_build",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "protect"
  },
  {
    "event_name": "push_action",
    "source_cte_name": "push_actions",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "release_creation",
    "source_cte_name": "prep_release",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_release_id",
    "stage_name": "release"
  },
  {
    "event_name": "requirement_creation",
    "source_cte_name": "prep_requirement",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_requirement_id",
    "stage_name": "plan"
  },
  {
    "event_name": "sast_build_run",
    "source_cte_name": "sast_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "secret_detection_build_run",
    "source_cte_name": "secret_detection_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "other_ci_build_creation",
    "source_cte_name": "other_ci_build",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "verify"
  },
  {
    "event_name": "successful_ci_pipeline_creation",
    "source_cte_name": "successful_ci_pipelines",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_pipeline_id",
    "stage_name": "verify"
  },
  {
    "event_name": "action_monthly_active_users_project_repo",
    "source_cte_name": "monthly_active_users_project_repo",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "ci_stages",
    "source_cte_name": "prep_ci_stage",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_stage_id",
    "stage_name": "configure"
  },
  {
    "event_name": "notes_other",
    "source_cte_name": "other_notes_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_note_id",
    "stage_name": "plan"
  },
  {
    "event_name": "todos",
    "source_cte_name": "prep_todo",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_todo_id",
    "stage_name": "plan"
  },
  {
    "event_name": "issue_resource_label_events",
    "source_cte_name": "issue_resource_label_events",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_issue_label_id",
    "stage_name": "plan"
  },
  {
    "event_name": "environments",
    "source_cte_name": "prep_environment_event",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_environment_id",
    "stage_name": "release"
  },
  {
    "event_name": "issue_resource_milestone_events",
    "source_cte_name": "issue_resource_milestone",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_resource_milestone_id",
    "stage_name": "plan"
  },
  {
    "event_name": "labels",
    "source_cte_name": "prep_labels",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_label_id",
    "stage_name": "plan"
  },
  {
    "event_name": "terraform_reports",
    "source_cte_name": "terraform_reports_events",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_job_artifact_id",
    "stage_name": "configure"
  },
  {
    "event_name": "users_created",
    "source_cte_name": "prep_user_event",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "NULL",
    "project_column_name": "NULL",
    "primary_key": "dim_user_id",
    "stage_name": "manage"
  },
  {
    "event_name": "action_monthly_active_users_wiki_repo",
    "source_cte_name": "action_monthly_active_users_wiki_repo_source",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "epic_notes",
    "source_cte_name": "epic_notes_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "NULL",
    "primary_key": "dim_note_id",
    "stage_name": "plan"
  },
  {
    "event_name": "boards",
    "source_cte_name": "prep_board",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_board_id",
    "stage_name": "plan"
  },
  {
    "event_name": "project_auto_devops",
    "source_cte_name": "prep_project_auto_devops",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_auto_devops_id",
    "stage_name": "configure"
  },
  {
    "event_name": "integrations",
    "source_cte_name": "prep_service",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_service_id",
    "stage_name": "create"
  },
  {
    "event_name": "issue_resource_weight_events",
    "source_cte_name": "prep_issue_resource_weight",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_resource_weight_id",
    "stage_name": "plan"
  },
  {
    "event_name": "milestones",
    "source_cte_name": "prep_milestone",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_milestone_id",
    "stage_name": "plan"
  },
  {
    "event_name": "action_monthly_active_users_design_management",
    "source_cte_name": "action_monthly_active_users_design_management_source",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "ci_pipeline_schedules",
    "source_cte_name": "prep_ci_pipeline_schedule",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_pipeline_schedule_id",
    "stage_name": "verify"
  },
  {
    "event_name": "snippets",
    "source_cte_name": "prep_snippet",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_snippet_id",
    "stage_name": "create"
  },
  {
    "event_name": "projects_prometheus_active",
    "source_cte_name": "project_prometheus_source",
    "user_column_name": "dim_user_id_creator",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_project_id",
    "stage_name": "monitor"
  },
  {
    "event_name": "ci_triggers",
    "source_cte_name": "prep_ci_trigger",
    "user_column_name": "owner_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_trigger_id",
    "stage_name": "verify"
  },
  {
    "event_name": "incident_labeled_issues",
    "source_cte_name": "incident_labeled_issues_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_issue_id",
    "stage_name": "monitor"
  },
  {
    "event_name": "api_fuzzing_build_run",
    "source_cte_name": "api_fuzzing_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "kubernetes_with_agent",
    "source_cte_name": "prep_cluster_agent",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "cluster_agent_id",
    "stage_name": "configure"
  }
]

-%}

{{ simple_cte([
    ('prep_ci_pipeline', 'prep_ci_pipeline'),
    ('prep_action', 'prep_action'),
    ('prep_ci_build', 'prep_ci_build'),
    ('prep_deployment', 'prep_deployment'),
    ('prep_epic', 'prep_epic'),
    ('prep_issue', 'prep_issue'),
    ('prep_merge_request', 'prep_merge_request'),
    ('prep_note', 'prep_note'),
    ('prep_package', 'prep_package'),
    ('prep_release', 'prep_release'),
    ('prep_requirement', 'prep_requirement'),
    ('dim_project', 'dim_project'),
    ('prep_namespace', 'prep_namespace'),
    ('prep_user', 'prep_user'),
    ('prep_plan', 'prep_gitlab_dotcom_plan'),
    ('prep_namespace_plan_hist', 'prep_namespace_plan_hist'),
    ('prep_ci_stage', 'prep_ci_stage'),
    ('prep_todo', 'prep_todo'),
    ('prep_resource_label', 'prep_resource_label'),
    ('prep_environment_event', 'prep_environment_event'),
    ('prep_resource_milestone', 'prep_resource_milestone'),
    ('prep_labels', 'prep_labels'),
    ('prep_ci_artifact', 'prep_ci_artifact'),
    ('prep_user_event', 'prep_user'),
    ('prep_board', 'prep_board'),
    ('prep_project_auto_devops', 'prep_project_auto_devops'),
    ('prep_service', 'prep_service'),
    ('prep_issue_resource_weight', 'prep_issue_resource_weight'),
    ('prep_milestone', 'prep_milestone'),
    ('prep_ci_pipeline_schedule', 'prep_ci_pipeline_schedule'),
    ('prep_snippet', 'prep_snippet'),
    ('prep_project', 'prep_project'),
    ('prep_ci_trigger', 'prep_ci_trigger'),
    ('prep_cluster_agent', 'prep_cluster_agent')
]) }}

, dast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dast'

), dependency_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dependency_scanning'

), push_actions AS (

    SELECT *
    FROM  prep_action
    WHERE event_action_type = 'pushed'

), issue_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Issue'

), license_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IN (
                                  'license_scanning',
                                  'license_management'
                                )

), merge_request_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'MergeRequest'

), protect_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'container_scanning'
    
), sast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'sast'

), secret_detection_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'secret_detection'

), other_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IS NULL

), api_fuzzing_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'api_fuzzing'

), successful_ci_pipelines AS (

    SELECT *
    FROM prep_ci_pipeline
    WHERE failure_reason IS NULL

), monthly_active_users_project_repo AS (

    SELECT *
    FROM  prep_action
    WHERE target_type IS NULL
      AND event_action_type = 'pushed'

), issue_resource_label_events AS (

    SELECT *
    FROM prep_resource_label
    WHERE dim_issue_id IS NOT NULL

), issue_resource_milestone AS (

    SELECT *
    FROM prep_resource_milestone
    WHERE issue_id IS NOT NULL

), terraform_reports_events AS (

    SELECT *
    FROM prep_ci_artifact
    WHERE file_type = 18

), action_monthly_active_users_wiki_repo_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'WikiPage::Meta'
      AND event_action_type IN ('created', 'updated')

), other_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type NOT IN ('Epic', 'MergeRequest')

), epic_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Epic'

), action_monthly_active_users_design_management_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'DesignManagement::Design'
      AND event_action_type IN ('created', 'updated')

), project_prometheus_source AS (

    SELECT *, 
      dim_date_id AS created_date_id
    FROM  prep_project
    WHERE ARRAY_CONTAINS('Integrations::Prometheus'::VARIANT, active_service_types_array)

), incident_labeled_issues_source AS (

    SELECT
      *
    FROM prep_issue
    WHERE ARRAY_CONTAINS('incident'::variant, labels)

), issue_creation_other_source AS (
    
    SELECT
      *
    FROM prep_issue
    WHERE NOT ARRAY_CONTAINS('incident'::variant, labels)

), data AS (

{% for event_cte in event_ctes %}

    SELECT
      MD5({{ event_cte.source_cte_name}}.{{ event_cte.primary_key }} || '-' || '{{ event_cte.event_name }}')   AS event_id,
      '{{ event_cte.event_name }}'                                                                             AS event_name,
      '{{ event_cte.stage_name }}'                                                                             AS stage_name,
      {{ event_cte.source_cte_name}}.created_at                                                                AS event_created_at,
      {{ event_cte.source_cte_name}}.created_date_id                                                           AS created_date_id,
      {%- if event_cte.project_column_name != 'NULL' %}
        {{ event_cte.source_cte_name}}.{{ event_cte.project_column_name }}                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        {{ event_cte.source_cte_name}}.{{ event_cte.project_column_name }}                                     AS parent_id,
        {{ event_cte.source_cte_name}}.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
      {%- elif event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
        NULL                                                                                                   AS dim_project_id,
        'group'                                                                                                AS parent_type,
        {{ event_cte.source_cte_name}}.{{ event_cte.ultimate_parent_namespace_column_name }}                   AS parent_id, 
        {{ event_cte.source_cte_name}}.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
      {%- else %}
        NULL                                                                                                   AS dim_project_id,
        NULL                                                                                                   AS parent_type,
        NULL                                                                                                   AS parent_id, 
        NULL                                                                                                   AS ultimate_parent_namespace_id,
      {%- endif %}
      {%- if event_cte.project_column_name != 'NULL' or event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
        COALESCE({{ event_cte.source_cte_name}}.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
      {%- else %}
        34                                                                                                     AS plan_id_at_event_timestamp,
        'free'                                                                                                 AS plan_name_at_event_timestamp,
        FALSE                                                                                                  AS plan_was_paid_at_event_timestamp,
      {%- endif %}  
      {%- if event_cte.user_column_name != 'NULL' %}
        {{ event_cte.source_cte_name}}.{{ event_cte.user_column_name }}                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                {{ event_cte.source_cte_name}}.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
      {%- else %}
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
      {%- endif %}
      {%- if event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                {{ event_cte.source_cte_name}}.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
      {%- else %}
        NULL                                                                                                   AS namespace_created_at,
        NULL                                                                                                   AS namespace_created_date,
        NULL                                                                                                   AS is_blocked_namespace_creator,
        NULL                                                                                                   AS namespace_is_internal,
        NULL                                                                                                   AS days_since_namespace_creation_at_event_date,
      {%- endif %}   
      {%- if event_cte.project_column_name != 'NULL' %}
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                {{ event_cte.source_cte_name}}.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab
      {%- else %}
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab
      {%- endif %}                                                                       
    FROM {{ event_cte.source_cte_name }}
    {%- if event_cte.project_column_name != 'NULL' %}
    LEFT JOIN dim_project 
      ON {{event_cte.source_cte_name}}.{{event_cte.project_column_name}} = dim_project.dim_project_id
    {%- endif %}
    {%- if event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
    LEFT JOIN prep_namespace
      ON {{event_cte.source_cte_name}}.{{event_cte.ultimate_parent_namespace_column_name}} = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    {%- endif %}
    {%- if event_cte.user_column_name != 'NULL' %}
    LEFT JOIN prep_user
      ON {{event_cte.source_cte_name}}.{{event_cte.user_column_name}} = prep_user.dim_user_id
    {%- endif %}
    {%- if event_cte.project_column_name != 'NULL' or event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
    LEFT JOIN prep_plan
      ON {{event_cte.source_cte_name}}.dim_plan_id = prep_plan.dim_plan_id
    {%- endif%}
    WHERE DATE_PART('year', {{ event_cte.source_cte_name}}.created_at) = {{year_value}}
      AND DATE_PART('month', {{ event_cte.source_cte_name}}.created_at) = {{month_value}}
    {% if not loop.last %}
    UNION ALL
    {% endif %}
{%- endfor %}

)

SELECT *
FROM data14:T60f,prep table to build the fct_dotcom_usage_events table. The grain of the table is one row per event.

The primary key of this table is the `event_id`.

This table is actually a long event list table with the following foreign keys:

- `dim_project_id`: in which project a specific event has been generated. For some events, there is no such data like boards which are at the group-level
- `ultimate_parent_namespace_id`: the top-level namespace in which the event has been generated. This is ALWAYS filled
- `dim_user_id`: the user who generated the event (for example the user who triggered a CI Pipeline)
- `dim_plan_id`: ID of the plan of the ultimate parent namespace when the event got created
- `dim_date_id`: ID of the date when the event got created.

Then other metadata available in the model are :

- Time metadata
  - user_created_at
  - namespace_created_at
  - days_since_namespace_creation
  - days_since_user_creation
  - days_since_project_creation
- Project specific metadata:
  - project_is_learn_gitlab
  - project_is_imported

A specific handbook page has been created for this table [here](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-product-events-data/). This has more information on how to add events and some analysis that can be run with this model.

When making changes to this model, you will have to use a specific DAG to backfill the partitions. Details [here](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-product-events-data/#backfill-the-data).15:T2e6a5,




WITH prep_ci_pipeline AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_pipeline

), prep_action AS (

    SELECT * 
    FROM "PROD".common_prep.prep_action

), prep_ci_build AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_build

), prep_deployment AS (

    SELECT * 
    FROM "PROD".common_prep.prep_deployment

), prep_epic AS (

    SELECT * 
    FROM "PROD".common_prep.prep_epic

), prep_issue AS (

    SELECT * 
    FROM "PROD".common_prep.prep_issue

), prep_merge_request AS (

    SELECT * 
    FROM "PROD".common_prep.prep_merge_request

), prep_note AS (

    SELECT * 
    FROM "PROD".common_prep.prep_note

), prep_package AS (

    SELECT * 
    FROM "PROD".common_prep.prep_package

), prep_release AS (

    SELECT * 
    FROM "PROD".common_prep.prep_release

), prep_requirement AS (

    SELECT * 
    FROM "PROD".common_prep.prep_requirement

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), prep_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

), prep_plan AS (

    SELECT * 
    FROM "PROD".common_prep.prep_gitlab_dotcom_plan

), prep_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_plan_hist

), prep_ci_stage AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_stage

), prep_todo AS (

    SELECT * 
    FROM "PROD".common_prep.prep_todo

), prep_resource_label AS (

    SELECT * 
    FROM "PROD".common_prep.prep_resource_label

), prep_environment_event AS (

    SELECT * 
    FROM "PROD".common_prep.prep_environment_event

), prep_resource_milestone AS (

    SELECT * 
    FROM "PROD".common_prep.prep_resource_milestone

), prep_labels AS (

    SELECT * 
    FROM "PROD".common_prep.prep_labels

), prep_ci_artifact AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_artifact

), prep_user_event AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

), prep_board AS (

    SELECT * 
    FROM "PROD".common_prep.prep_board

), prep_project_auto_devops AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project_auto_devops

), prep_service AS (

    SELECT * 
    FROM "PROD".common_prep.prep_service

), prep_issue_resource_weight AS (

    SELECT * 
    FROM "PROD".common_prep.prep_issue_resource_weight

), prep_milestone AS (

    SELECT * 
    FROM "PROD".common_prep.prep_milestone

), prep_ci_pipeline_schedule AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_pipeline_schedule

), prep_snippet AS (

    SELECT * 
    FROM "PROD".common_prep.prep_snippet

), prep_project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), prep_ci_trigger AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_trigger

), prep_cluster_agent AS (

    SELECT * 
    FROM "PROD".common_prep.prep_cluster_agent

)

, dast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dast'

), dependency_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dependency_scanning'

), push_actions AS (

    SELECT *
    FROM  prep_action
    WHERE event_action_type = 'pushed'

), issue_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Issue'

), license_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IN (
                                  'license_scanning',
                                  'license_management'
                                )

), merge_request_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'MergeRequest'

), protect_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'container_scanning'
    
), sast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'sast'

), secret_detection_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'secret_detection'

), other_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IS NULL

), api_fuzzing_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'api_fuzzing'

), successful_ci_pipelines AS (

    SELECT *
    FROM prep_ci_pipeline
    WHERE failure_reason IS NULL

), monthly_active_users_project_repo AS (

    SELECT *
    FROM  prep_action
    WHERE target_type IS NULL
      AND event_action_type = 'pushed'

), issue_resource_label_events AS (

    SELECT *
    FROM prep_resource_label
    WHERE dim_issue_id IS NOT NULL

), issue_resource_milestone AS (

    SELECT *
    FROM prep_resource_milestone
    WHERE issue_id IS NOT NULL

), terraform_reports_events AS (

    SELECT *
    FROM prep_ci_artifact
    WHERE file_type = 18

), action_monthly_active_users_wiki_repo_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'WikiPage::Meta'
      AND event_action_type IN ('created', 'updated')

), other_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type NOT IN ('Epic', 'MergeRequest')

), epic_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Epic'

), action_monthly_active_users_design_management_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'DesignManagement::Design'
      AND event_action_type IN ('created', 'updated')

), project_prometheus_source AS (

    SELECT *, 
      dim_date_id AS created_date_id
    FROM  prep_project
    WHERE ARRAY_CONTAINS('Integrations::Prometheus'::VARIANT, active_service_types_array)

), incident_labeled_issues_source AS (

    SELECT
      *
    FROM prep_issue
    WHERE ARRAY_CONTAINS('incident'::variant, labels)

), issue_creation_other_source AS (
    
    SELECT
      *
    FROM prep_issue
    WHERE NOT ARRAY_CONTAINS('incident'::variant, labels)

), data AS (



    SELECT
      MD5(prep_action.dim_action_id || '-' || 'action')   AS event_id,
      'action'                                                                             AS event_name,
      'manage'                                                                             AS stage_name,
      prep_action.created_at                                                                AS event_created_at,
      prep_action.created_date_id                                                           AS created_date_id,
        prep_action.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_action.dim_project_id                                     AS parent_id,
        prep_action.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_action.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_action.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_action.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_action.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_action.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_action
    LEFT JOIN dim_project 
      ON prep_action.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_action.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_action.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_action.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_action.created_at) = 2023
      AND DATE_PART('month', prep_action.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(dast_jobs.dim_ci_build_id || '-' || 'dast_build_run')   AS event_id,
      'dast_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      dast_jobs.created_at                                                                AS event_created_at,
      dast_jobs.created_date_id                                                           AS created_date_id,
        dast_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        dast_jobs.dim_project_id                                     AS parent_id,
        dast_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(dast_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        dast_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                dast_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                dast_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                dast_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM dast_jobs
    LEFT JOIN dim_project 
      ON dast_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON dast_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON dast_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON dast_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', dast_jobs.created_at) = 2023
      AND DATE_PART('month', dast_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(dependency_scanning_jobs.dim_ci_build_id || '-' || 'dependency_scanning_build_run')   AS event_id,
      'dependency_scanning_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      dependency_scanning_jobs.created_at                                                                AS event_created_at,
      dependency_scanning_jobs.created_date_id                                                           AS created_date_id,
        dependency_scanning_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        dependency_scanning_jobs.dim_project_id                                     AS parent_id,
        dependency_scanning_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(dependency_scanning_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        dependency_scanning_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                dependency_scanning_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                dependency_scanning_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                dependency_scanning_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM dependency_scanning_jobs
    LEFT JOIN dim_project 
      ON dependency_scanning_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON dependency_scanning_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON dependency_scanning_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON dependency_scanning_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', dependency_scanning_jobs.created_at) = 2023
      AND DATE_PART('month', dependency_scanning_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_deployment.dim_deployment_id || '-' || 'deployment_creation')   AS event_id,
      'deployment_creation'                                                                             AS event_name,
      'release'                                                                             AS stage_name,
      prep_deployment.created_at                                                                AS event_created_at,
      prep_deployment.created_date_id                                                           AS created_date_id,
        prep_deployment.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_deployment.dim_project_id                                     AS parent_id,
        prep_deployment.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_deployment.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_deployment.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_deployment.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_deployment.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_deployment.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_deployment
    LEFT JOIN dim_project 
      ON prep_deployment.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_deployment.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_deployment.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_deployment.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_deployment.created_at) = 2023
      AND DATE_PART('month', prep_deployment.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_epic.dim_epic_id || '-' || 'epic_creation')   AS event_id,
      'epic_creation'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_epic.created_at                                                                AS event_created_at,
      prep_epic.created_date_id                                                           AS created_date_id,
        NULL                                                                                                   AS dim_project_id,
        'group'                                                                                                AS parent_type,
        prep_epic.ultimate_parent_namespace_id                   AS parent_id, 
        prep_epic.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_epic.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_epic.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_epic.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_epic.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab                                                                       
    FROM prep_epic
    LEFT JOIN prep_namespace
      ON prep_epic.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_epic.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_epic.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_epic.created_at) = 2023
      AND DATE_PART('month', prep_epic.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_creation_other_source.dim_issue_id || '-' || 'issue_creation_other')   AS event_id,
      'issue_creation_other'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_creation_other_source.created_at                                                                AS event_created_at,
      issue_creation_other_source.created_date_id                                                           AS created_date_id,
        issue_creation_other_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_creation_other_source.dim_project_id                                     AS parent_id,
        issue_creation_other_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_creation_other_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_creation_other_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_creation_other_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_creation_other_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_creation_other_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_creation_other_source
    LEFT JOIN dim_project 
      ON issue_creation_other_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_creation_other_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_creation_other_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_creation_other_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_creation_other_source.created_at) = 2023
      AND DATE_PART('month', issue_creation_other_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_note.dim_note_id || '-' || 'issue_note_creation')   AS event_id,
      'issue_note_creation'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_note.created_at                                                                AS event_created_at,
      issue_note.created_date_id                                                           AS created_date_id,
        issue_note.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_note.dim_project_id                                     AS parent_id,
        issue_note.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_note.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_note.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_note.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_note.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_note.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_note
    LEFT JOIN dim_project 
      ON issue_note.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_note.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_note.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_note.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_note.created_at) = 2023
      AND DATE_PART('month', issue_note.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(license_scanning_jobs.dim_ci_build_id || '-' || 'license_scanning_build_run')   AS event_id,
      'license_scanning_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      license_scanning_jobs.created_at                                                                AS event_created_at,
      license_scanning_jobs.created_date_id                                                           AS created_date_id,
        license_scanning_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        license_scanning_jobs.dim_project_id                                     AS parent_id,
        license_scanning_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(license_scanning_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        license_scanning_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                license_scanning_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                license_scanning_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                license_scanning_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM license_scanning_jobs
    LEFT JOIN dim_project 
      ON license_scanning_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON license_scanning_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON license_scanning_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON license_scanning_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', license_scanning_jobs.created_at) = 2023
      AND DATE_PART('month', license_scanning_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_merge_request.dim_merge_request_id || '-' || 'merge_request_creation')   AS event_id,
      'merge_request_creation'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      prep_merge_request.created_at                                                                AS event_created_at,
      prep_merge_request.created_date_id                                                           AS created_date_id,
        prep_merge_request.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_merge_request.dim_project_id                                     AS parent_id,
        prep_merge_request.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_merge_request.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_merge_request.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_merge_request.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_merge_request.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_merge_request.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_merge_request
    LEFT JOIN dim_project 
      ON prep_merge_request.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_merge_request.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_merge_request.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_merge_request.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_merge_request.created_at) = 2023
      AND DATE_PART('month', prep_merge_request.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(merge_request_note.dim_note_id || '-' || 'merge_request_note_creation')   AS event_id,
      'merge_request_note_creation'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      merge_request_note.created_at                                                                AS event_created_at,
      merge_request_note.created_date_id                                                           AS created_date_id,
        merge_request_note.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        merge_request_note.dim_project_id                                     AS parent_id,
        merge_request_note.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(merge_request_note.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        merge_request_note.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                merge_request_note.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                merge_request_note.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                merge_request_note.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM merge_request_note
    LEFT JOIN dim_project 
      ON merge_request_note.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON merge_request_note.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON merge_request_note.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON merge_request_note.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', merge_request_note.created_at) = 2023
      AND DATE_PART('month', merge_request_note.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_pipeline.dim_ci_pipeline_id || '-' || 'ci_pipeline_creation')   AS event_id,
      'ci_pipeline_creation'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      prep_ci_pipeline.created_at                                                                AS event_created_at,
      prep_ci_pipeline.created_date_id                                                           AS created_date_id,
        prep_ci_pipeline.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_pipeline.dim_project_id                                     AS parent_id,
        prep_ci_pipeline.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_pipeline.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_ci_pipeline.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_ci_pipeline.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_pipeline.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_pipeline.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_pipeline
    LEFT JOIN dim_project 
      ON prep_ci_pipeline.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_pipeline.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_ci_pipeline.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_pipeline.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_pipeline.created_at) = 2023
      AND DATE_PART('month', prep_ci_pipeline.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_package.dim_package_id || '-' || 'package_creation')   AS event_id,
      'package_creation'                                                                             AS event_name,
      'package'                                                                             AS stage_name,
      prep_package.created_at                                                                AS event_created_at,
      prep_package.created_date_id                                                           AS created_date_id,
        prep_package.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_package.dim_project_id                                     AS parent_id,
        prep_package.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_package.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_package.creator_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_package.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_package.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_package.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_package
    LEFT JOIN dim_project 
      ON prep_package.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_package.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_package.creator_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_package.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_package.created_at) = 2023
      AND DATE_PART('month', prep_package.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(protect_ci_build.dim_ci_build_id || '-' || 'container_scanning_build_run')   AS event_id,
      'container_scanning_build_run'                                                                             AS event_name,
      'protect'                                                                             AS stage_name,
      protect_ci_build.created_at                                                                AS event_created_at,
      protect_ci_build.created_date_id                                                           AS created_date_id,
        protect_ci_build.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        protect_ci_build.dim_project_id                                     AS parent_id,
        protect_ci_build.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(protect_ci_build.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        protect_ci_build.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                protect_ci_build.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                protect_ci_build.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                protect_ci_build.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM protect_ci_build
    LEFT JOIN dim_project 
      ON protect_ci_build.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON protect_ci_build.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON protect_ci_build.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON protect_ci_build.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', protect_ci_build.created_at) = 2023
      AND DATE_PART('month', protect_ci_build.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(push_actions.dim_action_id || '-' || 'push_action')   AS event_id,
      'push_action'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      push_actions.created_at                                                                AS event_created_at,
      push_actions.created_date_id                                                           AS created_date_id,
        push_actions.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        push_actions.dim_project_id                                     AS parent_id,
        push_actions.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(push_actions.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        push_actions.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                push_actions.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                push_actions.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                push_actions.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM push_actions
    LEFT JOIN dim_project 
      ON push_actions.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON push_actions.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON push_actions.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON push_actions.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', push_actions.created_at) = 2023
      AND DATE_PART('month', push_actions.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_release.dim_release_id || '-' || 'release_creation')   AS event_id,
      'release_creation'                                                                             AS event_name,
      'release'                                                                             AS stage_name,
      prep_release.created_at                                                                AS event_created_at,
      prep_release.created_date_id                                                           AS created_date_id,
        prep_release.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_release.dim_project_id                                     AS parent_id,
        prep_release.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_release.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_release.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_release.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_release.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_release.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_release
    LEFT JOIN dim_project 
      ON prep_release.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_release.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_release.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_release.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_release.created_at) = 2023
      AND DATE_PART('month', prep_release.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_requirement.dim_requirement_id || '-' || 'requirement_creation')   AS event_id,
      'requirement_creation'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_requirement.created_at                                                                AS event_created_at,
      prep_requirement.created_date_id                                                           AS created_date_id,
        prep_requirement.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_requirement.dim_project_id                                     AS parent_id,
        prep_requirement.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_requirement.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_requirement.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_requirement.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_requirement.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_requirement.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_requirement
    LEFT JOIN dim_project 
      ON prep_requirement.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_requirement.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_requirement.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_requirement.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_requirement.created_at) = 2023
      AND DATE_PART('month', prep_requirement.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(sast_jobs.dim_ci_build_id || '-' || 'sast_build_run')   AS event_id,
      'sast_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      sast_jobs.created_at                                                                AS event_created_at,
      sast_jobs.created_date_id                                                           AS created_date_id,
        sast_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        sast_jobs.dim_project_id                                     AS parent_id,
        sast_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(sast_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        sast_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                sast_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                sast_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                sast_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM sast_jobs
    LEFT JOIN dim_project 
      ON sast_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON sast_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON sast_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON sast_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', sast_jobs.created_at) = 2023
      AND DATE_PART('month', sast_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(secret_detection_jobs.dim_ci_build_id || '-' || 'secret_detection_build_run')   AS event_id,
      'secret_detection_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      secret_detection_jobs.created_at                                                                AS event_created_at,
      secret_detection_jobs.created_date_id                                                           AS created_date_id,
        secret_detection_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        secret_detection_jobs.dim_project_id                                     AS parent_id,
        secret_detection_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(secret_detection_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        secret_detection_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                secret_detection_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                secret_detection_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                secret_detection_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM secret_detection_jobs
    LEFT JOIN dim_project 
      ON secret_detection_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON secret_detection_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON secret_detection_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON secret_detection_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', secret_detection_jobs.created_at) = 2023
      AND DATE_PART('month', secret_detection_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(other_ci_build.dim_ci_build_id || '-' || 'other_ci_build_creation')   AS event_id,
      'other_ci_build_creation'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      other_ci_build.created_at                                                                AS event_created_at,
      other_ci_build.created_date_id                                                           AS created_date_id,
        other_ci_build.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        other_ci_build.dim_project_id                                     AS parent_id,
        other_ci_build.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(other_ci_build.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        other_ci_build.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                other_ci_build.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                other_ci_build.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                other_ci_build.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM other_ci_build
    LEFT JOIN dim_project 
      ON other_ci_build.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON other_ci_build.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON other_ci_build.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON other_ci_build.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', other_ci_build.created_at) = 2023
      AND DATE_PART('month', other_ci_build.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(successful_ci_pipelines.dim_ci_pipeline_id || '-' || 'successful_ci_pipeline_creation')   AS event_id,
      'successful_ci_pipeline_creation'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      successful_ci_pipelines.created_at                                                                AS event_created_at,
      successful_ci_pipelines.created_date_id                                                           AS created_date_id,
        successful_ci_pipelines.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        successful_ci_pipelines.dim_project_id                                     AS parent_id,
        successful_ci_pipelines.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(successful_ci_pipelines.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        successful_ci_pipelines.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                successful_ci_pipelines.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                successful_ci_pipelines.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                successful_ci_pipelines.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM successful_ci_pipelines
    LEFT JOIN dim_project 
      ON successful_ci_pipelines.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON successful_ci_pipelines.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON successful_ci_pipelines.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON successful_ci_pipelines.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', successful_ci_pipelines.created_at) = 2023
      AND DATE_PART('month', successful_ci_pipelines.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(monthly_active_users_project_repo.dim_action_id || '-' || 'action_monthly_active_users_project_repo')   AS event_id,
      'action_monthly_active_users_project_repo'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      monthly_active_users_project_repo.created_at                                                                AS event_created_at,
      monthly_active_users_project_repo.created_date_id                                                           AS created_date_id,
        monthly_active_users_project_repo.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        monthly_active_users_project_repo.dim_project_id                                     AS parent_id,
        monthly_active_users_project_repo.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(monthly_active_users_project_repo.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        monthly_active_users_project_repo.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                monthly_active_users_project_repo.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                monthly_active_users_project_repo.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                monthly_active_users_project_repo.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM monthly_active_users_project_repo
    LEFT JOIN dim_project 
      ON monthly_active_users_project_repo.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON monthly_active_users_project_repo.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON monthly_active_users_project_repo.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON monthly_active_users_project_repo.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', monthly_active_users_project_repo.created_at) = 2023
      AND DATE_PART('month', monthly_active_users_project_repo.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_stage.dim_ci_stage_id || '-' || 'ci_stages')   AS event_id,
      'ci_stages'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      prep_ci_stage.created_at                                                                AS event_created_at,
      prep_ci_stage.created_date_id                                                           AS created_date_id,
        prep_ci_stage.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_stage.dim_project_id                                     AS parent_id,
        prep_ci_stage.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_stage.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_stage.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_stage.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_stage
    LEFT JOIN dim_project 
      ON prep_ci_stage.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_stage.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_stage.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_stage.created_at) = 2023
      AND DATE_PART('month', prep_ci_stage.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(other_notes_source.dim_note_id || '-' || 'notes_other')   AS event_id,
      'notes_other'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      other_notes_source.created_at                                                                AS event_created_at,
      other_notes_source.created_date_id                                                           AS created_date_id,
        other_notes_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        other_notes_source.dim_project_id                                     AS parent_id,
        other_notes_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(other_notes_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        other_notes_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                other_notes_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                other_notes_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                other_notes_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM other_notes_source
    LEFT JOIN dim_project 
      ON other_notes_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON other_notes_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON other_notes_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON other_notes_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', other_notes_source.created_at) = 2023
      AND DATE_PART('month', other_notes_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_todo.dim_todo_id || '-' || 'todos')   AS event_id,
      'todos'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_todo.created_at                                                                AS event_created_at,
      prep_todo.created_date_id                                                           AS created_date_id,
        prep_todo.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_todo.dim_project_id                                     AS parent_id,
        prep_todo.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_todo.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_todo.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_todo.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_todo.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_todo.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_todo
    LEFT JOIN dim_project 
      ON prep_todo.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_todo.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_todo.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_todo.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_todo.created_at) = 2023
      AND DATE_PART('month', prep_todo.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_resource_label_events.dim_issue_label_id || '-' || 'issue_resource_label_events')   AS event_id,
      'issue_resource_label_events'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_resource_label_events.created_at                                                                AS event_created_at,
      issue_resource_label_events.created_date_id                                                           AS created_date_id,
        issue_resource_label_events.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_resource_label_events.dim_project_id                                     AS parent_id,
        issue_resource_label_events.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_resource_label_events.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_resource_label_events.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_resource_label_events.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_resource_label_events.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_resource_label_events.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_resource_label_events
    LEFT JOIN dim_project 
      ON issue_resource_label_events.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_resource_label_events.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_resource_label_events.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_resource_label_events.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_resource_label_events.created_at) = 2023
      AND DATE_PART('month', issue_resource_label_events.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_environment_event.dim_environment_id || '-' || 'environments')   AS event_id,
      'environments'                                                                             AS event_name,
      'release'                                                                             AS stage_name,
      prep_environment_event.created_at                                                                AS event_created_at,
      prep_environment_event.created_date_id                                                           AS created_date_id,
        prep_environment_event.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_environment_event.dim_project_id                                     AS parent_id,
        prep_environment_event.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_environment_event.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_environment_event.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_environment_event.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_environment_event
    LEFT JOIN dim_project 
      ON prep_environment_event.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_environment_event.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_environment_event.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_environment_event.created_at) = 2023
      AND DATE_PART('month', prep_environment_event.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_resource_milestone.dim_resource_milestone_id || '-' || 'issue_resource_milestone_events')   AS event_id,
      'issue_resource_milestone_events'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_resource_milestone.created_at                                                                AS event_created_at,
      issue_resource_milestone.created_date_id                                                           AS created_date_id,
        issue_resource_milestone.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_resource_milestone.dim_project_id                                     AS parent_id,
        issue_resource_milestone.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_resource_milestone.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_resource_milestone.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_resource_milestone.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_resource_milestone.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_resource_milestone.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_resource_milestone
    LEFT JOIN dim_project 
      ON issue_resource_milestone.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_resource_milestone.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_resource_milestone.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_resource_milestone.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_resource_milestone.created_at) = 2023
      AND DATE_PART('month', issue_resource_milestone.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_labels.dim_label_id || '-' || 'labels')   AS event_id,
      'labels'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_labels.created_at                                                                AS event_created_at,
      prep_labels.created_date_id                                                           AS created_date_id,
        prep_labels.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_labels.dim_project_id                                     AS parent_id,
        prep_labels.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_labels.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_labels.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_labels.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_labels
    LEFT JOIN dim_project 
      ON prep_labels.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_labels.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_labels.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_labels.created_at) = 2023
      AND DATE_PART('month', prep_labels.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(terraform_reports_events.dim_ci_job_artifact_id || '-' || 'terraform_reports')   AS event_id,
      'terraform_reports'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      terraform_reports_events.created_at                                                                AS event_created_at,
      terraform_reports_events.created_date_id                                                           AS created_date_id,
        terraform_reports_events.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        terraform_reports_events.dim_project_id                                     AS parent_id,
        terraform_reports_events.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(terraform_reports_events.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                terraform_reports_events.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                terraform_reports_events.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM terraform_reports_events
    LEFT JOIN dim_project 
      ON terraform_reports_events.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON terraform_reports_events.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON terraform_reports_events.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', terraform_reports_events.created_at) = 2023
      AND DATE_PART('month', terraform_reports_events.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_user_event.dim_user_id || '-' || 'users_created')   AS event_id,
      'users_created'                                                                             AS event_name,
      'manage'                                                                             AS stage_name,
      prep_user_event.created_at                                                                AS event_created_at,
      prep_user_event.created_date_id                                                           AS created_date_id,
        NULL                                                                                                   AS dim_project_id,
        NULL                                                                                                   AS parent_type,
        NULL                                                                                                   AS parent_id, 
        NULL                                                                                                   AS ultimate_parent_namespace_id,
        34                                                                                                     AS plan_id_at_event_timestamp,
        'free'                                                                                                 AS plan_name_at_event_timestamp,
        FALSE                                                                                                  AS plan_was_paid_at_event_timestamp,
        prep_user_event.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_user_event.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        NULL                                                                                                   AS namespace_created_at,
        NULL                                                                                                   AS namespace_created_date,
        NULL                                                                                                   AS is_blocked_namespace_creator,
        NULL                                                                                                   AS namespace_is_internal,
        NULL                                                                                                   AS days_since_namespace_creation_at_event_date,
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab                                                                       
    FROM prep_user_event
    LEFT JOIN prep_user
      ON prep_user_event.dim_user_id = prep_user.dim_user_id
    WHERE DATE_PART('year', prep_user_event.created_at) = 2023
      AND DATE_PART('month', prep_user_event.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(action_monthly_active_users_wiki_repo_source.dim_action_id || '-' || 'action_monthly_active_users_wiki_repo')   AS event_id,
      'action_monthly_active_users_wiki_repo'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      action_monthly_active_users_wiki_repo_source.created_at                                                                AS event_created_at,
      action_monthly_active_users_wiki_repo_source.created_date_id                                                           AS created_date_id,
        action_monthly_active_users_wiki_repo_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        action_monthly_active_users_wiki_repo_source.dim_project_id                                     AS parent_id,
        action_monthly_active_users_wiki_repo_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(action_monthly_active_users_wiki_repo_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        action_monthly_active_users_wiki_repo_source.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                action_monthly_active_users_wiki_repo_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                action_monthly_active_users_wiki_repo_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                action_monthly_active_users_wiki_repo_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM action_monthly_active_users_wiki_repo_source
    LEFT JOIN dim_project 
      ON action_monthly_active_users_wiki_repo_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON action_monthly_active_users_wiki_repo_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON action_monthly_active_users_wiki_repo_source.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON action_monthly_active_users_wiki_repo_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', action_monthly_active_users_wiki_repo_source.created_at) = 2023
      AND DATE_PART('month', action_monthly_active_users_wiki_repo_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(epic_notes_source.dim_note_id || '-' || 'epic_notes')   AS event_id,
      'epic_notes'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      epic_notes_source.created_at                                                                AS event_created_at,
      epic_notes_source.created_date_id                                                           AS created_date_id,
        NULL                                                                                                   AS dim_project_id,
        'group'                                                                                                AS parent_type,
        epic_notes_source.ultimate_parent_namespace_id                   AS parent_id, 
        epic_notes_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(epic_notes_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        epic_notes_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                epic_notes_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                epic_notes_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab                                                                       
    FROM epic_notes_source
    LEFT JOIN prep_namespace
      ON epic_notes_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON epic_notes_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON epic_notes_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', epic_notes_source.created_at) = 2023
      AND DATE_PART('month', epic_notes_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_board.dim_board_id || '-' || 'boards')   AS event_id,
      'boards'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_board.created_at                                                                AS event_created_at,
      prep_board.created_date_id                                                           AS created_date_id,
        prep_board.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_board.dim_project_id                                     AS parent_id,
        prep_board.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_board.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_board.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_board.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_board
    LEFT JOIN dim_project 
      ON prep_board.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_board.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_board.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_board.created_at) = 2023
      AND DATE_PART('month', prep_board.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_project_auto_devops.dim_auto_devops_id || '-' || 'project_auto_devops')   AS event_id,
      'project_auto_devops'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      prep_project_auto_devops.created_at                                                                AS event_created_at,
      prep_project_auto_devops.created_date_id                                                           AS created_date_id,
        prep_project_auto_devops.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_project_auto_devops.dim_project_id                                     AS parent_id,
        prep_project_auto_devops.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_project_auto_devops.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_project_auto_devops.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_project_auto_devops.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_project_auto_devops
    LEFT JOIN dim_project 
      ON prep_project_auto_devops.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_project_auto_devops.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_project_auto_devops.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_project_auto_devops.created_at) = 2023
      AND DATE_PART('month', prep_project_auto_devops.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_service.dim_service_id || '-' || 'integrations')   AS event_id,
      'integrations'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      prep_service.created_at                                                                AS event_created_at,
      prep_service.created_date_id                                                           AS created_date_id,
        prep_service.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_service.dim_project_id                                     AS parent_id,
        prep_service.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_service.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_service.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_service.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_service
    LEFT JOIN dim_project 
      ON prep_service.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_service.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_service.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_service.created_at) = 2023
      AND DATE_PART('month', prep_service.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_issue_resource_weight.dim_resource_weight_id || '-' || 'issue_resource_weight_events')   AS event_id,
      'issue_resource_weight_events'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_issue_resource_weight.created_at                                                                AS event_created_at,
      prep_issue_resource_weight.created_date_id                                                           AS created_date_id,
        prep_issue_resource_weight.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_issue_resource_weight.dim_project_id                                     AS parent_id,
        prep_issue_resource_weight.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_issue_resource_weight.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_issue_resource_weight.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_issue_resource_weight.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_issue_resource_weight.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_issue_resource_weight.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_issue_resource_weight
    LEFT JOIN dim_project 
      ON prep_issue_resource_weight.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_issue_resource_weight.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_issue_resource_weight.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_issue_resource_weight.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_issue_resource_weight.created_at) = 2023
      AND DATE_PART('month', prep_issue_resource_weight.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_milestone.dim_milestone_id || '-' || 'milestones')   AS event_id,
      'milestones'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_milestone.created_at                                                                AS event_created_at,
      prep_milestone.created_date_id                                                           AS created_date_id,
        prep_milestone.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_milestone.dim_project_id                                     AS parent_id,
        prep_milestone.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_milestone.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_milestone.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_milestone.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_milestone
    LEFT JOIN dim_project 
      ON prep_milestone.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_milestone.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_milestone.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_milestone.created_at) = 2023
      AND DATE_PART('month', prep_milestone.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(action_monthly_active_users_design_management_source.dim_action_id || '-' || 'action_monthly_active_users_design_management')   AS event_id,
      'action_monthly_active_users_design_management'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      action_monthly_active_users_design_management_source.created_at                                                                AS event_created_at,
      action_monthly_active_users_design_management_source.created_date_id                                                           AS created_date_id,
        action_monthly_active_users_design_management_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        action_monthly_active_users_design_management_source.dim_project_id                                     AS parent_id,
        action_monthly_active_users_design_management_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(action_monthly_active_users_design_management_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        action_monthly_active_users_design_management_source.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                action_monthly_active_users_design_management_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                action_monthly_active_users_design_management_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                action_monthly_active_users_design_management_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM action_monthly_active_users_design_management_source
    LEFT JOIN dim_project 
      ON action_monthly_active_users_design_management_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON action_monthly_active_users_design_management_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON action_monthly_active_users_design_management_source.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON action_monthly_active_users_design_management_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', action_monthly_active_users_design_management_source.created_at) = 2023
      AND DATE_PART('month', action_monthly_active_users_design_management_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_pipeline_schedule.dim_ci_pipeline_schedule_id || '-' || 'ci_pipeline_schedules')   AS event_id,
      'ci_pipeline_schedules'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      prep_ci_pipeline_schedule.created_at                                                                AS event_created_at,
      prep_ci_pipeline_schedule.created_date_id                                                           AS created_date_id,
        prep_ci_pipeline_schedule.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_pipeline_schedule.dim_project_id                                     AS parent_id,
        prep_ci_pipeline_schedule.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_pipeline_schedule.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_ci_pipeline_schedule.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_ci_pipeline_schedule.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_pipeline_schedule.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_pipeline_schedule.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_pipeline_schedule
    LEFT JOIN dim_project 
      ON prep_ci_pipeline_schedule.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_pipeline_schedule.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_ci_pipeline_schedule.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_pipeline_schedule.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_pipeline_schedule.created_at) = 2023
      AND DATE_PART('month', prep_ci_pipeline_schedule.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_snippet.dim_snippet_id || '-' || 'snippets')   AS event_id,
      'snippets'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      prep_snippet.created_at                                                                AS event_created_at,
      prep_snippet.created_date_id                                                           AS created_date_id,
        prep_snippet.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_snippet.dim_project_id                                     AS parent_id,
        prep_snippet.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_snippet.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_snippet.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_snippet.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_snippet.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_snippet.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_snippet
    LEFT JOIN dim_project 
      ON prep_snippet.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_snippet.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_snippet.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_snippet.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_snippet.created_at) = 2023
      AND DATE_PART('month', prep_snippet.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(project_prometheus_source.dim_project_id || '-' || 'projects_prometheus_active')   AS event_id,
      'projects_prometheus_active'                                                                             AS event_name,
      'monitor'                                                                             AS stage_name,
      project_prometheus_source.created_at                                                                AS event_created_at,
      project_prometheus_source.created_date_id                                                           AS created_date_id,
        project_prometheus_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        project_prometheus_source.dim_project_id                                     AS parent_id,
        project_prometheus_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(project_prometheus_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        project_prometheus_source.dim_user_id_creator                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                project_prometheus_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                project_prometheus_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                project_prometheus_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM project_prometheus_source
    LEFT JOIN dim_project 
      ON project_prometheus_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON project_prometheus_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON project_prometheus_source.dim_user_id_creator = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON project_prometheus_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', project_prometheus_source.created_at) = 2023
      AND DATE_PART('month', project_prometheus_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_trigger.dim_ci_trigger_id || '-' || 'ci_triggers')   AS event_id,
      'ci_triggers'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      prep_ci_trigger.created_at                                                                AS event_created_at,
      prep_ci_trigger.created_date_id                                                           AS created_date_id,
        prep_ci_trigger.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_trigger.dim_project_id                                     AS parent_id,
        prep_ci_trigger.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_trigger.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_ci_trigger.owner_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_ci_trigger.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_trigger.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_trigger.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_trigger
    LEFT JOIN dim_project 
      ON prep_ci_trigger.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_trigger.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_ci_trigger.owner_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_trigger.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_trigger.created_at) = 2023
      AND DATE_PART('month', prep_ci_trigger.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(incident_labeled_issues_source.dim_issue_id || '-' || 'incident_labeled_issues')   AS event_id,
      'incident_labeled_issues'                                                                             AS event_name,
      'monitor'                                                                             AS stage_name,
      incident_labeled_issues_source.created_at                                                                AS event_created_at,
      incident_labeled_issues_source.created_date_id                                                           AS created_date_id,
        incident_labeled_issues_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        incident_labeled_issues_source.dim_project_id                                     AS parent_id,
        incident_labeled_issues_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(incident_labeled_issues_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        incident_labeled_issues_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                incident_labeled_issues_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                incident_labeled_issues_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                incident_labeled_issues_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM incident_labeled_issues_source
    LEFT JOIN dim_project 
      ON incident_labeled_issues_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON incident_labeled_issues_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON incident_labeled_issues_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON incident_labeled_issues_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', incident_labeled_issues_source.created_at) = 2023
      AND DATE_PART('month', incident_labeled_issues_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(api_fuzzing_jobs.dim_ci_build_id || '-' || 'api_fuzzing_build_run')   AS event_id,
      'api_fuzzing_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      api_fuzzing_jobs.created_at                                                                AS event_created_at,
      api_fuzzing_jobs.created_date_id                                                           AS created_date_id,
        api_fuzzing_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        api_fuzzing_jobs.dim_project_id                                     AS parent_id,
        api_fuzzing_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(api_fuzzing_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        api_fuzzing_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                api_fuzzing_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                api_fuzzing_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                api_fuzzing_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM api_fuzzing_jobs
    LEFT JOIN dim_project 
      ON api_fuzzing_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON api_fuzzing_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON api_fuzzing_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON api_fuzzing_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', api_fuzzing_jobs.created_at) = 2023
      AND DATE_PART('month', api_fuzzing_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_cluster_agent.cluster_agent_id || '-' || 'kubernetes_with_agent')   AS event_id,
      'kubernetes_with_agent'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      prep_cluster_agent.created_at                                                                AS event_created_at,
      prep_cluster_agent.created_date_id                                                           AS created_date_id,
        prep_cluster_agent.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_cluster_agent.dim_project_id                                     AS parent_id,
        prep_cluster_agent.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_cluster_agent.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_cluster_agent.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_cluster_agent.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_cluster_agent.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_cluster_agent.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_cluster_agent
    LEFT JOIN dim_project 
      ON prep_cluster_agent.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_cluster_agent.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_cluster_agent.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_cluster_agent.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_cluster_agent.created_at) = 2023
      AND DATE_PART('month', prep_cluster_agent.created_at) = 07
    

)

SELECT *
FROM data16:T6f4,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_auto_devops_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, devops_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_project_auto_devops_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      devops_source.project_auto_devops_id                       AS dim_auto_devops_id,
      IFNULL(dim_project.dim_project_id, -1)                     AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)            AS dim_plan_id,
      dim_date.date_id                                           AS created_date_id,
      devops_source.created_at::TIMESTAMP                        AS created_at,
      devops_source.updated_at::TIMESTAMP                        AS updated_at
    FROM  devops_source
    LEFT JOIN dim_project 
      ON  devops_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND  devops_source.created_at >= dim_namespace_plan_hist.valid_from
        AND  devops_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(devops_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-28",
    updated_date="2022-06-01"
) }}17:T7d4,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, devops_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_project_auto_devops_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_project_auto_devops)

    

), joined AS (

    SELECT 
      devops_source.project_auto_devops_id                       AS dim_auto_devops_id,
      IFNULL(dim_project.dim_project_id, -1)                     AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)            AS dim_plan_id,
      dim_date.date_id                                           AS created_date_id,
      devops_source.created_at::TIMESTAMP                        AS created_at,
      devops_source.updated_at::TIMESTAMP                        AS updated_at
    FROM  devops_source
    LEFT JOIN dim_project 
      ON  devops_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND  devops_source.created_at >= dim_namespace_plan_hist.valid_from
        AND  devops_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(devops_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-28'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined18:T702,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('gitlab_dotcom_labels_source', 'gitlab_dotcom_labels_source'),
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, renamed AS (
  
    SELECT
      gitlab_dotcom_labels_source.label_id                              AS dim_label_id,
      -- FOREIGN KEYS
      gitlab_dotcom_labels_source.project_id                            AS dim_project_id,
      IFNULL(gitlab_dotcom_labels_source.group_id,
        dim_project.ultimate_parent_namespace_id)                       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      --
      gitlab_dotcom_labels_source.group_id                              AS dim_namespace_id,
      gitlab_dotcom_labels_source.label_title,
      gitlab_dotcom_labels_source.label_type,
      gitlab_dotcom_labels_source.created_at,
      dim_date.date_id                                                  AS created_date_id
    FROM gitlab_dotcom_labels_source
    LEFT JOIN dim_project 
      ON gitlab_dotcom_labels_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_labels_source.created_at >= dim_namespace_plan_hist.valid_from
        AND gitlab_dotcom_labels_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date 
      ON TO_DATE(gitlab_dotcom_labels_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="renamed",
    created_by="@dtownsend",
    updated_by="@chrissharp",
    created_date="2021-08-04",
    updated_date="2022-06-01"
) }}19:T852,



WITH gitlab_dotcom_labels_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_labels_source

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, renamed AS (
  
    SELECT
      gitlab_dotcom_labels_source.label_id                              AS dim_label_id,
      -- FOREIGN KEYS
      gitlab_dotcom_labels_source.project_id                            AS dim_project_id,
      IFNULL(gitlab_dotcom_labels_source.group_id,
        dim_project.ultimate_parent_namespace_id)                       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      --
      gitlab_dotcom_labels_source.group_id                              AS dim_namespace_id,
      gitlab_dotcom_labels_source.label_title,
      gitlab_dotcom_labels_source.label_type,
      gitlab_dotcom_labels_source.created_at,
      dim_date.date_id                                                  AS created_date_id
    FROM gitlab_dotcom_labels_source
    LEFT JOIN dim_project 
      ON gitlab_dotcom_labels_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_labels_source.created_at >= dim_namespace_plan_hist.valid_from
        AND gitlab_dotcom_labels_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date 
      ON TO_DATE(gitlab_dotcom_labels_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@dtownsend'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-08-04'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM renamed1a:T6dc,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_board_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, boards_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_boards_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      boards_source.board_id                                     AS dim_board_id,
      IFNULL(dim_project.dim_project_id, -1)                     AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)            AS dim_plan_id,
      dim_date.date_id                                           AS created_date_id,
      boards_source.created_at::TIMESTAMP                        AS created_at,
      boards_source.updated_at::TIMESTAMP                        AS updated_at
    FROM  boards_source
    LEFT JOIN dim_project 
      ON  boards_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND  boards_source.created_at >= dim_namespace_plan_hist.valid_from
        AND  boards_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE( boards_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-28",
    updated_date="2022-06-01"
) }}1b:T7b4,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, boards_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_boards_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_board)

    

), joined AS (

    SELECT 
      boards_source.board_id                                     AS dim_board_id,
      IFNULL(dim_project.dim_project_id, -1)                     AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)            AS dim_plan_id,
      dim_date.date_id                                           AS created_date_id,
      boards_source.created_at::TIMESTAMP                        AS created_at,
      boards_source.updated_at::TIMESTAMP                        AS updated_at
    FROM  boards_source
    LEFT JOIN dim_project 
      ON  boards_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND  boards_source.created_at >= dim_namespace_plan_hist.valid_from
        AND  boards_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE( boards_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-28'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined1c:T3d6f,WITH internal_issues AS (

  SELECT *
  FROM {{ ref('internal_issues') }}

),

cte_ns_explode AS ( 

  	SELECT namespace_id,
           ultimate_parent_id,
           upstream_lineage,
           s.value AS lineage_namespace,
           s.index AS rn
   FROM {{ ref('gitlab_dotcom_namespace_lineage_scd') }} AS a,
        LATERAL FLATTEN (a.upstream_lineage,OUTER=>TRUE) AS s
   WHERE is_current 

   ),cte_ns_get_path AS (

  	SELECT a.namespace_id,
           a.ultimate_parent_id,
           a.upstream_lineage,
           lineage_namespace,
           rn,
           b.namespace_path
   FROM cte_ns_explode AS a
   LEFT JOIN {{ ref('dim_namespace') }} AS b ON a.lineage_namespace = b.dim_namespace_id 

   ),cte_ns_restructure AS (
   
   SELECT namespace_id,
           ultimate_parent_id,
           upstream_lineage,
           array_agg(namespace_path) WITHIN GROUP (ORDER BY rn) AS regroup
   FROM cte_ns_get_path
   GROUP BY namespace_id,
            ultimate_parent_id,
            upstream_lineage 

    ), namespaces AS (

   SELECT namespace_id,
           ultimate_parent_id,
           upstream_lineage,
           array_to_string(regroup,'/') AS full_group_path
   FROM cte_ns_restructure 

   ), product_categories_yml_base AS (

    SELECT
        DISTINCT LOWER(group_name) AS group_name,
        LOWER(stage_section) AS section_name,
        LOWER(stage_display_name) AS stage_name,
        IFF(group_name LIKE '%::%',SPLIT_PART(LOWER(group_name),'::',1),NULL) as root_name
    FROM {{ ref('stages_groups_yaml_source') }}
    WHERE snapshot_date = (SELECT max(snapshot_date) FROM {{ ref('stages_groups_yaml_source') }})

), product_categories_yml AS (

    SELECT group_name,
       section_name,
       stage_name
    FROM product_categories_yml_base
    UNION ALL
    SELECT DISTINCT root_name AS group_name,
                section_name,
                stage_name
    FROM product_categories_yml_base
    WHERE root_name IS NOT NULL

), bot_users AS (

  SELECT dim_user_id
  FROM {{ ref('dim_user') }}
  WHERE email_domain LIKE '%noreply.gitlab.com'

),

milestones AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_milestones') }}

),

workflow_labels AS (

  SELECT * FROM {{ ref('engineering_analytics_workflow_labels') }}

),

final AS (

  SELECT
    internal_issues.issue_id                                                                                                                                                                                                                                                                           AS issue_id,
    internal_issues.issue_iid                                                                                                                                                                                                                                                                          AS issue_iid,
    internal_issues.author_id                                                                                                                                                                                                                                                                          AS author_id,
    IFF(bots.dim_user_id IS NOT NULL OR internal_issues.author_id = 1786152 OR ARRAY_CONTAINS('automation:bot-authored'::VARIANT, internal_issues.labels),
      TRUE, FALSE)                                                                                                                                                                                                                                                                                     AS is_created_by_bot,
    internal_issues.project_id                                                                                                                                                                                                                                                                         AS project_id,
    internal_issues.issue_created_at                                                                                                                                                                                                                                                                   AS created_at,
    internal_issues.issue_updated_at                                                                                                                                                                                                                                                                   AS updated_at,
    internal_issues.issue_closed_at                                                                                                                                                                                                                                                                    AS closed_at,
    DATE_TRUNC('month', internal_issues.issue_created_at)::DATE                                                                                                                                                                                                                                        AS created_month,
    DATE_TRUNC('month', internal_issues.issue_closed_at)::DATE                                                                                                                                                                                                                                         AS closed_month,
    IFF(internal_issues.issue_closed_at > internal_issues.issue_created_at, ROUND(TIMESTAMPDIFF(HOURS, internal_issues.issue_created_at, internal_issues.issue_closed_at) / 24, 2), 0)  AS days_to_close,
    internal_issues.issue_title                                                                                                                                                                                                                                                                        AS issue_title,
    internal_issues.issue_description                                                                                                                                                                                                                                                                  AS issue_description,
    internal_issues.milestone_id                                                                                                                                                                                                                                                                       AS milestone_id,
    milestones.milestone_title                                                                                                                                                                                                                                                                         AS milestone_title,
    milestones.milestone_description                                                                                                                                                                                                                                                                   AS milestone_description,
    milestones.start_date                                                                                                                                                                                                                                                                              AS milestone_start_date,
    milestones.due_date                                                                                                                                                                                                                                                                                AS milestone_due_date,
    internal_issues.weight                                                                                                                                                                                                                                                                             AS weight,
    internal_issues.namespace_id                                                 AS namespace_id,
    internal_issues.ultimate_parent_id                                           AS ultimate_parent_id,
    internal_issues.labels                                                                                                                                                                                                                                                                             AS labels,
    ARRAY_TO_STRING(internal_issues.labels, '|')                                                                                                                                                                                                                                                       AS masked_label_title,
    ARRAY_CONTAINS('community contribution'::VARIANT, internal_issues.labels)                                                                                                                                                                                                                          AS is_community_contribution,
    ARRAY_CONTAINS('security'::VARIANT, internal_issues.labels)                                                                                                                                                                                                                                        AS is_security,
    ARRAY_CONTAINS('corrective action'::VARIANT, internal_issues.
    labels)                                                                                 AS is_corrective_action,
    internal_issues.priority_tag                                                                                                                                                                                                                                                                       AS priority_label,
    internal_issues.severity_tag                                                                                                                                                                                                                                                                       AS severity_label,
    CASE
      WHEN array_contains('group::gitaly::cluster'::variant,internal_issues.labels)
        THEN 'gitaly::cluster'
      WHEN array_contains('group::gitaly::git'::variant,internal_issues.labels)
        THEN 'gitaly::git'
      WHEN array_contains('group::distribution::build'::variant,internal_issues.labels)
        THEN 'distribution::build'
      WHEN array_contains('group::distribution::deploy'::variant,internal_issues.labels)
        THEN 'distribution::deploy'
      WHEN array_contains('group::distribution::operate'::variant,internal_issues.labels)
        THEN 'distribution::operate'
        ELSE
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bgroup::*([^,]*)'), 'group::', '') IN (SELECT group_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bgroup::*([^,]*)'), 'group::', ''),'undefined') END                    AS group_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bsection::*([^,]*)'), 'section::', '') IN (SELECT section_name FROM product_categories_yml), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bsection::*([^,]*)'), 'section::', ''), 'undefined')            AS section_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', '') IN (SELECT stage_name FROM product_categories_yml), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', ''), 'undefined')                  AS stage_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\btype::*([^,]*)'), 'type::', '') IN ('bug', 'feature', 'maintenance'), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\btype::*([^,]*)'), 'type::', ''), 'undefined')
    AS type_label,
    CASE
      WHEN type_label = 'bug'
        THEN COALESCE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bbug::*([^,]*)'), 'undefined')
      WHEN type_label = 'maintenance'
        THEN COALESCE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bmaintenance::*([^,]*)'), 'undefined')
      WHEN type_label = 'feature'
        THEN COALESCE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bfeature::*([^,]*)'), 'undefined')
      ELSE 'undefined' END                                                                                                                                                                                                                                                                             AS subtype_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bworkflow::*([^,]*)'), 'workflow::', '') IN (SELECT workflow_label FROM workflow_labels), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bworkflow::*([^,]*)'), 'workflow::', ''), 'undefined') AS workflow_label,
    IFF(ARRAY_CONTAINS('infradev'::VARIANT, internal_issues.labels), TRUE, FALSE)                                                AS is_infradev,
    IFF(ARRAY_CONTAINS('fedramp::vulnerability'::VARIANT, internal_issues.labels), TRUE, FALSE)                             AS fedramp_vulnerability,
    projects.visibility_level                                                                                                                                                                                                                                                                          AS visibility_level,
    projects.project_path                                                                                                                                                                                                                                                                              AS project_path,
    ns.full_group_path                                                    AS full_group_path,

    CASE
      WHEN projects.visibility_level = 'public' AND internal_issues.issue_is_confidential = FALSE
        THEN '[' || REPLACE(REPLACE(LEFT(internal_issues.issue_title, 64), '[', ''), ']', '') || '](https://gitlab.com/' || full_group_path || '/' || projects.project_path || '/-/issues/' || internal_issues.issue_iid || ')'
      ELSE 'https://gitlab.com/' || full_group_path || '/' || projects.project_path || '/-/issues/' || internal_issues.issue_iid
    END                                                                                                                                                                                                                                                                                                AS url,
    internal_issues.is_part_of_product
  FROM internal_issues
  LEFT JOIN {{ ref('dim_project') }} AS projects
    ON projects.dim_project_id = internal_issues.project_id
  LEFT JOIN bot_users AS bots
    ON bots.dim_user_id = internal_issues.author_id
  LEFT JOIN namespaces AS ns
    ON ns.namespace_id = projects.dim_namespace_id
  LEFT JOIN milestones
    ON milestones.milestone_id = internal_issues.milestone_id
)

SELECT *
FROM final1d:T3da3,WITH internal_issues AS (

  SELECT *
  FROM "PROD".workspace_engineering.internal_issues

),

cte_ns_explode AS ( 

  	SELECT namespace_id,
           ultimate_parent_id,
           upstream_lineage,
           s.value AS lineage_namespace,
           s.index AS rn
   FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_scd AS a,
        LATERAL FLATTEN (a.upstream_lineage,OUTER=>TRUE) AS s
   WHERE is_current 

   ),cte_ns_get_path AS (

  	SELECT a.namespace_id,
           a.ultimate_parent_id,
           a.upstream_lineage,
           lineage_namespace,
           rn,
           b.namespace_path
   FROM cte_ns_explode AS a
   LEFT JOIN "PROD".common.dim_namespace AS b ON a.lineage_namespace = b.dim_namespace_id 

   ),cte_ns_restructure AS (
   
   SELECT namespace_id,
           ultimate_parent_id,
           upstream_lineage,
           array_agg(namespace_path) WITHIN GROUP (ORDER BY rn) AS regroup
   FROM cte_ns_get_path
   GROUP BY namespace_id,
            ultimate_parent_id,
            upstream_lineage 

    ), namespaces AS (

   SELECT namespace_id,
           ultimate_parent_id,
           upstream_lineage,
           array_to_string(regroup,'/') AS full_group_path
   FROM cte_ns_restructure 

   ), product_categories_yml_base AS (

    SELECT
        DISTINCT LOWER(group_name) AS group_name,
        LOWER(stage_section) AS section_name,
        LOWER(stage_display_name) AS stage_name,
        IFF(group_name LIKE '%::%',SPLIT_PART(LOWER(group_name),'::',1),NULL) as root_name
    FROM "PREP".gitlab_data_yaml.stages_groups_yaml_source
    WHERE snapshot_date = (SELECT max(snapshot_date) FROM "PREP".gitlab_data_yaml.stages_groups_yaml_source)

), product_categories_yml AS (

    SELECT group_name,
       section_name,
       stage_name
    FROM product_categories_yml_base
    UNION ALL
    SELECT DISTINCT root_name AS group_name,
                section_name,
                stage_name
    FROM product_categories_yml_base
    WHERE root_name IS NOT NULL

), bot_users AS (

  SELECT dim_user_id
  FROM "PROD".common.dim_user
  WHERE email_domain LIKE '%noreply.gitlab.com'

),

milestones AS (

  SELECT *
  FROM "PREP".sensitive.gitlab_dotcom_milestones

),

workflow_labels AS (

  SELECT * FROM "PROD".legacy.engineering_analytics_workflow_labels

),

final AS (

  SELECT
    internal_issues.issue_id                                                                                                                                                                                                                                                                           AS issue_id,
    internal_issues.issue_iid                                                                                                                                                                                                                                                                          AS issue_iid,
    internal_issues.author_id                                                                                                                                                                                                                                                                          AS author_id,
    IFF(bots.dim_user_id IS NOT NULL OR internal_issues.author_id = 1786152 OR ARRAY_CONTAINS('automation:bot-authored'::VARIANT, internal_issues.labels),
      TRUE, FALSE)                                                                                                                                                                                                                                                                                     AS is_created_by_bot,
    internal_issues.project_id                                                                                                                                                                                                                                                                         AS project_id,
    internal_issues.issue_created_at                                                                                                                                                                                                                                                                   AS created_at,
    internal_issues.issue_updated_at                                                                                                                                                                                                                                                                   AS updated_at,
    internal_issues.issue_closed_at                                                                                                                                                                                                                                                                    AS closed_at,
    DATE_TRUNC('month', internal_issues.issue_created_at)::DATE                                                                                                                                                                                                                                        AS created_month,
    DATE_TRUNC('month', internal_issues.issue_closed_at)::DATE                                                                                                                                                                                                                                         AS closed_month,
    IFF(internal_issues.issue_closed_at > internal_issues.issue_created_at, ROUND(TIMESTAMPDIFF(HOURS, internal_issues.issue_created_at, internal_issues.issue_closed_at) / 24, 2), 0)  AS days_to_close,
    internal_issues.issue_title                                                                                                                                                                                                                                                                        AS issue_title,
    internal_issues.issue_description                                                                                                                                                                                                                                                                  AS issue_description,
    internal_issues.milestone_id                                                                                                                                                                                                                                                                       AS milestone_id,
    milestones.milestone_title                                                                                                                                                                                                                                                                         AS milestone_title,
    milestones.milestone_description                                                                                                                                                                                                                                                                   AS milestone_description,
    milestones.start_date                                                                                                                                                                                                                                                                              AS milestone_start_date,
    milestones.due_date                                                                                                                                                                                                                                                                                AS milestone_due_date,
    internal_issues.weight                                                                                                                                                                                                                                                                             AS weight,
    internal_issues.namespace_id                                                 AS namespace_id,
    internal_issues.ultimate_parent_id                                           AS ultimate_parent_id,
    internal_issues.labels                                                                                                                                                                                                                                                                             AS labels,
    ARRAY_TO_STRING(internal_issues.labels, '|')                                                                                                                                                                                                                                                       AS masked_label_title,
    ARRAY_CONTAINS('community contribution'::VARIANT, internal_issues.labels)                                                                                                                                                                                                                          AS is_community_contribution,
    ARRAY_CONTAINS('security'::VARIANT, internal_issues.labels)                                                                                                                                                                                                                                        AS is_security,
    ARRAY_CONTAINS('corrective action'::VARIANT, internal_issues.
    labels)                                                                                 AS is_corrective_action,
    internal_issues.priority_tag                                                                                                                                                                                                                                                                       AS priority_label,
    internal_issues.severity_tag                                                                                                                                                                                                                                                                       AS severity_label,
    CASE
      WHEN array_contains('group::gitaly::cluster'::variant,internal_issues.labels)
        THEN 'gitaly::cluster'
      WHEN array_contains('group::gitaly::git'::variant,internal_issues.labels)
        THEN 'gitaly::git'
      WHEN array_contains('group::distribution::build'::variant,internal_issues.labels)
        THEN 'distribution::build'
      WHEN array_contains('group::distribution::deploy'::variant,internal_issues.labels)
        THEN 'distribution::deploy'
      WHEN array_contains('group::distribution::operate'::variant,internal_issues.labels)
        THEN 'distribution::operate'
        ELSE
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bgroup::*([^,]*)'), 'group::', '') IN (SELECT group_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bgroup::*([^,]*)'), 'group::', ''),'undefined') END                    AS group_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bsection::*([^,]*)'), 'section::', '') IN (SELECT section_name FROM product_categories_yml), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bsection::*([^,]*)'), 'section::', ''), 'undefined')            AS section_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', '') IN (SELECT stage_name FROM product_categories_yml), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', ''), 'undefined')                  AS stage_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\btype::*([^,]*)'), 'type::', '') IN ('bug', 'feature', 'maintenance'), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\btype::*([^,]*)'), 'type::', ''), 'undefined')
    AS type_label,
    CASE
      WHEN type_label = 'bug'
        THEN COALESCE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bbug::*([^,]*)'), 'undefined')
      WHEN type_label = 'maintenance'
        THEN COALESCE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bmaintenance::*([^,]*)'), 'undefined')
      WHEN type_label = 'feature'
        THEN COALESCE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bfeature::*([^,]*)'), 'undefined')
      ELSE 'undefined' END                                                                                                                                                                                                                                                                             AS subtype_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bworkflow::*([^,]*)'), 'workflow::', '') IN (SELECT workflow_label FROM workflow_labels), REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_issues.labels, ','), '\\bworkflow::*([^,]*)'), 'workflow::', ''), 'undefined') AS workflow_label,
    IFF(ARRAY_CONTAINS('infradev'::VARIANT, internal_issues.labels), TRUE, FALSE)                                                AS is_infradev,
    IFF(ARRAY_CONTAINS('fedramp::vulnerability'::VARIANT, internal_issues.labels), TRUE, FALSE)                             AS fedramp_vulnerability,
    projects.visibility_level                                                                                                                                                                                                                                                                          AS visibility_level,
    projects.project_path                                                                                                                                                                                                                                                                              AS project_path,
    ns.full_group_path                                                    AS full_group_path,

    CASE
      WHEN projects.visibility_level = 'public' AND internal_issues.issue_is_confidential = FALSE
        THEN '[' || REPLACE(REPLACE(LEFT(internal_issues.issue_title, 64), '[', ''), ']', '') || '](https://gitlab.com/' || full_group_path || '/' || projects.project_path || '/-/issues/' || internal_issues.issue_iid || ')'
      ELSE 'https://gitlab.com/' || full_group_path || '/' || projects.project_path || '/-/issues/' || internal_issues.issue_iid
    END                                                                                                                                                                                                                                                                                                AS url,
    internal_issues.is_part_of_product
  FROM internal_issues
  LEFT JOIN "PROD".common.dim_project AS projects
    ON projects.dim_project_id = internal_issues.project_id
  LEFT JOIN bot_users AS bots
    ON bots.dim_user_id = internal_issues.author_id
  LEFT JOIN namespaces AS ns
    ON ns.namespace_id = projects.dim_namespace_id
  LEFT JOIN milestones
    ON milestones.milestone_id = internal_issues.milestone_id
)

SELECT *
FROM final1e:T740,{{ config(
    materialized='table',
    tags=["mnpi_exception", "product"]
) }}

{{ simple_cte([
    ('dim_namespace', 'dim_namespace'),
    ('fct_event_valid', 'fct_event_valid'),
    ('dim_user', 'dim_user'),
    ('dim_project', 'dim_project'),
    ('dim_date', 'dim_date')
    ])
}},

--limit mart to rolling 24 months for performance reasons

fact AS (

  SELECT
    {{ dbt_utils.star(from=ref('fct_event_valid'), except=["CREATED_BY",
        "UPDATED_BY","CREATED_DATE","UPDATED_DATE","MODEL_CREATED_DATE","MODEL_UPDATED_DATE","DBT_UPDATED_AT","DBT_CREATED_AT"]) }}
  FROM fct_event_valid
  WHERE event_date >= DATEADD('month', -24, DATE_TRUNC('month',CURRENT_DATE))
  
), 

fact_with_dims AS (

  SELECT
    fact.*,
    dim_namespace.namespace_type AS ultimate_parent_namespace_type,
    dim_namespace.namespace_is_internal,
    dim_namespace.namespace_creator_is_blocked,
    dim_namespace.created_at AS namespace_created_at,
    CAST(dim_namespace.created_at AS DATE) AS namespace_created_date,
    dim_user.created_at AS user_created_at,
    COALESCE(dim_project.is_learn_gitlab, FALSE) AS project_is_learn_gitlab,
    COALESCE(dim_project.is_imported, FALSE) AS project_is_imported,
    dim_date.first_day_of_month AS event_calendar_month,
    dim_date.quarter_name AS event_calendar_quarter,
    dim_date.year_actual AS event_calendar_year
  FROM fact
  LEFT JOIN dim_namespace
    ON fact.dim_ultimate_parent_namespace_id = dim_namespace.dim_namespace_id
  LEFT JOIN dim_user
    ON fact.dim_user_sk = dim_user.dim_user_sk
  LEFT JOIN dim_project
    ON fact.dim_project_id = dim_project.dim_project_id
  LEFT JOIN dim_date
    ON fact.dim_event_date_id = dim_date.date_id    

)

{{ dbt_audit(
    cte_ref="fact_with_dims",
    created_by="@iweeks",
    updated_by="@cbraza",
    created_date="2022-05-05",
    updated_date="2023-03-01"
) }}1f:T9f4,**Description:** Enriched GitLab.com usage event data for valid events. This is an enhanced version of `fct_event_valid`, filtered to the last 24 months
- [Targets and Actions](https://docs.gitlab.com/ee/api/events.html) activity by Users and [Namespaces](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/namespace/) within the GitLab.com application are captured and refreshed periodically throughout the day.  Targets are objects ie. issue, milestone, merge_request and Actions have effect on Targets, ie. approved, closed, commented, created, etc.
- This data is enriched with additional user, namespace, and project attributes for ease of analysis

**Data Grain:**
- event_pk

**Filters Applied to Model:**
- `Inherited` - Include valid events for standard analysis and reporting:
  - Exclude events where the event created date < the user created date (`days_since_user_creation_at_event_date >= 0`)
    - These are usually events from projects that were created before the GitLab.com user and then imported after the user is created 
  - Exclude events from blocked users (based on the current user state)
- Rolling 24 months of data

**Business Logic in this Model:**
- `Inherited` - A namespace's plan information (ex: `plan_name_at_event_date`) is determined by the plan for the last event on a given day
- `Inherited` - The ultimate parent namespace's subscription, billing, and account information (ex: `dim_latest_subscription_id`) reflects the most recent available attributes associated with that namespace
- `Inherited` - `dim_latest_product_tier_id` reflects the _current_ product tier of the namespace
- `Inherited` - Not all events have a user associated with them (ex: 'milestones'), and not all events have a namespace associated with them (ex: 'users_created'). Therefore it is expected that `dim_user_sk` or `dim_ultimate_parent_namespace_id` will be NULL for these events
- `Inherited` - `section_name`, `stage_name`, `group_name`, and xMAU metric flags (ex: `is_gmau`) are based on the _current_ event mappings and may not match the mapping at the time of the event

**Other Comments:**
- Note about the `action` event: This "event" captures everything from the [Events API](https://docs.gitlab.com/ee/api/events.html) - issue comments, MRs created, etc. While the `action` event is mapped to the Manage stage, the events included actually span multiple stages (plan, create, etc), which is why this is used for UMAU. Be mindful of the impact of including `action` during stage adoption analysis.20:Ta6b,



WITH dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), fct_event_valid AS (

    SELECT * 
    FROM "PROD".common.fct_event_valid

), dim_user AS (

    SELECT * 
    FROM "PROD".common.dim_user

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

),

--limit mart to rolling 24 months for performance reasons

fact AS (

  SELECT
    "EVENT_PK",
  "DIM_EVENT_DATE_ID",
  "DIM_ULTIMATE_PARENT_NAMESPACE_ID",
  "DIM_PROJECT_ID",
  "DIM_USER_SK",
  "DIM_USER_ID",
  "DIM_LATEST_PRODUCT_TIER_ID",
  "DIM_LATEST_SUBSCRIPTION_ID",
  "DIM_CRM_ACCOUNT_ID",
  "DIM_BILLING_ACCOUNT_ID",
  "ORDER_ID",
  "EVENT_CREATED_AT",
  "EVENT_DATE",
  "IS_NULL_USER",
  "GROUP_NAME",
  "SECTION_NAME",
  "STAGE_NAME",
  "IS_SMAU",
  "IS_GMAU",
  "IS_UMAU",
  "PARENT_ID",
  "PARENT_TYPE",
  "EVENT_NAME",
  "PLAN_ID_AT_EVENT_DATE",
  "PLAN_NAME_AT_EVENT_DATE",
  "PLAN_WAS_PAID_AT_EVENT_DATE",
  "DAYS_SINCE_USER_CREATION_AT_EVENT_DATE",
  "DAYS_SINCE_NAMESPACE_CREATION_AT_EVENT_DATE",
  "DAYS_SINCE_PROJECT_CREATION_AT_EVENT_DATE",
  "DATA_SOURCE"
  FROM fct_event_valid
  WHERE event_date >= DATEADD('month', -24, DATE_TRUNC('month',CURRENT_DATE))
  
), 

fact_with_dims AS (

  SELECT
    fact.*,
    dim_namespace.namespace_type AS ultimate_parent_namespace_type,
    dim_namespace.namespace_is_internal,
    dim_namespace.namespace_creator_is_blocked,
    dim_namespace.created_at AS namespace_created_at,
    CAST(dim_namespace.created_at AS DATE) AS namespace_created_date,
    dim_user.created_at AS user_created_at,
    COALESCE(dim_project.is_learn_gitlab, FALSE) AS project_is_learn_gitlab,
    COALESCE(dim_project.is_imported, FALSE) AS project_is_imported,
    dim_date.first_day_of_month AS event_calendar_month,
    dim_date.quarter_name AS event_calendar_quarter,
    dim_date.year_actual AS event_calendar_year
  FROM fact
  LEFT JOIN dim_namespace
    ON fact.dim_ultimate_parent_namespace_id = dim_namespace.dim_namespace_id
  LEFT JOIN dim_user
    ON fact.dim_user_sk = dim_user.dim_user_sk
  LEFT JOIN dim_project
    ON fact.dim_project_id = dim_project.dim_project_id
  LEFT JOIN dim_date
    ON fact.dim_event_date_id = dim_date.date_id    

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@cbraza'::VARCHAR       AS updated_by,
      '2022-05-05'::DATE        AS model_created_date,
      '2023-03-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM fact_with_dims21:T776,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_milestone_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
    ('dim_issue', 'dim_issue'),
    ('dim_epic', 'dim_epic')
]) }}

, milestones AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_milestones_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      milestone_id                                                                      AS dim_milestone_id,
      milestones.created_at,
      milestones.updated_at,
      dim_date.date_id                                                                  AS created_date_id,
      IFNULL(dim_project.dim_project_id, -1)                                            AS dim_project_id,
      COALESCE(dim_project.ultimate_parent_namespace_id, milestones.group_id, -1)       AS ultimate_parent_namespace_id,
      COALESCE(dim_namespace_plan_hist.dim_plan_id, dim_epic.dim_plan_id, 34)           AS dim_plan_id
    FROM milestones
    LEFT JOIN dim_project
      ON milestones.project_id = dim_project.dim_project_id
    LEFT JOIN dim_epic
      ON milestones.group_id = dim_epic.dim_epic_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  milestones.created_at >= dim_namespace_plan_hist.valid_from
      AND  milestones.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date as dim_date ON TO_DATE(milestones.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-04-01",
    updated_date="2022-06-01"
) }}22:T895,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), dim_issue AS (

    SELECT * 
    FROM "PROD".common.dim_issue

), dim_epic AS (

    SELECT * 
    FROM "PROD".common.dim_epic

)

, milestones AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_milestones_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_milestone)

    

), joined AS (

    SELECT 
      milestone_id                                                                      AS dim_milestone_id,
      milestones.created_at,
      milestones.updated_at,
      dim_date.date_id                                                                  AS created_date_id,
      IFNULL(dim_project.dim_project_id, -1)                                            AS dim_project_id,
      COALESCE(dim_project.ultimate_parent_namespace_id, milestones.group_id, -1)       AS ultimate_parent_namespace_id,
      COALESCE(dim_namespace_plan_hist.dim_plan_id, dim_epic.dim_plan_id, 34)           AS dim_plan_id
    FROM milestones
    LEFT JOIN dim_project
      ON milestones.project_id = dim_project.dim_project_id
    LEFT JOIN dim_epic
      ON milestones.group_id = dim_epic.dim_epic_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  milestones.created_at >= dim_namespace_plan_hist.valid_from
      AND  milestones.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date as dim_date ON TO_DATE(milestones.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-04-01'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined23:T8a6,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_ci_stage_id"
    })
}}

{{ simple_cte([
    ('dim_project', 'dim_project'),
    ('dim_ci_pipeline', 'dim_ci_pipeline'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_date', 'dim_date')
]) }}

, ci_stages AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_ci_stages_dedupe_source') }}
    WHERE created_at IS NOT NULL

), joined AS (
  
    SELECT
      ci_stages.id                                              AS dim_ci_stage_id,
      IFNULL(dim_project.dim_project_id, -1)                    AS dim_project_id,
      IFNULL(dim_ci_pipeline.dim_ci_pipeline_id, -1)            AS dim_ci_pipeline_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)           AS dim_plan_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)      AS ultimate_parent_namespace_id,
      dim_date.date_id                                          AS created_date_id,
      ci_stages.created_at::TIMESTAMP                           AS created_at,
      ci_stages.updated_at::TIMESTAMP                           AS updated_at,
      ci_stages.name                                            AS ci_stage_name,
      ci_stages.status                                          AS ci_stage_status,
      ci_stages.lock_version                                    AS lock_version,
      ci_stages.position                                        AS position
    FROM ci_stages
    LEFT JOIN dim_project
      ON ci_stages.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND ci_stages.created_at >= dim_namespace_plan_hist.valid_from
      AND ci_stages.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    LEFT JOIN dim_ci_pipeline
      ON ci_stages.pipeline_id = dim_ci_pipeline.dim_ci_pipeline_id
    INNER JOIN dim_date
      ON TO_DATE(ci_stages.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@mpeychet_",
    updated_by="@chrissharp",
    created_date="2021-06-29",
    updated_date="2022-06-01"
) }}24:T9ae,





WITH dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), dim_ci_pipeline AS (

    SELECT * 
    FROM "PROD".common.dim_ci_pipeline

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

)

, ci_stages AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_ci_stages_dedupe_source
    WHERE created_at IS NOT NULL

), joined AS (
  
    SELECT
      ci_stages.id                                              AS dim_ci_stage_id,
      IFNULL(dim_project.dim_project_id, -1)                    AS dim_project_id,
      IFNULL(dim_ci_pipeline.dim_ci_pipeline_id, -1)            AS dim_ci_pipeline_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)           AS dim_plan_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)      AS ultimate_parent_namespace_id,
      dim_date.date_id                                          AS created_date_id,
      ci_stages.created_at::TIMESTAMP                           AS created_at,
      ci_stages.updated_at::TIMESTAMP                           AS updated_at,
      ci_stages.name                                            AS ci_stage_name,
      ci_stages.status                                          AS ci_stage_status,
      ci_stages.lock_version                                    AS lock_version,
      ci_stages.position                                        AS position
    FROM ci_stages
    LEFT JOIN dim_project
      ON ci_stages.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND ci_stages.created_at >= dim_namespace_plan_hist.valid_from
      AND ci_stages.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    LEFT JOIN dim_ci_pipeline
      ON ci_stages.pipeline_id = dim_ci_pipeline.dim_ci_pipeline_id
    INNER JOIN dim_date
      ON TO_DATE(ci_stages.created_at) = dim_date.date_day

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-06-29'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined25:T784,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_ci_trigger_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, ci_trigger_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_ci_triggers_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      ci_trigger_source.ci_trigger_id                                   AS dim_ci_trigger_id,
      ci_trigger_source.owner_id                                        AS owner_id,
      IFNULL(dim_project.dim_project_id, -1)                            AS dim_project_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)              AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      dim_date.date_id                                                  AS created_date_id,
      ci_trigger_source.created_at                                      AS created_at,
      ci_trigger_source.updated_at                                      AS updated_at
    FROM ci_trigger_source
    LEFT JOIN dim_project 
      ON ci_trigger_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND ci_trigger_source.created_at >= dim_namespace_plan_hist.valid_from
        AND ci_trigger_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(ci_trigger_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-04-06",
    updated_date="2022-06-01"
) }}26:T85c,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, ci_trigger_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_ci_triggers_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_ci_trigger)

    

), joined AS (

    SELECT 
      ci_trigger_source.ci_trigger_id                                   AS dim_ci_trigger_id,
      ci_trigger_source.owner_id                                        AS owner_id,
      IFNULL(dim_project.dim_project_id, -1)                            AS dim_project_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)              AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      dim_date.date_id                                                  AS created_date_id,
      ci_trigger_source.created_at                                      AS created_at,
      ci_trigger_source.updated_at                                      AS updated_at
    FROM ci_trigger_source
    LEFT JOIN dim_project 
      ON ci_trigger_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND ci_trigger_source.created_at >= dim_namespace_plan_hist.valid_from
        AND ci_trigger_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(ci_trigger_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-04-06'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined27:T791,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_resource_weight_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
    ('dim_issue', 'dim_issue')
]) }}

, resource_weight_events AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_resource_weight_events_source') }} 
    {% if is_incremental() %}

    WHERE created_at > (SELECT MAX(created_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      resource_weight_event_id                                      AS dim_resource_weight_id,
      resource_weight_events.user_id                                AS dim_user_id,
      resource_weight_events.created_at,
      dim_date.date_id                                              AS created_date_id,
      IFNULL(dim_project.dim_project_id, -1)                        AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)          AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)               AS dim_plan_id
    FROM resource_weight_events
    LEFT JOIN dim_issue
      ON resource_weight_events.issue_id = dim_issue.dim_issue_id
    LEFT JOIN dim_project
      ON dim_issue.dim_project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  resource_weight_events.created_at >= dim_namespace_plan_hist.valid_from
      AND  resource_weight_events.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(resource_weight_events.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-04-01",
    updated_date="2022-04-01"
) }}28:T893,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), dim_issue AS (

    SELECT * 
    FROM "PROD".common.dim_issue

)

, resource_weight_events AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_resource_weight_events_source 
    

    WHERE created_at > (SELECT MAX(created_at) FROM "PROD".common_prep.prep_issue_resource_weight)

    

), joined AS (

    SELECT 
      resource_weight_event_id                                      AS dim_resource_weight_id,
      resource_weight_events.user_id                                AS dim_user_id,
      resource_weight_events.created_at,
      dim_date.date_id                                              AS created_date_id,
      IFNULL(dim_project.dim_project_id, -1)                        AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)          AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)               AS dim_plan_id
    FROM resource_weight_events
    LEFT JOIN dim_issue
      ON resource_weight_events.issue_id = dim_issue.dim_issue_id
    LEFT JOIN dim_project
      ON dim_issue.dim_project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  resource_weight_events.created_at >= dim_namespace_plan_hist.valid_from
      AND  resource_weight_events.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(resource_weight_events.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-04-01'::DATE        AS model_created_date,
      '2022-04-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined29:T72a,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_ci_pipeline_schedule_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project')
]) }}

, pipeline_schedule AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_ci_pipeline_schedules_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      ci_pipeline_schedule_id                                       AS dim_ci_pipeline_schedule_id,
      pipeline_schedule.owner_id                                    AS dim_user_id,
      pipeline_schedule.created_at,
      pipeline_schedule.updated_at,
      dim_date.date_id                                              AS created_date_id,
      IFNULL(dim_project.dim_project_id, -1)                        AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)          AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)               AS dim_plan_id
    FROM pipeline_schedule
    LEFT JOIN dim_project
      ON pipeline_schedule.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  pipeline_schedule.created_at >= dim_namespace_plan_hist.valid_from
      AND  pipeline_schedule.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(pipeline_schedule.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-04-01",
    updated_date="2022-06-01"
) }}2a:T803,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, pipeline_schedule AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_ci_pipeline_schedules_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_ci_pipeline_schedule)

    

), joined AS (

    SELECT 
      ci_pipeline_schedule_id                                       AS dim_ci_pipeline_schedule_id,
      pipeline_schedule.owner_id                                    AS dim_user_id,
      pipeline_schedule.created_at,
      pipeline_schedule.updated_at,
      dim_date.date_id                                              AS created_date_id,
      IFNULL(dim_project.dim_project_id, -1)                        AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)          AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)               AS dim_plan_id
    FROM pipeline_schedule
    LEFT JOIN dim_project
      ON pipeline_schedule.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  pipeline_schedule.created_at >= dim_namespace_plan_hist.valid_from
      AND  pipeline_schedule.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(pipeline_schedule.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-04-01'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined2b:T6ee,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_service_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, service_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_integrations_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      service_source.service_id                                  AS dim_service_id,
      IFNULL(dim_project.dim_project_id, -1)                     AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)            AS dim_plan_id,
      dim_date.date_id                                           AS created_date_id,
      service_source.created_at::TIMESTAMP                       AS created_at,
      service_source.updated_at::TIMESTAMP                       AS updated_at
    FROM  service_source
    LEFT JOIN dim_project 
      ON  service_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  service_source.created_at >= dim_namespace_plan_hist.valid_from
      AND  service_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(service_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-28",
    updated_date="2022-08-03"
) }}2c:T7c6,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, service_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_service)

    

), joined AS (

    SELECT 
      service_source.service_id                                  AS dim_service_id,
      IFNULL(dim_project.dim_project_id, -1)                     AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)       AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)            AS dim_plan_id,
      dim_date.date_id                                           AS created_date_id,
      service_source.created_at::TIMESTAMP                       AS created_at,
      service_source.updated_at::TIMESTAMP                       AS updated_at
    FROM  service_source
    LEFT JOIN dim_project 
      ON  service_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND  service_source.created_at >= dim_namespace_plan_hist.valid_from
      AND  service_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(service_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-28'::DATE        AS model_created_date,
      '2022-08-03'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined2d:T2939,WITH internal_merge_requests AS (

  SELECT *
  FROM {{ ref('internal_merge_requests') }}

), namespaces AS (

    SELECT *
    FROM {{ ref('dim_namespace') }}

), product_categories_yml_base AS (

    SELECT
        DISTINCT LOWER(group_name) AS group_name,
        LOWER(stage_section) AS section_name,
        LOWER(stage_display_name) AS stage_name,
        IFF(group_name LIKE '%::%',SPLIT_PART(LOWER(group_name),'::',1),NULL) as root_name
    FROM {{ ref('stages_groups_yaml_source') }}
    WHERE snapshot_date = (SELECT max(snapshot_date) FROM {{ ref('stages_groups_yaml_source') }})

), product_categories_yml AS (

    SELECT group_name,
       section_name,
       stage_name
    FROM product_categories_yml_base
    UNION ALL
    SELECT DISTINCT root_name AS group_name,
                section_name,
                stage_name
    FROM product_categories_yml_base
    WHERE root_name IS NOT NULL
    
), bot_users AS (

    SELECT dim_user_id
    FROM {{ ref('dim_user') }}
    WHERE email_domain LIKE '%noreply.gitlab.com'

), milestones AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_milestones') }}

),engineering_merge_requests AS (

  SELECT
    internal_merge_requests.merge_request_id                                                                                    AS merge_request_id,
    internal_merge_requests.merge_request_iid                                                                                   AS merge_request_iid,
    internal_merge_requests.author_id                                                                                           AS author_id,
    IFF(bots.dim_user_id IS NOT NULL or internal_merge_requests.author_id = 1786152 or ARRAY_CONTAINS('automation:bot-authored'::variant, internal_merge_requests.labels),
        TRUE, FALSE)                                                                                                            AS is_created_by_bot,
    internal_merge_requests.assignee_id                                                                                         AS assignee_id,
    internal_merge_requests.project_id                                                                                          AS project_id,
    internal_merge_requests.target_project_id                                                                                   AS target_project_id,
    internal_merge_requests.merge_request_state                                                                                 AS merge_request_state,
    internal_merge_requests.created_at                                                                                          AS created_at,
    internal_merge_requests.updated_at                                                                                          AS updated_at,
    internal_merge_requests.merged_at                                                                                           AS merged_at,
    DATE_TRUNC('month',internal_merge_requests.created_at)::date                                                                AS created_month,
    DATE_TRUNC('month',internal_merge_requests.merged_at)::date                                                                 AS merge_month,
    ROUND(TIMESTAMPDIFF(HOURS, internal_merge_requests.merge_request_created_at, internal_merge_requests.merged_at)/24,2)       AS days_to_merge,
    internal_merge_requests.merge_request_title                                                                                 AS merge_request_title,
    internal_merge_requests.merge_request_description                                                                           AS merge_request_description,
    internal_merge_requests.milestone_id                                                                                        AS milestone_id,
    internal_merge_requests.milestone_title                                                                                     AS milestone_title,
    internal_merge_requests.milestone_description                                                                               AS milestone_description,
    milestones.start_date AS milestone_start_date,
    milestones.due_date AS milestone_due_date,
    internal_merge_requests.namespace_id                                                                                        AS namespace_id,
    internal_merge_requests.ultimate_parent_id AS ultimate_parent_id,
    internal_merge_requests.labels                                                                                              AS labels,
    ARRAY_TO_STRING(internal_merge_requests.labels,'|')                                                                         AS masked_label_title,
    ARRAY_CONTAINS('community contribution'::variant, internal_merge_requests.labels)                                           AS is_community_contribution,
    ARRAY_CONTAINS('security'::variant, internal_merge_requests.labels)                                                         AS is_security,
    IFNULL(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bpriority::([0-9]+)'), 'priority::', ''),'undefined')                                                                                                                    AS priority_label,
    IFNULL(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bseverity::([0-9]+)'), 'severity::', ''),'undefined')                                                                                                                    AS severity_label,
    CASE
      WHEN array_contains('group::gitaly::cluster'::variant,internal_merge_requests.labels)
        THEN 'gitaly::cluster'
      WHEN array_contains('group::gitaly::git'::variant,internal_merge_requests.labels)
        THEN 'gitaly::git'
      WHEN array_contains('group::distribution::build'::variant,internal_merge_requests.labels)
        THEN 'distribution::build'
      WHEN array_contains('group::distribution::deploy'::variant,internal_merge_requests.labels)
        THEN 'distribution::deploy'
      WHEN array_contains('group::distribution::operate'::variant,internal_merge_requests.labels)
        THEN 'distribution::operate'
        ELSE
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bgroup::*([^,]*)'), 'group::', '') IN (SELECT group_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bgroup::*([^,]*)'), 'group::', ''),'undefined') END                    AS group_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bsection::*([^,]*)'), 'section::', '') IN (SELECT section_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bsection::*([^,]*)'), 'section::', ''),'undefined')                                                                                                                AS section_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', '') IN (SELECT stage_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', ''),'undefined')                                                                                                                    AS stage_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\btype::*([^,]*)'), 'type::', '') IN ('bug','feature','maintenance'),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\btype::*([^,]*)'), 'type::', ''),'undefined') 
                                                                                                                                AS type_label,
    CASE
        WHEN type_label = 'bug' 
            THEN REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','),'\\bbug::*([^,]*)') 
        WHEN type_label = 'maintenance' 
            THEN REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','),'\\bmaintenance::*([^,]*)') 
        WHEN type_label = 'feature' 
            THEN REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','),'\\bfeature::*([^,]*)') 
        ELSE 'undefined' END                                                                                                    AS subtype_label,
    projects.visibility_level                                                                                                   AS visibility_level,
    CASE
        WHEN ns_4.dim_namespace_id IS NOT NULL
            THEN ns_4.namespace_path || '/' || ns_3.namespace_path || '/' || ns_2.namespace_path || '/' || ns_1.namespace_path || '/' ||  ns.namespace_path
        WHEN ns_3.dim_namespace_id IS NOT NULL 
            THEN ns_3.namespace_path || '/' || ns_2.namespace_path || '/' || ns_1.namespace_path || '/' ||  ns.namespace_path
        WHEN ns_2.dim_namespace_id IS NOT NULL 
            THEN ns_2.namespace_path || '/' || ns_1.namespace_path || '/' ||  ns.namespace_path
        WHEN ns_1.dim_namespace_id IS NOT NULL 
            THEN ns_1.namespace_path || '/' || ns.namespace_path
        ELSE  ns.namespace_path END                                                                                             AS full_group_path,
    'https://gitlab.com/' || full_group_path || '/' || projects.project_path || '/-/merge_requests/' || internal_merge_requests.merge_request_iid  AS url
  FROM internal_merge_requests
  LEFT JOIN {{ ref('dim_project') }} AS projects
    ON projects.dim_project_id = internal_merge_requests.target_project_id
  LEFT JOIN bot_users AS bots
    ON bots.dim_user_id = internal_merge_requests.author_id
  LEFT JOIN namespaces AS ns
    ON ns.dim_namespace_id = projects.dim_namespace_id
  LEFT JOIN namespaces ns_1 
    ON ns_1.dim_namespace_id = ns.parent_id and ns.namespace_is_ultimate_parent = FALSE
  LEFT JOIN namespaces ns_2 
    ON ns_2.dim_namespace_id = ns_1.parent_id and ns_1.namespace_is_ultimate_parent = FALSE
  LEFT JOIN namespaces ns_3 
    ON ns_3.dim_namespace_id = ns_2.parent_id and ns_2.namespace_is_ultimate_parent = FALSE
  LEFT JOIN namespaces ns_4 
    ON ns_4.dim_namespace_id = ns_3.parent_id and ns_3.namespace_is_ultimate_parent = FALSE
  LEFT JOIN milestones
    ON milestones.milestone_id = internal_merge_requests.milestone_id
  WHERE is_part_of_product = TRUE
)

SELECT *
FROM engineering_merge_requests2e:T2966,WITH internal_merge_requests AS (

  SELECT *
  FROM "PROD".workspace_engineering.internal_merge_requests

), namespaces AS (

    SELECT *
    FROM "PROD".common.dim_namespace

), product_categories_yml_base AS (

    SELECT
        DISTINCT LOWER(group_name) AS group_name,
        LOWER(stage_section) AS section_name,
        LOWER(stage_display_name) AS stage_name,
        IFF(group_name LIKE '%::%',SPLIT_PART(LOWER(group_name),'::',1),NULL) as root_name
    FROM "PREP".gitlab_data_yaml.stages_groups_yaml_source
    WHERE snapshot_date = (SELECT max(snapshot_date) FROM "PREP".gitlab_data_yaml.stages_groups_yaml_source)

), product_categories_yml AS (

    SELECT group_name,
       section_name,
       stage_name
    FROM product_categories_yml_base
    UNION ALL
    SELECT DISTINCT root_name AS group_name,
                section_name,
                stage_name
    FROM product_categories_yml_base
    WHERE root_name IS NOT NULL
    
), bot_users AS (

    SELECT dim_user_id
    FROM "PROD".common.dim_user
    WHERE email_domain LIKE '%noreply.gitlab.com'

), milestones AS (

  SELECT *
  FROM "PREP".sensitive.gitlab_dotcom_milestones

),engineering_merge_requests AS (

  SELECT
    internal_merge_requests.merge_request_id                                                                                    AS merge_request_id,
    internal_merge_requests.merge_request_iid                                                                                   AS merge_request_iid,
    internal_merge_requests.author_id                                                                                           AS author_id,
    IFF(bots.dim_user_id IS NOT NULL or internal_merge_requests.author_id = 1786152 or ARRAY_CONTAINS('automation:bot-authored'::variant, internal_merge_requests.labels),
        TRUE, FALSE)                                                                                                            AS is_created_by_bot,
    internal_merge_requests.assignee_id                                                                                         AS assignee_id,
    internal_merge_requests.project_id                                                                                          AS project_id,
    internal_merge_requests.target_project_id                                                                                   AS target_project_id,
    internal_merge_requests.merge_request_state                                                                                 AS merge_request_state,
    internal_merge_requests.created_at                                                                                          AS created_at,
    internal_merge_requests.updated_at                                                                                          AS updated_at,
    internal_merge_requests.merged_at                                                                                           AS merged_at,
    DATE_TRUNC('month',internal_merge_requests.created_at)::date                                                                AS created_month,
    DATE_TRUNC('month',internal_merge_requests.merged_at)::date                                                                 AS merge_month,
    ROUND(TIMESTAMPDIFF(HOURS, internal_merge_requests.merge_request_created_at, internal_merge_requests.merged_at)/24,2)       AS days_to_merge,
    internal_merge_requests.merge_request_title                                                                                 AS merge_request_title,
    internal_merge_requests.merge_request_description                                                                           AS merge_request_description,
    internal_merge_requests.milestone_id                                                                                        AS milestone_id,
    internal_merge_requests.milestone_title                                                                                     AS milestone_title,
    internal_merge_requests.milestone_description                                                                               AS milestone_description,
    milestones.start_date AS milestone_start_date,
    milestones.due_date AS milestone_due_date,
    internal_merge_requests.namespace_id                                                                                        AS namespace_id,
    internal_merge_requests.ultimate_parent_id AS ultimate_parent_id,
    internal_merge_requests.labels                                                                                              AS labels,
    ARRAY_TO_STRING(internal_merge_requests.labels,'|')                                                                         AS masked_label_title,
    ARRAY_CONTAINS('community contribution'::variant, internal_merge_requests.labels)                                           AS is_community_contribution,
    ARRAY_CONTAINS('security'::variant, internal_merge_requests.labels)                                                         AS is_security,
    IFNULL(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bpriority::([0-9]+)'), 'priority::', ''),'undefined')                                                                                                                    AS priority_label,
    IFNULL(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bseverity::([0-9]+)'), 'severity::', ''),'undefined')                                                                                                                    AS severity_label,
    CASE
      WHEN array_contains('group::gitaly::cluster'::variant,internal_merge_requests.labels)
        THEN 'gitaly::cluster'
      WHEN array_contains('group::gitaly::git'::variant,internal_merge_requests.labels)
        THEN 'gitaly::git'
      WHEN array_contains('group::distribution::build'::variant,internal_merge_requests.labels)
        THEN 'distribution::build'
      WHEN array_contains('group::distribution::deploy'::variant,internal_merge_requests.labels)
        THEN 'distribution::deploy'
      WHEN array_contains('group::distribution::operate'::variant,internal_merge_requests.labels)
        THEN 'distribution::operate'
        ELSE
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bgroup::*([^,]*)'), 'group::', '') IN (SELECT group_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bgroup::*([^,]*)'), 'group::', ''),'undefined') END                    AS group_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bsection::*([^,]*)'), 'section::', '') IN (SELECT section_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bsection::*([^,]*)'), 'section::', ''),'undefined')                                                                                                                AS section_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', '') IN (SELECT stage_name FROM product_categories_yml),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\bdevops::*([^,]*)'), 'devops::', ''),'undefined')                                                                                                                    AS stage_label,
    IFF(REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\btype::*([^,]*)'), 'type::', '') IN ('bug','feature','maintenance'),REPLACE(REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','), '\\btype::*([^,]*)'), 'type::', ''),'undefined') 
                                                                                                                                AS type_label,
    CASE
        WHEN type_label = 'bug' 
            THEN REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','),'\\bbug::*([^,]*)') 
        WHEN type_label = 'maintenance' 
            THEN REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','),'\\bmaintenance::*([^,]*)') 
        WHEN type_label = 'feature' 
            THEN REGEXP_SUBSTR(ARRAY_TO_STRING(internal_merge_requests.labels, ','),'\\bfeature::*([^,]*)') 
        ELSE 'undefined' END                                                                                                    AS subtype_label,
    projects.visibility_level                                                                                                   AS visibility_level,
    CASE
        WHEN ns_4.dim_namespace_id IS NOT NULL
            THEN ns_4.namespace_path || '/' || ns_3.namespace_path || '/' || ns_2.namespace_path || '/' || ns_1.namespace_path || '/' ||  ns.namespace_path
        WHEN ns_3.dim_namespace_id IS NOT NULL 
            THEN ns_3.namespace_path || '/' || ns_2.namespace_path || '/' || ns_1.namespace_path || '/' ||  ns.namespace_path
        WHEN ns_2.dim_namespace_id IS NOT NULL 
            THEN ns_2.namespace_path || '/' || ns_1.namespace_path || '/' ||  ns.namespace_path
        WHEN ns_1.dim_namespace_id IS NOT NULL 
            THEN ns_1.namespace_path || '/' || ns.namespace_path
        ELSE  ns.namespace_path END                                                                                             AS full_group_path,
    'https://gitlab.com/' || full_group_path || '/' || projects.project_path || '/-/merge_requests/' || internal_merge_requests.merge_request_iid  AS url
  FROM internal_merge_requests
  LEFT JOIN "PROD".common.dim_project AS projects
    ON projects.dim_project_id = internal_merge_requests.target_project_id
  LEFT JOIN bot_users AS bots
    ON bots.dim_user_id = internal_merge_requests.author_id
  LEFT JOIN namespaces AS ns
    ON ns.dim_namespace_id = projects.dim_namespace_id
  LEFT JOIN namespaces ns_1 
    ON ns_1.dim_namespace_id = ns.parent_id and ns.namespace_is_ultimate_parent = FALSE
  LEFT JOIN namespaces ns_2 
    ON ns_2.dim_namespace_id = ns_1.parent_id and ns_1.namespace_is_ultimate_parent = FALSE
  LEFT JOIN namespaces ns_3 
    ON ns_3.dim_namespace_id = ns_2.parent_id and ns_2.namespace_is_ultimate_parent = FALSE
  LEFT JOIN namespaces ns_4 
    ON ns_4.dim_namespace_id = ns_3.parent_id and ns_3.namespace_is_ultimate_parent = FALSE
  LEFT JOIN milestones
    ON milestones.milestone_id = internal_merge_requests.milestone_id
  WHERE is_part_of_product = TRUE
)

SELECT *
FROM engineering_merge_requests2f:T95f,WITH internal_projects AS (

    SELECT
      ultimate_parent_namespace_id,
      dim_namespace_id              AS namespace_id,
      dim_project_id                AS project_id
    FROM {{ ref('dim_project') }}
    WHERE namespace_is_internal = TRUE

), merge_requests AS (

    SELECT
      dim_merge_request.dim_merge_request_id          AS merge_request_id,
      dim_merge_request.dim_project_id                AS project_id,
      internal_projects.ultimate_parent_namespace_id,
      internal_projects.namespace_id
    FROM {{ ref('dim_merge_request') }}
    INNER JOIN internal_projects
      ON internal_projects.project_id = dim_merge_request.dim_project_id

), issues AS (

    SELECT
      dim_issue.dim_issue_id                          AS issue_id,
      dim_issue.dim_project_id                        AS project_id,
      internal_projects.ultimate_parent_namespace_id,
      internal_projects.namespace_id
    FROM {{ ref('dim_issue') }}
    INNER JOIN internal_projects
      ON internal_projects.project_id = dim_issue.dim_project_id

), notes AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_notes_source') }}
    WHERE system = FALSE

), awards AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_award_emoji_source') }}

), internal_notes AS (

    SELECT
      COALESCE(merge_requests.ultimate_parent_namespace_id,
               issues.ultimate_parent_namespace_id)              AS ultimate_parent_namespace_id,
      COALESCE(merge_requests.namespace_id, issues.namespace_id) AS namespace_id,
      COALESCE(merge_requests.project_id, issues.project_id)     AS project_id,
      noteable_type,
      merge_request_id,
      issue_id,
      note_id,
      note_author_id
    FROM notes
    LEFT JOIN merge_requests
      ON merge_requests.merge_request_id = notes.noteable_id
      AND notes.noteable_type = 'MergeRequest'
    LEFT JOIN issues
      ON issues.issue_id = notes.noteable_id
      AND notes.noteable_type = 'Issue'
    WHERE (merge_requests.merge_request_id IS NOT NULL
      OR issues.issue_id IS NOT NULL)

), internal_note_awards AS (
    SELECT
      internal_notes.*,
      awards.award_emoji_id,
      awards.award_emoji_name,
      awards.user_id           AS awarder_user_id
    FROM internal_notes
    LEFT JOIN awards
      ON internal_notes.note_id = awards.awardable_id
      AND awards.awardable_type = 'Note'

)

SELECT *
FROM internal_note_awards30:T972,WITH internal_projects AS (

    SELECT
      ultimate_parent_namespace_id,
      dim_namespace_id              AS namespace_id,
      dim_project_id                AS project_id
    FROM "PROD".common.dim_project
    WHERE namespace_is_internal = TRUE

), merge_requests AS (

    SELECT
      dim_merge_request.dim_merge_request_id          AS merge_request_id,
      dim_merge_request.dim_project_id                AS project_id,
      internal_projects.ultimate_parent_namespace_id,
      internal_projects.namespace_id
    FROM "PROD".common.dim_merge_request
    INNER JOIN internal_projects
      ON internal_projects.project_id = dim_merge_request.dim_project_id

), issues AS (

    SELECT
      dim_issue.dim_issue_id                          AS issue_id,
      dim_issue.dim_project_id                        AS project_id,
      internal_projects.ultimate_parent_namespace_id,
      internal_projects.namespace_id
    FROM "PROD".common.dim_issue
    INNER JOIN internal_projects
      ON internal_projects.project_id = dim_issue.dim_project_id

), notes AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_notes_source
    WHERE system = FALSE

), awards AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_award_emoji_source

), internal_notes AS (

    SELECT
      COALESCE(merge_requests.ultimate_parent_namespace_id,
               issues.ultimate_parent_namespace_id)              AS ultimate_parent_namespace_id,
      COALESCE(merge_requests.namespace_id, issues.namespace_id) AS namespace_id,
      COALESCE(merge_requests.project_id, issues.project_id)     AS project_id,
      noteable_type,
      merge_request_id,
      issue_id,
      note_id,
      note_author_id
    FROM notes
    LEFT JOIN merge_requests
      ON merge_requests.merge_request_id = notes.noteable_id
      AND notes.noteable_type = 'MergeRequest'
    LEFT JOIN issues
      ON issues.issue_id = notes.noteable_id
      AND notes.noteable_type = 'Issue'
    WHERE (merge_requests.merge_request_id IS NOT NULL
      OR issues.issue_id IS NOT NULL)

), internal_note_awards AS (
    SELECT
      internal_notes.*,
      awards.award_emoji_id,
      awards.award_emoji_name,
      awards.user_id           AS awarder_user_id
    FROM internal_notes
    LEFT JOIN awards
      ON internal_notes.note_id = awards.awardable_id
      AND awards.awardable_type = 'Note'

)

SELECT *
FROM internal_note_awards31:T70e,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_environment_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, environment_event AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_environments_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT
      environment_event.environment_id                              AS dim_environment_id,
      IFNULL(environment_event.project_id, -1)                      AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)          AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)               AS dim_plan_id,
      environment_event.created_at::TIMESTAMP                       AS created_at,
      environment_event.updated_at::TIMESTAMP                       AS updated_at,
      dim_date.date_id                                              AS created_date_id
    FROM environment_event
    LEFT JOIN dim_project ON environment_event.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND environment_event.created_at >= dim_namespace_plan_hist.valid_from
        AND environment_event.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(environment_event.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-16",
    updated_date="2022-03-16"
) }}32:T7ec,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, environment_event AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_environments_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_environment_event)

    

), joined AS (

    SELECT
      environment_event.environment_id                              AS dim_environment_id,
      IFNULL(environment_event.project_id, -1)                      AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)          AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)               AS dim_plan_id,
      environment_event.created_at::TIMESTAMP                       AS created_at,
      environment_event.updated_at::TIMESTAMP                       AS updated_at,
      dim_date.date_id                                              AS created_date_id
    FROM environment_event
    LEFT JOIN dim_project ON environment_event.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND environment_event.created_at >= dim_namespace_plan_hist.valid_from
        AND environment_event.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(environment_event.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-16'::DATE        AS model_created_date,
      '2022-03-16'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined33:T9ed,{{ simple_cte([
   ('ci_runner_activity', 'fct_ci_runner_activity'),
   ('dim_namespace', 'dim_namespace'),
   ('dim_project', 'dim_project'),
   ('dim_date', 'dim_date')
]) }}

, ci_runner_activity_daily AS (

   SELECT
     dim_date.date_day                                                 AS report_date,
     ci_runner_activity.dim_project_id,
     ci_runner_activity.dim_namespace_id,
     ci_runner_activity.dim_ci_runner_id,
     ci_runner_activity.dim_ci_pipeline_id,
     ci_runner_activity.dim_ci_stage_id,
     ci_runner_activity.is_paid_by_gitlab,
     ci_runner_activity.public_projects_minutes_cost_factor,
     ci_runner_activity.private_projects_minutes_cost_factor,
     COUNT(DISTINCT ci_runner_activity.dim_ci_build_id)                AS job_count,
     SUM(ci_runner_activity.ci_build_duration_in_s)                    AS ci_build_duration_in_s
   FROM ci_runner_activity
   INNER JOIN dim_date
      ON TO_DATE(ci_runner_activity.ci_build_started_at) = dim_date.date_day
   WHERE ci_runner_activity.ci_build_finished_at IS NOT NULL
   {{ dbt_utils.group_by(n=9) }}

), joined AS (

   SELECT
     ci_runner_activity_daily.report_date,
     dim_project.dim_project_id,
     dim_namespace.dim_namespace_id,
     dim_namespace.ultimate_parent_namespace_id,
     dim_namespace.gitlab_plan_id                                      AS dim_plan_id,
     ci_runner_activity_daily.dim_ci_runner_id,
     ci_runner_activity_daily.dim_ci_pipeline_id,
     ci_runner_activity_daily.dim_ci_stage_id,


     -- CI RUNNER METRICS
     ci_runner_activity_daily.job_count,
     ci_runner_activity_daily.ci_build_duration_in_s,
     ci_runner_activity_daily.public_projects_minutes_cost_factor,
     ci_runner_activity_daily.private_projects_minutes_cost_factor,

     -- CI RUNNER ACTIVITY METADATA
     ci_runner_activity_daily.is_paid_by_gitlab,
     dim_project.visibility_level                                      AS project_visibility_level,
     dim_project.project_path,
     dim_namespace.namespace_is_internal,
     dim_namespace.gitlab_plan_title                                   AS ultimate_parent_plan_title

   FROM ci_runner_activity_daily
   INNER JOIN dim_project
     ON ci_runner_activity_daily.dim_project_id = dim_project.dim_project_id
   INNER JOIN dim_namespace
     ON ci_runner_activity_daily.dim_namespace_id = dim_namespace.dim_namespace_id

)

{{ dbt_audit(
   cte_ref="joined",
   created_by="@ischweickartDD",
   updated_by="@davis_townsend",
   created_date="2021-07-30",
   updated_date="2021-11-09"
) }}34:Tb61,

WITH ci_runner_activity AS (

    SELECT * 
    FROM "PROD".common.fct_ci_runner_activity

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

)

, ci_runner_activity_daily AS (

   SELECT
     dim_date.date_day                                                 AS report_date,
     ci_runner_activity.dim_project_id,
     ci_runner_activity.dim_namespace_id,
     ci_runner_activity.dim_ci_runner_id,
     ci_runner_activity.dim_ci_pipeline_id,
     ci_runner_activity.dim_ci_stage_id,
     ci_runner_activity.is_paid_by_gitlab,
     ci_runner_activity.public_projects_minutes_cost_factor,
     ci_runner_activity.private_projects_minutes_cost_factor,
     COUNT(DISTINCT ci_runner_activity.dim_ci_build_id)                AS job_count,
     SUM(ci_runner_activity.ci_build_duration_in_s)                    AS ci_build_duration_in_s
   FROM ci_runner_activity
   INNER JOIN dim_date
      ON TO_DATE(ci_runner_activity.ci_build_started_at) = dim_date.date_day
   WHERE ci_runner_activity.ci_build_finished_at IS NOT NULL
   group by 1,2,3,4,5,6,7,8,9

), joined AS (

   SELECT
     ci_runner_activity_daily.report_date,
     dim_project.dim_project_id,
     dim_namespace.dim_namespace_id,
     dim_namespace.ultimate_parent_namespace_id,
     dim_namespace.gitlab_plan_id                                      AS dim_plan_id,
     ci_runner_activity_daily.dim_ci_runner_id,
     ci_runner_activity_daily.dim_ci_pipeline_id,
     ci_runner_activity_daily.dim_ci_stage_id,


     -- CI RUNNER METRICS
     ci_runner_activity_daily.job_count,
     ci_runner_activity_daily.ci_build_duration_in_s,
     ci_runner_activity_daily.public_projects_minutes_cost_factor,
     ci_runner_activity_daily.private_projects_minutes_cost_factor,

     -- CI RUNNER ACTIVITY METADATA
     ci_runner_activity_daily.is_paid_by_gitlab,
     dim_project.visibility_level                                      AS project_visibility_level,
     dim_project.project_path,
     dim_namespace.namespace_is_internal,
     dim_namespace.gitlab_plan_title                                   AS ultimate_parent_plan_title

   FROM ci_runner_activity_daily
   INNER JOIN dim_project
     ON ci_runner_activity_daily.dim_project_id = dim_project.dim_project_id
   INNER JOIN dim_namespace
     ON ci_runner_activity_daily.dim_namespace_id = dim_namespace.dim_namespace_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@davis_townsend'::VARCHAR       AS updated_by,
      '2021-07-30'::DATE        AS model_created_date,
      '2021-11-09'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined35:T6ad,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_ci_job_artifact_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

,  ci_job_artifacts AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_ci_job_artifacts_source')}}
    {% if is_incremental() %}

      WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}


), joined AS (
    
    SELECT
      ci_job_artifact_id                                    AS dim_ci_job_artifact_id,
      project_id                                            AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)  AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)       AS dim_plan_id,
      file_type,
      ci_job_artifacts.created_at,
      ci_job_artifacts.updated_at,
      dim_date.date_id                                      AS created_date_id
    FROM ci_job_artifacts
    LEFT JOIN dim_project 
      ON ci_job_artifacts.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND ci_job_artifacts.created_at >= dim_namespace_plan_hist.valid_from
        AND ci_job_artifacts.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date 
      ON TO_DATE(ci_job_artifacts.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-24",
    updated_date="2022-06-01"
) }}36:T782,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

,  ci_job_artifacts AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_ci_job_artifacts_source
    

      WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_ci_artifact)

    


), joined AS (
    
    SELECT
      ci_job_artifact_id                                    AS dim_ci_job_artifact_id,
      project_id                                            AS dim_project_id,
      IFNULL(dim_project.ultimate_parent_namespace_id, -1)  AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)       AS dim_plan_id,
      file_type,
      ci_job_artifacts.created_at,
      ci_job_artifacts.updated_at,
      dim_date.date_id                                      AS created_date_id
    FROM ci_job_artifacts
    LEFT JOIN dim_project 
      ON ci_job_artifacts.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND ci_job_artifacts.created_at >= dim_namespace_plan_hist.valid_from
        AND ci_job_artifacts.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date 
      ON TO_DATE(ci_job_artifacts.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-24'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined37:Tfd2,{{ config(

    materialized='incremental',
    unique_key='behavior_structured_event_pk',
    tags=['product'],
    full_refresh= only_force_full_refresh(),
    on_schema_change='sync_all_columns',
    cluster_by=['behavior_at::DATE','event_action']
  )

}}

{{ simple_cte([
    ('event', 'dim_behavior_event'),
    ('namespace', 'dim_namespace'),
    ('project', 'dim_project'),
    ('operating_system', 'dim_behavior_operating_system'),
    ('browser','dim_behavior_browser'),
    ('plan','dim_plan'),
    ('dates', 'dim_date')
]) }},

structured_behavior AS (

  SELECT
    behavior_structured_event_pk,
    behavior_at,
    app_id,
    user_snowplow_domain_id,
    contexts,
    page_url_path,
    page_url_fragment,
    gsc_google_analytics_client_id,
    gsc_pseudonymized_user_id,
    gsc_extra,
    gsc_plan,
    gsc_source,
    event_value,
    session_index,
    session_id,
    has_gitlab_service_ping_context,
    has_gitlab_experiment_context,
    has_customer_standard_context,
    dim_behavior_referrer_page_sk,
    dim_behavior_event_sk,
    dim_namespace_id,
    dim_project_id,
    dim_behavior_operating_system_sk,
    dim_behavior_browser_sk,
    dim_plan_sk
  FROM {{ ref('fct_behavior_structured_event') }}
  {% if is_incremental() %}

    WHERE behavior_at > (SELECT MAX({{ var('incremental_backfill_date', 'behavior_at') }}) FROM {{ this }})
      AND behavior_at <= (SELECT DATEADD(MONTH, 1, MAX({{ var('incremental_backfill_date', 'behavior_at') }})) FROM {{ this }})

  {% else %}
  -- This will cover the first creation of the table or a full refresh and requires that the table be backfilled
  WHERE behavior_at > DATEADD('day', -30 ,CURRENT_DATE())

  {% endif %}

),

report AS (
  SELECT
    structured_behavior.behavior_structured_event_pk,
    structured_behavior.behavior_at,
    dates.date_actual AS behavior_date,
    structured_behavior.app_id,
    structured_behavior.user_snowplow_domain_id,
    structured_behavior.contexts,
    structured_behavior.page_url_path,
    structured_behavior.page_url_fragment,
    structured_behavior.gsc_google_analytics_client_id,
    structured_behavior.gsc_pseudonymized_user_id,
    structured_behavior.gsc_extra,
    structured_behavior.gsc_plan,
    structured_behavior.gsc_source,
    structured_behavior.event_value,
    structured_behavior.session_index,
    structured_behavior.session_id,
    structured_behavior.has_gitlab_service_ping_context,
    structured_behavior.has_gitlab_experiment_context,
    structured_behavior.has_customer_standard_context,
    event.event_category,
    event.event_action,
    event.event_label,
    event.event_property,
    namespace.dim_namespace_id,
    namespace.ultimate_parent_namespace_id,
    namespace.namespace_is_internal,
    namespace.namespace_is_ultimate_parent,
    namespace.namespace_type,
    namespace.visibility_level,
    project.dim_project_id,
    operating_system.device_type,
    operating_system.is_device_mobile,
    browser.browser_name,
    browser.dim_behavior_browser_sk,
    plan.dim_plan_id,
    plan.plan_id_modified,
    plan.plan_name,
    plan.plan_name_modified,
    structured_behavior.dim_behavior_referrer_page_sk
  FROM structured_behavior
  LEFT JOIN event
    ON structured_behavior.dim_behavior_event_sk = event.dim_behavior_event_sk
  LEFT JOIN namespace
    ON structured_behavior.dim_namespace_id = namespace.dim_namespace_id
  LEFT JOIN project
    ON structured_behavior.dim_project_id = project.dim_project_id
  LEFT JOIN operating_system
    ON structured_behavior.dim_behavior_operating_system_sk = operating_system.dim_behavior_operating_system_sk
  LEFT JOIN browser
    ON structured_behavior.dim_behavior_browser_sk = browser.dim_behavior_browser_sk
  LEFT JOIN plan
    ON structured_behavior.dim_plan_sk = plan.dim_plan_sk
  LEFT JOIN dates
    ON{{ get_date_id('structured_behavior.behavior_at') }} = dates.date_id
)

{{ dbt_audit(
    cte_ref="report",
    created_by="@pempey",
    updated_by="@pempey",
    created_date="2023-02-22",
    updated_date="2023-03-27"
) }}38:T5f0,**Description:** Enriched Snowplow table for the analysis of structured events. This is an enhanced version of `fct_behavior_structured_event`. 

**Data Grain:** behavior_structured_event_pk

This ID is generated using `event_id` from [prep_snowplow_unnested_events_all](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.prep_snowplow_unnested_events_all) 

**Filters Applied to Model:**
- `Inherited` - This model only includes Structured events (when `event=struct` from `dim_behavior_event`)

**Tips for use:**
- There is a cluster key on `behavior_at::DATE`. Using `behavior_at` in a WHERE clause or INNER JOIN will improve query performance.
- Join this model to `dim_behavior_website_page` using `dim_behavior_website_page_sk` in order to pull in information about the page URL
- Join this model to `dim_behavior_operating_system` using `dim_behavior_operating_system_sk` in order to pull in information about the user OS 
- Join this model to `dim_behavior_browser` using `dim_behavior_browser_sk` in  order to pull in information about the user browser 

**Other Comments:**
- Structured events are custom events implemented with five parameters: event_category, event_action, event_label, event_property and event_value. Snowplow documentation on [types of events](https://docs.snowplow.io/docs/understanding-tracking-design/out-of-the-box-vs-custom-events-and-entities/).
- There is information on some Snowplow structured events in the [Snowplow event dictionary](https://metrics.gitlab.com/snowplow)39:Tffa,



WITH event AS (

    SELECT * 
    FROM "PROD".common.dim_behavior_event

), namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), operating_system AS (

    SELECT * 
    FROM "PROD".common.dim_behavior_operating_system

), browser AS (

    SELECT * 
    FROM "PROD".common.dim_behavior_browser

), plan AS (

    SELECT * 
    FROM "PROD".common.dim_plan

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

),

structured_behavior AS (

  SELECT
    behavior_structured_event_pk,
    behavior_at,
    app_id,
    user_snowplow_domain_id,
    contexts,
    page_url_path,
    page_url_fragment,
    gsc_google_analytics_client_id,
    gsc_pseudonymized_user_id,
    gsc_extra,
    gsc_plan,
    gsc_source,
    event_value,
    session_index,
    session_id,
    has_gitlab_service_ping_context,
    has_gitlab_experiment_context,
    has_customer_standard_context,
    dim_behavior_referrer_page_sk,
    dim_behavior_event_sk,
    dim_namespace_id,
    dim_project_id,
    dim_behavior_operating_system_sk,
    dim_behavior_browser_sk,
    dim_plan_sk
  FROM "PROD".common.fct_behavior_structured_event
  

    WHERE behavior_at > (SELECT MAX(behavior_at) FROM "PROD".common_mart.mart_behavior_structured_event)
      AND behavior_at <= (SELECT DATEADD(MONTH, 1, MAX(behavior_at)) FROM "PROD".common_mart.mart_behavior_structured_event)

  

),

report AS (
  SELECT
    structured_behavior.behavior_structured_event_pk,
    structured_behavior.behavior_at,
    dates.date_actual AS behavior_date,
    structured_behavior.app_id,
    structured_behavior.user_snowplow_domain_id,
    structured_behavior.contexts,
    structured_behavior.page_url_path,
    structured_behavior.page_url_fragment,
    structured_behavior.gsc_google_analytics_client_id,
    structured_behavior.gsc_pseudonymized_user_id,
    structured_behavior.gsc_extra,
    structured_behavior.gsc_plan,
    structured_behavior.gsc_source,
    structured_behavior.event_value,
    structured_behavior.session_index,
    structured_behavior.session_id,
    structured_behavior.has_gitlab_service_ping_context,
    structured_behavior.has_gitlab_experiment_context,
    structured_behavior.has_customer_standard_context,
    event.event_category,
    event.event_action,
    event.event_label,
    event.event_property,
    namespace.dim_namespace_id,
    namespace.ultimate_parent_namespace_id,
    namespace.namespace_is_internal,
    namespace.namespace_is_ultimate_parent,
    namespace.namespace_type,
    namespace.visibility_level,
    project.dim_project_id,
    operating_system.device_type,
    operating_system.is_device_mobile,
    browser.browser_name,
    browser.dim_behavior_browser_sk,
    plan.dim_plan_id,
    plan.plan_id_modified,
    plan.plan_name,
    plan.plan_name_modified,
    structured_behavior.dim_behavior_referrer_page_sk
  FROM structured_behavior
  LEFT JOIN event
    ON structured_behavior.dim_behavior_event_sk = event.dim_behavior_event_sk
  LEFT JOIN namespace
    ON structured_behavior.dim_namespace_id = namespace.dim_namespace_id
  LEFT JOIN project
    ON structured_behavior.dim_project_id = project.dim_project_id
  LEFT JOIN operating_system
    ON structured_behavior.dim_behavior_operating_system_sk = operating_system.dim_behavior_operating_system_sk
  LEFT JOIN browser
    ON structured_behavior.dim_behavior_browser_sk = browser.dim_behavior_browser_sk
  LEFT JOIN plan
    ON structured_behavior.dim_plan_sk = plan.dim_plan_sk
  LEFT JOIN dates
    ON

  TO_NUMBER(TO_CHAR(structured_behavior.behavior_at::DATE,'YYYYMMDD'),'99999999')

 = dates.date_id
)

SELECT
      *,
      '@pempey'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2023-02-22'::DATE        AS model_created_date,
      '2023-03-27'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM report3a:T7cd,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_todo_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, gitlab_dotcom_todo_dedupe_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_todos_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      gitlab_dotcom_todo_dedupe_source.todo_id                          AS dim_todo_id,
      gitlab_dotcom_todo_dedupe_source.author_id                        AS author_id,
      IFNULL(dim_project.dim_project_id, -1)                            AS dim_project_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)              AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      dim_date.date_id                                                  AS created_date_id,
      gitlab_dotcom_todo_dedupe_source.created_at::TIMESTAMP            AS created_at,
      gitlab_dotcom_todo_dedupe_source.updated_at::TIMESTAMP            AS updated_at
    FROM gitlab_dotcom_todo_dedupe_source
    LEFT JOIN dim_project 
      ON gitlab_dotcom_todo_dedupe_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_todo_dedupe_source.created_at >= dim_namespace_plan_hist.valid_from
        AND gitlab_dotcom_todo_dedupe_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(gitlab_dotcom_todo_dedupe_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-14",
    updated_date="2022-06-01"
) }}3b:T8a5,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, gitlab_dotcom_todo_dedupe_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_todos_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_todo)

    

), joined AS (

    SELECT 
      gitlab_dotcom_todo_dedupe_source.todo_id                          AS dim_todo_id,
      gitlab_dotcom_todo_dedupe_source.author_id                        AS author_id,
      IFNULL(dim_project.dim_project_id, -1)                            AS dim_project_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)              AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      dim_date.date_id                                                  AS created_date_id,
      gitlab_dotcom_todo_dedupe_source.created_at::TIMESTAMP            AS created_at,
      gitlab_dotcom_todo_dedupe_source.updated_at::TIMESTAMP            AS updated_at
    FROM gitlab_dotcom_todo_dedupe_source
    LEFT JOIN dim_project 
      ON gitlab_dotcom_todo_dedupe_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_todo_dedupe_source.created_at >= dim_namespace_plan_hist.valid_from
        AND gitlab_dotcom_todo_dedupe_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(gitlab_dotcom_todo_dedupe_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-14'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined3c:T76a,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_snippet_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('dim_project', 'dim_project'),
]) }}

, snippet_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_snippets_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      snippet_source.snippet_id                                         AS dim_snippet_id,
      snippet_source.author_id                                          AS author_id,
      IFNULL(dim_project.dim_project_id, -1)                            AS dim_project_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)              AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      dim_date.date_id                                                  AS created_date_id,
      snippet_source.created_at                                         AS created_at,
      snippet_source.updated_at                                         AS updated_at
    FROM snippet_source
    LEFT JOIN dim_project 
      ON snippet_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND snippet_source.created_at >= dim_namespace_plan_hist.valid_from
        AND snippet_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(snippet_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@chrissharp",
    updated_by="@chrissharp",
    created_date="2022-03-14",
    updated_date="2022-06-01"
) }}3d:T842,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

)

, snippet_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_snippets_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_snippet)

    

), joined AS (

    SELECT 
      snippet_source.snippet_id                                         AS dim_snippet_id,
      snippet_source.author_id                                          AS author_id,
      IFNULL(dim_project.dim_project_id, -1)                            AS dim_project_id,
      IFNULL(dim_namespace_plan_hist.dim_namespace_id, -1)              AS ultimate_parent_namespace_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                   AS dim_plan_id,
      dim_date.date_id                                                  AS created_date_id,
      snippet_source.created_at                                         AS created_at,
      snippet_source.updated_at                                         AS updated_at
    FROM snippet_source
    LEFT JOIN dim_project 
      ON snippet_source.project_id = dim_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist ON dim_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
        AND snippet_source.created_at >= dim_namespace_plan_hist.valid_from
        AND snippet_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(snippet_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@chrissharp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-03-14'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined3e:T1b0f,{% set sensitive_fields = ['project_description', 'project_import_source', 'project_issues_template', 'project_build_coverage_regex',
                           'project_name', 'project_path', 'project_import_url', 'project_merge_requests_template'] %}

{{ simple_cte([

    ('dim_date', 'dim_date'),
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('prep_product_tier', 'prep_product_tier'),

]) }}

, active_services AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_integrations_source')}}
    WHERE is_active = True

), namespace_lineage AS (

    SELECT
      namespace_lineage_historical.*,
      IFF(ROW_NUMBER() OVER (
        PARTITION BY namespace_lineage_historical.namespace_id
        ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1, TRUE, FALSE)    AS is_current,
      namespace_lineage_historical.snapshot_day = CURRENT_DATE                        AS ultimate_parent_is_current,
      plans.plan_title                                                                AS ultimate_parent_plan_title,
      plans.plan_is_paid                                                              AS ultimate_parent_plan_is_paid,
      plans.plan_name                                                                 AS ultimate_parent_plan_name
    FROM namespace_lineage_historical
    INNER JOIN plans
      ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

), joined AS (

    SELECT
      projects_source.project_id                                     AS dim_project_id,
      projects_source.namespace_id                                   AS dim_namespace_id,
      namespace_lineage.ultimate_parent_id                           AS ultimate_parent_namespace_id,
      projects_source.creator_id                                     AS dim_user_id_creator,
      dim_date.date_id                                               AS dim_date_id,

      -- plan/product tier metadata at creation
      prep_namespace.dim_product_tier_id                             AS dim_product_tier_id_at_creation,
      prep_namespace.gitlab_plan_id                                  AS dim_plan_id,
      -- projects metadata
      projects_source.created_at                                     AS created_at,
      projects_source.updated_at                                     AS updated_at,
      projects_source.last_activity_at,
      projects_source.visibility_level,
      projects_source.archived                                       AS is_archived,
      projects_source.has_avatar,
      projects_source.project_star_count,
      projects_source.merge_requests_rebase_enabled,
      projects_source.import_type,
      IFF(projects_source.import_type IS NOT NULL, TRUE, FALSE)      AS is_imported,
      projects_source.approvals_before_merge,
      projects_source.reset_approvals_on_push,
      projects_source.merge_requests_ff_only_enabled,
      projects_source.mirror,
      projects_source.mirror_user_id,
      projects_source.shared_runners_enabled,
      projects_source.build_allow_git_fetch,
      projects_source.build_timeout,
      projects_source.mirror_trigger_builds,
      projects_source.pending_delete,
      projects_source.public_builds,
      projects_source.last_repository_check_failed,
      projects_source.last_repository_check_at,
      projects_source.container_registry_enabled,
      projects_source.only_allow_merge_if_pipeline_succeeds,
      projects_source.has_external_issue_tracker,
      projects_source.repository_storage,
      projects_source.repository_read_only,
      projects_source.request_access_enabled,
      projects_source.has_external_wiki,
      projects_source.ci_config_path,
      projects_source.lfs_enabled,
      projects_source.only_allow_merge_if_all_discussions_are_resolved,
      projects_source.repository_size_limit,
      projects_source.printing_merge_request_link_enabled,
      projects_source.has_auto_canceling_pending_pipelines,
      projects_source.service_desk_enabled,
      projects_source.delete_error,
      projects_source.last_repository_updated_at,
      projects_source.storage_version,
      projects_source.resolve_outdated_diff_discussions,
      projects_source.disable_overriding_approvers_per_merge_request,
      projects_source.remote_mirror_available_overridden,
      projects_source.only_mirror_protected_branches,
      projects_source.pull_mirror_available_overridden,
      projects_source.mirror_overwrites_diverged_branches,
      -- namespace metadata

      IFNULL(prep_namespace.namespace_is_internal, FALSE)            AS namespace_is_internal,

      {% for field in sensitive_fields %}
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE {{field}}
      END                                                            AS {{field}},
      {% endfor %}
      IFF(projects_source.import_type='gitlab_project' AND projects_source.project_path='learn-gitlab',  
        TRUE, 
        FALSE)                                                       AS is_learn_gitlab,
      ARRAYAGG(active_services.service_type)                         AS active_service_types_array,

      IFNULL(COUNT(DISTINCT members_source.member_id), 0)            AS member_count
    FROM projects_source
    INNER JOIN dim_date
      ON TO_DATE(projects_source.created_at) = dim_date.date_day
    LEFT JOIN prep_namespace
      ON projects_source.namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid
    LEFT JOIN members_source
      ON projects_source.project_id = members_source.source_id
      AND members_source.member_source_type = 'Project'
    LEFT JOIN namespace_lineage
      ON prep_namespace.dim_namespace_id = namespace_lineage.namespace_id
      AND namespace_lineage.is_current = TRUE
    LEFT JOIN gitlab_subscriptions
      ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects_source.created_at >= gitlab_subscriptions.valid_from AND projects_source.created_at < {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
    LEFT JOIN active_services
      ON projects_source.project_id = active_services.project_id
    {{ dbt_utils.group_by(n=63) }}

)

SELECT *
FROM joined3f:T23f4,



WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), prep_product_tier AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

)

, active_services AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source
    WHERE is_active = True

), namespace_lineage AS (

    SELECT
      namespace_lineage_historical.*,
      IFF(ROW_NUMBER() OVER (
        PARTITION BY namespace_lineage_historical.namespace_id
        ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1, TRUE, FALSE)    AS is_current,
      namespace_lineage_historical.snapshot_day = CURRENT_DATE                        AS ultimate_parent_is_current,
      plans.plan_title                                                                AS ultimate_parent_plan_title,
      plans.plan_is_paid                                                              AS ultimate_parent_plan_is_paid,
      plans.plan_name                                                                 AS ultimate_parent_plan_name
    FROM namespace_lineage_historical
    INNER JOIN plans
      ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

), joined AS (

    SELECT
      projects_source.project_id                                     AS dim_project_id,
      projects_source.namespace_id                                   AS dim_namespace_id,
      namespace_lineage.ultimate_parent_id                           AS ultimate_parent_namespace_id,
      projects_source.creator_id                                     AS dim_user_id_creator,
      dim_date.date_id                                               AS dim_date_id,

      -- plan/product tier metadata at creation
      prep_namespace.dim_product_tier_id                             AS dim_product_tier_id_at_creation,
      prep_namespace.gitlab_plan_id                                  AS dim_plan_id,
      -- projects metadata
      projects_source.created_at                                     AS created_at,
      projects_source.updated_at                                     AS updated_at,
      projects_source.last_activity_at,
      projects_source.visibility_level,
      projects_source.archived                                       AS is_archived,
      projects_source.has_avatar,
      projects_source.project_star_count,
      projects_source.merge_requests_rebase_enabled,
      projects_source.import_type,
      IFF(projects_source.import_type IS NOT NULL, TRUE, FALSE)      AS is_imported,
      projects_source.approvals_before_merge,
      projects_source.reset_approvals_on_push,
      projects_source.merge_requests_ff_only_enabled,
      projects_source.mirror,
      projects_source.mirror_user_id,
      projects_source.shared_runners_enabled,
      projects_source.build_allow_git_fetch,
      projects_source.build_timeout,
      projects_source.mirror_trigger_builds,
      projects_source.pending_delete,
      projects_source.public_builds,
      projects_source.last_repository_check_failed,
      projects_source.last_repository_check_at,
      projects_source.container_registry_enabled,
      projects_source.only_allow_merge_if_pipeline_succeeds,
      projects_source.has_external_issue_tracker,
      projects_source.repository_storage,
      projects_source.repository_read_only,
      projects_source.request_access_enabled,
      projects_source.has_external_wiki,
      projects_source.ci_config_path,
      projects_source.lfs_enabled,
      projects_source.only_allow_merge_if_all_discussions_are_resolved,
      projects_source.repository_size_limit,
      projects_source.printing_merge_request_link_enabled,
      projects_source.has_auto_canceling_pending_pipelines,
      projects_source.service_desk_enabled,
      projects_source.delete_error,
      projects_source.last_repository_updated_at,
      projects_source.storage_version,
      projects_source.resolve_outdated_diff_discussions,
      projects_source.disable_overriding_approvers_per_merge_request,
      projects_source.remote_mirror_available_overridden,
      projects_source.only_mirror_protected_branches,
      projects_source.pull_mirror_available_overridden,
      projects_source.mirror_overwrites_diverged_branches,
      -- namespace metadata

      IFNULL(prep_namespace.namespace_is_internal, FALSE)            AS namespace_is_internal,

      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_description
      END                                                            AS project_description,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_source
      END                                                            AS project_import_source,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_issues_template
      END                                                            AS project_issues_template,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_build_coverage_regex
      END                                                            AS project_build_coverage_regex,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_name
      END                                                            AS project_name,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_path
      END                                                            AS project_path,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_url
      END                                                            AS project_import_url,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_merge_requests_template
      END                                                            AS project_merge_requests_template,
      
      IFF(projects_source.import_type='gitlab_project' AND projects_source.project_path='learn-gitlab',  
        TRUE, 
        FALSE)                                                       AS is_learn_gitlab,
      ARRAYAGG(active_services.service_type)                         AS active_service_types_array,

      IFNULL(COUNT(DISTINCT members_source.member_id), 0)            AS member_count
    FROM projects_source
    INNER JOIN dim_date
      ON TO_DATE(projects_source.created_at) = dim_date.date_day
    LEFT JOIN prep_namespace
      ON projects_source.namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid
    LEFT JOIN members_source
      ON projects_source.project_id = members_source.source_id
      AND members_source.member_source_type = 'Project'
    LEFT JOIN namespace_lineage
      ON prep_namespace.dim_namespace_id = namespace_lineage.namespace_id
      AND namespace_lineage.is_current = TRUE
    LEFT JOIN gitlab_subscriptions
      ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects_source.created_at >= gitlab_subscriptions.valid_from AND projects_source.created_at < COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
    LEFT JOIN active_services
      ON projects_source.project_id = active_services.project_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63

)

SELECT *
FROM joined40:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}42:T890,WITH prep_project AS (

    SELECT 
      dim_project_id,
      dim_namespace_id,
      ultimate_parent_namespace_id,
      dim_user_id_creator,
      dim_date_id,

      -- plan/product tier metadata at creation
      dim_product_tier_id_at_creation,
      -- projects metadata
      created_at,
      updated_at,
      last_activity_at,
      visibility_level,
      is_archived,
      has_avatar,
      project_star_count,
      merge_requests_rebase_enabled,
      import_type,
      is_imported,
      approvals_before_merge,
      reset_approvals_on_push,
      merge_requests_ff_only_enabled,
      mirror,
      mirror_user_id,
      shared_runners_enabled,
      build_allow_git_fetch,
      build_timeout,
      mirror_trigger_builds,
      pending_delete,
      public_builds,
      last_repository_check_failed,
      last_repository_check_at,
      container_registry_enabled,
      only_allow_merge_if_pipeline_succeeds,
      has_external_issue_tracker,
      repository_storage,
      repository_read_only,
      request_access_enabled,
      has_external_wiki,
      ci_config_path,
      lfs_enabled,
      only_allow_merge_if_all_discussions_are_resolved,
      repository_size_limit,
      printing_merge_request_link_enabled,
      has_auto_canceling_pending_pipelines,
      service_desk_enabled,
      delete_error,
      last_repository_updated_at,
      storage_version,
      resolve_outdated_diff_discussions,
      disable_overriding_approvers_per_merge_request,
      remote_mirror_available_overridden,
      only_mirror_protected_branches,
      pull_mirror_available_overridden,
      mirror_overwrites_diverged_branches,
      namespace_is_internal,
      project_description, 
      project_import_source,
      project_issues_template,
      project_build_coverage_regex,
      project_name,
      project_path,
      project_import_url,
      project_merge_requests_template,
      active_service_types_array,
      is_learn_gitlab,
      member_count
    FROM {{ ref('prep_project') }}

)

{{ dbt_audit(
    cte_ref="prep_project",
    created_by="@mpeychet_",
    updated_by="@mpeychet_",
    created_date="2021-05-19",
    updated_date="2021-05-19"
) }}43:T987,WITH prep_project AS (

    SELECT 
      dim_project_id,
      dim_namespace_id,
      ultimate_parent_namespace_id,
      dim_user_id_creator,
      dim_date_id,

      -- plan/product tier metadata at creation
      dim_product_tier_id_at_creation,
      -- projects metadata
      created_at,
      updated_at,
      last_activity_at,
      visibility_level,
      is_archived,
      has_avatar,
      project_star_count,
      merge_requests_rebase_enabled,
      import_type,
      is_imported,
      approvals_before_merge,
      reset_approvals_on_push,
      merge_requests_ff_only_enabled,
      mirror,
      mirror_user_id,
      shared_runners_enabled,
      build_allow_git_fetch,
      build_timeout,
      mirror_trigger_builds,
      pending_delete,
      public_builds,
      last_repository_check_failed,
      last_repository_check_at,
      container_registry_enabled,
      only_allow_merge_if_pipeline_succeeds,
      has_external_issue_tracker,
      repository_storage,
      repository_read_only,
      request_access_enabled,
      has_external_wiki,
      ci_config_path,
      lfs_enabled,
      only_allow_merge_if_all_discussions_are_resolved,
      repository_size_limit,
      printing_merge_request_link_enabled,
      has_auto_canceling_pending_pipelines,
      service_desk_enabled,
      delete_error,
      last_repository_updated_at,
      storage_version,
      resolve_outdated_diff_discussions,
      disable_overriding_approvers_per_merge_request,
      remote_mirror_available_overridden,
      only_mirror_protected_branches,
      pull_mirror_available_overridden,
      mirror_overwrites_diverged_branches,
      namespace_is_internal,
      project_description, 
      project_import_source,
      project_issues_template,
      project_build_coverage_regex,
      project_name,
      project_path,
      project_import_url,
      project_merge_requests_template,
      active_service_types_array,
      is_learn_gitlab,
      member_count
    FROM "PROD".common_prep.prep_project

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@mpeychet_'::VARCHAR       AS updated_by,
      '2021-05-19'::DATE        AS model_created_date,
      '2021-05-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM prep_projectc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.dim_project"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"dim_project"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],null,["$","dd",null,{"className":"detail-value","children":"untagged"}]]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.common.dim_project"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"2 GB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 09:46UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Dimensional table representing [GitLab Projects](https://docs.gitlab.com/ee/user/project/). Parent ID (dim_namespace_id) and Ultimate Parent ID (dim_ultimate_parent_id) are also stored in the table\n\nData comes from [Gitlab Postgres db](https://gitlab.com/gitlab-org/gitlab/-/blob/master/db/structure.sql).\n\nThe grain of the table is the Project ID.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_PROJECT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PROJECT_ID":{"type":"NUMBER","index":1,"name":"dim_project_id","comment":null,"description":"ID of the project (from Gitlab Postgres db)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_project_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"dim_namespace_id","comment":null,"description":"ID of the namespace the project belongs to","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_USER_ID_CREATOR":{"type":"NUMBER","index":4,"name":"dim_user_id_creator","comment":null,"description":"ID of the user who created the project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_user_id_creator"},"DIM_DATE_ID":{"type":"NUMBER","index":5,"name":"DIM_DATE_ID","comment":null,"display_name":"dim_date_id"},"DIM_PRODUCT_TIER_ID_AT_CREATION":{"type":"TEXT","index":6,"name":"DIM_PRODUCT_TIER_ID_AT_CREATION","comment":null,"display_name":"dim_product_tier_id_at_creation"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":10,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"IS_ARCHIVED":{"type":"BOOLEAN","index":11,"name":"IS_ARCHIVED","comment":null,"display_name":"is_archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":12,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":13,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":14,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":15,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"IS_IMPORTED":{"type":"BOOLEAN","index":16,"name":"IS_IMPORTED","comment":null,"display_name":"is_imported"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":17,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":18,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":19,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":20,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":21,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":22,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":23,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":24,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":25,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":26,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":27,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":28,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":29,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":30,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":31,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":32,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":33,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":34,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":35,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":36,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":37,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":38,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":39,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":40,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":41,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":42,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":43,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":44,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":45,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":46,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":47,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":48,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":49,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":50,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":51,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":52,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":53,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":54,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":55,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":56,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":57,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":58,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":59,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":60,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":61,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"ACTIVE_SERVICE_TYPES_ARRAY":{"type":"ARRAY","index":62,"name":"ACTIVE_SERVICE_TYPES_ARRAY","comment":null,"display_name":"active_service_types_array"},"IS_LEARN_GITLAB":{"type":"BOOLEAN","index":63,"name":"IS_LEARN_GITLAB","comment":null,"display_name":"is_learn_gitlab"},"MEMBER_COUNT":{"type":"NUMBER","index":64,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"},"CREATED_BY":{"type":"TEXT","index":65,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":66,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":67,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":68,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":69,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":70,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2197899264,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_project","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_local","product_and_engineering","dim_project"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_local/product_and_engineering/dim_project.sql","original_file_path":"models/common/dimensions_local/product_and_engineering/dim_project.sql","name":"dim_project","alias":"dim_project","checksum":{"name":"sha256","checksum":"2afcc75bd6a8fbedc57124d6247b3c21a5ebeffbffe66810fd48a7da4f3ab59d"},"tags":[],"refs":[["prep_project"],["prep_project"]],"sources":[],"metrics":[],"description":"Dimensional table representing [GitLab Projects](https://docs.gitlab.com/ee/user/project/). Parent ID (dim_namespace_id) and Ultimate Parent ID (dim_ultimate_parent_id) are also stored in the table\n\nData comes from [Gitlab Postgres db](https://gitlab.com/gitlab-org/gitlab/-/blob/master/db/structure.sql).\n\nThe grain of the table is the Project ID.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_local/product_and_engineering/dim_project.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033750.761872,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_project","label":"dim_project"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"DOTCOM_USAGE_EVENTS_2023_07","name":"PREP_EVENT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_ID":{"type":"TEXT","index":1,"name":"event_id","comment":null,"description":"primary key of the table. Unique ID of the event","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_id"},"EVENT_NAME":{"type":"TEXT","index":2,"name":"EVENT_NAME","comment":null,"display_name":"event_name"},"STAGE_NAME":{"type":"TEXT","index":3,"name":"stage_name","comment":null,"description":"This field is _not_ the SSOT for the event-to-stage mapping. Please use [`map_gitlab_dotcom_xmau_metrics`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics) for the mapping of event to stage.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"event_created_at","comment":null,"description":"timestamp of the event","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_created_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"created_date_id","comment":null,"description":"ID of the date when the event was created","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_date_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":6,"name":"dim_project_id","comment":null,"description":"ID of the project in which the event was triggered. Can be null for events which are not tied to a project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_project_id"},"PARENT_TYPE":{"type":"TEXT","index":7,"name":"PARENT_TYPE","comment":null,"display_name":"parent_type"},"PARENT_ID":{"type":"NUMBER","index":8,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":9,"name":"ultimate_parent_namespace_id","comment":null,"description":"ID of the ultimate parent namespace in which the event was triggered","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"PLAN_ID_AT_EVENT_TIMESTAMP":{"type":"NUMBER","index":10,"name":"plan_id_at_event_timestamp","comment":null,"description":"ID of the plan of the ultimate parent namespace when the event got triggered","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_id_at_event_timestamp"},"PLAN_NAME_AT_EVENT_TIMESTAMP":{"type":"TEXT","index":11,"name":"plan_name_at_event_timestamp","comment":null,"description":"Name of the plan of the ultimate parent namespace when the event got triggered","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_name_at_event_timestamp"},"PLAN_WAS_PAID_AT_EVENT_TIMESTAMP":{"type":"BOOLEAN","index":12,"name":"PLAN_WAS_PAID_AT_EVENT_TIMESTAMP","comment":null,"display_name":"plan_was_paid_at_event_timestamp"},"DIM_USER_ID":{"type":"NUMBER","index":13,"name":"dim_user_id","comment":null,"description":"ID of the user who triggered the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_user_id"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"user_created_at","comment":null,"description":"timestamp of the user creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_created_at"},"USER_CREATED_DATE":{"type":"DATE","index":15,"name":"USER_CREATED_DATE","comment":null,"display_name":"user_created_date"},"DAYS_SINCE_USER_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":16,"name":"days_since_user_creation_at_event_date","comment":null,"description":"number of days between the user creation and event date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_user_creation_at_event_date"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_CREATED_DATE":{"type":"DATE","index":18,"name":"NAMESPACE_CREATED_DATE","comment":null,"display_name":"namespace_created_date"},"IS_BLOCKED_NAMESPACE_CREATOR":{"type":"BOOLEAN","index":19,"name":"IS_BLOCKED_NAMESPACE_CREATOR","comment":null,"display_name":"is_blocked_namespace_creator"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":20,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"DAYS_SINCE_NAMESPACE_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":21,"name":"days_since_namespace_creation_at_event_date","comment":null,"description":"number of days between namespace creation and event date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_namespace_creation_at_event_date"},"DAYS_SINCE_PROJECT_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":22,"name":"days_since_project_creation_at_event_date","comment":null,"description":"number of days between the project creation and event date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_project_creation_at_event_date"},"PROJECT_IS_IMPORTED":{"type":"BOOLEAN","index":23,"name":"project_is_imported","comment":null,"description":"TRUE if the project was imported","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_is_imported"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":24,"name":"PROJECT_IS_LEARN_GITLAB","comment":null,"display_name":"project_is_learn_gitlab"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:13UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4063849472,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_event","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_ci_pipeline","model.gitlab_snowflake.prep_ci_pipeline","model.gitlab_snowflake.prep_action","model.gitlab_snowflake.prep_action","model.gitlab_snowflake.prep_ci_build","model.gitlab_snowflake.prep_ci_build","model.gitlab_snowflake.prep_deployment","model.gitlab_snowflake.prep_deployment","model.gitlab_snowflake.prep_epic","model.gitlab_snowflake.prep_epic","model.gitlab_snowflake.prep_issue","model.gitlab_snowflake.prep_issue","model.gitlab_snowflake.prep_merge_request","model.gitlab_snowflake.prep_merge_request","model.gitlab_snowflake.prep_note","model.gitlab_snowflake.prep_note","model.gitlab_snowflake.prep_package","model.gitlab_snowflake.prep_package","model.gitlab_snowflake.prep_release","model.gitlab_snowflake.prep_release","model.gitlab_snowflake.prep_requirement","model.gitlab_snowflake.prep_requirement","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_ci_stage","model.gitlab_snowflake.prep_ci_stage","model.gitlab_snowflake.prep_todo","model.gitlab_snowflake.prep_todo","model.gitlab_snowflake.prep_resource_label","model.gitlab_snowflake.prep_resource_label","model.gitlab_snowflake.prep_environment_event","model.gitlab_snowflake.prep_environment_event","model.gitlab_snowflake.prep_resource_milestone","model.gitlab_snowflake.prep_resource_milestone","model.gitlab_snowflake.prep_labels","model.gitlab_snowflake.prep_labels","model.gitlab_snowflake.prep_ci_artifact","model.gitlab_snowflake.prep_ci_artifact","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_board","model.gitlab_snowflake.prep_board","model.gitlab_snowflake.prep_project_auto_devops","model.gitlab_snowflake.prep_project_auto_devops","model.gitlab_snowflake.prep_service","model.gitlab_snowflake.prep_service","model.gitlab_snowflake.prep_issue_resource_weight","model.gitlab_snowflake.prep_issue_resource_weight","model.gitlab_snowflake.prep_milestone","model.gitlab_snowflake.prep_milestone","model.gitlab_snowflake.prep_ci_pipeline_schedule","model.gitlab_snowflake.prep_ci_pipeline_schedule","model.gitlab_snowflake.prep_snippet","model.gitlab_snowflake.prep_snippet","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_ci_trigger","model.gitlab_snowflake.prep_ci_trigger","model.gitlab_snowflake.prep_cluster_agent","model.gitlab_snowflake.prep_cluster_agent"]},"config":{"enabled":true,"alias":null,"schema":"dotcom_usage_events_2023_07","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"dotcom_usage_events_2023_07","fqn":["gitlab_snowflake","common_prep","month_partition","dotcom_usage_events","prep_event"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/month_partition/dotcom_usage_events/prep_event.sql","original_file_path":"models/common_prep/month_partition/dotcom_usage_events/prep_event.sql","name":"prep_event","alias":"prep_event","checksum":{"name":"sha256","checksum":"c4223db7958475a1de86952faa59632fcc15653cc6cdf07a7bf1975e307aa3b8"},"tags":["product"],"refs":[["prep_ci_pipeline"],["prep_ci_pipeline"],["prep_action"],["prep_action"],["prep_ci_build"],["prep_ci_build"],["prep_deployment"],["prep_deployment"],["prep_epic"],["prep_epic"],["prep_issue"],["prep_issue"],["prep_merge_request"],["prep_merge_request"],["prep_note"],["prep_note"],["prep_package"],["prep_package"],["prep_release"],["prep_release"],["prep_requirement"],["prep_requirement"],["dim_project"],["dim_project"],["prep_namespace"],["prep_namespace"],["prep_user"],["prep_user"],["prep_gitlab_dotcom_plan"],["prep_gitlab_dotcom_plan"],["prep_namespace_plan_hist"],["prep_namespace_plan_hist"],["prep_ci_stage"],["prep_ci_stage"],["prep_todo"],["prep_todo"],["prep_resource_label"],["prep_resource_label"],["prep_environment_event"],["prep_environment_event"],["prep_resource_milestone"],["prep_resource_milestone"],["prep_labels"],["prep_labels"],["prep_ci_artifact"],["prep_ci_artifact"],["prep_user"],["prep_user"],["prep_board"],["prep_board"],["prep_project_auto_devops"],["prep_project_auto_devops"],["prep_service"],["prep_service"],["prep_issue_resource_weight"],["prep_issue_resource_weight"],["prep_milestone"],["prep_milestone"],["prep_ci_pipeline_schedule"],["prep_ci_pipeline_schedule"],["prep_snippet"],["prep_snippet"],["prep_project"],["prep_project"],["prep_ci_trigger"],["prep_ci_trigger"],["prep_cluster_agent"],["prep_cluster_agent"]],"sources":[],"metrics":[],"description":"$14","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/month_partition/dotcom_usage_events/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/month_partition/dotcom_usage_events/prep_event.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"dotcom_usage_events_{{ var('year', (run_started_at - modules.datetime.timedelta(2)).strftime('%Y')) }}_{{ var('month', (run_started_at - modules.datetime.timedelta(2)).strftime('%m')) }}","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033757.871485,"compiled_sql":"$15","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".dotcom_usage_events_2023_07.prep_event","label":"prep_event"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PROJECT_AUTO_DEVOPS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_AUTO_DEVOPS_ID":{"type":"NUMBER","index":1,"name":"dim_auto_devops_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_auto_devops_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":102988800,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_project_auto_devops","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_project_auto_devops_source","model.gitlab_snowflake.gitlab_dotcom_project_auto_devops_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_auto_devops_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_project_auto_devops"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_project_auto_devops.sql","original_file_path":"models/common_prep/prep_project_auto_devops.sql","name":"prep_project_auto_devops","alias":"prep_project_auto_devops","checksum":{"name":"sha256","checksum":"4cc2b4f53d237dcfd87719bda9b5073ad9b239f992da3e0a73713bba2412dd2a"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_project_auto_devops_source"],["gitlab_dotcom_project_auto_devops_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_project_auto_devops.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_auto_devops_id"},"created_at":1689033756.7316124,"compiled_sql":"$17","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_project_auto_devops","label":"prep_project_auto_devops"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_LABELS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_LABEL_ID":{"type":"NUMBER","index":1,"name":"dim_label_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_label_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"LABEL_TITLE":{"type":"TEXT","index":6,"name":"LABEL_TITLE","comment":null,"display_name":"label_title"},"LABEL_TYPE":{"type":"TEXT","index":7,"name":"LABEL_TYPE","comment":null,"display_name":"label_type"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":9,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_BY":{"type":"TEXT","index":10,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":11,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":12,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":13,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":15,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":294422016,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_labels","raw_sql":"$18","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_labels_source","model.gitlab_snowflake.gitlab_dotcom_labels_source","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_labels"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_labels.sql","original_file_path":"models/common_prep/prep_labels.sql","name":"prep_labels","alias":"prep_labels","checksum":{"name":"sha256","checksum":"e493fa1a17a03338e8488cdc858607754fc3e5deb56f5101000982de90a51e32"},"tags":["product"],"refs":[["gitlab_dotcom_labels_source"],["gitlab_dotcom_labels_source"],["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"]],"sources":[],"metrics":[],"description":"Prep table used to build `dim_issues`, `dim_merge_requests`, `dim_epics` tables. Holds detailed information about the labels used across GitLab\n\nMore information about [labels here](https://docs.gitlab.com/ee/user/project/labels.html)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_labels.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033756.6988666,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_labels","label":"prep_labels"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_BOARD","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BOARD_ID":{"type":"NUMBER","index":1,"name":"dim_board_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_board_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:41UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":139766272,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_board","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_boards_source","model.gitlab_snowflake.gitlab_dotcom_boards_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_board_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_board"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_board.sql","original_file_path":"models/common_prep/prep_board.sql","name":"prep_board","alias":"prep_board","checksum":{"name":"sha256","checksum":"c44179ce250863617e31e9911672f148a017aed9ba31544d5826bb989db72983"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_boards_source"],["gitlab_dotcom_boards_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_board.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_board_id"},"created_at":1689033756.7301233,"compiled_sql":"$1b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_board","label":"prep_board"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_ENGINEERING","name":"INTERNAL_ISSUES_ENHANCED","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ISSUE_ID":{"type":"NUMBER","index":1,"name":"ISSUE_ID","comment":null,"display_name":"issue_id"},"ISSUE_IID":{"type":"NUMBER","index":2,"name":"ISSUE_IID","comment":null,"display_name":"issue_iid"},"AUTHOR_ID":{"type":"NUMBER","index":3,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"IS_CREATED_BY_BOT":{"type":"BOOLEAN","index":4,"name":"IS_CREATED_BY_BOT","comment":null,"display_name":"is_created_by_bot"},"PROJECT_ID":{"type":"NUMBER","index":5,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CLOSED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CLOSED_AT","comment":null,"display_name":"closed_at"},"CREATED_MONTH":{"type":"DATE","index":9,"name":"CREATED_MONTH","comment":null,"display_name":"created_month"},"CLOSED_MONTH":{"type":"DATE","index":10,"name":"CLOSED_MONTH","comment":null,"display_name":"closed_month"},"DAYS_TO_CLOSE":{"type":"NUMBER","index":11,"name":"DAYS_TO_CLOSE","comment":null,"display_name":"days_to_close"},"ISSUE_TITLE":{"type":"TEXT","index":12,"name":"ISSUE_TITLE","comment":null,"display_name":"issue_title"},"ISSUE_DESCRIPTION":{"type":"TEXT","index":13,"name":"ISSUE_DESCRIPTION","comment":null,"display_name":"issue_description"},"MILESTONE_ID":{"type":"NUMBER","index":14,"name":"MILESTONE_ID","comment":null,"display_name":"milestone_id"},"MILESTONE_TITLE":{"type":"TEXT","index":15,"name":"MILESTONE_TITLE","comment":null,"display_name":"milestone_title"},"MILESTONE_DESCRIPTION":{"type":"TEXT","index":16,"name":"MILESTONE_DESCRIPTION","comment":null,"display_name":"milestone_description"},"MILESTONE_START_DATE":{"type":"DATE","index":17,"name":"MILESTONE_START_DATE","comment":null,"display_name":"milestone_start_date"},"MILESTONE_DUE_DATE":{"type":"DATE","index":18,"name":"MILESTONE_DUE_DATE","comment":null,"display_name":"milestone_due_date"},"WEIGHT":{"type":"NUMBER","index":19,"name":"WEIGHT","comment":null,"display_name":"weight"},"NAMESPACE_ID":{"type":"NUMBER","index":20,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":21,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"LABELS":{"type":"ARRAY","index":22,"name":"LABELS","comment":null,"display_name":"labels"},"MASKED_LABEL_TITLE":{"type":"TEXT","index":23,"name":"MASKED_LABEL_TITLE","comment":null,"display_name":"masked_label_title"},"IS_COMMUNITY_CONTRIBUTION":{"type":"BOOLEAN","index":24,"name":"IS_COMMUNITY_CONTRIBUTION","comment":null,"display_name":"is_community_contribution"},"IS_SECURITY":{"type":"BOOLEAN","index":25,"name":"IS_SECURITY","comment":null,"display_name":"is_security"},"IS_CORRECTIVE_ACTION":{"type":"BOOLEAN","index":26,"name":"IS_CORRECTIVE_ACTION","comment":null,"display_name":"is_corrective_action"},"PRIORITY_LABEL":{"type":"TEXT","index":27,"name":"PRIORITY_LABEL","comment":null,"display_name":"priority_label"},"SEVERITY_LABEL":{"type":"TEXT","index":28,"name":"SEVERITY_LABEL","comment":null,"display_name":"severity_label"},"GROUP_LABEL":{"type":"TEXT","index":29,"name":"GROUP_LABEL","comment":null,"display_name":"group_label"},"SECTION_LABEL":{"type":"TEXT","index":30,"name":"SECTION_LABEL","comment":null,"display_name":"section_label"},"STAGE_LABEL":{"type":"TEXT","index":31,"name":"STAGE_LABEL","comment":null,"display_name":"stage_label"},"TYPE_LABEL":{"type":"TEXT","index":32,"name":"TYPE_LABEL","comment":null,"display_name":"type_label"},"SUBTYPE_LABEL":{"type":"TEXT","index":33,"name":"SUBTYPE_LABEL","comment":null,"display_name":"subtype_label"},"WORKFLOW_LABEL":{"type":"TEXT","index":34,"name":"WORKFLOW_LABEL","comment":null,"display_name":"workflow_label"},"IS_INFRADEV":{"type":"BOOLEAN","index":35,"name":"IS_INFRADEV","comment":null,"display_name":"is_infradev"},"FEDRAMP_VULNERABILITY":{"type":"BOOLEAN","index":36,"name":"FEDRAMP_VULNERABILITY","comment":null,"display_name":"fedramp_vulnerability"},"VISIBILITY_LEVEL":{"type":"TEXT","index":37,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"PROJECT_PATH":{"type":"TEXT","index":38,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"FULL_GROUP_PATH":{"type":"TEXT","index":39,"name":"FULL_GROUP_PATH","comment":null,"display_name":"full_group_path"},"URL":{"type":"TEXT","index":40,"name":"URL","comment":null,"display_name":"url"},"IS_PART_OF_PRODUCT":{"type":"BOOLEAN","index":41,"name":"IS_PART_OF_PRODUCT","comment":null,"display_name":"is_part_of_product"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1142859264,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.internal_issues_enhanced","raw_sql":"$1c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.internal_issues","model.gitlab_snowflake.internal_issues","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_milestones","seed.gitlab_snowflake.engineering_analytics_workflow_labels","seed.gitlab_snowflake.engineering_analytics_workflow_labels","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project"]},"config":{"enabled":true,"alias":null,"schema":"workspace_engineering","database":"PROD","tags":["workspace"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_engineering","fqn":["gitlab_snowflake","workspaces","workspace_engineering","internal_issues_enhanced"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_engineering/internal_issues_enhanced.sql","original_file_path":"models/workspaces/workspace_engineering/internal_issues_enhanced.sql","name":"internal_issues_enhanced","alias":"internal_issues_enhanced","checksum":{"name":"sha256","checksum":"e5bc51925b364b097d72e0c73849069b2e49d62665a42e403e4ec9e1fa62b5c7"},"tags":["workspace"],"refs":[["internal_issues"],["internal_issues"],["gitlab_dotcom_namespace_lineage_scd"],["gitlab_dotcom_namespace_lineage_scd"],["dim_namespace"],["dim_namespace"],["stages_groups_yaml_source"],["stages_groups_yaml_source"],["stages_groups_yaml_source"],["stages_groups_yaml_source"],["dim_user"],["dim_user"],["gitlab_dotcom_milestones"],["gitlab_dotcom_milestones"],["engineering_analytics_workflow_labels"],["engineering_analytics_workflow_labels"],["dim_project"],["dim_project"]],"sources":[],"metrics":[],"description":"A model containing all issues. This model includes relevant and common flags that are used in engineering metrics.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_engineering/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_engineering/internal_issues_enhanced.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_engineering","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["workspace"]},"created_at":1689033733.4033933,"compiled_sql":"$1d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_engineering.internal_issues_enhanced","label":"internal_issues_enhanced"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_EVENT_VALID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_PK":{"type":"TEXT","index":1,"name":"event_pk","comment":null,"description":"The unique identifier of an event. This is a generated primary key and will not join back to the source models","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"event_pk"},"DIM_EVENT_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_event_date_id","comment":null,"description":"The ID of the event date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_event_date_id"},"DIM_ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"dim_ultimate_parent_namespace_id","comment":null,"description":"The unique identifier of the ultimate parent namespace in which the event was generated, easily joined to `dim_namespace`. The recommended JOIN is `dim_ultimate_parent_namespace_id = dim_namespace.dim_namespace_id`, which will be a one-to-one relationship. JOINing on `dim_ultimate_parent_namespace_id = dim_namespace.ultimate_parent_namespace_id` will return `dim_namespace` records for both the ultimate parent _and_ all sub-groups underneath it. This field will be NULL if the event is not tied to a namespace (ex. users_created)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ultimate_parent_namespace_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":4,"name":"dim_project_id","comment":null,"description":"The unique identifier of the project in which the event was generated, easily joined to `dim_project`. This will be NULL if the event is not tied to a project (ex. epic_creation, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_project_id"},"DIM_USER_SK":{"type":"TEXT","index":5,"name":"DIM_USER_SK","comment":null,"display_name":"dim_user_sk"},"DIM_USER_ID":{"type":"NUMBER","index":6,"name":"dim_user_id","comment":null,"description":"The unique identifier of the user who generated the event, easily joined to `dim_user`. This will be NULL if the event is not tied to a specific user (ex. terraform_reports, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_user_id"},"DIM_LATEST_PRODUCT_TIER_ID":{"type":"TEXT","index":7,"name":"dim_latest_product_tier_id","comment":null,"description":"The unique identifier of the ultimate parent namespace's latest product tier, easily joined to `dim_product_tier`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_latest_product_tier_id"},"DIM_LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":8,"name":"dim_latest_subscription_id","comment":null,"description":"The unique identifier of the ultimate parent namespace's latest subscription, easily joined to `dim_subscription`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_latest_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"dim_crm_account_id","comment":null,"description":"The unique identifier of a crm account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":10,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"ORDER_ID":{"type":"NUMBER","index":11,"name":"ORDER_ID","comment":null,"display_name":"order_id"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"event_created_at","comment":null,"description":"Timestamp of the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_created_at"},"EVENT_DATE":{"type":"DATE","index":13,"name":"event_date","comment":null,"description":"The date of the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_date"},"IS_NULL_USER":{"type":"BOOLEAN","index":14,"name":"IS_NULL_USER","comment":null,"display_name":"is_null_user"},"GROUP_NAME":{"type":"TEXT","index":15,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"group_name"},"SECTION_NAME":{"type":"TEXT","index":16,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"section_name"},"STAGE_NAME":{"type":"TEXT","index":17,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"IS_SMAU":{"type":"BOOLEAN","index":18,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":19,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":20,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_umau"},"PARENT_ID":{"type":"NUMBER","index":21,"name":"parent_id","comment":null,"description":"The unique identifier of the project (dim_project_id) associated with the event. If no project is associated, the ultimate parent namespace associated with the event. This will be NULL if neither a project or namespace is associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"PARENT_TYPE":{"type":"TEXT","index":22,"name":"parent_type","comment":null,"description":"Denotes whether the event was associate with a project or namespace ('project' or 'group'). This will be NULL if neither a project or namespace is associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_type"},"EVENT_NAME":{"type":"TEXT","index":23,"name":"event_name","comment":null,"description":"The name tied to the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_name"},"PLAN_ID_AT_EVENT_DATE":{"type":"NUMBER","index":24,"name":"plan_id_at_event_date","comment":null,"description":"The ID of the ultimate parent namespace's plan on the day the event was created (ex. 34, 100, 101, etc). If multiple plans are available on a given day, this reflects the plan on the last event of the day for the namespace. Defaults to '34' (free) if a value is not available","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":25,"name":"plan_name_at_event_date","comment":null,"description":"The name of the ultimate parent namespace's plan type on the day when the event was created (ex. free, premium, ultimate). If multiple plans are available on a given day, this reflects the plan on the last event of the day for the namespace. Defaults to 'free' if a value is not available","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":26,"name":"plan_was_paid_at_event_date","comment":null,"description":"Boolean flag which is set to True if the ultimate parent namespace's plan was paid on the day when the event was created. If multiple plans are available on a given day, this reflects the plan on the last event of the day for the namespace. Defaults to False if a value is not available","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_was_paid_at_event_date"},"DAYS_SINCE_USER_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":27,"name":"days_since_user_creation_at_event_date","comment":null,"description":"The count of days between user creation and the event. This will be NULL if a user is not associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_user_creation_at_event_date"},"DAYS_SINCE_NAMESPACE_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":28,"name":"days_since_namespace_creation_at_event_date","comment":null,"description":"The count of days between ultimate parent namespace creation and the event. This will be NULL if a namespace is not associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_namespace_creation_at_event_date"},"DAYS_SINCE_PROJECT_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":29,"name":"days_since_project_creation_at_event_date","comment":null,"description":"The count of days between project creation and the event. This will be NULL if a project is not associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_project_creation_at_event_date"},"DATA_SOURCE":{"type":"TEXT","index":30,"name":"data_source","comment":null,"description":"The source application where the data was extracted from (ex. GITLAB_DOTCOM, VERSION_DB)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"ULTIMATE_PARENT_NAMESPACE_TYPE":{"type":"TEXT","index":31,"name":"ultimate_parent_namespace_type","comment":null,"description":"The type of Ultimate Parent Namespace (user,group,project)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_type"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":32,"name":"namespace_is_internal","comment":null,"description":"Boolean flag set to True if the ultimate parent namespace in which the event was generated is identified as an internal GitLab namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"NAMESPACE_CREATOR_IS_BLOCKED":{"type":"BOOLEAN","index":33,"name":"namespace_creator_is_blocked","comment":null,"description":"Boolean flag set to True if the ultimate parent namespace creator is in a 'blocked' or 'banned' state","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_creator_is_blocked"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":34,"name":"namespace_created_at","comment":null,"description":"The timestamp of the ultimate parent namespace creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_created_at"},"NAMESPACE_CREATED_DATE":{"type":"DATE","index":35,"name":"namespace_created_date","comment":null,"description":"The date of the ultimate parent namespace creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_created_date"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":36,"name":"user_created_at","comment":null,"description":"The timestamp of the user creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_created_at"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":37,"name":"project_is_learn_gitlab","comment":null,"description":"Boolean flag set to True if the project in which the event was generated was a Learn GitLab project, one automatically created during user onboarding","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_is_learn_gitlab"},"PROJECT_IS_IMPORTED":{"type":"BOOLEAN","index":38,"name":"project_is_imported","comment":null,"description":"Boolean flag set to True if the project in which the event was generated was imported","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_is_imported"},"EVENT_CALENDAR_MONTH":{"type":"DATE","index":39,"name":"event_calendar_month","comment":null,"description":"The first day of the calendar month of the event (ex. 2022-05-01, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_calendar_month"},"EVENT_CALENDAR_QUARTER":{"type":"TEXT","index":40,"name":"event_calendar_quarter","comment":null,"description":"The calendar quarter of the event (ex. 2022-Q2, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_calendar_quarter"},"EVENT_CALENDAR_YEAR":{"type":"NUMBER","index":41,"name":"event_calendar_year","comment":null,"description":"The calendar year of the event (ex. 2022, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_calendar_year"},"CREATED_BY":{"type":"TEXT","index":42,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":43,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":44,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":45,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":46,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":47,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:43UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":446654114816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_event_valid","raw_sql":"$1e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.fct_event_valid","model.gitlab_snowflake.fct_event_valid","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.fct_event_valid","model.gitlab_snowflake.fct_event_valid"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","mnpi_exception","product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_event_valid"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_event_valid.sql","original_file_path":"models/common_mart/mart_event_valid.sql","name":"mart_event_valid","alias":"mart_event_valid","checksum":{"name":"sha256","checksum":"155365dc53bd94e8a4b08cee7b28ac80ba6a73c60d4912297d4c3d6b2cf6b406"},"tags":["product","mnpi_exception"],"refs":[["dim_namespace"],["dim_namespace"],["fct_event_valid"],["fct_event_valid"],["dim_user"],["dim_user"],["dim_project"],["dim_project"],["dim_date"],["dim_date"],["fct_event_valid"],["fct_event_valid"]],"sources":[],"metrics":[],"description":"$1f","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_event_valid.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception","product"]},"created_at":1689033731.4632576,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_event_valid","label":"mart_event_valid"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_MILESTONE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MILESTONE_ID":{"type":"NUMBER","index":1,"name":"dim_milestone_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_milestone_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":4,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":5,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":7,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":53017600,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_milestone","raw_sql":"$21","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.dim_epic","model.gitlab_snowflake.dim_epic","model.gitlab_snowflake.gitlab_dotcom_milestones_source","model.gitlab_snowflake.gitlab_dotcom_milestones_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_milestone_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_milestone"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_milestone.sql","original_file_path":"models/common_prep/prep_milestone.sql","name":"prep_milestone","alias":"prep_milestone","checksum":{"name":"sha256","checksum":"56600c6f7e2dacbe0eff64a294737042bff5505a09f188ac5ad8a6ad71fef744"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["dim_issue"],["dim_issue"],["dim_epic"],["dim_epic"],["gitlab_dotcom_milestones_source"],["gitlab_dotcom_milestones_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_milestone.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_milestone_id"},"created_at":1689033756.736061,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_milestone","label":"prep_milestone"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_CI_STAGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CI_STAGE_ID":{"type":"NUMBER","index":1,"name":"dim_ci_stage_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_ci_stage_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"dim_project_id","comment":null,"description":"Foreign key to `dim_project` that shows the ID of the project in which the stage was run. Defaults to `-1` if a project ID from the CI builds source table is not found in `dim_project`.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_project_id"},"DIM_CI_PIPELINE_ID":{"type":"NUMBER","index":3,"name":"dim_ci_pipeline_id","comment":null,"description":"Foreign key to `dim_ci_pipeline` that shows the ID of the pipeline in which the stage was run. Defaults to `-1` if a CI pipeline ID from the CI builds source table is not found in `dim_ci_pipeline`.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_ci_pipeline_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":6,"name":"created_date_id","comment":null,"description":"Foreign key to `dim_date` that shows the ID of the date on which the stage was created. Defaults to `-1` if a date ID from the CI builds source table is not found in `dim_date`.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CI_STAGE_NAME":{"type":"TEXT","index":9,"name":"CI_STAGE_NAME","comment":null,"display_name":"ci_stage_name"},"CI_STAGE_STATUS":{"type":"NUMBER","index":10,"name":"CI_STAGE_STATUS","comment":null,"display_name":"ci_stage_status"},"LOCK_VERSION":{"type":"NUMBER","index":11,"name":"LOCK_VERSION","comment":null,"display_name":"lock_version"},"POSITION":{"type":"NUMBER","index":12,"name":"POSITION","comment":null,"display_name":"position"},"CREATED_BY":{"type":"TEXT","index":13,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":14,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":15,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":16,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":17,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:01UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":63033971712,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ci_stage","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_ci_pipeline","model.gitlab_snowflake.dim_ci_pipeline","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.gitlab_dotcom_ci_stages_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_ci_stages_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_ci_stage_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ci_stage"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ci_stage.sql","original_file_path":"models/common_prep/prep_ci_stage.sql","name":"prep_ci_stage","alias":"prep_ci_stage","checksum":{"name":"sha256","checksum":"7c86fd1b57c995b2bb098295e900585d784bac73fd4edf2e102e075934a0a21b"},"tags":["product"],"refs":[["dim_project"],["dim_project"],["dim_ci_pipeline"],["dim_ci_pipeline"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_date"],["dim_date"],["gitlab_dotcom_ci_stages_dedupe_source"],["gitlab_dotcom_ci_stages_dedupe_source"]],"sources":[],"metrics":[],"description":"A dim table that contains all CI Stages run in Gitlab.com CI Pipelines.\n\nEasy joins available with:\n\n* dim_project through `dim_project_id`\n* dim_ci_pipeline through `dim_ci_pipeline_id`\n* dim_date through `created_date_id`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ci_stage.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_ci_stage_id"},"created_at":1689033756.686712,"compiled_sql":"$24","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ci_stage","label":"prep_ci_stage"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_CI_TRIGGER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CI_TRIGGER_ID":{"type":"NUMBER","index":1,"name":"dim_ci_trigger_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_ci_trigger_id"},"OWNER_ID":{"type":"NUMBER","index":2,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":3,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":6,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:45UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6945792,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ci_trigger","raw_sql":"$25","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_ci_triggers_source","model.gitlab_snowflake.gitlab_dotcom_ci_triggers_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_ci_trigger_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ci_trigger"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ci_trigger.sql","original_file_path":"models/common_prep/prep_ci_trigger.sql","name":"prep_ci_trigger","alias":"prep_ci_trigger","checksum":{"name":"sha256","checksum":"67383d0c4b87eda20519dd68600a007a7dea2f7bfd1cbcd9058b5e6c70210b21"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_ci_triggers_source"],["gitlab_dotcom_ci_triggers_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ci_trigger.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_ci_trigger_id"},"created_at":1689033756.7389443,"compiled_sql":"$26","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ci_trigger","label":"prep_ci_trigger"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_ISSUE_RESOURCE_WEIGHT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_RESOURCE_WEIGHT_ID":{"type":"NUMBER","index":1,"name":"dim_resource_weight_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_resource_weight_id"},"DIM_USER_ID":{"type":"NUMBER","index":2,"name":"DIM_USER_ID","comment":null,"display_name":"dim_user_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":4,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":5,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":7,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":46737408,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_issue_resource_weight","raw_sql":"$27","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.gitlab_dotcom_resource_weight_events_source","model.gitlab_snowflake.gitlab_dotcom_resource_weight_events_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_resource_weight_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_issue_resource_weight"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_issue_resource_weight.sql","original_file_path":"models/common_prep/prep_issue_resource_weight.sql","name":"prep_issue_resource_weight","alias":"prep_issue_resource_weight","checksum":{"name":"sha256","checksum":"c500eb9eb44ea1011beffb11f1226f10d399b60d45e269a9f70ef58077c9a4f9"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["dim_issue"],["dim_issue"],["gitlab_dotcom_resource_weight_events_source"],["gitlab_dotcom_resource_weight_events_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_issue_resource_weight.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_resource_weight_id"},"created_at":1689033756.7344038,"compiled_sql":"$28","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_issue_resource_weight","label":"prep_issue_resource_weight"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_CI_PIPELINE_SCHEDULE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CI_PIPELINE_SCHEDULE_ID":{"type":"NUMBER","index":1,"name":"dim_ci_pipeline_schedule_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_ci_pipeline_schedule_id"},"DIM_USER_ID":{"type":"NUMBER","index":2,"name":"DIM_USER_ID","comment":null,"display_name":"dim_user_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":6,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":7,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":8,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:45UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":8606208,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ci_pipeline_schedule","raw_sql":"$29","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_ci_pipeline_schedules_source","model.gitlab_snowflake.gitlab_dotcom_ci_pipeline_schedules_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_ci_pipeline_schedule_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ci_pipeline_schedule"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ci_pipeline_schedule.sql","original_file_path":"models/common_prep/prep_ci_pipeline_schedule.sql","name":"prep_ci_pipeline_schedule","alias":"prep_ci_pipeline_schedule","checksum":{"name":"sha256","checksum":"9219a755229a2ba9ee155f4934c8339ece99d89133b018e48f60f2f260f6996c"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_ci_pipeline_schedules_source"],["gitlab_dotcom_ci_pipeline_schedules_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ci_pipeline_schedule.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_ci_pipeline_schedule_id"},"created_at":1689033756.7374957,"compiled_sql":"$2a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ci_pipeline_schedule","label":"prep_ci_pipeline_schedule"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SERVICE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SERVICE_ID":{"type":"NUMBER","index":1,"name":"dim_service_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_service_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":87316480,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_service","raw_sql":"$2b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_service_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_service"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_service.sql","original_file_path":"models/common_prep/prep_service.sql","name":"prep_service","alias":"prep_service","checksum":{"name":"sha256","checksum":"4d095315b1fef024fb295d17b6ef42d187d924febd5fbdf2b57ae7bff0bc8098"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_service.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_service_id"},"created_at":1689033756.7330139,"compiled_sql":"$2c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_service","label":"prep_service"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_ENGINEERING","name":"ENGINEERING_MERGE_REQUESTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_ID":{"type":"NUMBER","index":1,"name":"merge_request_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"merge_request_id"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":2,"name":"merge_request_iid","comment":null,"description":"The ID appended to the merge request link","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_iid"},"AUTHOR_ID":{"type":"NUMBER","index":3,"name":"author_id","comment":null,"description":"The user_id that created the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"author_id"},"IS_CREATED_BY_BOT":{"type":"BOOLEAN","index":4,"name":"is_created_by_bot","comment":null,"description":"Boolean field that identifies whether the merge request was created by a bot","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_created_by_bot"},"ASSIGNEE_ID":{"type":"NUMBER","index":5,"name":"assignee_id","comment":null,"description":"The user_id that is assigned to the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"assignee_id"},"PROJECT_ID":{"type":"NUMBER","index":6,"name":"project_id","comment":null,"description":"The project_id related to the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_id"},"TARGET_PROJECT_ID":{"type":"NUMBER","index":7,"name":"target_project_id","comment":null,"description":"The target_project_id related to the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"target_project_id"},"MERGE_REQUEST_STATE":{"type":"TEXT","index":8,"name":"merge_request_state","comment":null,"description":"The merge_request_state related to the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_state"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"created_at","comment":null,"description":"When the merge request was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"updated_at","comment":null,"description":"When the merge request was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_at"},"MERGED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"merged_at","comment":null,"description":"When the merge request was merged","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merged_at"},"CREATED_MONTH":{"type":"DATE","index":12,"name":"created_month","comment":null,"description":"Which month the merge request was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_month"},"MERGE_MONTH":{"type":"DATE","index":13,"name":"merge_month","comment":null,"description":"Which month the merge request was merged","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_month"},"DAYS_TO_MERGE":{"type":"NUMBER","index":14,"name":"days_to_merge","comment":null,"description":"Number of days it takes from when the merge request was created to merged","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_to_merge"},"MERGE_REQUEST_TITLE":{"type":"TEXT","index":15,"name":"merge_request_title","comment":null,"description":"Title of merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_title"},"MERGE_REQUEST_DESCRIPTION":{"type":"TEXT","index":16,"name":"merge_request_description","comment":null,"description":"Description of merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_request_description"},"MILESTONE_ID":{"type":"NUMBER","index":17,"name":"milestone_id","comment":null,"description":"The milestone_id related to the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"milestone_id"},"MILESTONE_TITLE":{"type":"TEXT","index":18,"name":"milestone_title","comment":null,"description":"The title of the related milestone_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"milestone_title"},"MILESTONE_DESCRIPTION":{"type":"TEXT","index":19,"name":"milestone_description","comment":null,"description":"The description of the related milestone_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"milestone_description"},"MILESTONE_START_DATE":{"type":"DATE","index":20,"name":"MILESTONE_START_DATE","comment":null,"display_name":"milestone_start_date"},"MILESTONE_DUE_DATE":{"type":"DATE","index":21,"name":"MILESTONE_DUE_DATE","comment":null,"display_name":"milestone_due_date"},"NAMESPACE_ID":{"type":"NUMBER","index":22,"name":"namespace_id","comment":null,"description":"The namespace_id related to the merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":23,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"LABELS":{"type":"ARRAY","index":24,"name":"labels","comment":null,"description":"The labels on a merge request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"labels"},"MASKED_LABEL_TITLE":{"type":"TEXT","index":25,"name":"masked_label_title","comment":null,"description":"String version of labels, separated by '|'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"masked_label_title"},"IS_COMMUNITY_CONTRIBUTION":{"type":"BOOLEAN","index":26,"name":"is_community_contribution","comment":null,"description":"Boolean field that identifies whether the merge request is a community contribution via labels","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_community_contribution"},"IS_SECURITY":{"type":"BOOLEAN","index":27,"name":"is_security","comment":null,"description":"Boolean field that identifies whether the merge request is related to security via labels","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_security"},"PRIORITY_LABEL":{"type":"TEXT","index":28,"name":"priority_label","comment":null,"description":"The value following a priority label ('priority::%'')","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"priority_label"},"SEVERITY_LABEL":{"type":"TEXT","index":29,"name":"severity_label","comment":null,"description":"The value following a severity label ('severity::%'')","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"severity_label"},"GROUP_LABEL":{"type":"TEXT","index":30,"name":"group_label","comment":null,"description":"The group that the merge request is related to. This is extracted from labels ('group::%''), however, if a group is not in the latest yml file, it will be considered undefined.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_label"},"SECTION_LABEL":{"type":"TEXT","index":31,"name":"section_label","comment":null,"description":"The section that the merge request is related to. This is extracted from labels ('section::%''), however, if a group is not in the latest yml file, it will be considered undefined.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_label"},"STAGE_LABEL":{"type":"TEXT","index":32,"name":"stage_label","comment":null,"description":"The stage that the merge request is related to. This is extracted from labels ('devops::%''), however, if a group is not in the latest yml file, it will be considered undefined.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_label"},"TYPE_LABEL":{"type":"TEXT","index":33,"name":"type_label","comment":null,"description":"The worktype type classification, defined as either a bug, maintenance, or feature.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"type_label"},"SUBTYPE_LABEL":{"type":"TEXT","index":34,"name":"subtype_label","comment":null,"description":"The worktype subtype classification that matches a type_label","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subtype_label"},"VISIBILITY_LEVEL":{"type":"TEXT","index":35,"name":"visibility_level","comment":null,"description":"Indicate if the merge request lives in a private or public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"FULL_GROUP_PATH":{"type":"TEXT","index":36,"name":"full_group_path","comment":null,"description":"The group path in the merge request URL","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"full_group_path"},"URL":{"type":"TEXT","index":37,"name":"url","comment":null,"description":"Merge request URL","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"url"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":198473216,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.engineering_merge_requests","raw_sql":"$2d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.internal_merge_requests","model.gitlab_snowflake.internal_merge_requests","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.stages_groups_yaml_source","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project"]},"config":{"enabled":true,"alias":null,"schema":"workspace_engineering","database":"PROD","tags":["workspace"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_engineering","fqn":["gitlab_snowflake","workspaces","workspace_engineering","engineering_merge_requests"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_engineering/engineering_merge_requests.sql","original_file_path":"models/workspaces/workspace_engineering/engineering_merge_requests.sql","name":"engineering_merge_requests","alias":"engineering_merge_requests","checksum":{"name":"sha256","checksum":"37705c41574bce800dccca1e1a5718009d690b187a54bd927ecd0438ca2e479e"},"tags":["workspace"],"refs":[["internal_merge_requests"],["internal_merge_requests"],["dim_namespace"],["dim_namespace"],["stages_groups_yaml_source"],["stages_groups_yaml_source"],["stages_groups_yaml_source"],["stages_groups_yaml_source"],["dim_user"],["dim_user"],["gitlab_dotcom_milestones"],["gitlab_dotcom_milestones"],["dim_project"],["dim_project"]],"sources":[],"metrics":[],"description":"A model containing all MRs that affect our product. This model includes relevant and common flags that are used in engineering metrics.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_engineering/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_engineering/engineering_merge_requests.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_engineering","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["workspace"]},"created_at":1689033733.4333897,"compiled_sql":"$2e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_engineering.engineering_merge_requests","label":"engineering_merge_requests"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_ENGINEERING","name":"INTERNAL_NOTE_AWARDS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PROJECT_ID":{"type":"NUMBER","index":3,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"NOTEABLE_TYPE":{"type":"TEXT","index":4,"name":"NOTEABLE_TYPE","comment":null,"display_name":"noteable_type"},"MERGE_REQUEST_ID":{"type":"NUMBER","index":5,"name":"MERGE_REQUEST_ID","comment":null,"display_name":"merge_request_id"},"ISSUE_ID":{"type":"NUMBER","index":6,"name":"ISSUE_ID","comment":null,"display_name":"issue_id"},"NOTE_ID":{"type":"NUMBER","index":7,"name":"NOTE_ID","comment":null,"display_name":"note_id"},"NOTE_AUTHOR_ID":{"type":"NUMBER","index":8,"name":"NOTE_AUTHOR_ID","comment":null,"display_name":"note_author_id"},"AWARD_EMOJI_ID":{"type":"NUMBER","index":9,"name":"AWARD_EMOJI_ID","comment":null,"display_name":"award_emoji_id"},"AWARD_EMOJI_NAME":{"type":"TEXT","index":10,"name":"AWARD_EMOJI_NAME","comment":null,"display_name":"award_emoji_name"},"AWARDER_USER_ID":{"type":"NUMBER","index":11,"name":"AWARDER_USER_ID","comment":null,"display_name":"awarder_user_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":138876416,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.internal_note_awards","raw_sql":"$2f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_merge_request","model.gitlab_snowflake.dim_merge_request","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.gitlab_dotcom_notes_source","model.gitlab_snowflake.gitlab_dotcom_notes_source","model.gitlab_snowflake.gitlab_dotcom_award_emoji_source","model.gitlab_snowflake.gitlab_dotcom_award_emoji_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_engineering","database":"PROD","tags":["workspace"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_engineering","fqn":["gitlab_snowflake","workspaces","workspace_engineering","internal_note_awards"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_engineering/internal_note_awards.sql","original_file_path":"models/workspaces/workspace_engineering/internal_note_awards.sql","name":"internal_note_awards","alias":"internal_note_awards","checksum":{"name":"sha256","checksum":"5a574cdb2115de74925d3ed56855771f3abfb020d8632d3c9b0142f2def5b094"},"tags":["workspace"],"refs":[["dim_project"],["dim_project"],["dim_merge_request"],["dim_merge_request"],["dim_issue"],["dim_issue"],["gitlab_dotcom_notes_source"],["gitlab_dotcom_notes_source"],["gitlab_dotcom_award_emoji_source"],["gitlab_dotcom_award_emoji_source"]],"sources":[],"metrics":[],"description":"A model to expose the awards at the note level.  This table is limited to Issues and Merge Requests that are a part of internal GitLab projects.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_engineering/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_engineering/internal_note_awards.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_engineering","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["workspace"]},"created_at":1689033733.401148,"compiled_sql":"$30","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_engineering.internal_note_awards","label":"internal_note_awards"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_ENVIRONMENT_EVENT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_ENVIRONMENT_ID":{"type":"NUMBER","index":1,"name":"dim_environment_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_environment_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":7,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":299250688,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_environment_event","raw_sql":"$31","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_environments_source","model.gitlab_snowflake.gitlab_dotcom_environments_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_environment_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_environment_event"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_environment_event.sql","original_file_path":"models/common_prep/prep_environment_event.sql","name":"prep_environment_event","alias":"prep_environment_event","checksum":{"name":"sha256","checksum":"25c597e311321780fca4c0151cbc66ff8fb03a7b79f488161b362e43c0d1a045"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_environments_source"],["gitlab_dotcom_environments_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_environment_event.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_environment_id"},"created_at":1689033756.725165,"compiled_sql":"$32","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_environment_event","label":"prep_environment_event"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"MART_CI_RUNNER_ACTIVITY_DAILY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"REPORT_DATE":{"type":"DATE","index":1,"name":"report_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"report_date"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"dim_project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_project_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"dim_plan_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_plan_id"},"DIM_CI_RUNNER_ID":{"type":"NUMBER","index":6,"name":"dim_ci_runner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_ci_runner_id"},"DIM_CI_PIPELINE_ID":{"type":"NUMBER","index":7,"name":"dim_ci_pipeline_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_ci_pipeline_id"},"DIM_CI_STAGE_ID":{"type":"NUMBER","index":8,"name":"dim_ci_stage_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_ci_stage_id"},"JOB_COUNT":{"type":"NUMBER","index":9,"name":"JOB_COUNT","comment":null,"display_name":"job_count"},"CI_BUILD_DURATION_IN_S":{"type":"NUMBER","index":10,"name":"ci_build_duration_in_s","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_build_duration_in_s"},"PUBLIC_PROJECTS_MINUTES_COST_FACTOR":{"type":"FLOAT","index":11,"name":"public_projects_minutes_cost_factor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"public_projects_minutes_cost_factor"},"PRIVATE_PROJECTS_MINUTES_COST_FACTOR":{"type":"FLOAT","index":12,"name":"private_projects_minutes_cost_factor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"private_projects_minutes_cost_factor"},"IS_PAID_BY_GITLAB":{"type":"BOOLEAN","index":13,"name":"is_paid_by_gitlab","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_by_gitlab"},"PROJECT_VISIBILITY_LEVEL":{"type":"TEXT","index":14,"name":"project_visibility_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_visibility_level"},"PROJECT_PATH":{"type":"TEXT","index":15,"name":"project_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_path"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":16,"name":"namespace_is_internal","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":17,"name":"ultimate_parent_plan_title","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_plan_title"},"CREATED_BY":{"type":"TEXT","index":18,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":19,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":20,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":21,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":22,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:18UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":41890142720,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ci_runner_activity_daily","raw_sql":"$33","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.fct_ci_runner_activity","model.gitlab_snowflake.fct_ci_runner_activity","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","mart_ci_runner_activity_daily"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/mart_ci_runner_activity_daily.sql","original_file_path":"models/common_mart_product/mart_ci_runner_activity_daily.sql","name":"mart_ci_runner_activity_daily","alias":"mart_ci_runner_activity_daily","checksum":{"name":"sha256","checksum":"d607f33ce7e0878dd2353b57f3043037299449e7ab0d2915eba72b4c01456ca3"},"tags":["product"],"refs":[["fct_ci_runner_activity"],["fct_ci_runner_activity"],["dim_namespace"],["dim_namespace"],["dim_project"],["dim_project"],["dim_date"],["dim_date"]],"sources":[],"metrics":[],"description":"Mart table containing quantitative data related to CI runner activity on GitLab.com.\n\nThese metrics are aggregated at a daily grain per `dim_project_id`.\n\nAdditional identifier/key fields - `dim_ci_runner_id`, `dim_ci_pipeline_id`, `dim_ci_stage_id` have been included for Reporting purposes.\n\nOnly activity since 2020-01-01 is being processed due to the high volume of the data.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/mart_ci_runner_activity_daily.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033735.2405777,"compiled_sql":"$34","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.mart_ci_runner_activity_daily","label":"mart_ci_runner_activity_daily"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_CI_ARTIFACT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CI_JOB_ARTIFACT_ID":{"type":"NUMBER","index":1,"name":"dim_ci_job_artifact_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_ci_job_artifact_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":4,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"FILE_TYPE":{"type":"NUMBER","index":5,"name":"FILE_TYPE","comment":null,"display_name":"file_type"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":8,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:42UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":82245782016,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ci_artifact","raw_sql":"$35","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_ci_job_artifacts_source","model.gitlab_snowflake.gitlab_dotcom_ci_job_artifacts_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_ci_job_artifact_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ci_artifact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ci_artifact.sql","original_file_path":"models/common_prep/prep_ci_artifact.sql","name":"prep_ci_artifact","alias":"prep_ci_artifact","checksum":{"name":"sha256","checksum":"ee776d70d877d1072b932b604c30b86c9cd768a94e232b83fd7af2cdda05b6a5"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_ci_job_artifacts_source"],["gitlab_dotcom_ci_job_artifacts_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ci_artifact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_ci_job_artifact_id"},"created_at":1689033756.728531,"compiled_sql":"$36","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ci_artifact","label":"prep_ci_artifact"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_BEHAVIOR_STRUCTURED_EVENT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"BEHAVIOR_STRUCTURED_EVENT_PK":{"type":"TEXT","index":1,"name":"behavior_structured_event_pk","comment":null,"description":"This is the Primary key. This ID is generated from [prep_snowplow_unnested_events_all](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.prep_snowplow_unnested_events_all) using `event_id`.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"behavior_structured_event_pk"},"BEHAVIOR_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"behavior_at","comment":null,"description":"Timestamp for when the event actually happened. This appears as `derived_tstamp` in the raw Snowplow data.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"behavior_at"},"BEHAVIOR_DATE":{"type":"DATE","index":3,"name":"behavior_date","comment":null,"description":"Timestamp for when the event actually happened. This appears as `derived_tstamp` in the raw Snowplow data.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"behavior_date"},"APP_ID":{"type":"TEXT","index":4,"name":"app_id","comment":null,"description":"The environment of the event - Production, Staging OR Development. To only include GitLab.com Production events, set filter to `app_id IN ('gitlab','gitlab_customers')`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"app_id"},"USER_SNOWPLOW_DOMAIN_ID":{"type":"TEXT","index":5,"name":"user_snowplow_domain_id","comment":null,"description":"Unique User ID set by Snowplow when the user visits GitLab.com for the first time (using 1st party cookie). This value will remain the same until a user clears their cookies. Note: if a user visits GitLab.com on a different browser, they will have a different unique ID.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_snowplow_domain_id"},"CONTEXTS":{"type":"VARIANT","index":6,"name":"contexts","comment":null,"description":"JSON object for custom contexts implemented during tracking implementation. [More information on Snowplow contexts](https://docs.snowplow.io/docs/understanding-your-pipeline/canonical-event/#contexts). [More information on GitLab standard context](https://docs.gitlab.com/ee/development/snowplow/schemas.html#gitlab_standard)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"contexts"},"PAGE_URL_PATH":{"type":"TEXT","index":7,"name":"page_url_path","comment":null,"description":"The page URL path of the event **without** the host (gitlab.com) information. Example: `/namespace9495566/project21362945/-/merge_requests/1575`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"page_url_path"},"PAGE_URL_FRAGMENT":{"type":"TEXT","index":8,"name":"page_url_fragment","comment":null,"description":"Fragment aka anchor. Ex. For gitlab.com/projects/new#blank_project, the page_url_fragment is `blank_project`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"page_url_fragment"},"GSC_GOOGLE_ANALYTICS_CLIENT_ID":{"type":"TEXT","index":9,"name":"gsc_google_analytics_client_id","comment":null,"description":"Google Analytics ID, present when set from our marketing sites.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gsc_google_analytics_client_id"},"GSC_PSEUDONYMIZED_USER_ID":{"type":"TEXT","index":10,"name":"gsc_pseudonymized_user_id","comment":null,"description":"User database record ID attribute. This value undergoes a pseudonymization process at the collector level. Note: This field is only populated after a user susccessfully registers on GitLab.com i.e. they verify their e-mail and log-in for the first time. This value will be NULL in the following situations:\n\n- The event occurred before `2021-09-29` (when the collection of this data started)\n- A user is not logged in\n- The event occurs on a page outside of the SaaS product (ex. about.gitlab.com, docs.gitlab.com)\n- It is an unstructured event\n- The event is not associated with a user (some backend events)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gsc_pseudonymized_user_id"},"GSC_EXTRA":{"type":"VARIANT","index":11,"name":"gsc_extra","comment":null,"description":"Any additional data associated with the event, in the form of key-value pairs.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gsc_extra"},"GSC_PLAN":{"type":"TEXT","index":12,"name":"gsc_plan","comment":null,"description":"Name of the plan for the namespace, such as free, premium, or ultimate. Automatically picked from the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gsc_plan"},"GSC_SOURCE":{"type":"TEXT","index":13,"name":"gsc_source","comment":null,"description":"Name of the source application/ event tracker, such as gitlab-rails or gitlab-javascript. This field can be used to distinguish front-end events V/S back-end events. When `gsc_source = 'gitlab-rails'` THEN back-end event i.e. event was tracked using Ruby. When `gsc_source = 'gitlab-javascrip'` THEN front-end event i.e. event was tracked using Javascript.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gsc_source"},"EVENT_VALUE":{"type":"TEXT","index":14,"name":"event_value","comment":null,"description":"An optional numeric data to quantify or further describe the user action. Example: `1` could mean success and `0` could mean failure of an event . See [GitLab Event schema for more details](https://docs.gitlab.com/ee/development/snowplow/index.html#event-schema).\n\nNote: \n- It is only populated for strutured events (`event=struct`)\n- The value of this field is not standardized and depends on implementing engineer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_value"},"SESSION_INDEX":{"type":"NUMBER","index":15,"name":"session_index","comment":null,"description":"It is the number of the current user session. For example, an event occurring during a user's first session would have session_index set to 1.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"session_index"},"SESSION_ID":{"type":"TEXT","index":16,"name":"session_id","comment":null,"description":"Unique idenfitier for each user session. Note: session_id is NULL for back-end events (`tracker_version LIKE '%rb%'`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"session_id"},"EVENT_CATEGORY":{"type":"TEXT","index":17,"name":"event_category","comment":null,"description":"The event category i.e. The page or backend section of the application. Example: `projects:merge_requests:creations:new`, `InvitesController`, `projects:issues:designs` etc. See [GitLab Event schema for more details](https://docs.gitlab.com/ee/development/snowplow/index.html#event-schema). \n\nNote: \n- It is only populated for strutured events (`event=struct`) and **can not be NULL**\n- The value of this field is not standardized and depends on implementing engineer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_category"},"EVENT_ACTION":{"type":"TEXT","index":18,"name":"event_action","comment":null,"description":"The action the user takes, or aspect thatâs being instrumented. Example: `invite_email_sent`, `join_clicked` etc. See [GitLab Event schema for more details](https://docs.gitlab.com/ee/development/snowplow/index.html#event-schema). \n\nNote:\n- It is only populated for strutured events (`event=struct`) and **can not be NULL**\n- The value of this field is not standardized and depends on implementing engineer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_action"},"EVENT_LABEL":{"type":"TEXT","index":19,"name":"event_label","comment":null,"description":"An optional string which identifies the specific object being actioned. Example: `invite_email`, `content_editor` etc. See [GitLab Event schema for more details](https://docs.gitlab.com/ee/development/snowplow/index.html#event-schema). \n\nNote: \n- It is only populated for strutured events (`event=struct`)\n- The value of this field is not standardized and depends on implementing engineer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_label"},"EVENT_PROPERTY":{"type":"TEXT","index":20,"name":"event_property","comment":null,"description":"An optional string describing the object or the action performed on it. Example: There are four different possible merge request actions: âcreateâ, âmergeâ, âcommentâ, and âcloseâ. Each of these would be a possible property value. See [GitLab Event schema for more details](https://docs.gitlab.com/ee/development/snowplow/index.html#event-schema). \n\nNote: \n- It is only populated for strutured events (`event=struct`)\n- The value of this field is not standardized and depends on implementing engineer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_property"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":21,"name":"dim_namespace_id","comment":null,"description":"The unique identifier of the namespace in which the event was generated, easily joined to `dim_namespace`. This field will be NULL if the event is not tied to a namespace (ex. viewing the To Dos page) and/or if the event occurred before `2021-09-02` (when collection of this data started). This is passed in the GitLab standard context and appears as `gsc_namespace_id` in the raw Snowplow data.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":22,"name":"ultimate_parent_namespace_id","comment":null,"description":"The unique identifier (and natural key) of the namespace's ultimate parent, easily joined to `dim_namespace`. The recommended JOIN is `dim_ultimate_parent_namespace_id = dim_namespace.dim_namespace_id`, which will be a one-to-one relationship. JOINing on `dim_ultimate_parent_namespace_id = dim_namespace.ultimate_parent_namespace_id` will return `dim_namespace` records for both the ultimate parent _and_ all sub-groups underneath it.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":23,"name":"namespace_is_internal","comment":null,"description":"Boolean flag set to True if the ultimate parent namespace in which the event was generated is identified as an internal GitLab namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"NAMESPACE_IS_ULTIMATE_PARENT":{"type":"BOOLEAN","index":24,"name":"namespace_is_ultimate_parent","comment":null,"description":"Boolean flag which is set to True if the namespace is the ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_ultimate_parent"},"NAMESPACE_TYPE":{"type":"TEXT","index":25,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_type"},"VISIBILITY_LEVEL":{"type":"TEXT","index":26,"name":"visibility_level","comment":null,"description":"The visibility setting for the namespace or project: public, private, or internal. More information about namespace and project visibility [here](https://docs.gitlab.com/ee/user/public_access.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"DIM_PROJECT_ID":{"type":"NUMBER","index":27,"name":"dim_project_id","comment":null,"description":"The unique identifier of the project in which the event was generated, easily joined to `dim_project`. This field will be NULL if the event is not tied to a project (ex. viewing an epic) and/or if the event occurred before `2021-09-02` (when collection of this data started).. This is passed in the GitLab standard context and appears as `gsc_project_id` in the raw Snowplow data.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_project_id"},"DEVICE_TYPE":{"type":"TEXT","index":28,"name":"device_type","comment":null,"description":"The type of device (ex. 'Mobile', 'Computer'). This appears as `dvce_type` in the raw Snowplow data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"device_type"},"IS_DEVICE_MOBILE":{"type":"BOOLEAN","index":29,"name":"is_device_mobile","comment":null,"description":"Boolean flag set to True if the event is triggered on a mobile device. This appears as `dvce_ismobile` in the raw Snowplow data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_device_mobile"},"DIM_BEHAVIOR_REFERRER_PAGE_SK":{"type":"TEXT","index":30,"name":"dim_behavior_referrer_page_sk","comment":null,"description":"Surrogate key consisting of referer_url, app_id and referer_url_scheme, easily JOINed to dim_behavior_website_page ON `dim_behavior_website_page_sk`. This ID in generated using `referer_url`, `app_id`, `referer_url_scheme` from [prep_snowplow_unnested_events_all](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.prep_snowplow_unnested_events_all).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_behavior_referrer_page_sk"},"CREATED_BY":{"type":"TEXT","index":31,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":32,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":33,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":34,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":35,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"HAS_GITLAB_SERVICE_PING_CONTEXT":{"type":"BOOLEAN","index":38,"name":"has_gitlab_service_ping_context","comment":null,"description":"A flag to indicate if the event has additional information in the context field related to `gitlab_service_ping`.  This context is defined in the Gitlab [iglu project](https://gitlab.com/gitlab-org/iglu/-/tree/master/public/schemas/com.gitlab)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_gitlab_service_ping_context"},"HAS_GITLAB_EXPERIMENT_CONTEXT":{"type":"BOOLEAN","index":39,"name":"has_gitlab_experiment_context","comment":null,"description":"A flag to indicate if the event has additional information in the context field related to `gitlab_experiment`.  This context is defined in the Gitlab [iglu project](https://gitlab.com/gitlab-org/iglu/-/tree/master/public/schemas/com.gitlab)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_gitlab_experiment_context"},"HAS_CUSTOMER_STANDARD_CONTEXT":{"type":"BOOLEAN","index":40,"name":"has_customer_standard_context","comment":null,"description":"A flag to indicate if the event has additional information in the context field related to `customer_standard`.  This context is defined in the Gitlab [iglu project](https://gitlab.com/gitlab-org/iglu/-/tree/master/public/schemas/com.gitlab)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_customer_standard_context"},"BROWSER_NAME":{"type":"TEXT","index":41,"name":"browser_name","comment":null,"description":"The name of the browser family (ex. 'Chrome', 'Firefox', 'Safari', etc). This appears as `br_family` in the raw Snowplow data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"browser_name"},"DIM_BEHAVIOR_BROWSER_SK":{"type":"TEXT","index":42,"name":"dim_behavior_browser_sk","comment":null,"description":"Surrogate key consisting of browser_name, browser_major_version, browser_minor_version, and browser_language, easily JOINed to dim_behavior_browser. This ID in generated in [prep_snowplow_unnested_events_all](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.prep_snowplow_unnested_events_all) using `br_family`, `br_name`, `br_version`, and `br_lang`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_behavior_browser_sk"},"DIM_PLAN_ID":{"type":"NUMBER","index":43,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"PLAN_ID_MODIFIED":{"type":"NUMBER","index":44,"name":"PLAN_ID_MODIFIED","comment":null,"display_name":"plan_id_modified"},"PLAN_NAME":{"type":"TEXT","index":45,"name":"PLAN_NAME","comment":null,"display_name":"plan_name"},"PLAN_NAME_MODIFIED":{"type":"TEXT","index":46,"name":"PLAN_NAME_MODIFIED","comment":null,"display_name":"plan_name_modified"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:52UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2713790832640,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"clustering_key":{"id":"clustering_key","label":"Clustering Key","value":"LINEAR(behavior_at::DATE)","include":true,"description":"The key used to cluster this table"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_behavior_structured_event","raw_sql":"$37","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.only_force_full_refresh","macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_behavior_event","model.gitlab_snowflake.dim_behavior_event","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_behavior_operating_system","model.gitlab_snowflake.dim_behavior_operating_system","model.gitlab_snowflake.dim_behavior_browser","model.gitlab_snowflake.dim_behavior_browser","model.gitlab_snowflake.dim_plan","model.gitlab_snowflake.dim_plan","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.fct_behavior_structured_event","model.gitlab_snowflake.fct_behavior_structured_event"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":false,"unique_key":"behavior_structured_event_pk","on_schema_change":"sync_all_columns","grants":{},"copy_grants":true,"query_tag":"dbt","cluster_by":["behavior_at::DATE","event_action"],"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_behavior_structured_event"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_behavior_structured_event.sql","original_file_path":"models/common_mart/mart_behavior_structured_event.sql","name":"mart_behavior_structured_event","alias":"mart_behavior_structured_event","checksum":{"name":"sha256","checksum":"5178bb6e768eecccaf3867530740e23739b679af4fea9d7eb6d565109c441688"},"tags":["product"],"refs":[["dim_behavior_event"],["dim_behavior_event"],["dim_namespace"],["dim_namespace"],["dim_project"],["dim_project"],["dim_behavior_operating_system"],["dim_behavior_operating_system"],["dim_behavior_browser"],["dim_behavior_browser"],["dim_plan"],["dim_plan"],["dim_date"],["dim_date"],["fct_behavior_structured_event"],["fct_behavior_structured_event"]],"sources":[],"metrics":[],"description":"$38","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_behavior_structured_event.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"behavior_structured_event_pk","full_refresh":false,"on_schema_change":"sync_all_columns","cluster_by":["behavior_at::DATE","event_action"]},"created_at":1689033731.7724087,"compiled_sql":"$39","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_behavior_structured_event","label":"mart_behavior_structured_event"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_TODO","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_TODO_ID":{"type":"NUMBER","index":1,"name":"dim_todo_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_todo_id"},"AUTHOR_ID":{"type":"NUMBER","index":2,"name":"author_id","comment":null,"description":"The user id of the todo author","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"author_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":3,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":6,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"target_type":{"name":"target_type","description":"The type of item the todo was created on","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"target_type"},"state":{"name":"state","description":"Can be either 'pending' or 'done'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"state"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:48UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":8400014336,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_todo","raw_sql":"$3a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_todos_source","model.gitlab_snowflake.gitlab_dotcom_todos_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_todo_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_todo"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_todo.sql","original_file_path":"models/common_prep/prep_todo.sql","name":"prep_todo","alias":"prep_todo","checksum":{"name":"sha256","checksum":"4993af9051de90ac0084fea577e7918ad4da3cc157520067751f2ccb499ea30b"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_todos_source"],["gitlab_dotcom_todos_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_todo.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_todo_id"},"created_at":1689033756.7218487,"compiled_sql":"$3b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_todo","label":"prep_todo"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SNIPPET","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SNIPPET_ID":{"type":"NUMBER","index":1,"name":"dim_snippet_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_snippet_id"},"AUTHOR_ID":{"type":"NUMBER","index":2,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":3,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":6,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:48UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":15115264,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_snippet","raw_sql":"$3c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.gitlab_dotcom_snippets_source","model.gitlab_snowflake.gitlab_dotcom_snippets_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_snippet_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_snippet"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_snippet.sql","original_file_path":"models/common_prep/prep_snippet.sql","name":"prep_snippet","alias":"prep_snippet","checksum":{"name":"sha256","checksum":"2ac2fe4a904df6f62f0be0bf4f4b09c968d4892e11869884f9ced3c3b41c403a"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["dim_project"],["dim_project"],["gitlab_dotcom_snippets_source"],["gitlab_dotcom_snippets_source"]],"sources":[],"metrics":[],"description":"Prep table used in `prep_event`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_snippet.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_snippet_id"},"created_at":1689033756.740302,"compiled_sql":"$3d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_snippet","label":"prep_snippet"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_project_id","model":"{{ get_where_subquery(ref('dim_project')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_project"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_dim_project_dim_project_id"],"unique_id":"test.gitlab_snowflake.not_null_dim_project_dim_project_id.759a1862b2","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_project_dim_project_id.sql","original_file_path":"models/common/schema.yml","name":"not_null_dim_project_dim_project_id","alias":"not_null_dim_project_dim_project_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_project"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_dim_project_dim_project_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.294585,"compiled_sql":"\n    \n    \n\n\n\nselect dim_project_id\nfrom \"PROD\".common.dim_project\nwhere dim_project_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_project_id","file_key_name":"models.dim_project","label":"not_null_dim_project_dim_project_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"dim_project_id","model":"{{ get_where_subquery(ref('dim_project')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_project"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","unique_dim_project_dim_project_id"],"unique_id":"test.gitlab_snowflake.unique_dim_project_dim_project_id.6f143c744e","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_dim_project_dim_project_id.sql","original_file_path":"models/common/schema.yml","name":"unique_dim_project_dim_project_id","alias":"unique_dim_project_dim_project_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_project"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/unique_dim_project_dim_project_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.2991357,"compiled_sql":"\n    \n    \n\nselect\n    dim_project_id as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".common.dim_project\nwhere dim_project_id is not null\ngroup by dim_project_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_project_id","file_key_name":"models.dim_project","label":"unique_dim_project_dim_project_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_namespace_id","model":"{{ get_where_subquery(ref('dim_project')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_project"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_dim_project_dim_namespace_id"],"unique_id":"test.gitlab_snowflake.not_null_dim_project_dim_namespace_id.29c95589a8","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_project_dim_namespace_id.sql","original_file_path":"models/common/schema.yml","name":"not_null_dim_project_dim_namespace_id","alias":"not_null_dim_project_dim_namespace_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["dim_project"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_dim_project_dim_namespace_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.303176,"compiled_sql":"\n    \n    \n\n\n\nselect dim_namespace_id\nfrom \"PROD\".common.dim_project\nwhere dim_namespace_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_namespace_id","file_key_name":"models.dim_project","label":"not_null_dim_project_dim_namespace_id"}],"exposure":[{"fqn":["gitlab_snowflake","common_mart","behavior_structured_event"],"unique_id":"exposure.gitlab_snowflake.behavior_structured_event","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/exposures.yml","original_file_path":"models/common_mart/exposures.yml","name":"behavior_structured_event","type":"analysis","owner":{"email":"slack channel or email","name":"Product Insights"},"resource_type":"exposure","description":"TBA\n","maturity":"high","meta":{},"tags":[],"url":"https://lucid.app/lucidchart/5d5c918d-2e6d-47d6-a2e5-db3c4951c531/edit?invitationId=inv_a4c5f29c-930f-4103-a121-320dd8009b5a&page=-3ovyOx0~RdS#","depends_on":{"macros":[],"nodes":["model.gitlab_snowflake.fct_behavior_structured_event","model.gitlab_snowflake.dim_behavior_event","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_behavior_operating_system","model.gitlab_snowflake.dim_date"]},"refs":[["fct_behavior_structured_event"],["dim_behavior_event"],["dim_namespace"],["dim_project"],["dim_behavior_operating_system"],["dim_date"]],"sources":[],"created_at":1689033731.4374905,"label":"behavior_structured_event"}]},"node":{"resource_type":"model","name":"dim_project","unique_id":"model.gitlab_snowflake.dim_project"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PROJECT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PROJECT_ID":{"type":"NUMBER","index":1,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_USER_ID_CREATOR":{"type":"NUMBER","index":4,"name":"DIM_USER_ID_CREATOR","comment":null,"display_name":"dim_user_id_creator"},"DIM_DATE_ID":{"type":"NUMBER","index":5,"name":"DIM_DATE_ID","comment":null,"display_name":"dim_date_id"},"DIM_PRODUCT_TIER_ID_AT_CREATION":{"type":"TEXT","index":6,"name":"DIM_PRODUCT_TIER_ID_AT_CREATION","comment":null,"display_name":"dim_product_tier_id_at_creation"},"DIM_PLAN_ID":{"type":"NUMBER","index":7,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":11,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"IS_ARCHIVED":{"type":"BOOLEAN","index":12,"name":"IS_ARCHIVED","comment":null,"display_name":"is_archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":13,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":14,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":15,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":16,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"IS_IMPORTED":{"type":"BOOLEAN","index":17,"name":"IS_IMPORTED","comment":null,"display_name":"is_imported"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":18,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":19,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":20,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":21,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":22,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":23,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":24,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":25,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":26,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":27,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":28,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":29,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":30,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":31,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":32,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":33,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":34,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":35,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":36,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":37,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":38,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":39,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":40,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":41,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":42,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":43,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":44,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":45,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":46,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":47,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":48,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":49,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":50,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":51,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":52,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":53,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":54,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":55,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":56,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":57,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":58,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":59,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":60,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":61,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":62,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"IS_LEARN_GITLAB":{"type":"BOOLEAN","index":63,"name":"IS_LEARN_GITLAB","comment":null,"display_name":"is_learn_gitlab"},"ACTIVE_SERVICE_TYPES_ARRAY":{"type":"ARRAY","index":64,"name":"ACTIVE_SERVICE_TYPES_ARRAY","comment":null,"display_name":"active_service_types_array"},"MEMBER_COUNT":{"type":"NUMBER","index":65,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2232034816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_project","raw_sql":"$3e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_project"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_project.sql","original_file_path":"models/common_prep/prep_project.sql","name":"prep_project","alias":"prep_project","checksum":{"name":"sha256","checksum":"aefd9a1ae7eee148ae3c5e359989133a026ade6ed5a4c7db90fe64ab6766b5a6"},"tags":[],"refs":[["dim_date"],["dim_date"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["prep_product_tier"],["prep_product_tier"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"]],"sources":[],"metrics":[],"description":"Prep table for project-level data. Used to build `dim_project`, in addition to other facts and dimensions","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_project.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.8471196,"compiled_sql":"$3f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_project","label":"prep_project"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$40","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527}]},"node":{"resource_type":"model","name":"dim_project","unique_id":"model.gitlab_snowflake.dim_project"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L41",null,{"versions":{"Source":"$42","Compiled":"$43"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
