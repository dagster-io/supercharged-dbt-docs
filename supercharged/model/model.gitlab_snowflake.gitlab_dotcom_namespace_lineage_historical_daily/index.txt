1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
26:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:Tb31,{{ config({
    "materialized": "incremental",
    "unique_key": "snapshot_day_namespace_id"
    })
}}

{{ simple_cte([
    ('map_namespace_internal', 'map_namespace_internal'),
    ('namespace_subscription_snapshots', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespace_lineage','gitlab_dotcom_namespace_lineage_scd'),
    ('prep_gitlab_dotcom_plan','prep_gitlab_dotcom_plan')
]) }}
,

dates AS (
  SELECT *
  FROM {{ ref('dim_date') }} --prod.common.dim_date
  WHERE date_actual <= CURRENT_DATE()
  {% if is_incremental() -%}
  AND date_actual >= (SELECT MAX(snapshot_day) FROM {{ this }})
  {%- endif %}
),
namespace_lineage_daily AS (
SELECT
  dates.date_actual AS snapshot_day,
  namespace_lineage.namespace_id,
  namespace_lineage.parent_id,
  namespace_lineage.upstream_lineage,
  namespace_lineage.ultimate_parent_id 
FROM namespace_lineage
INNER JOIN dates
  ON dates.date_actual BETWEEN date_trunc('day',namespace_lineage.lineage_valid_from) AND date_trunc('day',namespace_lineage.lineage_valid_to)
QUALIFY ROW_NUMBER() OVER (PARTITION BY dates.date_actual,namespace_id ORDER BY namespace_lineage.lineage_valid_to DESC) = 1
),

with_plans AS (

    SELECT
      namespace_lineage_daily.*,
      IFNULL(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL, FALSE)  AS namespace_is_internal,
      --Please see dbt docs for a description of this column transformation.
      CASE 
        WHEN namespace_subscription_snapshots.is_trial = TRUE AND LOWER(prep_gitlab_dotcom_plan.plan_name_modified) = 'ultimate' THEN 102
        WHEN namespace_subscription_snapshots.plan_id IS NULL THEN 34
        ELSE prep_gitlab_dotcom_plan.plan_id_modified
      END AS ultimate_parent_plan_id,
      namespace_subscription_snapshots.seats,
      namespace_subscription_snapshots.seats_in_use,
      namespace_subscription_snapshots.max_seats_used
    FROM namespace_lineage_daily
    LEFT JOIN map_namespace_internal
      ON namespace_lineage_daily.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
    LEFT JOIN namespace_subscription_snapshots
      ON namespace_lineage_daily.ultimate_parent_id = namespace_subscription_snapshots.namespace_id
      AND namespace_lineage_daily.snapshot_day BETWEEN namespace_subscription_snapshots.valid_from::DATE
                                               AND IFNULL(namespace_subscription_snapshots.valid_to::DATE, CURRENT_DATE)
    LEFT JOIN prep_gitlab_dotcom_plan
      ON namespace_subscription_snapshots.plan_id = prep_gitlab_dotcom_plan.dim_plan_id
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        namespace_lineage_daily.namespace_id,
        snapshot_day
      ORDER BY valid_from DESC
      ) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['snapshot_day', 'namespace_id'] ) }}                    AS snapshot_day_namespace_id,
  *
FROM with_plans11:Tbae,



WITH map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), namespace_subscription_snapshots AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespace_lineage AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_scd

), prep_gitlab_dotcom_plan AS (

    SELECT * 
    FROM "PROD".common_prep.prep_gitlab_dotcom_plan

)
,

dates AS (
  SELECT *
  FROM "PROD".common.dim_date --prod.common.dim_date
  WHERE date_actual <= CURRENT_DATE()
  AND date_actual >= (SELECT MAX(snapshot_day) FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily)
),
namespace_lineage_daily AS (
SELECT
  dates.date_actual AS snapshot_day,
  namespace_lineage.namespace_id,
  namespace_lineage.parent_id,
  namespace_lineage.upstream_lineage,
  namespace_lineage.ultimate_parent_id 
FROM namespace_lineage
INNER JOIN dates
  ON dates.date_actual BETWEEN date_trunc('day',namespace_lineage.lineage_valid_from) AND date_trunc('day',namespace_lineage.lineage_valid_to)
QUALIFY ROW_NUMBER() OVER (PARTITION BY dates.date_actual,namespace_id ORDER BY namespace_lineage.lineage_valid_to DESC) = 1
),

with_plans AS (

    SELECT
      namespace_lineage_daily.*,
      IFNULL(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL, FALSE)  AS namespace_is_internal,
      --Please see dbt docs for a description of this column transformation.
      CASE 
        WHEN namespace_subscription_snapshots.is_trial = TRUE AND LOWER(prep_gitlab_dotcom_plan.plan_name_modified) = 'ultimate' THEN 102
        WHEN namespace_subscription_snapshots.plan_id IS NULL THEN 34
        ELSE prep_gitlab_dotcom_plan.plan_id_modified
      END AS ultimate_parent_plan_id,
      namespace_subscription_snapshots.seats,
      namespace_subscription_snapshots.seats_in_use,
      namespace_subscription_snapshots.max_seats_used
    FROM namespace_lineage_daily
    LEFT JOIN map_namespace_internal
      ON namespace_lineage_daily.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
    LEFT JOIN namespace_subscription_snapshots
      ON namespace_lineage_daily.ultimate_parent_id = namespace_subscription_snapshots.namespace_id
      AND namespace_lineage_daily.snapshot_day BETWEEN namespace_subscription_snapshots.valid_from::DATE
                                               AND IFNULL(namespace_subscription_snapshots.valid_to::DATE, CURRENT_DATE)
    LEFT JOIN prep_gitlab_dotcom_plan
      ON namespace_subscription_snapshots.plan_id = prep_gitlab_dotcom_plan.dim_plan_id
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        namespace_lineage_daily.namespace_id,
        snapshot_day
      ORDER BY valid_from DESC
      ) = 1

)

SELECT
  md5(cast(coalesce(cast(snapshot_day as 
    varchar
), '') || '-' || coalesce(cast(namespace_id as 
    varchar
), '') as 
    varchar
))                    AS snapshot_day_namespace_id,
  *
FROM with_plans13:T23d8,WITH project_snapshot_monthly_all AS (

    --project_snapshot_monthly 
    SELECT
      snapshot_month,
      project_id,
      namespace_id,
      visibility_level,
      shared_runners_enabled
    FROM {{ ref('gitlab_dotcom_project_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
      
    --project_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                         AS snapshot_month,
      project_id,
      namespace_id,
      visibility_level,
      shared_runners_enabled
    FROM {{ ref('gitlab_dotcom_projects_source') }}
    
), namespace_lineage_monthly_all AS (

    --namespace_lineage_monthly
    SELECT
      snapshot_month,
      namespace_id,
      parent_id,
      upstream_lineage,
      ultimate_parent_id
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_lineage_current
    SELECT
      DATE_TRUNC('month', snapshot_day)                         AS snapshot_month,
      namespace_id,
      parent_id,
      upstream_lineage,
      ultimate_parent_id
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }}
    WHERE snapshot_day = DATEADD('DAY', -1, CURRENT_DATE)
      AND IFF(DAY(CURRENT_DATE) = 1, FALSE, TRUE) -- If it is the first day of the month, do not return lineage as it will conflict with the statement above


), namespace_snapshots_monthly_all AS (

    --namespace_snapshots_monthly
    SELECT
      snapshot_month,
      namespace_id,
      parent_id,
      owner_id,
      namespace_type,
      visibility_level,
      shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit
    FROM {{ ref('gitlab_dotcom_namespace_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_current
    SELECT 
      DATE_TRUNC('month', CURRENT_DATE)                         AS snapshot_month,
      namespace_id,
      parent_id,
      owner_id,
      namespace_type,
      visibility_level,
      shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit
    FROM {{ ref('gitlab_dotcom_namespaces_source') }} 

), namespace_statistics_monthly_all AS (

    --namespace_statistics_monthly
    SELECT 
      snapshot_month,
      namespace_id,
      shared_runners_seconds,
      shared_runners_seconds_last_reset
    FROM {{ ref('gitlab_dotcom_namespace_statistics_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL

    --namespace_statistics_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                         AS snapshot_month,
      namespace_id,
      shared_runners_seconds,
      shared_runners_seconds_last_reset
    FROM {{ ref('gitlab_dotcom_namespace_statistics_source') }}
      
), child_projects_enabled_shared_runners_any AS (

    SELECT
      project_snapshot_monthly_all.snapshot_month,
      namespace_lineage_monthly_all.ultimate_parent_id,
      MAX(project_snapshot_monthly_all.shared_runners_enabled)  AS shared_runners_enabled
    FROM project_snapshot_monthly_all
    INNER JOIN namespace_lineage_monthly_all
      ON project_snapshot_monthly_all.namespace_id = namespace_lineage_monthly_all.namespace_id
      AND project_snapshot_monthly_all.snapshot_month = namespace_lineage_monthly_all.snapshot_month
    GROUP BY 1, 2

), namespace_statistics_monthly_top_level AS (

    SELECT
      namespace_snapshots_monthly_all.snapshot_month            AS namespace_snapshots_snapshot_month,
      namespace_snapshots_monthly_all.namespace_id              AS namespace_snapshots_namespace_id,
      namespace_snapshots_monthly_all.parent_id,
      namespace_snapshots_monthly_all.owner_id,
      namespace_snapshots_monthly_all.namespace_type,
      namespace_snapshots_monthly_all.visibility_level,
      namespace_snapshots_monthly_all.shared_runners_minutes_limit,
      namespace_snapshots_monthly_all.extra_shared_runners_minutes_limit,
      namespace_statistics_monthly_all.snapshot_month            AS namespace_statistics_snapshot_month,
      namespace_statistics_monthly_all.namespace_id              AS namespace_statistics_namespace_id,
      namespace_statistics_monthly_all.shared_runners_seconds,
      namespace_statistics_monthly_all.shared_runners_seconds_last_reset
    FROM namespace_snapshots_monthly_all
    LEFT JOIN namespace_statistics_monthly_all
      ON namespace_snapshots_monthly_all.namespace_id = namespace_statistics_monthly_all.namespace_id
      AND namespace_snapshots_monthly_all.snapshot_month = namespace_statistics_monthly_all.snapshot_month
      AND namespace_snapshots_monthly_all.parent_id IS NULL  -- Only top level namespaces
      
), ci_minutes_logic AS (
    
    SELECT
      namespace_statistics_monthly_top_level.namespace_snapshots_snapshot_month
                                                                AS snapshot_month,
      namespace_statistics_monthly_top_level.namespace_snapshots_namespace_id
                                                                AS namespace_id,
      IFNULL(child_projects_enabled_shared_runners_any.ultimate_parent_id,
             namespace_id)                                      AS ultimate_parent_namespace_id,
      namespace_statistics_monthly_top_level.namespace_type,
      namespace_statistics_monthly_top_level.visibility_level,
      IFNULL(child_projects_enabled_shared_runners_any.shared_runners_enabled,
             False)                                             AS shared_runners_enabled,
      IFF(snapshot_month >= '2020-10-01',
          400, 2000)                                            AS gitlab_current_settings_shared_runners_minutes,
      IFNULL(namespace_statistics_monthly_top_level.shared_runners_minutes_limit,
             gitlab_current_settings_shared_runners_minutes)    AS monthly_minutes, 
      IFNULL(namespace_statistics_monthly_top_level.extra_shared_runners_minutes_limit,
             0)                                                 AS purchased_minutes,
      IFNULL(namespace_statistics_monthly_top_level.shared_runners_seconds / 60,
             0)                                                 AS total_minutes_used,
      IFF(purchased_minutes = 0
            OR total_minutes_used < monthly_minutes,
          0, total_minutes_used - monthly_minutes)              AS purchased_minutes_used,
      total_minutes_used - purchased_minutes_used               AS monthly_minutes_used,    
      IFF(shared_runners_enabled
            AND monthly_minutes != 0,
          True, False)                                          AS shared_runners_minutes_limit_enabled,
      CASE 
        WHEN shared_runners_minutes_limit_enabled
          THEN monthly_minutes::VARCHAR
        WHEN monthly_minutes = 0
          THEN 'Unlimited minutes'
        ELSE 'Not supported minutes'
      END                                                       AS limit,
      IFF(monthly_minutes != 0,
          monthly_minutes, NULL)                                AS limit_based_plan,
      CASE
        WHEN NOT shared_runners_minutes_limit_enabled
          THEN 'Disabled'
        WHEN monthly_minutes_used < monthly_minutes
          THEN 'Under Quota'
        ELSE 'Over Quota'
      END                                                       AS status,
      IFF(monthly_minutes_used < monthly_minutes
            OR monthly_minutes = 0,
          'Under Quota', 'Over Quota')                          AS status_based_plan,
      IFF(purchased_minutes_used <= purchased_minutes
            OR NOT shared_runners_minutes_limit_enabled,
          'Under Quota', 'Over Quota')                          AS status_purchased
    FROM namespace_statistics_monthly_top_level
    LEFT JOIN child_projects_enabled_shared_runners_any
      ON namespace_statistics_monthly_top_level.namespace_snapshots_namespace_id = child_projects_enabled_shared_runners_any.ultimate_parent_id
      AND namespace_statistics_monthly_top_level.namespace_snapshots_snapshot_month = child_projects_enabled_shared_runners_any.snapshot_month

), final AS (

    SELECT
      snapshot_month,
      namespace_id                                              AS dim_namespace_id,
      ultimate_parent_namespace_id,
      namespace_type,
      visibility_level, 
      limit,
      total_minutes_used                                        AS shared_runners_minutes_used_overall,  
      status,
      limit_based_plan,
      monthly_minutes_used                                      AS used,
      status_based_plan,
      purchased_minutes                                         AS limit_purchased,
      purchased_minutes_used                                    AS used_purchased, 
      status_purchased
    FROM ci_minutes_logic

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@ischweickartDD",
    created_date="2020-12-31",
    updated_date="2021-06-17"
) }}14:T50c,This table replicates the Gitlab UI logic that generates the CI minutes Usage Quota for both personal namespaces and top level group namespaces. The codebase logic used to build this model can be seen mapped in [this diagram](https://app.lucidchart.com/documents/view/0b8b66e6-8536-4a5d-b992-9e324581187d/0_0).

Namespaces from the `namespace_snapshots_monthly_all` CTE that are not present in the `namespace_statistics_monthly_all` CTE are joined into the logic with NULL `shared_runners_seconds` since these namespaces have not used CI Minutes on GitLab-provided shared runners. Since these CI Minutes are neither trackable nor monetizable, they can be functionally thought of as 0 `shared_runners_minutes_used_overall`. The SQL code has been implemented with this logic as justification.

It also adds two additional columns which aren't calculated in the UI, which are `limit_based_plan` and `status_based_plan` which are independent of whether there aren't projects with `shared_runners_enabled` inside the namespaces and only take into account how many minutes have been used from the monthly quota based in the plan of the namespace.

Information on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)15:T2501,WITH project_snapshot_monthly_all AS (

    --project_snapshot_monthly 
    SELECT
      snapshot_month,
      project_id,
      namespace_id,
      visibility_level,
      shared_runners_enabled
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_project_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
      
    --project_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                         AS snapshot_month,
      project_id,
      namespace_id,
      visibility_level,
      shared_runners_enabled
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source
    
), namespace_lineage_monthly_all AS (

    --namespace_lineage_monthly
    SELECT
      snapshot_month,
      namespace_id,
      parent_id,
      upstream_lineage,
      ultimate_parent_id
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_lineage_current
    SELECT
      DATE_TRUNC('month', snapshot_day)                         AS snapshot_month,
      namespace_id,
      parent_id,
      upstream_lineage,
      ultimate_parent_id
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily
    WHERE snapshot_day = DATEADD('DAY', -1, CURRENT_DATE)
      AND IFF(DAY(CURRENT_DATE) = 1, FALSE, TRUE) -- If it is the first day of the month, do not return lineage as it will conflict with the statement above


), namespace_snapshots_monthly_all AS (

    --namespace_snapshots_monthly
    SELECT
      snapshot_month,
      namespace_id,
      parent_id,
      owner_id,
      namespace_type,
      visibility_level,
      shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit
    FROM "PREP".preparation.gitlab_dotcom_namespace_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_current
    SELECT 
      DATE_TRUNC('month', CURRENT_DATE)                         AS snapshot_month,
      namespace_id,
      parent_id,
      owner_id,
      namespace_type,
      visibility_level,
      shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source 

), namespace_statistics_monthly_all AS (

    --namespace_statistics_monthly
    SELECT 
      snapshot_month,
      namespace_id,
      shared_runners_seconds,
      shared_runners_seconds_last_reset
    FROM "PREP".preparation.gitlab_dotcom_namespace_statistics_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL

    --namespace_statistics_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                         AS snapshot_month,
      namespace_id,
      shared_runners_seconds,
      shared_runners_seconds_last_reset
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_statistics_source
      
), child_projects_enabled_shared_runners_any AS (

    SELECT
      project_snapshot_monthly_all.snapshot_month,
      namespace_lineage_monthly_all.ultimate_parent_id,
      MAX(project_snapshot_monthly_all.shared_runners_enabled)  AS shared_runners_enabled
    FROM project_snapshot_monthly_all
    INNER JOIN namespace_lineage_monthly_all
      ON project_snapshot_monthly_all.namespace_id = namespace_lineage_monthly_all.namespace_id
      AND project_snapshot_monthly_all.snapshot_month = namespace_lineage_monthly_all.snapshot_month
    GROUP BY 1, 2

), namespace_statistics_monthly_top_level AS (

    SELECT
      namespace_snapshots_monthly_all.snapshot_month            AS namespace_snapshots_snapshot_month,
      namespace_snapshots_monthly_all.namespace_id              AS namespace_snapshots_namespace_id,
      namespace_snapshots_monthly_all.parent_id,
      namespace_snapshots_monthly_all.owner_id,
      namespace_snapshots_monthly_all.namespace_type,
      namespace_snapshots_monthly_all.visibility_level,
      namespace_snapshots_monthly_all.shared_runners_minutes_limit,
      namespace_snapshots_monthly_all.extra_shared_runners_minutes_limit,
      namespace_statistics_monthly_all.snapshot_month            AS namespace_statistics_snapshot_month,
      namespace_statistics_monthly_all.namespace_id              AS namespace_statistics_namespace_id,
      namespace_statistics_monthly_all.shared_runners_seconds,
      namespace_statistics_monthly_all.shared_runners_seconds_last_reset
    FROM namespace_snapshots_monthly_all
    LEFT JOIN namespace_statistics_monthly_all
      ON namespace_snapshots_monthly_all.namespace_id = namespace_statistics_monthly_all.namespace_id
      AND namespace_snapshots_monthly_all.snapshot_month = namespace_statistics_monthly_all.snapshot_month
      AND namespace_snapshots_monthly_all.parent_id IS NULL  -- Only top level namespaces
      
), ci_minutes_logic AS (
    
    SELECT
      namespace_statistics_monthly_top_level.namespace_snapshots_snapshot_month
                                                                AS snapshot_month,
      namespace_statistics_monthly_top_level.namespace_snapshots_namespace_id
                                                                AS namespace_id,
      IFNULL(child_projects_enabled_shared_runners_any.ultimate_parent_id,
             namespace_id)                                      AS ultimate_parent_namespace_id,
      namespace_statistics_monthly_top_level.namespace_type,
      namespace_statistics_monthly_top_level.visibility_level,
      IFNULL(child_projects_enabled_shared_runners_any.shared_runners_enabled,
             False)                                             AS shared_runners_enabled,
      IFF(snapshot_month >= '2020-10-01',
          400, 2000)                                            AS gitlab_current_settings_shared_runners_minutes,
      IFNULL(namespace_statistics_monthly_top_level.shared_runners_minutes_limit,
             gitlab_current_settings_shared_runners_minutes)    AS monthly_minutes, 
      IFNULL(namespace_statistics_monthly_top_level.extra_shared_runners_minutes_limit,
             0)                                                 AS purchased_minutes,
      IFNULL(namespace_statistics_monthly_top_level.shared_runners_seconds / 60,
             0)                                                 AS total_minutes_used,
      IFF(purchased_minutes = 0
            OR total_minutes_used < monthly_minutes,
          0, total_minutes_used - monthly_minutes)              AS purchased_minutes_used,
      total_minutes_used - purchased_minutes_used               AS monthly_minutes_used,    
      IFF(shared_runners_enabled
            AND monthly_minutes != 0,
          True, False)                                          AS shared_runners_minutes_limit_enabled,
      CASE 
        WHEN shared_runners_minutes_limit_enabled
          THEN monthly_minutes::VARCHAR
        WHEN monthly_minutes = 0
          THEN 'Unlimited minutes'
        ELSE 'Not supported minutes'
      END                                                       AS limit,
      IFF(monthly_minutes != 0,
          monthly_minutes, NULL)                                AS limit_based_plan,
      CASE
        WHEN NOT shared_runners_minutes_limit_enabled
          THEN 'Disabled'
        WHEN monthly_minutes_used < monthly_minutes
          THEN 'Under Quota'
        ELSE 'Over Quota'
      END                                                       AS status,
      IFF(monthly_minutes_used < monthly_minutes
            OR monthly_minutes = 0,
          'Under Quota', 'Over Quota')                          AS status_based_plan,
      IFF(purchased_minutes_used <= purchased_minutes
            OR NOT shared_runners_minutes_limit_enabled,
          'Under Quota', 'Over Quota')                          AS status_purchased
    FROM namespace_statistics_monthly_top_level
    LEFT JOIN child_projects_enabled_shared_runners_any
      ON namespace_statistics_monthly_top_level.namespace_snapshots_namespace_id = child_projects_enabled_shared_runners_any.ultimate_parent_id
      AND namespace_statistics_monthly_top_level.namespace_snapshots_snapshot_month = child_projects_enabled_shared_runners_any.snapshot_month

), final AS (

    SELECT
      snapshot_month,
      namespace_id                                              AS dim_namespace_id,
      ultimate_parent_namespace_id,
      namespace_type,
      visibility_level, 
      limit,
      total_minutes_used                                        AS shared_runners_minutes_used_overall,  
      status,
      limit_based_plan,
      monthly_minutes_used                                      AS used,
      status_based_plan,
      purchased_minutes                                         AS limit_purchased,
      purchased_minutes_used                                    AS used_purchased, 
      status_purchased
    FROM ci_minutes_logic

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@ischweickartDD'::VARCHAR       AS updated_by,
      '2020-12-31'::DATE        AS model_created_date,
      '2021-06-17'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final16:T3408,{% set bytes_to_gib_conversion = 1073741824 %} -- To convert storage (usage) sizes from bytes in source to GiB for reporting (1 GiB = 2^30 bytes = 1,073,741,824 bytes)
{% set bytes_to_mib_conversion = 1048576 %} -- To convert storage (usage) sizes from bytes in source to MiB for reporting (1 MiB = 2^20 bytes = 1,048,576 bytes)
{% set mib_to_gib_conversion = 1024 %} -- To convert storage limit sizes from GiB in "source" to MiB for reporting (1 GiB = 1024 MiB)

WITH namespace_current AS (

    SELECT dim_namespace_id
    FROM {{ ref('prep_namespace') }}
    WHERE is_currently_valid = TRUE
  
), project_statistics_snapshot_monthly_all AS (

    --project_statistics_snapshot_monthly 
    SELECT
      snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / {{bytes_to_gib_conversion}}        AS project_storage_size
    FROM {{ ref('gitlab_dotcom_project_statistic_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
      
    --project_statistics_current
    SELECT 
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / {{bytes_to_gib_conversion}}        AS project_storage_size
    FROM {{ ref('gitlab_dotcom_project_statistics_source') }}

), namespace_lineage_monthly_all AS (

    --namespace_lineage_monthly
    SELECT
      snapshot_month,
      namespace_id,
      ultimate_parent_id
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_lineage_current
    SELECT
      DATE_TRUNC('month', namespace_lineage.snapshot_day)                         AS snapshot_month,
      namespace_lineage.namespace_id                                              AS namespace_id,
      namespace_lineage.ultimate_parent_id                                        AS ultimate_parent_id
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }} AS namespace_lineage
    INNER JOIN namespace_current -- To filter for non deleted namespaces
      ON namespace_lineage.namespace_id = namespace_current.dim_namespace_id
    WHERE namespace_lineage.snapshot_day = DATEADD('DAY', -1, CURRENT_DATE)
      AND IFF(DAY(CURRENT_DATE) = 1, FALSE, TRUE) -- If it is the first day of the month, do not return lineage as it will conflict with the statement above

), namespace_storage_statistic_monthly_all AS (

    --namespace_storage_statistic_monthly
    SELECT 
      snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM {{ ref('gitlab_dotcom_namespace_storage_statistics_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)
    
    UNION ALL

    --namespace_storage_statistic_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM {{ ref('gitlab_dotcom_namespace_root_storage_statistics_source') }}

), month_spine AS (

    SELECT *
    FROM {{ ref('dim_date') }}
    WHERE date_actual = first_day_of_month

), purchased_storage AS (

    SELECT
      gitlab_namespace_id::INT                                                  AS namespace_id,
      month_spine.first_day_of_month                                            AS snapshot_month,
      SUM(order_quantity * 10)                                                  AS purchased_storage_gib
    FROM {{ ref('customers_db_orders_source') }}
    INNER JOIN month_spine
      ON month_spine.first_day_of_month BETWEEN DATE_TRUNC('month', order_start_date)
                                          AND DATEADD(MONTH, -1, DATE_TRUNC('month', order_end_date))
    WHERE product_rate_plan_id = '2c92a00f7279a6f5017279d299d01cf9' --only storage rate plan, 10GiB of storage
    GROUP BY 1, 2

), top_level_namespace_storage_summary AS (

    SELECT
      namespace_lineage_monthly_all.ultimate_parent_id,                         -- Only top level namespaces
      namespace_lineage_monthly_all.snapshot_month,
      SUM(COALESCE(purchased_storage.purchased_storage_gib, 0))                 AS purchased_storage_limit,
      SUM(namespace_storage_statistic_monthly_all.billable_storage_size)        AS billable_storage_size,
      SUM(namespace_storage_statistic_monthly_all.repository_size)              AS repository_size,
      SUM(namespace_storage_statistic_monthly_all.container_registry_size)      AS container_registry_size,
      SUM(namespace_storage_statistic_monthly_all.lfs_objects_size)             AS lfs_objects_size,
      SUM(namespace_storage_statistic_monthly_all.build_artifacts_size)         AS build_artifacts_size,
      SUM(namespace_storage_statistic_monthly_all.packages_size)                AS packages_size,
      SUM(namespace_storage_statistic_monthly_all.wiki_size)                    AS wiki_size,
      SUM(namespace_storage_statistic_monthly_all.storage_size)                 AS storage_size
    FROM namespace_lineage_monthly_all
    LEFT JOIN namespace_storage_statistic_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = namespace_storage_statistic_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = namespace_storage_statistic_monthly_all.snapshot_month
    LEFT JOIN purchased_storage
      ON namespace_lineage_monthly_all.namespace_id = purchased_storage.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = purchased_storage.snapshot_month
    GROUP BY 1, 2

), repository_level_statistics AS (

    SELECT DISTINCT
      namespace_lineage_monthly_all.snapshot_month,
      namespace_lineage_monthly_all.ultimate_parent_id,
      project_statistics_snapshot_monthly_all.project_id,
      COALESCE(project_statistics_snapshot_monthly_all.project_storage_size, 0) AS repository_storage_size,
      IFF(namespace_lineage_monthly_all.ultimate_parent_id = 6543, 0, 10)       AS repository_size_limit,
      top_level_namespace_storage_summary.purchased_storage_limit,
      IFF(repository_storage_size < repository_size_limit
            OR repository_size_limit = 0,
          FALSE, TRUE)                                                          AS is_free_storage_used_up,
      IFF(NOT is_free_storage_used_up
            OR purchased_storage_limit = 0,
          repository_storage_size, repository_size_limit)                       AS free_storage_size,
      repository_storage_size - free_storage_size                               AS purchased_storage_size,
      SUM(purchased_storage_size)
        OVER(
             PARTITION BY
               namespace_lineage_monthly_all.ultimate_parent_id,
               namespace_lineage_monthly_all.snapshot_month
            )                                                                   AS total_purchased_storage_size,
      IFF(is_free_storage_used_up
            AND (purchased_storage_limit = 0
                  OR total_purchased_storage_size >= purchased_storage_limit),
          TRUE, FALSE)                                                          AS is_repository_capped
    FROM namespace_lineage_monthly_all
    LEFT JOIN top_level_namespace_storage_summary
      ON namespace_lineage_monthly_all.ultimate_parent_id = top_level_namespace_storage_summary.ultimate_parent_id
      AND namespace_lineage_monthly_all.snapshot_month = top_level_namespace_storage_summary.snapshot_month
    LEFT JOIN project_statistics_snapshot_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = project_statistics_snapshot_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = project_statistics_snapshot_monthly_all.snapshot_month

), namespace_repository_storage_usage_summary AS (

    SELECT
      ultimate_parent_id,                           -- Only top level namespaces
      snapshot_month,
      MAX(repository_storage_size)                  AS largest_repository_size,
      SUM(purchased_storage_size)                   AS purchased_storage,
      SUM(repository_size_limit)                    AS free_limit,
      SUM(free_storage_size)                        AS free_storage,
      SUM(IFF(is_free_storage_used_up, 1, 0))       AS repositories_above_free_limit_count,
      SUM(IFF(is_repository_capped, 1, 0))          AS capped_repositories_count
    FROM repository_level_statistics
    GROUP BY 1, 2
    
), joined AS (
    
    SELECT
      repository.snapshot_month,
      repository.ultimate_parent_id                                             AS dim_namespace_id,
      repository.ultimate_parent_id                                             AS ultimate_parent_namespace_id,
      repository.largest_repository_size                                        AS largest_repository_size_gib,
      repository.free_limit                                                     AS total_free_storage_limit_gib,
      namespace.purchased_storage_limit                                         AS total_purchased_storage_limit_gib,
      IFF(repository.repositories_above_free_limit_count = 0, FALSE, TRUE)      AS has_repositories_above_free_limit,
      repository.repositories_above_free_limit_count,
      IFF(repository.capped_repositories_count = 0, FALSE, TRUE)                AS has_capped_repositories,
      repository.capped_repositories_count,
      repository.free_storage * {{bytes_to_gib_conversion}}                     AS total_free_storage_bytes,
      repository.purchased_storage * {{bytes_to_gib_conversion}}                AS total_purchased_storage_bytes,
      namespace.billable_storage_size                                           AS billable_storage_bytes,
      namespace.repository_size                                                 AS repository_bytes,
      namespace.container_registry_size                                         AS container_registry_bytes,
      namespace.lfs_objects_size                                                AS lfs_objects_bytes,
      namespace.build_artifacts_size                                            AS build_artifacts_bytes,
      namespace.packages_size                                                   AS packages_bytes,
      namespace.wiki_size                                                       AS wiki_bytes,
      namespace.storage_size                                                    AS storage_bytes,
      repository.free_storage * {{mib_to_gib_conversion}}                       AS total_free_storage_mib,
      repository.purchased_storage * {{mib_to_gib_conversion}}                  AS total_purchased_storage_mib,
      namespace.billable_storage_size / {{bytes_to_mib_conversion}}             AS billable_storage_mib,
      namespace.repository_size / {{bytes_to_mib_conversion}}                   AS repository_mib,
      namespace.lfs_objects_size / {{bytes_to_mib_conversion}}                  AS lfs_objects_mib,
      namespace.build_artifacts_size / {{bytes_to_mib_conversion}}              AS build_artifacts_mib,
      namespace.packages_size / {{bytes_to_mib_conversion}}                     AS packages_mib,
      namespace.wiki_size / {{bytes_to_mib_conversion}}                         AS wiki_mib,
      namespace.storage_size / {{bytes_to_mib_conversion}}                      AS storage_mib,
      repository.free_storage                                                   AS total_free_storage_gib,
      repository.purchased_storage                                              AS total_purchased_storage_gib,
      namespace.billable_storage_size / {{bytes_to_gib_conversion}}             AS billable_storage_gib,
      namespace.repository_size / {{bytes_to_gib_conversion}}                   AS repository_gib,
      namespace.lfs_objects_size / {{bytes_to_gib_conversion}}                  AS lfs_objects_gib,
      namespace.build_artifacts_size / {{bytes_to_gib_conversion}}              AS build_artifacts_gib,
      namespace.packages_size / {{bytes_to_gib_conversion}}                     AS packages_gib,
      namespace.wiki_size / {{bytes_to_gib_conversion}}                         AS wiki_gib,
      namespace.storage_size / {{bytes_to_gib_conversion}}                      AS storage_gib
    FROM namespace_repository_storage_usage_summary repository
    LEFT JOIN top_level_namespace_storage_summary namespace
      ON repository.ultimate_parent_id = namespace.ultimate_parent_id
      AND repository.snapshot_month = namespace.snapshot_month

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@ischweickartDD",
    created_date="2021-01-29",
    updated_date="2021-06-17"
) }}17:T676,This table replicates the Gitlab UI logic that generates the Storage Usage Quotas for top level group namespaces. The logic used to build this model is explained in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/4237). The specific front end logic is described [here](https://gitlab.com/groups/gitlab-org/-/epics/4237#note_400257377).

Storage usage is reported in bytes in source and this is reflected in the `_size` columns. These sizes are then converted into GiB (1 GiB = 2^30 bytes = 1,073,741,824 bytes), and MiB (1 MiB = 2^20 bytes = 1,048,576 bytes), which is most often displayed in the UI. Since storage limits are allocated in GiB, they were left as such in the `_limit` columns.

Since this table reports at the top level namespace grain, aggregation of the individual underlying repositories is required. To increase visibility of the underlying repositories, two count columns (and their associated flags) are added that aren't calculated in the UI: which are `repositories_above_free_limit_count` and `capped_repositories_count`. These columns can serve as helpful indicators for when a customer will likely need to purchase extra storage.

For the purpose of this table, all child namespaces under a top level namespace with unlimited storage are also assumed to have unlimited storage. Also, storage sizes are converted to MiB and GiB in this table because these are the values being reported under the hood, even though on a project page storage is reported as "MB" or "GB".

Information on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)18:T333e, -- To convert storage (usage) sizes from bytes in source to GiB for reporting (1 GiB = 2^30 bytes = 1,073,741,824 bytes)
 -- To convert storage (usage) sizes from bytes in source to MiB for reporting (1 MiB = 2^20 bytes = 1,048,576 bytes)
 -- To convert storage limit sizes from GiB in "source" to MiB for reporting (1 GiB = 1024 MiB)

WITH namespace_current AS (

    SELECT dim_namespace_id
    FROM "PROD".common_prep.prep_namespace
    WHERE is_currently_valid = TRUE
  
), project_statistics_snapshot_monthly_all AS (

    --project_statistics_snapshot_monthly 
    SELECT
      snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / 1073741824        AS project_storage_size
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_project_statistic_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
      
    --project_statistics_current
    SELECT 
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / 1073741824        AS project_storage_size
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_project_statistics_source

), namespace_lineage_monthly_all AS (

    --namespace_lineage_monthly
    SELECT
      snapshot_month,
      namespace_id,
      ultimate_parent_id
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_lineage_current
    SELECT
      DATE_TRUNC('month', namespace_lineage.snapshot_day)                         AS snapshot_month,
      namespace_lineage.namespace_id                                              AS namespace_id,
      namespace_lineage.ultimate_parent_id                                        AS ultimate_parent_id
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily AS namespace_lineage
    INNER JOIN namespace_current -- To filter for non deleted namespaces
      ON namespace_lineage.namespace_id = namespace_current.dim_namespace_id
    WHERE namespace_lineage.snapshot_day = DATEADD('DAY', -1, CURRENT_DATE)
      AND IFF(DAY(CURRENT_DATE) = 1, FALSE, TRUE) -- If it is the first day of the month, do not return lineage as it will conflict with the statement above

), namespace_storage_statistic_monthly_all AS (

    --namespace_storage_statistic_monthly
    SELECT 
      snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM "PREP".preparation.gitlab_dotcom_namespace_storage_statistics_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)
    
    UNION ALL

    --namespace_storage_statistic_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_root_storage_statistics_source

), month_spine AS (

    SELECT *
    FROM "PROD".common.dim_date
    WHERE date_actual = first_day_of_month

), purchased_storage AS (

    SELECT
      gitlab_namespace_id::INT                                                  AS namespace_id,
      month_spine.first_day_of_month                                            AS snapshot_month,
      SUM(order_quantity * 10)                                                  AS purchased_storage_gib
    FROM "PREP".customers.customers_db_orders_source
    INNER JOIN month_spine
      ON month_spine.first_day_of_month BETWEEN DATE_TRUNC('month', order_start_date)
                                          AND DATEADD(MONTH, -1, DATE_TRUNC('month', order_end_date))
    WHERE product_rate_plan_id = '2c92a00f7279a6f5017279d299d01cf9' --only storage rate plan, 10GiB of storage
    GROUP BY 1, 2

), top_level_namespace_storage_summary AS (

    SELECT
      namespace_lineage_monthly_all.ultimate_parent_id,                         -- Only top level namespaces
      namespace_lineage_monthly_all.snapshot_month,
      SUM(COALESCE(purchased_storage.purchased_storage_gib, 0))                 AS purchased_storage_limit,
      SUM(namespace_storage_statistic_monthly_all.billable_storage_size)        AS billable_storage_size,
      SUM(namespace_storage_statistic_monthly_all.repository_size)              AS repository_size,
      SUM(namespace_storage_statistic_monthly_all.container_registry_size)      AS container_registry_size,
      SUM(namespace_storage_statistic_monthly_all.lfs_objects_size)             AS lfs_objects_size,
      SUM(namespace_storage_statistic_monthly_all.build_artifacts_size)         AS build_artifacts_size,
      SUM(namespace_storage_statistic_monthly_all.packages_size)                AS packages_size,
      SUM(namespace_storage_statistic_monthly_all.wiki_size)                    AS wiki_size,
      SUM(namespace_storage_statistic_monthly_all.storage_size)                 AS storage_size
    FROM namespace_lineage_monthly_all
    LEFT JOIN namespace_storage_statistic_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = namespace_storage_statistic_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = namespace_storage_statistic_monthly_all.snapshot_month
    LEFT JOIN purchased_storage
      ON namespace_lineage_monthly_all.namespace_id = purchased_storage.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = purchased_storage.snapshot_month
    GROUP BY 1, 2

), repository_level_statistics AS (

    SELECT DISTINCT
      namespace_lineage_monthly_all.snapshot_month,
      namespace_lineage_monthly_all.ultimate_parent_id,
      project_statistics_snapshot_monthly_all.project_id,
      COALESCE(project_statistics_snapshot_monthly_all.project_storage_size, 0) AS repository_storage_size,
      IFF(namespace_lineage_monthly_all.ultimate_parent_id = 6543, 0, 10)       AS repository_size_limit,
      top_level_namespace_storage_summary.purchased_storage_limit,
      IFF(repository_storage_size < repository_size_limit
            OR repository_size_limit = 0,
          FALSE, TRUE)                                                          AS is_free_storage_used_up,
      IFF(NOT is_free_storage_used_up
            OR purchased_storage_limit = 0,
          repository_storage_size, repository_size_limit)                       AS free_storage_size,
      repository_storage_size - free_storage_size                               AS purchased_storage_size,
      SUM(purchased_storage_size)
        OVER(
             PARTITION BY
               namespace_lineage_monthly_all.ultimate_parent_id,
               namespace_lineage_monthly_all.snapshot_month
            )                                                                   AS total_purchased_storage_size,
      IFF(is_free_storage_used_up
            AND (purchased_storage_limit = 0
                  OR total_purchased_storage_size >= purchased_storage_limit),
          TRUE, FALSE)                                                          AS is_repository_capped
    FROM namespace_lineage_monthly_all
    LEFT JOIN top_level_namespace_storage_summary
      ON namespace_lineage_monthly_all.ultimate_parent_id = top_level_namespace_storage_summary.ultimate_parent_id
      AND namespace_lineage_monthly_all.snapshot_month = top_level_namespace_storage_summary.snapshot_month
    LEFT JOIN project_statistics_snapshot_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = project_statistics_snapshot_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = project_statistics_snapshot_monthly_all.snapshot_month

), namespace_repository_storage_usage_summary AS (

    SELECT
      ultimate_parent_id,                           -- Only top level namespaces
      snapshot_month,
      MAX(repository_storage_size)                  AS largest_repository_size,
      SUM(purchased_storage_size)                   AS purchased_storage,
      SUM(repository_size_limit)                    AS free_limit,
      SUM(free_storage_size)                        AS free_storage,
      SUM(IFF(is_free_storage_used_up, 1, 0))       AS repositories_above_free_limit_count,
      SUM(IFF(is_repository_capped, 1, 0))          AS capped_repositories_count
    FROM repository_level_statistics
    GROUP BY 1, 2
    
), joined AS (
    
    SELECT
      repository.snapshot_month,
      repository.ultimate_parent_id                                             AS dim_namespace_id,
      repository.ultimate_parent_id                                             AS ultimate_parent_namespace_id,
      repository.largest_repository_size                                        AS largest_repository_size_gib,
      repository.free_limit                                                     AS total_free_storage_limit_gib,
      namespace.purchased_storage_limit                                         AS total_purchased_storage_limit_gib,
      IFF(repository.repositories_above_free_limit_count = 0, FALSE, TRUE)      AS has_repositories_above_free_limit,
      repository.repositories_above_free_limit_count,
      IFF(repository.capped_repositories_count = 0, FALSE, TRUE)                AS has_capped_repositories,
      repository.capped_repositories_count,
      repository.free_storage * 1073741824                     AS total_free_storage_bytes,
      repository.purchased_storage * 1073741824                AS total_purchased_storage_bytes,
      namespace.billable_storage_size                                           AS billable_storage_bytes,
      namespace.repository_size                                                 AS repository_bytes,
      namespace.container_registry_size                                         AS container_registry_bytes,
      namespace.lfs_objects_size                                                AS lfs_objects_bytes,
      namespace.build_artifacts_size                                            AS build_artifacts_bytes,
      namespace.packages_size                                                   AS packages_bytes,
      namespace.wiki_size                                                       AS wiki_bytes,
      namespace.storage_size                                                    AS storage_bytes,
      repository.free_storage * 1024                       AS total_free_storage_mib,
      repository.purchased_storage * 1024                  AS total_purchased_storage_mib,
      namespace.billable_storage_size / 1048576             AS billable_storage_mib,
      namespace.repository_size / 1048576                   AS repository_mib,
      namespace.lfs_objects_size / 1048576                  AS lfs_objects_mib,
      namespace.build_artifacts_size / 1048576              AS build_artifacts_mib,
      namespace.packages_size / 1048576                     AS packages_mib,
      namespace.wiki_size / 1048576                         AS wiki_mib,
      namespace.storage_size / 1048576                      AS storage_mib,
      repository.free_storage                                                   AS total_free_storage_gib,
      repository.purchased_storage                                              AS total_purchased_storage_gib,
      namespace.billable_storage_size / 1073741824             AS billable_storage_gib,
      namespace.repository_size / 1073741824                   AS repository_gib,
      namespace.lfs_objects_size / 1073741824                  AS lfs_objects_gib,
      namespace.build_artifacts_size / 1073741824              AS build_artifacts_gib,
      namespace.packages_size / 1073741824                     AS packages_gib,
      namespace.wiki_size / 1073741824                         AS wiki_gib,
      namespace.storage_size / 1073741824                      AS storage_gib
    FROM namespace_repository_storage_usage_summary repository
    LEFT JOIN top_level_namespace_storage_summary namespace
      ON repository.ultimate_parent_id = namespace.ultimate_parent_id
      AND repository.snapshot_month = namespace.snapshot_month

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@ischweickartDD'::VARCHAR       AS updated_by,
      '2021-01-29'::DATE        AS model_created_date,
      '2021-06-17'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined19:T1f62,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('namespace_current', 'gitlab_dotcom_namespaces_source'),
    ('namespace_snapshots', 'prep_namespace_hist'),
    ('namespace_settings', 'gitlab_dotcom_namespace_settings_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('map_namespace_internal', 'map_namespace_internal'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('product_tiers', 'prep_product_tier'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('audit_events', 'gitlab_dotcom_audit_events_source'),
    ('audit_event_details_clean', 'prep_audit_event_details_clean'),
    ('users', 'prep_user')
]) }},

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('members_source', 'user_id') }}
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    {{ get_keyed_nulls('saas_product_tiers.dim_product_tier_id') }}         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-01-14",
    updated_date="2023-06-22"
) }}1a:T22ae,



WITH namespace_current AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), namespace_snapshots AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_hist

), namespace_settings AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_settings_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), audit_events AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_audit_events_source

), audit_event_details_clean AS (

    SELECT * 
    FROM "PROD".common_prep.prep_audit_event_details_clean

), users AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

),

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members_source.user_id

    )
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    

  COALESCE(saas_product_tiers.dim_product_tier_id, MD5(-1)) 

         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined1b:T5b2,WITH date_details AS (
  
    SELECT *
    FROM {{ ref('date_details') }}
    WHERE last_day_of_month = date_actual
    
), namespace AS (

  SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_historical_daily') }}
  
), lineage AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }}

), statistics AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_statistics_historical_monthly') }}

), storage AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_storage_statistics_historical_monthly') }}

)

SELECT
  date_details.date_actual AS snapshot_month,
  namespace.*,
  lineage.ultimate_parent_id,
  lineage.ultimate_parent_plan_id,
  lineage.namespace_is_internal,
  statistics.shared_runners_seconds,
  statistics.shared_runners_seconds_last_reset,
  storage.repository_size,
  storage.container_registry_size,
  storage.lfs_objects_size,
  storage.wiki_size,
  storage.build_artifacts_size,
  storage.storage_size,
  storage.packages_size
FROM namespace
LEFT JOIN lineage
  ON namespace.namespace_id = lineage.namespace_id
  AND namespace.snapshot_day = lineage.snapshot_day
LEFT JOIN statistics
  ON namespace.namespace_id = statistics.namespace_id
  AND namespace.snapshot_day = statistics.snapshot_month
LEFT JOIN storage
  ON namespace.namespace_id = storage.namespace_id
  AND namespace.snapshot_day = storage.snapshot_month
INNER JOIN date_details
  ON date_details.date_actual = namespace.snapshot_day1c:T5cb,WITH date_details AS (
  
    SELECT *
    FROM "PROD".legacy.date_details
    WHERE last_day_of_month = date_actual
    
), namespace AS (

  SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_historical_daily
  
), lineage AS (

    SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), statistics AS (

    SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_statistics_historical_monthly

), storage AS (

    SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_storage_statistics_historical_monthly

)

SELECT
  date_details.date_actual AS snapshot_month,
  namespace.*,
  lineage.ultimate_parent_id,
  lineage.ultimate_parent_plan_id,
  lineage.namespace_is_internal,
  statistics.shared_runners_seconds,
  statistics.shared_runners_seconds_last_reset,
  storage.repository_size,
  storage.container_registry_size,
  storage.lfs_objects_size,
  storage.wiki_size,
  storage.build_artifacts_size,
  storage.storage_size,
  storage.packages_size
FROM namespace
LEFT JOIN lineage
  ON namespace.namespace_id = lineage.namespace_id
  AND namespace.snapshot_day = lineage.snapshot_day
LEFT JOIN statistics
  ON namespace.namespace_id = statistics.namespace_id
  AND namespace.snapshot_day = statistics.snapshot_month
LEFT JOIN storage
  ON namespace.namespace_id = storage.namespace_id
  AND namespace.snapshot_day = storage.snapshot_month
INNER JOIN date_details
  ON date_details.date_actual = namespace.snapshot_day1d:T1b0f,{% set sensitive_fields = ['project_description', 'project_import_source', 'project_issues_template', 'project_build_coverage_regex',
                           'project_name', 'project_path', 'project_import_url', 'project_merge_requests_template'] %}

{{ simple_cte([

    ('dim_date', 'dim_date'),
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('prep_product_tier', 'prep_product_tier'),

]) }}

, active_services AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_integrations_source')}}
    WHERE is_active = True

), namespace_lineage AS (

    SELECT
      namespace_lineage_historical.*,
      IFF(ROW_NUMBER() OVER (
        PARTITION BY namespace_lineage_historical.namespace_id
        ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1, TRUE, FALSE)    AS is_current,
      namespace_lineage_historical.snapshot_day = CURRENT_DATE                        AS ultimate_parent_is_current,
      plans.plan_title                                                                AS ultimate_parent_plan_title,
      plans.plan_is_paid                                                              AS ultimate_parent_plan_is_paid,
      plans.plan_name                                                                 AS ultimate_parent_plan_name
    FROM namespace_lineage_historical
    INNER JOIN plans
      ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

), joined AS (

    SELECT
      projects_source.project_id                                     AS dim_project_id,
      projects_source.namespace_id                                   AS dim_namespace_id,
      namespace_lineage.ultimate_parent_id                           AS ultimate_parent_namespace_id,
      projects_source.creator_id                                     AS dim_user_id_creator,
      dim_date.date_id                                               AS dim_date_id,

      -- plan/product tier metadata at creation
      prep_namespace.dim_product_tier_id                             AS dim_product_tier_id_at_creation,
      prep_namespace.gitlab_plan_id                                  AS dim_plan_id,
      -- projects metadata
      projects_source.created_at                                     AS created_at,
      projects_source.updated_at                                     AS updated_at,
      projects_source.last_activity_at,
      projects_source.visibility_level,
      projects_source.archived                                       AS is_archived,
      projects_source.has_avatar,
      projects_source.project_star_count,
      projects_source.merge_requests_rebase_enabled,
      projects_source.import_type,
      IFF(projects_source.import_type IS NOT NULL, TRUE, FALSE)      AS is_imported,
      projects_source.approvals_before_merge,
      projects_source.reset_approvals_on_push,
      projects_source.merge_requests_ff_only_enabled,
      projects_source.mirror,
      projects_source.mirror_user_id,
      projects_source.shared_runners_enabled,
      projects_source.build_allow_git_fetch,
      projects_source.build_timeout,
      projects_source.mirror_trigger_builds,
      projects_source.pending_delete,
      projects_source.public_builds,
      projects_source.last_repository_check_failed,
      projects_source.last_repository_check_at,
      projects_source.container_registry_enabled,
      projects_source.only_allow_merge_if_pipeline_succeeds,
      projects_source.has_external_issue_tracker,
      projects_source.repository_storage,
      projects_source.repository_read_only,
      projects_source.request_access_enabled,
      projects_source.has_external_wiki,
      projects_source.ci_config_path,
      projects_source.lfs_enabled,
      projects_source.only_allow_merge_if_all_discussions_are_resolved,
      projects_source.repository_size_limit,
      projects_source.printing_merge_request_link_enabled,
      projects_source.has_auto_canceling_pending_pipelines,
      projects_source.service_desk_enabled,
      projects_source.delete_error,
      projects_source.last_repository_updated_at,
      projects_source.storage_version,
      projects_source.resolve_outdated_diff_discussions,
      projects_source.disable_overriding_approvers_per_merge_request,
      projects_source.remote_mirror_available_overridden,
      projects_source.only_mirror_protected_branches,
      projects_source.pull_mirror_available_overridden,
      projects_source.mirror_overwrites_diverged_branches,
      -- namespace metadata

      IFNULL(prep_namespace.namespace_is_internal, FALSE)            AS namespace_is_internal,

      {% for field in sensitive_fields %}
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE {{field}}
      END                                                            AS {{field}},
      {% endfor %}
      IFF(projects_source.import_type='gitlab_project' AND projects_source.project_path='learn-gitlab',  
        TRUE, 
        FALSE)                                                       AS is_learn_gitlab,
      ARRAYAGG(active_services.service_type)                         AS active_service_types_array,

      IFNULL(COUNT(DISTINCT members_source.member_id), 0)            AS member_count
    FROM projects_source
    INNER JOIN dim_date
      ON TO_DATE(projects_source.created_at) = dim_date.date_day
    LEFT JOIN prep_namespace
      ON projects_source.namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid
    LEFT JOIN members_source
      ON projects_source.project_id = members_source.source_id
      AND members_source.member_source_type = 'Project'
    LEFT JOIN namespace_lineage
      ON prep_namespace.dim_namespace_id = namespace_lineage.namespace_id
      AND namespace_lineage.is_current = TRUE
    LEFT JOIN gitlab_subscriptions
      ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects_source.created_at >= gitlab_subscriptions.valid_from AND projects_source.created_at < {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
    LEFT JOIN active_services
      ON projects_source.project_id = active_services.project_id
    {{ dbt_utils.group_by(n=63) }}

)

SELECT *
FROM joined1e:T23f4,



WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), prep_product_tier AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

)

, active_services AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source
    WHERE is_active = True

), namespace_lineage AS (

    SELECT
      namespace_lineage_historical.*,
      IFF(ROW_NUMBER() OVER (
        PARTITION BY namespace_lineage_historical.namespace_id
        ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1, TRUE, FALSE)    AS is_current,
      namespace_lineage_historical.snapshot_day = CURRENT_DATE                        AS ultimate_parent_is_current,
      plans.plan_title                                                                AS ultimate_parent_plan_title,
      plans.plan_is_paid                                                              AS ultimate_parent_plan_is_paid,
      plans.plan_name                                                                 AS ultimate_parent_plan_name
    FROM namespace_lineage_historical
    INNER JOIN plans
      ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

), joined AS (

    SELECT
      projects_source.project_id                                     AS dim_project_id,
      projects_source.namespace_id                                   AS dim_namespace_id,
      namespace_lineage.ultimate_parent_id                           AS ultimate_parent_namespace_id,
      projects_source.creator_id                                     AS dim_user_id_creator,
      dim_date.date_id                                               AS dim_date_id,

      -- plan/product tier metadata at creation
      prep_namespace.dim_product_tier_id                             AS dim_product_tier_id_at_creation,
      prep_namespace.gitlab_plan_id                                  AS dim_plan_id,
      -- projects metadata
      projects_source.created_at                                     AS created_at,
      projects_source.updated_at                                     AS updated_at,
      projects_source.last_activity_at,
      projects_source.visibility_level,
      projects_source.archived                                       AS is_archived,
      projects_source.has_avatar,
      projects_source.project_star_count,
      projects_source.merge_requests_rebase_enabled,
      projects_source.import_type,
      IFF(projects_source.import_type IS NOT NULL, TRUE, FALSE)      AS is_imported,
      projects_source.approvals_before_merge,
      projects_source.reset_approvals_on_push,
      projects_source.merge_requests_ff_only_enabled,
      projects_source.mirror,
      projects_source.mirror_user_id,
      projects_source.shared_runners_enabled,
      projects_source.build_allow_git_fetch,
      projects_source.build_timeout,
      projects_source.mirror_trigger_builds,
      projects_source.pending_delete,
      projects_source.public_builds,
      projects_source.last_repository_check_failed,
      projects_source.last_repository_check_at,
      projects_source.container_registry_enabled,
      projects_source.only_allow_merge_if_pipeline_succeeds,
      projects_source.has_external_issue_tracker,
      projects_source.repository_storage,
      projects_source.repository_read_only,
      projects_source.request_access_enabled,
      projects_source.has_external_wiki,
      projects_source.ci_config_path,
      projects_source.lfs_enabled,
      projects_source.only_allow_merge_if_all_discussions_are_resolved,
      projects_source.repository_size_limit,
      projects_source.printing_merge_request_link_enabled,
      projects_source.has_auto_canceling_pending_pipelines,
      projects_source.service_desk_enabled,
      projects_source.delete_error,
      projects_source.last_repository_updated_at,
      projects_source.storage_version,
      projects_source.resolve_outdated_diff_discussions,
      projects_source.disable_overriding_approvers_per_merge_request,
      projects_source.remote_mirror_available_overridden,
      projects_source.only_mirror_protected_branches,
      projects_source.pull_mirror_available_overridden,
      projects_source.mirror_overwrites_diverged_branches,
      -- namespace metadata

      IFNULL(prep_namespace.namespace_is_internal, FALSE)            AS namespace_is_internal,

      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_description
      END                                                            AS project_description,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_source
      END                                                            AS project_import_source,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_issues_template
      END                                                            AS project_issues_template,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_build_coverage_regex
      END                                                            AS project_build_coverage_regex,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_name
      END                                                            AS project_name,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_path
      END                                                            AS project_path,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_url
      END                                                            AS project_import_url,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_merge_requests_template
      END                                                            AS project_merge_requests_template,
      
      IFF(projects_source.import_type='gitlab_project' AND projects_source.project_path='learn-gitlab',  
        TRUE, 
        FALSE)                                                       AS is_learn_gitlab,
      ARRAYAGG(active_services.service_type)                         AS active_service_types_array,

      IFNULL(COUNT(DISTINCT members_source.member_id), 0)            AS member_count
    FROM projects_source
    INNER JOIN dim_date
      ON TO_DATE(projects_source.created_at) = dim_date.date_day
    LEFT JOIN prep_namespace
      ON projects_source.namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid
    LEFT JOIN members_source
      ON projects_source.project_id = members_source.source_id
      AND members_source.member_source_type = 'Project'
    LEFT JOIN namespace_lineage
      ON prep_namespace.dim_namespace_id = namespace_lineage.namespace_id
      AND namespace_lineage.is_current = TRUE
    LEFT JOIN gitlab_subscriptions
      ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects_source.created_at >= gitlab_subscriptions.valid_from AND projects_source.created_at < COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
    LEFT JOIN active_services
      ON projects_source.project_id = active_services.project_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63

)

SELECT *
FROM joined1f:Tfbe,WITH source AS (
  SELECT
    *    
  FROM {{ ref('gitlab_dotcom_namespaces_snapshots_base') }} 
),
/*
This CTE finds groups of snapshoted chages that changed the parent id. This is a typical 'gaps and islands' problem. 
*/
  parent_groups AS (
    SELECT
      namespace_id,
      parent_id,
      IFNULL(parent_id, -1)                                                             AS no_null_parent_id,
      LAG(no_null_parent_id, 1, -1)
          OVER (PARTITION BY namespace_id ORDER BY valid_from)                          AS lag_parent_id,
      CONDITIONAL_TRUE_EVENT(no_null_parent_id != lag_parent_id)
                             OVER ( PARTITION BY namespace_id ORDER BY valid_from)      AS parent_id_group,
      valid_from, 
      IFNULL(valid_to, CURRENT_DATE())                                                  AS valid_to     
    FROM source
),
  parent_change AS (
    SELECT
      namespace_id,
      parent_id,
      parent_id_group,
      MIN(valid_from)  AS valid_from,
      MAX(valid_to)    AS valid_to
    FROM parent_groups
    GROUP BY 1,2,3
  ),
  recursive_namespace_lineage(namespace_id, parent_id, valid_to, valid_from, valid_to_list, valid_from_list,
                               upstream_lineage) AS (
    SELECT
      root.namespace_id,
      root.parent_id,
      root.valid_to,
      root.valid_from,
      TO_ARRAY(root.valid_to)     AS valid_to_list,
      TO_ARRAY(root.valid_from)   AS valid_from_list,
      TO_ARRAY(root.namespace_id) AS upstream_lineage
    FROM parent_change AS root
    WHERE parent_id IS NULL

    UNION ALL

    SELECT
      iter.namespace_id,
      iter.parent_id,
      iter.valid_to,
      iter.valid_from,
      ARRAY_APPEND(anchor.valid_to_list, iter.valid_to)        AS valid_to_list,
      ARRAY_APPEND(anchor.valid_from_list, iter.valid_from)    AS valid_from_list,
      ARRAY_APPEND(anchor.upstream_lineage, iter.namespace_id) AS upstream_lineage
    FROM recursive_namespace_lineage AS anchor
    INNER JOIN parent_change AS iter
      ON iter.parent_id = anchor.namespace_id
      AND NOT ARRAY_CONTAINS(iter.namespace_id::VARIANT, anchor.upstream_lineage)
      AND (CASE
             WHEN iter.valid_from BETWEEN anchor.valid_from AND anchor.valid_to THEN TRUE
             WHEN iter.valid_to BETWEEN anchor.valid_from AND anchor.valid_to THEN TRUE
             WHEN anchor.valid_from BETWEEN iter.valid_from AND iter.valid_to THEN TRUE
             ELSE FALSE
           END) = TRUE
  ),

  namespace_lineage_scd AS (
    SELECT
      recursive_namespace_lineage.namespace_id,
      recursive_namespace_lineage.parent_id,
      recursive_namespace_lineage.upstream_lineage,
      recursive_namespace_lineage.upstream_lineage[0]::NUMBER     AS ultimate_parent_id,
      ARRAY_SIZE(recursive_namespace_lineage.upstream_lineage)    AS lineage_depth,
      recursive_namespace_lineage.valid_from_list,
      recursive_namespace_lineage.valid_to_list,
      MAX(from_list.value::TIMESTAMP)                             AS lineage_valid_from,
      MIN(to_list.value::TIMESTAMP)                               AS lineage_valid_to
    FROM recursive_namespace_lineage
    INNER JOIN LATERAL FLATTEN(INPUT =>valid_from_list) from_list
    INNER JOIN LATERAL FLATTEN(INPUT =>valid_to_list) to_list
    GROUP BY 1,2,3,4,5,6,7
    HAVING lineage_valid_to > lineage_valid_from
  ),
  event_index AS (
    SELECT
      {{ dbt_utils.surrogate_key(['namespace_id', 'lineage_valid_from'] ) }}    AS namespace_lineage_id,
      namespace_id,
      parent_id,
      upstream_lineage,
      ultimate_parent_id,
      lineage_depth,
      lineage_valid_from,
      lineage_valid_to,
      ROW_NUMBER() OVER (PARTITION BY namespace_id ORDER BY lineage_valid_from) AS sequence_number,
      IFF(lineage_valid_to = CURRENT_DATE(), TRUE, FALSE)                       AS is_current
    FROM namespace_lineage_scd
  )


{{ dbt_audit(
    cte_ref="event_index",
    created_by="@pempey",
    updated_by="@pempey",
    created_date="2021-11-16",
    updated_date="2021-11-16"
) }}20:T10f4,WITH source AS (
  SELECT
    *    
  FROM "PROD".legacy.gitlab_dotcom_namespaces_snapshots 
),
/*
This CTE finds groups of snapshoted chages that changed the parent id. This is a typical 'gaps and islands' problem. 
*/
  parent_groups AS (
    SELECT
      namespace_id,
      parent_id,
      IFNULL(parent_id, -1)                                                             AS no_null_parent_id,
      LAG(no_null_parent_id, 1, -1)
          OVER (PARTITION BY namespace_id ORDER BY valid_from)                          AS lag_parent_id,
      CONDITIONAL_TRUE_EVENT(no_null_parent_id != lag_parent_id)
                             OVER ( PARTITION BY namespace_id ORDER BY valid_from)      AS parent_id_group,
      valid_from, 
      IFNULL(valid_to, CURRENT_DATE())                                                  AS valid_to     
    FROM source
),
  parent_change AS (
    SELECT
      namespace_id,
      parent_id,
      parent_id_group,
      MIN(valid_from)  AS valid_from,
      MAX(valid_to)    AS valid_to
    FROM parent_groups
    GROUP BY 1,2,3
  ),
  recursive_namespace_lineage(namespace_id, parent_id, valid_to, valid_from, valid_to_list, valid_from_list,
                               upstream_lineage) AS (
    SELECT
      root.namespace_id,
      root.parent_id,
      root.valid_to,
      root.valid_from,
      TO_ARRAY(root.valid_to)     AS valid_to_list,
      TO_ARRAY(root.valid_from)   AS valid_from_list,
      TO_ARRAY(root.namespace_id) AS upstream_lineage
    FROM parent_change AS root
    WHERE parent_id IS NULL

    UNION ALL

    SELECT
      iter.namespace_id,
      iter.parent_id,
      iter.valid_to,
      iter.valid_from,
      ARRAY_APPEND(anchor.valid_to_list, iter.valid_to)        AS valid_to_list,
      ARRAY_APPEND(anchor.valid_from_list, iter.valid_from)    AS valid_from_list,
      ARRAY_APPEND(anchor.upstream_lineage, iter.namespace_id) AS upstream_lineage
    FROM recursive_namespace_lineage AS anchor
    INNER JOIN parent_change AS iter
      ON iter.parent_id = anchor.namespace_id
      AND NOT ARRAY_CONTAINS(iter.namespace_id::VARIANT, anchor.upstream_lineage)
      AND (CASE
             WHEN iter.valid_from BETWEEN anchor.valid_from AND anchor.valid_to THEN TRUE
             WHEN iter.valid_to BETWEEN anchor.valid_from AND anchor.valid_to THEN TRUE
             WHEN anchor.valid_from BETWEEN iter.valid_from AND iter.valid_to THEN TRUE
             ELSE FALSE
           END) = TRUE
  ),

  namespace_lineage_scd AS (
    SELECT
      recursive_namespace_lineage.namespace_id,
      recursive_namespace_lineage.parent_id,
      recursive_namespace_lineage.upstream_lineage,
      recursive_namespace_lineage.upstream_lineage[0]::NUMBER     AS ultimate_parent_id,
      ARRAY_SIZE(recursive_namespace_lineage.upstream_lineage)    AS lineage_depth,
      recursive_namespace_lineage.valid_from_list,
      recursive_namespace_lineage.valid_to_list,
      MAX(from_list.value::TIMESTAMP)                             AS lineage_valid_from,
      MIN(to_list.value::TIMESTAMP)                               AS lineage_valid_to
    FROM recursive_namespace_lineage
    INNER JOIN LATERAL FLATTEN(INPUT =>valid_from_list) from_list
    INNER JOIN LATERAL FLATTEN(INPUT =>valid_to_list) to_list
    GROUP BY 1,2,3,4,5,6,7
    HAVING lineage_valid_to > lineage_valid_from
  ),
  event_index AS (
    SELECT
      md5(cast(coalesce(cast(namespace_id as 
    varchar
), '') || '-' || coalesce(cast(lineage_valid_from as 
    varchar
), '') as 
    varchar
))    AS namespace_lineage_id,
      namespace_id,
      parent_id,
      upstream_lineage,
      ultimate_parent_id,
      lineage_depth,
      lineage_valid_from,
      lineage_valid_to,
      ROW_NUMBER() OVER (PARTITION BY namespace_id ORDER BY lineage_valid_from) AS sequence_number,
      IFF(lineage_valid_to = CURRENT_DATE(), TRUE, FALSE)                       AS is_current
    FROM namespace_lineage_scd
  )


SELECT
      *,
      '@pempey'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2021-11-16'::DATE        AS model_created_date,
      '2021-11-16'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM event_index21:T506,WITH source AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source
  
), renamed AS (

    SELECT
      md5(cast(coalesce(cast(plan_id as 
    varchar
), '') as 
    varchar
)) AS dim_plan_sk,
      plan_id AS dim_plan_id,
      --Create calculated field to conform legacy silver and gold plan ids to premium and ultimate plan ids.
      CASE 
        WHEN plan_id = 3 THEN 100
        WHEN plan_id = 4 THEN 101
        ELSE plan_id
      END AS plan_id_modified,
      created_at,
      updated_at,
      plan_name,
      --Create calculated field to conform legacy silver and gold plan names to premium and ultimate plan names.
      CASE 
        WHEN LOWER(plan_name) = 'silver' THEN 'premium'
        WHEN LOWER(plan_name) = 'gold' THEN 'ultimate'
        ELSE plan_name
      END AS plan_name_modified,
      plan_title,
      plan_is_paid

    FROM source

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2021-05-30'::DATE        AS model_created_date,
      '2022-06-09'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM renamed22:T654,{{ config({
    "alias": "gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id"
    })
}}


WITH source AS (

  SELECT *
  FROM {{ source('snapshots', 'gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots') }}
  WHERE id != 572635 -- This ID has NULL values for many of the important columns.

), renamed AS (

  SELECT
    dbt_scd_id::VARCHAR                           AS gitlab_subscription_snapshot_id,
    id::NUMBER                                    AS gitlab_subscription_id,
    start_date::DATE                              AS gitlab_subscription_start_date,
    end_date::DATE                                AS gitlab_subscription_end_date,
    trial_ends_on::DATE                           AS gitlab_subscription_trial_ends_on,
    namespace_id::NUMBER                          AS namespace_id,
    hosted_plan_id::NUMBER                        AS plan_id,
    max_seats_used::NUMBER                        AS max_seats_used,
    seats::NUMBER                                 AS seats,
    trial::BOOLEAN                                AS is_trial,
    created_at::TIMESTAMP                         AS gitlab_subscription_created_at,
    updated_at::TIMESTAMP                         AS gitlab_subscription_updated_at,
    seats_in_use::NUMBER                          AS seats_in_use,
    seats_owed::NUMBER                            AS seats_owed,
    trial_extension_type::NUMBER                  AS trial_extension_type,
    "DBT_VALID_FROM"::TIMESTAMP                   AS valid_from,
    "DBT_VALID_TO"::TIMESTAMP                     AS valid_to
  
  FROM source
    
)

SELECT *
FROM renamed23:T5e9,


WITH source AS (

  SELECT *
  FROM "RAW".snapshots.gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots
  WHERE id != 572635 -- This ID has NULL values for many of the important columns.

), renamed AS (

  SELECT
    dbt_scd_id::VARCHAR                           AS gitlab_subscription_snapshot_id,
    id::NUMBER                                    AS gitlab_subscription_id,
    start_date::DATE                              AS gitlab_subscription_start_date,
    end_date::DATE                                AS gitlab_subscription_end_date,
    trial_ends_on::DATE                           AS gitlab_subscription_trial_ends_on,
    namespace_id::NUMBER                          AS namespace_id,
    hosted_plan_id::NUMBER                        AS plan_id,
    max_seats_used::NUMBER                        AS max_seats_used,
    seats::NUMBER                                 AS seats,
    trial::BOOLEAN                                AS is_trial,
    created_at::TIMESTAMP                         AS gitlab_subscription_created_at,
    updated_at::TIMESTAMP                         AS gitlab_subscription_updated_at,
    seats_in_use::NUMBER                          AS seats_in_use,
    seats_owed::NUMBER                            AS seats_owed,
    trial_extension_type::NUMBER                  AS trial_extension_type,
    "DBT_VALID_FROM"::TIMESTAMP                   AS valid_from,
    "DBT_VALID_TO"::TIMESTAMP                     AS valid_to
  
  FROM source
    
)

SELECT *
FROM renamed24:T81e,

WITH dates AS (

  SELECT
    "DATE_DAY",
  "DATE_ACTUAL",
  "DAY_NAME",
  "MONTH_ACTUAL",
  "YEAR_ACTUAL",
  "QUARTER_ACTUAL",
  "DAY_OF_WEEK",
  "FIRST_DAY_OF_WEEK",
  "WEEK_OF_YEAR",
  "DAY_OF_MONTH",
  "DAY_OF_QUARTER",
  "DAY_OF_YEAR",
  "FISCAL_YEAR",
  "FISCAL_QUARTER",
  "DAY_OF_FISCAL_QUARTER",
  "DAY_OF_FISCAL_YEAR",
  "MONTH_NAME",
  "FIRST_DAY_OF_MONTH",
  "LAST_DAY_OF_MONTH",
  "FIRST_DAY_OF_YEAR",
  "LAST_DAY_OF_YEAR",
  "FIRST_DAY_OF_QUARTER",
  "LAST_DAY_OF_QUARTER",
  "FIRST_DAY_OF_FISCAL_QUARTER",
  "LAST_DAY_OF_FISCAL_QUARTER",
  "FIRST_DAY_OF_FISCAL_YEAR",
  "LAST_DAY_OF_FISCAL_YEAR",
  "WEEK_OF_FISCAL_YEAR",
  "MONTH_OF_FISCAL_YEAR",
  "LAST_DAY_OF_WEEK",
  "QUARTER_NAME",
  "FISCAL_QUARTER_NAME",
  "FISCAL_QUARTER_NAME_FY",
  "FISCAL_QUARTER_NUMBER_ABSOLUTE",
  "FISCAL_MONTH_NAME",
  "FISCAL_MONTH_NAME_FY",
  "HOLIDAY_DESC",
  "IS_HOLIDAY",
  "LAST_MONTH_OF_FISCAL_QUARTER",
  "IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER",
  "LAST_MONTH_OF_FISCAL_YEAR",
  "IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR",
  "SNAPSHOT_DATE_FPA",
  "SNAPSHOT_DATE_BILLINGS",
  "DAYS_IN_MONTH_COUNT",
  "WEEK_OF_MONTH_NORMALISED",
  "DAY_OF_FISCAL_QUARTER_NORMALISED",
  "WEEK_OF_FISCAL_QUARTER_NORMALISED",
  "DAY_OF_FISCAL_YEAR_NORMALISED",
  "IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK",
  "DAYS_UNTIL_LAST_DAY_OF_MONTH",
  "CURRENT_DATE_ACTUAL",
  "CURRENT_FISCAL_YEAR",
  "CURRENT_FIRST_DAY_OF_FISCAL_YEAR",
  "CURRENT_FISCAL_QUARTER_NAME_FY",
  "CURRENT_FIRST_DAY_OF_MONTH"
  FROM "PROD".common_prep.prep_date

), final AS (

  SELECT
    

  TO_NUMBER(TO_CHAR(date_actual::DATE,'YYYYMMDD'),'99999999')

                                AS date_id,
    *
  FROM dates

)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2020-06-01'::DATE        AS model_created_date,
      '2023-01-09'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final25:T416,Used to simplify CTE imports in a model.

A large portion of import statements in a SQL model are simple `SELECT * FROM table`. Writing pure SQL is verbose and this macro aims to simplify the imports.

The macro accepts once argument which is a list of tuples where each tuple has the alias name and the table reference.

Below is an example and the expected output:

```sql

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account','zuora_account_source'),
    ('zuora_contact','zuora_contact_source')
]) }}

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM {{ref('zuora_excluded_accounts')}}

)

```

```sql
WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".common.map_merged_crm_account

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

)

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM "PROD".legacy.zuora_excluded_accounts

)
```27:Tb31,{{ config({
    "materialized": "incremental",
    "unique_key": "snapshot_day_namespace_id"
    })
}}

{{ simple_cte([
    ('map_namespace_internal', 'map_namespace_internal'),
    ('namespace_subscription_snapshots', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespace_lineage','gitlab_dotcom_namespace_lineage_scd'),
    ('prep_gitlab_dotcom_plan','prep_gitlab_dotcom_plan')
]) }}
,

dates AS (
  SELECT *
  FROM {{ ref('dim_date') }} --prod.common.dim_date
  WHERE date_actual <= CURRENT_DATE()
  {% if is_incremental() -%}
  AND date_actual >= (SELECT MAX(snapshot_day) FROM {{ this }})
  {%- endif %}
),
namespace_lineage_daily AS (
SELECT
  dates.date_actual AS snapshot_day,
  namespace_lineage.namespace_id,
  namespace_lineage.parent_id,
  namespace_lineage.upstream_lineage,
  namespace_lineage.ultimate_parent_id 
FROM namespace_lineage
INNER JOIN dates
  ON dates.date_actual BETWEEN date_trunc('day',namespace_lineage.lineage_valid_from) AND date_trunc('day',namespace_lineage.lineage_valid_to)
QUALIFY ROW_NUMBER() OVER (PARTITION BY dates.date_actual,namespace_id ORDER BY namespace_lineage.lineage_valid_to DESC) = 1
),

with_plans AS (

    SELECT
      namespace_lineage_daily.*,
      IFNULL(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL, FALSE)  AS namespace_is_internal,
      --Please see dbt docs for a description of this column transformation.
      CASE 
        WHEN namespace_subscription_snapshots.is_trial = TRUE AND LOWER(prep_gitlab_dotcom_plan.plan_name_modified) = 'ultimate' THEN 102
        WHEN namespace_subscription_snapshots.plan_id IS NULL THEN 34
        ELSE prep_gitlab_dotcom_plan.plan_id_modified
      END AS ultimate_parent_plan_id,
      namespace_subscription_snapshots.seats,
      namespace_subscription_snapshots.seats_in_use,
      namespace_subscription_snapshots.max_seats_used
    FROM namespace_lineage_daily
    LEFT JOIN map_namespace_internal
      ON namespace_lineage_daily.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
    LEFT JOIN namespace_subscription_snapshots
      ON namespace_lineage_daily.ultimate_parent_id = namespace_subscription_snapshots.namespace_id
      AND namespace_lineage_daily.snapshot_day BETWEEN namespace_subscription_snapshots.valid_from::DATE
                                               AND IFNULL(namespace_subscription_snapshots.valid_to::DATE, CURRENT_DATE)
    LEFT JOIN prep_gitlab_dotcom_plan
      ON namespace_subscription_snapshots.plan_id = prep_gitlab_dotcom_plan.dim_plan_id
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        namespace_lineage_daily.namespace_id,
        snapshot_day
      ORDER BY valid_from DESC
      ) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['snapshot_day', 'namespace_id'] ) }}                    AS snapshot_day_namespace_id,
  *
FROM with_plans28:Tbae,



WITH map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), namespace_subscription_snapshots AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespace_lineage AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_scd

), prep_gitlab_dotcom_plan AS (

    SELECT * 
    FROM "PROD".common_prep.prep_gitlab_dotcom_plan

)
,

dates AS (
  SELECT *
  FROM "PROD".common.dim_date --prod.common.dim_date
  WHERE date_actual <= CURRENT_DATE()
  AND date_actual >= (SELECT MAX(snapshot_day) FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily)
),
namespace_lineage_daily AS (
SELECT
  dates.date_actual AS snapshot_day,
  namespace_lineage.namespace_id,
  namespace_lineage.parent_id,
  namespace_lineage.upstream_lineage,
  namespace_lineage.ultimate_parent_id 
FROM namespace_lineage
INNER JOIN dates
  ON dates.date_actual BETWEEN date_trunc('day',namespace_lineage.lineage_valid_from) AND date_trunc('day',namespace_lineage.lineage_valid_to)
QUALIFY ROW_NUMBER() OVER (PARTITION BY dates.date_actual,namespace_id ORDER BY namespace_lineage.lineage_valid_to DESC) = 1
),

with_plans AS (

    SELECT
      namespace_lineage_daily.*,
      IFNULL(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL, FALSE)  AS namespace_is_internal,
      --Please see dbt docs for a description of this column transformation.
      CASE 
        WHEN namespace_subscription_snapshots.is_trial = TRUE AND LOWER(prep_gitlab_dotcom_plan.plan_name_modified) = 'ultimate' THEN 102
        WHEN namespace_subscription_snapshots.plan_id IS NULL THEN 34
        ELSE prep_gitlab_dotcom_plan.plan_id_modified
      END AS ultimate_parent_plan_id,
      namespace_subscription_snapshots.seats,
      namespace_subscription_snapshots.seats_in_use,
      namespace_subscription_snapshots.max_seats_used
    FROM namespace_lineage_daily
    LEFT JOIN map_namespace_internal
      ON namespace_lineage_daily.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
    LEFT JOIN namespace_subscription_snapshots
      ON namespace_lineage_daily.ultimate_parent_id = namespace_subscription_snapshots.namespace_id
      AND namespace_lineage_daily.snapshot_day BETWEEN namespace_subscription_snapshots.valid_from::DATE
                                               AND IFNULL(namespace_subscription_snapshots.valid_to::DATE, CURRENT_DATE)
    LEFT JOIN prep_gitlab_dotcom_plan
      ON namespace_subscription_snapshots.plan_id = prep_gitlab_dotcom_plan.dim_plan_id
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        namespace_lineage_daily.namespace_id,
        snapshot_day
      ORDER BY valid_from DESC
      ) = 1

)

SELECT
  md5(cast(coalesce(cast(snapshot_day as 
    varchar
), '') || '-' || coalesce(cast(namespace_id as 
    varchar
), '') as 
    varchar
))                    AS snapshot_day_namespace_id,
  *
FROM with_plansc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"gitlab_dotcom_namespace_lineage_historical_daily"}],["$","small",null,{"children":"incremental"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","product",{"children":[["$","code",null,{"children":["$","a",null,{"children":"product"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PREP.preparation.gitlab_dotcom_namespace_lineage_historical_daily"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"1 TB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 11:26UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"children":["This ","model"," is not currently documented"]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_LINEAGE_HISTORICAL_DAILY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_DAY_NAMESPACE_ID":{"type":"TEXT","index":1,"name":"snapshot_day_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_day_namespace_id"},"SNAPSHOT_DAY":{"type":"DATE","index":2,"name":"SNAPSHOT_DAY","comment":null,"display_name":"snapshot_day"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":4,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"UPSTREAM_LINEAGE":{"type":"ARRAY","index":5,"name":"UPSTREAM_LINEAGE","comment":null,"display_name":"upstream_lineage"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":6,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":7,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":8,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"SEATS":{"type":"NUMBER","index":9,"name":"SEATS","comment":null,"display_name":"seats"},"SEATS_IN_USE":{"type":"NUMBER","index":10,"name":"SEATS_IN_USE","comment":null,"display_name":"seats_in_use"},"MAX_SEATS_USED":{"type":"NUMBER","index":11,"name":"MAX_SEATS_USED","comment":null,"display_name":"max_seats_used"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1294140449280,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"snapshot_day_namespace_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_lineage_historical_daily"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_daily.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_daily.sql","name":"gitlab_dotcom_namespace_lineage_historical_daily","alias":"gitlab_dotcom_namespace_lineage_historical_daily","checksum":{"name":"sha256","checksum":"89b36794fa88769e8d6bc2729f39a78e186fc126969a75d90175407541f612c2"},"tags":["product"],"refs":[["map_namespace_internal"],["map_namespace_internal"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_namespace_lineage_scd"],["gitlab_dotcom_namespace_lineage_scd"],["prep_gitlab_dotcom_plan"],["prep_gitlab_dotcom_plan"],["dim_date"],["dim_date"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_daily.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"snapshot_day_namespace_id"},"created_at":1689033760.1824334,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_daily","label":"gitlab_dotcom_namespace_lineage_historical_daily"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_LINEAGE_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":3,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"UPSTREAM_LINEAGE":{"type":"ARRAY","index":4,"name":"UPSTREAM_LINEAGE","comment":null,"display_name":"upstream_lineage"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":5,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":6,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":7,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","raw_sql":"{{ config(materialized='view') }}\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM {{ ref('date_details') }}\n    WHERE last_day_of_month = date_actual\n     \n), namespace_lineage_snapshots_daily AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }}\n  \n), namespace_lineage_snapshots_monthly AS (\n  \n    SELECT\n      date_details.first_day_of_month AS snapshot_month,\n      namespace_lineage_snapshots_daily.namespace_id,\n      namespace_lineage_snapshots_daily.parent_id,\n      namespace_lineage_snapshots_daily.upstream_lineage,\n      namespace_lineage_snapshots_daily.ultimate_parent_id,\n      namespace_lineage_snapshots_daily.namespace_is_internal,\n      namespace_lineage_snapshots_daily.ultimate_parent_plan_id\n    FROM namespace_lineage_snapshots_daily\n    INNER JOIN date_details\n      ON date_details.date_actual = namespace_lineage_snapshots_daily.snapshot_day\n  \n)\n\nSELECT *\nFROM namespace_lineage_snapshots_monthly","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_lineage_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_monthly.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_monthly.sql","name":"gitlab_dotcom_namespace_lineage_historical_monthly","alias":"gitlab_dotcom_namespace_lineage_historical_monthly","checksum":{"name":"sha256","checksum":"13f220668c315344c25075522598a754d4a1e84fb28b7c613ea706841569a197"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033760.1831427,"compiled_sql":"\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.date_details\n    WHERE last_day_of_month = date_actual\n     \n), namespace_lineage_snapshots_daily AS (\n\n    SELECT *\n    FROM \"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_daily\n  \n), namespace_lineage_snapshots_monthly AS (\n  \n    SELECT\n      date_details.first_day_of_month AS snapshot_month,\n      namespace_lineage_snapshots_daily.namespace_id,\n      namespace_lineage_snapshots_daily.parent_id,\n      namespace_lineage_snapshots_daily.upstream_lineage,\n      namespace_lineage_snapshots_daily.ultimate_parent_id,\n      namespace_lineage_snapshots_daily.namespace_is_internal,\n      namespace_lineage_snapshots_daily.ultimate_parent_plan_id\n    FROM namespace_lineage_snapshots_daily\n    INNER JOIN date_details\n      ON date_details.date_actual = namespace_lineage_snapshots_daily.snapshot_day\n  \n)\n\nSELECT *\nFROM namespace_lineage_snapshots_monthly","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_monthly","label":"gitlab_dotcom_namespace_lineage_historical_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_USAGE_CI_MINUTES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"snapshot_month","comment":null,"description":"Month in which CI Minutes usage data was snapshotted, formatted as `20YY-MM-01`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_month"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"dim_namespace_id","comment":null,"description":"ID of the namespace responsible for the CI Minutes usage.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ultimate_parent_namespace_id","comment":null,"description":"ID of the namespace's ultimate parent namespace.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":4,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_type"},"VISIBILITY_LEVEL":{"type":"TEXT","index":5,"name":"visibility_level","comment":null,"description":"The visibility setting for the namespace or project: public, private, or internal. More information about namespace and project visibility [here](https://docs.gitlab.com/ee/user/public_access.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"LIMIT":{"type":"TEXT","index":6,"name":"limit","comment":null,"description":"Monthly CI Minutes limit of the namespace, based on its [product tier](https://about.gitlab.com/pricing/). This value will be 'Not supported minutes' if shared runners are not enabled on the namespace and 'Unlimited minutes' for certain GitLab internal namespaces.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"limit"},"SHARED_RUNNERS_MINUTES_USED_OVERALL":{"type":"NUMBER","index":7,"name":"shared_runners_minutes_used_overall","comment":null,"description":"Total CI Minutes used in the snapshot month.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"shared_runners_minutes_used_overall"},"STATUS":{"type":"TEXT","index":8,"name":"status","comment":null,"description":"Status of CI Minutes usage against the tier-based limit by namespaces with `shared_runners_minutes_limit` enabled. Over Quota, Under Quota, or Disabled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"status"},"LIMIT_BASED_PLAN":{"type":"NUMBER","index":9,"name":"limit_based_plan","comment":null,"description":"Limit independent of whether there aren't projects with `shared_runners_enabled` inside the namespaces and only take into account how many minutes have been used from the monthly quota based in the plan of the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"limit_based_plan"},"USED":{"type":"NUMBER","index":10,"name":"used","comment":null,"description":"CI Minutes used against the tier-based limit in a given snapshot month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"used"},"STATUS_BASED_PLAN":{"type":"TEXT","index":11,"name":"status_based_plan","comment":null,"description":"Status independent of whether there aren't projects with `shared_runners_enabled` inside the namespaces and only take into account how many minutes have been used from the monthly quota based in the plan of the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"status_based_plan"},"LIMIT_PURCHASED":{"type":"NUMBER","index":12,"name":"limit_purchased","comment":null,"description":"Limit of extra CI Minutes purchased once monthly minutes have been used up.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"limit_purchased"},"USED_PURCHASED":{"type":"NUMBER","index":13,"name":"used_purchased","comment":null,"description":"Purchased extra CI Minutes used in a given snapshot month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"used_purchased"},"STATUS_PURCHASED":{"type":"TEXT","index":14,"name":"status_purchased","comment":null,"description":"Status of CI Minutes usage against the extra CI Minutes purchased limit by namespaces.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"status_purchased"},"CREATED_BY":{"type":"TEXT","index":15,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":16,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":17,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":18,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":19,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":20,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:14UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":10426894848,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_usage_ci_minutes","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_project_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_project_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_source","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_source"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_usage_ci_minutes"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_usage_ci_minutes.sql","original_file_path":"models/common/facts_product_and_engineering/fct_usage_ci_minutes.sql","name":"fct_usage_ci_minutes","alias":"fct_usage_ci_minutes","checksum":{"name":"sha256","checksum":"576b6445db21ae683b2dc095bc85d1fe65dd99bf85b4744039a2384aa3fcb6e1"},"tags":[],"refs":[["gitlab_dotcom_project_historical_monthly"],["gitlab_dotcom_project_historical_monthly"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_historical_monthly"],["gitlab_dotcom_namespace_historical_monthly"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespace_statistics_historical_monthly"],["gitlab_dotcom_namespace_statistics_historical_monthly"],["gitlab_dotcom_namespace_statistics_source"],["gitlab_dotcom_namespace_statistics_source"]],"sources":[],"metrics":[],"description":"$14","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_usage_ci_minutes.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033750.961342,"compiled_sql":"$15","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_usage_ci_minutes","label":"fct_usage_ci_minutes"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_USAGE_STORAGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"snapshot_month","comment":null,"description":"Month in which Storage usage data was snapshotted, formatted as `20YY-MM-01`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_month"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"dim_namespace_id","comment":null,"description":"ID of the namespace responsible for the Storage usage.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ultimate_parent_namespace_id","comment":null,"description":"ID of the namespace's ultimate parent namespace.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"LARGEST_REPOSITORY_SIZE_GIB":{"type":"NUMBER","index":4,"name":"largest_repository_size_gib","comment":null,"description":"Size of the namespace's largest project repository, in GiB.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"largest_repository_size_gib"},"TOTAL_FREE_STORAGE_LIMIT_GIB":{"type":"NUMBER","index":5,"name":"total_free_storage_limit_gib","comment":null,"description":"Sum of free repository level storage (10 GiB) over all repositories under the top level namespace. Since storage limits are provided in GiB, they are being reported in GiB. For certain GitLab internal namespaces this value is 0, implying **unlimited storage**.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"total_free_storage_limit_gib"},"TOTAL_PURCHASED_STORAGE_LIMIT_GIB":{"type":"NUMBER","index":6,"name":"total_purchased_storage_limit_gib","comment":null,"description":"Total extra storage purhaced across all namespaces under the top level namespace. Extra storage is currently purchased in 10 GiB increments and thus is reported in GiB.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"total_purchased_storage_limit_gib"},"HAS_REPOSITORIES_ABOVE_FREE_LIMIT":{"type":"BOOLEAN","index":7,"name":"has_repositories_above_free_limit","comment":null,"description":"Flags for the presence of repositories with 10 GiB or more of billable storage.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_repositories_above_free_limit"},"REPOSITORIES_ABOVE_FREE_LIMIT_COUNT":{"type":"NUMBER","index":8,"name":"repositories_above_free_limit_count","comment":null,"description":"Count of repositories with 10 GiB or more of billable storage.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repositories_above_free_limit_count"},"HAS_CAPPED_REPOSITORIES":{"type":"BOOLEAN","index":9,"name":"has_capped_repositories","comment":null,"description":"Flags for the presence of repositories with 10 GiB or more of billable storage with no available purchased storage remaining.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_capped_repositories"},"CAPPED_REPOSITORIES_COUNT":{"type":"NUMBER","index":10,"name":"capped_repositories_count","comment":null,"description":"Count of repositories with 10 GiB or more of billable storage and no available purchased storage remaining.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"capped_repositories_count"},"TOTAL_FREE_STORAGE_BYTES":{"type":"NUMBER","index":11,"name":"TOTAL_FREE_STORAGE_BYTES","comment":null,"display_name":"total_free_storage_bytes"},"TOTAL_PURCHASED_STORAGE_BYTES":{"type":"NUMBER","index":12,"name":"TOTAL_PURCHASED_STORAGE_BYTES","comment":null,"display_name":"total_purchased_storage_bytes"},"BILLABLE_STORAGE_BYTES":{"type":"NUMBER","index":13,"name":"billable_storage_bytes","comment":null,"description":"This value consists of the only types of storage that GitLab currently limits, and thus are possible to be billable. This value is equivalent to `repository_size` + `lfs_objects_size` across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billable_storage_bytes"},"REPOSITORY_BYTES":{"type":"NUMBER","index":14,"name":"repository_bytes","comment":null,"description":"Total size of repository across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repository_bytes"},"CONTAINER_REGISTRY_BYTES":{"type":"NUMBER","index":15,"name":"CONTAINER_REGISTRY_BYTES","comment":null,"display_name":"container_registry_bytes"},"LFS_OBJECTS_BYTES":{"type":"NUMBER","index":16,"name":"lfs_objects_bytes","comment":null,"description":"Total size of Large File Storage objects across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lfs_objects_bytes"},"BUILD_ARTIFACTS_BYTES":{"type":"NUMBER","index":17,"name":"build_artifacts_bytes","comment":null,"description":"Total size of build artifacts across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"build_artifacts_bytes"},"PACKAGES_BYTES":{"type":"NUMBER","index":18,"name":"packages_bytes","comment":null,"description":"Total size of packagess across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"packages_bytes"},"WIKI_BYTES":{"type":"NUMBER","index":19,"name":"wiki_bytes","comment":null,"description":"Total size of wikis across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wiki_bytes"},"STORAGE_BYTES":{"type":"NUMBER","index":20,"name":"storage_bytes","comment":null,"description":"Sum of reposity, LFS objects, build artifacts, packages, and wiki storage sizes.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"storage_bytes"},"TOTAL_FREE_STORAGE_MIB":{"type":"NUMBER","index":21,"name":"TOTAL_FREE_STORAGE_MIB","comment":null,"display_name":"total_free_storage_mib"},"TOTAL_PURCHASED_STORAGE_MIB":{"type":"NUMBER","index":22,"name":"TOTAL_PURCHASED_STORAGE_MIB","comment":null,"display_name":"total_purchased_storage_mib"},"BILLABLE_STORAGE_MIB":{"type":"NUMBER","index":23,"name":"BILLABLE_STORAGE_MIB","comment":null,"display_name":"billable_storage_mib"},"REPOSITORY_MIB":{"type":"NUMBER","index":24,"name":"REPOSITORY_MIB","comment":null,"display_name":"repository_mib"},"LFS_OBJECTS_MIB":{"type":"NUMBER","index":25,"name":"LFS_OBJECTS_MIB","comment":null,"display_name":"lfs_objects_mib"},"BUILD_ARTIFACTS_MIB":{"type":"NUMBER","index":26,"name":"BUILD_ARTIFACTS_MIB","comment":null,"display_name":"build_artifacts_mib"},"PACKAGES_MIB":{"type":"NUMBER","index":27,"name":"PACKAGES_MIB","comment":null,"display_name":"packages_mib"},"WIKI_MIB":{"type":"NUMBER","index":28,"name":"WIKI_MIB","comment":null,"display_name":"wiki_mib"},"STORAGE_MIB":{"type":"NUMBER","index":29,"name":"STORAGE_MIB","comment":null,"display_name":"storage_mib"},"TOTAL_FREE_STORAGE_GIB":{"type":"NUMBER","index":30,"name":"TOTAL_FREE_STORAGE_GIB","comment":null,"display_name":"total_free_storage_gib"},"TOTAL_PURCHASED_STORAGE_GIB":{"type":"NUMBER","index":31,"name":"TOTAL_PURCHASED_STORAGE_GIB","comment":null,"display_name":"total_purchased_storage_gib"},"BILLABLE_STORAGE_GIB":{"type":"NUMBER","index":32,"name":"BILLABLE_STORAGE_GIB","comment":null,"display_name":"billable_storage_gib"},"REPOSITORY_GIB":{"type":"NUMBER","index":33,"name":"REPOSITORY_GIB","comment":null,"display_name":"repository_gib"},"LFS_OBJECTS_GIB":{"type":"NUMBER","index":34,"name":"LFS_OBJECTS_GIB","comment":null,"display_name":"lfs_objects_gib"},"BUILD_ARTIFACTS_GIB":{"type":"NUMBER","index":35,"name":"BUILD_ARTIFACTS_GIB","comment":null,"display_name":"build_artifacts_gib"},"PACKAGES_GIB":{"type":"NUMBER","index":36,"name":"PACKAGES_GIB","comment":null,"display_name":"packages_gib"},"WIKI_GIB":{"type":"NUMBER","index":37,"name":"WIKI_GIB","comment":null,"display_name":"wiki_gib"},"STORAGE_GIB":{"type":"NUMBER","index":38,"name":"STORAGE_GIB","comment":null,"display_name":"storage_gib"},"CREATED_BY":{"type":"TEXT","index":39,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":40,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":41,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":42,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":43,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":44,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"total_free_storage_size":{"name":"total_free_storage_size","description":"Total billable storage used _under_ the free 10 GiB limit across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_free_storage_size"},"total_purchased_storage_size":{"name":"total_purchased_storage_size","description":"Total billable storage used _over_ the free 10 GiB limit across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_purchased_storage_size"},"container_registry_size":{"name":"container_registry_size","description":"Total size of container registry under the top level namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_size"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":13882269696,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_usage_storage","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_project_statistic_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_project_statistic_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_project_statistics_source","model.gitlab_snowflake.gitlab_dotcom_project_statistics_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_root_storage_statistics_source","model.gitlab_snowflake.gitlab_dotcom_namespace_root_storage_statistics_source","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_usage_storage"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_usage_storage.sql","original_file_path":"models/common/facts_product_and_engineering/fct_usage_storage.sql","name":"fct_usage_storage","alias":"fct_usage_storage","checksum":{"name":"sha256","checksum":"269e4d4f682f81a216bcf884b3533bcdc564a7b244c14081eec9ed9ea617c162"},"tags":[],"refs":[["prep_namespace"],["prep_namespace"],["gitlab_dotcom_project_statistic_historical_monthly"],["gitlab_dotcom_project_statistic_historical_monthly"],["gitlab_dotcom_project_statistics_source"],["gitlab_dotcom_project_statistics_source"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"],["gitlab_dotcom_namespace_root_storage_statistics_source"],["gitlab_dotcom_namespace_root_storage_statistics_source"],["dim_date"],["dim_date"],["customers_db_orders_source"],["customers_db_orders_source"]],"sources":[],"metrics":[],"description":"$17","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_usage_storage.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033751.0707603,"compiled_sql":"$18","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_usage_storage","label":"fct_usage_storage"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_NAMESPACE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_IS_ULTIMATE_PARENT":{"type":"BOOLEAN","index":3,"name":"namespace_is_ultimate_parent","comment":null,"description":"Boolean flag which is set to True if the namespace is the ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_ultimate_parent"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":4,"name":"namespace_is_internal","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"NAMESPACE_NAME":{"type":"TEXT","index":5,"name":"namespace_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":6,"name":"namespace_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":7,"name":"owner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":9,"name":"has_avatar","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_avatar"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":12,"name":"is_membership_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":13,"name":"has_request_access_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":14,"name":"has_share_with_group_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_share_with_group_locked"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":15,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"VISIBILITY_LEVEL":{"type":"TEXT","index":16,"name":"visibility_level","comment":null,"description":"The visibility setting for the namespace or project: public, private, or internal. More information about namespace and project visibility [here](https://docs.gitlab.com/ee/user/public_access.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":17,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":18,"name":"ldap_sync_error","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"ldap_sync_last_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ldap_sync_last_successful_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"ldap_sync_last_sync_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":22,"name":"lfs_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":23,"name":"parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":24,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":25,"name":"shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":26,"name":"extra_shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":27,"name":"repository_size_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":28,"name":"does_require_two_factor_authentication","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":29,"name":"two_factor_grace_period","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":30,"name":"project_creation_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":31,"name":"push_rule_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"push_rule_id"},"CREATOR_ID":{"type":"NUMBER","index":32,"name":"creator_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"creator_id"},"NAMESPACE_CREATOR_IS_BLOCKED":{"type":"BOOLEAN","index":33,"name":"namespace_creator_is_blocked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_creator_is_blocked"},"GITLAB_PLAN_ID":{"type":"NUMBER","index":34,"name":"gitlab_plan_id","comment":null,"description":"The `plan_id` associated with the namespace's _GitLab_ subscription. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_id"},"GITLAB_PLAN_TITLE":{"type":"TEXT","index":35,"name":"gitlab_plan_title","comment":null,"description":"The `plan_title` associated with the namespace's _GitLab_ subscription. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_title"},"GITLAB_PLAN_IS_PAID":{"type":"BOOLEAN","index":36,"name":"gitlab_plan_is_paid","comment":null,"description":"Indicates whether or not the namespace is subscribed to a paid plan. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_is_paid"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":37,"name":"dim_product_tier_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"GITLAB_PLAN_SEATS":{"type":"NUMBER","index":38,"name":"gitlab_plan_seats","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_seats"},"GITLAB_PLAN_SEATS_IN_USE":{"type":"NUMBER","index":39,"name":"gitlab_plan_seats_in_use","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_seats_in_use"},"GITLAB_PLAN_MAX_SEATS_USED":{"type":"NUMBER","index":40,"name":"gitlab_plan_max_seats_used","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_max_seats_used"},"NAMESPACE_MEMBER_COUNT":{"type":"NUMBER","index":41,"name":"namespace_member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_member_count"},"NAMESPACE_PROJECT_COUNT":{"type":"NUMBER","index":42,"name":"NAMESPACE_PROJECT_COUNT","comment":null,"display_name":"namespace_project_count"},"HAS_CODE_SUGGESTIONS_ENABLED":{"type":"BOOLEAN","index":43,"name":"has_code_suggestions_enabled","comment":null,"description":"Boolean flag set to True if the namespace has code suggestions enabled. This appears as `code_suggestions` in the gitlab.com db `namespace_settings` table.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_code_suggestions_enabled"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":44,"name":"is_currently_valid","comment":null,"description":"Flags whether the namespace is currently valid. `FALSE` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_currently_valid"},"CREATED_BY":{"type":"TEXT","index":45,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":46,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":47,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":48,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":49,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":50,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"namespace_created_at":{"name":"namespace_created_at","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_created_at"},"namespace_updated_at":{"name":"namespace_updated_at","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_updated_at"},"dap_sync_status":{"name":"dap_sync_status","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dap_sync_status"},"current_project_count":{"name":"current_project_count","description":"The number of projects that are presently associated with the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_project_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:40UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2699501568,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_namespace","raw_sql":"$19","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.prep_namespace_hist","model.gitlab_snowflake.prep_namespace_hist","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_source","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_namespace"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_namespace.sql","original_file_path":"models/common_prep/prep_namespace.sql","name":"prep_namespace","alias":"prep_namespace","checksum":{"name":"sha256","checksum":"41dc2b8ac8a4f3a99595d23a39b60f3ed05ba69d14805879b5fdd176d1f7736e"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["prep_namespace_hist"],["prep_namespace_hist"],["gitlab_dotcom_namespace_settings_source"],["gitlab_dotcom_namespace_settings_source"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["map_namespace_internal"],["map_namespace_internal"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_product_tier"],["prep_product_tier"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_audit_events_source"],["gitlab_dotcom_audit_events_source"],["prep_audit_event_details_clean"],["prep_audit_event_details_clean"],["prep_user"],["prep_user"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"Includes all columns from the namespaces base model. The plan columns in this table (gitlab_plan_id, gitlab_plan_title, gitlab_plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\n\nThis table add a count of members and projects currently associated with the namespace.\nBoolean columns: gitlab_plan_is_paid, namespace_is_internal, namespace_is_ultimate_parent\n\nA NULL namespace type defaults to \"Individual\".\nThis table joins to common product tier dimension via dim_product_tier_id to get the current product tier.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_namespace.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033756.4780283,"compiled_sql":"$1a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_namespace","label":"prep_namespace"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_NAMESPACE_HISTORICAL_MONTHLY_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"SNAPSHOT_DAY_NAMESPACE_ID":{"type":"TEXT","index":2,"name":"SNAPSHOT_DAY_NAMESPACE_ID","comment":null,"display_name":"snapshot_day_namespace_id"},"SNAPSHOT_DAY":{"type":"DATE","index":3,"name":"SNAPSHOT_DAY","comment":null,"display_name":"snapshot_day"},"NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":5,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"OWNER_ID":{"type":"NUMBER","index":6,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":7,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"VISIBILITY_LEVEL":{"type":"TEXT","index":8,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":9,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":10,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":11,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":13,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":14,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":15,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"SHARED_RUNNERS_SECONDS":{"type":"NUMBER","index":16,"name":"SHARED_RUNNERS_SECONDS","comment":null,"display_name":"shared_runners_seconds"},"SHARED_RUNNERS_SECONDS_LAST_RESET":{"type":"TIMESTAMP_NTZ","index":17,"name":"SHARED_RUNNERS_SECONDS_LAST_RESET","comment":null,"display_name":"shared_runners_seconds_last_reset"},"REPOSITORY_SIZE":{"type":"NUMBER","index":18,"name":"REPOSITORY_SIZE","comment":null,"display_name":"repository_size"},"CONTAINER_REGISTRY_SIZE":{"type":"NUMBER","index":19,"name":"CONTAINER_REGISTRY_SIZE","comment":null,"display_name":"container_registry_size"},"LFS_OBJECTS_SIZE":{"type":"NUMBER","index":20,"name":"LFS_OBJECTS_SIZE","comment":null,"display_name":"lfs_objects_size"},"WIKI_SIZE":{"type":"NUMBER","index":21,"name":"WIKI_SIZE","comment":null,"display_name":"wiki_size"},"BUILD_ARTIFACTS_SIZE":{"type":"NUMBER","index":22,"name":"BUILD_ARTIFACTS_SIZE","comment":null,"display_name":"build_artifacts_size"},"STORAGE_SIZE":{"type":"NUMBER","index":23,"name":"STORAGE_SIZE","comment":null,"display_name":"storage_size"},"PACKAGES_SIZE":{"type":"NUMBER","index":24,"name":"PACKAGES_SIZE","comment":null,"display_name":"packages_size"},"CONCAT(snapshot_month, namespace_id)":{"name":"CONCAT(snapshot_month, namespace_id)","description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"CONCAT(snapshot_month, namespace_id)"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":42514714112,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_historical_monthly_xf","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_namespace_historical_monthly_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_namespace_historical_monthly_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespace_historical_monthly_xf.sql","name":"gitlab_dotcom_namespace_historical_monthly_xf","alias":"gitlab_dotcom_namespace_historical_monthly_xf","checksum":{"name":"sha256","checksum":"13cca51c513f9cba06986ef044898ab49bb11e5497710fb9752c31ea96fd4f29"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_historical_daily"],["gitlab_dotcom_namespace_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_statistics_historical_monthly"],["gitlab_dotcom_namespace_statistics_historical_monthly"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespace_historical_monthly_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3770046,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_namespace_historical_monthly_xf","label":"gitlab_dotcom_namespace_historical_monthly_xf"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PROJECT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PROJECT_ID":{"type":"NUMBER","index":1,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_USER_ID_CREATOR":{"type":"NUMBER","index":4,"name":"DIM_USER_ID_CREATOR","comment":null,"display_name":"dim_user_id_creator"},"DIM_DATE_ID":{"type":"NUMBER","index":5,"name":"DIM_DATE_ID","comment":null,"display_name":"dim_date_id"},"DIM_PRODUCT_TIER_ID_AT_CREATION":{"type":"TEXT","index":6,"name":"DIM_PRODUCT_TIER_ID_AT_CREATION","comment":null,"display_name":"dim_product_tier_id_at_creation"},"DIM_PLAN_ID":{"type":"NUMBER","index":7,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":11,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"IS_ARCHIVED":{"type":"BOOLEAN","index":12,"name":"IS_ARCHIVED","comment":null,"display_name":"is_archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":13,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":14,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":15,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":16,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"IS_IMPORTED":{"type":"BOOLEAN","index":17,"name":"IS_IMPORTED","comment":null,"display_name":"is_imported"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":18,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":19,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":20,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":21,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":22,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":23,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":24,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":25,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":26,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":27,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":28,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":29,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":30,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":31,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":32,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":33,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":34,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":35,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":36,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":37,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":38,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":39,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":40,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":41,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":42,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":43,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":44,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":45,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":46,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":47,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":48,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":49,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":50,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":51,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":52,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":53,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":54,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":55,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":56,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":57,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":58,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":59,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":60,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":61,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":62,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"IS_LEARN_GITLAB":{"type":"BOOLEAN","index":63,"name":"IS_LEARN_GITLAB","comment":null,"display_name":"is_learn_gitlab"},"ACTIVE_SERVICE_TYPES_ARRAY":{"type":"ARRAY","index":64,"name":"ACTIVE_SERVICE_TYPES_ARRAY","comment":null,"display_name":"active_service_types_array"},"MEMBER_COUNT":{"type":"NUMBER","index":65,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2232034816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_project","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_project"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_project.sql","original_file_path":"models/common_prep/prep_project.sql","name":"prep_project","alias":"prep_project","checksum":{"name":"sha256","checksum":"aefd9a1ae7eee148ae3c5e359989133a026ade6ed5a4c7db90fe64ab6766b5a6"},"tags":[],"refs":[["dim_date"],["dim_date"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["prep_product_tier"],["prep_product_tier"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"]],"sources":[],"metrics":[],"description":"Prep table for project-level data. Used to build `dim_project`, in addition to other facts and dimensions","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_project.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.8471196,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_project","label":"prep_project"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_gitlab_dotcom_namespa_5024b5a2a8687be3ec46466fe65e1f39\") }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"snapshot_day_namespace_id","model":"{{ get_where_subquery(ref('gitlab_dotcom_namespace_lineage_historical_daily')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily"]},"config":{"enabled":true,"alias":"not_null_gitlab_dotcom_namespa_5024b5a2a8687be3ec46466fe65e1f39","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","not_null_gitlab_dotcom_namespace_lineage_historical_daily_snapshot_day_namespace_id"],"unique_id":"test.gitlab_snowflake.not_null_gitlab_dotcom_namespace_lineage_historical_daily_snapshot_day_namespace_id.e993400aff","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_gitlab_dotcom_namespa_5024b5a2a8687be3ec46466fe65e1f39.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/schema.yml","name":"not_null_gitlab_dotcom_namespace_lineage_historical_daily_snapshot_day_namespace_id","alias":"not_null_gitlab_dotcom_namespa_5024b5a2a8687be3ec46466fe65e1f39","checksum":{"name":"none","checksum":""},"tags":["gitlab_dotcom","tdf"],"refs":[["gitlab_dotcom_namespace_lineage_historical_daily"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/schema.yml/not_null_gitlab_dotcom_namespa_5024b5a2a8687be3ec46466fe65e1f39.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"not_null_gitlab_dotcom_namespa_5024b5a2a8687be3ec46466fe65e1f39"},"created_at":1689033760.251258,"compiled_sql":"\n    \n    \n\n\n\nselect snapshot_day_namespace_id\nfrom \"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_daily\nwhere snapshot_day_namespace_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"snapshot_day_namespace_id","file_key_name":"models.gitlab_dotcom_namespace_lineage_historical_daily","label":"not_null_gitlab_dotcom_namespace_lineage_historical_daily_snapshot_day_namespace_id"}]},"node":{"resource_type":"model","name":"gitlab_dotcom_namespace_lineage_historical_daily","unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_LINEAGE_SCD","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"NAMESPACE_LINEAGE_ID":{"type":"TEXT","index":1,"name":"namespace_lineage_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"namespace_lineage_id"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":3,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"UPSTREAM_LINEAGE":{"type":"ARRAY","index":4,"name":"UPSTREAM_LINEAGE","comment":null,"display_name":"upstream_lineage"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":5,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"LINEAGE_DEPTH":{"type":"NUMBER","index":6,"name":"LINEAGE_DEPTH","comment":null,"display_name":"lineage_depth"},"LINEAGE_VALID_FROM":{"type":"TIMESTAMP_NTZ","index":7,"name":"LINEAGE_VALID_FROM","comment":null,"display_name":"lineage_valid_from"},"LINEAGE_VALID_TO":{"type":"TIMESTAMP_NTZ","index":8,"name":"LINEAGE_VALID_TO","comment":null,"display_name":"lineage_valid_to"},"SEQUENCE_NUMBER":{"type":"NUMBER","index":9,"name":"SEQUENCE_NUMBER","comment":null,"display_name":"sequence_number"},"IS_CURRENT":{"type":"BOOLEAN","index":10,"name":"IS_CURRENT","comment":null,"display_name":"is_current"},"CREATED_BY":{"type":"TEXT","index":11,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":12,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":13,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":14,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":15,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":16,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:20UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2336865792,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","raw_sql":"$1f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_namespaces_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_lineage_scd"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_scd.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_scd.sql","name":"gitlab_dotcom_namespace_lineage_scd","alias":"gitlab_dotcom_namespace_lineage_scd","checksum":{"name":"sha256","checksum":"52a33642a3b4fee571e22465a5556f8ffd5da56f91f6b0df658437a0fe86f530"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces_snapshots_base"],["gitlab_dotcom_namespaces_snapshots_base"]],"sources":[],"metrics":[],"description":"A derivative table from the namespace snapshot table that identifies that valid time range for the namespace lineage of a given namespace.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_scd.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033760.1859577,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_lineage_scd","label":"gitlab_dotcom_namespace_lineage_scd"},{"metadata":{"type":"VIEW","schema":"COMMON_MAPPING","name":"MAP_NAMESPACE_INTERNAL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"ultimate_parent_namespace_id","comment":null,"description":"The ultimate parent namespace identifiers that are internal to gitlab.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ultimate_parent_namespace_id"},"CREATED_BY":{"type":"TEXT","index":2,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":3,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":4,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":5,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":6,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":7,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_namespace_internal","raw_sql":"{{ config({\n        \"materialized\": \"view\",\n    })\n}}\n\nWITH final AS (\n\n  SELECT DISTINCT \n    namespace_id AS ultimate_parent_namespace_id\n  FROM {{ref('internal_gitlab_namespaces')}}\n  WHERE namespace_id IS NOT NULL\n\n)\n\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@snalamaru\",\n    updated_by=\"@pempey\",\n    created_date=\"2020-12-29\",\n    updated_date=\"2023-01-31\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.internal_gitlab_namespaces","seed.gitlab_snowflake.internal_gitlab_namespaces"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":[],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_namespace_internal"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_namespace_internal.sql","original_file_path":"models/common_mapping/map_namespace_internal.sql","name":"map_namespace_internal","alias":"map_namespace_internal","checksum":{"name":"sha256","checksum":"00dd1ad3db48221e0775590c7c26a78f770b9828d9aafec1316c56f6523c8c8c"},"tags":[],"refs":[["internal_gitlab_namespaces"],["internal_gitlab_namespaces"]],"sources":[],"metrics":[],"description":"This View contains the list of ultimate parent namespace ids that are internal to gitlab. In the future this list should be sourced from an upstream data sources or determined based on billing account in customer db if possible.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_namespace_internal.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view"},"created_at":1689033765.6522923,"compiled_sql":"\n\nWITH final AS (\n\n  SELECT DISTINCT \n    namespace_id AS ultimate_parent_namespace_id\n  FROM \"PROD\".legacy.internal_gitlab_namespaces\n  WHERE namespace_id IS NOT NULL\n\n)\n\n\nSELECT\n      *,\n      '@snalamaru'::VARCHAR       AS created_by,\n      '@pempey'::VARCHAR       AS updated_by,\n      '2020-12-29'::DATE        AS model_created_date,\n      '2023-01-31'::DATE        AS model_updated_date,\n      CURRENT_TIMESTAMP()               AS dbt_updated_at,\n\n    \n\n        \n\n            CURRENT_TIMESTAMP()               AS dbt_created_at\n\n        \n    \n    \n\n    FROM final","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_namespace_internal","label":"map_namespace_internal"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_GITLAB_DOTCOM_PLAN","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PLAN_SK":{"type":"TEXT","index":1,"name":"DIM_PLAN_SK","comment":null,"display_name":"dim_plan_sk"},"DIM_PLAN_ID":{"type":"NUMBER","index":2,"name":"dim_plan_id","comment":null,"description":"The id of the plan as given by GitLab.com","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_plan_id"},"PLAN_ID_MODIFIED":{"type":"NUMBER","index":3,"name":"plan_id_modified","comment":null,"description":"Modified plan id to conform legacy gold and silver plan ids to ultimate and premium plan ids.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_id_modified"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"PLAN_NAME":{"type":"TEXT","index":6,"name":"PLAN_NAME","comment":null,"display_name":"plan_name"},"PLAN_NAME_MODIFIED":{"type":"TEXT","index":7,"name":"plan_name_modified","comment":null,"description":"Modified plan name to conform legacy gold and silver plan names to ultimate and premium plan names.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_name_modified"},"PLAN_TITLE":{"type":"TEXT","index":8,"name":"PLAN_TITLE","comment":null,"display_name":"plan_title"},"PLAN_IS_PAID":{"type":"BOOLEAN","index":9,"name":"PLAN_IS_PAID","comment":null,"display_name":"plan_is_paid"},"CREATED_BY":{"type":"TEXT","index":10,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":11,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":12,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":13,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":15,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:53UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6144,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_gitlab_dotcom_plan","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_plans_source') }}\n  \n), renamed AS (\n\n    SELECT\n      {{ dbt_utils.surrogate_key(['plan_id'])}} AS dim_plan_sk,\n      plan_id AS dim_plan_id,\n      --Create calculated field to conform legacy silver and gold plan ids to premium and ultimate plan ids.\n      CASE \n        WHEN plan_id = 3 THEN 100\n        WHEN plan_id = 4 THEN 101\n        ELSE plan_id\n      END AS plan_id_modified,\n      created_at,\n      updated_at,\n      plan_name,\n      --Create calculated field to conform legacy silver and gold plan names to premium and ultimate plan names.\n      CASE \n        WHEN LOWER(plan_name) = 'silver' THEN 'premium'\n        WHEN LOWER(plan_name) = 'gold' THEN 'ultimate'\n        ELSE plan_name\n      END AS plan_name_modified,\n      plan_title,\n      plan_is_paid\n\n    FROM source\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"renamed\",\n    created_by=\"@mpeychet_\",\n    updated_by=\"@iweeks\",\n    created_date=\"2021-05-30\",\n    updated_date=\"2022-06-09\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_gitlab_dotcom_plan"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_gitlab_dotcom_plan.sql","original_file_path":"models/common_prep/prep_gitlab_dotcom_plan.sql","name":"prep_gitlab_dotcom_plan","alias":"prep_gitlab_dotcom_plan","checksum":{"name":"sha256","checksum":"b298743bbefe0e4dab3631322e7fd237187c474aeb94e785d55e7c223fbac5d7"},"tags":[],"refs":[["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the plans shared dimension and fact and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_gitlab_dotcom_plan.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.4973662,"compiled_sql":"$21","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_gitlab_dotcom_plan","label":"prep_gitlab_dotcom_plan"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_GITLAB_SUBSCRIPTIONS_SNAPSHOTS_NAMESPACE_ID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"GITLAB_SUBSCRIPTION_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"GITLAB_SUBSCRIPTION_SNAPSHOT_ID","comment":null,"display_name":"gitlab_subscription_snapshot_id"},"GITLAB_SUBSCRIPTION_ID":{"type":"NUMBER","index":2,"name":"GITLAB_SUBSCRIPTION_ID","comment":null,"display_name":"gitlab_subscription_id"},"GITLAB_SUBSCRIPTION_START_DATE":{"type":"DATE","index":3,"name":"GITLAB_SUBSCRIPTION_START_DATE","comment":null,"display_name":"gitlab_subscription_start_date"},"GITLAB_SUBSCRIPTION_END_DATE":{"type":"DATE","index":4,"name":"GITLAB_SUBSCRIPTION_END_DATE","comment":null,"display_name":"gitlab_subscription_end_date"},"GITLAB_SUBSCRIPTION_TRIAL_ENDS_ON":{"type":"DATE","index":5,"name":"GITLAB_SUBSCRIPTION_TRIAL_ENDS_ON","comment":null,"display_name":"gitlab_subscription_trial_ends_on"},"NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PLAN_ID":{"type":"NUMBER","index":7,"name":"PLAN_ID","comment":null,"display_name":"plan_id"},"MAX_SEATS_USED":{"type":"NUMBER","index":8,"name":"MAX_SEATS_USED","comment":null,"display_name":"max_seats_used"},"SEATS":{"type":"NUMBER","index":9,"name":"SEATS","comment":null,"display_name":"seats"},"IS_TRIAL":{"type":"BOOLEAN","index":10,"name":"IS_TRIAL","comment":null,"display_name":"is_trial"},"GITLAB_SUBSCRIPTION_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"GITLAB_SUBSCRIPTION_CREATED_AT","comment":null,"display_name":"gitlab_subscription_created_at"},"GITLAB_SUBSCRIPTION_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"GITLAB_SUBSCRIPTION_UPDATED_AT","comment":null,"display_name":"gitlab_subscription_updated_at"},"SEATS_IN_USE":{"type":"NUMBER","index":13,"name":"SEATS_IN_USE","comment":null,"display_name":"seats_in_use"},"SEATS_OWED":{"type":"NUMBER","index":14,"name":"SEATS_OWED","comment":null,"display_name":"seats_owed"},"TRIAL_EXTENSION_TYPE":{"type":"NUMBER","index":15,"name":"TRIAL_EXTENSION_TYPE","comment":null,"display_name":"trial_extension_type"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":16,"name":"VALID_FROM","comment":null,"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":17,"name":"VALID_TO","comment":null,"display_name":"valid_to"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 07:25UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":751253504,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","raw_sql":"$22","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.snapshots.gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots"]},"config":{"enabled":true,"alias":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id","schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","snapshots","base","gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/snapshots/base/gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base.sql","original_file_path":"models/legacy/snapshots/base/gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base.sql","name":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","alias":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id","checksum":{"name":"sha256","checksum":"8544ae90a543f6820955ee3b6cbe0f5674525fdb44c33759d8b35c2341a17976"},"tags":[],"refs":[],"sources":[["snapshots","gitlab_dotcom_gitlab_subscriptions_namespace_id_snapshots"]],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/snapshots/base/gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id"},"created_at":1689033719.3482537,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id","label":"gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_DATE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_ID":{"type":"NUMBER","index":1,"name":"date_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_id"},"DATE_DAY":{"type":"DATE","index":2,"name":"date_day","comment":null,"description":"Calendar date, e.g. '2019-02-02'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"date_day"},"DATE_ACTUAL":{"type":"DATE","index":3,"name":"date_actual","comment":null,"description":"Matches `date_day`, duplicated for ease of use","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"date_actual"},"DAY_NAME":{"type":"TEXT","index":4,"name":"day_name","comment":null,"description":"Abbreviated name of the day of the week, e.g. 'Sat' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_name"},"MONTH_ACTUAL":{"type":"NUMBER","index":5,"name":"month_actual","comment":null,"description":"Number for the calendar month of the year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_actual"},"YEAR_ACTUAL":{"type":"NUMBER","index":6,"name":"year_actual","comment":null,"description":"Calendar year, e.g. '2019' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"year_actual"},"QUARTER_ACTUAL":{"type":"NUMBER","index":7,"name":"quarter_actual","comment":null,"description":"Calendar quarter, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarter_actual"},"DAY_OF_WEEK":{"type":"NUMBER","index":8,"name":"day_of_week","comment":null,"description":"Number of the day of the week, with Sunday = 1 and Saturday = 7","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_week"},"FIRST_DAY_OF_WEEK":{"type":"DATE","index":9,"name":"first_day_of_week","comment":null,"description":"Calendar date of the first Sunday of that week, e.g. '2019-01-27' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_week"},"WEEK_OF_YEAR":{"type":"NUMBER","index":10,"name":"week_of_year","comment":null,"description":"Calendar week of year, e.g. '5' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"week_of_year"},"DAY_OF_MONTH":{"type":"NUMBER","index":11,"name":"day_of_month","comment":null,"description":"Day Number of the month, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_month"},"DAY_OF_QUARTER":{"type":"NUMBER","index":12,"name":"day_of_quarter","comment":null,"description":"Day Number from the start of the calendar quarter, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_quarter"},"DAY_OF_YEAR":{"type":"NUMBER","index":13,"name":"day_of_year","comment":null,"description":"Day Number from the start of the calendar year, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_year"},"FISCAL_YEAR":{"type":"NUMBER","index":14,"name":"fiscal_year","comment":null,"description":"Fiscal year for the date, e.g. '2020' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":15,"name":"fiscal_quarter","comment":null,"description":"Fiscal quarter for the date, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter"},"DAY_OF_FISCAL_QUARTER":{"type":"NUMBER","index":16,"name":"day_of_fiscal_quarter","comment":null,"description":"Day Number from the start of the fiscal quarter, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_fiscal_quarter"},"DAY_OF_FISCAL_YEAR":{"type":"NUMBER","index":17,"name":"day_of_fiscal_year","comment":null,"description":"Day Number from the start of the fiscal year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_fiscal_year"},"MONTH_NAME":{"type":"TEXT","index":18,"name":"month_name","comment":null,"description":"The full month name for any calendar month, e.g. 'February' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_name"},"FIRST_DAY_OF_MONTH":{"type":"DATE","index":19,"name":"first_day_of_month","comment":null,"description":"The first day of a calendar month, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_month"},"LAST_DAY_OF_MONTH":{"type":"DATE","index":20,"name":"last_day_of_month","comment":null,"description":"The last day of a calendar month, e.g. '2019-02-28' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_month"},"FIRST_DAY_OF_YEAR":{"type":"DATE","index":21,"name":"first_day_of_year","comment":null,"description":"The first day of a calendar year, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_year"},"LAST_DAY_OF_YEAR":{"type":"DATE","index":22,"name":"last_day_of_year","comment":null,"description":"The last day of a calendar year, e.g. '2019-12-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_year"},"FIRST_DAY_OF_QUARTER":{"type":"DATE","index":23,"name":"first_day_of_quarter","comment":null,"description":"The first day of a calendar quarter, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_quarter"},"LAST_DAY_OF_QUARTER":{"type":"DATE","index":24,"name":"last_day_of_quarter","comment":null,"description":"The last day of a calendar quarter, e.g. '2019-03-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_quarter"},"FIRST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":25,"name":"first_day_of_fiscal_quarter","comment":null,"description":"The first day of the fiscal quarter, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_quarter"},"LAST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":26,"name":"last_day_of_fiscal_quarter","comment":null,"description":"The last day of the fiscal quarter, e.g. '2019-04-30' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_fiscal_quarter"},"FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":27,"name":"first_day_of_fiscal_year","comment":null,"description":"The first day of the fiscal year, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_year"},"LAST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":28,"name":"last_day_of_fiscal_year","comment":null,"description":"The last day of the fiscal year, e.g. '2020-01-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_fiscal_year"},"WEEK_OF_FISCAL_YEAR":{"type":"NUMBER","index":29,"name":"week_of_fiscal_year","comment":null,"description":"The week number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"week_of_fiscal_year"},"MONTH_OF_FISCAL_YEAR":{"type":"NUMBER","index":30,"name":"month_of_fiscal_year","comment":null,"description":"The month number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_of_fiscal_year"},"LAST_DAY_OF_WEEK":{"type":"DATE","index":31,"name":"last_day_of_week","comment":null,"description":"The Saturday of the week, e.g. '2019-02-02' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_week"},"QUARTER_NAME":{"type":"TEXT","index":32,"name":"quarter_name","comment":null,"description":"The name of the calendar quarter, e.g. '2019-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarter_name"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":33,"name":"fiscal_quarter_name","comment":null,"description":"The name of the fiscal quarter, e.g '2020-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":34,"name":"fiscal_quarter_name_fy","comment":null,"description":"The name of the fiscal quarter, e.g 'FY20-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name_fy"},"FISCAL_QUARTER_NUMBER_ABSOLUTE":{"type":"NUMBER","index":35,"name":"fiscal_quarter_number_absolute","comment":null,"description":"Monotonically increasing integer for each fiscal quarter. This allows for comparing the relative order of fiscal quarters.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_number_absolute"},"FISCAL_MONTH_NAME":{"type":"TEXT","index":36,"name":"fiscal_month_name","comment":null,"description":"The name of the fiscal month, e.g '2020-Feb' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_month_name"},"FISCAL_MONTH_NAME_FY":{"type":"TEXT","index":37,"name":"fiscal_month_name_fy","comment":null,"description":"The name of the fiscal month, e.g 'FY20-Feb' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_month_name_fy"},"HOLIDAY_DESC":{"type":"TEXT","index":38,"name":"holiday_desc","comment":null,"description":"The name of the holiday, if applicable","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"holiday_desc"},"IS_HOLIDAY":{"type":"BOOLEAN","index":39,"name":"is_holiday","comment":null,"description":"Whether or not it is a holiday","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_holiday"},"LAST_MONTH_OF_FISCAL_QUARTER":{"type":"DATE","index":40,"name":"last_month_of_fiscal_quarter","comment":null,"description":"Date indicating last month of fiscal quarter e.g '2020-04-01' for 2020-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_month_of_fiscal_quarter"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER":{"type":"BOOLEAN","index":41,"name":"is_first_day_of_last_month_of_fiscal_quarter","comment":null,"description":"Flag indicating date that is the first day of last month of fiscal quarter. E.g TRUE for '2020-04-01'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_day_of_last_month_of_fiscal_quarter"},"LAST_MONTH_OF_FISCAL_YEAR":{"type":"DATE","index":42,"name":"last_month_of_fiscal_year","comment":null,"description":"Date indicating last month of fiscal year e.g '2021-01-01' for 2020-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_month_of_fiscal_year"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR":{"type":"BOOLEAN","index":43,"name":"is_first_day_of_last_month_of_fiscal_year","comment":null,"description":"Flag indicating date that is the first day of last month of fiscal year. E.g TRUE for '2021-01-01'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_day_of_last_month_of_fiscal_year"},"SNAPSHOT_DATE_FPA":{"type":"DATE","index":44,"name":"snapshot_date_fpa","comment":null,"description":"8th calendar day of a month used for FP&A snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date_fpa"},"SNAPSHOT_DATE_BILLINGS":{"type":"DATE","index":45,"name":"snapshot_date_billings","comment":null,"description":"45 calendar day after a month begins used for Billings snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date_billings"},"DAYS_IN_MONTH_COUNT":{"type":"NUMBER","index":46,"name":"days_in_month_count","comment":null,"description":"Number of calendar days in the given month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_in_month_count"},"WEEK_OF_MONTH_NORMALISED":{"type":"NUMBER","index":47,"name":"WEEK_OF_MONTH_NORMALISED","comment":null,"display_name":"week_of_month_normalised"},"DAY_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":48,"name":"DAY_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"day_of_fiscal_quarter_normalised"},"WEEK_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":49,"name":"WEEK_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"week_of_fiscal_quarter_normalised"},"DAY_OF_FISCAL_YEAR_NORMALISED":{"type":"NUMBER","index":50,"name":"DAY_OF_FISCAL_YEAR_NORMALISED","comment":null,"display_name":"day_of_fiscal_year_normalised"},"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK":{"type":"NUMBER","index":51,"name":"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK","comment":null,"display_name":"is_first_day_of_fiscal_quarter_week"},"DAYS_UNTIL_LAST_DAY_OF_MONTH":{"type":"NUMBER","index":52,"name":"DAYS_UNTIL_LAST_DAY_OF_MONTH","comment":null,"display_name":"days_until_last_day_of_month"},"CURRENT_DATE_ACTUAL":{"type":"DATE","index":53,"name":"CURRENT_DATE_ACTUAL","comment":null,"display_name":"current_date_actual"},"CURRENT_FISCAL_YEAR":{"type":"NUMBER","index":54,"name":"CURRENT_FISCAL_YEAR","comment":null,"display_name":"current_fiscal_year"},"CURRENT_FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":55,"name":"CURRENT_FIRST_DAY_OF_FISCAL_YEAR","comment":null,"display_name":"current_first_day_of_fiscal_year"},"CURRENT_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":56,"name":"CURRENT_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"current_fiscal_quarter_name_fy"},"CURRENT_FIRST_DAY_OF_MONTH":{"type":"DATE","index":57,"name":"CURRENT_FIRST_DAY_OF_MONTH","comment":null,"display_name":"current_first_day_of_month"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 23:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":837632,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_date","raw_sql":"{{ config({\n    \"alias\": \"dim_date\"\n}) }}\n\nWITH dates AS (\n\n  SELECT\n    {{ dbt_utils.star(\n           from=ref('prep_date'), \n           except=['CREATED_BY','UPDATED_BY','MODEL_CREATED_DATE','MODEL_UPDATED_DATE','DBT_UPDATED_AT','DBT_CREATED_AT']\n           ) \n      }}\n  FROM {{ ref('prep_date') }}\n\n), final AS (\n\n  SELECT\n    {{ get_date_id('date_actual') }}                                AS date_id,\n    *\n  FROM dates\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@msendal\",\n    updated_by=\"@pempey\",\n    created_date=\"2020-06-01\",\n    updated_date=\"2023-01-09\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date"]},"config":{"enabled":true,"alias":"dim_date","schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_date"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_date.sql","original_file_path":"models/common/dimensions_shared/dim_date.sql","name":"dim_date","alias":"dim_date","checksum":{"name":"sha256","checksum":"d2d82ff12c2a5541fc719664fdbab66bec108395c3e6b2549434b0f07c9bd080"},"tags":[],"refs":[["prep_date"],["prep_date"],["prep_date"],["prep_date"]],"sources":[],"metrics":[],"description":"Dimensional table representing both calendar year and fiscal year date details.\n\nThe grain of the table is a calendar day.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_date.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"dim_date"},"created_at":1689033750.6328864,"compiled_sql":"$24","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_date","label":"dim_date"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.simple_cte","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/simple_cte.sql","original_file_path":"macros/utils/simple_cte.sql","name":"simple_cte","macro_sql":"{% macro simple_cte(tuple_list) %}\n\nWITH{% for cte_ref in tuple_list %} {{cte_ref[0]}} AS (\n\n    SELECT * \n    FROM {{ ref(cte_ref[1]) }}\n\n)\n    {%- if not loop.last -%}\n    ,\n    {%- endif -%}\n    \n    {%- endfor -%}\n\n{%- endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"$25","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"tuple_list","type":"list","description":"List of tuples with the alias as the first item and the dbt table reference as the second item."}],"created_at":1689033766.0494742},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527},{"unique_id":"macro.dbt_utils.surrogate_key","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","name":"surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__surrogate_key"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033676.082154}]},"node":{"resource_type":"model","name":"gitlab_dotcom_namespace_lineage_historical_daily","unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L26",null,{"versions":{"Source":"$27","Compiled":"$28"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
