1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.dim_subscription","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.dim_subscription\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.dim_subscription","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.dim_subscription\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.dim_subscription","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
68:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T111c,{{ config({
    "tags": ["mnpi_exception"],
    "alias": "dim_subscription"
}) }}

WITH prep_amendment AS (

  SELECT *
  FROM {{ ref('prep_amendment') }}

), subscription AS (

    SELECT *
    FROM {{ ref('prep_subscription') }}

), subscription_opportunity_mapping AS (

    SELECT *
    FROM {{ ref('map_subscription_opportunity') }}

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM {{ ref('map_subscription_lineage') }}

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@michellecooper",
    created_date="2020-12-16",
    updated_date="2023-04-12"
) }}11:T11db,

WITH prep_amendment AS (

  SELECT *
  FROM "PROD".common_prep.prep_amendment

), subscription AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription

), subscription_opportunity_mapping AS (

    SELECT *
    FROM "PROD".common_mapping.map_subscription_opportunity

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM "PROD".common_mapping.map_subscription_lineage

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    

  COALESCE(prep_amendment.dim_amendment_id, MD5(-1)) 

                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-12-16'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final13:T2088,{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_crm_account', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_subscription', 'dim_subscription')
]) }}

, fct_mrr AS (

    SELECT *
    FROM {{ ref('fct_mrr') }}
    WHERE subscription_status IN ('Active', 'Cancelled')

), next_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      MIN(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id)    AS next_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)

), last_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      MAX(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id)    AS last_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month < DATE_TRUNC('month',CURRENT_DATE)

), parent_account_mrrs AS (

    SELECT
      dim_crm_account.dim_parent_crm_account_id,
      dim_date.date_actual                                      AS mrr_month,
      dateadd('year', 1, date_actual)                           AS retention_month,
      next_renewal_month,
      last_renewal_month,
      COUNT(DISTINCT dim_crm_account.dim_parent_crm_account_id)
                                                                AS parent_customer_count,
      SUM(ZEROIFNULL(mrr))                                      AS mrr_total,
      SUM(ZEROIFNULL(arr))                                      AS arr_total,
      SUM(ZEROIFNULL(quantity))                                 AS quantity_total,
      ARRAY_AGG(product_tier_name)                              AS product_category,
      MAX(product_ranking)                                      AS product_ranking
    FROM fct_mrr
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = fct_mrr.dim_crm_account_id
    LEFT JOIN next_renewal_month
      ON next_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
    LEFT JOIN last_renewal_month
      ON last_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    {{ dbt_utils.group_by(n=5) }}

), retention_subs AS (

    SELECT
      current_mrr.dim_parent_crm_account_id,
      current_mrr.mrr_month             AS current_mrr_month,
      current_mrr.retention_month,
      current_mrr.mrr_total             AS current_mrr,
      future_mrr.mrr_total              AS future_mrr,
      current_mrr.arr_total             AS current_arr,
      future_mrr.arr_total              AS future_arr,
      current_mrr.parent_customer_count AS current_parent_customer_count,
      future_mrr.parent_customer_count  AS future_parent_customer_count,
      current_mrr.quantity_total        AS current_quantity,
      future_mrr.quantity_total         AS future_quantity,
      current_mrr.product_category      AS current_product_category,
      future_mrr.product_category       AS future_product_category,
      current_mrr.product_ranking       AS current_product_ranking,
      future_mrr.product_ranking        AS future_product_ranking,
      current_mrr.last_renewal_month,
      current_mrr.next_renewal_month,
      --The type of arr change requires a row_number. Row_number = 1 indicates new in the macro; however, for retention, new is not a valid option since retention starts in month 12, well after the First Order transaction.
      2                              AS row_number
    FROM parent_account_mrrs AS current_mrr
    LEFT JOIN parent_account_mrrs AS future_mrr
      ON current_mrr.dim_parent_crm_account_id = future_mrr.dim_parent_crm_account_id
        AND current_mrr.retention_month = future_mrr.mrr_month

), final AS (

    SELECT
    {{ dbt_utils.surrogate_key(['retention_subs.dim_parent_crm_account_id','retention_month']) }}
                                                AS fct_retention_id,
      retention_subs.dim_parent_crm_account_id  AS dim_parent_crm_account_id,
      dim_crm_account.crm_account_name         AS parent_crm_account_name,
      retention_month,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS retention_fiscal_year,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS retention_fiscal_quarter,
      retention_subs.last_renewal_month,
      retention_subs.next_renewal_month,
      current_mrr                               AS prior_year_mrr,
      COALESCE(future_mrr, 0)                   AS net_retention_mrr,
      CASE WHEN net_retention_mrr > 0
        THEN least(net_retention_mrr, current_mrr)
        ELSE 0 END                              AS gross_retention_mrr,
      current_arr                               AS prior_year_arr,
      COALESCE(future_arr, 0)                   AS net_retention_arr,
      CASE WHEN net_retention_arr > 0
        THEN least(net_retention_arr, current_arr)
        ELSE 0 END                              AS gross_retention_arr,
      current_quantity                          AS prior_year_quantity,
      COALESCE(future_quantity, 0)              AS net_retention_quantity,
      current_parent_customer_count             AS prior_year_parent_customer_count,
      COALESCE(future_parent_customer_count, 0) AS net_retention_parent_customer_count,
      {{ reason_for_quantity_change_seat_change('net_retention_quantity', 'prior_year_quantity') }},
      future_product_category                   AS net_retention_product_category,
      current_product_category                  AS prior_year_product_category,
      future_product_ranking                    AS net_retention_product_ranking,
      current_product_ranking                   AS prior_year_product_ranking,
      {{ type_of_arr_change('net_retention_arr', 'prior_year_arr','row_number') }},
      {{ reason_for_arr_change_seat_change('net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }},
      {{ reason_for_arr_change_price_change('net_retention_product_category', 'prior_year_product_category', 'net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr', 'net_retention_product_ranking','prior_year_product_ranking') }},
      {{ reason_for_arr_change_tier_change('net_retention_product_ranking', 'prior_year_product_ranking', 'net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }},
      {{ annual_price_per_seat_change('net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }}
    FROM retention_subs
    INNER JOIN dim_date
      ON dim_date.date_actual = retention_subs.retention_month
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = retention_subs.dim_parent_crm_account_id
    WHERE retention_month <= dateadd(month, -1, CURRENT_DATE)

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@paul_armstrong",
    updated_by="@lisvinueza",
    created_date="2021-06-02",
    updated_date="2022-08-19"
) }}14:T26f3,

WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

)

, fct_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_mrr
    WHERE subscription_status IN ('Active', 'Cancelled')

), next_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      MIN(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id)    AS next_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)

), last_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      MAX(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id)    AS last_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month < DATE_TRUNC('month',CURRENT_DATE)

), parent_account_mrrs AS (

    SELECT
      dim_crm_account.dim_parent_crm_account_id,
      dim_date.date_actual                                      AS mrr_month,
      dateadd('year', 1, date_actual)                           AS retention_month,
      next_renewal_month,
      last_renewal_month,
      COUNT(DISTINCT dim_crm_account.dim_parent_crm_account_id)
                                                                AS parent_customer_count,
      SUM(ZEROIFNULL(mrr))                                      AS mrr_total,
      SUM(ZEROIFNULL(arr))                                      AS arr_total,
      SUM(ZEROIFNULL(quantity))                                 AS quantity_total,
      ARRAY_AGG(product_tier_name)                              AS product_category,
      MAX(product_ranking)                                      AS product_ranking
    FROM fct_mrr
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = fct_mrr.dim_crm_account_id
    LEFT JOIN next_renewal_month
      ON next_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
    LEFT JOIN last_renewal_month
      ON last_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    group by 1,2,3,4,5

), retention_subs AS (

    SELECT
      current_mrr.dim_parent_crm_account_id,
      current_mrr.mrr_month             AS current_mrr_month,
      current_mrr.retention_month,
      current_mrr.mrr_total             AS current_mrr,
      future_mrr.mrr_total              AS future_mrr,
      current_mrr.arr_total             AS current_arr,
      future_mrr.arr_total              AS future_arr,
      current_mrr.parent_customer_count AS current_parent_customer_count,
      future_mrr.parent_customer_count  AS future_parent_customer_count,
      current_mrr.quantity_total        AS current_quantity,
      future_mrr.quantity_total         AS future_quantity,
      current_mrr.product_category      AS current_product_category,
      future_mrr.product_category       AS future_product_category,
      current_mrr.product_ranking       AS current_product_ranking,
      future_mrr.product_ranking        AS future_product_ranking,
      current_mrr.last_renewal_month,
      current_mrr.next_renewal_month,
      --The type of arr change requires a row_number. Row_number = 1 indicates new in the macro; however, for retention, new is not a valid option since retention starts in month 12, well after the First Order transaction.
      2                              AS row_number
    FROM parent_account_mrrs AS current_mrr
    LEFT JOIN parent_account_mrrs AS future_mrr
      ON current_mrr.dim_parent_crm_account_id = future_mrr.dim_parent_crm_account_id
        AND current_mrr.retention_month = future_mrr.mrr_month

), final AS (

    SELECT
    md5(cast(coalesce(cast(retention_subs.dim_parent_crm_account_id as 
    varchar
), '') || '-' || coalesce(cast(retention_month as 
    varchar
), '') as 
    varchar
))
                                                AS fct_retention_id,
      retention_subs.dim_parent_crm_account_id  AS dim_parent_crm_account_id,
      dim_crm_account.crm_account_name         AS parent_crm_account_name,
      retention_month,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS retention_fiscal_year,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS retention_fiscal_quarter,
      retention_subs.last_renewal_month,
      retention_subs.next_renewal_month,
      current_mrr                               AS prior_year_mrr,
      COALESCE(future_mrr, 0)                   AS net_retention_mrr,
      CASE WHEN net_retention_mrr > 0
        THEN least(net_retention_mrr, current_mrr)
        ELSE 0 END                              AS gross_retention_mrr,
      current_arr                               AS prior_year_arr,
      COALESCE(future_arr, 0)                   AS net_retention_arr,
      CASE WHEN net_retention_arr > 0
        THEN least(net_retention_arr, current_arr)
        ELSE 0 END                              AS gross_retention_arr,
      current_quantity                          AS prior_year_quantity,
      COALESCE(future_quantity, 0)              AS net_retention_quantity,
      current_parent_customer_count             AS prior_year_parent_customer_count,
      COALESCE(future_parent_customer_count, 0) AS net_retention_parent_customer_count,
      CASE
     WHEN prior_year_quantity != net_retention_quantity
     THEN net_retention_quantity - prior_year_quantity
     ELSE 0
    END                AS seat_change_quantity,
      future_product_category                   AS net_retention_product_category,
      current_product_category                  AS prior_year_product_category,
      future_product_ranking                    AS net_retention_product_ranking,
      current_product_ranking                   AS prior_year_product_ranking,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN net_retention_arr = 0 AND prior_year_arr > 0
       THEN 'Churn'
     WHEN net_retention_arr < prior_year_arr AND net_retention_arr > 0
       THEN 'Contraction'
     WHEN net_retention_arr > prior_year_arr AND row_number > 1
       THEN 'Expansion'
     WHEN net_retention_arr = prior_year_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change,
      CASE
      WHEN prior_year_quantity != net_retention_quantity AND prior_year_quantity > 0
        THEN ZEROIFNULL(prior_year_arr /NULLIF(prior_year_quantity,0) * (net_retention_quantity - prior_year_quantity))
      WHEN prior_year_quantity != net_retention_quantity AND prior_year_quantity = 0
        THEN net_retention_arr
      ELSE 0
    END                AS seat_change_arr,
      ZEROIFNULL(
           CASE
             WHEN prior_year_product_category = net_retention_product_category
               THEN net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0))
             WHEN prior_year_product_category != net_retention_product_category AND prior_year_product_ranking = net_retention_product_ranking
               THEN net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr,
      CASE
      WHEN prior_year_product_ranking != net_retention_product_ranking
      THEN ZEROIFNULL(net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0)))
      ELSE 0
    END                   AS tier_change_arr,
      ZEROIFNULL(( net_retention_arr / NULLIF(net_retention_quantity,0) ) - ( prior_year_arr / NULLIF(prior_year_quantity,0))) AS annual_price_per_seat_change
    FROM retention_subs
    INNER JOIN dim_date
      ON dim_date.date_actual = retention_subs.retention_month
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = retention_subs.dim_parent_crm_account_id
    WHERE retention_month <= dateadd(month, -1, CURRENT_DATE)

)

SELECT
      *,
      '@paul_armstrong'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-06-02'::DATE        AS model_created_date,
      '2022-08-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final15:T2450,WITH dim_billing_account AS (

    SELECT *
    FROM {{ ref('dim_billing_account') }}

), dim_crm_account AS (

    SELECT *
    FROM {{ ref('dim_crm_account') }}

), dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), dim_product_detail AS (

    SELECT *
    FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}

), fct_mrr AS (

    SELECT *
    FROM {{ ref('fct_mrr') }}
    WHERE subscription_status IN ('Active', 'Cancelled')

), mart_arr AS (

    SELECT
      dim_date.date_actual                                                                          AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL)               AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)                             AS fiscal_year,
      dim_crm_account.parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id,
      COALESCE(dim_crm_account.merged_to_account_id, dim_crm_account.dim_crm_account_id)            AS dim_crm_account_id,
      dim_subscription.subscription_name,
      dim_subscription.dim_subscription_id                                                          AS subscription_id,
      dim_product_detail.product_tier_name                                                          AS product_category,
      dim_product_detail.product_delivery_type                                                      AS delivery,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    {{ dbt_utils.group_by(n=5) }}

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      dim_date.date_actual         AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_subscription_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      base.dim_crm_account_id,
      base.subscription_name,
      base.subscription_id,
      ARRAY_AGG(DISTINCT product_category) WITHIN GROUP (ORDER BY product_category ASC)       AS product_category,
      ARRAY_AGG(DISTINCT delivery) WITHIN GROUP (ORDER BY delivery ASC)                       AS delivery,
      MAX(product_ranking)                                                                    AS product_ranking,
      SUM(ZEROIFNULL(quantity))                                                               AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                 AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.subscription_id = mart_arr.subscription_id
    {{ dbt_utils.group_by(n=6) }}

), prior_month AS (

    SELECT
      monthly_arr_subscription_level.*,
      LAG(product_category) OVER (PARTITION BY subscription_id ORDER BY arr_month) AS previous_product_category,
      LAG(delivery) OVER (PARTITION BY subscription_id ORDER BY arr_month) AS previous_delivery,
      COALESCE(LAG(product_ranking) OVER (PARTITION BY subscription_id ORDER BY arr_month),0) AS previous_product_ranking,
      COALESCE(LAG(quantity) OVER (PARTITION BY subscription_id ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY subscription_id ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY subscription_id ORDER BY arr_month) AS row_number
    FROM monthly_arr_subscription_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      {{ type_of_arr_change('arr','previous_arr','row_number') }}
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      subscription_id,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      {{ reason_for_arr_change_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      {{ reason_for_quantity_change_seat_change('quantity', 'previous_quantity') }}
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      subscription_id,
      {{ reason_for_arr_change_price_change('product_category', 'previous_product_category', 'quantity', 'previous_quantity', 'arr', 'previous_arr', 'product_ranking',' previous_product_ranking') }}
    FROM type_of_arr_change

), reason_for_arr_change_tier_change AS (

    SELECT
      arr_month,
      subscription_id,
      {{ reason_for_arr_change_tier_change('product_ranking', 'previous_product_ranking', 'quantity', 'previous_quantity', 'arr', 'previous_arr') }}
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      subscription_id,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      {{ annual_price_per_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }}
    FROM type_of_arr_change

), combined AS (

    SELECT
      {{ dbt_utils.surrogate_key(['type_of_arr_change.arr_month', 'type_of_arr_change.subscription_id']) }}
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.dim_crm_account_id,
      type_of_arr_change.subscription_name,
      type_of_arr_change.subscription_id,
      type_of_arr_change.product_category,
      type_of_arr_change.previous_product_category                  AS previous_month_product_category,
      type_of_arr_change.delivery,
      type_of_arr_change.previous_delivery                          AS previous_month_delivery,
      type_of_arr_change.product_ranking,
      type_of_arr_change.previous_product_ranking                   AS previous_month_product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_tier_change.tier_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.subscription_id = reason_for_arr_change_beg.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_seat_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_price_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
    LEFT JOIN reason_for_arr_change_tier_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_tier_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_tier_change.arr_month
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.subscription_id = reason_for_arr_change_end.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.subscription_id = annual_price_per_seat_change.subscription_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month

)

SELECT *
FROM combined16:T287b,WITH dim_billing_account AS (

    SELECT *
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription

), fct_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_mrr
    WHERE subscription_status IN ('Active', 'Cancelled')

), mart_arr AS (

    SELECT
      dim_date.date_actual                                                                          AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL)               AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)                             AS fiscal_year,
      dim_crm_account.parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id,
      COALESCE(dim_crm_account.merged_to_account_id, dim_crm_account.dim_crm_account_id)            AS dim_crm_account_id,
      dim_subscription.subscription_name,
      dim_subscription.dim_subscription_id                                                          AS subscription_id,
      dim_product_detail.product_tier_name                                                          AS product_category,
      dim_product_detail.product_delivery_type                                                      AS delivery,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    group by 1,2,3,4,5

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      dim_date.date_actual         AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_subscription_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      base.dim_crm_account_id,
      base.subscription_name,
      base.subscription_id,
      ARRAY_AGG(DISTINCT product_category) WITHIN GROUP (ORDER BY product_category ASC)       AS product_category,
      ARRAY_AGG(DISTINCT delivery) WITHIN GROUP (ORDER BY delivery ASC)                       AS delivery,
      MAX(product_ranking)                                                                    AS product_ranking,
      SUM(ZEROIFNULL(quantity))                                                               AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                 AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.subscription_id = mart_arr.subscription_id
    group by 1,2,3,4,5,6

), prior_month AS (

    SELECT
      monthly_arr_subscription_level.*,
      LAG(product_category) OVER (PARTITION BY subscription_id ORDER BY arr_month) AS previous_product_category,
      LAG(delivery) OVER (PARTITION BY subscription_id ORDER BY arr_month) AS previous_delivery,
      COALESCE(LAG(product_ranking) OVER (PARTITION BY subscription_id ORDER BY arr_month),0) AS previous_product_ranking,
      COALESCE(LAG(quantity) OVER (PARTITION BY subscription_id ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY subscription_id ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY subscription_id ORDER BY arr_month) AS row_number
    FROM monthly_arr_subscription_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN arr = 0 AND previous_arr > 0
       THEN 'Churn'
     WHEN arr < previous_arr AND arr > 0
       THEN 'Contraction'
     WHEN arr > previous_arr AND row_number > 1
       THEN 'Expansion'
     WHEN arr = previous_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      subscription_id,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      CASE
      WHEN previous_quantity != quantity AND previous_quantity > 0
        THEN ZEROIFNULL(previous_arr /NULLIF(previous_quantity,0) * (quantity - previous_quantity))
      WHEN previous_quantity != quantity AND previous_quantity = 0
        THEN arr
      ELSE 0
    END                AS seat_change_arr,
      CASE
     WHEN previous_quantity != quantity
     THEN quantity - previous_quantity
     ELSE 0
    END                AS seat_change_quantity
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      subscription_id,
      ZEROIFNULL(
           CASE
             WHEN previous_product_category = product_category
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             WHEN previous_product_category != product_category AND  previous_product_ranking = product_ranking
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr
    FROM type_of_arr_change

), reason_for_arr_change_tier_change AS (

    SELECT
      arr_month,
      subscription_id,
      CASE
      WHEN previous_product_ranking != product_ranking
      THEN ZEROIFNULL(quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0)))
      ELSE 0
    END                   AS tier_change_arr
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      subscription_id,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      ZEROIFNULL(( arr / NULLIF(quantity,0) ) - ( previous_arr / NULLIF(previous_quantity,0))) AS annual_price_per_seat_change
    FROM type_of_arr_change

), combined AS (

    SELECT
      md5(cast(coalesce(cast(type_of_arr_change.arr_month as 
    varchar
), '') || '-' || coalesce(cast(type_of_arr_change.subscription_id as 
    varchar
), '') as 
    varchar
))
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.dim_crm_account_id,
      type_of_arr_change.subscription_name,
      type_of_arr_change.subscription_id,
      type_of_arr_change.product_category,
      type_of_arr_change.previous_product_category                  AS previous_month_product_category,
      type_of_arr_change.delivery,
      type_of_arr_change.previous_delivery                          AS previous_month_delivery,
      type_of_arr_change.product_ranking,
      type_of_arr_change.previous_product_ranking                   AS previous_month_product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_tier_change.tier_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.subscription_id = reason_for_arr_change_beg.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_seat_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_price_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
    LEFT JOIN reason_for_arr_change_tier_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_tier_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_tier_change.arr_month
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.subscription_id = reason_for_arr_change_end.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.subscription_id = annual_price_per_seat_change.subscription_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month

)

SELECT *
FROM combined17:T2648,WITH dim_amendment AS (

  SELECT *
  FROM {{ ref('dim_amendment') }}

), dim_billing_account AS (

  SELECT *
  FROM {{ ref('dim_billing_account') }}

), dim_charge AS (

  SELECT *
  FROM {{ ref('dim_charge') }}

), dim_crm_account AS (

  SELECT *
  FROM {{ ref('dim_crm_account') }}

), dim_product_detail AS (

  SELECT *
  FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

  SELECT *
  FROM {{ ref('dim_subscription') }}

), fct_charge AS (

    SELECT *
    FROM {{ ref('wip_fct_charge') }}

), mart_charge AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id,

      --Natural Key
      dim_charge.subscription_name,
      dim_charge.subscription_version,
      dim_charge.rate_plan_charge_number,
      dim_charge.rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment,

      --Charge Information
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_geo                                          AS parent_crm_account_geo,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,

      --Amendment Information
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.estimated_total_future_billings

    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    ORDER BY dim_crm_account.dim_parent_crm_account_id, dim_crm_account.dim_crm_account_id, fct_charge.subscription_name,
      fct_charge.subscription_version, fct_charge.rate_plan_charge_number, fct_charge.rate_plan_charge_version,
      fct_charge.rate_plan_charge_segment

)

{{ dbt_audit(
    cte_ref="mart_charge",
    created_by="@iweeks",
    updated_by="@lisvinueza",
    created_date="2021-05-10",
    updated_date="2023-05-22"
) }}18:T277b,WITH dim_amendment AS (

  SELECT *
  FROM "PROD".common.dim_amendment

), dim_billing_account AS (

  SELECT *
  FROM "PROD".common.dim_billing_account

), dim_charge AS (

  SELECT *
  FROM "PROD".restricted_safe_common.dim_charge

), dim_crm_account AS (

  SELECT *
  FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

  SELECT *
  FROM "PROD".common.dim_product_detail

), dim_subscription AS (

  SELECT *
  FROM "PROD".common.dim_subscription

), fct_charge AS (

    SELECT *
    FROM "PROD".restricted_safe_workspace_finance.wip_fct_charge

), mart_charge AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id,

      --Natural Key
      dim_charge.subscription_name,
      dim_charge.subscription_version,
      dim_charge.rate_plan_charge_number,
      dim_charge.rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment,

      --Charge Information
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_geo                                          AS parent_crm_account_geo,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,

      --Amendment Information
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.estimated_total_future_billings

    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    ORDER BY dim_crm_account.dim_parent_crm_account_id, dim_crm_account.dim_crm_account_id, fct_charge.subscription_name,
      fct_charge.subscription_version, fct_charge.rate_plan_charge_number, fct_charge.rate_plan_charge_version,
      fct_charge.rate_plan_charge_segment

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-05-10'::DATE        AS model_created_date,
      '2023-05-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM mart_charge19:T24de,{{ config(
    tags=["mnpi_exception"]
) }}

{{
  config({
      "materialized": "incremental",
      "unique_key": "primary_key",
      "full_refresh": false
      
  })
}}

{{ simple_cte([
  ('product_data_detection_rule_3', 'product_data_detection_rule_3'),
  ('dim_host_instance_type', 'dim_host_instance_type'),
  ('dim_license', 'dim_license'),
  ('dim_subscription', 'dim_subscription'),
  ('map_license_subscription_account', 'map_license_subscription_account'),
  ('fct_mrr', 'fct_mrr'),
  ('dim_product_detail', 'dim_product_detail'),
  ('dim_subscription', 'dim_subscription')
])}}

, rule_run_date AS (

   SELECT DISTINCT
     date_day AS rule_run_date,
     'Product' AS type_of_data
    FROM {{ ref('dim_date') }}
    WHERE rule_run_date BETWEEN '2021-06-23' AND TO_DATE(dbt_updated_at) --date when the code would be pushed to Production,we would be joining this with the dbt updated data for the models.

), bdg_namespace_order_subscription AS (
 
    SELECT *
    FROM {{ ref('bdg_namespace_order_subscription') }}
    WHERE is_subscription_active = 'Y'

), self_managed_subs_with_licenses AS (
  
    SELECT DISTINCT
      fct_mrr.dim_subscription_id,
      dim_subscription.subscription_name,
      IFF(dim_license.license_start_date > CURRENT_DATE, TRUE, FALSE)                    AS is_license_start_date_future,
      IFF(dim_license.license_start_date > dim_license.license_expire_date, TRUE, FALSE) AS is_license_start_date_greater_expire_date,
      fct_mrr.dbt_updated_at
    FROM fct_mrr
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    LEFT JOIN dim_product_detail
      ON fct_mrr.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    LEFT JOIN dim_license
      ON dim_subscription.dim_subscription_id = dim_license.dim_subscription_id
    WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
      AND dim_subscription.subscription_start_date <= CURRENT_DATE
  
), expired_licenses_with_subs AS (

    SELECT DISTINCT
      dim_subscription.dim_subscription_id, 
      dim_license.dim_license_id, 
      dim_license.license_start_date,
      dim_license.License_expire_date, 
      dim_subscription.subscription_start_date,
      dim_subscription.subscription_end_date,
      IFF(dim_license.license_expire_date <= CURRENT_DATE AND dim_subscription.subscription_end_date <= CURRENT_DATE,
        TRUE,
        FALSE)  AS is_license_expired_with_sub_end_date_past,
      dim_license.dbt_updated_at
    FROM dim_license 
    LEFT JOIN dim_subscription
      ON dim_license.dim_subscription_id  = dim_subscription.dim_subscription_id
    WHERE license_expire_date <= CURRENT_DATE

), processed_passed_failed_record_count AS (

--Missing instance types for UUID or Namespaces
    SELECT 
      1                                                                    AS rule_id,
      (COUNT(DISTINCT(instance_uuid)) + COUNT(DISTINCT(namespace_id)))     AS processed_record_count,
      (SELECT COUNT(DISTINCT(IFNULL(instance_uuid, namespace_id ))) 
        FROM dim_host_instance_type
        WHERE instance_type NOT IN ('Unknown'))                            AS passed_record_count,
      (processed_record_count - passed_record_count)                       AS failed_record_count,
      dbt_updated_at                                                       AS run_date    
    FROM dim_host_instance_type
    GROUP BY run_date

  UNION 

--Licenses with missing Subscriptions
    SELECT 
      2                                                                                                AS rule_id,
      COUNT(DISTINCT(dim_license_id))                                                                  AS processed_record_count,
      (SELECT COUNT(DISTINCT(dim_license_id)) FROM dim_license WHERE dim_subscription_id IS NOT NULL)  AS passed_record_count,
      (SELECT COUNT(DISTINCT(dim_license_id)) FROM dim_license WHERE dim_subscription_id IS NULL)      AS failed_record_count,
      dbt_updated_at                                                                                   AS run_date
    FROM dim_license
    GROUP BY run_date

  UNION

--Subscriptions with missing Licenses
    SELECT 
      3                                                                                                                AS rule_id,
      COUNT(DISTINCT(subscription_name))                                                                               AS processed_record_count,
      (SELECT COUNT(DISTINCT(subscription_name)) FROM product_data_detection_rule_3 WHERE dim_license_id IS NOT NULL)  AS passed_record_count,
      (SELECT COUNT(DISTINCT(subscription_name)) FROM product_data_detection_rule_3 WHERE dim_license_id IS NULL)      AS failed_record_count,
      dbt_updated_at                                                                                                   AS run_date
    FROM product_data_detection_rule_3
    GROUP BY run_date
  
  UNION

--Subscriptions with Self-Managed Plans having License Start dates in the future
    SELECT 
      4                                                                                                            AS rule_id,
      COUNT(DISTINCT(dim_subscription_id))                                                                         AS processed_record_count,
      COUNT(DISTINCT(dim_subscription_id)) - COUNT(DISTINCT IFF(is_license_start_date_future, dim_subscription_id, NULL))
                                                                                                                   AS passed_record_count,
      COUNT(DISTINCT IFF(is_license_start_date_future, dim_subscription_id, NULL))                                 AS failed_record_count,
      dbt_updated_at                                                                                               AS run_date
    FROM self_managed_subs_with_licenses
    GROUP BY run_date

  UNION 

--Subscriptions with Self-Managed Plans having License Start Date greater than License Expire date
    SELECT 
      5                                                                                                                   AS rule_id,
      COUNT(DISTINCT(dim_subscription_id))                                                                                AS processed_record_count,
      COUNT(DISTINCT(dim_subscription_id)) - COUNT(DISTINCT IFF(is_license_start_date_greater_expire_date, dim_subscription_id, NULL))
                                                                                                                          AS passed_record_count,
      COUNT(DISTINCT IFF(is_license_start_date_greater_expire_date, dim_subscription_id, NULL))                           AS failed_record_count,
      dbt_updated_at                                                                                                      AS run_date
    FROM self_managed_subs_with_licenses 
    GROUP BY run_date

  UNION

--Expired License IDs with Subscription End Dates in the Past
    SELECT 
        6                                                                                                                    AS rule_id,
        COUNT(DISTINCT(dim_license_id))                                                                                      AS processed_record_count,
        SUM(IFF(is_license_expired_with_sub_end_date_past, 0, 1))                                                            AS passed_record_count,
        SUM(IFF(is_license_expired_with_sub_end_date_past, 1, 0))                                                            AS failed_record_count,
        dbt_updated_at                                                                                                       AS run_date
    FROM expired_licenses_with_subs 
    GROUP BY run_date

  UNION

--SaaS Subscriptions Not Mapped to Namespaces
    SELECT 
       7                                                                                                    AS rule_id,
       COUNT(DISTINCT(dim_subscription_id))                                                                 AS processed_record_count,
       COUNT(DISTINCT IFF(dim_subscription_id IS NOT NULL AND dim_namespace_id IS NOT NULL,
          dim_subscription_id,
          NULL))                                                                                            AS passed_record_count,
       (processed_record_count - passed_record_count)                                                       AS failed_record_count,
       dbt_updated_at                                                                                       AS run_date
    FROM bdg_namespace_order_subscription 
    GROUP BY run_date

), final AS (

    SELECT
      --primary_key
      {{ dbt_utils.surrogate_key(['rule_run_date.rule_run_date', 'processed_passed_failed_record_count.rule_id']) }} AS primary_key,

      --Detection Rule record counts
      rule_id,
      processed_record_count,
      passed_record_count,
      failed_record_count,
      rule_run_date.rule_run_date,
      type_of_data
    FROM processed_passed_failed_record_count  
    RIGHT OUTER JOIN rule_run_date
      ON TO_DATE(processed_passed_failed_record_count.run_date) = rule_run_date.rule_run_date

) 

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@jpguero",
    created_date="2021-06-16",
    updated_date="2023-03-13"
) }}1a:T26ba,





WITH product_data_detection_rule_3 AS (

    SELECT * 
    FROM "PROD".data_quality.product_data_detection_rule_3

), dim_host_instance_type AS (

    SELECT * 
    FROM "PROD".common.dim_host_instance_type

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), map_license_subscription_account AS (

    SELECT * 
    FROM "PROD".common_mapping.map_license_subscription_account

), fct_mrr AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

)

, rule_run_date AS (

   SELECT DISTINCT
     date_day AS rule_run_date,
     'Product' AS type_of_data
    FROM "PROD".common.dim_date
    WHERE rule_run_date BETWEEN '2021-06-23' AND TO_DATE(dbt_updated_at) --date when the code would be pushed to Production,we would be joining this with the dbt updated data for the models.

), bdg_namespace_order_subscription AS (
 
    SELECT *
    FROM "PROD".common.bdg_namespace_order_subscription
    WHERE is_subscription_active = 'Y'

), self_managed_subs_with_licenses AS (
  
    SELECT DISTINCT
      fct_mrr.dim_subscription_id,
      dim_subscription.subscription_name,
      IFF(dim_license.license_start_date > CURRENT_DATE, TRUE, FALSE)                    AS is_license_start_date_future,
      IFF(dim_license.license_start_date > dim_license.license_expire_date, TRUE, FALSE) AS is_license_start_date_greater_expire_date,
      fct_mrr.dbt_updated_at
    FROM fct_mrr
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    LEFT JOIN dim_product_detail
      ON fct_mrr.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    LEFT JOIN dim_license
      ON dim_subscription.dim_subscription_id = dim_license.dim_subscription_id
    WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
      AND dim_subscription.subscription_start_date <= CURRENT_DATE
  
), expired_licenses_with_subs AS (

    SELECT DISTINCT
      dim_subscription.dim_subscription_id, 
      dim_license.dim_license_id, 
      dim_license.license_start_date,
      dim_license.License_expire_date, 
      dim_subscription.subscription_start_date,
      dim_subscription.subscription_end_date,
      IFF(dim_license.license_expire_date <= CURRENT_DATE AND dim_subscription.subscription_end_date <= CURRENT_DATE,
        TRUE,
        FALSE)  AS is_license_expired_with_sub_end_date_past,
      dim_license.dbt_updated_at
    FROM dim_license 
    LEFT JOIN dim_subscription
      ON dim_license.dim_subscription_id  = dim_subscription.dim_subscription_id
    WHERE license_expire_date <= CURRENT_DATE

), processed_passed_failed_record_count AS (

--Missing instance types for UUID or Namespaces
    SELECT 
      1                                                                    AS rule_id,
      (COUNT(DISTINCT(instance_uuid)) + COUNT(DISTINCT(namespace_id)))     AS processed_record_count,
      (SELECT COUNT(DISTINCT(IFNULL(instance_uuid, namespace_id ))) 
        FROM dim_host_instance_type
        WHERE instance_type NOT IN ('Unknown'))                            AS passed_record_count,
      (processed_record_count - passed_record_count)                       AS failed_record_count,
      dbt_updated_at                                                       AS run_date    
    FROM dim_host_instance_type
    GROUP BY run_date

  UNION 

--Licenses with missing Subscriptions
    SELECT 
      2                                                                                                AS rule_id,
      COUNT(DISTINCT(dim_license_id))                                                                  AS processed_record_count,
      (SELECT COUNT(DISTINCT(dim_license_id)) FROM dim_license WHERE dim_subscription_id IS NOT NULL)  AS passed_record_count,
      (SELECT COUNT(DISTINCT(dim_license_id)) FROM dim_license WHERE dim_subscription_id IS NULL)      AS failed_record_count,
      dbt_updated_at                                                                                   AS run_date
    FROM dim_license
    GROUP BY run_date

  UNION

--Subscriptions with missing Licenses
    SELECT 
      3                                                                                                                AS rule_id,
      COUNT(DISTINCT(subscription_name))                                                                               AS processed_record_count,
      (SELECT COUNT(DISTINCT(subscription_name)) FROM product_data_detection_rule_3 WHERE dim_license_id IS NOT NULL)  AS passed_record_count,
      (SELECT COUNT(DISTINCT(subscription_name)) FROM product_data_detection_rule_3 WHERE dim_license_id IS NULL)      AS failed_record_count,
      dbt_updated_at                                                                                                   AS run_date
    FROM product_data_detection_rule_3
    GROUP BY run_date
  
  UNION

--Subscriptions with Self-Managed Plans having License Start dates in the future
    SELECT 
      4                                                                                                            AS rule_id,
      COUNT(DISTINCT(dim_subscription_id))                                                                         AS processed_record_count,
      COUNT(DISTINCT(dim_subscription_id)) - COUNT(DISTINCT IFF(is_license_start_date_future, dim_subscription_id, NULL))
                                                                                                                   AS passed_record_count,
      COUNT(DISTINCT IFF(is_license_start_date_future, dim_subscription_id, NULL))                                 AS failed_record_count,
      dbt_updated_at                                                                                               AS run_date
    FROM self_managed_subs_with_licenses
    GROUP BY run_date

  UNION 

--Subscriptions with Self-Managed Plans having License Start Date greater than License Expire date
    SELECT 
      5                                                                                                                   AS rule_id,
      COUNT(DISTINCT(dim_subscription_id))                                                                                AS processed_record_count,
      COUNT(DISTINCT(dim_subscription_id)) - COUNT(DISTINCT IFF(is_license_start_date_greater_expire_date, dim_subscription_id, NULL))
                                                                                                                          AS passed_record_count,
      COUNT(DISTINCT IFF(is_license_start_date_greater_expire_date, dim_subscription_id, NULL))                           AS failed_record_count,
      dbt_updated_at                                                                                                      AS run_date
    FROM self_managed_subs_with_licenses 
    GROUP BY run_date

  UNION

--Expired License IDs with Subscription End Dates in the Past
    SELECT 
        6                                                                                                                    AS rule_id,
        COUNT(DISTINCT(dim_license_id))                                                                                      AS processed_record_count,
        SUM(IFF(is_license_expired_with_sub_end_date_past, 0, 1))                                                            AS passed_record_count,
        SUM(IFF(is_license_expired_with_sub_end_date_past, 1, 0))                                                            AS failed_record_count,
        dbt_updated_at                                                                                                       AS run_date
    FROM expired_licenses_with_subs 
    GROUP BY run_date

  UNION

--SaaS Subscriptions Not Mapped to Namespaces
    SELECT 
       7                                                                                                    AS rule_id,
       COUNT(DISTINCT(dim_subscription_id))                                                                 AS processed_record_count,
       COUNT(DISTINCT IFF(dim_subscription_id IS NOT NULL AND dim_namespace_id IS NOT NULL,
          dim_subscription_id,
          NULL))                                                                                            AS passed_record_count,
       (processed_record_count - passed_record_count)                                                       AS failed_record_count,
       dbt_updated_at                                                                                       AS run_date
    FROM bdg_namespace_order_subscription 
    GROUP BY run_date

), final AS (

    SELECT
      --primary_key
      md5(cast(coalesce(cast(rule_run_date.rule_run_date as 
    varchar
), '') || '-' || coalesce(cast(processed_passed_failed_record_count.rule_id as 
    varchar
), '') as 
    varchar
)) AS primary_key,

      --Detection Rule record counts
      rule_id,
      processed_record_count,
      passed_record_count,
      failed_record_count,
      rule_run_date.rule_run_date,
      type_of_data
    FROM processed_passed_failed_record_count  
    RIGHT OUTER JOIN rule_run_date
      ON TO_DATE(processed_passed_failed_record_count.run_date) = rule_run_date.rule_run_date

) 

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@jpguero'::VARCHAR       AS updated_by,
      '2021-06-16'::DATE        AS model_created_date,
      '2023-03-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM final1b:T39f2,{{config({
    "materialized": "table",
    "transient": false
  })
}}

{{ simple_cte([
    ('dim_amendment','dim_amendment'),
    ('dim_billing_account','dim_billing_account'),
    ('dim_charge','dim_charge'),
    ('dim_crm_account','dim_crm_account'),
    ('dim_product_detail','dim_product_detail'),
    ('dim_subscription','dim_subscription'),
    ('dim_crm_user','dim_crm_user'),
    ('dim_order', 'dim_order'),
    ('dim_order_action', 'dim_order_action'),
    ('fct_charge','fct_charge'),
    ('prep_billing_account_user', 'prep_billing_account_user')
]) }}

, mart_charge AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id                                                        AS dim_charge_id,

      --Natural Key
      dim_charge.subscription_name                                                    AS subscription_name,
      dim_charge.subscription_version                                                 AS subscription_version,
      dim_charge.rate_plan_charge_number                                              AS rate_plan_charge_number,
      dim_charge.rate_plan_charge_version                                             AS rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment                                             AS rate_plan_charge_segment,

      --Charge Information
      dim_charge.rate_plan_name                                                       AS rate_plan_name,
      dim_charge.rate_plan_charge_name                                                AS rate_plan_charge_name,
      dim_charge.rate_plan_charge_description                                         AS rate_plan_charge_description,
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.created_by_id                                                  AS subscription_created_by_id,
      dim_subscription.updated_by_id                                                  AS subscription_updated_by_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.term_start_date,
      dim_subscription.term_end_date,
      dim_subscription.term_start_month,
      dim_subscription.term_end_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_user.dim_crm_user_id                                                    AS dim_crm_user_id,
      dim_crm_user.crm_user_sales_segment                                             AS crm_user_sales_segment,
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      -- order info
      fct_charge.dim_order_id                                                         AS dim_order_id,
      CASE
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_name = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_type = 'Composite')
            THEN 'Auto-Renewal'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (prep_billing_account_user.user_name = 'svc_ZuoraSFDC_integration@gitlab.com'
          OR dim_subscription.subscription_sales_type = 'Sales-Assisted')
            THEN 'Sales-Assisted'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description NOT IN 
            ('AutoRenew by CustomersDot', 'Automated seat reconciliation')
            OR dim_order.order_description IS NULL)
          AND prep_billing_account_user.user_name IN (
            'svc_zuora_fulfillment_int@gitlab.com',
            'ruben_APIproduction@gitlab.com')
            THEN 'Customer Portal'
        ELSE NULL
      END                                                                             AS subscription_renewal_type,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      --Amendment Information
      dim_subscription.dim_amendment_id_subscription,
      fct_charge.dim_amendment_id_charge,
      dim_amendment_subscription.effective_date                                       AS subscription_amendment_effective_date,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.delta_tcv,
      fct_charge.estimated_total_future_billings

    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    LEFT JOIN dim_order
      ON fct_charge.dim_order_id = dim_order.dim_order_id
    LEFT JOIN dim_order_action
      ON fct_charge.dim_order_id = dim_order_action.dim_order_id
      AND dim_order_action.order_action_type IN ('RenewSubscription', 'CancelSubscription')
    LEFT JOIN prep_billing_account_user
      ON fct_charge.subscription_created_by_user_id = prep_billing_account_user.zuora_user_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    ORDER BY dim_crm_account.dim_parent_crm_account_id, dim_crm_account.dim_crm_account_id, fct_charge.subscription_name,
      fct_charge.subscription_version, fct_charge.rate_plan_charge_number, fct_charge.rate_plan_charge_version,
      fct_charge.rate_plan_charge_segment

)

{{ dbt_audit(
    cte_ref="mart_charge",
    created_by="@iweeks",
    updated_by="@chrissharp",
    created_date="2021-06-07",
    updated_date="2023-06-13"
) }}1c:T3c5c,



WITH dim_amendment AS (

    SELECT * 
    FROM "PROD".common.dim_amendment

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_charge

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_crm_user AS (

    SELECT * 
    FROM "PROD".common.dim_crm_user

), dim_order AS (

    SELECT * 
    FROM "PROD".common.dim_order

), dim_order_action AS (

    SELECT * 
    FROM "PROD".common.dim_order_action

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

)

, mart_charge AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id                                                        AS dim_charge_id,

      --Natural Key
      dim_charge.subscription_name                                                    AS subscription_name,
      dim_charge.subscription_version                                                 AS subscription_version,
      dim_charge.rate_plan_charge_number                                              AS rate_plan_charge_number,
      dim_charge.rate_plan_charge_version                                             AS rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment                                             AS rate_plan_charge_segment,

      --Charge Information
      dim_charge.rate_plan_name                                                       AS rate_plan_name,
      dim_charge.rate_plan_charge_name                                                AS rate_plan_charge_name,
      dim_charge.rate_plan_charge_description                                         AS rate_plan_charge_description,
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.created_by_id                                                  AS subscription_created_by_id,
      dim_subscription.updated_by_id                                                  AS subscription_updated_by_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.term_start_date,
      dim_subscription.term_end_date,
      dim_subscription.term_start_month,
      dim_subscription.term_end_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_user.dim_crm_user_id                                                    AS dim_crm_user_id,
      dim_crm_user.crm_user_sales_segment                                             AS crm_user_sales_segment,
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      -- order info
      fct_charge.dim_order_id                                                         AS dim_order_id,
      CASE
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_name = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_type = 'Composite')
            THEN 'Auto-Renewal'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (prep_billing_account_user.user_name = 'svc_ZuoraSFDC_integration@gitlab.com'
          OR dim_subscription.subscription_sales_type = 'Sales-Assisted')
            THEN 'Sales-Assisted'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description NOT IN 
            ('AutoRenew by CustomersDot', 'Automated seat reconciliation')
            OR dim_order.order_description IS NULL)
          AND prep_billing_account_user.user_name IN (
            'svc_zuora_fulfillment_int@gitlab.com',
            'ruben_APIproduction@gitlab.com')
            THEN 'Customer Portal'
        ELSE NULL
      END                                                                             AS subscription_renewal_type,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      --Amendment Information
      dim_subscription.dim_amendment_id_subscription,
      fct_charge.dim_amendment_id_charge,
      dim_amendment_subscription.effective_date                                       AS subscription_amendment_effective_date,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.delta_tcv,
      fct_charge.estimated_total_future_billings

    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    LEFT JOIN dim_order
      ON fct_charge.dim_order_id = dim_order.dim_order_id
    LEFT JOIN dim_order_action
      ON fct_charge.dim_order_id = dim_order_action.dim_order_id
      AND dim_order_action.order_action_type IN ('RenewSubscription', 'CancelSubscription')
    LEFT JOIN prep_billing_account_user
      ON fct_charge.subscription_created_by_user_id = prep_billing_account_user.zuora_user_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    ORDER BY dim_crm_account.dim_parent_crm_account_id, dim_crm_account.dim_crm_account_id, fct_charge.subscription_name,
      fct_charge.subscription_version, fct_charge.rate_plan_charge_number, fct_charge.rate_plan_charge_version,
      fct_charge.rate_plan_charge_segment

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-06-07'::DATE        AS model_created_date,
      '2023-06-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM mart_charge1d:T44e0,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table",
    unique_key = "ping_instance_id"
) }}

{{ simple_cte([
    ('dim_ping_instance', 'dim_ping_instance'),
    ('dim_product_tier', 'dim_product_tier'),
    ('dim_date', 'dim_date'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_crm_accounts', 'dim_crm_account'),
    ('fct_charge', 'fct_charge'),
    ('dim_license', 'dim_license'),
    ('dim_location', 'dim_location_country'),
    ('fct_ping_instance', 'fct_ping_instance'),
    ('dim_ping_metric', 'dim_ping_metric'),
    ('dim_app_release_major_minor', 'dim_app_release_major_minor')
    ])

}}

, dim_product_detail AS (

    SELECT *
    FROM {{ ref('dim_product_detail') }}
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

  SELECT *
  FROM {{ ref('dim_subscription') }}
  WHERE (subscription_name_slugify != zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
    AND subscription_status NOT IN ('Draft', 'Expired')

),

fct_ping_instance_metric AS (

  SELECT *
  FROM fct_ping_instance
  {% if is_incremental() %}
                WHERE ping_created_at >= (SELECT MAX(ping_created_at) FROM {{ this }})
    {% endif %}

),

subscription_source AS (

  SELECT *
  FROM {{ ref('zuora_subscription_source') }}
  WHERE is_deleted = FALSE
    AND exclude_from_analysis IN ('False', '')

),

license_subscriptions AS (

  SELECT
    dim_date.first_day_of_month                                                                   AS reporting_month,
    dim_license.dim_license_id                                                                    AS license_id,
    dim_license.license_sha256                                                                    AS license_sha256,
    dim_license.license_md5                                                                       AS license_md5,
    dim_license.company                                                                           AS license_company_name,
    dim_license.license_expire_date                                                               AS license_expire_date,
    subscription_source.subscription_name_slugify                                                 AS original_subscription_name_slugify,
    dim_subscription.dim_subscription_id                                                          AS latest_subscription_id,
    dim_subscription.subscription_start_date                                                      AS subscription_start_date,
    dim_subscription.subscription_end_date                                                        AS subscription_end_date,
    dim_subscription.subscription_start_month                                                     AS subscription_start_month,
    dim_subscription.subscription_end_month                                                       AS subscription_end_month,
    dim_billing_account.dim_billing_account_id                                                    AS dim_billing_account_id,
    dim_crm_accounts.crm_account_name                                                             AS crm_account_name,
    dim_crm_accounts.dim_parent_crm_account_id                                                    AS dim_parent_crm_account_id,
    dim_crm_accounts.parent_crm_account_name                                                      AS parent_crm_account_name,
    dim_crm_accounts.parent_crm_account_upa_country                                               AS parent_crm_account_upa_country,
    dim_crm_accounts.parent_crm_account_sales_segment                                             AS parent_crm_account_sales_segment,
    dim_crm_accounts.parent_crm_account_industry                                                  AS parent_crm_account_industry,
    dim_crm_accounts.parent_crm_account_territory                                                 AS parent_crm_account_territory,
    dim_crm_accounts.technical_account_manager                                                    AS technical_account_manager,
    MAX(fct_charge.mrr)                                                                           AS max_monthly_mrr,
    MAX(IFF(dim_product_detail.product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))
    AS is_program_subscription,
    ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
    WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)                              AS product_category_array,
    ARRAY_AGG(DISTINCT dim_product_detail.product_rate_plan_name)
    WITHIN GROUP (ORDER BY dim_product_detail.product_rate_plan_name ASC)                         AS product_rate_plan_name_array,
    SUM(fct_charge.quantity)                                                                      AS quantity,
    SUM(fct_charge.mrr * 12)                                                                      AS arr
  FROM dim_license
  INNER JOIN subscription_source
    ON dim_license.dim_subscription_id = subscription_source.subscription_id
  LEFT JOIN dim_subscription
    ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
  LEFT JOIN subscription_source AS all_subscriptions
    ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
  INNER JOIN fct_charge
    ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
      AND fct_charge.charge_type = 'Recurring'
  INNER JOIN dim_product_detail
    ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
  LEFT JOIN dim_billing_account
    ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
  LEFT JOIN dim_crm_accounts
    ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
  INNER JOIN dim_date
    ON fct_charge.effective_start_month <= dim_date.date_day AND fct_charge.effective_end_month > dim_date.date_day
  {{ dbt_utils.group_by(n=21)}}


),

joined AS (

  SELECT
    fct_ping_instance_metric.ping_instance_id                                                   AS ping_instance_id,
    fct_ping_instance_metric.dim_ping_date_id                                                   AS dim_ping_date_id,
    fct_ping_instance_metric.dim_license_id                                                     AS dim_license_id,
    fct_ping_instance_metric.dim_installation_id                                                AS dim_installation_id,
    fct_ping_instance_metric.dim_ping_instance_id                                               AS dim_ping_instance_id,
    fct_ping_instance_metric.dim_app_release_major_minor_sk                                     AS dim_app_release_major_minor_sk,
    fct_ping_instance_metric.dim_latest_available_app_release_major_minor_sk                    AS dim_latest_available_app_release_major_minor_sk,
    dim_app_release_major_minor.app_release_major_minor_id                                      AS app_release_major_minor_id,
    dim_ping_instance.license_sha256                                                            AS license_sha256,
    dim_ping_instance.license_md5                                                               AS license_md5,
    dim_ping_instance.is_trial                                                                  AS is_trial,
    fct_ping_instance_metric.umau_value                                                         AS umau_value,
    COALESCE(sha256.license_id, md5.license_id)                                                 AS license_id,
    COALESCE(sha256.license_company_name, md5.license_company_name)                             AS license_company_name,
    COALESCE(sha256.latest_subscription_id, md5.latest_subscription_id)                         AS latest_subscription_id,
    COALESCE(sha256.original_subscription_name_slugify, md5.original_subscription_name_slugify) AS original_subscription_name_slugify,
    COALESCE(sha256.product_category_array, md5.product_category_array)                         AS product_category_array,
    COALESCE(sha256.product_rate_plan_name_array, md5.product_rate_plan_name_array)             AS product_rate_plan_name_array,
    COALESCE(sha256.subscription_start_month, md5.subscription_start_month)                     AS subscription_start_month,
    COALESCE(sha256.subscription_end_month, md5.subscription_end_month)                         AS subscription_end_month,
    COALESCE(sha256.dim_billing_account_id, md5.dim_billing_account_id)                         AS dim_billing_account_id,
    COALESCE(sha256.crm_account_name, md5.crm_account_name)                                     AS crm_account_name,
    COALESCE(sha256.dim_parent_crm_account_id, md5.dim_parent_crm_account_id)                   AS dim_parent_crm_account_id,
    COALESCE(sha256.parent_crm_account_name, md5.parent_crm_account_name)                       AS parent_crm_account_name,
    COALESCE(sha256.parent_crm_account_upa_country, md5.parent_crm_account_upa_country)         AS parent_crm_account_upa_country,
    COALESCE(sha256.parent_crm_account_sales_segment, md5.parent_crm_account_sales_segment)     AS parent_crm_account_sales_segment,
    COALESCE(sha256.parent_crm_account_industry, md5.parent_crm_account_industry)               AS parent_crm_account_industry,
    COALESCE(sha256.parent_crm_account_territory, md5.parent_crm_account_territory)             AS parent_crm_account_territory,
    COALESCE(sha256.technical_account_manager, md5.technical_account_manager)                   AS technical_account_manager,
    CASE
      WHEN sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
      WHEN md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
      WHEN sha256.max_monthly_mrr > 0 THEN TRUE
      WHEN md5.max_monthly_mrr > 0 THEN TRUE
      ELSE FALSE
    END                                                                                                     AS is_paid_subscription,
    COALESCE(sha256.is_program_subscription, md5.is_program_subscription, FALSE)                            AS is_program_subscription,
    dim_ping_instance.ping_delivery_type                                                                    AS ping_delivery_type,
    dim_ping_instance.ping_deployment_type                                                                  AS ping_deployment_type,
    dim_ping_instance.ping_edition                                                                          AS ping_edition,
    dim_ping_instance.product_tier                                                                          AS ping_product_tier,
    dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                               AS ping_edition_product_tier,
    dim_app_release_major_minor.major_version                                                               AS major_version,
    dim_app_release_major_minor.minor_version                                                               AS minor_version,
    dim_app_release_major_minor.major_minor_version                                                         AS major_minor_version,
    dim_app_release_major_minor.major_minor_version_num                                                     AS major_minor_version_num,
    dim_ping_instance.major_minor_version_id                                                                AS major_minor_version_id, -- legacy field - to be deprecated
    dim_ping_instance.version_is_prerelease                                                                 AS version_is_prerelease,
    dim_app_release_major_minor.version_number                                                              AS version_number,
    dim_app_release_major_minor.release_date                                                                AS release_date,
    IFF(DATEDIFF('days', dim_app_release_major_minor.release_date, fct_ping_instance_metric.ping_created_at) < 0 AND version_is_prerelease = FALSE,
      0, DATEDIFF('days', dim_app_release_major_minor.release_date, fct_ping_instance_metric.ping_created_at)) 
                                                                                                            AS days_after_version_release_date,
    latest_version.major_minor_version                                                                      AS latest_version_available_at_ping_creation,
    IFF(latest_version.version_number - dim_app_release_major_minor.version_number < 0 AND version_is_prerelease = FALSE,
      0, latest_version.version_number - dim_app_release_major_minor.version_number)                        AS versions_behind_latest_at_ping_creation,
    dim_ping_instance.is_internal                                                                           AS is_internal,
    dim_ping_instance.is_staging                                                                            AS is_staging,
    dim_ping_instance.instance_user_count                                                                   AS instance_user_count,
    dim_ping_instance.ping_created_at                                                                       AS ping_created_at,
    dim_date.first_day_of_month                                                                             AS ping_created_date_month,
    fct_ping_instance_metric.dim_host_id                                                                    AS dim_host_id,
    fct_ping_instance_metric.dim_instance_id                                                                AS dim_instance_id,
    dim_ping_instance.host_name                                                                             AS host_name,
    dim_ping_instance.is_last_ping_of_month                                                                 AS is_last_ping_of_month,
    fct_ping_instance_metric.dim_location_country_id                                                        AS dim_location_country_id,
    dim_location.country_name                                                                               AS country_name,
    dim_location.iso_2_country_code                                                                         AS iso_2_country_code,
    dim_ping_instance.collected_data_categories                                                             AS collected_data_categories
  FROM fct_ping_instance_metric
  INNER JOIN dim_date
    ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
  LEFT JOIN dim_ping_instance
    ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
  LEFT JOIN license_subscriptions md5
    ON dim_ping_instance.license_md5 = md5.license_md5
      AND dim_date.first_day_of_month = md5.reporting_month
  LEFT JOIN license_subscriptions sha256
    ON dim_ping_instance.license_sha256 = sha256.license_sha256
      AND dim_date.first_day_of_month = sha256.reporting_month
  LEFT JOIN dim_location
    ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
  LEFT JOIN dim_app_release_major_minor
    ON fct_ping_instance_metric.dim_app_release_major_minor_sk = dim_app_release_major_minor.dim_app_release_major_minor_sk
  LEFT JOIN dim_app_release_major_minor AS latest_version
    ON fct_ping_instance_metric.dim_latest_available_app_release_major_minor_sk = latest_version.dim_app_release_major_minor_sk
  WHERE dim_ping_instance.ping_deployment_type IN ('Self-Managed', 'Dedicated')
    OR (dim_ping_instance.ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

),

sorted AS (

  SELECT

    -- Primary Key
    ping_instance_id,
    dim_ping_date_id,
    dim_ping_instance_id,

    --Foreign Key
    dim_instance_id,
    dim_license_id,
    dim_installation_id,
    latest_subscription_id,
    dim_billing_account_id,
    dim_parent_crm_account_id,
    dim_app_release_major_minor_sk,
    app_release_major_minor_id,
    dim_host_id,
    host_name,
    dim_location_country_id,

    --Service Ping metadata
    ping_delivery_type,
    ping_deployment_type,
    ping_edition,
    ping_product_tier,
    ping_edition_product_tier,
    major_version,
    minor_version,
    major_minor_version,
    major_minor_version_num,
    major_minor_version_id, -- legacy field - to be replaced with major_minor_version_ num
    version_is_prerelease,
    release_date,
    version_number,
    days_after_version_release_date,
    latest_version_available_at_ping_creation,
    versions_behind_latest_at_ping_creation,
    is_internal,
    is_staging,
    is_trial,
    umau_value,

    --installation metadata
    instance_user_count,
    collected_data_categories,
    country_name,
    iso_2_country_code,

    --subscription metadata
    original_subscription_name_slugify,
    subscription_start_month,
    subscription_end_month,
    product_category_array,
    product_rate_plan_name_array,
    is_paid_subscription,
    is_program_subscription,

    -- account metadata
    crm_account_name,
    parent_crm_account_name,
    parent_crm_account_upa_country,
    parent_crm_account_sales_segment,
    parent_crm_account_industry,
    parent_crm_account_territory,
    technical_account_manager,

    ping_created_at,
    ping_created_date_month,
    is_last_ping_of_month

  FROM joined

)

{{ dbt_audit(
    cte_ref="sorted",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-11",
    updated_date="2023-06-14"
) }}1e:Tb5a, **Description:** Enriched instance Service Ping data by ping. This is an enhanced version of `fct_ping_instance`. Metrics are not included in this data
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- This model is built to have one record per Service Ping and therefore does not contain any metric-level data
- GitLab implementations can be Customer Hosted (Self-Managed), GitLab Hosted (referred to as SaaS or Dotcom data) or GitLab Dedicated Hosted (where each Installation is Hosted by GitLab but on Separate Servers).  
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 1f:T468a,



WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), fct_ping_instance AS (

    SELECT * 
    FROM "PROD".common.fct_ping_instance

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

), dim_app_release_major_minor AS (

    SELECT * 
    FROM "PROD".common.dim_app_release_major_minor

)

, dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

  SELECT *
  FROM "PROD".common.dim_subscription
  WHERE (subscription_name_slugify != zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
    AND subscription_status NOT IN ('Draft', 'Expired')

),

fct_ping_instance_metric AS (

  SELECT *
  FROM fct_ping_instance
  

),

subscription_source AS (

  SELECT *
  FROM "PREP".zuora.zuora_subscription_source
  WHERE is_deleted = FALSE
    AND exclude_from_analysis IN ('False', '')

),

license_subscriptions AS (

  SELECT
    dim_date.first_day_of_month                                                                   AS reporting_month,
    dim_license.dim_license_id                                                                    AS license_id,
    dim_license.license_sha256                                                                    AS license_sha256,
    dim_license.license_md5                                                                       AS license_md5,
    dim_license.company                                                                           AS license_company_name,
    dim_license.license_expire_date                                                               AS license_expire_date,
    subscription_source.subscription_name_slugify                                                 AS original_subscription_name_slugify,
    dim_subscription.dim_subscription_id                                                          AS latest_subscription_id,
    dim_subscription.subscription_start_date                                                      AS subscription_start_date,
    dim_subscription.subscription_end_date                                                        AS subscription_end_date,
    dim_subscription.subscription_start_month                                                     AS subscription_start_month,
    dim_subscription.subscription_end_month                                                       AS subscription_end_month,
    dim_billing_account.dim_billing_account_id                                                    AS dim_billing_account_id,
    dim_crm_accounts.crm_account_name                                                             AS crm_account_name,
    dim_crm_accounts.dim_parent_crm_account_id                                                    AS dim_parent_crm_account_id,
    dim_crm_accounts.parent_crm_account_name                                                      AS parent_crm_account_name,
    dim_crm_accounts.parent_crm_account_upa_country                                               AS parent_crm_account_upa_country,
    dim_crm_accounts.parent_crm_account_sales_segment                                             AS parent_crm_account_sales_segment,
    dim_crm_accounts.parent_crm_account_industry                                                  AS parent_crm_account_industry,
    dim_crm_accounts.parent_crm_account_territory                                                 AS parent_crm_account_territory,
    dim_crm_accounts.technical_account_manager                                                    AS technical_account_manager,
    MAX(fct_charge.mrr)                                                                           AS max_monthly_mrr,
    MAX(IFF(dim_product_detail.product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))
    AS is_program_subscription,
    ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
    WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)                              AS product_category_array,
    ARRAY_AGG(DISTINCT dim_product_detail.product_rate_plan_name)
    WITHIN GROUP (ORDER BY dim_product_detail.product_rate_plan_name ASC)                         AS product_rate_plan_name_array,
    SUM(fct_charge.quantity)                                                                      AS quantity,
    SUM(fct_charge.mrr * 12)                                                                      AS arr
  FROM dim_license
  INNER JOIN subscription_source
    ON dim_license.dim_subscription_id = subscription_source.subscription_id
  LEFT JOIN dim_subscription
    ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
  LEFT JOIN subscription_source AS all_subscriptions
    ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
  INNER JOIN fct_charge
    ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
      AND fct_charge.charge_type = 'Recurring'
  INNER JOIN dim_product_detail
    ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
  LEFT JOIN dim_billing_account
    ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
  LEFT JOIN dim_crm_accounts
    ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
  INNER JOIN dim_date
    ON fct_charge.effective_start_month <= dim_date.date_day AND fct_charge.effective_end_month > dim_date.date_day
  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21


),

joined AS (

  SELECT
    fct_ping_instance_metric.ping_instance_id                                                   AS ping_instance_id,
    fct_ping_instance_metric.dim_ping_date_id                                                   AS dim_ping_date_id,
    fct_ping_instance_metric.dim_license_id                                                     AS dim_license_id,
    fct_ping_instance_metric.dim_installation_id                                                AS dim_installation_id,
    fct_ping_instance_metric.dim_ping_instance_id                                               AS dim_ping_instance_id,
    fct_ping_instance_metric.dim_app_release_major_minor_sk                                     AS dim_app_release_major_minor_sk,
    fct_ping_instance_metric.dim_latest_available_app_release_major_minor_sk                    AS dim_latest_available_app_release_major_minor_sk,
    dim_app_release_major_minor.app_release_major_minor_id                                      AS app_release_major_minor_id,
    dim_ping_instance.license_sha256                                                            AS license_sha256,
    dim_ping_instance.license_md5                                                               AS license_md5,
    dim_ping_instance.is_trial                                                                  AS is_trial,
    fct_ping_instance_metric.umau_value                                                         AS umau_value,
    COALESCE(sha256.license_id, md5.license_id)                                                 AS license_id,
    COALESCE(sha256.license_company_name, md5.license_company_name)                             AS license_company_name,
    COALESCE(sha256.latest_subscription_id, md5.latest_subscription_id)                         AS latest_subscription_id,
    COALESCE(sha256.original_subscription_name_slugify, md5.original_subscription_name_slugify) AS original_subscription_name_slugify,
    COALESCE(sha256.product_category_array, md5.product_category_array)                         AS product_category_array,
    COALESCE(sha256.product_rate_plan_name_array, md5.product_rate_plan_name_array)             AS product_rate_plan_name_array,
    COALESCE(sha256.subscription_start_month, md5.subscription_start_month)                     AS subscription_start_month,
    COALESCE(sha256.subscription_end_month, md5.subscription_end_month)                         AS subscription_end_month,
    COALESCE(sha256.dim_billing_account_id, md5.dim_billing_account_id)                         AS dim_billing_account_id,
    COALESCE(sha256.crm_account_name, md5.crm_account_name)                                     AS crm_account_name,
    COALESCE(sha256.dim_parent_crm_account_id, md5.dim_parent_crm_account_id)                   AS dim_parent_crm_account_id,
    COALESCE(sha256.parent_crm_account_name, md5.parent_crm_account_name)                       AS parent_crm_account_name,
    COALESCE(sha256.parent_crm_account_upa_country, md5.parent_crm_account_upa_country)         AS parent_crm_account_upa_country,
    COALESCE(sha256.parent_crm_account_sales_segment, md5.parent_crm_account_sales_segment)     AS parent_crm_account_sales_segment,
    COALESCE(sha256.parent_crm_account_industry, md5.parent_crm_account_industry)               AS parent_crm_account_industry,
    COALESCE(sha256.parent_crm_account_territory, md5.parent_crm_account_territory)             AS parent_crm_account_territory,
    COALESCE(sha256.technical_account_manager, md5.technical_account_manager)                   AS technical_account_manager,
    CASE
      WHEN sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
      WHEN md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
      WHEN sha256.max_monthly_mrr > 0 THEN TRUE
      WHEN md5.max_monthly_mrr > 0 THEN TRUE
      ELSE FALSE
    END                                                                                                     AS is_paid_subscription,
    COALESCE(sha256.is_program_subscription, md5.is_program_subscription, FALSE)                            AS is_program_subscription,
    dim_ping_instance.ping_delivery_type                                                                    AS ping_delivery_type,
    dim_ping_instance.ping_deployment_type                                                                  AS ping_deployment_type,
    dim_ping_instance.ping_edition                                                                          AS ping_edition,
    dim_ping_instance.product_tier                                                                          AS ping_product_tier,
    dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                               AS ping_edition_product_tier,
    dim_app_release_major_minor.major_version                                                               AS major_version,
    dim_app_release_major_minor.minor_version                                                               AS minor_version,
    dim_app_release_major_minor.major_minor_version                                                         AS major_minor_version,
    dim_app_release_major_minor.major_minor_version_num                                                     AS major_minor_version_num,
    dim_ping_instance.major_minor_version_id                                                                AS major_minor_version_id, -- legacy field - to be deprecated
    dim_ping_instance.version_is_prerelease                                                                 AS version_is_prerelease,
    dim_app_release_major_minor.version_number                                                              AS version_number,
    dim_app_release_major_minor.release_date                                                                AS release_date,
    IFF(DATEDIFF('days', dim_app_release_major_minor.release_date, fct_ping_instance_metric.ping_created_at) < 0 AND version_is_prerelease = FALSE,
      0, DATEDIFF('days', dim_app_release_major_minor.release_date, fct_ping_instance_metric.ping_created_at)) 
                                                                                                            AS days_after_version_release_date,
    latest_version.major_minor_version                                                                      AS latest_version_available_at_ping_creation,
    IFF(latest_version.version_number - dim_app_release_major_minor.version_number < 0 AND version_is_prerelease = FALSE,
      0, latest_version.version_number - dim_app_release_major_minor.version_number)                        AS versions_behind_latest_at_ping_creation,
    dim_ping_instance.is_internal                                                                           AS is_internal,
    dim_ping_instance.is_staging                                                                            AS is_staging,
    dim_ping_instance.instance_user_count                                                                   AS instance_user_count,
    dim_ping_instance.ping_created_at                                                                       AS ping_created_at,
    dim_date.first_day_of_month                                                                             AS ping_created_date_month,
    fct_ping_instance_metric.dim_host_id                                                                    AS dim_host_id,
    fct_ping_instance_metric.dim_instance_id                                                                AS dim_instance_id,
    dim_ping_instance.host_name                                                                             AS host_name,
    dim_ping_instance.is_last_ping_of_month                                                                 AS is_last_ping_of_month,
    fct_ping_instance_metric.dim_location_country_id                                                        AS dim_location_country_id,
    dim_location.country_name                                                                               AS country_name,
    dim_location.iso_2_country_code                                                                         AS iso_2_country_code,
    dim_ping_instance.collected_data_categories                                                             AS collected_data_categories
  FROM fct_ping_instance_metric
  INNER JOIN dim_date
    ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
  LEFT JOIN dim_ping_instance
    ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
  LEFT JOIN license_subscriptions md5
    ON dim_ping_instance.license_md5 = md5.license_md5
      AND dim_date.first_day_of_month = md5.reporting_month
  LEFT JOIN license_subscriptions sha256
    ON dim_ping_instance.license_sha256 = sha256.license_sha256
      AND dim_date.first_day_of_month = sha256.reporting_month
  LEFT JOIN dim_location
    ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
  LEFT JOIN dim_app_release_major_minor
    ON fct_ping_instance_metric.dim_app_release_major_minor_sk = dim_app_release_major_minor.dim_app_release_major_minor_sk
  LEFT JOIN dim_app_release_major_minor AS latest_version
    ON fct_ping_instance_metric.dim_latest_available_app_release_major_minor_sk = latest_version.dim_app_release_major_minor_sk
  WHERE dim_ping_instance.ping_deployment_type IN ('Self-Managed', 'Dedicated')
    OR (dim_ping_instance.ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

),

sorted AS (

  SELECT

    -- Primary Key
    ping_instance_id,
    dim_ping_date_id,
    dim_ping_instance_id,

    --Foreign Key
    dim_instance_id,
    dim_license_id,
    dim_installation_id,
    latest_subscription_id,
    dim_billing_account_id,
    dim_parent_crm_account_id,
    dim_app_release_major_minor_sk,
    app_release_major_minor_id,
    dim_host_id,
    host_name,
    dim_location_country_id,

    --Service Ping metadata
    ping_delivery_type,
    ping_deployment_type,
    ping_edition,
    ping_product_tier,
    ping_edition_product_tier,
    major_version,
    minor_version,
    major_minor_version,
    major_minor_version_num,
    major_minor_version_id, -- legacy field - to be replaced with major_minor_version_ num
    version_is_prerelease,
    release_date,
    version_number,
    days_after_version_release_date,
    latest_version_available_at_ping_creation,
    versions_behind_latest_at_ping_creation,
    is_internal,
    is_staging,
    is_trial,
    umau_value,

    --installation metadata
    instance_user_count,
    collected_data_categories,
    country_name,
    iso_2_country_code,

    --subscription metadata
    original_subscription_name_slugify,
    subscription_start_month,
    subscription_end_month,
    product_category_array,
    product_rate_plan_name_array,
    is_paid_subscription,
    is_program_subscription,

    -- account metadata
    crm_account_name,
    parent_crm_account_name,
    parent_crm_account_upa_country,
    parent_crm_account_sales_segment,
    parent_crm_account_industry,
    parent_crm_account_territory,
    technical_account_manager,

    ping_created_at,
    ping_created_date_month,
    is_last_ping_of_month

  FROM joined

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted20:T9149,{{
  config(
    materialized='table',
    tags=["product", "mnpi_exception"]
  )
}}

{{ simple_cte([
    ('monthly_saas_metrics','rpt_gainsight_metrics_monthly_paid_saas'),
    ('monthly_sm_metrics','rpt_gainsight_metrics_monthly_paid_self_managed'),
    ('billing_accounts','dim_billing_account'),
    ('location_country', 'dim_location_country'),
    ('subscriptions', 'dim_subscription'),
    ('namespaces', 'dim_namespace'),
    ('charges', 'mart_charge'),
    ('dates', 'dim_date'),
    ('aggregated_metrics', 'redis_namespace_snowplow_clicks_aggregated_workspace'),
    ('redis_metrics_28d_user', 'wk_rpt_user_based_metric_counts_namespace_monthly'),
    ('redis_metrics_all_time_event', 'wk_rpt_event_based_metric_counts_namespace_all_time')
]) }}


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    {{ dbt_utils.group_by(n = 2) }}
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (	
  	
    SELECT	
      *	
    FROM aggregated_metrics 	
    WHERE event_action = 'p_terraform_state_api_unique_users'	
   	
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}             AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                 AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status                         AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                      AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      'Self-Managed'                                                               AS delivery_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                            AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                     AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                            AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}              AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users	
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 	
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      {{ dbt_utils.surrogate_key(
        [
          'snapshot_month',
          'dim_subscription_id_original',
          'uuid',
          'hostname',
          'dim_namespace_id'
        ]
      ) }} AS primary_key
    FROM unioned
  
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mdrussell",
    updated_by="@mdrussell",
    created_date="2022-10-12",
    updated_date="2023-06-05"
) }}21:T67b,**Description:** This table unions together a select set of Service Ping metrics for both Self-Managed and SaaS **paid users**. The data from this table will be used for customer product insights. Most notably, this data is pumped into Gainsight and aggregated into customer health scores for use by TAMs.

**Data Grain:**
- Subscription (`dim_subscription_id_original`)
- Month (`snapshot_month`)
- Installation/Namespace (For Self-Managed, `uuid`-`hostname`; for SaaS, `namespace_id`)

**Filters:**
Inherits filters from parent models, but most notably:
  - Only includes paid customers.
  - Only includes Service Ping metrics that have been added via the "wave" process.
  - Only includes subscriptions that have a usage ping payload associated with them.

**Other Comments:**
- For Self-Managed customers, this data orgininates in [Service Ping](https://docs.gitlab.com/ee/development/service_ping/), which sends a weekly payload of customer product usage metrics to GitLab. For SaaS customers, we mimic the Service Ping queries using the [SaaS Service Ping process](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/). Specifically, the namespace-level Service Ping queries can be found [here](https://gitlab.com/gitlab-data/analytics/-/blob/master/extract/saas_usage_ping/usage_ping_namespace_queries.json).
- For SaaS customers, not all metrics can be calculated via the namespace-level Service Ping. For metrics that originate from `redis_hll`, Snowplow counters are used to track event-level data. Then, the data team aggregates those counters in Snowflake to mimic the Service Ping calcuation.22:T943f,



WITH monthly_saas_metrics AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_gainsight_metrics_monthly_paid_saas

), monthly_sm_metrics AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_gainsight_metrics_monthly_paid_self_managed

), billing_accounts AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), location_country AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), subscriptions AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), namespaces AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

), aggregated_metrics AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.redis_namespace_snowplow_clicks_aggregated_workspace

), redis_metrics_28d_user AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_user_based_metric_counts_namespace_monthly

), redis_metrics_all_time_event AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_event_based_metric_counts_namespace_all_time

)


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    group by 1,2
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (	
  	
    SELECT	
      *	
    FROM aggregated_metrics 	
    WHERE event_action = 'p_terraform_state_api_unique_users'	
   	
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

             AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                 AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status                         AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                      AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      'Self-Managed'                                                               AS delivery_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                            AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                     AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                            AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

              AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users	
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 	
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      md5(cast(coalesce(cast(snapshot_month as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id_original as 
    varchar
), '') || '-' || coalesce(cast(uuid as 
    varchar
), '') || '-' || coalesce(cast(hostname as 
    varchar
), '') || '-' || coalesce(cast(dim_namespace_id as 
    varchar
), '') as 
    varchar
)) AS primary_key
    FROM unioned
  
)

SELECT
      *,
      '@mdrussell'::VARCHAR       AS created_by,
      '@mdrussell'::VARCHAR       AS updated_by,
      '2022-10-12'::DATE        AS model_created_date,
      '2023-06-05'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final23:T957d,{{
  config(
    materialized='table',
    tags=["mnpi_exception"]
  )
}}

{{ simple_cte([
    ('monthly_saas_metrics','fct_saas_product_usage_metrics_monthly'),
    ('monthly_sm_metrics','fct_ping_instance_metric_wave_monthly'),
    ('billing_accounts','dim_billing_account'),
    ('location_country', 'dim_location_country'),
    ('subscriptions', 'dim_subscription'),
    ('namespaces', 'dim_namespace'),
    ('charges', 'mart_charge'),
    ('dates', 'dim_date'),
    ('aggregated_metrics', 'redis_namespace_snowplow_clicks_aggregated_workspace'),
    ('redis_metrics_28d_user', 'wk_rpt_user_based_metric_counts_namespace_monthly'),
    ('redis_metrics_all_time_event', 'wk_rpt_event_based_metric_counts_namespace_all_time'),
    ('dim_product_detail', 'dim_product_detail')
]) }}


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1
    
), subscription_with_deployment_type AS (
  
    SELECT DISTINCT
        charges.dim_subscription_id,
        dim_product_detail.product_delivery_type,
        dim_product_detail.product_deployment_type
    FROM charges
    LEFT JOIN dim_product_detail
      ON charges.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    WHERE dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    {{ dbt_utils.group_by(n = 2) }}
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'p_terraform_state_api_unique_users'
   
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}              AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                  AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                       AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      COALESCE(monthly_sm_metrics.ping_delivery_type, 'Self-Managed')              AS delivery_type, -- Hard codding to self-managed until next MR to update dedicated to saas. Issue -> https://gitlab.com/gitlab-data/analytics/-/issues/16966
      COALESCE(monthly_sm_metrics.ping_deployment_type, subscription_with_deployment_type.product_deployment_type, 'Self-Managed')
                                                                                   AS deployment_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                             AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                      AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN subscription_with_deployment_type
      ON subscription_with_deployment_type.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}              AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      'GitLab.com'                                                                  AS deployment_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      {{ dbt_utils.surrogate_key(
        [
          'snapshot_month',
          'dim_subscription_id',
          'deployment_type',
          'uuid',
          'hostname',
          'dim_namespace_id'
        ]
      ) }} AS primary_key
    FROM unioned
  
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mdrussell",
    updated_by="@jpeguero",
    created_date="2022-01-14",
    updated_date="2023-06-22"
) }}24:T98a9,



WITH monthly_saas_metrics AS (

    SELECT * 
    FROM "PROD".common.fct_saas_product_usage_metrics_monthly

), monthly_sm_metrics AS (

    SELECT * 
    FROM "PROD".common.fct_ping_instance_metric_wave_monthly

), billing_accounts AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), location_country AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), subscriptions AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), namespaces AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

), aggregated_metrics AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.redis_namespace_snowplow_clicks_aggregated_workspace

), redis_metrics_28d_user AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_user_based_metric_counts_namespace_monthly

), redis_metrics_all_time_event AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_event_based_metric_counts_namespace_all_time

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

)


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1
    
), subscription_with_deployment_type AS (
  
    SELECT DISTINCT
        charges.dim_subscription_id,
        dim_product_detail.product_delivery_type,
        dim_product_detail.product_deployment_type
    FROM charges
    LEFT JOIN dim_product_detail
      ON charges.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    WHERE dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    group by 1,2
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'p_terraform_state_api_unique_users'
   
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

              AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                  AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                       AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      COALESCE(monthly_sm_metrics.ping_delivery_type, 'Self-Managed')              AS delivery_type, -- Hard codding to self-managed until next MR to update dedicated to saas. Issue -> https://gitlab.com/gitlab-data/analytics/-/issues/16966
      COALESCE(monthly_sm_metrics.ping_deployment_type, subscription_with_deployment_type.product_deployment_type, 'Self-Managed')
                                                                                   AS deployment_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                             AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                      AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN subscription_with_deployment_type
      ON subscription_with_deployment_type.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

              AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      'GitLab.com'                                                                  AS deployment_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      md5(cast(coalesce(cast(snapshot_month as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(deployment_type as 
    varchar
), '') || '-' || coalesce(cast(uuid as 
    varchar
), '') || '-' || coalesce(cast(hostname as 
    varchar
), '') || '-' || coalesce(cast(dim_namespace_id as 
    varchar
), '') as 
    varchar
)) AS primary_key
    FROM unioned
  
)

SELECT
      *,
      '@mdrussell'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final25:T2d18,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
    ('dim_amendment', 'dim_amendment'),
    ('fct_mrr', 'fct_mrr'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_crm_account', 'dim_crm_account'),
    ('mart_arr', 'mart_arr')
])}}

, dim_subscription AS ( -- Add a flag to dim_subscription which specify if the subscription is the last version
  
    SELECT
      IFF(MAX(subscription_version) OVER(partition by subscription_name) = subscription_version, TRUE, FALSE) AS is_last_subscription_version,
      LAST_VALUE(subscription_start_date) OVER(PARTITION BY subscription_name ORDER BY subscription_version) AS last_subscription_start_date,
      LAST_VALUE(subscription_end_date) OVER(PARTITION BY subscription_name ORDER BY subscription_version) AS last_subscription_end_date,
      *
    FROM {{ ref('dim_subscription') }}

), dim_license AS (
    -- Dedup multiple subscription_ids in dim_license. In case of duplicate subscription_ids first take the one in customers portal and then the one with 
    -- the latest license_expire_date
    SELECT
      *,
      IFF(environment LIKE 'Customer%Portal', 1, 2) AS environment_order
    FROM {{ ref('dim_license') }}
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_subscription_id ORDER BY environment_order, license_expire_date DESC) = 1 
    order by dim_subscription_id
  
), subscription_amendments_issue_license_mapping AS (
  
    SELECT
      dim_subscription.subscription_name,
      IFF(MAX(
        IFF(amendment_type IN ('NewProduct', 'RemoveProduct', 'UpdateProduct', 'Renewal'), 1, 0)
        ) = 1, TRUE, FALSE) does_subscription_name_contains_amendments_issue_license
    FROM dim_subscription
    LEFT JOIN dim_amendment
      ON dim_amendment.dim_amendment_id = dim_subscription.DIM_AMENDMENT_ID_SUBSCRIPTION
    GROUP BY 1
  
), subscription_renewal_mapping AS (
  
    SELECT DISTINCT
      subscription_name,
      IFF(LEN(TRIM(zuora_renewal_subscription_name)) = 0, NULL, zuora_renewal_subscription_name) AS zuora_renewal_subscription_name
    FROM dim_subscription
    WHERE is_last_subscription_version
  
), amendments AS (  -- Get subscriptions versions that are the product of the amendments listed in the WHERE clause
    -- These amendments are the ones that should have a license attached to them
    -- In the qualify statement, we get only the latest version that is part of the amendment list, since the latest one is the one we care about

    SELECT DISTINCT
      dim_subscription.dim_subscription_id,
      dim_subscription.dim_crm_account_id,
      dim_amendment.dim_amendment_id,
      dim_amendment.amendment_name,
      dim_subscription.subscription_version,
      dim_subscription.subscription_status,
      dim_subscription.subscription_start_date,
      dim_subscription.subscription_end_date,
      dim_amendment.amendment_type,
      dim_subscription.subscription_name,
      dim_subscription.dim_billing_account_id_invoice_owner_account AS dim_billing_account_id_invoice_owner,
      dim_subscription.last_subscription_start_date,
      dim_subscription.last_subscription_end_date,
      subscription_renewal_mapping.zuora_renewal_subscription_name,
      subscription_amendments_issue_license_mapping.does_subscription_name_contains_amendments_issue_license,
      dim_subscription.dbt_updated_at
      
    FROM dim_subscription
    LEFT JOIN dim_amendment
      ON dim_amendment.dim_amendment_id = dim_subscription.DIM_AMENDMENT_ID_SUBSCRIPTION
    LEFT JOIN subscription_renewal_mapping
      ON subscription_renewal_mapping.subscription_name = dim_subscription.subscription_name
    LEFT JOIN subscription_amendments_issue_license_mapping
      ON dim_subscription.subscription_name = subscription_amendments_issue_license_mapping.subscription_name
    WHERE ( amendment_type IN ('NewProduct', 'RemoveProduct', 'UpdateProduct', 'Renewal')
      or dim_subscription.subscription_version = 1)
    
    -- Gets latest subscription_version where the ammendments above happened
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_subscription.subscription_name ORDER BY dim_subscription.subscription_version DESC) = 1
 
), ammendments_and_last_version AS (  -- Pull the latest subscription version and append it to the ammendments found above.
    -- Reason for this is to look for the license id in the last amendment in case it is not in the past CTE
   
    SELECT *
    FROM amendments
    
    UNION
    
    SELECT DISTINCT
      dim_subscription.dim_subscription_id,
      dim_subscription.dim_crm_account_id,
      dim_amendment.dim_amendment_id,
      dim_amendment.amendment_name,
      dim_subscription.subscription_version,
      dim_subscription.subscription_status,
      dim_subscription.subscription_start_date,
      dim_subscription.subscription_end_date,
      dim_amendment.amendment_type,
      dim_subscription.subscription_name,
      dim_subscription.dim_billing_account_id_invoice_owner_account AS dim_billing_account_id_invoice_owner,
      dim_subscription.last_subscription_start_date,
      dim_subscription.last_subscription_end_date,
      subscription_renewal_mapping.zuora_renewal_subscription_name,
      subscription_amendments_issue_license_mapping.does_subscription_name_contains_amendments_issue_license,
      dim_subscription.dbt_updated_at
    FROM dim_subscription
    LEFT JOIN dim_amendment
      ON dim_amendment.dim_amendment_id = dim_subscription.DIM_AMENDMENT_ID_SUBSCRIPTION
    LEFT JOIN subscription_renewal_mapping
      ON subscription_renewal_mapping.subscription_name = dim_subscription.subscription_name
    LEFT JOIN subscription_amendments_issue_license_mapping
      ON dim_subscription.subscription_name = subscription_amendments_issue_license_mapping.subscription_name
    WHERE is_last_subscription_version

), self_managed_subscriptions AS ( -- Get subscription_id from self managed subscriptions

    SELECT DISTINCT fct_mrr.dim_subscription_id
    FROM fct_mrr
    LEFT JOIN dim_product_detail
      ON fct_mrr.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    LEFT JOIN dim_subscription
      ON fct_mrr.dim_subscription_id = dim_subscription.dim_subscription_id
    WHERE subscription_start_date <= CURRENT_DATE
    QUALIFY LAST_VALUE(dim_product_detail.product_delivery_type) OVER(
        PARTITION BY dim_subscription.subscription_name ORDER BY dim_subscription.subscription_version, fct_mrr.dim_date_id
      ) = 'Self-Managed'

), subscriptions_with_arr_in_current_month AS ( -- Get subscriptions names that are currently paying ARR.
     -- If the subscription is not paying ARR no reason to investigate it
  
    SELECT subscription_name, SUM(arr) AS arr
    FROM mart_arr
    WHERE arr > 0
      AND arr_month = DATE_TRUNC('month', CURRENT_DATE)
    GROUP BY 1

), self_managed_amendments AS ( -- Filter the amendments / subscription_versions to be of self managed    
    
    SELECT ammendments_and_last_version.*
    FROM ammendments_and_last_version
    INNER JOIN self_managed_subscriptions
      ON ammendments_and_last_version.dim_subscription_id = self_managed_subscriptions.dim_subscription_id

), subscription_to_licenses as ( -- Join subscriptions to licenses

    SELECT
      self_managed_amendments.*,
      dim_license.dim_license_id,
      dim_license.license_md5,
      dim_license.license_sha256,
      dim_license.dim_environment_id,
      dim_license.environment,
      dim_license.license_plan,
      dim_license.license_start_date,
      dim_license.license_expire_date
    FROM self_managed_amendments
    LEFT JOIN dim_license
      ON self_managed_amendments.dim_subscription_id = dim_license.dim_subscription_id
    ORDER BY self_managed_amendments.subscription_name, self_managed_amendments.subscription_version 
  
), subscription_to_licenses_final AS ( -- If the latest subscription version or the amendment from the amendment list has a valid license 

    SELECT *
    FROM subscription_to_licenses
    QUALIFY ROW_NUMBER() OVER(PARTITION BY subscription_name ORDER BY dim_license_id DESC NULLS LAST, subscription_version DESC) = 1
  
), licenses_missing_subscriptions AS (
  
    SELECT *
    FROM subscription_to_licenses_final
    WHERE dim_license_id IS NULL
  
), licenses_with_subscriptions AS (
  
    SELECT *
    FROM subscription_to_licenses_final
    WHERE dim_license_id IS NOT NULL

), report AS (

    SELECT
      'Missing license' AS license_status,
      licenses_missing_subscriptions.*
    FROM licenses_missing_subscriptions
    LEFT JOIN licenses_with_subscriptions
      ON licenses_missing_subscriptions.does_subscription_name_contains_amendments_issue_license = FALSE
      AND licenses_missing_subscriptions.last_subscription_start_date = licenses_with_subscriptions.last_subscription_end_date 
      AND licenses_missing_subscriptions.subscription_name = licenses_with_subscriptions.zuora_renewal_subscription_name
      AND licenses_missing_subscriptions.dim_billing_account_id_invoice_owner != licenses_with_subscriptions.dim_billing_account_id_invoice_owner
    WHERE licenses_with_subscriptions.dim_subscription_id IS NULL

    UNION

    SELECT
      'Has license' AS license_status,
      licenses_missing_subscriptions.dim_subscription_id,
      licenses_missing_subscriptions.dim_crm_account_id,
      licenses_missing_subscriptions.dim_amendment_id,
      licenses_missing_subscriptions.amendment_name,
      licenses_missing_subscriptions.subscription_version,
      licenses_missing_subscriptions.subscription_status,
      licenses_missing_subscriptions.subscription_start_date,
      licenses_missing_subscriptions.subscription_end_date,
      licenses_missing_subscriptions.amendment_type,
      licenses_missing_subscriptions.subscription_name,
      licenses_missing_subscriptions.dim_billing_account_id_invoice_owner,
      licenses_missing_subscriptions.last_subscription_start_date,
      licenses_missing_subscriptions.last_subscription_end_date,
      licenses_missing_subscriptions.zuora_renewal_subscription_name,
      licenses_missing_subscriptions.does_subscription_name_contains_amendments_issue_license,
      licenses_missing_subscriptions.dbt_updated_at,

      licenses_with_subscriptions.dim_license_id,
      licenses_with_subscriptions.license_md5,
      licenses_with_subscriptions.license_sha256,
      licenses_with_subscriptions.dim_environment_id,
      licenses_with_subscriptions.environment,
      licenses_with_subscriptions.license_plan,
      licenses_with_subscriptions.license_start_date,
      licenses_with_subscriptions.license_expire_date
    FROM licenses_missing_subscriptions
    LEFT JOIN licenses_with_subscriptions
      ON licenses_missing_subscriptions.does_subscription_name_contains_amendments_issue_license = FALSE
      AND licenses_missing_subscriptions.last_subscription_start_date = licenses_with_subscriptions.last_subscription_end_date 
      AND licenses_missing_subscriptions.subscription_name = licenses_with_subscriptions.zuora_renewal_subscription_name
      AND licenses_missing_subscriptions.dim_billing_account_id_invoice_owner != licenses_with_subscriptions.dim_billing_account_id_invoice_owner
    WHERE licenses_with_subscriptions.dim_subscription_id IS NOT NULL

    UNION

    SELECT
      'Has license' AS license_status,
      *
    FROM licenses_with_subscriptions
  
), final AS (

    SELECT report.*
    FROM report
    INNER JOIN subscriptions_with_arr_in_current_month
      ON subscriptions_with_arr_in_current_month.subscription_name = report.subscription_name

)

SELECT *
FROM final26:T2dcb,



WITH dim_amendment AS (

    SELECT * 
    FROM "PROD".common.dim_amendment

), fct_mrr AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), mart_arr AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_arr

)

, dim_subscription AS ( -- Add a flag to dim_subscription which specify if the subscription is the last version
  
    SELECT
      IFF(MAX(subscription_version) OVER(partition by subscription_name) = subscription_version, TRUE, FALSE) AS is_last_subscription_version,
      LAST_VALUE(subscription_start_date) OVER(PARTITION BY subscription_name ORDER BY subscription_version) AS last_subscription_start_date,
      LAST_VALUE(subscription_end_date) OVER(PARTITION BY subscription_name ORDER BY subscription_version) AS last_subscription_end_date,
      *
    FROM "PROD".common.dim_subscription

), dim_license AS (
    -- Dedup multiple subscription_ids in dim_license. In case of duplicate subscription_ids first take the one in customers portal and then the one with 
    -- the latest license_expire_date
    SELECT
      *,
      IFF(environment LIKE 'Customer%Portal', 1, 2) AS environment_order
    FROM "PROD".common.dim_license
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_subscription_id ORDER BY environment_order, license_expire_date DESC) = 1 
    order by dim_subscription_id
  
), subscription_amendments_issue_license_mapping AS (
  
    SELECT
      dim_subscription.subscription_name,
      IFF(MAX(
        IFF(amendment_type IN ('NewProduct', 'RemoveProduct', 'UpdateProduct', 'Renewal'), 1, 0)
        ) = 1, TRUE, FALSE) does_subscription_name_contains_amendments_issue_license
    FROM dim_subscription
    LEFT JOIN dim_amendment
      ON dim_amendment.dim_amendment_id = dim_subscription.DIM_AMENDMENT_ID_SUBSCRIPTION
    GROUP BY 1
  
), subscription_renewal_mapping AS (
  
    SELECT DISTINCT
      subscription_name,
      IFF(LEN(TRIM(zuora_renewal_subscription_name)) = 0, NULL, zuora_renewal_subscription_name) AS zuora_renewal_subscription_name
    FROM dim_subscription
    WHERE is_last_subscription_version
  
), amendments AS (  -- Get subscriptions versions that are the product of the amendments listed in the WHERE clause
    -- These amendments are the ones that should have a license attached to them
    -- In the qualify statement, we get only the latest version that is part of the amendment list, since the latest one is the one we care about

    SELECT DISTINCT
      dim_subscription.dim_subscription_id,
      dim_subscription.dim_crm_account_id,
      dim_amendment.dim_amendment_id,
      dim_amendment.amendment_name,
      dim_subscription.subscription_version,
      dim_subscription.subscription_status,
      dim_subscription.subscription_start_date,
      dim_subscription.subscription_end_date,
      dim_amendment.amendment_type,
      dim_subscription.subscription_name,
      dim_subscription.dim_billing_account_id_invoice_owner_account AS dim_billing_account_id_invoice_owner,
      dim_subscription.last_subscription_start_date,
      dim_subscription.last_subscription_end_date,
      subscription_renewal_mapping.zuora_renewal_subscription_name,
      subscription_amendments_issue_license_mapping.does_subscription_name_contains_amendments_issue_license,
      dim_subscription.dbt_updated_at
      
    FROM dim_subscription
    LEFT JOIN dim_amendment
      ON dim_amendment.dim_amendment_id = dim_subscription.DIM_AMENDMENT_ID_SUBSCRIPTION
    LEFT JOIN subscription_renewal_mapping
      ON subscription_renewal_mapping.subscription_name = dim_subscription.subscription_name
    LEFT JOIN subscription_amendments_issue_license_mapping
      ON dim_subscription.subscription_name = subscription_amendments_issue_license_mapping.subscription_name
    WHERE ( amendment_type IN ('NewProduct', 'RemoveProduct', 'UpdateProduct', 'Renewal')
      or dim_subscription.subscription_version = 1)
    
    -- Gets latest subscription_version where the ammendments above happened
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_subscription.subscription_name ORDER BY dim_subscription.subscription_version DESC) = 1
 
), ammendments_and_last_version AS (  -- Pull the latest subscription version and append it to the ammendments found above.
    -- Reason for this is to look for the license id in the last amendment in case it is not in the past CTE
   
    SELECT *
    FROM amendments
    
    UNION
    
    SELECT DISTINCT
      dim_subscription.dim_subscription_id,
      dim_subscription.dim_crm_account_id,
      dim_amendment.dim_amendment_id,
      dim_amendment.amendment_name,
      dim_subscription.subscription_version,
      dim_subscription.subscription_status,
      dim_subscription.subscription_start_date,
      dim_subscription.subscription_end_date,
      dim_amendment.amendment_type,
      dim_subscription.subscription_name,
      dim_subscription.dim_billing_account_id_invoice_owner_account AS dim_billing_account_id_invoice_owner,
      dim_subscription.last_subscription_start_date,
      dim_subscription.last_subscription_end_date,
      subscription_renewal_mapping.zuora_renewal_subscription_name,
      subscription_amendments_issue_license_mapping.does_subscription_name_contains_amendments_issue_license,
      dim_subscription.dbt_updated_at
    FROM dim_subscription
    LEFT JOIN dim_amendment
      ON dim_amendment.dim_amendment_id = dim_subscription.DIM_AMENDMENT_ID_SUBSCRIPTION
    LEFT JOIN subscription_renewal_mapping
      ON subscription_renewal_mapping.subscription_name = dim_subscription.subscription_name
    LEFT JOIN subscription_amendments_issue_license_mapping
      ON dim_subscription.subscription_name = subscription_amendments_issue_license_mapping.subscription_name
    WHERE is_last_subscription_version

), self_managed_subscriptions AS ( -- Get subscription_id from self managed subscriptions

    SELECT DISTINCT fct_mrr.dim_subscription_id
    FROM fct_mrr
    LEFT JOIN dim_product_detail
      ON fct_mrr.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    LEFT JOIN dim_subscription
      ON fct_mrr.dim_subscription_id = dim_subscription.dim_subscription_id
    WHERE subscription_start_date <= CURRENT_DATE
    QUALIFY LAST_VALUE(dim_product_detail.product_delivery_type) OVER(
        PARTITION BY dim_subscription.subscription_name ORDER BY dim_subscription.subscription_version, fct_mrr.dim_date_id
      ) = 'Self-Managed'

), subscriptions_with_arr_in_current_month AS ( -- Get subscriptions names that are currently paying ARR.
     -- If the subscription is not paying ARR no reason to investigate it
  
    SELECT subscription_name, SUM(arr) AS arr
    FROM mart_arr
    WHERE arr > 0
      AND arr_month = DATE_TRUNC('month', CURRENT_DATE)
    GROUP BY 1

), self_managed_amendments AS ( -- Filter the amendments / subscription_versions to be of self managed    
    
    SELECT ammendments_and_last_version.*
    FROM ammendments_and_last_version
    INNER JOIN self_managed_subscriptions
      ON ammendments_and_last_version.dim_subscription_id = self_managed_subscriptions.dim_subscription_id

), subscription_to_licenses as ( -- Join subscriptions to licenses

    SELECT
      self_managed_amendments.*,
      dim_license.dim_license_id,
      dim_license.license_md5,
      dim_license.license_sha256,
      dim_license.dim_environment_id,
      dim_license.environment,
      dim_license.license_plan,
      dim_license.license_start_date,
      dim_license.license_expire_date
    FROM self_managed_amendments
    LEFT JOIN dim_license
      ON self_managed_amendments.dim_subscription_id = dim_license.dim_subscription_id
    ORDER BY self_managed_amendments.subscription_name, self_managed_amendments.subscription_version 
  
), subscription_to_licenses_final AS ( -- If the latest subscription version or the amendment from the amendment list has a valid license 

    SELECT *
    FROM subscription_to_licenses
    QUALIFY ROW_NUMBER() OVER(PARTITION BY subscription_name ORDER BY dim_license_id DESC NULLS LAST, subscription_version DESC) = 1
  
), licenses_missing_subscriptions AS (
  
    SELECT *
    FROM subscription_to_licenses_final
    WHERE dim_license_id IS NULL
  
), licenses_with_subscriptions AS (
  
    SELECT *
    FROM subscription_to_licenses_final
    WHERE dim_license_id IS NOT NULL

), report AS (

    SELECT
      'Missing license' AS license_status,
      licenses_missing_subscriptions.*
    FROM licenses_missing_subscriptions
    LEFT JOIN licenses_with_subscriptions
      ON licenses_missing_subscriptions.does_subscription_name_contains_amendments_issue_license = FALSE
      AND licenses_missing_subscriptions.last_subscription_start_date = licenses_with_subscriptions.last_subscription_end_date 
      AND licenses_missing_subscriptions.subscription_name = licenses_with_subscriptions.zuora_renewal_subscription_name
      AND licenses_missing_subscriptions.dim_billing_account_id_invoice_owner != licenses_with_subscriptions.dim_billing_account_id_invoice_owner
    WHERE licenses_with_subscriptions.dim_subscription_id IS NULL

    UNION

    SELECT
      'Has license' AS license_status,
      licenses_missing_subscriptions.dim_subscription_id,
      licenses_missing_subscriptions.dim_crm_account_id,
      licenses_missing_subscriptions.dim_amendment_id,
      licenses_missing_subscriptions.amendment_name,
      licenses_missing_subscriptions.subscription_version,
      licenses_missing_subscriptions.subscription_status,
      licenses_missing_subscriptions.subscription_start_date,
      licenses_missing_subscriptions.subscription_end_date,
      licenses_missing_subscriptions.amendment_type,
      licenses_missing_subscriptions.subscription_name,
      licenses_missing_subscriptions.dim_billing_account_id_invoice_owner,
      licenses_missing_subscriptions.last_subscription_start_date,
      licenses_missing_subscriptions.last_subscription_end_date,
      licenses_missing_subscriptions.zuora_renewal_subscription_name,
      licenses_missing_subscriptions.does_subscription_name_contains_amendments_issue_license,
      licenses_missing_subscriptions.dbt_updated_at,

      licenses_with_subscriptions.dim_license_id,
      licenses_with_subscriptions.license_md5,
      licenses_with_subscriptions.license_sha256,
      licenses_with_subscriptions.dim_environment_id,
      licenses_with_subscriptions.environment,
      licenses_with_subscriptions.license_plan,
      licenses_with_subscriptions.license_start_date,
      licenses_with_subscriptions.license_expire_date
    FROM licenses_missing_subscriptions
    LEFT JOIN licenses_with_subscriptions
      ON licenses_missing_subscriptions.does_subscription_name_contains_amendments_issue_license = FALSE
      AND licenses_missing_subscriptions.last_subscription_start_date = licenses_with_subscriptions.last_subscription_end_date 
      AND licenses_missing_subscriptions.subscription_name = licenses_with_subscriptions.zuora_renewal_subscription_name
      AND licenses_missing_subscriptions.dim_billing_account_id_invoice_owner != licenses_with_subscriptions.dim_billing_account_id_invoice_owner
    WHERE licenses_with_subscriptions.dim_subscription_id IS NOT NULL

    UNION

    SELECT
      'Has license' AS license_status,
      *
    FROM licenses_with_subscriptions
  
), final AS (

    SELECT report.*
    FROM report
    INNER JOIN subscriptions_with_arr_in_current_month
      ON subscriptions_with_arr_in_current_month.subscription_name = report.subscription_name

)

SELECT *
FROM final27:T1b63,{{ config(
    materialized='table',
    tags=["mnpi_exception", "product"]
) }}

{{ simple_cte([
    ('fct_event', 'fct_event'),
    ('dim_user', 'dim_user'),
    ('xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
    ('namespace_order_subscription', 'bdg_namespace_order_subscription'),
    ('dim_subscription', 'dim_subscription'),
    ('dim_namespace', 'dim_namespace')
    ])
}},

fct_event_valid AS (
    
    /*
    fct_event_valid is at the atomic grain of event_id and event_created_at timestamp. All other derived facts in the GitLab.com usage events 
    lineage are built from this derived fact. This CTE pulls in ALL of the columns from the fct_event as a base data set. It uses the dbt_utils.star function 
    to select all columns except the meta data table related columns from the fct_event. The CTE also filters out imported projects and events with 
    data quality issues by filtering out negative days since user creation at event date. It keeps events with a NULL days since user creation to capture events
    that do not have a user. fct_event_valid also filters out events from blocked users with a join back to dim_user. The table also filters to a rolling 36 months of data 
    for performance optimization.
    */

    SELECT
      fct_event.dim_user_sk,
      fct_event.dim_user_id,--dim_user_id is the current foreign key, and is a natural_key, and will be updated to user_id in a future MR.
      {{ dbt_utils.star(from=ref('fct_event'), except=["DIM_USER_SK", "DIM_USER_ID", "CREATED_BY",
          "UPDATED_BY","CREATED_DATE","UPDATED_DATE","MODEL_CREATED_DATE","MODEL_UPDATED_DATE","DBT_UPDATED_AT","DBT_CREATED_AT"]) }},
      xmau_metrics.group_name,
      xmau_metrics.section_name,
      xmau_metrics.stage_name,
      xmau_metrics.smau AS is_smau,
      xmau_metrics.gmau AS is_gmau,
      xmau_metrics.is_umau
    FROM fct_event
    LEFT JOIN xmau_metrics
      ON fct_event.event_name = xmau_metrics.common_events_to_include
    LEFT JOIN dim_user
      ON fct_event.dim_user_sk = dim_user.dim_user_sk
    WHERE event_created_at >= DATEADD(MONTH, -36, DATE_TRUNC(MONTH,CURRENT_DATE)) 
      AND (fct_event.days_since_user_creation_at_event_date >= 0
           OR fct_event.days_since_user_creation_at_event_date IS NULL)
      AND (dim_user.is_blocked_user = FALSE 
           OR dim_user.is_blocked_user IS NULL)

),

deduped_namespace_bdg AS (

  SELECT
    namespace_order_subscription.dim_subscription_id AS dim_latest_subscription_id,
    namespace_order_subscription.order_id,
    namespace_order_subscription.dim_crm_account_id,
    namespace_order_subscription.dim_billing_account_id,
    namespace_order_subscription.dim_namespace_id
  FROM namespace_order_subscription
  INNER JOIN dim_subscription
    ON namespace_order_subscription.dim_subscription_id = dim_subscription.dim_subscription_id
  WHERE namespace_order_subscription.product_tier_name_subscription IN ('SaaS - Bronze', 'SaaS - Ultimate', 'SaaS - Premium')
  QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_namespace_id ORDER BY subscription_version DESC) = 1

),

dim_namespace_w_bdg AS (

  SELECT
    dim_namespace.dim_namespace_id,
    dim_namespace.dim_product_tier_id AS dim_latest_product_tier_id,
    deduped_namespace_bdg.dim_latest_subscription_id,
    deduped_namespace_bdg.order_id,
    deduped_namespace_bdg.dim_crm_account_id,
    deduped_namespace_bdg.dim_billing_account_id
  FROM deduped_namespace_bdg
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = deduped_namespace_bdg.dim_namespace_id

),

paid_flag_by_day AS (

  SELECT
    dim_ultimate_parent_namespace_id,
    plan_was_paid_at_event_timestamp AS plan_was_paid_at_event_date,
    plan_id_at_event_timestamp AS plan_id_at_event_date,
    plan_name_at_event_timestamp AS plan_name_at_event_date,
    event_created_at,
    event_date
  FROM fct_event_valid
  QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_ultimate_parent_namespace_id, event_date
      ORDER BY event_created_at DESC) = 1

),

fct_event_w_flags AS (

  SELECT 
    fct_event_valid.event_pk,
    fct_event_valid.dim_event_date_id,
    fct_event_valid.dim_ultimate_parent_namespace_id,
    fct_event_valid.dim_project_id,
    fct_event_valid.dim_user_sk,
    fct_event_valid.dim_user_id,--dim_user_id is the current foreign key, and is a natural_key, and will be deprecated in a future MR.
    fct_event_valid.is_null_user,
    fct_event_valid.event_created_at,
    fct_event_valid.event_date,
    fct_event_valid.group_name,
    fct_event_valid.section_name,
    fct_event_valid.stage_name,
    fct_event_valid.is_smau,
    fct_event_valid.is_gmau,
    fct_event_valid.is_umau,
    fct_event_valid.parent_id,
    fct_event_valid.parent_type,
    fct_event_valid.event_name,
    fct_event_valid.days_since_user_creation_at_event_date,
    fct_event_valid.days_since_namespace_creation_at_event_date,
    fct_event_valid.days_since_project_creation_at_event_date,
    fct_event_valid.data_source,
    dim_namespace_w_bdg.dim_latest_product_tier_id,
    dim_namespace_w_bdg.dim_latest_subscription_id,
    dim_namespace_w_bdg.order_id,
    dim_namespace_w_bdg.dim_crm_account_id,
    dim_namespace_w_bdg.dim_billing_account_id,
    COALESCE(paid_flag_by_day.plan_was_paid_at_event_date, FALSE) AS plan_was_paid_at_event_date,
    COALESCE(paid_flag_by_day.plan_id_at_event_date, 34) AS plan_id_at_event_date,
    COALESCE(paid_flag_by_day.plan_name_at_event_date, 'free') AS plan_name_at_event_date
  FROM fct_event_valid
  LEFT JOIN dim_namespace_w_bdg
    ON fct_event_valid.dim_ultimate_parent_namespace_id = dim_namespace_w_bdg.dim_namespace_id
  LEFT JOIN paid_flag_by_day
    ON fct_event_valid.dim_ultimate_parent_namespace_id = paid_flag_by_day.dim_ultimate_parent_namespace_id
      AND fct_event_valid.event_date = paid_flag_by_day.event_date

),

gitlab_dotcom_fact AS (

  SELECT
    --Primary Key
    event_pk,
    
    --Foreign Keys
    dim_event_date_id,
    dim_ultimate_parent_namespace_id,
    dim_project_id,
    dim_user_sk,
    dim_user_id,--dim_user_id is the current foreign key, and is a natural_key, and will be updated to user_id in a future MR.
    dim_latest_product_tier_id,
    dim_latest_subscription_id,
    dim_crm_account_id,
    dim_billing_account_id,
    order_id,
    
    --Time attributes
    event_created_at,
    event_date,
    
    --Degenerate Dimensions (No stand-alone, promoted dimension table)
    is_null_user,
    group_name,
    section_name,
    stage_name,
    is_smau,
    is_gmau,
    is_umau,
    parent_id,
    parent_type,
    event_name,
    plan_id_at_event_date,
    plan_name_at_event_date,
    plan_was_paid_at_event_date,
    days_since_user_creation_at_event_date,
    days_since_namespace_creation_at_event_date,
    days_since_project_creation_at_event_date,
    data_source
  FROM fct_event_w_flags

)

{{ dbt_audit(
    cte_ref="gitlab_dotcom_fact",
    created_by="@iweeks",
    updated_by="@michellecooper",
    created_date="2022-04-09",
    updated_date="2023-05-12"
) }}28:T8f3,**Description:** Atomic level GitLab.com usage event data with only valid events
- [Targets and Actions](https://docs.gitlab.com/ee/api/events.html) activity by Users and [Namespaces](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/namespace/) within the GitLab.com application are captured and refreshed periodically throughout the day.  Targets are objects ie. issue, milestone, merge_request and Actions have effect on Targets, ie. approved, closed, commented, created, etc.

**Data Grain:**
- event_pk

**Filters Applied to Model:**
- Include valid events for standard analysis and reporting:
  - Exclude events where the event created date < the user created date (`days_since_user_creation_at_event_date >= 0`)
    - These are usually events from projects that were created before the GitLab.com user and then imported after the user is created 
  - Exclude events from blocked users (based on the current user state)
- Rolling 36 months of data

**Business Logic in this Model:**
- A namespace's plan information (ex: `plan_name_at_event_date`) is determined by the plan for the last event on a given day
- The ultimate parent namespace's subscription, billing, and account information (ex: `dim_latest_subscription_id`) reflects the most recent available attributes associated with that namespace
- `dim_latest_product_tier_id` reflects the _current_ product tier of the namespace
- Not all events have a user associated with them (ex: 'milestones'), and not all events have a namespace associated with them (ex: 'users_created'). Therefore it is expected that `dim_user_sk` or `dim_ultimate_parent_namespace_id` will be NULL for these events
- `section_name`, `stage_name`, `group_name`, and xMAU metric flags (ex: `is_gmau`) are based on the _current_ event mappings and may not match the mapping at the time of the event

**Other Comments:**
- Note about the `action` event: This "event" captures everything from the [Events API](https://docs.gitlab.com/ee/api/events.html) - issue comments, MRs created, etc. While the `action` event is mapped to the Manage stage, the events included actually span multiple stages (plan, create, etc), which is why this is used for UMAU. Be mindful of the impact of including `action` during stage adoption analysis.29:T1db1,



WITH fct_event AS (

    SELECT * 
    FROM "PROD".common.fct_event

), dim_user AS (

    SELECT * 
    FROM "PROD".common.dim_user

), xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), namespace_order_subscription AS (

    SELECT * 
    FROM "PROD".common.bdg_namespace_order_subscription

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

),

fct_event_valid AS (
    
    /*
    fct_event_valid is at the atomic grain of event_id and event_created_at timestamp. All other derived facts in the GitLab.com usage events 
    lineage are built from this derived fact. This CTE pulls in ALL of the columns from the fct_event as a base data set. It uses the dbt_utils.star function 
    to select all columns except the meta data table related columns from the fct_event. The CTE also filters out imported projects and events with 
    data quality issues by filtering out negative days since user creation at event date. It keeps events with a NULL days since user creation to capture events
    that do not have a user. fct_event_valid also filters out events from blocked users with a join back to dim_user. The table also filters to a rolling 36 months of data 
    for performance optimization.
    */

    SELECT
      fct_event.dim_user_sk,
      fct_event.dim_user_id,--dim_user_id is the current foreign key, and is a natural_key, and will be updated to user_id in a future MR.
      "EVENT_PK",
  "DIM_EVENT_DATE_ID",
  "DIM_ULTIMATE_PARENT_NAMESPACE_ID",
  "DIM_PROJECT_ID",
  "EVENT_CREATED_AT",
  "EVENT_DATE",
  "IS_NULL_USER",
  "PARENT_ID",
  "PARENT_TYPE",
  "EVENT_NAME",
  "PLAN_ID_AT_EVENT_TIMESTAMP",
  "PLAN_NAME_AT_EVENT_TIMESTAMP",
  "PLAN_WAS_PAID_AT_EVENT_TIMESTAMP",
  "DAYS_SINCE_USER_CREATION_AT_EVENT_DATE",
  "DAYS_SINCE_NAMESPACE_CREATION_AT_EVENT_DATE",
  "DAYS_SINCE_PROJECT_CREATION_AT_EVENT_DATE",
  "DATA_SOURCE",
      xmau_metrics.group_name,
      xmau_metrics.section_name,
      xmau_metrics.stage_name,
      xmau_metrics.smau AS is_smau,
      xmau_metrics.gmau AS is_gmau,
      xmau_metrics.is_umau
    FROM fct_event
    LEFT JOIN xmau_metrics
      ON fct_event.event_name = xmau_metrics.common_events_to_include
    LEFT JOIN dim_user
      ON fct_event.dim_user_sk = dim_user.dim_user_sk
    WHERE event_created_at >= DATEADD(MONTH, -36, DATE_TRUNC(MONTH,CURRENT_DATE)) 
      AND (fct_event.days_since_user_creation_at_event_date >= 0
           OR fct_event.days_since_user_creation_at_event_date IS NULL)
      AND (dim_user.is_blocked_user = FALSE 
           OR dim_user.is_blocked_user IS NULL)

),

deduped_namespace_bdg AS (

  SELECT
    namespace_order_subscription.dim_subscription_id AS dim_latest_subscription_id,
    namespace_order_subscription.order_id,
    namespace_order_subscription.dim_crm_account_id,
    namespace_order_subscription.dim_billing_account_id,
    namespace_order_subscription.dim_namespace_id
  FROM namespace_order_subscription
  INNER JOIN dim_subscription
    ON namespace_order_subscription.dim_subscription_id = dim_subscription.dim_subscription_id
  WHERE namespace_order_subscription.product_tier_name_subscription IN ('SaaS - Bronze', 'SaaS - Ultimate', 'SaaS - Premium')
  QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_namespace_id ORDER BY subscription_version DESC) = 1

),

dim_namespace_w_bdg AS (

  SELECT
    dim_namespace.dim_namespace_id,
    dim_namespace.dim_product_tier_id AS dim_latest_product_tier_id,
    deduped_namespace_bdg.dim_latest_subscription_id,
    deduped_namespace_bdg.order_id,
    deduped_namespace_bdg.dim_crm_account_id,
    deduped_namespace_bdg.dim_billing_account_id
  FROM deduped_namespace_bdg
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = deduped_namespace_bdg.dim_namespace_id

),

paid_flag_by_day AS (

  SELECT
    dim_ultimate_parent_namespace_id,
    plan_was_paid_at_event_timestamp AS plan_was_paid_at_event_date,
    plan_id_at_event_timestamp AS plan_id_at_event_date,
    plan_name_at_event_timestamp AS plan_name_at_event_date,
    event_created_at,
    event_date
  FROM fct_event_valid
  QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_ultimate_parent_namespace_id, event_date
      ORDER BY event_created_at DESC) = 1

),

fct_event_w_flags AS (

  SELECT 
    fct_event_valid.event_pk,
    fct_event_valid.dim_event_date_id,
    fct_event_valid.dim_ultimate_parent_namespace_id,
    fct_event_valid.dim_project_id,
    fct_event_valid.dim_user_sk,
    fct_event_valid.dim_user_id,--dim_user_id is the current foreign key, and is a natural_key, and will be deprecated in a future MR.
    fct_event_valid.is_null_user,
    fct_event_valid.event_created_at,
    fct_event_valid.event_date,
    fct_event_valid.group_name,
    fct_event_valid.section_name,
    fct_event_valid.stage_name,
    fct_event_valid.is_smau,
    fct_event_valid.is_gmau,
    fct_event_valid.is_umau,
    fct_event_valid.parent_id,
    fct_event_valid.parent_type,
    fct_event_valid.event_name,
    fct_event_valid.days_since_user_creation_at_event_date,
    fct_event_valid.days_since_namespace_creation_at_event_date,
    fct_event_valid.days_since_project_creation_at_event_date,
    fct_event_valid.data_source,
    dim_namespace_w_bdg.dim_latest_product_tier_id,
    dim_namespace_w_bdg.dim_latest_subscription_id,
    dim_namespace_w_bdg.order_id,
    dim_namespace_w_bdg.dim_crm_account_id,
    dim_namespace_w_bdg.dim_billing_account_id,
    COALESCE(paid_flag_by_day.plan_was_paid_at_event_date, FALSE) AS plan_was_paid_at_event_date,
    COALESCE(paid_flag_by_day.plan_id_at_event_date, 34) AS plan_id_at_event_date,
    COALESCE(paid_flag_by_day.plan_name_at_event_date, 'free') AS plan_name_at_event_date
  FROM fct_event_valid
  LEFT JOIN dim_namespace_w_bdg
    ON fct_event_valid.dim_ultimate_parent_namespace_id = dim_namespace_w_bdg.dim_namespace_id
  LEFT JOIN paid_flag_by_day
    ON fct_event_valid.dim_ultimate_parent_namespace_id = paid_flag_by_day.dim_ultimate_parent_namespace_id
      AND fct_event_valid.event_date = paid_flag_by_day.event_date

),

gitlab_dotcom_fact AS (

  SELECT
    --Primary Key
    event_pk,
    
    --Foreign Keys
    dim_event_date_id,
    dim_ultimate_parent_namespace_id,
    dim_project_id,
    dim_user_sk,
    dim_user_id,--dim_user_id is the current foreign key, and is a natural_key, and will be updated to user_id in a future MR.
    dim_latest_product_tier_id,
    dim_latest_subscription_id,
    dim_crm_account_id,
    dim_billing_account_id,
    order_id,
    
    --Time attributes
    event_created_at,
    event_date,
    
    --Degenerate Dimensions (No stand-alone, promoted dimension table)
    is_null_user,
    group_name,
    section_name,
    stage_name,
    is_smau,
    is_gmau,
    is_umau,
    parent_id,
    parent_type,
    event_name,
    plan_id_at_event_date,
    plan_name_at_event_date,
    plan_was_paid_at_event_date,
    days_since_user_creation_at_event_date,
    days_since_namespace_creation_at_event_date,
    days_since_project_creation_at_event_date,
    data_source
  FROM fct_event_w_flags

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-04-09'::DATE        AS model_created_date,
      '2023-05-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM gitlab_dotcom_fact2a:T2d22,/* This table needs to be permanent to allow zero cloning at specific timestamps */
{{ config({
        "materialized": "table",
        "transient": false
    })
}}

WITH dim_billing_account AS (

  SELECT *
  FROM {{ ref('dim_billing_account') }}

), dim_crm_account AS (

  SELECT *
  FROM {{ ref('dim_crm_account') }}

), dim_date AS (

  SELECT *
  FROM {{ ref('dim_date') }}

), dim_product_detail AS (

  SELECT *
  FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

  SELECT *
  FROM {{ ref('dim_subscription') }}

), fct_mrr AS (

  SELECT
    dim_date_id,
    dim_subscription_id,
    dim_product_detail_id,
    dim_billing_account_id,
    dim_crm_account_id,
    SUM(mrr)                                                               AS mrr,
    SUM(arr)                                                               AS arr,
    SUM(quantity)                                                          AS quantity,
    ARRAY_AGG(unit_of_measure)                                             AS unit_of_measure
  FROM {{ ref('fct_mrr') }}
  WHERE subscription_status IN ('Active', 'Cancelled')
  {{ dbt_utils.group_by(n=5) }}

), joined AS (

    SELECT
      --primary_key
      {{ dbt_utils.surrogate_key(['fct_mrr.dim_date_id', 'dim_subscription.subscription_name', 'fct_mrr.dim_product_detail_id']) }}
                                                                                      AS primary_key,

      --date info
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.crm_account_employee_count_band                                 AS crm_account_employee_count_band,
      dim_crm_account.parent_crm_account_max_family_employee                          AS parent_crm_account_max_family_employee,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_upa_state                                    AS parent_crm_account_upa_state,
      dim_crm_account.parent_crm_account_upa_city                                     AS parent_crm_account_upa_city,
      dim_crm_account.parent_crm_account_upa_street                                   AS parent_crm_account_upa_street,
      dim_crm_account.parent_crm_account_upa_postal_code                              AS parent_crm_account_upa_postal_code,
      dim_crm_account.parent_crm_account_role_type                                    AS parent_crm_account_role_type,
      dim_crm_account.parent_crm_account_business_unit                                AS parent_crm_account_business_unit,
      dim_crm_account.crm_account_employee_count                                      AS crm_account_employee_count,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      --subscription info
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.dim_subscription_id_original                                   AS dim_subscription_id_original,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name                                              AS subscription_name,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,

      --product info
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      -- MRR values
      --  not needed as all charges in fct_mrr are recurring
      --  fct_mrr.charge_type,
      fct_mrr.unit_of_measure                                                         AS unit_of_measure,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.arr                                                                     AS arr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id

), cohort_diffs AS (

  SELECT
    joined.*,
    datediff(month, billing_account_cohort_month, arr_month)     AS months_since_billing_account_cohort_start,
    datediff(quarter, billing_account_cohort_quarter, arr_month) AS quarters_since_billing_account_cohort_start,
    datediff(month, crm_account_cohort_month, arr_month)         AS months_since_crm_account_cohort_start,
    datediff(quarter, crm_account_cohort_quarter, arr_month)     AS quarters_since_crm_account_cohort_start,
    datediff(month, parent_account_cohort_month, arr_month)      AS months_since_parent_account_cohort_start,
    datediff(quarter, parent_account_cohort_quarter, arr_month)  AS quarters_since_parent_account_cohort_start,
    datediff(month, subscription_cohort_month, arr_month)        AS months_since_subscription_cohort_start,
    datediff(quarter, subscription_cohort_quarter, arr_month)    AS quarters_since_subscription_cohort_start
  FROM joined

), parent_arr AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      SUM(arr)                                   AS arr
    FROM joined
    {{ dbt_utils.group_by(n=2) }}

), parent_arr_band_calc AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
        WHEN arr > 5000 THEN 'ARR > $5K'
        WHEN arr <= 5000 THEN 'ARR <= $5K'
      END                                        AS arr_band_calc
    FROM parent_arr

), final_table AS (

    SELECT
      cohort_diffs.*,
      arr_band_calc
    FROM cohort_diffs
    LEFT JOIN parent_arr_band_calc
      ON cohort_diffs.arr_month = parent_arr_band_calc.arr_month
      AND cohort_diffs.dim_parent_crm_account_id = parent_arr_band_calc.dim_parent_crm_account_id

)

{{ dbt_audit(
    cte_ref="final_table",
    created_by="@iweeks",
    updated_by="@lisvinueza",
    created_date="2021-12-30",
    updated_date="2023-05-21"
) }}2b:T2e42,/* This table needs to be permanent to allow zero cloning at specific timestamps */


WITH dim_billing_account AS (

  SELECT *
  FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

  SELECT *
  FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

  SELECT *
  FROM "PROD".common.dim_date

), dim_product_detail AS (

  SELECT *
  FROM "PROD".common.dim_product_detail

), dim_subscription AS (

  SELECT *
  FROM "PROD".common.dim_subscription

), fct_mrr AS (

  SELECT
    dim_date_id,
    dim_subscription_id,
    dim_product_detail_id,
    dim_billing_account_id,
    dim_crm_account_id,
    SUM(mrr)                                                               AS mrr,
    SUM(arr)                                                               AS arr,
    SUM(quantity)                                                          AS quantity,
    ARRAY_AGG(unit_of_measure)                                             AS unit_of_measure
  FROM "PROD".restricted_safe_common.fct_mrr
  WHERE subscription_status IN ('Active', 'Cancelled')
  group by 1,2,3,4,5

), joined AS (

    SELECT
      --primary_key
      md5(cast(coalesce(cast(fct_mrr.dim_date_id as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription.subscription_name as 
    varchar
), '') || '-' || coalesce(cast(fct_mrr.dim_product_detail_id as 
    varchar
), '') as 
    varchar
))
                                                                                      AS primary_key,

      --date info
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.crm_account_employee_count_band                                 AS crm_account_employee_count_band,
      dim_crm_account.parent_crm_account_max_family_employee                          AS parent_crm_account_max_family_employee,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_upa_state                                    AS parent_crm_account_upa_state,
      dim_crm_account.parent_crm_account_upa_city                                     AS parent_crm_account_upa_city,
      dim_crm_account.parent_crm_account_upa_street                                   AS parent_crm_account_upa_street,
      dim_crm_account.parent_crm_account_upa_postal_code                              AS parent_crm_account_upa_postal_code,
      dim_crm_account.parent_crm_account_role_type                                    AS parent_crm_account_role_type,
      dim_crm_account.parent_crm_account_business_unit                                AS parent_crm_account_business_unit,
      dim_crm_account.crm_account_employee_count                                      AS crm_account_employee_count,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      --subscription info
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.dim_subscription_id_original                                   AS dim_subscription_id_original,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name                                              AS subscription_name,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,

      --product info
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      -- MRR values
      --  not needed as all charges in fct_mrr are recurring
      --  fct_mrr.charge_type,
      fct_mrr.unit_of_measure                                                         AS unit_of_measure,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.arr                                                                     AS arr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id

), cohort_diffs AS (

  SELECT
    joined.*,
    datediff(month, billing_account_cohort_month, arr_month)     AS months_since_billing_account_cohort_start,
    datediff(quarter, billing_account_cohort_quarter, arr_month) AS quarters_since_billing_account_cohort_start,
    datediff(month, crm_account_cohort_month, arr_month)         AS months_since_crm_account_cohort_start,
    datediff(quarter, crm_account_cohort_quarter, arr_month)     AS quarters_since_crm_account_cohort_start,
    datediff(month, parent_account_cohort_month, arr_month)      AS months_since_parent_account_cohort_start,
    datediff(quarter, parent_account_cohort_quarter, arr_month)  AS quarters_since_parent_account_cohort_start,
    datediff(month, subscription_cohort_month, arr_month)        AS months_since_subscription_cohort_start,
    datediff(quarter, subscription_cohort_quarter, arr_month)    AS quarters_since_subscription_cohort_start
  FROM joined

), parent_arr AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      SUM(arr)                                   AS arr
    FROM joined
    group by 1,2

), parent_arr_band_calc AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
        WHEN arr > 5000 THEN 'ARR > $5K'
        WHEN arr <= 5000 THEN 'ARR <= $5K'
      END                                        AS arr_band_calc
    FROM parent_arr

), final_table AS (

    SELECT
      cohort_diffs.*,
      arr_band_calc
    FROM cohort_diffs
    LEFT JOIN parent_arr_band_calc
      ON cohort_diffs.arr_month = parent_arr_band_calc.arr_month
      AND cohort_diffs.dim_parent_crm_account_id = parent_arr_band_calc.dim_parent_crm_account_id

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-12-30'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final_table2c:T3259,{{ simple_cte([
    ('dim_subscription', 'dim_subscription'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_date', 'dim_date'),
    ('dim_crm_account', 'dim_crm_account')
]) }}

, prep_charge AS (

    SELECT *
    FROM {{ ref('prep_charge') }}
    WHERE is_manual_charge = 0

), mrr AS (

    SELECT
      md5(cast(coalesce(cast(dim_date.date_id as varchar), '') || '-' || coalesce(cast(prep_charge.dim_charge_id as varchar), '') as varchar))       AS mrr_id,
      dim_date.date_id                                                                      AS dim_date_id,
      prep_charge.dim_charge_id,
      prep_charge.dim_product_detail_id,
      prep_charge.dim_subscription_id,
      prep_charge.dim_billing_account_id,
      prep_charge.dim_crm_account_id,
      prep_charge.subscription_status,
      prep_charge.unit_of_measure,
      SUM(prep_charge.mrr)                                                                  AS mrr,
      SUM(prep_charge.arr)                                                                  AS arr,
      SUM(prep_charge.quantity)                                                             AS quantity
    FROM prep_charge
    INNER JOIN dim_date
      ON prep_charge.effective_start_month <= dim_date.date_actual
      AND (prep_charge.effective_end_month > dim_date.date_actual
        OR prep_charge.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    WHERE subscription_status != 'Draft'
      AND charge_type = 'Recurring'
      /* This excludes Education customers (charge name EDU or OSS) with free subscriptions.
         Pull in seats from Paid EDU Plans with no ARR */
      AND (mrr != 0 OR LOWER(prep_charge.rate_plan_charge_name) = 'max enrollment')
    {{ dbt_utils.group_by(n=9) }}

), fct_mrr AS (

  SELECT
    dim_date_id,
    dim_subscription_id,
    dim_product_detail_id,
    dim_billing_account_id,
    dim_crm_account_id,
    SUM(mrr)                                                                      AS mrr,
    SUM(arr)                                                                      AS arr,
    SUM(quantity)                                                                 AS quantity,
    ARRAY_AGG(DISTINCT unit_of_measure) WITHIN GROUP (ORDER BY unit_of_measure)   AS unit_of_measure
  FROM mrr
  WHERE subscription_status IN ('Active', 'Cancelled')
  {{ dbt_utils.group_by(n=5) }}

), joined AS (

    SELECT
      --primary_key
      {{ dbt_utils.surrogate_key(['fct_mrr.dim_date_id', 'dim_subscription.subscription_name', 'fct_mrr.dim_product_detail_id']) }} AS primary_key,

      --date info
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_max_family_employee                          AS parent_crm_account_max_family_employees,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,
      dim_crm_account.parent_crm_account_lam                                          AS parent_crm_account_lam,
      dim_crm_account.parent_crm_account_lam_dev_count                                AS parent_crm_account_lam_dev_count,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_geo                                          AS parent_crm_account_geo,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.crm_account_employee_count                                      AS crm_account_employee_count,
      dim_crm_account.crm_account_employee_count_band                                 AS crm_account_employee_count_band,


      --subscription info
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.dim_subscription_id_original                                   AS dim_subscription_id_original,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name                                              AS subscription_name,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --product info
      dim_product_detail.dim_product_detail_id                                        AS dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      -- MRR values
      --  not needed as all charges in fct_mrr are recurring
      --  fct_mrr.charge_type,
      fct_mrr.unit_of_measure                                                         AS unit_of_measure,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.arr                                                                     AS arr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), cohort_diffs AS (

  SELECT
    joined.*,
    DATEDIFF(month, billing_account_cohort_month, arr_month)     AS months_since_billing_account_cohort_start,
    DATEDIFF(quarter, billing_account_cohort_quarter, arr_month) AS quarters_since_billing_account_cohort_start,
    DATEDIFF(month, crm_account_cohort_month, arr_month)         AS months_since_crm_account_cohort_start,
    DATEDIFF(quarter, crm_account_cohort_quarter, arr_month)     AS quarters_since_crm_account_cohort_start,
    DATEDIFF(month, parent_account_cohort_month, arr_month)      AS months_since_parent_account_cohort_start,
    DATEDIFF(quarter, parent_account_cohort_quarter, arr_month)  AS quarters_since_parent_account_cohort_start,
    DATEDIFF(month, subscription_cohort_month, arr_month)        AS months_since_subscription_cohort_start,
    DATEDIFF(quarter, subscription_cohort_quarter, arr_month)    AS quarters_since_subscription_cohort_start
  FROM joined

), parent_arr AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      SUM(arr)                                   AS arr
    FROM joined
    group by 1,2

), parent_arr_band_calc AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
        WHEN arr > 5000 THEN 'ARR > $5K'
        WHEN arr <= 5000 THEN 'ARR <= $5K'
      END                                        AS arr_band_calc
    FROM parent_arr

), final AS (

    SELECT
      cohort_diffs.*,
      arr_band_calc
    FROM cohort_diffs
    LEFT JOIN parent_arr_band_calc
      ON cohort_diffs.arr_month = parent_arr_band_calc.arr_month
      AND cohort_diffs.dim_parent_crm_account_id = parent_arr_band_calc.dim_parent_crm_account_id

)
{{ dbt_audit(
    cte_ref="final",
    created_by="@michellecooper",
    updated_by="@lisvinueza",
    created_date="2022-11-18",
    updated_date="2023-05-22"
) }}2d:T3478,

WITH dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

)

, prep_charge AS (

    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_charge
    WHERE is_manual_charge = 0

), mrr AS (

    SELECT
      md5(cast(coalesce(cast(dim_date.date_id as varchar), '') || '-' || coalesce(cast(prep_charge.dim_charge_id as varchar), '') as varchar))       AS mrr_id,
      dim_date.date_id                                                                      AS dim_date_id,
      prep_charge.dim_charge_id,
      prep_charge.dim_product_detail_id,
      prep_charge.dim_subscription_id,
      prep_charge.dim_billing_account_id,
      prep_charge.dim_crm_account_id,
      prep_charge.subscription_status,
      prep_charge.unit_of_measure,
      SUM(prep_charge.mrr)                                                                  AS mrr,
      SUM(prep_charge.arr)                                                                  AS arr,
      SUM(prep_charge.quantity)                                                             AS quantity
    FROM prep_charge
    INNER JOIN dim_date
      ON prep_charge.effective_start_month <= dim_date.date_actual
      AND (prep_charge.effective_end_month > dim_date.date_actual
        OR prep_charge.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    WHERE subscription_status != 'Draft'
      AND charge_type = 'Recurring'
      /* This excludes Education customers (charge name EDU or OSS) with free subscriptions.
         Pull in seats from Paid EDU Plans with no ARR */
      AND (mrr != 0 OR LOWER(prep_charge.rate_plan_charge_name) = 'max enrollment')
    group by 1,2,3,4,5,6,7,8,9

), fct_mrr AS (

  SELECT
    dim_date_id,
    dim_subscription_id,
    dim_product_detail_id,
    dim_billing_account_id,
    dim_crm_account_id,
    SUM(mrr)                                                                      AS mrr,
    SUM(arr)                                                                      AS arr,
    SUM(quantity)                                                                 AS quantity,
    ARRAY_AGG(DISTINCT unit_of_measure) WITHIN GROUP (ORDER BY unit_of_measure)   AS unit_of_measure
  FROM mrr
  WHERE subscription_status IN ('Active', 'Cancelled')
  group by 1,2,3,4,5

), joined AS (

    SELECT
      --primary_key
      md5(cast(coalesce(cast(fct_mrr.dim_date_id as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription.subscription_name as 
    varchar
), '') || '-' || coalesce(cast(fct_mrr.dim_product_detail_id as 
    varchar
), '') as 
    varchar
)) AS primary_key,

      --date info
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_max_family_employee                          AS parent_crm_account_max_family_employees,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,
      dim_crm_account.parent_crm_account_lam                                          AS parent_crm_account_lam,
      dim_crm_account.parent_crm_account_lam_dev_count                                AS parent_crm_account_lam_dev_count,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_geo                                          AS parent_crm_account_geo,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.crm_account_employee_count                                      AS crm_account_employee_count,
      dim_crm_account.crm_account_employee_count_band                                 AS crm_account_employee_count_band,


      --subscription info
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.dim_subscription_id_original                                   AS dim_subscription_id_original,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name                                              AS subscription_name,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --product info
      dim_product_detail.dim_product_detail_id                                        AS dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      -- MRR values
      --  not needed as all charges in fct_mrr are recurring
      --  fct_mrr.charge_type,
      fct_mrr.unit_of_measure                                                         AS unit_of_measure,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.arr                                                                     AS arr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), cohort_diffs AS (

  SELECT
    joined.*,
    DATEDIFF(month, billing_account_cohort_month, arr_month)     AS months_since_billing_account_cohort_start,
    DATEDIFF(quarter, billing_account_cohort_quarter, arr_month) AS quarters_since_billing_account_cohort_start,
    DATEDIFF(month, crm_account_cohort_month, arr_month)         AS months_since_crm_account_cohort_start,
    DATEDIFF(quarter, crm_account_cohort_quarter, arr_month)     AS quarters_since_crm_account_cohort_start,
    DATEDIFF(month, parent_account_cohort_month, arr_month)      AS months_since_parent_account_cohort_start,
    DATEDIFF(quarter, parent_account_cohort_quarter, arr_month)  AS quarters_since_parent_account_cohort_start,
    DATEDIFF(month, subscription_cohort_month, arr_month)        AS months_since_subscription_cohort_start,
    DATEDIFF(quarter, subscription_cohort_quarter, arr_month)    AS quarters_since_subscription_cohort_start
  FROM joined

), parent_arr AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      SUM(arr)                                   AS arr
    FROM joined
    group by 1,2

), parent_arr_band_calc AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
        WHEN arr > 5000 THEN 'ARR > $5K'
        WHEN arr <= 5000 THEN 'ARR <= $5K'
      END                                        AS arr_band_calc
    FROM parent_arr

), final AS (

    SELECT
      cohort_diffs.*,
      arr_band_calc
    FROM cohort_diffs
    LEFT JOIN parent_arr_band_calc
      ON cohort_diffs.arr_month = parent_arr_band_calc.arr_month
      AND cohort_diffs.dim_parent_crm_account_id = parent_arr_band_calc.dim_parent_crm_account_id

)
SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2022-11-18'::DATE        AS model_created_date,
      '2023-05-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final2e:T98ef,{{ simple_cte([
    ('prep_label_links', 'prep_label_links'),
    ('prep_labels', 'prep_labels'),
    ('bdg_epic_user_request', 'bdg_epic_user_request'),
    ('bdg_issue_user_request', 'bdg_issue_user_request'),
    ('dim_epic', 'dim_epic'),
    ('dim_issue', 'dim_issue'),
    ('fct_mrr', 'fct_mrr'),
    ('dim_date', 'dim_date'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_crm_account', 'dim_crm_account'),
    ('dim_subscription', 'dim_subscription'),
    ('fct_crm_opportunity', 'fct_crm_opportunity'),
    ('dim_crm_user', 'dim_crm_user'),
    ('fct_quote_item', 'fct_quote_item'),
    ('dim_quote', 'dim_quote'),
    ('dim_crm_opportunity', 'dim_crm_opportunity'),
    ('dim_order_type', 'dim_order_type'),
    ('dim_crm_user', 'dim_crm_user')
])}}

, opportunity_seats AS (

    SELECT
      dim_crm_opportunity.dim_crm_opportunity_id,
      dim_crm_opportunity.dim_crm_account_id,
      dim_crm_opportunity.stage_name,
      fct_crm_opportunity.is_closed,
      dim_crm_opportunity.order_type,
      SUM(fct_quote_item.quantity)              AS quantity
    FROM fct_quote_item
    INNER JOIN dim_crm_opportunity
      ON dim_crm_opportunity.dim_crm_opportunity_id = fct_quote_item.dim_crm_opportunity_id
    INNER JOIN fct_crm_opportunity
      ON fct_crm_opportunity.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    INNER JOIN dim_quote
      ON dim_quote.dim_quote_id = fct_quote_item.dim_quote_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_quote_item.dim_product_detail_id
    WHERE dim_quote.is_primary_quote = TRUE
      AND dim_product_detail.product_tier_name IN ('Plus', 'GitHost', 'Standard', 'Self-Managed - Starter', 'Self-Managed - Premium',
        'SaaS - Premium', 'SaaS - Bronze', 'Basic', 'Self-Managed - Ultimate', 'SaaS - Ultimate', 'Dedicated - Ultimate')
      AND fct_crm_opportunity.close_date >= '2019-02-01'
    {{ dbt_utils.group_by(5) }}

), account_open_fo_opp_seats AS (

    SELECT
      dim_crm_account_id,
      SUM(quantity) AS seats
    FROM opportunity_seats
    WHERE order_type = '1. New - First Order'
      AND is_closed = FALSE
    GROUP BY 1

), opportunity_net_arr AS (

    SELECT
      fct_crm_opportunity.dim_crm_opportunity_id,
      fct_crm_opportunity.dim_crm_account_id,
      dim_crm_opportunity.stage_name,
      fct_crm_opportunity.is_closed,
      dim_order_type.order_type_name,
      fct_crm_opportunity.net_arr,
      fct_crm_opportunity.arr_basis
    FROM fct_crm_opportunity
    INNER JOIN dim_order_type
      ON dim_order_type.dim_order_type_id = fct_crm_opportunity.dim_order_type_id
    INNER JOIN dim_crm_opportunity
      ON dim_crm_opportunity.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id
    WHERE fct_crm_opportunity.close_date >= '2019-02-01' -- Net ARR is only good after 2019-02-01

), account_lost_opp_arr AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE order_type_name IN ('1. New - First Order')
      AND stage_name IN ('8-Closed Lost')
    GROUP BY 1
  
), account_lost_customer_arr AS (

    SELECT
      dim_crm_account_id,
      SUM(arr_basis)  AS arr_basis
    FROM opportunity_net_arr
    WHERE order_type_name IN ('6. Churn - Final')
      AND stage_name IN ('8-Closed Lost')
    GROUP BY 1

), account_open_opp_net_arr AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE is_closed = FALSE
    GROUP BY 1 

), account_open_opp_net_arr_fo AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE is_closed = FALSE
      AND order_type_name IN ('1. New - First Order')
    GROUP BY 1 

), account_open_opp_net_arr_growth AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE is_closed = FALSE
      AND order_type_name IN ('2. New - Connected', '3. Growth')
    GROUP BY 1 

), account_next_renewal_month AS (

    SELECT
      fct_mrr.dim_crm_account_id,
      MIN(subscription_end_month) AS next_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    WHERE dim_subscription.subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)
      AND fct_mrr.subscription_status IN ('Active', 'Cancelled')
    GROUP BY 1

), arr_metrics_current_month AS (

    SELECT
      fct_mrr.dim_crm_account_id,
      SUM(fct_mrr.mrr)                                                               AS mrr,
      SUM(fct_mrr.arr)                                                               AS arr,
      SUM(fct_mrr.quantity)                                                          AS quantity
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    WHERE subscription_status IN ('Active', 'Cancelled')
      AND dim_date.date_actual = DATE_TRUNC('month', CURRENT_DATE)
      AND dim_product_detail.product_tier_name IN ('Plus', 'GitHost', 'Standard', 'Self-Managed - Starter', 'Self-Managed - Premium',
        'SaaS - Premium', 'SaaS - Bronze', 'Basic', 'Self-Managed - Ultimate', 'SaaS - Ultimate', 'Dedicated - Ultimate')
    GROUP BY 1

), epic_weight AS (

    SELECT
      dim_epic_id,
      SUM(weight)                                                             AS epic_weight,
      SUM(IFF(state_name = 'closed', weight, 0)) / NULLIFZERO(epic_weight)    AS epic_completeness,
      SUM(IFF(state_name = 'closed', 1, 0)) / COUNT(*)                        AS epic_completeness_alternative,
      COALESCE(epic_completeness, epic_completeness_alternative)              AS epic_status
    FROM dim_issue
    GROUP BY 1
    
), label_links_joined AS (

    SELECT
      prep_label_links.*,
      prep_labels.label_title
    FROM prep_label_links
    LEFT JOIN prep_labels
      ON prep_label_links.dim_label_id = prep_labels.dim_label_id

), issue_labels AS (

    SELECT 
      label_links_joined.dim_issue_id,
      IFF(LOWER(label_links_joined.label_title) LIKE 'group::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)    AS group_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'devops::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)   AS devops_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'section::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)  AS section_label,
      COALESCE(group_label, devops_label, section_label)                                                                       AS product_group_extended,

      IFF(LOWER(label_links_joined.label_title) LIKE 'category:%', SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)   AS category_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'type::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)     AS type_label,

      IFF(LOWER(label_links_joined.label_title) LIKE 'theme:%'
        AND NOT CONTAINS(label_links_joined.label_title, '::'), -- This second condition makes sure we are not matching the scoped label theme::*, only the non scoped theme:*
          SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)                                                             AS theme_label,
      CASE
        WHEN group_label IS NOT NULL THEN 3
        WHEN devops_label IS NOT NULL THEN 2
        WHEN section_label IS NOT NULL THEN 1
        ELSE 0
      END product_group_level
    FROM label_links_joined

), epic_labels AS (

    SELECT 
      label_links_joined.dim_epic_id,
      IFF(LOWER(label_links_joined.label_title) LIKE 'group::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)    AS group_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'devops::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)   AS devops_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'section::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)  AS section_label,
      COALESCE(group_label, devops_label, section_label)                                                                       AS product_group_extended,

      IFF(LOWER(label_links_joined.label_title) LIKE 'category:%', SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)   AS category_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'type::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)     AS type_label,

      IFF(LOWER(label_links_joined.label_title) LIKE 'theme:%'
        AND NOT CONTAINS(label_links_joined.label_title, '::'), -- This second condition makes sure we are not matching the scoped label theme::*, only the non scoped theme:*
          SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)                                                             AS theme_label,

      CASE
        WHEN group_label IS NOT NULL THEN 3
        WHEN devops_label IS NOT NULL THEN 2
        WHEN section_label IS NOT NULL THEN 1
        ELSE 0
      END product_group_level
    FROM label_links_joined

), issue_theme_labels AS (

    SELECT
      dim_issue_id,
      ARRAY_AGG(theme_label) WITHIN GROUP (ORDER BY theme_label) AS theme_labels
    FROM issue_labels
    GROUP BY 1

), epic_theme_labels AS (

    SELECT
      dim_epic_id,
      ARRAY_AGG(theme_label) WITHIN GROUP (ORDER BY theme_label) AS theme_labels
    FROM epic_labels
    GROUP BY 1

), issue_group_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the group::* label

    SELECT
      dim_issue_id,
      group_label
    FROM issue_labels
    WHERE group_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY group_label) = 1

), issue_group_extended_label AS (

    SELECT
      dim_issue_id,
      product_group_extended
    FROM issue_labels
    WHERE product_group_extended IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY product_group_level DESC) = 1

), issue_category_dedup AS ( -- Since category: is not an scoped label, need to make sure I only pull one of them
  
    SELECT
      dim_issue_id,
      category_label
    FROM issue_labels
    WHERE category_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY category_label DESC) = 1
  
), issue_type_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the type::* label

    SELECT
      dim_issue_id,
      type_label
    FROM issue_labels
    WHERE type_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY type_label) = 1

), issue_devops_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the devops::* label

    SELECT
      dim_issue_id,
      devops_label
    FROM issue_labels
    WHERE devops_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY devops_label) = 1

), issue_status AS ( -- Some issues for some reason had two valid workflow labels, this dedup them

    SELECT
      label_links_joined.dim_issue_id,
      IFF(LOWER(label_links_joined.label_title) LIKE 'workflow::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)   AS workflow_label
    FROM label_links_joined
    WHERE workflow_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY workflow_label DESC) = 1 

), epic_group_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the group::* label

    SELECT
      dim_epic_id,
      group_label
    FROM epic_labels
    WHERE group_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY group_label) = 1

), epic_group_extended_label AS (

    SELECT
      dim_epic_id,
      product_group_extended
    FROM epic_labels
    WHERE product_group_extended IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY product_group_level DESC) = 1

), epic_category_dedup AS ( -- Since category: is not an scoped label, need to make sure I only pull one of them
  
    SELECT
      dim_epic_id,
      category_label
    FROM epic_labels
    WHERE category_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY category_label DESC) = 1
  
), epic_type_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the type::* label

    SELECT
      dim_epic_id,
      type_label
    FROM epic_labels
    WHERE type_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY type_label) = 1

), epic_devops_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the devops::* label

    SELECT
      dim_epic_id,
      devops_label
    FROM epic_labels
    WHERE devops_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY devops_label) = 1

), epic_last_milestone AS ( -- Get issue milestone with the latest due dates for epics
    
    SELECT
      dim_epic_id,
      milestone_title,
      milestone_due_date
    FROM dim_issue
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY milestone_due_date DESC NULLS LAST) = 1

), user_request AS (

    SELECT
      bdg_issue_user_request.dim_issue_id                                         AS dim_issue_id,
      IFNULL(dim_issue.dim_epic_id, -1)                                           AS dim_epic_id,
      'Issue'                                                                     AS user_request_in,

      bdg_issue_user_request.link_type                                            AS link_type,
      bdg_issue_user_request.dim_crm_opportunity_id                               AS dim_crm_opportunity_id,
      bdg_issue_user_request.dim_crm_account_id                                   AS dim_crm_account_id,
      bdg_issue_user_request.dim_ticket_id                                        AS dim_ticket_id,
      bdg_issue_user_request.request_priority                                     AS request_priority,
      bdg_issue_user_request.is_request_priority_empty                            AS is_request_priority_empty,
      bdg_issue_user_request.is_user_request_only_in_collaboration_project        AS is_user_request_only_in_collaboration_project,
      bdg_issue_user_request.link_last_updated_at                                 AS link_last_updated_at,
      bdg_issue_user_request.link_last_updated_at::DATE                           AS link_last_updated_date,
      DATE_TRUNC('month', bdg_issue_user_request.link_last_updated_at::DATE)      AS link_last_updated_month,

      IFF(link_type = 'Opportunity', 'https://gitlab.my.salesforce.com/' || bdg_issue_user_request.dim_crm_opportunity_id, 'No Link')
                                                                                  AS crm_opportunity_link,
      'https://gitlab.my.salesforce.com/' || bdg_issue_user_request.dim_crm_account_id
                                                                                  AS crm_account_link,
      IFF(link_type = 'Zendesk Ticket', 'https://gitlab.zendesk.com/agent/tickets/' || bdg_issue_user_request.dim_ticket_id, 'No Link')
                                                                                  AS ticket_link,

      -- Epic / Issue attributes
      dim_issue.issue_title                                                       AS issue_epic_title,
      dim_issue.issue_url                                                         AS issue_epic_url,
      dim_issue.created_at                                                        AS issue_epic_created_at,
      dim_issue.created_at::DATE                                                  AS issue_epic_created_date,
      DATE_TRUNC('month', dim_issue.created_at::DATE)                             AS issue_epic_created_month,
      dim_issue.state_name                                                        AS issue_epic_state_name,
      dim_issue.issue_closed_at                                                   AS issue_epic_closed_at,
      dim_issue.issue_closed_at::DATE                                             AS issue_epic_closed_date,
      DATE_TRUNC('month', dim_issue.issue_closed_at::DATE)                        AS issue_epic_closed_month,
      dim_issue.milestone_title                                                   AS milestone_title,
      dim_issue.milestone_due_date                                                AS milestone_due_date,
      dim_issue.labels                                                            AS issue_epic_labels,
      CASE
        WHEN ARRAY_CONTAINS('deliverable'::VARIANT, dim_issue.labels) THEN 'Yes'
        WHEN ARRAY_CONTAINS('stretch'::VARIANT, dim_issue.labels) THEN 'Stretch'
        ELSE 'No'
      END                                                                         AS deliverable,
      IFNULL(issue_group_extended_label.product_group_extended, 'Unknown')        AS product_group_extended,
      group_label.group_label                                                     AS product_group,
      category_label.category_label                                               AS product_category,
      devops_label.devops_label                                                   AS product_stage,
      CASE type_label.type_label
        WHEN 'bug' THEN 'bug fix'
        WHEN 'feature' THEN 'feature request'
      END                                                                         AS issue_epic_type,
      IFNULL(issue_status.workflow_label, 'Not Started')                          AS issue_status,
      issue_theme_labels.theme_labels                                             AS theme_labels,
      -1                                                                          AS epic_status,
      dim_epic.epic_url                                                           AS parent_epic_path,
      dim_epic.epic_title                                                         AS parent_epic_title,
      dim_issue.upvote_count                                                      AS upvote_count,
      IFNULL(dim_issue.weight, 0)                                                 AS issue_epic_weight

    FROM bdg_issue_user_request
    LEFT JOIN dim_issue
      ON dim_issue.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_group_extended_label
      ON issue_group_extended_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_status
      ON issue_status.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN dim_epic
      ON dim_epic.dim_epic_id = dim_issue.dim_epic_id
    LEFT JOIN issue_category_dedup AS category_label
      ON category_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_group_label AS group_label
      ON group_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_devops_label AS devops_label
      ON devops_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_type_label AS type_label
      ON type_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_theme_labels
      ON issue_theme_labels.dim_issue_id = bdg_issue_user_request.dim_issue_id

    UNION

    SELECT
      -1                                                                          AS dim_issue_id,
      bdg_epic_user_request.dim_epic_id                                           AS dim_epic_id,
      'Epic'                                                                      AS user_request_in,
      
      bdg_epic_user_request.link_type                                             AS link_type,
      bdg_epic_user_request.dim_crm_opportunity_id                                AS dim_crm_opportunity_id,
      bdg_epic_user_request.dim_crm_account_id                                    AS dim_crm_account_id,
      bdg_epic_user_request.dim_ticket_id                                         AS dim_ticket_id,
      bdg_epic_user_request.request_priority                                      AS request_priority,
      bdg_epic_user_request.is_request_priority_empty                             AS is_request_priority_empty,
      bdg_epic_user_request.is_user_request_only_in_collaboration_project         AS is_user_request_only_in_collaboration_project,
      bdg_epic_user_request.link_last_updated_at                                  AS link_last_updated_at,
      bdg_epic_user_request.link_last_updated_at::DATE                            AS link_last_updated_date,
      DATE_TRUNC('month', bdg_epic_user_request.link_last_updated_at::DATE)       AS link_last_updated_month,

      IFF(link_type = 'Opportunity', 'https://gitlab.my.salesforce.com/' || bdg_epic_user_request.dim_crm_opportunity_id, 'No Link')
                                                                                  AS crm_opportunity_link,
      'https://gitlab.my.salesforce.com/' || bdg_epic_user_request.dim_crm_account_id
                                                                                  AS crm_account_link,
      IFF(link_type = 'Zendesk Ticket', 'https://gitlab.zendesk.com/agent/tickets/' || bdg_epic_user_request.dim_ticket_id, 'No Link')
                                                                                  AS ticket_link,

      -- Epic / Issue attributes
      dim_epic.epic_title                                                         AS epic_title,
      dim_epic.epic_url                                                           AS epic_url,
      dim_epic.created_at                                                         AS issue_epic_created_at,
      dim_epic.created_at::DATE                                                   AS issue_epic_created_date,
      DATE_TRUNC('month', dim_epic.created_at::DATE)                              AS issue_epic_created_month,
      dim_epic.state_name                                                         AS issue_epic_state_name,
      dim_epic.closed_at                                                          AS issue_epic_closed_at,
      dim_epic.closed_at::DATE                                                    AS issue_epic_closed_date,
      DATE_TRUNC('month', dim_epic.closed_at::DATE)                               AS issue_epic_closed_month,
      epic_last_milestone.milestone_title                                         AS milestone_title,
      epic_last_milestone.milestone_due_date                                      AS milestone_due_date,
      dim_epic.labels                                                             AS issue_epic_labels,
      CASE
        WHEN ARRAY_CONTAINS('deliverable'::VARIANT, dim_epic.labels) THEN 'Yes'
        WHEN ARRAY_CONTAINS('stretch'::VARIANT, dim_epic.labels) THEN 'Stretch'
        ELSE 'No'
      END                                                                         AS deliverable,
      IFNULL(epic_group_extended_label.product_group_extended, 'Unknown')         AS product_group_extended,
      group_label.group_label                                                     AS product_group,
      category_label.category_label                                               AS product_category,
      devops_label.devops_label                                                   AS product_stage,
      CASE type_label.type_label
        WHEN 'bug' THEN 'bug fix'
        WHEN 'feature' THEN 'feature request'
      END                                                                         AS issue_epic_type,
      'Not Applicable'                                                            AS issue_status,
      epic_theme_labels.theme_labels                                              AS theme_labels,
      IFNULL(epic_weight.epic_status, 0)                                          AS epic_status,
      parent_epic.epic_url                                                        AS parent_epic_path,
      parent_epic.epic_title                                                      AS parent_epic_title,
      dim_epic.upvote_count                                                       AS upvote_count,
      IFNULL(epic_weight.epic_weight, 0)                                          AS issue_epic_weight

    FROM bdg_epic_user_request
    LEFT JOIN dim_issue
      ON dim_issue.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN dim_epic
      ON dim_epic.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_last_milestone
      ON epic_last_milestone.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_group_extended_label
      ON epic_group_extended_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_weight
      ON epic_weight.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN dim_epic AS parent_epic
      ON parent_epic.dim_epic_id = dim_epic.parent_id
    LEFT JOIN epic_category_dedup AS category_label
      ON category_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_group_label AS group_label
      ON group_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_devops_label AS devops_label
      ON devops_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_type_label AS type_label
      ON type_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_theme_labels
      ON epic_theme_labels.dim_epic_id = bdg_epic_user_request.dim_epic_id

), user_request_with_account_opp_attributes AS (

    SELECT
      {{ dbt_utils.surrogate_key(['user_request.dim_issue_id',
                                  'user_request.dim_epic_id',
                                  'user_request.dim_crm_account_id',
                                  'user_request.dim_crm_opportunity_id',
                                  'user_request.dim_ticket_id']
                                ) }}                                              AS primary_key,
      user_request.*,

      -- CRM Account attributes
      dim_crm_account.crm_account_name                                            AS crm_account_name,
      account_next_renewal_month.next_renewal_month                               AS crm_account_next_renewal_month,
      dim_crm_account.health_score_color                                          AS crm_account_health_score_color,
      dim_crm_account.parent_crm_account_sales_segment                            AS parent_crm_account_sales_segment,
      dim_crm_account.technical_account_manager                                   AS technical_account_manager,
      dim_crm_account.account_owner                                               AS strategic_account_leader,
      IFNULL(arr_metrics_current_month.quantity, 0)                               AS customer_reach,
      IFNULL(arr_metrics_current_month.arr, 0)                                    AS crm_account_arr,
      IFNULL(account_open_opp_net_arr.net_arr, 0)                                 AS crm_account_open_opp_net_arr,
      IFNULL(account_open_opp_net_arr_fo.net_arr, 0)                              AS crm_account_open_opp_net_arr_fo,
      IFNULL(account_open_opp_net_arr_growth.net_arr, 0)                          AS crm_account_open_opp_net_arr_growth,
      IFNULL(account_open_fo_opp_seats.seats, 0)                                  AS opportunity_reach,
      IFNULL(account_lost_opp_arr.net_arr, 0)                                     AS crm_account_lost_opp_net_arr,
      IFNULL(account_lost_customer_arr.arr_basis, 0)                              AS crm_account_lost_customer_arr,
      crm_account_lost_opp_net_arr + crm_account_lost_customer_arr                AS lost_arr,

      -- CRM Opportunity attributes
      dim_crm_opportunity.stage_name                                              AS crm_opp_stage_name,
      fct_crm_opportunity.is_closed                                               AS crm_opp_is_closed,
      fct_crm_opportunity.close_date                                              AS crm_opp_close_date,
      dim_order_type.order_type_name                                              AS crm_opp_order_type,
      dim_order_type.order_type_grouped                                           AS crm_opp_order_type_grouped,
      primary_solution_architect.dim_crm_user_id                                  AS primary_solution_architect_id,
      primary_solution_architect.user_name                                        AS primary_solution_architect_user_name,
      IFF(DATE_TRUNC('month', dim_crm_opportunity.subscription_end_date) >= DATE_TRUNC('month',CURRENT_DATE),
        DATE_TRUNC('month', dim_crm_opportunity.subscription_end_date),
        NULL
      )                                                                           AS crm_opp_next_renewal_month,
      fct_crm_opportunity.net_arr                                                 AS crm_opp_net_arr,
      fct_crm_opportunity.arr_basis                                               AS crm_opp_arr_basis,
      opportunity_seats.quantity                                                  AS crm_opp_seats,
      fct_crm_opportunity.probability                                             AS crm_opp_probability

    FROM user_request

    -- Account Joins
    LEFT JOIN arr_metrics_current_month
      ON arr_metrics_current_month.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_next_renewal_month
      ON account_next_renewal_month.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_fo_opp_seats
      ON account_open_fo_opp_seats.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_lost_opp_arr
      ON account_lost_opp_arr.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_lost_customer_arr
      ON account_lost_customer_arr.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_opp_net_arr
      ON account_open_opp_net_arr.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_opp_net_arr_fo
      ON account_open_opp_net_arr_fo.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_opp_net_arr_growth
      ON account_open_opp_net_arr_growth.dim_crm_account_id = user_request.dim_crm_account_id

    -- Opportunity Joins
    LEFT JOIN fct_crm_opportunity
      ON fct_crm_opportunity.dim_crm_opportunity_id = user_request.dim_crm_opportunity_id
    LEFT JOIN dim_order_type
      ON dim_order_type.dim_order_type_id = fct_crm_opportunity.dim_order_type_id
    LEFT JOIN dim_crm_opportunity
      ON dim_crm_opportunity.dim_crm_opportunity_id = user_request.dim_crm_opportunity_id
    LEFT JOIN opportunity_seats
      ON opportunity_seats.dim_crm_opportunity_id = user_request.dim_crm_opportunity_id
    LEFT JOIN dim_crm_user AS primary_solution_architect
      ON primary_solution_architect.dim_crm_user_id = dim_crm_opportunity.primary_solution_architect


), customer_value_scores AS (

    SELECT
      primary_key,
      CASE
        WHEN crm_account_health_score_color = 'Green'
          THEN 1
        WHEN crm_account_health_score_color = 'Yellow'
          THEN
          CASE
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 18
              THEN 1.5
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 12
              THEN 2
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) <= 12
              THEN 2.5
          END
        WHEN crm_account_health_score_color = 'Red'
          THEN
            CASE
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 18
              THEN 2
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 12
              THEN 3
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) <= 12
              THEN 4
          END
        ELSE 1
      END                                                                                                     AS retention_urgency_score,
      CASE
        WHEN crm_opp_probability > 60
          THEN 1
        WHEN crm_opp_probability > 39
          THEN
            CASE
              WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 6
                THEN 1.25
              WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 3
                THEN 1.5
              WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) <= 3
                THEN 2
            END
        WHEN crm_opp_probability < 40
          THEN 
          CASE
            WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 6
              THEN 1.5
            WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 3
              THEN 2
            WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) <= 3
              THEN 2.5
          END
        ELSE 1
      END                                                                                                     AS opportunity_urgency_score,
      IFF(link_type = 'Opportunity', crm_opp_arr_basis, crm_account_arr)                                      AS arr_to_use,
      ZEROIFNULL(crm_opp_net_arr / NULLIF(ZEROIFNULL(crm_opp_net_arr) + ZEROIFNULL(arr_to_use), 0))           AS growth_percentage,
      ZEROIFNULL(arr_to_use / NULLIF(ZEROIFNULL(crm_opp_net_arr) + ZEROIFNULL(arr_to_use), 0))                AS retention_percentage,
      request_priority * growth_percentage                                                                    AS growth_priority,
      request_priority * retention_percentage                                                                 AS retention_priority,
      -- for that account's links in that opportunity - use multiple partitions
      ZEROIFNULL(growth_priority / NULLIF(SUM(growth_priority) OVER(PARTITION BY dim_crm_account_id, dim_crm_opportunity_id), 0))
                                                                                                              AS growth_priority_weighting,
      ZEROIFNULL(retention_priority / NULLIF(SUM(retention_priority) OVER(PARTITION BY dim_crm_account_id), 0))
                                                                                                              AS retention_priority_weighting,
      -- a utility column to allow sum of all epics for customer reach
      customer_reach / NULLIF(COUNT(*) OVER(PARTITION BY dim_epic_id, dim_crm_account_id), 0)                 AS customer_epic_reach,
      CASE
        WHEN link_type = 'Opportunity'
          THEN crm_opp_net_arr * growth_priority_weighting
        ELSE 0
      END                                                                                                     AS growth_score,
      retention_priority_weighting * crm_account_arr                                                          AS retention_score,
      growth_score + retention_score                                                                          AS combined_score,
      combined_score * CASE
        WHEN link_type = 'Opportunity'
          THEN opportunity_urgency_score
        ELSE retention_urgency_score
      END                                                                                                     AS priority_score
    FROM user_request_with_account_opp_attributes
    WHERE issue_epic_state_name = 'opened'
      AND (
        CASE
          WHEN link_type = 'Opportunity'
            THEN crm_opp_is_closed = FALSE
          ELSE TRUE
        END
      )

), final AS (

    SELECT
      user_request_with_account_opp_attributes.*,
      CASE
        WHEN user_request_with_account_opp_attributes.is_request_priority_empty
          THEN '[Input (Using 1 as Default)](' || user_request_with_account_opp_attributes.issue_epic_url || ')'
        ELSE request_priority::TEXT
      END                                                                            AS priority_input_url,
      CASE
        WHEN user_request_with_account_opp_attributes.link_type = 'Zendesk Ticket'
          THEN '[' || user_request_with_account_opp_attributes.link_type || '](' || user_request_with_account_opp_attributes.ticket_link || ')'
        WHEN user_request_with_account_opp_attributes.link_type = 'Opportunity'
          THEN '[' || user_request_with_account_opp_attributes.link_type || '](' || user_request_with_account_opp_attributes.crm_opportunity_link || ')'
        WHEN user_request_with_account_opp_attributes.link_type = 'Account'
          THEN '[' || user_request_with_account_opp_attributes.link_type || '](' || user_request_with_account_opp_attributes.crm_account_link || ')'
      END                                                                            AS user_request_link,
      customer_value_scores.retention_percentage                                     AS link_retention_percentage,
      customer_value_scores.growth_percentage                                        AS link_growth_percentage,
      customer_value_scores.retention_priority                                       AS link_retention_priority,
      customer_value_scores.growth_priority                                          AS link_growth_priority,
      customer_value_scores.retention_priority_weighting                             AS link_retention_priority_weighting,
      customer_value_scores.growth_priority_weighting                                AS link_growth_priority_weighting,
      customer_value_scores.retention_score                                          AS link_retention_score,
      customer_value_scores.growth_score                                             AS link_growth_score,
      customer_value_scores.combined_score                                           AS link_combined_score,
      customer_value_scores.priority_score                                           AS link_priority_score,
      link_priority_score / NULLIFZERO(issue_epic_weight)                            AS link_weighted_priority_score,
      IFF(link_weighted_priority_score IS NULL,
        '[Effort is Empty, Input Effort Here](' || user_request_with_account_opp_attributes.issue_epic_url || ')',
        link_weighted_priority_score::TEXT)                                          AS link_weighted_priority_score_input
    FROM user_request_with_account_opp_attributes
    LEFT JOIN customer_value_scores
      ON user_request_with_account_opp_attributes.primary_key = customer_value_scores.primary_key

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@jpeguero",
    updated_by="@lvinueza",
    created_date="2021-10-22",
    updated_date="2023-05-21",
  ) }}2f:T9cbb,

WITH prep_label_links AS (

    SELECT * 
    FROM "PROD".common_prep.prep_label_links

), prep_labels AS (

    SELECT * 
    FROM "PROD".common_prep.prep_labels

), bdg_epic_user_request AS (

    SELECT * 
    FROM "PROD".common.bdg_epic_user_request

), bdg_issue_user_request AS (

    SELECT * 
    FROM "PROD".common.bdg_issue_user_request

), dim_epic AS (

    SELECT * 
    FROM "PROD".common.dim_epic

), dim_issue AS (

    SELECT * 
    FROM "PROD".common.dim_issue

), fct_mrr AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), fct_crm_opportunity AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_crm_opportunity

), dim_crm_user AS (

    SELECT * 
    FROM "PROD".common.dim_crm_user

), fct_quote_item AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_quote_item

), dim_quote AS (

    SELECT * 
    FROM "PROD".common.dim_quote

), dim_crm_opportunity AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_opportunity

), dim_order_type AS (

    SELECT * 
    FROM "PROD".common.dim_order_type

), dim_crm_user AS (

    SELECT * 
    FROM "PROD".common.dim_crm_user

)

, opportunity_seats AS (

    SELECT
      dim_crm_opportunity.dim_crm_opportunity_id,
      dim_crm_opportunity.dim_crm_account_id,
      dim_crm_opportunity.stage_name,
      fct_crm_opportunity.is_closed,
      dim_crm_opportunity.order_type,
      SUM(fct_quote_item.quantity)              AS quantity
    FROM fct_quote_item
    INNER JOIN dim_crm_opportunity
      ON dim_crm_opportunity.dim_crm_opportunity_id = fct_quote_item.dim_crm_opportunity_id
    INNER JOIN fct_crm_opportunity
      ON fct_crm_opportunity.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    INNER JOIN dim_quote
      ON dim_quote.dim_quote_id = fct_quote_item.dim_quote_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_quote_item.dim_product_detail_id
    WHERE dim_quote.is_primary_quote = TRUE
      AND dim_product_detail.product_tier_name IN ('Plus', 'GitHost', 'Standard', 'Self-Managed - Starter', 'Self-Managed - Premium',
        'SaaS - Premium', 'SaaS - Bronze', 'Basic', 'Self-Managed - Ultimate', 'SaaS - Ultimate', 'Dedicated - Ultimate')
      AND fct_crm_opportunity.close_date >= '2019-02-01'
    group by 1,2,3,4,5

), account_open_fo_opp_seats AS (

    SELECT
      dim_crm_account_id,
      SUM(quantity) AS seats
    FROM opportunity_seats
    WHERE order_type = '1. New - First Order'
      AND is_closed = FALSE
    GROUP BY 1

), opportunity_net_arr AS (

    SELECT
      fct_crm_opportunity.dim_crm_opportunity_id,
      fct_crm_opportunity.dim_crm_account_id,
      dim_crm_opportunity.stage_name,
      fct_crm_opportunity.is_closed,
      dim_order_type.order_type_name,
      fct_crm_opportunity.net_arr,
      fct_crm_opportunity.arr_basis
    FROM fct_crm_opportunity
    INNER JOIN dim_order_type
      ON dim_order_type.dim_order_type_id = fct_crm_opportunity.dim_order_type_id
    INNER JOIN dim_crm_opportunity
      ON dim_crm_opportunity.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id
    WHERE fct_crm_opportunity.close_date >= '2019-02-01' -- Net ARR is only good after 2019-02-01

), account_lost_opp_arr AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE order_type_name IN ('1. New - First Order')
      AND stage_name IN ('8-Closed Lost')
    GROUP BY 1
  
), account_lost_customer_arr AS (

    SELECT
      dim_crm_account_id,
      SUM(arr_basis)  AS arr_basis
    FROM opportunity_net_arr
    WHERE order_type_name IN ('6. Churn - Final')
      AND stage_name IN ('8-Closed Lost')
    GROUP BY 1

), account_open_opp_net_arr AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE is_closed = FALSE
    GROUP BY 1 

), account_open_opp_net_arr_fo AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE is_closed = FALSE
      AND order_type_name IN ('1. New - First Order')
    GROUP BY 1 

), account_open_opp_net_arr_growth AS (

    SELECT
      dim_crm_account_id,
      SUM(net_arr) AS net_arr
    FROM opportunity_net_arr
    WHERE is_closed = FALSE
      AND order_type_name IN ('2. New - Connected', '3. Growth')
    GROUP BY 1 

), account_next_renewal_month AS (

    SELECT
      fct_mrr.dim_crm_account_id,
      MIN(subscription_end_month) AS next_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    WHERE dim_subscription.subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)
      AND fct_mrr.subscription_status IN ('Active', 'Cancelled')
    GROUP BY 1

), arr_metrics_current_month AS (

    SELECT
      fct_mrr.dim_crm_account_id,
      SUM(fct_mrr.mrr)                                                               AS mrr,
      SUM(fct_mrr.arr)                                                               AS arr,
      SUM(fct_mrr.quantity)                                                          AS quantity
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    WHERE subscription_status IN ('Active', 'Cancelled')
      AND dim_date.date_actual = DATE_TRUNC('month', CURRENT_DATE)
      AND dim_product_detail.product_tier_name IN ('Plus', 'GitHost', 'Standard', 'Self-Managed - Starter', 'Self-Managed - Premium',
        'SaaS - Premium', 'SaaS - Bronze', 'Basic', 'Self-Managed - Ultimate', 'SaaS - Ultimate', 'Dedicated - Ultimate')
    GROUP BY 1

), epic_weight AS (

    SELECT
      dim_epic_id,
      SUM(weight)                                                             AS epic_weight,
      SUM(IFF(state_name = 'closed', weight, 0)) / NULLIFZERO(epic_weight)    AS epic_completeness,
      SUM(IFF(state_name = 'closed', 1, 0)) / COUNT(*)                        AS epic_completeness_alternative,
      COALESCE(epic_completeness, epic_completeness_alternative)              AS epic_status
    FROM dim_issue
    GROUP BY 1
    
), label_links_joined AS (

    SELECT
      prep_label_links.*,
      prep_labels.label_title
    FROM prep_label_links
    LEFT JOIN prep_labels
      ON prep_label_links.dim_label_id = prep_labels.dim_label_id

), issue_labels AS (

    SELECT 
      label_links_joined.dim_issue_id,
      IFF(LOWER(label_links_joined.label_title) LIKE 'group::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)    AS group_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'devops::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)   AS devops_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'section::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)  AS section_label,
      COALESCE(group_label, devops_label, section_label)                                                                       AS product_group_extended,

      IFF(LOWER(label_links_joined.label_title) LIKE 'category:%', SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)   AS category_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'type::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)     AS type_label,

      IFF(LOWER(label_links_joined.label_title) LIKE 'theme:%'
        AND NOT CONTAINS(label_links_joined.label_title, '::'), -- This second condition makes sure we are not matching the scoped label theme::*, only the non scoped theme:*
          SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)                                                             AS theme_label,
      CASE
        WHEN group_label IS NOT NULL THEN 3
        WHEN devops_label IS NOT NULL THEN 2
        WHEN section_label IS NOT NULL THEN 1
        ELSE 0
      END product_group_level
    FROM label_links_joined

), epic_labels AS (

    SELECT 
      label_links_joined.dim_epic_id,
      IFF(LOWER(label_links_joined.label_title) LIKE 'group::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)    AS group_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'devops::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)   AS devops_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'section::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)  AS section_label,
      COALESCE(group_label, devops_label, section_label)                                                                       AS product_group_extended,

      IFF(LOWER(label_links_joined.label_title) LIKE 'category:%', SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)   AS category_label,
      IFF(LOWER(label_links_joined.label_title) LIKE 'type::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)     AS type_label,

      IFF(LOWER(label_links_joined.label_title) LIKE 'theme:%'
        AND NOT CONTAINS(label_links_joined.label_title, '::'), -- This second condition makes sure we are not matching the scoped label theme::*, only the non scoped theme:*
          SPLIT_PART(label_links_joined.label_title, ':', 2), NULL)                                                             AS theme_label,

      CASE
        WHEN group_label IS NOT NULL THEN 3
        WHEN devops_label IS NOT NULL THEN 2
        WHEN section_label IS NOT NULL THEN 1
        ELSE 0
      END product_group_level
    FROM label_links_joined

), issue_theme_labels AS (

    SELECT
      dim_issue_id,
      ARRAY_AGG(theme_label) WITHIN GROUP (ORDER BY theme_label) AS theme_labels
    FROM issue_labels
    GROUP BY 1

), epic_theme_labels AS (

    SELECT
      dim_epic_id,
      ARRAY_AGG(theme_label) WITHIN GROUP (ORDER BY theme_label) AS theme_labels
    FROM epic_labels
    GROUP BY 1

), issue_group_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the group::* label

    SELECT
      dim_issue_id,
      group_label
    FROM issue_labels
    WHERE group_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY group_label) = 1

), issue_group_extended_label AS (

    SELECT
      dim_issue_id,
      product_group_extended
    FROM issue_labels
    WHERE product_group_extended IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY product_group_level DESC) = 1

), issue_category_dedup AS ( -- Since category: is not an scoped label, need to make sure I only pull one of them
  
    SELECT
      dim_issue_id,
      category_label
    FROM issue_labels
    WHERE category_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY category_label DESC) = 1
  
), issue_type_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the type::* label

    SELECT
      dim_issue_id,
      type_label
    FROM issue_labels
    WHERE type_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY type_label) = 1

), issue_devops_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the devops::* label

    SELECT
      dim_issue_id,
      devops_label
    FROM issue_labels
    WHERE devops_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY devops_label) = 1

), issue_status AS ( -- Some issues for some reason had two valid workflow labels, this dedup them

    SELECT
      label_links_joined.dim_issue_id,
      IFF(LOWER(label_links_joined.label_title) LIKE 'workflow::%', SPLIT_PART(label_links_joined.label_title, '::', 2), NULL)   AS workflow_label
    FROM label_links_joined
    WHERE workflow_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id ORDER BY workflow_label DESC) = 1 

), epic_group_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the group::* label

    SELECT
      dim_epic_id,
      group_label
    FROM epic_labels
    WHERE group_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY group_label) = 1

), epic_group_extended_label AS (

    SELECT
      dim_epic_id,
      product_group_extended
    FROM epic_labels
    WHERE product_group_extended IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY product_group_level DESC) = 1

), epic_category_dedup AS ( -- Since category: is not an scoped label, need to make sure I only pull one of them
  
    SELECT
      dim_epic_id,
      category_label
    FROM epic_labels
    WHERE category_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY category_label DESC) = 1
  
), epic_type_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the type::* label

    SELECT
      dim_epic_id,
      type_label
    FROM epic_labels
    WHERE type_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY type_label) = 1

), epic_devops_label AS ( -- There is a bug in the product where some scoped labels are used twice. This is a temporary fix for that for the devops::* label

    SELECT
      dim_epic_id,
      devops_label
    FROM epic_labels
    WHERE devops_label IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY devops_label) = 1

), epic_last_milestone AS ( -- Get issue milestone with the latest due dates for epics
    
    SELECT
      dim_epic_id,
      milestone_title,
      milestone_due_date
    FROM dim_issue
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_epic_id ORDER BY milestone_due_date DESC NULLS LAST) = 1

), user_request AS (

    SELECT
      bdg_issue_user_request.dim_issue_id                                         AS dim_issue_id,
      IFNULL(dim_issue.dim_epic_id, -1)                                           AS dim_epic_id,
      'Issue'                                                                     AS user_request_in,

      bdg_issue_user_request.link_type                                            AS link_type,
      bdg_issue_user_request.dim_crm_opportunity_id                               AS dim_crm_opportunity_id,
      bdg_issue_user_request.dim_crm_account_id                                   AS dim_crm_account_id,
      bdg_issue_user_request.dim_ticket_id                                        AS dim_ticket_id,
      bdg_issue_user_request.request_priority                                     AS request_priority,
      bdg_issue_user_request.is_request_priority_empty                            AS is_request_priority_empty,
      bdg_issue_user_request.is_user_request_only_in_collaboration_project        AS is_user_request_only_in_collaboration_project,
      bdg_issue_user_request.link_last_updated_at                                 AS link_last_updated_at,
      bdg_issue_user_request.link_last_updated_at::DATE                           AS link_last_updated_date,
      DATE_TRUNC('month', bdg_issue_user_request.link_last_updated_at::DATE)      AS link_last_updated_month,

      IFF(link_type = 'Opportunity', 'https://gitlab.my.salesforce.com/' || bdg_issue_user_request.dim_crm_opportunity_id, 'No Link')
                                                                                  AS crm_opportunity_link,
      'https://gitlab.my.salesforce.com/' || bdg_issue_user_request.dim_crm_account_id
                                                                                  AS crm_account_link,
      IFF(link_type = 'Zendesk Ticket', 'https://gitlab.zendesk.com/agent/tickets/' || bdg_issue_user_request.dim_ticket_id, 'No Link')
                                                                                  AS ticket_link,

      -- Epic / Issue attributes
      dim_issue.issue_title                                                       AS issue_epic_title,
      dim_issue.issue_url                                                         AS issue_epic_url,
      dim_issue.created_at                                                        AS issue_epic_created_at,
      dim_issue.created_at::DATE                                                  AS issue_epic_created_date,
      DATE_TRUNC('month', dim_issue.created_at::DATE)                             AS issue_epic_created_month,
      dim_issue.state_name                                                        AS issue_epic_state_name,
      dim_issue.issue_closed_at                                                   AS issue_epic_closed_at,
      dim_issue.issue_closed_at::DATE                                             AS issue_epic_closed_date,
      DATE_TRUNC('month', dim_issue.issue_closed_at::DATE)                        AS issue_epic_closed_month,
      dim_issue.milestone_title                                                   AS milestone_title,
      dim_issue.milestone_due_date                                                AS milestone_due_date,
      dim_issue.labels                                                            AS issue_epic_labels,
      CASE
        WHEN ARRAY_CONTAINS('deliverable'::VARIANT, dim_issue.labels) THEN 'Yes'
        WHEN ARRAY_CONTAINS('stretch'::VARIANT, dim_issue.labels) THEN 'Stretch'
        ELSE 'No'
      END                                                                         AS deliverable,
      IFNULL(issue_group_extended_label.product_group_extended, 'Unknown')        AS product_group_extended,
      group_label.group_label                                                     AS product_group,
      category_label.category_label                                               AS product_category,
      devops_label.devops_label                                                   AS product_stage,
      CASE type_label.type_label
        WHEN 'bug' THEN 'bug fix'
        WHEN 'feature' THEN 'feature request'
      END                                                                         AS issue_epic_type,
      IFNULL(issue_status.workflow_label, 'Not Started')                          AS issue_status,
      issue_theme_labels.theme_labels                                             AS theme_labels,
      -1                                                                          AS epic_status,
      dim_epic.epic_url                                                           AS parent_epic_path,
      dim_epic.epic_title                                                         AS parent_epic_title,
      dim_issue.upvote_count                                                      AS upvote_count,
      IFNULL(dim_issue.weight, 0)                                                 AS issue_epic_weight

    FROM bdg_issue_user_request
    LEFT JOIN dim_issue
      ON dim_issue.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_group_extended_label
      ON issue_group_extended_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_status
      ON issue_status.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN dim_epic
      ON dim_epic.dim_epic_id = dim_issue.dim_epic_id
    LEFT JOIN issue_category_dedup AS category_label
      ON category_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_group_label AS group_label
      ON group_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_devops_label AS devops_label
      ON devops_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_type_label AS type_label
      ON type_label.dim_issue_id = bdg_issue_user_request.dim_issue_id
    LEFT JOIN issue_theme_labels
      ON issue_theme_labels.dim_issue_id = bdg_issue_user_request.dim_issue_id

    UNION

    SELECT
      -1                                                                          AS dim_issue_id,
      bdg_epic_user_request.dim_epic_id                                           AS dim_epic_id,
      'Epic'                                                                      AS user_request_in,
      
      bdg_epic_user_request.link_type                                             AS link_type,
      bdg_epic_user_request.dim_crm_opportunity_id                                AS dim_crm_opportunity_id,
      bdg_epic_user_request.dim_crm_account_id                                    AS dim_crm_account_id,
      bdg_epic_user_request.dim_ticket_id                                         AS dim_ticket_id,
      bdg_epic_user_request.request_priority                                      AS request_priority,
      bdg_epic_user_request.is_request_priority_empty                             AS is_request_priority_empty,
      bdg_epic_user_request.is_user_request_only_in_collaboration_project         AS is_user_request_only_in_collaboration_project,
      bdg_epic_user_request.link_last_updated_at                                  AS link_last_updated_at,
      bdg_epic_user_request.link_last_updated_at::DATE                            AS link_last_updated_date,
      DATE_TRUNC('month', bdg_epic_user_request.link_last_updated_at::DATE)       AS link_last_updated_month,

      IFF(link_type = 'Opportunity', 'https://gitlab.my.salesforce.com/' || bdg_epic_user_request.dim_crm_opportunity_id, 'No Link')
                                                                                  AS crm_opportunity_link,
      'https://gitlab.my.salesforce.com/' || bdg_epic_user_request.dim_crm_account_id
                                                                                  AS crm_account_link,
      IFF(link_type = 'Zendesk Ticket', 'https://gitlab.zendesk.com/agent/tickets/' || bdg_epic_user_request.dim_ticket_id, 'No Link')
                                                                                  AS ticket_link,

      -- Epic / Issue attributes
      dim_epic.epic_title                                                         AS epic_title,
      dim_epic.epic_url                                                           AS epic_url,
      dim_epic.created_at                                                         AS issue_epic_created_at,
      dim_epic.created_at::DATE                                                   AS issue_epic_created_date,
      DATE_TRUNC('month', dim_epic.created_at::DATE)                              AS issue_epic_created_month,
      dim_epic.state_name                                                         AS issue_epic_state_name,
      dim_epic.closed_at                                                          AS issue_epic_closed_at,
      dim_epic.closed_at::DATE                                                    AS issue_epic_closed_date,
      DATE_TRUNC('month', dim_epic.closed_at::DATE)                               AS issue_epic_closed_month,
      epic_last_milestone.milestone_title                                         AS milestone_title,
      epic_last_milestone.milestone_due_date                                      AS milestone_due_date,
      dim_epic.labels                                                             AS issue_epic_labels,
      CASE
        WHEN ARRAY_CONTAINS('deliverable'::VARIANT, dim_epic.labels) THEN 'Yes'
        WHEN ARRAY_CONTAINS('stretch'::VARIANT, dim_epic.labels) THEN 'Stretch'
        ELSE 'No'
      END                                                                         AS deliverable,
      IFNULL(epic_group_extended_label.product_group_extended, 'Unknown')         AS product_group_extended,
      group_label.group_label                                                     AS product_group,
      category_label.category_label                                               AS product_category,
      devops_label.devops_label                                                   AS product_stage,
      CASE type_label.type_label
        WHEN 'bug' THEN 'bug fix'
        WHEN 'feature' THEN 'feature request'
      END                                                                         AS issue_epic_type,
      'Not Applicable'                                                            AS issue_status,
      epic_theme_labels.theme_labels                                              AS theme_labels,
      IFNULL(epic_weight.epic_status, 0)                                          AS epic_status,
      parent_epic.epic_url                                                        AS parent_epic_path,
      parent_epic.epic_title                                                      AS parent_epic_title,
      dim_epic.upvote_count                                                       AS upvote_count,
      IFNULL(epic_weight.epic_weight, 0)                                          AS issue_epic_weight

    FROM bdg_epic_user_request
    LEFT JOIN dim_issue
      ON dim_issue.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN dim_epic
      ON dim_epic.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_last_milestone
      ON epic_last_milestone.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_group_extended_label
      ON epic_group_extended_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_weight
      ON epic_weight.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN dim_epic AS parent_epic
      ON parent_epic.dim_epic_id = dim_epic.parent_id
    LEFT JOIN epic_category_dedup AS category_label
      ON category_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_group_label AS group_label
      ON group_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_devops_label AS devops_label
      ON devops_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_type_label AS type_label
      ON type_label.dim_epic_id = bdg_epic_user_request.dim_epic_id
    LEFT JOIN epic_theme_labels
      ON epic_theme_labels.dim_epic_id = bdg_epic_user_request.dim_epic_id

), user_request_with_account_opp_attributes AS (

    SELECT
      md5(cast(coalesce(cast(user_request.dim_issue_id as 
    varchar
), '') || '-' || coalesce(cast(user_request.dim_epic_id as 
    varchar
), '') || '-' || coalesce(cast(user_request.dim_crm_account_id as 
    varchar
), '') || '-' || coalesce(cast(user_request.dim_crm_opportunity_id as 
    varchar
), '') || '-' || coalesce(cast(user_request.dim_ticket_id as 
    varchar
), '') as 
    varchar
))                                              AS primary_key,
      user_request.*,

      -- CRM Account attributes
      dim_crm_account.crm_account_name                                            AS crm_account_name,
      account_next_renewal_month.next_renewal_month                               AS crm_account_next_renewal_month,
      dim_crm_account.health_score_color                                          AS crm_account_health_score_color,
      dim_crm_account.parent_crm_account_sales_segment                            AS parent_crm_account_sales_segment,
      dim_crm_account.technical_account_manager                                   AS technical_account_manager,
      dim_crm_account.account_owner                                               AS strategic_account_leader,
      IFNULL(arr_metrics_current_month.quantity, 0)                               AS customer_reach,
      IFNULL(arr_metrics_current_month.arr, 0)                                    AS crm_account_arr,
      IFNULL(account_open_opp_net_arr.net_arr, 0)                                 AS crm_account_open_opp_net_arr,
      IFNULL(account_open_opp_net_arr_fo.net_arr, 0)                              AS crm_account_open_opp_net_arr_fo,
      IFNULL(account_open_opp_net_arr_growth.net_arr, 0)                          AS crm_account_open_opp_net_arr_growth,
      IFNULL(account_open_fo_opp_seats.seats, 0)                                  AS opportunity_reach,
      IFNULL(account_lost_opp_arr.net_arr, 0)                                     AS crm_account_lost_opp_net_arr,
      IFNULL(account_lost_customer_arr.arr_basis, 0)                              AS crm_account_lost_customer_arr,
      crm_account_lost_opp_net_arr + crm_account_lost_customer_arr                AS lost_arr,

      -- CRM Opportunity attributes
      dim_crm_opportunity.stage_name                                              AS crm_opp_stage_name,
      fct_crm_opportunity.is_closed                                               AS crm_opp_is_closed,
      fct_crm_opportunity.close_date                                              AS crm_opp_close_date,
      dim_order_type.order_type_name                                              AS crm_opp_order_type,
      dim_order_type.order_type_grouped                                           AS crm_opp_order_type_grouped,
      primary_solution_architect.dim_crm_user_id                                  AS primary_solution_architect_id,
      primary_solution_architect.user_name                                        AS primary_solution_architect_user_name,
      IFF(DATE_TRUNC('month', dim_crm_opportunity.subscription_end_date) >= DATE_TRUNC('month',CURRENT_DATE),
        DATE_TRUNC('month', dim_crm_opportunity.subscription_end_date),
        NULL
      )                                                                           AS crm_opp_next_renewal_month,
      fct_crm_opportunity.net_arr                                                 AS crm_opp_net_arr,
      fct_crm_opportunity.arr_basis                                               AS crm_opp_arr_basis,
      opportunity_seats.quantity                                                  AS crm_opp_seats,
      fct_crm_opportunity.probability                                             AS crm_opp_probability

    FROM user_request

    -- Account Joins
    LEFT JOIN arr_metrics_current_month
      ON arr_metrics_current_month.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_next_renewal_month
      ON account_next_renewal_month.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_fo_opp_seats
      ON account_open_fo_opp_seats.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_lost_opp_arr
      ON account_lost_opp_arr.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_lost_customer_arr
      ON account_lost_customer_arr.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_opp_net_arr
      ON account_open_opp_net_arr.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_opp_net_arr_fo
      ON account_open_opp_net_arr_fo.dim_crm_account_id = user_request.dim_crm_account_id
    LEFT JOIN account_open_opp_net_arr_growth
      ON account_open_opp_net_arr_growth.dim_crm_account_id = user_request.dim_crm_account_id

    -- Opportunity Joins
    LEFT JOIN fct_crm_opportunity
      ON fct_crm_opportunity.dim_crm_opportunity_id = user_request.dim_crm_opportunity_id
    LEFT JOIN dim_order_type
      ON dim_order_type.dim_order_type_id = fct_crm_opportunity.dim_order_type_id
    LEFT JOIN dim_crm_opportunity
      ON dim_crm_opportunity.dim_crm_opportunity_id = user_request.dim_crm_opportunity_id
    LEFT JOIN opportunity_seats
      ON opportunity_seats.dim_crm_opportunity_id = user_request.dim_crm_opportunity_id
    LEFT JOIN dim_crm_user AS primary_solution_architect
      ON primary_solution_architect.dim_crm_user_id = dim_crm_opportunity.primary_solution_architect


), customer_value_scores AS (

    SELECT
      primary_key,
      CASE
        WHEN crm_account_health_score_color = 'Green'
          THEN 1
        WHEN crm_account_health_score_color = 'Yellow'
          THEN
          CASE
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 18
              THEN 1.5
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 12
              THEN 2
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) <= 12
              THEN 2.5
          END
        WHEN crm_account_health_score_color = 'Red'
          THEN
            CASE
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 18
              THEN 2
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) > 12
              THEN 3
            WHEN DATEDIFF('months', CURRENT_DATE, crm_account_next_renewal_month) <= 12
              THEN 4
          END
        ELSE 1
      END                                                                                                     AS retention_urgency_score,
      CASE
        WHEN crm_opp_probability > 60
          THEN 1
        WHEN crm_opp_probability > 39
          THEN
            CASE
              WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 6
                THEN 1.25
              WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 3
                THEN 1.5
              WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) <= 3
                THEN 2
            END
        WHEN crm_opp_probability < 40
          THEN 
          CASE
            WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 6
              THEN 1.5
            WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) > 3
              THEN 2
            WHEN DATEDIFF('months', CURRENT_DATE, crm_opp_close_date) <= 3
              THEN 2.5
          END
        ELSE 1
      END                                                                                                     AS opportunity_urgency_score,
      IFF(link_type = 'Opportunity', crm_opp_arr_basis, crm_account_arr)                                      AS arr_to_use,
      ZEROIFNULL(crm_opp_net_arr / NULLIF(ZEROIFNULL(crm_opp_net_arr) + ZEROIFNULL(arr_to_use), 0))           AS growth_percentage,
      ZEROIFNULL(arr_to_use / NULLIF(ZEROIFNULL(crm_opp_net_arr) + ZEROIFNULL(arr_to_use), 0))                AS retention_percentage,
      request_priority * growth_percentage                                                                    AS growth_priority,
      request_priority * retention_percentage                                                                 AS retention_priority,
      -- for that account's links in that opportunity - use multiple partitions
      ZEROIFNULL(growth_priority / NULLIF(SUM(growth_priority) OVER(PARTITION BY dim_crm_account_id, dim_crm_opportunity_id), 0))
                                                                                                              AS growth_priority_weighting,
      ZEROIFNULL(retention_priority / NULLIF(SUM(retention_priority) OVER(PARTITION BY dim_crm_account_id), 0))
                                                                                                              AS retention_priority_weighting,
      -- a utility column to allow sum of all epics for customer reach
      customer_reach / NULLIF(COUNT(*) OVER(PARTITION BY dim_epic_id, dim_crm_account_id), 0)                 AS customer_epic_reach,
      CASE
        WHEN link_type = 'Opportunity'
          THEN crm_opp_net_arr * growth_priority_weighting
        ELSE 0
      END                                                                                                     AS growth_score,
      retention_priority_weighting * crm_account_arr                                                          AS retention_score,
      growth_score + retention_score                                                                          AS combined_score,
      combined_score * CASE
        WHEN link_type = 'Opportunity'
          THEN opportunity_urgency_score
        ELSE retention_urgency_score
      END                                                                                                     AS priority_score
    FROM user_request_with_account_opp_attributes
    WHERE issue_epic_state_name = 'opened'
      AND (
        CASE
          WHEN link_type = 'Opportunity'
            THEN crm_opp_is_closed = FALSE
          ELSE TRUE
        END
      )

), final AS (

    SELECT
      user_request_with_account_opp_attributes.*,
      CASE
        WHEN user_request_with_account_opp_attributes.is_request_priority_empty
          THEN '[Input (Using 1 as Default)](' || user_request_with_account_opp_attributes.issue_epic_url || ')'
        ELSE request_priority::TEXT
      END                                                                            AS priority_input_url,
      CASE
        WHEN user_request_with_account_opp_attributes.link_type = 'Zendesk Ticket'
          THEN '[' || user_request_with_account_opp_attributes.link_type || '](' || user_request_with_account_opp_attributes.ticket_link || ')'
        WHEN user_request_with_account_opp_attributes.link_type = 'Opportunity'
          THEN '[' || user_request_with_account_opp_attributes.link_type || '](' || user_request_with_account_opp_attributes.crm_opportunity_link || ')'
        WHEN user_request_with_account_opp_attributes.link_type = 'Account'
          THEN '[' || user_request_with_account_opp_attributes.link_type || '](' || user_request_with_account_opp_attributes.crm_account_link || ')'
      END                                                                            AS user_request_link,
      customer_value_scores.retention_percentage                                     AS link_retention_percentage,
      customer_value_scores.growth_percentage                                        AS link_growth_percentage,
      customer_value_scores.retention_priority                                       AS link_retention_priority,
      customer_value_scores.growth_priority                                          AS link_growth_priority,
      customer_value_scores.retention_priority_weighting                             AS link_retention_priority_weighting,
      customer_value_scores.growth_priority_weighting                                AS link_growth_priority_weighting,
      customer_value_scores.retention_score                                          AS link_retention_score,
      customer_value_scores.growth_score                                             AS link_growth_score,
      customer_value_scores.combined_score                                           AS link_combined_score,
      customer_value_scores.priority_score                                           AS link_priority_score,
      link_priority_score / NULLIFZERO(issue_epic_weight)                            AS link_weighted_priority_score,
      IFF(link_weighted_priority_score IS NULL,
        '[Effort is Empty, Input Effort Here](' || user_request_with_account_opp_attributes.issue_epic_url || ')',
        link_weighted_priority_score::TEXT)                                          AS link_weighted_priority_score_input
    FROM user_request_with_account_opp_attributes
    LEFT JOIN customer_value_scores
      ON user_request_with_account_opp_attributes.primary_key = customer_value_scores.primary_key

)

SELECT
      *,
      '@jpeguero'::VARCHAR       AS created_by,
      '@lvinueza'::VARCHAR       AS updated_by,
      '2021-10-22'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final30:T2475,WITH dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), dim_billing_account AS (

    SELECT *
    FROM {{ ref('dim_billing_account') }}

), dim_crm_account AS (

    SELECT *
    FROM {{ ref('dim_crm_account') }}

), dim_product_detail AS (

    SELECT *
    FROM {{ ref('dim_product_detail') }}

), fct_invoice_item AS (

    SELECT *
    FROM {{ ref('fct_invoice_item') }}
    WHERE is_last_segment_version = TRUE
      AND arr != 0

), dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}

), dim_charge AS (

    SELECT *
    FROM {{ ref('dim_charge') }}

), dim_crm_opportunity AS (

    SELECT *
    FROM {{ ref('dim_crm_opportunity') }}

), arr_agg AS (

    SELECT
      fct_invoice_item.charge_id                           AS dim_charge_id,
      dim_charge.rate_plan_charge_description,
      fct_invoice_item.effective_start_month,
      fct_invoice_item.effective_end_month,
      dim_billing_account_id_subscription,
      dim_crm_account_id_subscription,
      dim_billing_account_id_invoice,
      dim_crm_account_id_invoice,
      dim_subscription_id,
      dim_product_detail_id,
      is_paid_in_full,
      SUM(invoice_item_charge_amount)                      AS invoice_item_charge_amount,
      SUM(mrr)                                             AS mrr,
      SUM(arr)                                             AS arr,
      SUM(quantity)                                        AS quantity
    FROM fct_invoice_item
    LEFT JOIN dim_charge
      ON dim_charge.dim_charge_id = fct_invoice_item.charge_id
    WHERE fct_invoice_item.effective_end_month > fct_invoice_item.effective_start_month OR fct_invoice_item.effective_end_month IS NULL
      --filter out 2 subscription_ids with known data quality issues when comparing invoiced subscriptions to the Zuora UI.
      AND dim_subscription_id NOT IN ('2c92a0ff5e1dcf14015e3c191d4f7689','2c92a00e6a3477b5016a46aaec2f08bc')
    {{ dbt_utils.group_by(n=11) }}

), combined AS (

    SELECT
      {{ dbt_utils.surrogate_key(['arr_agg.dim_charge_id']) }}          AS primary_key,
      arr_agg.dim_charge_id                                             AS dim_charge_id,
      arr_agg.dim_subscription_id                                       AS dim_subscription_id,
      arr_agg.effective_start_month                                     AS effective_start_month,
      arr_agg.effective_end_month                                       AS effective_end_month,
      DATE_TRUNC('month',dim_subscription.subscription_start_date)      AS subscription_start_month,
      DATE_TRUNC('month',dim_subscription.subscription_end_date)        AS subscription_end_month,
      dim_crm_opportunity.opportunity_name                              AS opportunity_name,
      dim_crm_account_invoice.dim_parent_crm_account_id                 AS dim_parent_crm_account_id_invoice,
      dim_crm_account_invoice.parent_crm_account_name                   AS parent_crm_account_name_invoice,
      dim_crm_account_invoice.parent_crm_account_upa_country            AS parent_crm_account_upa_country_invoice,
      dim_crm_account_invoice.dim_crm_account_id                        AS dim_crm_account_id_invoice,
      dim_crm_account_invoice.crm_account_name                          AS crm_account_name_invoice,
      dim_crm_account_invoice.parent_crm_account_sales_segment          AS parent_crm_account_sales_segment_invoice,
      dim_crm_account_subscription.dim_parent_crm_account_id            AS dim_parent_crm_account_id_subscription,
      dim_crm_account_subscription.parent_crm_account_name              AS parent_crm_account_name_subscription,
      dim_crm_account_subscription.parent_crm_account_upa_country       AS parent_crm_account_upa_country_subscription,
      dim_crm_account_subscription.dim_crm_account_id                   AS dim_crm_account_id_subscription,
      dim_crm_account_subscription.crm_account_name                     AS crm_account_name_subscription,
       dim_crm_account_subscription.parent_crm_account_sales_segment    AS parent_crm_account_sales_segment_subscription,
      dim_subscription.subscription_name                                AS subscription_name,
      IFF(dim_subscription.zuora_renewal_subscription_name != '', TRUE, FALSE)
                                                                        AS is_myb,
      arr_agg.is_paid_in_full                                           AS is_paid_in_full,
      dim_subscription.current_term                                     AS current_term_months,
      ROUND(dim_subscription.current_term / 12, 1)                      AS current_term_years,
      dim_crm_account_invoice.is_reseller                               AS is_reseller,
      dim_product_detail.product_rate_plan_charge_name                  AS product_rate_plan_charge_name, 
      dim_product_detail.product_tier_name                              AS product_category,
      dim_product_detail.product_ranking                                AS product_ranking,
      dim_product_detail.product_delivery_type                          AS delivery,
      dim_product_detail.service_type                                   AS service_type,
      dim_product_detail.is_licensed_user                               AS is_licensed_user,
      dim_product_detail.is_arpu                                        AS is_arpu,
      CASE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%edu or oss%'   THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%education%'    THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%y combinator%' THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%support%'      THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%reporter%'     THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%guest%'        THEN TRUE
        WHEN dim_crm_opportunity.opportunity_name LIKE '%EDU%'                             THEN TRUE
        WHEN dim_product_detail.annual_billing_list_price = 0                              THEN TRUE
        ELSE FALSE
      END                                                               AS is_excluded_from_disc_analysis,
      dim_product_detail.annual_billing_list_price                      AS annual_billing_list_price,
      dim_crm_opportunity.opportunity_owner_user_segment                AS opportunity_owner_user_segment,
      dim_crm_opportunity.opportunity_owner_user_geo                    AS opportunity_owner_user_geo,
      dim_crm_opportunity.opportunity_owner_user_region                 AS opportunity_owner_user_region,
      dim_crm_opportunity.opportunity_owner_user_area                   AS opportunity_owner_user_area,
      dim_crm_opportunity.order_type                                    AS order_type,
      ARRAY_AGG(IFF(dim_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
                   'Self-Service', 'Sales-Assisted'))                   AS subscription_sales_type,
      SUM(arr_agg.invoice_item_charge_amount)                           AS invoice_item_charge_amount,
      SUM(arr_agg.arr)/SUM(arr_agg.quantity)                            AS arpu,
      SUM(arr_agg.arr)                                                  AS arr,
      SUM(arr_agg.quantity)                                             AS quantity
    FROM arr_agg
    INNER JOIN dim_subscription
      ON arr_agg.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON arr_agg.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON arr_agg.dim_billing_account_id_invoice = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account AS dim_crm_account_invoice
      ON arr_agg.dim_crm_account_id_invoice = dim_crm_account_invoice.dim_crm_account_id
    LEFT JOIN dim_crm_account AS dim_crm_account_subscription
      ON arr_agg.dim_crm_account_id_subscription = dim_crm_account_subscription.dim_crm_account_id
    LEFT JOIN dim_crm_opportunity 
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    WHERE dim_crm_account_subscription.is_jihu_account != 'TRUE'
    {{ dbt_utils.group_by(n=40) }}
    ORDER BY 3 DESC

), final AS (

    SELECT
      combined.*,
      ABS(invoice_item_charge_amount) / (arr * current_term_years)      AS pct_paid_of_total_revenue,
      {{ arr_buckets('SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name)') }}                                           AS arr_buckets,
      {{ number_of_seats_buckets('SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name)') }}                                           AS number_of_seats_buckets
    FROM combined

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@iweeks",
    updated_by="@nmcavinue",
    created_date="2020-10-21",
    updated_date="2023-05-30"
) }}31:T39e3,WITH dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT *
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail

), fct_invoice_item AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_invoice_item
    WHERE is_last_segment_version = TRUE
      AND arr != 0

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription

), dim_charge AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_charge

), dim_crm_opportunity AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_opportunity

), arr_agg AS (

    SELECT
      fct_invoice_item.charge_id                           AS dim_charge_id,
      dim_charge.rate_plan_charge_description,
      fct_invoice_item.effective_start_month,
      fct_invoice_item.effective_end_month,
      dim_billing_account_id_subscription,
      dim_crm_account_id_subscription,
      dim_billing_account_id_invoice,
      dim_crm_account_id_invoice,
      dim_subscription_id,
      dim_product_detail_id,
      is_paid_in_full,
      SUM(invoice_item_charge_amount)                      AS invoice_item_charge_amount,
      SUM(mrr)                                             AS mrr,
      SUM(arr)                                             AS arr,
      SUM(quantity)                                        AS quantity
    FROM fct_invoice_item
    LEFT JOIN dim_charge
      ON dim_charge.dim_charge_id = fct_invoice_item.charge_id
    WHERE fct_invoice_item.effective_end_month > fct_invoice_item.effective_start_month OR fct_invoice_item.effective_end_month IS NULL
      --filter out 2 subscription_ids with known data quality issues when comparing invoiced subscriptions to the Zuora UI.
      AND dim_subscription_id NOT IN ('2c92a0ff5e1dcf14015e3c191d4f7689','2c92a00e6a3477b5016a46aaec2f08bc')
    group by 1,2,3,4,5,6,7,8,9,10,11

), combined AS (

    SELECT
      md5(cast(coalesce(cast(arr_agg.dim_charge_id as 
    varchar
), '') as 
    varchar
))          AS primary_key,
      arr_agg.dim_charge_id                                             AS dim_charge_id,
      arr_agg.dim_subscription_id                                       AS dim_subscription_id,
      arr_agg.effective_start_month                                     AS effective_start_month,
      arr_agg.effective_end_month                                       AS effective_end_month,
      DATE_TRUNC('month',dim_subscription.subscription_start_date)      AS subscription_start_month,
      DATE_TRUNC('month',dim_subscription.subscription_end_date)        AS subscription_end_month,
      dim_crm_opportunity.opportunity_name                              AS opportunity_name,
      dim_crm_account_invoice.dim_parent_crm_account_id                 AS dim_parent_crm_account_id_invoice,
      dim_crm_account_invoice.parent_crm_account_name                   AS parent_crm_account_name_invoice,
      dim_crm_account_invoice.parent_crm_account_upa_country            AS parent_crm_account_upa_country_invoice,
      dim_crm_account_invoice.dim_crm_account_id                        AS dim_crm_account_id_invoice,
      dim_crm_account_invoice.crm_account_name                          AS crm_account_name_invoice,
      dim_crm_account_invoice.parent_crm_account_sales_segment          AS parent_crm_account_sales_segment_invoice,
      dim_crm_account_subscription.dim_parent_crm_account_id            AS dim_parent_crm_account_id_subscription,
      dim_crm_account_subscription.parent_crm_account_name              AS parent_crm_account_name_subscription,
      dim_crm_account_subscription.parent_crm_account_upa_country       AS parent_crm_account_upa_country_subscription,
      dim_crm_account_subscription.dim_crm_account_id                   AS dim_crm_account_id_subscription,
      dim_crm_account_subscription.crm_account_name                     AS crm_account_name_subscription,
       dim_crm_account_subscription.parent_crm_account_sales_segment    AS parent_crm_account_sales_segment_subscription,
      dim_subscription.subscription_name                                AS subscription_name,
      IFF(dim_subscription.zuora_renewal_subscription_name != '', TRUE, FALSE)
                                                                        AS is_myb,
      arr_agg.is_paid_in_full                                           AS is_paid_in_full,
      dim_subscription.current_term                                     AS current_term_months,
      ROUND(dim_subscription.current_term / 12, 1)                      AS current_term_years,
      dim_crm_account_invoice.is_reseller                               AS is_reseller,
      dim_product_detail.product_rate_plan_charge_name                  AS product_rate_plan_charge_name, 
      dim_product_detail.product_tier_name                              AS product_category,
      dim_product_detail.product_ranking                                AS product_ranking,
      dim_product_detail.product_delivery_type                          AS delivery,
      dim_product_detail.service_type                                   AS service_type,
      dim_product_detail.is_licensed_user                               AS is_licensed_user,
      dim_product_detail.is_arpu                                        AS is_arpu,
      CASE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%edu or oss%'   THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%education%'    THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%y combinator%' THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%support%'      THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%reporter%'     THEN TRUE
        WHEN LOWER(dim_product_detail.product_rate_plan_charge_name) LIKE '%guest%'        THEN TRUE
        WHEN dim_crm_opportunity.opportunity_name LIKE '%EDU%'                             THEN TRUE
        WHEN dim_product_detail.annual_billing_list_price = 0                              THEN TRUE
        ELSE FALSE
      END                                                               AS is_excluded_from_disc_analysis,
      dim_product_detail.annual_billing_list_price                      AS annual_billing_list_price,
      dim_crm_opportunity.opportunity_owner_user_segment                AS opportunity_owner_user_segment,
      dim_crm_opportunity.opportunity_owner_user_geo                    AS opportunity_owner_user_geo,
      dim_crm_opportunity.opportunity_owner_user_region                 AS opportunity_owner_user_region,
      dim_crm_opportunity.opportunity_owner_user_area                   AS opportunity_owner_user_area,
      dim_crm_opportunity.order_type                                    AS order_type,
      ARRAY_AGG(IFF(dim_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
                   'Self-Service', 'Sales-Assisted'))                   AS subscription_sales_type,
      SUM(arr_agg.invoice_item_charge_amount)                           AS invoice_item_charge_amount,
      SUM(arr_agg.arr)/SUM(arr_agg.quantity)                            AS arpu,
      SUM(arr_agg.arr)                                                  AS arr,
      SUM(arr_agg.quantity)                                             AS quantity
    FROM arr_agg
    INNER JOIN dim_subscription
      ON arr_agg.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON arr_agg.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON arr_agg.dim_billing_account_id_invoice = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account AS dim_crm_account_invoice
      ON arr_agg.dim_crm_account_id_invoice = dim_crm_account_invoice.dim_crm_account_id
    LEFT JOIN dim_crm_account AS dim_crm_account_subscription
      ON arr_agg.dim_crm_account_id_subscription = dim_crm_account_subscription.dim_crm_account_id
    LEFT JOIN dim_crm_opportunity 
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    WHERE dim_crm_account_subscription.is_jihu_account != 'TRUE'
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40
    ORDER BY 3 DESC

), final AS (

    SELECT
      combined.*,
      ABS(invoice_item_charge_amount) / (arr * current_term_years)      AS pct_paid_of_total_revenue,
      CASE
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) < 0                        THEN '[00] < 0'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 0 AND 250          THEN '[01] 0-250'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 250 AND 500        THEN '[02] 250-500'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 500 AND 1000       THEN '[03] 500-1K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 1000 AND 2500      THEN '[04] 1K-2.5K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 2500 AND 5000      THEN '[05] 2.5K-5K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 5000 AND 10000     THEN '[06] 5K-10K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 10000 AND 25000    THEN '[07] 10K-25K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 25000 AND 50000    THEN '[08] 25K-50K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 50000 AND 100000   THEN '[09] 50K-100K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 100000 AND 500000  THEN '[10] 100K-500K'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 500000 AND 1000000 THEN '[11] 500K-1M'
      WHEN SUM(arr) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) > 1000000                  THEN '[12] 1M+'
    END                                           AS arr_buckets,
      CASE
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) <= 0 THEN '[00] <= 0'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 1 AND 5 THEN '[01] 1-5'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 6 AND 7 THEN '[02] 6-7'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 8 AND 10 THEN '[03] 8-10'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 11 AND 15 THEN '[04] 11-15'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 16 AND 50 THEN '[05] 16-50'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 51 AND 100 THEN '[06] 51-100'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 101 AND 200 THEN '[07] 101-200'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 201 AND 500 THEN '[08] 201-500'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) BETWEEN 501 AND 1000 THEN '[09] 501-1,000'
      WHEN SUM(quantity) OVER(PARTITION BY dim_parent_crm_account_id_invoice,
        effective_start_month, effective_end_month, subscription_name,
        product_rate_plan_charge_name) >= 1001 THEN '[10] 1,001+'
    END                                           AS number_of_seats_buckets
    FROM combined

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@nmcavinue'::VARCHAR       AS updated_by,
      '2020-10-21'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final32:Tcb6, **Description:** Enriched instance Service Ping data for the last ping of the month per installation by ping and metric for 7-day metrics. This is an enhanced version of `fct_ping_instance_metric_weekly` and is defined using the [`macro_mart_ping_instance_metric`](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.macro_mart_ping_instance_metric) macro. 
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Exclude metrics that timed out during ping generation
- `Inherited` - Include 7-day metrics (`time_frame = '7d'`)
- `Inherited` - Include metrics from the 'Last Ping of the Week' pings

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation. (The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - `is_last_ping_of_week` = last ping created per calendar week per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 33:T54cc,





WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT
    * FROM "PROD".common.fct_ping_instance_metric_weekly
    WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license_id                                                              AS license_id,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.company                                                         AS license_company_name,
      dim_license.license_expire_date                                             AS license_expire_date,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      MAX(mrr)                                                                    AS max_monthly_mrr,
      MAX(IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT product_rate_plan_name)
        WITHIN GROUP (ORDER BY product_rate_plan_name ASC)                        AS product_rate_plan_name_array,
      SUM(quantity)                                                               AS quantity,
      SUM(mrr * 12)                                                               AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON effective_start_month <= dim_date.date_day AND effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22



  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription_md5 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
   WHERE license_md5 IS NOT NULL

  ), license_subscriptions_w_latest_subscription_sha256 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
    WHERE license_sha256 IS NOT NULL

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_id                        , license_subscriptions_w_latest_subscription_sha256.license_id                        ) AS license_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_company_name              , license_subscriptions_w_latest_subscription_sha256.license_company_name              ) AS license_company_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.latest_subscription_id            , license_subscriptions_w_latest_subscription_sha256.latest_subscription_id            ) AS latest_subscription_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.original_subscription_name_slugify, license_subscriptions_w_latest_subscription_sha256.original_subscription_name_slugify) AS original_subscription_name_slugify,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_category_array            , license_subscriptions_w_latest_subscription_sha256.product_category_array            ) AS product_category_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_rate_plan_name_array      , license_subscriptions_w_latest_subscription_sha256.product_rate_plan_name_array      ) AS product_rate_plan_name_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_start_month          , license_subscriptions_w_latest_subscription_sha256.subscription_start_month          ) AS subscription_start_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_end_month            , license_subscriptions_w_latest_subscription_sha256.subscription_end_month            ) AS subscription_end_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_billing_account_id            , license_subscriptions_w_latest_subscription_sha256.dim_billing_account_id            ) AS dim_billing_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.crm_account_name                  , license_subscriptions_w_latest_subscription_sha256.crm_account_name                  ) AS crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_parent_crm_account_id         , license_subscriptions_w_latest_subscription_sha256.dim_parent_crm_account_id         ) AS dim_parent_crm_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_name           , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_name           ) AS parent_crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_upa_country    , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_upa_country    ) AS parent_crm_account_upa_country,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_sales_segment  , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_sales_segment  ) AS parent_crm_account_sales_segment,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_industry       , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_industry       ) AS parent_crm_account_industry,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_territory      , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_territory      ) AS parent_crm_account_territory,
        COALESCE(license_subscriptions_w_latest_subscription_md5.technical_account_manager         , license_subscriptions_w_latest_subscription_sha256.technical_account_manager         ) AS technical_account_manager,
        CASE
          WHEN license_subscriptions_w_latest_subscription_sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_sha256.max_monthly_mrr > 0 THEN TRUE
          WHEN license_subscriptions_w_latest_subscription_md5.max_monthly_mrr > 0 THEN TRUE
          ELSE FALSE
        END                                                                                                                             AS is_paid_subscription,
        COALESCE(license_subscriptions_w_latest_subscription_md5.is_program_subscription,license_subscriptions_w_latest_subscription_sha256.is_program_subscription, FALSE)       AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        dim_date.first_day_of_week                                                                                                      AS ping_created_date_week,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        dim_ping_instance.is_last_ping_of_week                                                                                          AS is_last_ping_of_week,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription_md5
        ON dim_ping_instance.license_md5 = license_subscriptions_w_latest_subscription_md5.license_md5
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription_sha256
        ON dim_ping_instance.license_sha256 = license_subscriptions_w_latest_subscription_sha256.license_sha256
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month,
      ping_created_date_week,
      is_last_ping_of_week

    FROM joined
      WHERE time_frame != 'none'
        AND TRY_TO_DECIMAL(metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted

34:T7eb,{{
  config({
    "materialized": "table",
    "tags": ["mnpi_exception"]
  })
}}

WITH subscriptions AS (

  SELECT *
  FROM {{ ref('dim_subscription') }}

),

months AS (

{{ dbt_utils.date_spine(
        datepart="month",
        start_date="cast('2017-01-01' as date)",
        end_date="DATEADD('month', 1,DATE_TRUNC('month', CURRENT_DATE()))"
       )
    }}

),

product_detail AS (

  SELECT *
  FROM {{ ref('dim_product_detail') }}

),

charges AS (

  SELECT *
  FROM {{ ref('fct_charge') }}

),

joined AS (

  SELECT
    months.date_month,
    subscriptions.term_start_month,
    subscriptions.term_end_month,
    subscriptions.dim_subscription_id,
    subscriptions.dim_subscription_id_original,
    subscriptions.namespace_id AS dim_namespace_id,
    subscriptions.subscription_version,
    subscriptions.subscription_created_date,
    product_detail.product_rate_plan_charge_name,
    charges.charge_type
  FROM subscriptions
  INNER JOIN months
    ON (months.date_month >= subscriptions.term_start_month
        AND months.date_month <= subscriptions.term_end_month)
  LEFT JOIN charges ON charges.dim_subscription_id = subscriptions.dim_subscription_id
  LEFT JOIN product_detail ON product_detail.dim_product_detail_id = charges.dim_product_detail_id

),

final AS (

  SELECT
    date_month,
    dim_subscription_id,
    dim_subscription_id_original,
    dim_namespace_id,
    subscription_version,
    product_rate_plan_charge_name,
    charge_type
  FROM joined
  WHERE product_rate_plan_charge_name NOT IN (
    '1,000 CI Minutes',
    'Gitlab Storage 10GB - 1 Year',
    'Premium Support'
  )
  AND charge_type != 'OneTime'
  --picking most recent subscription version
  QUALIFY
    ROW_NUMBER() OVER(
      PARTITION BY
        dim_namespace_id, date_month
      ORDER BY subscription_created_date DESC, subscription_version DESC
    ) = 1

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mdrussell",
    updated_by="@mdrussell",
    created_date="2022-10-28",
    updated_date="2023-03-22"
) }}35:Tcba,

WITH subscriptions AS (

  SELECT *
  FROM "PROD".common.dim_subscription

),

months AS (







with rawdata as (

    

    

    with p as (
        select 0 as generated_number union all select 1
    ), unioned as (

    select

    
    p0.generated_number * power(2, 0)
     + 
    
    p1.generated_number * power(2, 1)
     + 
    
    p2.generated_number * power(2, 2)
     + 
    
    p3.generated_number * power(2, 3)
     + 
    
    p4.generated_number * power(2, 4)
     + 
    
    p5.generated_number * power(2, 5)
     + 
    
    p6.generated_number * power(2, 6)
    
    
    + 1
    as generated_number

    from

    
    p as p0
     cross join 
    
    p as p1
     cross join 
    
    p as p2
     cross join 
    
    p as p3
     cross join 
    
    p as p4
     cross join 
    
    p as p5
     cross join 
    
    p as p6
    
    

    )

    select *
    from unioned
    where generated_number <= 79
    order by generated_number



),

all_periods as (

    select (
        

    dateadd(
        month,
        row_number() over (order by 1) - 1,
        cast('2017-01-01' as date)
        )


    ) as date_month
    from rawdata

),

filtered as (

    select *
    from all_periods
    where date_month <= DATEADD('month', 1,DATE_TRUNC('month', CURRENT_DATE()))

)

select * from filtered



),

product_detail AS (

  SELECT *
  FROM "PROD".common.dim_product_detail

),

charges AS (

  SELECT *
  FROM "PROD".restricted_safe_common.fct_charge

),

joined AS (

  SELECT
    months.date_month,
    subscriptions.term_start_month,
    subscriptions.term_end_month,
    subscriptions.dim_subscription_id,
    subscriptions.dim_subscription_id_original,
    subscriptions.namespace_id AS dim_namespace_id,
    subscriptions.subscription_version,
    subscriptions.subscription_created_date,
    product_detail.product_rate_plan_charge_name,
    charges.charge_type
  FROM subscriptions
  INNER JOIN months
    ON (months.date_month >= subscriptions.term_start_month
        AND months.date_month <= subscriptions.term_end_month)
  LEFT JOIN charges ON charges.dim_subscription_id = subscriptions.dim_subscription_id
  LEFT JOIN product_detail ON product_detail.dim_product_detail_id = charges.dim_product_detail_id

),

final AS (

  SELECT
    date_month,
    dim_subscription_id,
    dim_subscription_id_original,
    dim_namespace_id,
    subscription_version,
    product_rate_plan_charge_name,
    charge_type
  FROM joined
  WHERE product_rate_plan_charge_name NOT IN (
    '1,000 CI Minutes',
    'Gitlab Storage 10GB - 1 Year',
    'Premium Support'
  )
  AND charge_type != 'OneTime'
  --picking most recent subscription version
  QUALIFY
    ROW_NUMBER() OVER(
      PARTITION BY
        dim_namespace_id, date_month
      ORDER BY subscription_created_date DESC, subscription_version DESC
    ) = 1

)

SELECT
      *,
      '@mdrussell'::VARCHAR       AS created_by,
      '@mdrussell'::VARCHAR       AS updated_by,
      '2022-10-28'::DATE        AS model_created_date,
      '2023-03-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final36:T1fe4,{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_crm_account', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_subscription', 'dim_subscription')
]) }}

, fct_mrr AS (

    SELECT *
    FROM {{ ref('fct_mrr') }}
    WHERE subscription_status IN ('Active', 'Cancelled')

), next_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_crm_account_id,
      MIN(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_crm_account_id)    AS next_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)

), last_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_crm_account_id,
      MAX(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_crm_account_id)    AS last_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month < DATE_TRUNC('month',CURRENT_DATE)

), crm_account_mrrs AS (

    SELECT
      dim_crm_account.dim_crm_account_id,
      dim_date.date_actual                                      AS mrr_month,
      dateadd('year', 1, date_actual)                           AS retention_month,
      next_renewal_month,
      last_renewal_month,
      COUNT(DISTINCT dim_crm_account.dim_crm_account_id)
                                                                AS crm_customer_count,
      SUM(ZEROIFNULL(mrr))                                      AS mrr_total,
      SUM(ZEROIFNULL(arr))                                      AS arr_total,
      SUM(ZEROIFNULL(quantity))                                 AS quantity_total,
      ARRAY_AGG(product_tier_name)                              AS product_category,
      MAX(product_ranking)                                      AS product_ranking
    FROM fct_mrr
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = fct_mrr.dim_crm_account_id
    LEFT JOIN next_renewal_month
      ON next_renewal_month.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN last_renewal_month
      ON last_renewal_month.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE is_jihu_account = FALSE
    {{ dbt_utils.group_by(n=5) }}

), retention_subs AS (

    SELECT
      current_mrr.dim_crm_account_id,
      current_mrr.mrr_month             AS current_mrr_month,
      current_mrr.retention_month,
      current_mrr.mrr_total             AS current_mrr,
      future_mrr.mrr_total              AS future_mrr,
      current_mrr.arr_total             AS current_arr,
      future_mrr.arr_total              AS future_arr,
      current_mrr.crm_customer_count    AS current_crm_customer_count,
      future_mrr.crm_customer_count     AS future_crm_customer_count,
      current_mrr.quantity_total        AS current_quantity,
      future_mrr.quantity_total         AS future_quantity,
      current_mrr.product_category      AS current_product_category,
      future_mrr.product_category       AS future_product_category,
      current_mrr.product_ranking       AS current_product_ranking,
      future_mrr.product_ranking        AS future_product_ranking,
      current_mrr.last_renewal_month,
      current_mrr.next_renewal_month,
      --The type of arr change requires a row_number. Row_number = 1 indicates new in the macro; however, for retention, new is not a valid option since retention starts in month 12, well after the First Order transaction.
      2                              AS row_number
    FROM crm_account_mrrs AS current_mrr
    LEFT JOIN crm_account_mrrs AS future_mrr
      ON current_mrr.dim_crm_account_id = future_mrr.dim_crm_account_id
        AND current_mrr.retention_month = future_mrr.mrr_month

), final AS (

    SELECT
    {{ dbt_utils.surrogate_key(['retention_subs.dim_crm_account_id','retention_month']) }}
                                                AS fct_retention_id,
      retention_subs.dim_crm_account_id         AS dim_crm_account_id,
      dim_crm_account.crm_account_name         AS crm_account_name,
      retention_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS retention_fiscal_quarter,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS retention_fiscal_year,
      retention_subs.last_renewal_month,
      retention_subs.next_renewal_month,
      current_mrr                               AS prior_year_mrr,
      COALESCE(future_mrr, 0)                   AS net_retention_mrr,
      CASE WHEN net_retention_mrr > 0
        THEN least(net_retention_mrr, current_mrr)
        ELSE 0 END                              AS gross_retention_mrr,
      current_arr                               AS prior_year_arr,
      COALESCE(future_arr, 0)                   AS net_retention_arr,
      CASE WHEN net_retention_arr > 0
        THEN least(net_retention_arr, current_arr)
        ELSE 0 END                              AS gross_retention_arr,
      current_quantity                          AS prior_year_quantity,
      COALESCE(future_quantity, 0)              AS net_retention_quantity,
      current_crm_customer_count                AS prior_year_crm_customer_count,
      COALESCE(future_crm_customer_count, 0)    AS net_retention_crm_customer_count,
      {{ reason_for_quantity_change_seat_change('net_retention_quantity', 'prior_year_quantity') }},
      future_product_category                   AS net_retention_product_category,
      current_product_category                  AS prior_year_product_category,
      future_product_ranking                    AS net_retention_product_ranking,
      current_product_ranking                   AS prior_year_product_ranking,
      {{ type_of_arr_change('net_retention_arr', 'prior_year_arr','row_number') }},
      {{ reason_for_arr_change_seat_change('net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }},
      {{ reason_for_arr_change_price_change('net_retention_product_category', 'prior_year_product_category', 'net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr', 'net_retention_product_ranking','prior_year_product_ranking') }},
      {{ reason_for_arr_change_tier_change('net_retention_product_ranking', 'prior_year_product_ranking', 'net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }},
      {{ annual_price_per_seat_change('net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }}
    FROM retention_subs
    INNER JOIN dim_date
      ON dim_date.date_actual = retention_subs.retention_month
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = retention_subs.dim_crm_account_id
    WHERE retention_month <= dateadd(month, -1, CURRENT_DATE)

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ken_aguilar",
    updated_by="@lisvinueza",
    created_date="2021-10-22",
    updated_date="2022-08-11"
) }}37:T264f,

WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

)

, fct_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_mrr
    WHERE subscription_status IN ('Active', 'Cancelled')

), next_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_crm_account_id,
      MIN(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_crm_account_id)    AS next_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)

), last_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_crm_account_id,
      MAX(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_crm_account_id)    AS last_renewal_month
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    WHERE subscription_end_month < DATE_TRUNC('month',CURRENT_DATE)

), crm_account_mrrs AS (

    SELECT
      dim_crm_account.dim_crm_account_id,
      dim_date.date_actual                                      AS mrr_month,
      dateadd('year', 1, date_actual)                           AS retention_month,
      next_renewal_month,
      last_renewal_month,
      COUNT(DISTINCT dim_crm_account.dim_crm_account_id)
                                                                AS crm_customer_count,
      SUM(ZEROIFNULL(mrr))                                      AS mrr_total,
      SUM(ZEROIFNULL(arr))                                      AS arr_total,
      SUM(ZEROIFNULL(quantity))                                 AS quantity_total,
      ARRAY_AGG(product_tier_name)                              AS product_category,
      MAX(product_ranking)                                      AS product_ranking
    FROM fct_mrr
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = fct_mrr.dim_crm_account_id
    LEFT JOIN next_renewal_month
      ON next_renewal_month.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN last_renewal_month
      ON last_renewal_month.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE is_jihu_account = FALSE
    group by 1,2,3,4,5

), retention_subs AS (

    SELECT
      current_mrr.dim_crm_account_id,
      current_mrr.mrr_month             AS current_mrr_month,
      current_mrr.retention_month,
      current_mrr.mrr_total             AS current_mrr,
      future_mrr.mrr_total              AS future_mrr,
      current_mrr.arr_total             AS current_arr,
      future_mrr.arr_total              AS future_arr,
      current_mrr.crm_customer_count    AS current_crm_customer_count,
      future_mrr.crm_customer_count     AS future_crm_customer_count,
      current_mrr.quantity_total        AS current_quantity,
      future_mrr.quantity_total         AS future_quantity,
      current_mrr.product_category      AS current_product_category,
      future_mrr.product_category       AS future_product_category,
      current_mrr.product_ranking       AS current_product_ranking,
      future_mrr.product_ranking        AS future_product_ranking,
      current_mrr.last_renewal_month,
      current_mrr.next_renewal_month,
      --The type of arr change requires a row_number. Row_number = 1 indicates new in the macro; however, for retention, new is not a valid option since retention starts in month 12, well after the First Order transaction.
      2                              AS row_number
    FROM crm_account_mrrs AS current_mrr
    LEFT JOIN crm_account_mrrs AS future_mrr
      ON current_mrr.dim_crm_account_id = future_mrr.dim_crm_account_id
        AND current_mrr.retention_month = future_mrr.mrr_month

), final AS (

    SELECT
    md5(cast(coalesce(cast(retention_subs.dim_crm_account_id as 
    varchar
), '') || '-' || coalesce(cast(retention_month as 
    varchar
), '') as 
    varchar
))
                                                AS fct_retention_id,
      retention_subs.dim_crm_account_id         AS dim_crm_account_id,
      dim_crm_account.crm_account_name         AS crm_account_name,
      retention_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS retention_fiscal_quarter,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS retention_fiscal_year,
      retention_subs.last_renewal_month,
      retention_subs.next_renewal_month,
      current_mrr                               AS prior_year_mrr,
      COALESCE(future_mrr, 0)                   AS net_retention_mrr,
      CASE WHEN net_retention_mrr > 0
        THEN least(net_retention_mrr, current_mrr)
        ELSE 0 END                              AS gross_retention_mrr,
      current_arr                               AS prior_year_arr,
      COALESCE(future_arr, 0)                   AS net_retention_arr,
      CASE WHEN net_retention_arr > 0
        THEN least(net_retention_arr, current_arr)
        ELSE 0 END                              AS gross_retention_arr,
      current_quantity                          AS prior_year_quantity,
      COALESCE(future_quantity, 0)              AS net_retention_quantity,
      current_crm_customer_count                AS prior_year_crm_customer_count,
      COALESCE(future_crm_customer_count, 0)    AS net_retention_crm_customer_count,
      CASE
     WHEN prior_year_quantity != net_retention_quantity
     THEN net_retention_quantity - prior_year_quantity
     ELSE 0
    END                AS seat_change_quantity,
      future_product_category                   AS net_retention_product_category,
      current_product_category                  AS prior_year_product_category,
      future_product_ranking                    AS net_retention_product_ranking,
      current_product_ranking                   AS prior_year_product_ranking,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN net_retention_arr = 0 AND prior_year_arr > 0
       THEN 'Churn'
     WHEN net_retention_arr < prior_year_arr AND net_retention_arr > 0
       THEN 'Contraction'
     WHEN net_retention_arr > prior_year_arr AND row_number > 1
       THEN 'Expansion'
     WHEN net_retention_arr = prior_year_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change,
      CASE
      WHEN prior_year_quantity != net_retention_quantity AND prior_year_quantity > 0
        THEN ZEROIFNULL(prior_year_arr /NULLIF(prior_year_quantity,0) * (net_retention_quantity - prior_year_quantity))
      WHEN prior_year_quantity != net_retention_quantity AND prior_year_quantity = 0
        THEN net_retention_arr
      ELSE 0
    END                AS seat_change_arr,
      ZEROIFNULL(
           CASE
             WHEN prior_year_product_category = net_retention_product_category
               THEN net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0))
             WHEN prior_year_product_category != net_retention_product_category AND prior_year_product_ranking = net_retention_product_ranking
               THEN net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr,
      CASE
      WHEN prior_year_product_ranking != net_retention_product_ranking
      THEN ZEROIFNULL(net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0)))
      ELSE 0
    END                   AS tier_change_arr,
      ZEROIFNULL(( net_retention_arr / NULLIF(net_retention_quantity,0) ) - ( prior_year_arr / NULLIF(prior_year_quantity,0))) AS annual_price_per_seat_change
    FROM retention_subs
    INNER JOIN dim_date
      ON dim_date.date_actual = retention_subs.retention_month
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = retention_subs.dim_crm_account_id
    WHERE retention_month <= dateadd(month, -1, CURRENT_DATE)

)

SELECT
      *,
      '@ken_aguilar'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-10-22'::DATE        AS model_created_date,
      '2022-08-11'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final38:Tc47, **Description:** Enriched instance Service Ping data by ping and metric for 7-day metrics. This is an enhanced version of `fct_ping_instance_metric_7_day` and is defined using the [`macro_mart_ping_instance_metric`](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.macro_mart_ping_instance_metric) macro. 
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Include 7-day metrics (`time_frame = '7d'`)

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - Metrics that timed out (return -1) are set to a value of 0
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 39:T54cc,
 




WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT
    * FROM "PROD".common.fct_ping_instance_metric_7_day
    WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license_id                                                              AS license_id,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.company                                                         AS license_company_name,
      dim_license.license_expire_date                                             AS license_expire_date,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      MAX(mrr)                                                                    AS max_monthly_mrr,
      MAX(IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT product_rate_plan_name)
        WITHIN GROUP (ORDER BY product_rate_plan_name ASC)                        AS product_rate_plan_name_array,
      SUM(quantity)                                                               AS quantity,
      SUM(mrr * 12)                                                               AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON effective_start_month <= dim_date.date_day AND effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22



  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription_md5 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
   WHERE license_md5 IS NOT NULL

  ), license_subscriptions_w_latest_subscription_sha256 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
    WHERE license_sha256 IS NOT NULL

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_id                        , license_subscriptions_w_latest_subscription_sha256.license_id                        ) AS license_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_company_name              , license_subscriptions_w_latest_subscription_sha256.license_company_name              ) AS license_company_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.latest_subscription_id            , license_subscriptions_w_latest_subscription_sha256.latest_subscription_id            ) AS latest_subscription_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.original_subscription_name_slugify, license_subscriptions_w_latest_subscription_sha256.original_subscription_name_slugify) AS original_subscription_name_slugify,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_category_array            , license_subscriptions_w_latest_subscription_sha256.product_category_array            ) AS product_category_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_rate_plan_name_array      , license_subscriptions_w_latest_subscription_sha256.product_rate_plan_name_array      ) AS product_rate_plan_name_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_start_month          , license_subscriptions_w_latest_subscription_sha256.subscription_start_month          ) AS subscription_start_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_end_month            , license_subscriptions_w_latest_subscription_sha256.subscription_end_month            ) AS subscription_end_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_billing_account_id            , license_subscriptions_w_latest_subscription_sha256.dim_billing_account_id            ) AS dim_billing_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.crm_account_name                  , license_subscriptions_w_latest_subscription_sha256.crm_account_name                  ) AS crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_parent_crm_account_id         , license_subscriptions_w_latest_subscription_sha256.dim_parent_crm_account_id         ) AS dim_parent_crm_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_name           , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_name           ) AS parent_crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_upa_country    , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_upa_country    ) AS parent_crm_account_upa_country,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_sales_segment  , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_sales_segment  ) AS parent_crm_account_sales_segment,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_industry       , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_industry       ) AS parent_crm_account_industry,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_territory      , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_territory      ) AS parent_crm_account_territory,
        COALESCE(license_subscriptions_w_latest_subscription_md5.technical_account_manager         , license_subscriptions_w_latest_subscription_sha256.technical_account_manager         ) AS technical_account_manager,
        CASE
          WHEN license_subscriptions_w_latest_subscription_sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_sha256.max_monthly_mrr > 0 THEN TRUE
          WHEN license_subscriptions_w_latest_subscription_md5.max_monthly_mrr > 0 THEN TRUE
          ELSE FALSE
        END                                                                                                                             AS is_paid_subscription,
        COALESCE(license_subscriptions_w_latest_subscription_md5.is_program_subscription,license_subscriptions_w_latest_subscription_sha256.is_program_subscription, FALSE)       AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        dim_date.first_day_of_week                                                                                                      AS ping_created_date_week,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        dim_ping_instance.is_last_ping_of_week                                                                                          AS is_last_ping_of_week,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription_md5
        ON dim_ping_instance.license_md5 = license_subscriptions_w_latest_subscription_md5.license_md5
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription_sha256
        ON dim_ping_instance.license_sha256 = license_subscriptions_w_latest_subscription_sha256.license_sha256
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month,
      ping_created_date_week,
      is_last_ping_of_week

    FROM joined
      WHERE time_frame != 'none'
        AND TRY_TO_DECIMAL(metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted

3a:Tc4b, **Description:** Enriched instance Service Ping data by ping and metric for 28-day metrics. This is an enhanced version of `fct_ping_instance_metric_28_day` and is defined using the [`macro_mart_ping_instance_metric`](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.macro_mart_ping_instance_metric) macro. 
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Include 28-day metrics (`time_frame = '28d'`)

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - Metrics that timed out (return -1) are set to a value of 0
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 3b:T54cc,





WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT
    * FROM "PROD".common.fct_ping_instance_metric_28_day
    WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license_id                                                              AS license_id,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.company                                                         AS license_company_name,
      dim_license.license_expire_date                                             AS license_expire_date,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      MAX(mrr)                                                                    AS max_monthly_mrr,
      MAX(IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT product_rate_plan_name)
        WITHIN GROUP (ORDER BY product_rate_plan_name ASC)                        AS product_rate_plan_name_array,
      SUM(quantity)                                                               AS quantity,
      SUM(mrr * 12)                                                               AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON effective_start_month <= dim_date.date_day AND effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22



  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription_md5 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
   WHERE license_md5 IS NOT NULL

  ), license_subscriptions_w_latest_subscription_sha256 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
    WHERE license_sha256 IS NOT NULL

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_id                        , license_subscriptions_w_latest_subscription_sha256.license_id                        ) AS license_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_company_name              , license_subscriptions_w_latest_subscription_sha256.license_company_name              ) AS license_company_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.latest_subscription_id            , license_subscriptions_w_latest_subscription_sha256.latest_subscription_id            ) AS latest_subscription_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.original_subscription_name_slugify, license_subscriptions_w_latest_subscription_sha256.original_subscription_name_slugify) AS original_subscription_name_slugify,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_category_array            , license_subscriptions_w_latest_subscription_sha256.product_category_array            ) AS product_category_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_rate_plan_name_array      , license_subscriptions_w_latest_subscription_sha256.product_rate_plan_name_array      ) AS product_rate_plan_name_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_start_month          , license_subscriptions_w_latest_subscription_sha256.subscription_start_month          ) AS subscription_start_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_end_month            , license_subscriptions_w_latest_subscription_sha256.subscription_end_month            ) AS subscription_end_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_billing_account_id            , license_subscriptions_w_latest_subscription_sha256.dim_billing_account_id            ) AS dim_billing_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.crm_account_name                  , license_subscriptions_w_latest_subscription_sha256.crm_account_name                  ) AS crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_parent_crm_account_id         , license_subscriptions_w_latest_subscription_sha256.dim_parent_crm_account_id         ) AS dim_parent_crm_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_name           , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_name           ) AS parent_crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_upa_country    , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_upa_country    ) AS parent_crm_account_upa_country,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_sales_segment  , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_sales_segment  ) AS parent_crm_account_sales_segment,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_industry       , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_industry       ) AS parent_crm_account_industry,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_territory      , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_territory      ) AS parent_crm_account_territory,
        COALESCE(license_subscriptions_w_latest_subscription_md5.technical_account_manager         , license_subscriptions_w_latest_subscription_sha256.technical_account_manager         ) AS technical_account_manager,
        CASE
          WHEN license_subscriptions_w_latest_subscription_sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_sha256.max_monthly_mrr > 0 THEN TRUE
          WHEN license_subscriptions_w_latest_subscription_md5.max_monthly_mrr > 0 THEN TRUE
          ELSE FALSE
        END                                                                                                                             AS is_paid_subscription,
        COALESCE(license_subscriptions_w_latest_subscription_md5.is_program_subscription,license_subscriptions_w_latest_subscription_sha256.is_program_subscription, FALSE)       AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        dim_date.first_day_of_week                                                                                                      AS ping_created_date_week,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        dim_ping_instance.is_last_ping_of_week                                                                                          AS is_last_ping_of_week,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription_md5
        ON dim_ping_instance.license_md5 = license_subscriptions_w_latest_subscription_md5.license_md5
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription_sha256
        ON dim_ping_instance.license_sha256 = license_subscriptions_w_latest_subscription_sha256.license_sha256
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month,
      ping_created_date_week,
      is_last_ping_of_week

    FROM joined
      WHERE time_frame != 'none'
        AND TRY_TO_DECIMAL(metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted

3c:T913e,{{
  config(
    materialized='table',
    tags=["mnpi_exception"]
  )
}}

{{ simple_cte([
    ('monthly_saas_metrics','rpt_gainsight_metrics_monthly_paid_saas'),
    ('monthly_sm_metrics','rpt_gainsight_metrics_monthly_paid_self_managed'),
    ('billing_accounts','dim_billing_account'),
    ('location_country', 'dim_location_country'),
    ('subscriptions', 'dim_subscription'),
    ('namespaces', 'dim_namespace'),
    ('charges', 'mart_charge'),
    ('dates', 'dim_date'),
    ('aggregated_metrics', 'redis_namespace_snowplow_clicks_aggregated_workspace'),
    ('redis_metrics_28d_user', 'wk_rpt_user_based_metric_counts_namespace_monthly'),
    ('redis_metrics_all_time_event', 'wk_rpt_event_based_metric_counts_namespace_all_time')
]) }}


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    {{ dbt_utils.group_by(n = 2) }}
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (	
  	
    SELECT	
      *	
    FROM aggregated_metrics 	
    WHERE event_action = 'p_terraform_state_api_unique_users'	
   	
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}             AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                 AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status                         AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                      AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      'Self-Managed'                                                               AS delivery_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                            AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                     AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                            AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}              AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users	
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 	
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      {{ dbt_utils.surrogate_key(
        [
          'snapshot_month',
          'dim_subscription_id_original',
          'uuid',
          'hostname',
          'dim_namespace_id'
        ]
      ) }} AS primary_key
    FROM unioned
  
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mdrussell",
    updated_by="@mdrussell",
    created_date="2022-09-09",
    updated_date="2023-05-30"
) }}3d:T943f,



WITH monthly_saas_metrics AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_gainsight_metrics_monthly_paid_saas

), monthly_sm_metrics AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_gainsight_metrics_monthly_paid_self_managed

), billing_accounts AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), location_country AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), subscriptions AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), namespaces AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

), aggregated_metrics AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.redis_namespace_snowplow_clicks_aggregated_workspace

), redis_metrics_28d_user AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_user_based_metric_counts_namespace_monthly

), redis_metrics_all_time_event AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_event_based_metric_counts_namespace_all_time

)


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    group by 1,2
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (	
  	
    SELECT	
      *	
    FROM aggregated_metrics 	
    WHERE event_action = 'p_terraform_state_api_unique_users'	
   	
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

             AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                 AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status                         AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                      AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      'Self-Managed'                                                               AS delivery_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                            AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                     AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                            AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

              AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users	
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 	
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      md5(cast(coalesce(cast(snapshot_month as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id_original as 
    varchar
), '') || '-' || coalesce(cast(uuid as 
    varchar
), '') || '-' || coalesce(cast(hostname as 
    varchar
), '') || '-' || coalesce(cast(dim_namespace_id as 
    varchar
), '') as 
    varchar
)) AS primary_key
    FROM unioned
  
)

SELECT
      *,
      '@mdrussell'::VARCHAR       AS created_by,
      '@mdrussell'::VARCHAR       AS updated_by,
      '2022-09-09'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final3e:T2143,{{ simple_cte([
    ('dim_billing_account','dim_billing_account'),
    ('dim_crm_account','dim_crm_account'),
    ('dim_date','dim_date'),
    ('dim_product_detail','dim_product_detail'),
    ('dim_subscription','dim_subscription'),
    ('fct_mrr', 'fct_mrr')
]) }}

, mart_arr AS (

    SELECT
      dim_date.date_actual                                                                          AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL)               AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)                             AS fiscal_year,
      dim_crm_account.parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id,
      COALESCE(dim_crm_account.merged_to_account_id, dim_crm_account.dim_crm_account_id)            AS dim_crm_account_id,
      dim_subscription.subscription_name,
      dim_subscription.dim_subscription_id                                                          AS subscription_id,
      dim_product_detail.product_tier_name                                                          AS product_category,
      dim_product_detail.product_delivery_type                                                      AS delivery,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE fct_mrr.subscription_status IN ('Active', 'Cancelled')
      AND dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      product_category,
      delivery,
      product_ranking,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    {{ dbt_utils.group_by(n=8) }}

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      product_category,
      delivery,
      product_ranking,
      dim_date.date_actual AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_subscription_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      base.dim_crm_account_id,
      base.subscription_name,
      base.subscription_id,
      base.product_category,
      base.delivery,
      base.product_ranking,
      SUM(ZEROIFNULL(quantity))                                                               AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                 AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.subscription_id = mart_arr.subscription_id
      AND base.product_category = mart_arr.product_category
    {{ dbt_utils.group_by(n=9) }}

), prior_month AS (

    SELECT
      monthly_arr_subscription_level.*,
      COALESCE(LAG(quantity) OVER (PARTITION BY subscription_id, product_category ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY subscription_id, product_category ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY subscription_id, product_category ORDER BY arr_month) AS row_number
    FROM monthly_arr_subscription_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      {{ type_of_arr_change('arr','previous_arr','row_number') }}
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      {{ reason_for_arr_change_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      {{ reason_for_quantity_change_seat_change('quantity', 'previous_quantity') }}
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      {{ reason_for_arr_change_price_change('product_category', 'product_category', 'quantity', 'previous_quantity', 'arr', 'previous_arr', 'product_ranking',' product_ranking') }}
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      {{ annual_price_per_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }}
    FROM type_of_arr_change

), combined AS (

    SELECT
      {{ dbt_utils.surrogate_key(['type_of_arr_change.arr_month', 'type_of_arr_change.subscription_id','type_of_arr_change.product_category']) }}
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.dim_crm_account_id,
      type_of_arr_change.subscription_name,
      type_of_arr_change.subscription_id,
      type_of_arr_change.product_category,
      type_of_arr_change.delivery,
      type_of_arr_change.product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.subscription_id = reason_for_arr_change_beg.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_beg.product_category
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_seat_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_seat_change.product_category
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_price_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_price_change.product_category
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.subscription_id = reason_for_arr_change_end.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_end.product_category
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.subscription_id = annual_price_per_seat_change.subscription_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month
      AND type_of_arr_change.product_category = annual_price_per_seat_change.product_category

)

SELECT *
FROM combined3f:T2613,

WITH dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), fct_mrr AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr

)

, mart_arr AS (

    SELECT
      dim_date.date_actual                                                                          AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL)               AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)                             AS fiscal_year,
      dim_crm_account.parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id,
      COALESCE(dim_crm_account.merged_to_account_id, dim_crm_account.dim_crm_account_id)            AS dim_crm_account_id,
      dim_subscription.subscription_name,
      dim_subscription.dim_subscription_id                                                          AS subscription_id,
      dim_product_detail.product_tier_name                                                          AS product_category,
      dim_product_detail.product_delivery_type                                                      AS delivery,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE fct_mrr.subscription_status IN ('Active', 'Cancelled')
      AND dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      product_category,
      delivery,
      product_ranking,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    group by 1,2,3,4,5,6,7,8

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_crm_account_id,
      subscription_name,
      subscription_id,
      product_category,
      delivery,
      product_ranking,
      dim_date.date_actual AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_subscription_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      base.dim_crm_account_id,
      base.subscription_name,
      base.subscription_id,
      base.product_category,
      base.delivery,
      base.product_ranking,
      SUM(ZEROIFNULL(quantity))                                                               AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                 AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.subscription_id = mart_arr.subscription_id
      AND base.product_category = mart_arr.product_category
    group by 1,2,3,4,5,6,7,8,9

), prior_month AS (

    SELECT
      monthly_arr_subscription_level.*,
      COALESCE(LAG(quantity) OVER (PARTITION BY subscription_id, product_category ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY subscription_id, product_category ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY subscription_id, product_category ORDER BY arr_month) AS row_number
    FROM monthly_arr_subscription_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN arr = 0 AND previous_arr > 0
       THEN 'Churn'
     WHEN arr < previous_arr AND arr > 0
       THEN 'Contraction'
     WHEN arr > previous_arr AND row_number > 1
       THEN 'Expansion'
     WHEN arr = previous_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      CASE
      WHEN previous_quantity != quantity AND previous_quantity > 0
        THEN ZEROIFNULL(previous_arr /NULLIF(previous_quantity,0) * (quantity - previous_quantity))
      WHEN previous_quantity != quantity AND previous_quantity = 0
        THEN arr
      ELSE 0
    END                AS seat_change_arr,
      CASE
     WHEN previous_quantity != quantity
     THEN quantity - previous_quantity
     ELSE 0
    END                AS seat_change_quantity
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      ZEROIFNULL(
           CASE
             WHEN product_category = product_category
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             WHEN product_category != product_category AND  product_ranking = product_ranking
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      subscription_id,
      product_category,
      ZEROIFNULL(( arr / NULLIF(quantity,0) ) - ( previous_arr / NULLIF(previous_quantity,0))) AS annual_price_per_seat_change
    FROM type_of_arr_change

), combined AS (

    SELECT
      md5(cast(coalesce(cast(type_of_arr_change.arr_month as 
    varchar
), '') || '-' || coalesce(cast(type_of_arr_change.subscription_id as 
    varchar
), '') || '-' || coalesce(cast(type_of_arr_change.product_category as 
    varchar
), '') as 
    varchar
))
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.dim_crm_account_id,
      type_of_arr_change.subscription_name,
      type_of_arr_change.subscription_id,
      type_of_arr_change.product_category,
      type_of_arr_change.delivery,
      type_of_arr_change.product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.subscription_id = reason_for_arr_change_beg.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_beg.product_category
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_seat_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_seat_change.product_category
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.subscription_id = reason_for_arr_change_price_change.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_price_change.product_category
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.subscription_id = reason_for_arr_change_end.subscription_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
      AND type_of_arr_change.product_category = reason_for_arr_change_end.product_category
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.subscription_id = annual_price_per_seat_change.subscription_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month
      AND type_of_arr_change.product_category = annual_price_per_seat_change.product_category

)

SELECT *
FROM combined40:T4b73,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('dim_ping_instance', 'dim_ping_instance'),
    ('dim_product_tier', 'dim_product_tier'),
    ('dim_date', 'dim_date'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_crm_accounts', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('fct_charge', 'fct_charge'),
    ('dim_license', 'dim_license'),
    ('dim_hosts', 'dim_hosts'),
    ('dim_location', 'dim_location_country'),
    ('dim_ping_metric', 'dim_ping_metric')
    ])

}}

, dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT *
  FROM {{ ref('fct_ping_instance_metric_monthly') }}
  WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT DISTINCT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license.dim_license_id                                                  AS license_id,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.company                                                         AS license_company_name,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      IFF(MAX(fct_charge.mrr) > 0, TRUE, FALSE)                                   AS is_paid_subscription,
      MAX(IFF(dim_product_detail.product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)) 
                                                                                  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT dim_product_detail.product_rate_plan_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_rate_plan_name ASC)     AS product_rate_plan_name_array,
      SUM(fct_charge.quantity)                                                    AS quantity,
      SUM(fct_charge.mrr * 12)                                                    AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND fct_charge.charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
      AND dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND dim_product_detail.product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON fct_charge.effective_start_month <= dim_date.date_day AND fct_charge.effective_end_month > dim_date.date_day
    {{ dbt_utils.group_by(n=21)}}


  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.monthly_metric_value                                                                                   AS monthly_metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_sha256.license_id, license_md5.license_id)                                                                     AS license_id,
        COALESCE(license_sha256.license_company_name, license_md5.license_company_name)                                                 AS license_company_name,
        COALESCE(license_sha256.latest_subscription_id, license_md5.latest_subscription_id)                                             AS latest_subscription_id,
        COALESCE(license_sha256.original_subscription_name_slugify, license_md5.original_subscription_name_slugify)                     AS original_subscription_name_slugify,
        COALESCE(license_sha256.product_category_array, license_md5.product_category_array)                                             AS product_category_array,
        COALESCE(license_sha256.product_rate_plan_name_array, license_md5.product_rate_plan_name_array)                                 AS product_rate_plan_name_array,
        COALESCE(license_sha256.subscription_start_month, license_md5.subscription_start_month)                                         AS subscription_start_month,
        COALESCE(license_sha256.subscription_end_month, license_md5.subscription_end_month)                                             AS subscription_end_month,
        COALESCE(license_sha256.dim_billing_account_id, license_md5.dim_billing_account_id)                                             AS dim_billing_account_id,
        COALESCE(license_sha256.crm_account_name, license_md5.crm_account_name)                                                         AS crm_account_name,
        COALESCE(license_sha256.dim_parent_crm_account_id, license_md5.dim_parent_crm_account_id)                                       AS dim_parent_crm_account_id,
        COALESCE(license_sha256.parent_crm_account_name, license_md5.parent_crm_account_name)                                           AS parent_crm_account_name,
        COALESCE(license_sha256.parent_crm_account_upa_country, license_md5.parent_crm_account_upa_country)                             AS parent_crm_account_upa_country,
        COALESCE(license_sha256.parent_crm_account_sales_segment, license_md5.parent_crm_account_sales_segment)                         AS parent_crm_account_sales_segment,
        COALESCE(license_sha256.parent_crm_account_industry, license_md5.parent_crm_account_industry)                                   AS parent_crm_account_industry,
        COALESCE(license_sha256.parent_crm_account_territory, license_md5.parent_crm_account_territory)                                 AS parent_crm_account_territory,
        COALESCE(license_sha256.technical_account_manager, license_md5.technical_account_manager)                                       AS technical_account_manager,
        COALESCE(license_sha256.is_paid_subscription, license_md5.is_paid_subscription, FALSE)                                          AS is_paid_subscription,
        COALESCE(license_sha256.is_program_subscription, license_md5.is_program_subscription, FALSE)                                    AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN dim_hosts
        ON dim_ping_instance.dim_host_id = dim_hosts.host_id
          AND dim_ping_instance.ip_address_hash = dim_hosts.source_ip_hash
          AND dim_ping_instance.dim_instance_id = dim_hosts.instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_md5
        ON dim_ping_instance.license_md5 = license_md5.license_md5
          AND dim_date.first_day_of_month = license_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_sha256
        ON dim_ping_instance.license_sha256 = license_sha256.license_sha256
          AND dim_date.first_day_of_month = license_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE dim_ping_instance.ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (dim_ping_instance.ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      {{ dbt_utils.surrogate_key(['dim_ping_instance_id', 'metrics_path']) }} AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      monthly_metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month


    FROM joined
    WHERE time_frame != 'none'
      AND TRY_TO_DECIMAL(monthly_metric_value::TEXT) >= 0

)

{{ dbt_audit(
    cte_ref="sorted",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-11",
    updated_date="2023-06-22"
) }}41:Tc88, **Description:** Enriched instance Service Ping data for the last ping of the month per installation by ping and metric for 28-day and all-time metrics. This model is used for most monthly analysis and reporting. This is an enhanced version of `fct_ping_instance_metric_monthly`
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Exclude metrics that timed out during ping generation
- `Inherited` - Include 28-day and all-time metrics (`time_frame IN ('28d', 'all')`)
- `Inherited` - Include metrics from the 'Last Ping of the Month' pings

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `ping_deployment_type IN ('Self-Managed', 'SaaS')`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 42:T4e28,



WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_hosts AS (

    SELECT * 
    FROM "PROD".legacy.dim_hosts

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT *
  FROM "PROD".common.fct_ping_instance_metric_monthly
  WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT DISTINCT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license.dim_license_id                                                  AS license_id,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.company                                                         AS license_company_name,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      IFF(MAX(fct_charge.mrr) > 0, TRUE, FALSE)                                   AS is_paid_subscription,
      MAX(IFF(dim_product_detail.product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)) 
                                                                                  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT dim_product_detail.product_rate_plan_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_rate_plan_name ASC)     AS product_rate_plan_name_array,
      SUM(fct_charge.quantity)                                                    AS quantity,
      SUM(fct_charge.mrr * 12)                                                    AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND fct_charge.charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
      AND dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND dim_product_detail.product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON fct_charge.effective_start_month <= dim_date.date_day AND fct_charge.effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21


  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.monthly_metric_value                                                                                   AS monthly_metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_sha256.license_id, license_md5.license_id)                                                                     AS license_id,
        COALESCE(license_sha256.license_company_name, license_md5.license_company_name)                                                 AS license_company_name,
        COALESCE(license_sha256.latest_subscription_id, license_md5.latest_subscription_id)                                             AS latest_subscription_id,
        COALESCE(license_sha256.original_subscription_name_slugify, license_md5.original_subscription_name_slugify)                     AS original_subscription_name_slugify,
        COALESCE(license_sha256.product_category_array, license_md5.product_category_array)                                             AS product_category_array,
        COALESCE(license_sha256.product_rate_plan_name_array, license_md5.product_rate_plan_name_array)                                 AS product_rate_plan_name_array,
        COALESCE(license_sha256.subscription_start_month, license_md5.subscription_start_month)                                         AS subscription_start_month,
        COALESCE(license_sha256.subscription_end_month, license_md5.subscription_end_month)                                             AS subscription_end_month,
        COALESCE(license_sha256.dim_billing_account_id, license_md5.dim_billing_account_id)                                             AS dim_billing_account_id,
        COALESCE(license_sha256.crm_account_name, license_md5.crm_account_name)                                                         AS crm_account_name,
        COALESCE(license_sha256.dim_parent_crm_account_id, license_md5.dim_parent_crm_account_id)                                       AS dim_parent_crm_account_id,
        COALESCE(license_sha256.parent_crm_account_name, license_md5.parent_crm_account_name)                                           AS parent_crm_account_name,
        COALESCE(license_sha256.parent_crm_account_upa_country, license_md5.parent_crm_account_upa_country)                             AS parent_crm_account_upa_country,
        COALESCE(license_sha256.parent_crm_account_sales_segment, license_md5.parent_crm_account_sales_segment)                         AS parent_crm_account_sales_segment,
        COALESCE(license_sha256.parent_crm_account_industry, license_md5.parent_crm_account_industry)                                   AS parent_crm_account_industry,
        COALESCE(license_sha256.parent_crm_account_territory, license_md5.parent_crm_account_territory)                                 AS parent_crm_account_territory,
        COALESCE(license_sha256.technical_account_manager, license_md5.technical_account_manager)                                       AS technical_account_manager,
        COALESCE(license_sha256.is_paid_subscription, license_md5.is_paid_subscription, FALSE)                                          AS is_paid_subscription,
        COALESCE(license_sha256.is_program_subscription, license_md5.is_program_subscription, FALSE)                                    AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN dim_hosts
        ON dim_ping_instance.dim_host_id = dim_hosts.host_id
          AND dim_ping_instance.ip_address_hash = dim_hosts.source_ip_hash
          AND dim_ping_instance.dim_instance_id = dim_hosts.instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_md5
        ON dim_ping_instance.license_md5 = license_md5.license_md5
          AND dim_date.first_day_of_month = license_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_sha256
        ON dim_ping_instance.license_sha256 = license_sha256.license_sha256
          AND dim_date.first_day_of_month = license_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE dim_ping_instance.ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (dim_ping_instance.ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      monthly_metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month


    FROM joined
    WHERE time_frame != 'none'
      AND TRY_TO_DECIMAL(monthly_metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted43:T29ca,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
    "materialized": "table"
    })
}}

{{ simple_cte([
    ('versions', 'customers_db_versions_source'),
    ('current_orders', 'customers_db_orders_source'),
    ('dim_date', 'dim_date'),
    ('namespaces', 'prep_namespace'),
    ('subscriptions', 'dim_subscription'),
    ('billing_accounts', 'dim_billing_account')
]) }}

, customers_db_versions AS (

    SELECT *
    FROM versions
    -- selecting only orders
    WHERE item_type = 'Order'
      AND object IS NOT NULL

), flattened_object AS (

    -- objects look like a yaml table, splitting the object into rows at each linebreak
    -- column keys will be turned into column names and populated by the associated column values
    -- column values are all strings, some wrapped in extra quotations, some containing multiple colons 
    SELECT
      *,
      SPLIT_PART(value, ': ', 1)                                                          AS column_key,
      NULLIF(TRIM(SPLIT_PART(value, column_key || ': ', 2), ''''),'')                     AS column_value
    FROM customers_db_versions,
    LATERAL SPLIT_TO_TABLE(object, '\n')

), cleaned AS (

    -- this CTE attempts to further clean up column values
    -- namespace id: messy data from source, uses regular expression to remove all non-numeric characters
    -- boolean column: set NULL equal to FALSE
    -- timestamp columns: can come with 3-4 additional rows in the original object
    --   when the associated column_value for each timestamp column_key is not a timestamp the 3rd or 4th
    --   row following contains the actual timestamp value
    --   additionally, the created_at column sometimes contained '&1 ' before the timestamp value
    SELECT
      version_id,
      item_id                                                                             AS order_id,
      created_at                                                                          AS valid_to,
      IFF(column_key = 'customer_id', column_value::NUMBER, NULL)                         AS customer_id,
      IFF(column_key = 'product_rate_plan_id', column_value, NULL)                        AS product_rate_plan_id,
      IFF(column_key = 'subscription_id', column_value, NULL)                             AS subscription_id,
      IFF(column_key = 'subscription_name', column_value, NULL)                           AS subscription_name,
      IFF(column_key = 'start_date', column_value::DATE, NULL)                            AS order_start_date,
      IFF(column_key = 'end_date', column_value::DATE, NULL)                              AS order_end_date,
      IFF(column_key = 'quantity', column_value::NUMBER, NULL)                            AS order_quantity,
      IFF(column_key = 'created_at',
          COALESCE(TRY_TO_TIMESTAMP(LTRIM(column_value, '&1 ')),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_created_at,
      IFF(column_key = 'updated_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_updated_at,
      IFF(column_key = 'gl_namespace_id',
          TRY_TO_NUMBER(REGEXP_REPLACE(column_value, '[^0-9]+', '')),
          NULL)                                                                           AS gitlab_namespace_id,
      IFF(column_key = 'gl_namespace_name', column_value, NULL)                           AS gitlab_namespace_name,
      IFF(column_key = 'amendment_type', column_value, NULL)                              AS amendment_type,
      IFF(column_key = 'trial', IFNULL(column_value, FALSE)::BOOLEAN, NULL)               AS order_is_trial,
      IFF(column_key = 'last_extra_ci_minutes_sync_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS last_extra_ci_minutes_sync_at,
      IFF(column_key = 'zuora_account_id', column_value, NULL)                            AS zuora_account_id,
      IFF(column_key = 'increased_billing_rate_notified_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS increased_billing_rate_notified_at
    FROM flattened_object
  
), pivoted AS (

    SELECT 
      version_id, 
      order_id,
      valid_to,
      MAX(customer_id)                                                                    AS customer_id,
      MAX(product_rate_plan_id)                                                           AS product_rate_plan_id,
      MAX(subscription_id)                                                                AS subscription_id,
      MAX(subscription_name)                                                              AS subscription_name,
      MAX(order_start_date)                                                               AS order_start_date,
      MAX(order_end_date)                                                                 AS order_end_date,
      MAX(order_quantity)                                                                 AS order_quantity,
      MAX(order_created_at)                                                               AS order_created_at,
      MAX(order_updated_at)                                                               AS order_updated_at,
      MAX(gitlab_namespace_id)                                                            AS gitlab_namespace_id,
      MAX(gitlab_namespace_name)                                                          AS gitlab_namespace_name,
      MAX(amendment_type)                                                                 AS amendment_type,
      MAX(order_is_trial)                                                                 AS order_is_trial,
      MAX(last_extra_ci_minutes_sync_at)                                                  AS last_extra_ci_minutes_sync_at,
      MAX(zuora_account_id)                                                               AS zuora_account_id,
      MAX(increased_billing_rate_notified_at)                                             AS increased_billing_rate_notified_at
    FROM cleaned
    {{ dbt_utils.group_by(n=3) }}

), unioned AS (

    SELECT 
      order_id                                                                            AS dim_order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id                                                                     AS dim_subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER                                                         AS dim_namespace_id,
      gitlab_namespace_name                                                               AS namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id                                                                    AS dim_billing_account_id,
      increased_billing_rate_notified_at,
      IFNULL(LAG(valid_to) OVER (PARTITION BY order_id ORDER BY version_id),
             order_created_at)                                                            AS valid_from,
      valid_to
    FROM pivoted
    WHERE order_created_at IS NOT NULL

    UNION ALL

    SELECT 
      order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER,
      gitlab_namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id,
      increased_billing_rate_notified_at,
      order_updated_at                                                                    AS valid_from,
      NULL                                                                                AS valid_to
    FROM current_orders

), joined AS (

    SELECT 
      unioned.dim_order_id,
      unioned.customer_id,
      unioned.product_rate_plan_id,
      unioned.order_created_at,
      start_dates.date_day                                                                AS order_start_date,
      end_dates.date_day                                                                  AS order_end_date,
      unioned.order_quantity,
      subscriptions.dim_subscription_id,
      subscriptions.subscription_name,
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      billing_accounts.dim_billing_account_id,
      unioned.amendment_type,
      unioned.order_is_trial,
      unioned.last_extra_ci_minutes_sync_at,
      unioned.increased_billing_rate_notified_at,
      unioned.valid_from,
      unioned.valid_to
    FROM unioned
    LEFT JOIN subscriptions
      ON unioned.dim_subscription_id = subscriptions.dim_subscription_id
    LEFT JOIN namespaces
      ON unioned.dim_namespace_id = namespaces.dim_namespace_id
    LEFT JOIN billing_accounts
      ON unioned.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN dim_date AS start_dates
      ON unioned.order_start_date = start_dates.date_day
    LEFT JOIN dim_date AS end_dates
      ON unioned.order_end_date = end_dates.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@ischweickartDD",
    created_date="2021-07-07",
    updated_date="2021-07-07"
) }}44:T2b1e,





WITH versions AS (

    SELECT * 
    FROM "PREP".sensitive.customers_db_versions_source

), current_orders AS (

    SELECT * 
    FROM "PREP".customers.customers_db_orders_source

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), namespaces AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), subscriptions AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), billing_accounts AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

)

, customers_db_versions AS (

    SELECT *
    FROM versions
    -- selecting only orders
    WHERE item_type = 'Order'
      AND object IS NOT NULL

), flattened_object AS (

    -- objects look like a yaml table, splitting the object into rows at each linebreak
    -- column keys will be turned into column names and populated by the associated column values
    -- column values are all strings, some wrapped in extra quotations, some containing multiple colons 
    SELECT
      *,
      SPLIT_PART(value, ': ', 1)                                                          AS column_key,
      NULLIF(TRIM(SPLIT_PART(value, column_key || ': ', 2), ''''),'')                     AS column_value
    FROM customers_db_versions,
    LATERAL SPLIT_TO_TABLE(object, '\n')

), cleaned AS (

    -- this CTE attempts to further clean up column values
    -- namespace id: messy data from source, uses regular expression to remove all non-numeric characters
    -- boolean column: set NULL equal to FALSE
    -- timestamp columns: can come with 3-4 additional rows in the original object
    --   when the associated column_value for each timestamp column_key is not a timestamp the 3rd or 4th
    --   row following contains the actual timestamp value
    --   additionally, the created_at column sometimes contained '&1 ' before the timestamp value
    SELECT
      version_id,
      item_id                                                                             AS order_id,
      created_at                                                                          AS valid_to,
      IFF(column_key = 'customer_id', column_value::NUMBER, NULL)                         AS customer_id,
      IFF(column_key = 'product_rate_plan_id', column_value, NULL)                        AS product_rate_plan_id,
      IFF(column_key = 'subscription_id', column_value, NULL)                             AS subscription_id,
      IFF(column_key = 'subscription_name', column_value, NULL)                           AS subscription_name,
      IFF(column_key = 'start_date', column_value::DATE, NULL)                            AS order_start_date,
      IFF(column_key = 'end_date', column_value::DATE, NULL)                              AS order_end_date,
      IFF(column_key = 'quantity', column_value::NUMBER, NULL)                            AS order_quantity,
      IFF(column_key = 'created_at',
          COALESCE(TRY_TO_TIMESTAMP(LTRIM(column_value, '&1 ')),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_created_at,
      IFF(column_key = 'updated_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_updated_at,
      IFF(column_key = 'gl_namespace_id',
          TRY_TO_NUMBER(REGEXP_REPLACE(column_value, '[^0-9]+', '')),
          NULL)                                                                           AS gitlab_namespace_id,
      IFF(column_key = 'gl_namespace_name', column_value, NULL)                           AS gitlab_namespace_name,
      IFF(column_key = 'amendment_type', column_value, NULL)                              AS amendment_type,
      IFF(column_key = 'trial', IFNULL(column_value, FALSE)::BOOLEAN, NULL)               AS order_is_trial,
      IFF(column_key = 'last_extra_ci_minutes_sync_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS last_extra_ci_minutes_sync_at,
      IFF(column_key = 'zuora_account_id', column_value, NULL)                            AS zuora_account_id,
      IFF(column_key = 'increased_billing_rate_notified_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS increased_billing_rate_notified_at
    FROM flattened_object
  
), pivoted AS (

    SELECT 
      version_id, 
      order_id,
      valid_to,
      MAX(customer_id)                                                                    AS customer_id,
      MAX(product_rate_plan_id)                                                           AS product_rate_plan_id,
      MAX(subscription_id)                                                                AS subscription_id,
      MAX(subscription_name)                                                              AS subscription_name,
      MAX(order_start_date)                                                               AS order_start_date,
      MAX(order_end_date)                                                                 AS order_end_date,
      MAX(order_quantity)                                                                 AS order_quantity,
      MAX(order_created_at)                                                               AS order_created_at,
      MAX(order_updated_at)                                                               AS order_updated_at,
      MAX(gitlab_namespace_id)                                                            AS gitlab_namespace_id,
      MAX(gitlab_namespace_name)                                                          AS gitlab_namespace_name,
      MAX(amendment_type)                                                                 AS amendment_type,
      MAX(order_is_trial)                                                                 AS order_is_trial,
      MAX(last_extra_ci_minutes_sync_at)                                                  AS last_extra_ci_minutes_sync_at,
      MAX(zuora_account_id)                                                               AS zuora_account_id,
      MAX(increased_billing_rate_notified_at)                                             AS increased_billing_rate_notified_at
    FROM cleaned
    group by 1,2,3

), unioned AS (

    SELECT 
      order_id                                                                            AS dim_order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id                                                                     AS dim_subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER                                                         AS dim_namespace_id,
      gitlab_namespace_name                                                               AS namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id                                                                    AS dim_billing_account_id,
      increased_billing_rate_notified_at,
      IFNULL(LAG(valid_to) OVER (PARTITION BY order_id ORDER BY version_id),
             order_created_at)                                                            AS valid_from,
      valid_to
    FROM pivoted
    WHERE order_created_at IS NOT NULL

    UNION ALL

    SELECT 
      order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER,
      gitlab_namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id,
      increased_billing_rate_notified_at,
      order_updated_at                                                                    AS valid_from,
      NULL                                                                                AS valid_to
    FROM current_orders

), joined AS (

    SELECT 
      unioned.dim_order_id,
      unioned.customer_id,
      unioned.product_rate_plan_id,
      unioned.order_created_at,
      start_dates.date_day                                                                AS order_start_date,
      end_dates.date_day                                                                  AS order_end_date,
      unioned.order_quantity,
      subscriptions.dim_subscription_id,
      subscriptions.subscription_name,
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      billing_accounts.dim_billing_account_id,
      unioned.amendment_type,
      unioned.order_is_trial,
      unioned.last_extra_ci_minutes_sync_at,
      unioned.increased_billing_rate_notified_at,
      unioned.valid_from,
      unioned.valid_to
    FROM unioned
    LEFT JOIN subscriptions
      ON unioned.dim_subscription_id = subscriptions.dim_subscription_id
    LEFT JOIN namespaces
      ON unioned.dim_namespace_id = namespaces.dim_namespace_id
    LEFT JOIN billing_accounts
      ON unioned.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN dim_date AS start_dates
      ON unioned.order_start_date = start_dates.date_day
    LEFT JOIN dim_date AS end_dates
      ON unioned.order_end_date = end_dates.date_day

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@ischweickartDD'::VARCHAR       AS updated_by,
      '2021-07-07'::DATE        AS model_created_date,
      '2021-07-07'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined45:T95ac,{{
  config(
    tags=["product", "mnpi_exception"],
    schema="common_mart_product"
  )
}}

{{ simple_cte([
    ('monthly_saas_metrics','fct_saas_product_usage_metrics_monthly'),
    ('monthly_sm_metrics','fct_ping_instance_metric_wave_monthly'),
    ('billing_accounts','dim_billing_account'),
    ('location_country', 'dim_location_country'),
    ('subscriptions', 'dim_subscription'),
    ('namespaces', 'dim_namespace'),
    ('charges', 'mart_charge'),
    ('dates', 'dim_date'),
    ('aggregated_metrics', 'redis_namespace_snowplow_clicks_aggregated_workspace'),
    ('redis_metrics_28d_user', 'wk_rpt_user_based_metric_counts_namespace_monthly'),
    ('redis_metrics_all_time_event', 'wk_rpt_event_based_metric_counts_namespace_all_time'),
    ('dim_product_detail', 'dim_product_detail')
]) }}


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1

), subscription_with_deployment_type AS (
  
    SELECT DISTINCT
        charges.dim_subscription_id,
        dim_product_detail.product_delivery_type,
        dim_product_detail.product_deployment_type
    FROM charges
    LEFT JOIN dim_product_detail
      ON charges.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    WHERE dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    {{ dbt_utils.group_by(n = 2) }}
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (	
  	
    SELECT	
      *	
    FROM aggregated_metrics 	
    WHERE event_action = 'p_terraform_state_api_unique_users'	
   	
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}             AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                 AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status                         AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                      AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      COALESCE(monthly_sm_metrics.ping_delivery_type, 'Self-Managed')              AS delivery_type, -- Hard codding to self-managed until next MR to update dedicated to saas. Issue -> https://gitlab.com/gitlab-data/analytics/-/issues/16966
      COALESCE(monthly_sm_metrics.ping_deployment_type, subscription_with_deployment_type.product_deployment_type, 'Self-Managed')
                                                                                   AS deployment_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                            AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                     AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                            AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN subscription_with_deployment_type
      ON subscription_with_deployment_type.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      {{ get_keyed_nulls('billing_accounts.dim_billing_account_id') }}              AS dim_billing_account_id,
      {{ get_keyed_nulls('billing_accounts.dim_crm_account_id') }}                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      'GitLab.com'                                                                  AS deployment_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users	
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 	
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      {{ dbt_utils.surrogate_key(
        [
          'snapshot_month',
          'dim_subscription_id',
          'deployment_type',
          'uuid',
          'hostname',
          'dim_namespace_id'
        ]
      ) }} AS primary_key
    FROM unioned
  
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-06-11",
    updated_date="2023-06-22"
) }}46:T98c5,



WITH monthly_saas_metrics AS (

    SELECT * 
    FROM "PROD".common.fct_saas_product_usage_metrics_monthly

), monthly_sm_metrics AS (

    SELECT * 
    FROM "PROD".common.fct_ping_instance_metric_wave_monthly

), billing_accounts AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), location_country AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), subscriptions AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), namespaces AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

), aggregated_metrics AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.redis_namespace_snowplow_clicks_aggregated_workspace

), redis_metrics_28d_user AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_user_based_metric_counts_namespace_monthly

), redis_metrics_all_time_event AS (

    SELECT * 
    FROM "PROD".workspace_customer_success.wk_rpt_event_based_metric_counts_namespace_all_time

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

)


, most_recent_subscription_version AS (
    SELECT
      subscription_name,
      subscription_status,
      subscription_start_date,
      subscription_end_date,
      ROW_NUMBER() OVER(
        PARTITION BY
          subscription_name
        ORDER BY
          subscription_version DESC
      )
    FROM subscriptions
    WHERE subscription_status IN (
      'Active',
      'Cancelled'
    )
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        subscription_name
      ORDER BY
        subscription_version DESC
    ) = 1

), subscription_with_deployment_type AS (
  
    SELECT DISTINCT
        charges.dim_subscription_id,
        dim_product_detail.product_delivery_type,
        dim_product_detail.product_deployment_type
    FROM charges
    LEFT JOIN dim_product_detail
      ON charges.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    WHERE dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')

), zuora_licenses_per_subscription AS (
  
    SELECT
      dates.first_day_of_month AS month,
      subscriptions.dim_subscription_id_original,
      SUM(charges.quantity) AS license_user_count
    FROM charges
    JOIN dates ON charges.effective_start_month <= dates.date_actual
      AND (charges.effective_end_month > dates.date_actual
       OR charges.effective_end_month IS NULL)
      AND dates.day_of_month = 1
    LEFT JOIN subscriptions ON charges.dim_subscription_id = subscriptions.dim_subscription_id
    WHERE charges.subscription_status IN ('Active','Cancelled')
      AND charges.product_tier_name != 'Storage'
    group by 1,2
    
), action_active_users_project_repo_users AS (
  
    SELECT
      *
    FROM aggregated_metrics 
    WHERE event_action = 'action_active_users_project_repo'
  
), p_terraform_state_api_unique_users AS (	
  	
    SELECT	
      *	
    FROM aggregated_metrics 	
    WHERE event_action = 'p_terraform_state_api_unique_users'	
   	
), user_packages AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.user_packages.user_packages_total_unique_counts_monthly'

), project_repo AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_project_repo'

), analytics_valuestream AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.analytics.g_analytics_valuestream_monthly'

), ci_templates AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.ci_templates_total_unique_counts_monthly'

), packages_pushed AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_push_package_by_deploy_token'

), packages_pulled AS (

    SELECT
      *
    FROM redis_metrics_all_time_event
    WHERE metrics_path = 'counts.package_events_i_package_pull_package_by_guest'

), single_file_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ide_edit.g_edit_by_sfe_monthly'

), mrs_created AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_create_mr_monthly'

), pipelines_devops AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.ci_templates.p_ci_templates_implicit_auto_devops_monthly'

), ide_edit AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'usage_activity_by_stage_monthly.create.action_monthly_active_users_ide_edit'

), user_approve_mr AS (

    SELECT
      *
    FROM redis_metrics_28d_user
    WHERE metrics_path = 'redis_hll_counters.code_review.i_code_review_user_approve_mr_monthly'

), sm_paid_user_metrics AS (

    SELECT
      monthly_sm_metrics.snapshot_month,
      monthly_sm_metrics.dim_subscription_id,
      NULL                                                                         AS dim_namespace_id,
      NULL                                                                         AS namespace_name,
      NULL                                                                         AS namespace_creation_date,
      monthly_sm_metrics.dim_instance_id                                           AS uuid,
      monthly_sm_metrics.hostname,
      monthly_sm_metrics.dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

             AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                 AS dim_crm_account_id,
      monthly_sm_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status                         AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_sm_metrics.snapshot_date_id,
      monthly_sm_metrics.ping_created_at,
      monthly_sm_metrics.dim_ping_instance_id                                      AS dim_usage_ping_id,
      monthly_sm_metrics.instance_type,
      monthly_sm_metrics.included_in_health_measures_str,
      monthly_sm_metrics.cleaned_version,
      location_country.country_name,
      location_country.iso_2_country_code,
      location_country.iso_3_country_code,
      COALESCE(monthly_sm_metrics.ping_delivery_type, 'Self-Managed')              AS delivery_type, -- Hard codding to self-managed until next MR to update dedicated to saas. Issue -> https://gitlab.com/gitlab-data/analytics/-/issues/16966
      COALESCE(monthly_sm_metrics.ping_deployment_type, subscription_with_deployment_type.product_deployment_type, 'Self-Managed')
                                                                                   AS deployment_type,
      monthly_sm_metrics.installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_sm_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count, 
          monthly_sm_metrics.license_user_count)
      )                                                                            AS license_utilization,
      monthly_sm_metrics.billable_user_count,
      monthly_sm_metrics.active_user_count,
      monthly_sm_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count, 
        monthly_sm_metrics.license_user_count)                                     AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL, 
        'Zuora',
        'Service Ping')                                                            AS license_user_count_source,
      -- Wave 2 & 3
      monthly_sm_metrics.umau_28_days_user,
      monthly_sm_metrics.action_monthly_active_users_project_repo_28_days_user,
      monthly_sm_metrics.merge_requests_28_days_user,
      monthly_sm_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_sm_metrics.commit_comment_all_time_event,
      monthly_sm_metrics.source_code_pushes_all_time_event,
      monthly_sm_metrics.ci_pipelines_28_days_user,
      monthly_sm_metrics.ci_internal_pipelines_28_days_user,
      monthly_sm_metrics.ci_builds_28_days_user,
      monthly_sm_metrics.ci_builds_all_time_user,
      monthly_sm_metrics.ci_builds_all_time_event,
      monthly_sm_metrics.ci_runners_all_time_event,
      monthly_sm_metrics.auto_devops_enabled_all_time_event,
      monthly_sm_metrics.gitlab_shared_runners_enabled,
      monthly_sm_metrics.container_registry_enabled,
      monthly_sm_metrics.template_repositories_all_time_event,
      monthly_sm_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_sm_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_sm_metrics.user_sast_jobs_28_days_user,
      monthly_sm_metrics.user_dast_jobs_28_days_user,
      monthly_sm_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_sm_metrics.user_license_management_jobs_28_days_user,
      monthly_sm_metrics.user_secret_detection_jobs_28_days_user,
      monthly_sm_metrics.user_container_scanning_jobs_28_days_user,
      monthly_sm_metrics.object_store_packages_enabled,
      monthly_sm_metrics.projects_with_packages_all_time_event,
      monthly_sm_metrics.projects_with_packages_28_days_event,
      monthly_sm_metrics.deployments_28_days_user,
      monthly_sm_metrics.releases_28_days_user,
      monthly_sm_metrics.epics_28_days_user,
      monthly_sm_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_sm_metrics.ci_internal_pipelines_all_time_event,
      monthly_sm_metrics.ci_external_pipelines_all_time_event,
      monthly_sm_metrics.merge_requests_all_time_event,
      monthly_sm_metrics.todos_all_time_event,
      monthly_sm_metrics.epics_all_time_event,
      monthly_sm_metrics.issues_all_time_event,
      monthly_sm_metrics.projects_all_time_event,
      monthly_sm_metrics.deployments_28_days_event,
      monthly_sm_metrics.packages_28_days_event,
      monthly_sm_metrics.sast_jobs_all_time_event,
      monthly_sm_metrics.dast_jobs_all_time_event,
      monthly_sm_metrics.dependency_scanning_jobs_all_time_event,
      monthly_sm_metrics.license_management_jobs_all_time_event,
      monthly_sm_metrics.secret_detection_jobs_all_time_event,
      monthly_sm_metrics.container_scanning_jobs_all_time_event,
      monthly_sm_metrics.projects_jenkins_active_all_time_event,
      monthly_sm_metrics.projects_bamboo_active_all_time_event,
      monthly_sm_metrics.projects_jira_active_all_time_event,
      monthly_sm_metrics.projects_drone_ci_active_all_time_event,
      monthly_sm_metrics.projects_github_active_all_time_event,
      monthly_sm_metrics.projects_jira_server_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_sm_metrics.protected_branches_all_time_event,
      monthly_sm_metrics.remote_mirrors_all_time_event,
      monthly_sm_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_sm_metrics.project_clusters_enabled_28_days_user,
      monthly_sm_metrics.analytics_28_days_user,
      monthly_sm_metrics.issues_edit_28_days_user,
      monthly_sm_metrics.user_packages_28_days_user,
      monthly_sm_metrics.terraform_state_api_28_days_user,
      monthly_sm_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_sm_metrics.auto_devops_enabled,
      monthly_sm_metrics.gitaly_clusters_instance,
      monthly_sm_metrics.epics_deepest_relationship_level_instance,
      monthly_sm_metrics.clusters_applications_cilium_all_time_event,
      monthly_sm_metrics.network_policy_forwards_all_time_event,
      monthly_sm_metrics.network_policy_drops_all_time_event,
      monthly_sm_metrics.requirements_with_test_report_all_time_event,
      monthly_sm_metrics.requirement_test_reports_ci_all_time_event,
      monthly_sm_metrics.projects_imported_from_github_all_time_event,
      monthly_sm_metrics.projects_jira_cloud_active_all_time_event,
      monthly_sm_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_sm_metrics.service_desk_issues_all_time_event,
      monthly_sm_metrics.ci_pipelines_all_time_user,
      monthly_sm_metrics.service_desk_issues_28_days_user,
      monthly_sm_metrics.projects_jira_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_sm_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_sm_metrics.merge_requests_with_required_code_owners_28_days_user,
      monthly_sm_metrics.analytics_value_stream_28_days_event,
      monthly_sm_metrics.code_review_user_approve_mr_28_days_user,
      monthly_sm_metrics.epics_usage_28_days_user,
      monthly_sm_metrics.ci_templates_usage_28_days_event,
      monthly_sm_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_sm_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_sm_metrics.protected_branches_28_days_user,
      monthly_sm_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_sm_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_sm_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_sm_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_sm_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_sm_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_sm_metrics.sast_pipeline_usage_28_days_event,
      monthly_sm_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_sm_metrics.dast_pipeline_usage_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_sm_metrics.environments_all_time_event,
      monthly_sm_metrics.feature_flags_all_time_event,
      monthly_sm_metrics.successful_deployments_28_days_event,
      monthly_sm_metrics.failed_deployments_28_days_event,
      monthly_sm_metrics.projects_compliance_framework_all_time_event,
      monthly_sm_metrics.commit_ci_config_file_28_days_user,
      monthly_sm_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_sm_metrics.dependency_scanning_jobs_all_time_user,
      monthly_sm_metrics.analytics_devops_adoption_all_time_user,
      monthly_sm_metrics.projects_imported_all_time_event,
      monthly_sm_metrics.preferences_security_dashboard_28_days_user,
      monthly_sm_metrics.web_ide_edit_28_days_user,
      monthly_sm_metrics.auto_devops_pipelines_all_time_event,
      monthly_sm_metrics.projects_prometheus_active_all_time_event,
      monthly_sm_metrics.prometheus_enabled,
      monthly_sm_metrics.prometheus_metrics_enabled,
      monthly_sm_metrics.group_saml_enabled,
      monthly_sm_metrics.jira_issue_imports_all_time_event,
      monthly_sm_metrics.author_epic_all_time_user,
      monthly_sm_metrics.author_issue_all_time_user,
      monthly_sm_metrics.failed_deployments_28_days_user,
      monthly_sm_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_sm_metrics.geo_enabled,
      monthly_sm_metrics.auto_devops_pipelines_28_days_user,
      monthly_sm_metrics.active_instance_runners_all_time_event,
      monthly_sm_metrics.active_group_runners_all_time_event,
      monthly_sm_metrics.active_project_runners_all_time_event,
      monthly_sm_metrics.gitaly_version,
      monthly_sm_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_sm_metrics.api_fuzzing_scans_all_time_event,
      monthly_sm_metrics.api_fuzzing_scans_28_days_event,
      monthly_sm_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_sm_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_sm_metrics.secret_detection_scans_all_time_event,
      monthly_sm_metrics.secret_detection_scans_28_days_event,
      monthly_sm_metrics.dependency_scanning_scans_all_time_event,
      monthly_sm_metrics.dependency_scanning_scans_28_days_event,
      monthly_sm_metrics.container_scanning_scans_all_time_event,
      monthly_sm_metrics.container_scanning_scans_28_days_event,
      monthly_sm_metrics.dast_scans_all_time_event,
      monthly_sm_metrics.dast_scans_28_days_event,
      monthly_sm_metrics.sast_scans_all_time_event,
      monthly_sm_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      monthly_sm_metrics.packages_pushed_registry_all_time_event,
      monthly_sm_metrics.packages_pulled_registry_all_time_event,
      monthly_sm_metrics.compliance_dashboard_view_28_days_user,
      monthly_sm_metrics.audit_screen_view_28_days_user,
      monthly_sm_metrics.instance_audit_screen_view_28_days_user,
      monthly_sm_metrics.credential_inventory_view_28_days_user,
      monthly_sm_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_sm_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_sm_metrics.groups_streaming_destinations_all_time_event,
      monthly_sm_metrics.groups_streaming_destinations_28_days_event,
      monthly_sm_metrics.audit_event_destinations_all_time_event,
      monthly_sm_metrics.audit_event_destinations_28_days_event,
      monthly_sm_metrics.projects_status_checks_all_time_event,
      monthly_sm_metrics.external_status_checks_all_time_event,
      monthly_sm_metrics.paid_license_search_28_days_user,
      monthly_sm_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_sm_metrics.snippets_28_days_event,
      monthly_sm_metrics.single_file_editor_28_days_user,
      monthly_sm_metrics.merge_requests_created_28_days_event,
      monthly_sm_metrics.merge_requests_created_28_days_user,
      monthly_sm_metrics.merge_requests_approval_rules_28_days_event,
      monthly_sm_metrics.custom_compliance_frameworks_28_days_event,
      monthly_sm_metrics.projects_security_policy_28_days_event,
      monthly_sm_metrics.merge_requests_security_policy_28_days_user,
      monthly_sm_metrics.pipelines_implicit_auto_devops_28_days_event,
      monthly_sm_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_sm_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_sm_metrics.is_latest_data
    FROM monthly_sm_metrics
    LEFT JOIN billing_accounts
      ON monthly_sm_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN location_country
      ON monthly_sm_metrics.dim_location_country_id = location_country.dim_location_country_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN subscription_with_deployment_type
      ON subscription_with_deployment_type.dim_subscription_id = monthly_sm_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_sm_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_sm_metrics.snapshot_month

), saas_paid_user_metrics AS (

    SELECT
      monthly_saas_metrics.snapshot_month,
      monthly_saas_metrics.dim_subscription_id,
      monthly_saas_metrics.dim_namespace_id::VARCHAR                                AS dim_namespace_id,
      namespaces.namespace_name,
      namespaces.created_at                                                         AS namespace_creation_date,
      NULL                                                                          AS uuid,
      NULL                                                                          AS hostname,
      NULL                                                                          AS dim_installation_id,
      

  COALESCE(billing_accounts.dim_billing_account_id, MD5(-1)) 

              AS dim_billing_account_id,
      

  COALESCE(billing_accounts.dim_crm_account_id, MD5(-1)) 

                      AS dim_crm_account_id,
      monthly_saas_metrics.dim_subscription_id_original,
      subscriptions.subscription_name,
      subscriptions.subscription_status,
      most_recent_subscription_version.subscription_status AS subscription_status_most_recent_version,
      subscriptions.term_start_date,
      subscriptions.term_end_date,
      most_recent_subscription_version.subscription_start_date,
      most_recent_subscription_version.subscription_end_date,
      monthly_saas_metrics.snapshot_date_id,
      monthly_saas_metrics.ping_created_at,
      NULL                                                                          AS dim_usage_ping_id,
      monthly_saas_metrics.instance_type                                            AS instance_type,
      monthly_saas_metrics.included_in_health_measures_str                          AS included_in_health_measures_str,
      NULL                                                                          AS cleaned_version,
      NULL                                                                          AS country_name,
      NULL                                                                          AS iso_2_country_code,
      NULL                                                                          AS iso_3_country_code,
      'SaaS'                                                                        AS delivery_type,
      'GitLab.com'                                                                  AS deployment_type,
      NULL                                                                          AS installation_creation_date,
      -- Wave 1
      DIV0(
        monthly_saas_metrics.billable_user_count, 
        COALESCE(
          zuora_licenses_per_subscription.license_user_count,
          monthly_saas_metrics.subscription_seats)
      )                                                                             AS license_utilization,
      monthly_saas_metrics.billable_user_count,
      NULL                                                                          AS active_user_count,
      monthly_saas_metrics.max_historical_user_count,
      COALESCE(
        zuora_licenses_per_subscription.license_user_count,
        monthly_saas_metrics.subscription_seats)                                    AS license_user_count,
      IFF(
        zuora_licenses_per_subscription.license_user_count IS NOT NULL,
        'Zuora',
        'gitlabdotcom')                                                             AS license_user_count_source,
      -- Wave 2 & 3
      monthly_saas_metrics.umau_28_days_user,
      COALESCE(project_repo.distinct_users_whole_month, action_active_users_project_repo_users.distinct_users, 0)            AS action_monthly_active_users_project_repo_28_days_user,
      monthly_saas_metrics.merge_requests_28_days_user,
      monthly_saas_metrics.projects_with_repositories_enabled_28_days_user,
      monthly_saas_metrics.commit_comment_all_time_event,
      monthly_saas_metrics.source_code_pushes_all_time_event,
      monthly_saas_metrics.ci_pipelines_28_days_user,
      monthly_saas_metrics.ci_internal_pipelines_28_days_user,
      monthly_saas_metrics.ci_builds_28_days_user,
      monthly_saas_metrics.ci_builds_all_time_user,
      monthly_saas_metrics.ci_builds_all_time_event,
      monthly_saas_metrics.ci_runners_all_time_event,
      monthly_saas_metrics.auto_devops_enabled_all_time_event,
      monthly_saas_metrics.gitlab_shared_runners_enabled,
      monthly_saas_metrics.container_registry_enabled,
      monthly_saas_metrics.template_repositories_all_time_event,
      monthly_saas_metrics.ci_pipeline_config_repository_28_days_user,
      monthly_saas_metrics.user_unique_users_all_secure_scanners_28_days_user,
      monthly_saas_metrics.user_sast_jobs_28_days_user,
      monthly_saas_metrics.user_dast_jobs_28_days_user,
      monthly_saas_metrics.user_dependency_scanning_jobs_28_days_user,
      monthly_saas_metrics.user_license_management_jobs_28_days_user,
      monthly_saas_metrics.user_secret_detection_jobs_28_days_user,
      monthly_saas_metrics.user_container_scanning_jobs_28_days_user,
      monthly_saas_metrics.object_store_packages_enabled,
      monthly_saas_metrics.projects_with_packages_all_time_event,
      monthly_saas_metrics.projects_with_packages_28_days_event,
      monthly_saas_metrics.deployments_28_days_user,
      monthly_saas_metrics.releases_28_days_user,
      monthly_saas_metrics.epics_28_days_user,
      monthly_saas_metrics.issues_28_days_user,
      -- Wave 3.1
      monthly_saas_metrics.ci_internal_pipelines_all_time_event,
      monthly_saas_metrics.ci_external_pipelines_all_time_event,
      monthly_saas_metrics.merge_requests_all_time_event,
      monthly_saas_metrics.todos_all_time_event,
      monthly_saas_metrics.epics_all_time_event,
      monthly_saas_metrics.issues_all_time_event,
      monthly_saas_metrics.projects_all_time_event,
      monthly_saas_metrics.deployments_28_days_event,
      monthly_saas_metrics.packages_28_days_event,
      monthly_saas_metrics.sast_jobs_all_time_event,
      monthly_saas_metrics.dast_jobs_all_time_event,
      monthly_saas_metrics.dependency_scanning_jobs_all_time_event,
      monthly_saas_metrics.license_management_jobs_all_time_event,
      monthly_saas_metrics.secret_detection_jobs_all_time_event,
      monthly_saas_metrics.container_scanning_jobs_all_time_event,
      monthly_saas_metrics.projects_jenkins_active_all_time_event,
      monthly_saas_metrics.projects_bamboo_active_all_time_event,
      monthly_saas_metrics.projects_jira_active_all_time_event,
      monthly_saas_metrics.projects_drone_ci_active_all_time_event,
      monthly_saas_metrics.projects_github_active_all_time_event,
      monthly_saas_metrics.projects_jira_server_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_all_time_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_event,
      monthly_saas_metrics.protected_branches_all_time_event,
      monthly_saas_metrics.remote_mirrors_all_time_event,
      monthly_saas_metrics.projects_enforcing_code_owner_approval_28_days_user,
      monthly_saas_metrics.project_clusters_enabled_28_days_user,
      monthly_saas_metrics.analytics_28_days_user,
      monthly_saas_metrics.issues_edit_28_days_user,
      COALESCE(user_packages.distinct_users_whole_month, 0) AS user_packages_28_days_user,
      COALESCE(p_terraform_state_api_unique_users.distinct_users, 0) AS terraform_state_api_28_days_user,
      monthly_saas_metrics.incident_management_28_days_user,
      -- Wave 3.2
      monthly_saas_metrics.auto_devops_enabled,
      monthly_saas_metrics.gitaly_clusters_instance,
      monthly_saas_metrics.epics_deepest_relationship_level_instance,
      monthly_saas_metrics.clusters_applications_cilium_all_time_event,
      monthly_saas_metrics.network_policy_forwards_all_time_event,
      monthly_saas_metrics.network_policy_drops_all_time_event,
      monthly_saas_metrics.requirements_with_test_report_all_time_event,
      monthly_saas_metrics.requirement_test_reports_ci_all_time_event,
      monthly_saas_metrics.projects_imported_from_github_all_time_event,
      monthly_saas_metrics.projects_jira_cloud_active_all_time_event,
      monthly_saas_metrics.projects_jira_dvcs_server_active_all_time_event,
      monthly_saas_metrics.service_desk_issues_all_time_event,
      monthly_saas_metrics.ci_pipelines_all_time_user,
      monthly_saas_metrics.service_desk_issues_28_days_user,
      monthly_saas_metrics.projects_jira_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_cloud_active_28_days_user,
      monthly_saas_metrics.projects_jira_dvcs_server_active_28_days_user,
      monthly_saas_metrics.merge_requests_with_required_code_owners_28_days_user,
      COALESCE(analytics_valuestream.distinct_users_whole_month, 0) AS analytics_value_stream_28_days_event,
      COALESCE(user_approve_mr.distinct_users_whole_month, 0) AS code_review_user_approve_mr_28_days_user,
      monthly_saas_metrics.epics_usage_28_days_user,
      COALESCE(ci_templates.distinct_users_whole_month, 0) AS ci_templates_usage_28_days_event,
      monthly_saas_metrics.project_management_issue_milestone_changed_28_days_user,
      monthly_saas_metrics.project_management_issue_iteration_changed_28_days_user,
      -- Wave 5.1
      monthly_saas_metrics.protected_branches_28_days_user,
      monthly_saas_metrics.ci_cd_lead_time_usage_28_days_event,
      monthly_saas_metrics.ci_cd_deployment_frequency_usage_28_days_event,
      monthly_saas_metrics.projects_with_repositories_enabled_all_time_user,
      monthly_saas_metrics.api_fuzzing_jobs_usage_28_days_user,
      monthly_saas_metrics.coverage_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.api_fuzzing_pipeline_usage_28_days_event,
      monthly_saas_metrics.container_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.dependency_scanning_pipeline_usage_28_days_event,
      monthly_saas_metrics.sast_pipeline_usage_28_days_event,
      monthly_saas_metrics.secret_detection_pipeline_usage_28_days_event,
      monthly_saas_metrics.dast_pipeline_usage_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_jobs_28_days_user,
      monthly_saas_metrics.environments_all_time_event,
      monthly_saas_metrics.feature_flags_all_time_event,
      monthly_saas_metrics.successful_deployments_28_days_event,
      monthly_saas_metrics.failed_deployments_28_days_event,
      monthly_saas_metrics.projects_compliance_framework_all_time_event,
      monthly_saas_metrics.commit_ci_config_file_28_days_user,
      monthly_saas_metrics.view_audit_all_time_user,
      -- Wave 5.2
      monthly_saas_metrics.dependency_scanning_jobs_all_time_user,
      monthly_saas_metrics.analytics_devops_adoption_all_time_user,
      monthly_saas_metrics.projects_imported_all_time_event,
      monthly_saas_metrics.preferences_security_dashboard_28_days_user,
      COALESCE(ide_edit.distinct_users_whole_month, 0) AS web_ide_edit_28_days_user,
      monthly_saas_metrics.auto_devops_pipelines_all_time_event,
      monthly_saas_metrics.projects_prometheus_active_all_time_event,
      monthly_saas_metrics.prometheus_enabled,
      monthly_saas_metrics.prometheus_metrics_enabled,
      monthly_saas_metrics.group_saml_enabled,
      monthly_saas_metrics.jira_issue_imports_all_time_event,
      monthly_saas_metrics.author_epic_all_time_user,
      monthly_saas_metrics.author_issue_all_time_user,
      monthly_saas_metrics.failed_deployments_28_days_user,
      monthly_saas_metrics.successful_deployments_28_days_user,
      -- Wave 5.3
      monthly_saas_metrics.geo_enabled,
      monthly_saas_metrics.auto_devops_pipelines_28_days_user,
      monthly_saas_metrics.active_instance_runners_all_time_event,
      monthly_saas_metrics.active_group_runners_all_time_event,
      monthly_saas_metrics.active_project_runners_all_time_event,
      monthly_saas_metrics.gitaly_version,
      monthly_saas_metrics.gitaly_servers_all_time_event,
      -- Wave 6.0
      monthly_saas_metrics.api_fuzzing_scans_all_time_event,
      monthly_saas_metrics.api_fuzzing_scans_28_days_event,
      monthly_saas_metrics.coverage_fuzzing_scans_all_time_event,
      monthly_saas_metrics.coverage_fuzzing_scans_28_days_event,
      monthly_saas_metrics.secret_detection_scans_all_time_event,
      monthly_saas_metrics.secret_detection_scans_28_days_event,
      monthly_saas_metrics.dependency_scanning_scans_all_time_event,
      monthly_saas_metrics.dependency_scanning_scans_28_days_event,
      monthly_saas_metrics.container_scanning_scans_all_time_event,
      monthly_saas_metrics.container_scanning_scans_28_days_event,
      monthly_saas_metrics.dast_scans_all_time_event,
      monthly_saas_metrics.dast_scans_28_days_event,
      monthly_saas_metrics.sast_scans_all_time_event,
      monthly_saas_metrics.sast_scans_28_days_event,
      -- Wave 6.1
      COALESCE(packages_pushed.monthly_value, 0) AS packages_pushed_registry_all_time_event,
      COALESCE(packages_pulled.monthly_value, 0) AS packages_pulled_registry_all_time_event,
      monthly_saas_metrics.compliance_dashboard_view_28_days_user,
      monthly_saas_metrics.audit_screen_view_28_days_user,
      monthly_saas_metrics.instance_audit_screen_view_28_days_user,
      monthly_saas_metrics.credential_inventory_view_28_days_user,
      monthly_saas_metrics.compliance_frameworks_pipeline_all_time_event,
      monthly_saas_metrics.compliance_frameworks_pipeline_28_days_event,
      monthly_saas_metrics.groups_streaming_destinations_all_time_event,
      monthly_saas_metrics.groups_streaming_destinations_28_days_event,
      monthly_saas_metrics.audit_event_destinations_all_time_event,
      monthly_saas_metrics.audit_event_destinations_28_days_event,
      monthly_saas_metrics.projects_status_checks_all_time_event,
      monthly_saas_metrics.external_status_checks_all_time_event,
      monthly_saas_metrics.paid_license_search_28_days_user,
      monthly_saas_metrics.last_activity_28_days_user,
      -- Wave 7
      monthly_saas_metrics.snippets_28_days_event,
      COALESCE(single_file_edit.distinct_users_whole_month, 0) AS single_file_editor_28_days_user,
      monthly_saas_metrics.merge_requests_created_28_days_event,
      COALESCE(mrs_created.distinct_users_whole_month, 0) AS merge_requests_created_28_days_user,
      monthly_saas_metrics.merge_requests_approval_rules_28_days_event,
      monthly_saas_metrics.custom_compliance_frameworks_28_days_event,
      monthly_saas_metrics.projects_security_policy_28_days_event,
      monthly_saas_metrics.merge_requests_security_policy_28_days_user,
      COALESCE(pipelines_devops.distinct_users_whole_month, 0) AS pipelines_implicit_auto_devops_28_days_event,
      monthly_saas_metrics.pipeline_schedules_28_days_user,
      -- Wave 8
      monthly_saas_metrics.ci_internal_pipelines_28_days_event,
      -- Data Quality Flag
      monthly_saas_metrics.is_latest_data
    FROM monthly_saas_metrics
    LEFT JOIN billing_accounts
      ON monthly_saas_metrics.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN subscriptions
      ON subscriptions.dim_subscription_id = monthly_saas_metrics.dim_subscription_id
    LEFT JOIN most_recent_subscription_version
      ON subscriptions.subscription_name = most_recent_subscription_version.subscription_name
    LEFT JOIN zuora_licenses_per_subscription 
      ON zuora_licenses_per_subscription.dim_subscription_id_original = monthly_saas_metrics.dim_subscription_id_original
      AND zuora_licenses_per_subscription.month = monthly_saas_metrics.snapshot_month
    LEFT JOIN namespaces 
      ON namespaces.dim_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN action_active_users_project_repo_users
      ON action_active_users_project_repo_users.date_month = monthly_saas_metrics.snapshot_month 
      AND action_active_users_project_repo_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN p_terraform_state_api_unique_users	
      ON p_terraform_state_api_unique_users.date_month = monthly_saas_metrics.snapshot_month 	
      AND p_terraform_state_api_unique_users.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_packages
      ON user_packages.date_month = monthly_saas_metrics.snapshot_month
      AND user_packages.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN project_repo
      ON project_repo.date_month = monthly_saas_metrics.snapshot_month
      AND project_repo.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN analytics_valuestream
      ON analytics_valuestream.date_month = monthly_saas_metrics.snapshot_month
      AND analytics_valuestream.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ci_templates
      ON ci_templates.date_month = monthly_saas_metrics.snapshot_month
      AND ci_templates.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pushed
      ON packages_pushed.month = monthly_saas_metrics.snapshot_month
      AND packages_pushed.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN packages_pulled
      ON packages_pulled.month = monthly_saas_metrics.snapshot_month
      AND packages_pulled.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN single_file_edit
      ON single_file_edit.date_month = monthly_saas_metrics.snapshot_month
      AND single_file_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN mrs_created
      ON mrs_created.date_month = monthly_saas_metrics.snapshot_month
      AND mrs_created.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN pipelines_devops
      ON pipelines_devops.date_month = monthly_saas_metrics.snapshot_month
      AND pipelines_devops.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN ide_edit
      ON ide_edit.date_month = monthly_saas_metrics.snapshot_month
      AND ide_edit.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id
    LEFT JOIN user_approve_mr
      ON user_approve_mr.date_month = monthly_saas_metrics.snapshot_month
      AND user_approve_mr.ultimate_parent_namespace_id = monthly_saas_metrics.dim_namespace_id

), unioned AS (

    SELECT *
    FROM sm_paid_user_metrics

    UNION ALL

    SELECT *
    FROM saas_paid_user_metrics

), final AS (
  
    SELECT
      unioned.*,
      md5(cast(coalesce(cast(snapshot_month as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(deployment_type as 
    varchar
), '') || '-' || coalesce(cast(uuid as 
    varchar
), '') || '-' || coalesce(cast(hostname as 
    varchar
), '') || '-' || coalesce(cast(dim_namespace_id as 
    varchar
), '') as 
    varchar
)) AS primary_key
    FROM unioned
  
)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-06-11'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final47:T797,WITH zuora_base_mrr AS (

    SELECT *
    FROM {{ ref('zuora_base_mrr') }}
    WHERE delivery = 'SaaS'

)

, customers_db_charges AS (

    SELECT *
    FROM {{ ref('customers_db_charges_xf') }}

)

, namespaces AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespaces') }}

)

, dim_billing_account AS (

    SELECT *
    FROM {{ ref('dim_billing_account') }}

)

, dim_crm_account AS (

    SELECT *
    FROM {{ ref('dim_crm_account') }}

)

, dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}

)


, joined AS (

    SELECT
      zuora_base_mrr.rate_plan_charge_id,
      zuora_base_mrr.subscription_name_slugify,
      dim_billing_account.dim_billing_account_id                                        AS dim_billing_account_id,
      COALESCE(merged_accounts.dim_crm_account_id, dim_crm_account.dim_crm_account_id)  AS dim_crm_account_id,
      COALESCE(merged_accounts.dim_parent_crm_account_id,
                dim_crm_account.dim_parent_crm_account_id)                              AS dim_parent_crm_account_id,
      COALESCE(merged_accounts.parent_crm_account_name,
                dim_crm_account.parent_crm_account_name)                                AS parent_crm_account_name,
      customers_db_charges.current_customer_id,
      namespaces.namespace_id
    FROM zuora_base_mrr
    LEFT JOIN customers_db_charges
      ON zuora_base_mrr.rate_plan_charge_id = customers_db_charges.rate_plan_charge_id
    LEFT JOIN namespaces
      ON customers_db_charges.current_gitlab_namespace_id = namespaces.namespace_id
    LEFT JOIN dim_billing_account
      ON zuora_base_mrr.account_number = dim_billing_account.billing_account_number
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_account AS merged_accounts
      ON dim_crm_account.merged_to_account_id = merged_accounts.dim_crm_account_id

)

SELECT *
FROM joined48:T7d0,WITH zuora_base_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_base_mrr
    WHERE delivery = 'SaaS'

)

, customers_db_charges AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

)

, namespaces AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_namespaces

)

, dim_billing_account AS (

    SELECT *
    FROM "PROD".common.dim_billing_account

)

, dim_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

)

, dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription

)


, joined AS (

    SELECT
      zuora_base_mrr.rate_plan_charge_id,
      zuora_base_mrr.subscription_name_slugify,
      dim_billing_account.dim_billing_account_id                                        AS dim_billing_account_id,
      COALESCE(merged_accounts.dim_crm_account_id, dim_crm_account.dim_crm_account_id)  AS dim_crm_account_id,
      COALESCE(merged_accounts.dim_parent_crm_account_id,
                dim_crm_account.dim_parent_crm_account_id)                              AS dim_parent_crm_account_id,
      COALESCE(merged_accounts.parent_crm_account_name,
                dim_crm_account.parent_crm_account_name)                                AS parent_crm_account_name,
      customers_db_charges.current_customer_id,
      namespaces.namespace_id
    FROM zuora_base_mrr
    LEFT JOIN customers_db_charges
      ON zuora_base_mrr.rate_plan_charge_id = customers_db_charges.rate_plan_charge_id
    LEFT JOIN namespaces
      ON customers_db_charges.current_gitlab_namespace_id = namespaces.namespace_id
    LEFT JOIN dim_billing_account
      ON zuora_base_mrr.account_number = dim_billing_account.billing_account_number
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_account AS merged_accounts
      ON dim_crm_account.merged_to_account_id = merged_accounts.dim_crm_account_id

)

SELECT *
FROM joined49:Tc51, **Description:** Enriched instance Service Ping data by ping and metric for all-time metrics. This is an enhanced version of `fct_ping_instance_metric_all_time` and is defined using the [`macro_mart_ping_instance_metric`](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.macro_mart_ping_instance_metric) macro. 
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Include all-time metrics (`time_frame = 'all'`)

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - Metrics that timed out (return -1) are set to a value of 0
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 4a:T54ce,





WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT
    * FROM "PROD".common.fct_ping_instance_metric_all_time
    WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license_id                                                              AS license_id,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.company                                                         AS license_company_name,
      dim_license.license_expire_date                                             AS license_expire_date,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      MAX(mrr)                                                                    AS max_monthly_mrr,
      MAX(IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT product_rate_plan_name)
        WITHIN GROUP (ORDER BY product_rate_plan_name ASC)                        AS product_rate_plan_name_array,
      SUM(quantity)                                                               AS quantity,
      SUM(mrr * 12)                                                               AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON effective_start_month <= dim_date.date_day AND effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22



  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription_md5 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
   WHERE license_md5 IS NOT NULL

  ), license_subscriptions_w_latest_subscription_sha256 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
    WHERE license_sha256 IS NOT NULL

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_id                        , license_subscriptions_w_latest_subscription_sha256.license_id                        ) AS license_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_company_name              , license_subscriptions_w_latest_subscription_sha256.license_company_name              ) AS license_company_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.latest_subscription_id            , license_subscriptions_w_latest_subscription_sha256.latest_subscription_id            ) AS latest_subscription_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.original_subscription_name_slugify, license_subscriptions_w_latest_subscription_sha256.original_subscription_name_slugify) AS original_subscription_name_slugify,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_category_array            , license_subscriptions_w_latest_subscription_sha256.product_category_array            ) AS product_category_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_rate_plan_name_array      , license_subscriptions_w_latest_subscription_sha256.product_rate_plan_name_array      ) AS product_rate_plan_name_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_start_month          , license_subscriptions_w_latest_subscription_sha256.subscription_start_month          ) AS subscription_start_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_end_month            , license_subscriptions_w_latest_subscription_sha256.subscription_end_month            ) AS subscription_end_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_billing_account_id            , license_subscriptions_w_latest_subscription_sha256.dim_billing_account_id            ) AS dim_billing_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.crm_account_name                  , license_subscriptions_w_latest_subscription_sha256.crm_account_name                  ) AS crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_parent_crm_account_id         , license_subscriptions_w_latest_subscription_sha256.dim_parent_crm_account_id         ) AS dim_parent_crm_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_name           , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_name           ) AS parent_crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_upa_country    , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_upa_country    ) AS parent_crm_account_upa_country,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_sales_segment  , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_sales_segment  ) AS parent_crm_account_sales_segment,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_industry       , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_industry       ) AS parent_crm_account_industry,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_territory      , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_territory      ) AS parent_crm_account_territory,
        COALESCE(license_subscriptions_w_latest_subscription_md5.technical_account_manager         , license_subscriptions_w_latest_subscription_sha256.technical_account_manager         ) AS technical_account_manager,
        CASE
          WHEN license_subscriptions_w_latest_subscription_sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_sha256.max_monthly_mrr > 0 THEN TRUE
          WHEN license_subscriptions_w_latest_subscription_md5.max_monthly_mrr > 0 THEN TRUE
          ELSE FALSE
        END                                                                                                                             AS is_paid_subscription,
        COALESCE(license_subscriptions_w_latest_subscription_md5.is_program_subscription,license_subscriptions_w_latest_subscription_sha256.is_program_subscription, FALSE)       AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        dim_date.first_day_of_week                                                                                                      AS ping_created_date_week,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        dim_ping_instance.is_last_ping_of_week                                                                                          AS is_last_ping_of_week,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription_md5
        ON dim_ping_instance.license_md5 = license_subscriptions_w_latest_subscription_md5.license_md5
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription_sha256
        ON dim_ping_instance.license_sha256 = license_subscriptions_w_latest_subscription_sha256.license_sha256
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month,
      ping_created_date_week,
      is_last_ping_of_week

    FROM joined
      WHERE time_frame != 'none'
        AND TRY_TO_DECIMAL(metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted

4b:T30c3,/* This table needs to be permanent to allow zero cloning at specific timestamps */
{{ config({
        "materialized": "table",
        "transient": false,
        "alias": "mart_arr"
    })
}}

WITH dim_billing_account AS (

  SELECT *
  FROM {{ ref('dim_billing_account') }}

), dim_crm_account AS (

  SELECT *
  FROM {{ ref('dim_crm_account') }}

), dim_date AS (

  SELECT *
  FROM {{ ref('dim_date') }}

), dim_product_detail AS (

  SELECT *
  FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

  SELECT *
  FROM {{ ref('dim_subscription') }}

), fct_mrr AS (

  SELECT
    dim_date_id,
    dim_subscription_id,
    dim_product_detail_id,
    dim_billing_account_id,
    dim_crm_account_id,
    SUM(mrr)                                                                      AS mrr,
    SUM(arr)                                                                      AS arr,
    SUM(quantity)                                                                 AS quantity,
    ARRAY_AGG(DISTINCT unit_of_measure) WITHIN GROUP (ORDER BY unit_of_measure)   AS unit_of_measure
  FROM {{ ref('fct_mrr') }}
  WHERE subscription_status IN ('Active', 'Cancelled')
  {{ dbt_utils.group_by(n=5) }}

), joined AS (

    SELECT
      --primary_key
      {{ dbt_utils.surrogate_key(['fct_mrr.dim_date_id', 'dim_subscription.subscription_name', 'fct_mrr.dim_product_detail_id']) }}
                                                                                      AS primary_key,

      --date info
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.crm_account_employee_count_band                                 AS crm_account_employee_count_band,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,
      dim_crm_account.parent_crm_account_lam                                          AS parent_crm_account_lam,
      dim_crm_account.parent_crm_account_lam_dev_count                                AS parent_crm_account_lam_dev_count,
      dim_crm_account.parent_crm_account_business_unit                                AS parent_crm_account_business_unit,
      dim_crm_account.parent_crm_account_geo                                          AS parent_crm_account_geo,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_role_type                                    AS parent_crm_account_role_type,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_max_family_employee                          AS parent_crm_account_max_family_employee,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_upa_state                                    AS parent_crm_account_upa_state,
      dim_crm_account.parent_crm_account_upa_city                                     AS parent_crm_account_upa_city,
      dim_crm_account.parent_crm_account_upa_street                                   AS parent_crm_account_upa_street,
      dim_crm_account.parent_crm_account_upa_postal_code                              AS parent_crm_account_upa_postal_code,
      dim_crm_account.crm_account_employee_count                                      AS crm_account_employee_count,

      --subscription info
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.dim_subscription_id_original                                   AS dim_subscription_id_original,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name                                              AS subscription_name,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --product info
      dim_product_detail.dim_product_detail_id                                        AS dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      -- MRR values
      --  not needed as all charges in fct_mrr are recurring
      --  fct_mrr.charge_type,
      fct_mrr.unit_of_measure                                                         AS unit_of_measure,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.arr                                                                     AS arr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), cohort_diffs AS (

  SELECT
    joined.*,
    datediff(month, billing_account_cohort_month, arr_month)     AS months_since_billing_account_cohort_start,
    datediff(quarter, billing_account_cohort_quarter, arr_month) AS quarters_since_billing_account_cohort_start,
    datediff(month, crm_account_cohort_month, arr_month)         AS months_since_crm_account_cohort_start,
    datediff(quarter, crm_account_cohort_quarter, arr_month)     AS quarters_since_crm_account_cohort_start,
    datediff(month, parent_account_cohort_month, arr_month)      AS months_since_parent_account_cohort_start,
    datediff(quarter, parent_account_cohort_quarter, arr_month)  AS quarters_since_parent_account_cohort_start,
    datediff(month, subscription_cohort_month, arr_month)        AS months_since_subscription_cohort_start,
    datediff(quarter, subscription_cohort_quarter, arr_month)    AS quarters_since_subscription_cohort_start
  FROM joined

), parent_arr AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      SUM(arr)                                   AS arr
    FROM joined
    {{ dbt_utils.group_by(n=2) }}

), parent_arr_band_calc AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
        WHEN arr > 5000 THEN 'ARR > $5K'
        WHEN arr <= 5000 THEN 'ARR <= $5K'
      END                                        AS arr_band_calc
    FROM parent_arr

), final_table AS (

    SELECT
      cohort_diffs.*,
      arr_band_calc
    FROM cohort_diffs
    LEFT JOIN parent_arr_band_calc
      ON cohort_diffs.arr_month = parent_arr_band_calc.arr_month
      AND cohort_diffs.dim_parent_crm_account_id = parent_arr_band_calc.dim_parent_crm_account_id

)

{{ dbt_audit(
    cte_ref="final_table",
    created_by="@msendal",
    updated_by="@lisvinueza",
    created_date="2020-09-04",
    updated_date="2023-05-21"
) }}4c:T4e2,Data mart to explore ARR. This model is built using the same logic as the Zuora UI out of the box MRR Trend Report. The report looks at the charges associated with subscriptions, along with their effective dates and subscription statuses, and calculates ARR.

The below query will pull ARR by month. You can add additional dimensions to the query to build out your analysis.

SELECT
  arr_month,
  SUM(arr)  AS arr
FROM "PROD"."LEGACY"."MART_ARR"
WHERE arr_month < DATE_TRUNC('month',CURRENT_DATE)
GROUP BY 1
ORDER BY 1 DESC

Charges_month_by_month CTE:

This CTE amortizes the ARR by month over the effective term of the rate plan charges. There are 4 subscription statuses in Zuora: active, cancelled, draft and expired. The Zuora UI reporting modules use a filter of WHERE subscription_status NOT IN ('Draft','Expired') which is also applied in this query. Please see the column definitions for additional details.

Here is an image documenting the ERD for this table:

<div style="width: 640px; height: 480px; margin: 10px; position: relative;"><iframe allowfullscreen frameborder="0" style="width:640px; height:480px" src="https://app.lucidchart.com/documents/embeddedchart/998dbbae-f04e-4310-9d85-0c360a40a018" id="T0XuoGn786sQ"></iframe></div>4d:T31c6,/* This table needs to be permanent to allow zero cloning at specific timestamps */


WITH dim_billing_account AS (

  SELECT *
  FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

  SELECT *
  FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

  SELECT *
  FROM "PROD".common.dim_date

), dim_product_detail AS (

  SELECT *
  FROM "PROD".common.dim_product_detail

), dim_subscription AS (

  SELECT *
  FROM "PROD".common.dim_subscription

), fct_mrr AS (

  SELECT
    dim_date_id,
    dim_subscription_id,
    dim_product_detail_id,
    dim_billing_account_id,
    dim_crm_account_id,
    SUM(mrr)                                                                      AS mrr,
    SUM(arr)                                                                      AS arr,
    SUM(quantity)                                                                 AS quantity,
    ARRAY_AGG(DISTINCT unit_of_measure) WITHIN GROUP (ORDER BY unit_of_measure)   AS unit_of_measure
  FROM "PROD".restricted_safe_common.fct_mrr
  WHERE subscription_status IN ('Active', 'Cancelled')
  group by 1,2,3,4,5

), joined AS (

    SELECT
      --primary_key
      md5(cast(coalesce(cast(fct_mrr.dim_date_id as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription.subscription_name as 
    varchar
), '') || '-' || coalesce(cast(fct_mrr.dim_product_detail_id as 
    varchar
), '') as 
    varchar
))
                                                                                      AS primary_key,

      --date info
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.crm_account_employee_count_band                                 AS crm_account_employee_count_band,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,
      dim_crm_account.parent_crm_account_lam                                          AS parent_crm_account_lam,
      dim_crm_account.parent_crm_account_lam_dev_count                                AS parent_crm_account_lam_dev_count,
      dim_crm_account.parent_crm_account_business_unit                                AS parent_crm_account_business_unit,
      dim_crm_account.parent_crm_account_geo                                          AS parent_crm_account_geo,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_role_type                                    AS parent_crm_account_role_type,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_max_family_employee                          AS parent_crm_account_max_family_employee,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_upa_state                                    AS parent_crm_account_upa_state,
      dim_crm_account.parent_crm_account_upa_city                                     AS parent_crm_account_upa_city,
      dim_crm_account.parent_crm_account_upa_street                                   AS parent_crm_account_upa_street,
      dim_crm_account.parent_crm_account_upa_postal_code                              AS parent_crm_account_upa_postal_code,
      dim_crm_account.crm_account_employee_count                                      AS crm_account_employee_count,

      --subscription info
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.dim_subscription_id_original                                   AS dim_subscription_id_original,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name                                              AS subscription_name,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_date.date_actual) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_date.first_day_of_fiscal_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --product info
      dim_product_detail.dim_product_detail_id                                        AS dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      -- MRR values
      --  not needed as all charges in fct_mrr are recurring
      --  fct_mrr.charge_type,
      fct_mrr.unit_of_measure                                                         AS unit_of_measure,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.arr                                                                     AS arr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), cohort_diffs AS (

  SELECT
    joined.*,
    datediff(month, billing_account_cohort_month, arr_month)     AS months_since_billing_account_cohort_start,
    datediff(quarter, billing_account_cohort_quarter, arr_month) AS quarters_since_billing_account_cohort_start,
    datediff(month, crm_account_cohort_month, arr_month)         AS months_since_crm_account_cohort_start,
    datediff(quarter, crm_account_cohort_quarter, arr_month)     AS quarters_since_crm_account_cohort_start,
    datediff(month, parent_account_cohort_month, arr_month)      AS months_since_parent_account_cohort_start,
    datediff(quarter, parent_account_cohort_quarter, arr_month)  AS quarters_since_parent_account_cohort_start,
    datediff(month, subscription_cohort_month, arr_month)        AS months_since_subscription_cohort_start,
    datediff(quarter, subscription_cohort_quarter, arr_month)    AS quarters_since_subscription_cohort_start
  FROM joined

), parent_arr AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      SUM(arr)                                   AS arr
    FROM joined
    group by 1,2

), parent_arr_band_calc AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
        WHEN arr > 5000 THEN 'ARR > $5K'
        WHEN arr <= 5000 THEN 'ARR <= $5K'
      END                                        AS arr_band_calc
    FROM parent_arr

), final_table AS (

    SELECT
      cohort_diffs.*,
      arr_band_calc
    FROM cohort_diffs
    LEFT JOIN parent_arr_band_calc
      ON cohort_diffs.arr_month = parent_arr_band_calc.arr_month
      AND cohort_diffs.dim_parent_crm_account_id = parent_arr_band_calc.dim_parent_crm_account_id

)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2020-09-04'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final_table4e:Tf40e,{{ config(alias='report_metrics_summary_account_year') }}

-- TODO: 20221208 TAM fields need to refactored as they are not called TAM anymore

WITH date_details AS (

    SELECT *
    --FROM  prod.workspace_sales.date_details
    FROM {{ ref('wk_sales_date_details') }}

 ), sfdc_opportunity_xf AS (

    SELECT *
    --FROM prod.restricted_safe_workspace_sales.sfdc_opportunity_xf
    FROM {{ref('wk_sales_sfdc_opportunity_xf')}}
    WHERE is_deleted = 0
      AND is_edu_oss = 0
      AND is_jihu_account = 0

 ), sfdc_opportunity_snapshot_xf AS (

    SELECT h.*
    --FROM prod.restricted_safe_workspace_sales.sfdc_opportunity_snapshot_history_xf AS h
    FROM {{ref('wk_sales_sfdc_opportunity_snapshot_history_xf')}} h
    INNER JOIN date_details snapshot_date
      ON snapshot_date.date_actual = h.snapshot_date
    WHERE h.is_deleted = 0
      AND h.is_edu_oss = 0
      AND h.is_jihu_account = 0
      -- same day of FY across years
      AND snapshot_date.day_of_fiscal_year_normalised = (SELECT DISTINCT day_of_fiscal_year_normalised
                                                          FROM date_details
                                                          WHERE date_actual = DATEADD(day, -2, CURRENT_DATE))
 ), mart_available_to_renew AS (

    SELECT renew.*,
        renew_date.first_day_of_fiscal_quarter  AS renew_fiscal_quarter_date,
        renew_date.fiscal_quarter_name_fy       AS renew_fiscal_quarter_name,
        renew_date.fiscal_quarter               AS renew_fiscal_quarter_number
    FROM {{ref('mart_available_to_renew')}} renew
    --FROM prod.restricted_safe_common_mart_finance.mart_available_to_renew
    LEFT JOIN date_details renew_date
        ON renew_date.date_actual = renew.renewal_month
    
 ), dim_subscription AS (

    SELECT
      dim_subscription_id,
      CASE
          WHEN dim_billing_account_id_invoice_owner_account != dim_billing_account_id
              THEN 1
          ELSE 0
      END AS is_channel_arr_flag
    --FROM prod.common.dim_subscription
    FROM {{ ref('dim_subscription') }}

 ), mart_arr AS (

    SELECT *
    --FROM prod.restricted_safe_common_mart_sales.mart_arr
    FROM {{ref('mart_arr')}}   

  ), raw_account AS (
  
    SELECT *
    FROM {{ source('salesforce', 'account') }}
    --FROM raw.salesforce_stitch.account 

  -- missing fields in mart crm account so adding dim_crm_account cte here on top of the mart below
  ), dim_crm_account AS (

    SELECT *
    --FROM prod.restricted_safe_common.dim_crm_account
    FROM {{ref('dim_crm_account')}}

    -- missing fields in dim_crm_account so adding raw account here
  -- has_tam__c
  -- PUBLIC_SECTOR_ACCOUNT__C,
  -- PUBSEC_TYPE__C,
  -- POTENTIAL_ARR_LAM__C
  -- BILLINGSTATE
  -- customer_score__c
  ), mart_crm_account AS (

    SELECT acc.*,
        raw.has_tam__c                              AS has_tam_flag,
        raw.public_sector_account__c                AS public_sector_account_flag,
        raw.pubsec_type__c                          AS pubsec_type,
        raw.lam_tier__c                             AS potential_lam_arr,
        raw.billingstatecode                        AS account_billing_state,
        raw.customer_score__c                       AS customer_score,
        raw.account_demographics_territory__c       AS account_demographics_territory,
        raw.account_demographics_upa_state__c       AS account_demographics_upa_state_code,
        raw.account_demographics_upa_state_name__c  AS account_demographics_upa_state_name
    --FROM prod.restricted_safe_common_mart_sales.mart_crm_account acc
    FROM {{ref('mart_crm_account')}} acc
    LEFT JOIN raw_account raw
      ON raw.id = acc.dim_crm_account_id
    
  ), sfdc_accounts_xf AS (

    SELECT *
    --FROM prod.restricted_safe_legacy.sfdc_accounts_xf
    FROM {{ref('sfdc_accounts_xf')}}

  ), sfdc_users_xf AS (

    SELECT *,
       CASE
            WHEN lower(title) like '%strategic account%'
                OR lower(title) like '%account executive%'
                OR lower(title) like '%country manager%'
                OR lower(title) like '%public sector channel manager%'
                THEN 'Rep'
            WHEN lower(title) like '%area sales manager%'
                THEN 'ASM'
            ELSE 'Other'
      END                                       AS title_category
    --FROM prod.workspace_sales.sfdc_users_xf
    FROM {{ref('wk_sales_sfdc_users_xf')}}

  ), report_dates AS (

    SELECT DISTINCT fiscal_year         AS report_fiscal_year,
                    first_day_of_month  AS report_month_date
    FROM prod.workspace_sales.date_details
    CROSS JOIN (SELECT current_date AS today_date)
    WHERE fiscal_year > 2021
        AND month_actual = MONTH(today_date)
        AND date_actual < today_date

  ), account_year_key AS (

    SELECT DISTINCT
      a.dim_crm_account_id AS account_id,
      d.report_fiscal_year,
      d.report_month_date
  FROM dim_crm_account AS a
  CROSS JOIN report_dates AS d

  ), nfy_atr_base AS (

    SELECT 
        dim_crm_account_id      AS account_id,
        report_dates.report_fiscal_year,
        SUM(arr)                AS nfy_atr,
         SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 1
            THEN arr
          ELSE 0
        END)                    AS nfy_q1_atr,
        SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 2
            THEN arr
          ELSE 0
        END)                    AS nfy_q2_atr,
        SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 3
            THEN arr
          ELSE 0
        END)                    AS nfy_q3_atr,
        SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 4
            THEN arr
          ELSE 0
        END)                    AS nfy_q4_atr
    FROM mart_available_to_renew atr
    CROSS JOIN report_dates
    WHERE is_available_to_renew = 1
    AND atr.fiscal_year = report_dates.report_fiscal_year + 1
    GROUP BY 1,2
    
), last_12m_atr_base AS (

    SELECT dim_crm_account_id   AS account_id,
        report_dates.report_fiscal_year,
        COUNT(DISTINCT atr.renewal_month) AS count_unique_months,
    
        SUM(arr)                AS last_12m_atr
    FROM mart_available_to_renew atr
    CROSS JOIN report_dates
    WHERE is_available_to_renew = 1
    --AND renewal_type = 'Non-MYB'
    AND atr.renewal_month < report_dates.report_month_date
    AND atr.renewal_month >= DATEADD(month,-12,report_dates.report_month_date)
    GROUP BY 1,2
    
), fy_atr_base AS (

    SELECT dim_crm_account_id   AS account_id,
        report_dates.report_fiscal_year,
        COUNT(DISTINCT atr.renewal_month) AS count_unique_months,
        SUM(arr)                AS fy_atr
    FROM mart_available_to_renew atr
    CROSS JOIN report_dates
    WHERE is_available_to_renew = 1
    --AND renewal_type = 'Non-MYB'
    AND atr.fiscal_year = report_dates.report_fiscal_year
    GROUP BY 1,2


-- Rolling 1 year Net ARR
), net_arr_last_12m AS (
  -- net_arr_ttm

    SELECT
      o.account_id,
      d.report_fiscal_year          AS report_fiscal_year,
      SUM(o.net_arr)                AS last_12m_booked_net_arr,   -- ttm_net_arr
      SUM(CASE
            WHEN  o.sales_qualified_source != 'Web Direct Generated'
              THEN o.net_arr
            ELSE 0
          END)          AS last_12m_booked_non_web_net_arr,  -- ttm_non_web_net_arr
      SUM(CASE
            WHEN o.sales_qualified_source = 'Web Direct Generated'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_web_direct_sourced_net_arr,  --ttm_web_direct_sourced_net_arr
      SUM(CASE
            WHEN (o.sales_qualified_source = 'Partner Generated' OR o.sales_qualified_source = 'Partner Generated')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_channel_sourced_net_arr,  -- ttm_web_direct_sourced_net_arr
      SUM(CASE
            WHEN o.sales_qualified_source = 'SDR Generated'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_sdr_sourced_net_arr,  -- ttm_sdr_sourced_net_arr
      SUM(CASE
            WHEN o.sales_qualified_source = 'AE Generated'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_ae_sourced_net_arr,  -- ttm_ae_sourced_net_arr
      SUM(CASE
            WHEN o.is_eligible_churn_contraction_flag = 1
               THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_churn_contraction_net_arr,  -- ttm_churn_contraction_net_arr

       -- FO year
        SUM(CASE
            WHEN o.order_type_stamped = '1. New - First Order'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_fo_net_arr,  -- ttm_fo_net_arr

        -- New Connected year
        SUM(CASE
            WHEN o.order_type_stamped = '2. New - Connected'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_new_connected_net_arr, -- ttm_new_connected_net_arr

        -- Growth year
        SUM(CASE
            WHEN o.order_type_stamped NOT IN ('2. New - Connected','1. New - First Order')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_growth_net_arr,   --ttm_growth_net_arr

        -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_direct_net_arr,   --ttm_direct_net_arr

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_channel_net_arr,   --ttm_channel_net_arr

        SUM (CASE
            WHEN o.is_won = 1
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_deal_count,  --ttm_deal_count

         SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_count,  -- ttm_trx_count

          SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
                AND ((o.is_renewal = 1 AND o.arr_basis > 5000)
                        OR o.net_arr > 5000)
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_over_5k_count,   -- ttm_trx_over_5k_count

          SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
                AND ((o.is_renewal = 1 AND o.arr_basis > 10000)
                        OR o.net_arr > 10000)
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_over_10k_count,  -- ttm_trx_over_10k_count

          SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
                AND ((o.is_renewal = 1 AND o.arr_basis > 50000)
                        OR o.net_arr > 50000)
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_over_50k_count,  -- ttm_trx_over_50k_count

          SUM (CASE
            WHEN o.is_renewal = 1
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_renewal_deal_count,   -- ttm_renewal_deal_count

        SUM(CASE
            WHEN o.is_eligible_churn_contraction_flag = 1
                AND o.opportunity_category IN ('Standard','Internal Correction','Ramp Deal','Contract Reset','Contract Reset/Ramp Deal')
            THEN o.calculated_deal_count
            ELSE 0 END) AS last_12m_booked_churn_contraction_deal_count,  -- ttm_churn_contraction_deal_count

          -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
                AND o.is_won = 1
            THEN o.calculated_deal_count
            ELSE 0 END) AS last_12m_booked_direct_deal_count,  -- ttm_direct_deal_count

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
                AND o.is_won = 1
            THEN o.calculated_deal_count
            ELSE 0 END) AS last_12m_booked_channel_deal_count  -- ttm_channel_deal_count

    FROM sfdc_opportunity_xf AS o
    CROSS JOIN report_dates AS d
    WHERE o.close_date BETWEEN DATEADD(month, -12,DATE_TRUNC('month',d.report_month_date)) and DATE_TRUNC('month',d.report_month_date)
        AND o.booked_net_arr <> 0
    GROUP BY 1, 2
    
  -- total booked net arr in fy
  ), fy_net_arr AS (

    SELECT
      o.account_id,
      o.close_fiscal_year   AS report_fiscal_year,
      SUM(o.booked_net_arr) AS fy_booked_net_arr,
      SUM(CASE
            WHEN  o.sales_qualified_source != 'Web Direct Generated'
              THEN o.booked_net_arr
            ELSE 0
          END)          AS fy_booked_non_web_booked_net_arr,
      SUM(CASE
            WHEN o.sales_qualified_source = 'Web Direct Generated'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_web_direct_sourced_net_arr,
      SUM(CASE
            WHEN (o.sales_qualified_source = 'Partner Generated' OR o.sales_qualified_source = 'Partner Generated')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_channel_sourced_net_arr,
      SUM(CASE
            WHEN o.sales_qualified_source = 'SDR Generated'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_sdr_sourced_net_arr,
      SUM(CASE
            WHEN o.sales_qualified_source = 'AE Generated'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_ae_sourced_net_arr,
      SUM(CASE
            WHEN o.is_eligible_churn_contraction_flag = 1
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_churn_contraction_net_arr,

        -- First Order year
        SUM(CASE
            WHEN o.order_type_stamped = '1. New - First Order'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_fo_net_arr,

        -- New Connected year
        SUM(CASE
            WHEN o.order_type_stamped = '2. New - Connected'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_new_connected_net_arr,

        -- Growth year
        SUM(CASE
            WHEN o.order_type_stamped NOT IN ('2. New - Connected','1. New - First Order')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_growth_net_arr,

        SUM(o.calculated_deal_count)   AS fy_booked_deal_count,

        -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_direct_net_arr,

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_channel_net_arr,

         -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
            THEN o.calculated_deal_count
            ELSE 0 END) AS fy_booked_direct_deal_count,

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
            THEN o.calculated_deal_count
            ELSE 0 END) AS fy_booked_channel_deal_count

    FROM sfdc_opportunity_xf AS o
    WHERE o.booked_net_arr <> 0
    GROUP BY 1,2

  -- Total open pipeline at the same point in previous fiscal years (total open pipe)
  ), op_forward_one_year AS (

    SELECT
      h.account_id,
      h.snapshot_fiscal_year        AS report_fiscal_year,
      -- net arr pipeline
      SUM(h.net_arr)                AS total_open_pipe,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year + 1
                  THEN h.net_arr
              ELSE 0
          END)                      AS nfy_open_pipeline,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year
                  THEN h.net_arr
              ELSE 0
          END)                       AS fy_open_pipeline,
      
      -- deal count pipeline
      SUM(h.calculated_deal_count)   AS total_count_open_deals,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year + 1
                  THEN h.net_arr
              ELSE 0
          END)                      AS nfy_count_open_deals,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year
                  THEN h.net_arr
              ELSE 0
          END)                       AS fy_count_open_deals
      
    FROM sfdc_opportunity_snapshot_xf AS h
    WHERE h.close_date > h.snapshot_date
      AND h.forecast_category_name NOT IN  ('Omitted','Closed')
      AND h.order_type_stamped != '7. PS / Other'
      AND h.net_arr != 0
      AND h.is_eligible_open_pipeline_flag = 1
      GROUP BY 1,2

  -- Last 12 months pipe gen at same point of time in the year
  ), pg_last_12_months AS (

    SELECT
      h.account_id,
      h.snapshot_fiscal_year AS report_fiscal_year,
      SUM(h.net_arr)                 AS pg_last_12m_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'Web Direct Generated'
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_web_direct_sourced_net_arr,
      SUM(CASE
            WHEN (h.sales_qualified_source = 'Partner Generated' OR h.sales_qualified_source = 'Partner Generated')
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_channel_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'SDR Generated'
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_sdr_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'AE Generated'
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_ae_sourced_net_arr,

      SUM(CASE
            WHEN h.sales_qualified_source = 'Web Direct Generated'
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_web_direct_sourced_deal_count,
      SUM(CASE
            WHEN (h.sales_qualified_source = 'Partner Generated' OR h.sales_qualified_source = 'Partner Generated')
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_channel_sourced_deal_count,
      SUM(CASE
            WHEN h.sales_qualified_source = 'SDR Generated'
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_sdr_sourced_deal_count,
      SUM(CASE
            WHEN h.sales_qualified_source = 'AE Generated'
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_ae_sourced_deal_count

    FROM sfdc_opportunity_snapshot_xf AS h

    -- pipeline created within the last 12 months
    WHERE
        h.pipeline_created_date > dateadd(month,-12,h.snapshot_date)
      AND h.pipeline_created_date <= h.snapshot_date
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_created_pipeline_flag = 1
    GROUP BY 1,2

  -- Pipe generation at the same point in time in the fiscal year
  ), pg_ytd AS (

    SELECT
      h.account_id,
      h.net_arr_created_fiscal_year  AS report_fiscal_year,
      SUM(h.net_arr)                 AS pg_ytd_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'Web Direct Generated'
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_web_direct_sourced_net_arr,
      SUM(CASE
            WHEN (h.sales_qualified_source = 'Partner Generated' OR h.sales_qualified_source = 'Partner Generated')
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_channel_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'SDR Generated'
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_sdr_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'AE Generated'
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_ae_sourced_net_arr
    FROM sfdc_opportunity_snapshot_xf AS h
      -- pipeline created within the fiscal year
    WHERE h.snapshot_fiscal_year = h.net_arr_created_fiscal_year
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_created_pipeline_flag = 1
      AND h.net_arr > 0
      GROUP BY 1,2

  -- ARR at the same point in time in Fiscal Year
  ), arr_at_same_month AS (

    SELECT
      mrr.dim_crm_account_id AS account_id,
      mrr_date.fiscal_year   AS report_fiscal_year,
  --    ultimate_parent_account_id,
      SUM(mrr.mrr)      AS mrr,
      SUM(mrr.arr)      AS arr,
      SUM(CASE
              WHEN sub.is_channel_arr_flag = 1
                  THEN mrr.arr
              ELSE 0
          END)          AS reseller_arr,
      SUM(CASE
              WHEN  sub.is_channel_arr_flag = 0
                  THEN mrr.arr
              ELSE 0
          END)          AS direct_arr,


      SUM(CASE
              WHEN  (mrr.product_tier_name LIKE '%Starter%'
                      OR mrr.product_tier_name LIKE '%Bronze%')
                  THEN mrr.arr
              ELSE 0
          END)          AS product_starter_arr,


      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%Premium%'
                  THEN mrr.arr
              ELSE 0
          END)          AS product_premium_arr,
      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%Ultimate%'
                  THEN mrr.arr
              ELSE 0
          END)          AS product_ultimate_arr,

      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%Self-Managed%'
                  THEN mrr.arr
              ELSE 0
          END)          AS delivery_self_managed_arr,
      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%SaaS%'
                  THEN mrr.arr
              ELSE 0
          END)          AS delivery_saas_arr

    FROM mart_arr AS mrr
    INNER JOIN date_details AS mrr_date
      ON mrr.arr_month = mrr_date.date_actual
    INNER JOIN dim_subscription AS sub
      ON sub.dim_subscription_id = mrr.dim_subscription_id
    WHERE mrr_date.month_actual =  (SELECT DISTINCT month_actual
                                      FROM date_details
                                      WHERE date_actual = DATE_TRUNC('month', DATEADD(month, -1, CURRENT_DATE)))
    GROUP BY 1,2

), sao_last_12_month AS (
   
  SELECT 
        h.sales_accepted_fiscal_year   AS report_fiscal_year,
        h.account_id,
        SUM(h.calculated_deal_count)    AS last_12m_sao_deal_count,
        SUM(h.net_arr)                  AS last_12m_sao_net_arr,
        SUM(h.booked_net_arr)           AS last_12m_sao_booked_net_arr       
        
  FROM sfdc_opportunity_snapshot_xf AS h
    WHERE
        h.sales_accepted_date > dateadd(month,-12,h.snapshot_date)
      AND h.sales_accepted_date <= h.snapshot_date
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_sao_flag = 1
      AND h.is_renewal = 0
    GROUP BY 1,2
    
), sao_fy AS (      

  SELECT 
        h.sales_accepted_fiscal_year   AS report_fiscal_year,
        h.account_id,
        SUM(h.calculated_deal_count)    AS fy_sao_deal_count,
        SUM(h.net_arr)                  AS fy_sao_net_arr,
        SUM(h.booked_net_arr)           AS fy_sao_booked_net_arr       
        
  FROM sfdc_opportunity_snapshot_xf AS h
    WHERE
       h.snapshot_fiscal_year = h.sales_accepted_fiscal_year
      AND h.sales_accepted_date <= h.snapshot_date
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_sao_flag = 1
      AND h.is_renewal = 0
    GROUP BY 1,2
    
), consolidated_accounts AS (

  SELECT
    ak.report_fiscal_year,
    a.account_id                      AS account_id,
    a.account_name                    AS account_name,
    a.ultimate_parent_account_id      AS upa_id,
    a.ultimate_parent_account_name    AS upa_name,
    a.is_key_account,
    a.abm_tier,
    a.ultimate_parent_account_id,
    u.name                              AS account_owner_name,
    a.owner_id                          AS account_owner_id,
    trim(u.employee_number)             AS account_owner_employee_number,
    upa_owner.name                      AS upa_owner_name,
    upa_owner.user_id                   AS upa_owner_id,
    upa_owner.title_category            AS upa_owner_title_category,
    trim(upa_owner.employee_number)     AS upa_owner_employee_number,
    a.billing_country                   AS account_country,
    a.billing_postal_code               AS account_zip_code,
    mart_crm_account.account_billing_state AS account_state,

    
    -- Account demographics fields
    upa_account.parent_crm_account_sales_segment                    AS parent_crm_account_sales_segment,
    upa_account.parent_crm_account_geo                              AS parent_crm_account_geo,
    upa_account.parent_crm_account_region                           AS parent_crm_account_region,
    upa_account.parent_crm_account_area                             AS parent_crm_account_area,
    upa_account.crm_account_billing_country                         AS crm_account_billing_country,  
    upa_account.parent_crm_account_upa_state                        AS parent_crm_account_upa_state,
    upa_account.parent_crm_account_upa_city                         AS parent_crm_account_upa_city,
    upa_account.parent_crm_account_upa_postal_code                  AS parent_crm_account_upa_postal_code,
    upa_account.parent_crm_account_territory                        AS parent_crm_account_territory,

    
    -- substitute this by key segment
    u.user_geo                                    AS account_user_geo,
    u.user_region                                 AS account_user_region,
    u.user_segment                                AS account_user_segment,
    u.user_area                                   AS account_user_area,
    u.role_name                                   AS account_owner_role,
    u.title_category                              AS account_owner_title_category,
    a.industry                                    AS account_industry,
    upa_owner.user_geo                            AS upa_user_geo,
    upa_owner.user_region                         AS upa_user_region,
    upa_owner.user_segment                        AS upa_user_segment,
    upa_owner.user_area                           AS upa_user_area,
    upa_owner.role_name                           AS upa_user_role,
    upa.industry                                  AS upa_industry,
    
    -- NF: These fields are only useful to calculate LAM Dev Count which is already calculated
    coalesce(mart_crm_account.potential_users, 0)                               AS potential_users,
    coalesce(mart_crm_account.number_of_licenses_this_account, 0)               AS licenses,
    coalesce(mart_crm_account.decision_maker_count_linkedin, 0)                 AS linkedin_developer,
    coalesce(mart_crm_account.crm_account_zoom_info_number_of_developers, 0)    AS zi_developers,
    coalesce(mart_crm_account.zoom_info_company_revenue, 0)                     AS zi_revenue,


    -- LAM Dev count calculated at the UPA level
    upa_account.parent_crm_account_lam_dev_count                       AS upa_lam_dev_count,
    mart_crm_account.public_sector_account_flag,
    mart_crm_account.pubsec_type,
    mart_crm_account.potential_lam_arr,
    coalesce(mart_crm_account.crm_account_employee_count, 0)   AS employees,
    
    COALESCE(mart_crm_account.carr_account_family, 0)                       AS account_family_arr,
    LEAST(50000,GREATEST(coalesce(mart_crm_account.number_of_licenses_this_account,0),COALESCE(mart_crm_account.potential_users, mart_crm_account.decision_maker_count_linkedin, mart_crm_account.crm_account_zoom_info_number_of_developers, 0)))           AS calculated_developer_count,

    -- Account score used to balance patches in maps
    mart_crm_account.customer_score,


    -- TODO: 20221208 They are not called TAMs anymore, this part needs to be refactored
    a.technical_account_manager_date,
    a.technical_account_manager                                             AS technical_account_manager_name,
    CASE
      WHEN mart_crm_account.has_tam_flag
          THEN 1
      ELSE 0
    END                                           AS has_technical_account_manager_flag,

    a.health_score_color                          AS account_health_score_color,
    a.health_number                               AS account_health_number,

    -- atr for current fy
    COALESCE(fy_atr_base.fy_atr,0)           AS fy_atr,
    -- next fiscal year atr base reported at fy
    COALESCE(nfy_atr_base.nfy_atr,0)         AS nfy_atr,
    COALESCE(nfy_atr_base.nfy_q1_atr,0)      AS nfy_q1_atr,
    COALESCE(nfy_atr_base.nfy_q2_atr,0)      AS nfy_q2_atr,
    COALESCE(nfy_atr_base.nfy_q3_atr,0)      AS nfy_q3_atr,
    COALESCE(nfy_atr_base.nfy_q4_atr,0)      AS nfy_q4_atr,
    -- last 12 months ATR
    COALESCE(last_12m_atr_base.last_12m_atr,0)    AS last_12m_atr,

    -- arr by fy
    COALESCE(arr.arr,0)                           AS arr,

    COALESCE(arr.reseller_arr,0)                  AS arr_channel,
    COALESCE(arr.direct_arr,0)                    AS arr_direct,

    COALESCE(arr.product_starter_arr,0)           AS product_starter_arr,
    COALESCE(arr.product_premium_arr,0)           AS product_premium_arr,
    COALESCE(arr.product_ultimate_arr,0)          AS product_ultimate_arr,


    CASE
      WHEN COALESCE(arr.product_ultimate_arr,0) > COALESCE(arr.product_starter_arr,0) + COALESCE(arr.product_premium_arr,0)
          THEN 1
      ELSE 0
    END                                           AS is_ultimate_customer_flag,

    CASE
      WHEN COALESCE(arr.product_ultimate_arr,0) < COALESCE(arr.product_starter_arr,0) + COALESCE(arr.product_premium_arr,0)
          THEN 1
      ELSE 0
    END                                           AS is_premium_customer_flag,

    COALESCE(arr.delivery_self_managed_arr,0)     AS delivery_self_managed_arr,
    COALESCE(arr.delivery_saas_arr,0)             AS delivery_saas_arr,

    -- accounts counts
    CASE
      WHEN COALESCE(arr.arr,0) = 0
      THEN 1
      ELSE 0
    END                                           AS is_prospect_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 0
      THEN 1
      ELSE 0
    END                                           AS is_customer_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 5000
      THEN 1
      ELSE 0
    END                                           AS is_over_5k_customer_flag,
    CASE
      WHEN COALESCE(arr.arr,0) > 10000
      THEN 1
      ELSE 0
    END                                           AS is_over_10k_customer_flag,
    CASE
      WHEN COALESCE(arr.arr,0) > 50000
      THEN 1
      ELSE 0
    END                                           AS is_over_50k_customer_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 100000
      THEN 1
      ELSE 0
    END                                           AS is_over_100k_customer_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 500000
      THEN 1
      ELSE 0
    END                                           AS is_over_500k_customer_flag,

    -- rolling last 12 months booked net arr
    COALESCE(net_arr_last_12m.last_12m_booked_net_arr,0)                       AS last_12m_booked_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_non_web_net_arr,0)               AS last_12m_booked_non_web_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_web_direct_sourced_net_arr,0)    AS last_12m_booked_web_direct_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_sourced_net_arr,0)       AS last_12m_booked_channel_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_sdr_sourced_net_arr,0)           AS last_12m_booked_sdr_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_ae_sourced_net_arr,0)            AS last_12m_booked_ae_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_churn_contraction_net_arr,0)     AS last_12m_booked_churn_contraction_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_fo_net_arr,0)                    AS last_12m_booked_fo_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_new_connected_net_arr,0)         AS last_12m_booked_new_connected_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_growth_net_arr,0)                AS last_12m_booked_growth_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_deal_count,0)                    AS last_12m_booked_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_direct_net_arr,0)                AS last_12m_booked_direct_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_net_arr,0)               AS last_12m_booked_channel_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_net_arr,0)  - COALESCE(net_arr_last_12m.last_12m_booked_channel_sourced_net_arr,0)   AS last_12m_booked_channel_co_sell_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_direct_deal_count,0)             AS last_12m_booked_direct_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_deal_count,0)            AS last_12m_booked_channel_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_churn_contraction_deal_count,0)  AS last_12m_booked_churn_contraction_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_renewal_deal_count,0)            AS last_12m_booked_renewal_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_count,0)                     AS last_12m_booked_trx_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_over_5k_count,0)             AS last_12m_booked_trx_over_5k_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_over_10k_count,0)            AS last_12m_booked_trx_over_10k_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_over_50k_count,0)            AS last_12m_booked_trx_over_50k_count,

    -- fy booked net arr
    COALESCE(net_arr_fiscal.fy_booked_net_arr,0)                     AS fy_booked_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_web_direct_sourced_net_arr,0)  AS fy_booked_web_direct_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_channel_sourced_net_arr,0)     AS fy_booked_channel_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_sdr_sourced_net_arr,0)         AS fy_booked_sdr_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_ae_sourced_net_arr,0)          AS fy_booked_ae_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_churn_contraction_net_arr,0)   AS fy_booked_churn_contraction_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_fo_net_arr,0)                  AS fy_booked_fo_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_new_connected_net_arr,0)       AS fy_booked_new_connected_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_growth_net_arr,0)              AS fy_booked_growth_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_deal_count,0)                  AS fy_booked_deal_count,
    COALESCE(net_arr_fiscal.fy_booked_direct_net_arr,0)              AS fy_booked_direct_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_channel_net_arr,0)             AS fy_booked_channel_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_direct_deal_count,0)           AS fy_booked_direct_deal_count,
    COALESCE(net_arr_fiscal.fy_booked_channel_deal_count,0)          AS fy_booked_channel_deal_count,

    -- open pipe forward looking
    COALESCE(op.total_open_pipe,0)                  AS total_open_pipe,
    COALESCE(op.total_count_open_deals,0)           AS total_count_open_deals_pipe,
    COALESCE(op.nfy_open_pipeline,0)                AS nfy_open_pipeline,
    COALESCE(op.fy_open_pipeline,0)                 AS fy_open_pipeline,
    COALESCE(op.nfy_count_open_deals,0)             AS nfy_count_open_deals,
    COALESCE(op.fy_count_open_deals,0)              AS fy_count_open_deals,

    CASE
      WHEN COALESCE(arr.arr,0) > 0
          AND COALESCE(op.total_open_pipe,0) > 0
              THEN 1
          ELSE 0
    END                                                       AS customer_has_open_pipe_flag,

    CASE
      WHEN COALESCE(arr.arr,0) = 0
          AND COALESCE(op.total_open_pipe,0) > 0
              THEN 1
          ELSE 0
    END                                                       AS prospect_has_open_pipe_flag,

    -- pipe generation
    COALESCE(pg.pg_ytd_net_arr,0)                             AS pg_ytd_net_arr,
    COALESCE(pg.pg_ytd_web_direct_sourced_net_arr,0)          AS pg_ytd_web_direct_sourced_net_arr,
    COALESCE(pg.pg_ytd_channel_sourced_net_arr,0)             AS pg_ytd_channel_sourced_net_arr,
    COALESCE(pg.pg_ytd_sdr_sourced_net_arr,0)                 AS pg_ytd_sdr_sourced_net_arr,
    COALESCE(pg.pg_ytd_ae_sourced_net_arr,0)                  AS pg_ytd_ae_sourced_net_arr,

    COALESCE(pg_ly.pg_last_12m_net_arr,0)                     AS pg_last_12m_net_arr,
    COALESCE(pg_ly.pg_last_12m_web_direct_sourced_net_arr,0)  AS pg_last_12m_web_direct_sourced_net_arr,
    COALESCE(pg_ly.pg_last_12m_channel_sourced_net_arr,0)     AS pg_last_12m_channel_sourced_net_arr,
    COALESCE(pg_ly.pg_last_12m_sdr_sourced_net_arr,0)         AS pg_last_12m_sdr_sourced_net_arr,
    COALESCE(pg_ly.pg_last_12m_ae_sourced_net_arr,0)          AS pg_last_12m_ae_sourced_net_arr,

    COALESCE(pg_last_12m_web_direct_sourced_deal_count,0)     AS pg_last_12m_web_direct_sourced_deal_count,
    COALESCE(pg_last_12m_channel_sourced_deal_count,0)        AS pg_last_12m_channel_sourced_deal_count,
    COALESCE(pg_last_12m_sdr_sourced_deal_count,0)            AS pg_last_12m_sdr_sourced_deal_count,
    COALESCE(pg_last_12m_ae_sourced_deal_count,0)             AS pg_last_12m_ae_sourced_deal_count,
    
    -- SAO metrics
    COALESCE(sao_last_12_month.last_12m_sao_deal_count,0)       AS last_12m_sao_deal_count,
    COALESCE(sao_last_12_month.last_12m_sao_net_arr,0)          AS last_12m_sao_net_arr,
    COALESCE(sao_last_12_month.last_12m_sao_booked_net_arr,0)   AS last_12m_sao_booked_net_arr, 
    COALESCE(sao_fy.fy_sao_deal_count,0)                        AS fy_sao_deal_count,
    COALESCE(sao_fy.fy_sao_net_arr,0)                           AS fy_sao_net_arr,
    COALESCE(sao_fy.fy_sao_booked_net_arr,0)                    AS fy_sao_booked_net_arr,
    
     -- LAM Dev Count Category
    CASE 
        WHEN upa_account.parent_crm_account_lam_dev_count < 100
            THEN '0. <100'    
        WHEN upa_account.parent_crm_account_lam_dev_count >= 100
            AND upa_account.parent_crm_account_lam_dev_count < 250
            THEN '1. [100-250)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 250
            AND upa_account.parent_crm_account_lam_dev_count < 500
            THEN '2. [250-500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 500
            AND upa_account.parent_crm_account_lam_dev_count < 1500
            THEN '3. [500-1500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 1500
            AND upa_account.parent_crm_account_lam_dev_count < 2500
            THEN '4. [1500-2500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 2500
            AND upa_account.parent_crm_account_lam_dev_count < 3500
            THEN '5. [2500-3500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 3500
            AND upa_account.parent_crm_account_lam_dev_count < 5000
            THEN '6. [3500-5000)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 5000
            THEN '7. >5000'
    END AS lam_dev_count_bin_name,
    
    CASE 
        WHEN upa_account.parent_crm_account_lam_dev_count < 100
            THEN 0
        WHEN upa_account.parent_crm_account_lam_dev_count >= 100
            AND upa_account.parent_crm_account_lam_dev_count < 250
            THEN 100
        WHEN upa_account.parent_crm_account_lam_dev_count >= 250
            AND upa_account.parent_crm_account_lam_dev_count < 500
            THEN 250
        WHEN upa_account.parent_crm_account_lam_dev_count >= 500
            AND upa_account.parent_crm_account_lam_dev_count < 1500
            THEN 500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 1500
            AND upa_account.parent_crm_account_lam_dev_count < 2500
            THEN 1500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 2500
            AND upa_account.parent_crm_account_lam_dev_count < 3500
            THEN 2500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 3500
            AND upa_account.parent_crm_account_lam_dev_count < 5000
            THEN 3500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 5000
            THEN 5000
    END AS lam_dev_count_bin_rank,      
    
    -- Public Sector
    CASE
        WHEN mart_crm_account.pubsec_type ='ROW-PubSec'
            THEN 'Public'
        ELSE 'Private'
    END                     AS sector_type,
    CASE
        WHEN mart_crm_account.pubsec_type ='ROW-PubSec'
            THEN 1
        ELSE 0
    END                     AS is_public_sector_flag

  FROM account_year_key AS ak
  INNER JOIN sfdc_accounts_xf AS a
    ON ak.account_id = a.account_id
  LEFT JOIN mart_crm_account AS upa_account
    ON a.ultimate_parent_account_id = upa_account.dim_crm_account_id
  LEFT JOIN sfdc_accounts_xf AS upa
    ON a.ultimate_parent_account_id = upa.account_id
  LEFT JOIN dim_crm_account AS dim_account
    ON ak.account_id = dim_account.dim_crm_account_id
  LEFT JOIN mart_crm_account
    ON ak.account_id = mart_crm_account.dim_crm_account_id
  LEFT JOIN sfdc_users_xf AS u
    ON a.owner_id = u.user_id
  LEFT JOIN sfdc_users_xf AS upa_owner
    ON upa.owner_id = upa_owner.user_id
  LEFT JOIN fy_atr_base
    ON fy_atr_base.account_id = ak.account_id
    AND fy_atr_base.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN last_12m_atr_base AS last_12m_atr_base
    ON last_12m_atr_base.account_id = ak.account_id
    AND last_12m_atr_base.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN nfy_atr_base
    ON nfy_atr_base.account_id = ak.account_id
    AND nfy_atr_base.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN net_arr_last_12m
    ON net_arr_last_12m.account_id = ak.account_id
    AND net_arr_last_12m.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN op_forward_one_year AS op
    ON op.account_id = ak.account_id
    AND op.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN pg_ytd AS pg
    ON pg.account_id = ak.account_id
    AND pg.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN pg_last_12_months AS pg_ly
    ON pg_ly.account_id = ak.account_id
    AND pg_ly.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN arr_at_same_month AS arr
    ON arr.account_id = ak.account_id
    AND arr.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN fy_net_arr AS net_arr_fiscal
    ON net_arr_fiscal.account_id = ak.account_id
    AND net_arr_fiscal.report_fiscal_year = ak.report_fiscal_year
  -- SAOs
  LEFT JOIN sao_last_12_month 
    ON sao_last_12_month.account_id = ak.account_id
    AND sao_last_12_month.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN sao_fy
    ON sao_fy.account_id = ak.account_id
    AND sao_fy.report_fiscal_year = ak.report_fiscal_year

    -----------------------
-- Adjust for hierarchies split between different geos
), upa_virtual_cte AS (

SELECT 
    report_fiscal_year,
    upa_id,
    upa_name,
    upa_user_geo,
    account_id                                AS virtual_upa_id,
    account_name                              AS virtual_upa_name,
    parent_crm_account_sales_segment          AS virtual_upa_segment,
    parent_crm_account_geo                    AS virtual_upa_geo,
    parent_crm_account_region                 AS virtual_upa_region,
    parent_crm_account_area                   AS virtual_upa_area,
    crm_account_billing_country               AS virtual_upa_country,
    parent_crm_account_upa_postal_code        AS virtual_upa_zip_code,
    account_industry                          AS virtual_upa_industry,
    parent_crm_account_upa_state              AS virtual_upa_state,
    account_owner_name                        AS virtual_upa_owner_name,
    account_owner_title_category              AS virtual_upa_owner_title_category,
    account_owner_id                          AS virtual_upa_owner_id,
    account_id,
    account_name,
    account_owner_name,
    arr AS account_arr,
    1 AS level
FROM consolidated_accounts
WHERE upa_user_geo != account_user_geo
    AND arr > 5000
   -- AND upa_user_geo = 'EMEA'
UNION ALL 
SELECT 
    upa.report_fiscal_year,
    upa.upa_id,
    upa.upa_name,
    upa.upa_user_geo,
    upa.virtual_upa_id,
    upa.virtual_upa_name,
    upa.virtual_upa_segment,
    upa.virtual_upa_geo,
    upa.virtual_upa_region,
    upa.virtual_upa_area,
    upa.virtual_upa_country,
    upa.virtual_upa_zip_code,
    upa.virtual_upa_industry,
    upa.virtual_upa_state,
    upa.virtual_upa_owner_name,
    upa.virtual_upa_owner_title_category,
    upa.virtual_upa_owner_id,
    child.account_id,
    child.account_name,
    child.account_owner_name,
    child.arr AS account_arr,
    level + 1 AS level
FROM consolidated_accounts child
INNER JOIN upa_virtual_cte upa
    ON child.ultimate_parent_account_id = upa.account_id
    AND child.report_fiscal_year = upa.report_fiscal_year

), max_virtual_upa_depth AS (

    SELECT 
        report_fiscal_year,
        upa_id,
        upa_name,
        virtual_upa_segment,
        virtual_upa_geo,
        virtual_upa_id, 
        virtual_upa_name, 
        MAX(level) AS max_depth
    FROM upa_virtual_cte
    GROUP BY 1,2,3,4,5,6,7
    
), selected_virtual_upa_head AS (

SELECT 
    report_fiscal_year,
    upa_id,
    upa_name,
    virtual_upa_segment,
    virtual_upa_geo,
    virtual_upa_id,
    virtual_upa_name,
    max_depth,
    ROW_NUMBER() OVER (PARTITION BY upa_id, report_fiscal_year ORDER BY max_depth DESC) AS level
FROM max_virtual_upa_depth
QUALIFY level = 1

        
-- selects the longest hierarchy from the virtual UPAs options
), selected_hierarchy_virtual_upa AS (

    
    SELECT total.*
    FROM upa_virtual_cte total
    INNER JOIN selected_virtual_upa_head selected
        ON total.virtual_upa_id = selected.virtual_upa_id
        AND total.report_fiscal_year = selected.report_fiscal_year


-- identify unique virtual upas
), select_unique_virtual_upa AS (

SELECT 
    final.report_fiscal_year,
    final.upa_id,
    final.upa_name,
    final.upa_user_geo,
    final.virtual_upa_id,
    final.virtual_upa_name,
    final.virtual_upa_segment,
    final.virtual_upa_geo,
    final.virtual_upa_region,
    final.virtual_upa_area,
    final.virtual_upa_country,
    final.virtual_upa_zip_code,
    final.virtual_upa_industry,
    final.virtual_upa_state,
    final.virtual_upa_owner_name,
    final.virtual_upa_owner_title_category,
    final.virtual_upa_owner_id
FROM selected_hierarchy_virtual_upa final
    

-- identify accounts that belong to the same owner of a virtual upa within the hierarchy
), final_virtual_upa AS (
    
SELECT 
    final.report_fiscal_year,
    final.upa_id,
    final.upa_name,
    final.upa_user_geo,
    extra.virtual_upa_id,
    extra.virtual_upa_name,
    extra.virtual_upa_segment,
    extra.virtual_upa_geo,
    extra.virtual_upa_region,
    extra.virtual_upa_area,
    extra.virtual_upa_country,
    extra.virtual_upa_zip_code,
    extra.virtual_upa_industry,
    extra.virtual_upa_state,
    extra.virtual_upa_owner_name,
    extra.virtual_upa_owner_title_category,
    extra.virtual_upa_owner_id,
    final.account_id,
    final.account_name,
    final.account_owner_name,
    final.arr AS account_arr,
    -1 AS level
FROM consolidated_accounts final
    INNER JOIN select_unique_virtual_upa extra
        ON final.upa_id = extra.upa_id
        AND final.account_owner_name = extra.virtual_upa_owner_name
        AND final.report_fiscal_year = extra.report_fiscal_year
-- Exclude accounts already in the hierarchy table
WHERE final.account_id NOT IN (SELECT DISTINCT account_id FROM selected_hierarchy_virtual_upa)
UNION
  SELECT 
    final.report_fiscal_year,
    final.upa_id,
    final.upa_name,
    final.upa_user_geo,
    final.virtual_upa_id,
    final.virtual_upa_name,
    final.virtual_upa_segment,
    final.virtual_upa_geo,
    final.virtual_upa_region,
    final.virtual_upa_area,
    final.virtual_upa_country,
    final.virtual_upa_zip_code,
    final.virtual_upa_industry,
    final.virtual_upa_state,
    final.virtual_upa_owner_name,
    final.virtual_upa_owner_title_category,
    final.virtual_upa_owner_id,
    final.account_id,
    final.account_name,
    final.account_owner_name,
    final.account_arr,
    final.level
FROM selected_hierarchy_virtual_upa final
------------------------

), consolidated_upa AS (

  SELECT
    acc.report_fiscal_year,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN 'Virtual'
        ELSE 'Real'
    END                                     AS upa_type,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_id 
        ELSE acc.upa_id
    END                                     AS upa_id,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_name
        ELSE acc.upa_name
    END                                     AS upa_name,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_owner_name
        ELSE acc.upa_owner_name
    END                                     AS upa_owner_name,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_owner_id 
        ELSE acc.upa_owner_id
    END                                     AS upa_owner_id,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_owner_title_category
        ELSE acc.upa_owner_title_category
    END                                     AS upa_owner_title_category,
    
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_industry 
        ELSE acc.upa_industry
    END                                     AS upa_industry,
    
    -- Account Demographics
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_segment
        ELSE acc.parent_crm_account_sales_segment
    END                                     AS upa_ad_segment,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_geo
        ELSE acc.parent_crm_account_geo
    END                                     AS upa_ad_geo,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_region 
        ELSE acc.parent_crm_account_region
    END                                     AS upa_ad_region,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_area
        ELSE acc.parent_crm_account_area
    END                                     AS upa_ad_area,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_country 
        ELSE acc.crm_account_billing_country
    END                                     AS upa_ad_country,

    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_state 
        ELSE acc.parent_crm_account_upa_state
    END                                     AS upa_ad_state,

    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_zip_code 
        ELSE acc.parent_crm_account_upa_postal_code
    END                                     AS upa_ad_zip_code,

    -- Account User Owner fields
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_segment
        ELSE acc.upa_user_segment
    END                                     AS upa_user_segment,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_geo
        ELSE acc.upa_user_geo
    END                                     AS upa_user_geo,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_region 
        ELSE acc.upa_user_region
    END                                     AS upa_user_region,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_area
        ELSE acc.upa_user_area
    END                                     AS upa_user_area,
    
    
    acc.lam_dev_count_bin_rank,
    acc.lam_dev_count_bin_name,

    -- Public Sector
    CASE
        WHEN MAX(acc.is_public_sector_flag) = 1
            THEN 'Public'
        ELSE 'Private'
    END                             AS sector_type,
    
    -- Customer score used in maps for account visualization
    MAX(acc.customer_score) AS customer_score,
    
    MAX(acc.is_public_sector_flag)      AS is_public_sector_flag,
    
    
    -- SUM(CASE WHEN acc.account_forbes_rank IS NOT NULL THEN 1 ELSE 0 END)   AS count_forbes_accounts,
    -- MIN(account_forbes_rank)      AS forbes_rank,
    MAX(acc.potential_users)          AS potential_users,
    MAX(acc.licenses)                 AS licenses,
    MAX(acc.linkedin_developer)       AS linkedin_developer,
    MAX(acc.zi_developers)            AS zi_developers,
    MAX(acc.zi_revenue)               AS zi_revenue,
    MAX(acc.employees)                AS employees,
    MAX(acc.upa_lam_dev_count)        AS upa_lam_dev_count,

    SUM(acc.has_technical_account_manager_flag) AS count_technical_account_managers,

    -- atr for current fy
    SUM(acc.fy_atr)  AS fy_atr,
    -- next fiscal year atr base reported at fy
    SUM(acc.nfy_atr) AS nfy_atr,

    -- arr by fy
    SUM(acc.arr) AS arr,

    CASE 
        WHEN  MAX(acc.is_customer_flag) = 1
        THEN 0
    ELSE 1
    END                                   AS is_prospect_flag,
    MAX(acc.is_customer_flag)             AS is_customer_flag,
    MAX(acc.is_over_5k_customer_flag)     AS is_over_5k_customer_flag,
    MAX(acc.is_over_10k_customer_flag)    AS is_over_10k_customer_flag,
    MAX(acc.is_over_50k_customer_flag)    AS is_over_50k_customer_flag,
    MAX(acc.is_over_500k_customer_flag)   AS is_over_500k_customer_flag,
    SUM(acc.is_over_5k_customer_flag)     AS count_over_5k_customers,
    SUM(acc.is_over_10k_customer_flag)    AS count_over_10k_customers,
    SUM(acc.is_over_50k_customer_flag)    AS count_over_50k_customers,
    SUM(acc.is_over_500k_customer_flag)   AS count_over_500k_customers,
    SUM(acc.is_prospect_flag)             AS count_of_prospects,
    SUM(acc.is_customer_flag)             AS count_of_customers,

    SUM(acc.arr_channel)                  AS arr_channel,
    SUM(acc.arr_direct)                   AS arr_direct,

    SUM(acc.product_starter_arr)          AS product_starter_arr,
    SUM(acc.product_premium_arr)          AS product_premium_arr,
    SUM(acc.product_ultimate_arr)         AS product_ultimate_arr,
    SUM(acc.delivery_self_managed_arr)    AS delivery_self_managed_arr,
    SUM(acc.delivery_saas_arr)            AS delivery_saas_arr,


    -- rolling last 12 months bokked net arr
    SUM(last_12m_booked_net_arr)                      AS last_12m_booked_net_arr,
    SUM(acc.last_12m_booked_non_web_net_arr)              AS last_12m_booked_non_web_net_arr,
    SUM(acc.last_12m_booked_web_direct_sourced_net_arr)   AS last_12m_booked_web_direct_sourced_net_arr,
    SUM(acc.last_12m_booked_channel_sourced_net_arr)      AS last_12m_booked_channel_sourced_net_arr,
    SUM(acc.last_12m_booked_sdr_sourced_net_arr)          AS last_12m_booked_sdr_sourced_net_arr,
    SUM(acc.last_12m_booked_ae_sourced_net_arr)           AS last_12m_booked_ae_sourced_net_arr,
    SUM(acc.last_12m_booked_churn_contraction_net_arr)    AS last_12m_booked_churn_contraction_net_arr,
    SUM(acc.last_12m_booked_fo_net_arr)                   AS last_12m_booked_fo_net_arr,
    SUM(acc.last_12m_booked_new_connected_net_arr)        AS last_12m_booked_new_connected_net_arr,
    SUM(acc.last_12m_booked_growth_net_arr)               AS last_12m_booked_growth_net_arr,
    SUM(acc.last_12m_booked_deal_count)                   AS last_12m_booked_deal_count,
    SUM(acc.last_12m_booked_direct_net_arr)               AS last_12m_booked_direct_net_arr,
    SUM(acc.last_12m_booked_channel_net_arr)              AS last_12m_booked_channel_net_arr,
    SUM(acc.last_12m_atr)                                 AS last_12m_atr,

    -- fy booked net arr
    SUM(acc.fy_booked_net_arr)                   AS fy_booked_net_arr,
    SUM(acc.fy_booked_web_direct_sourced_net_arr) AS fy_booked_web_direct_sourced_net_arr,
    SUM(acc.fy_booked_channel_sourced_net_arr)   AS fy_booked_channel_sourced_net_arr,
    SUM(acc.fy_booked_sdr_sourced_net_arr)       AS fy_booked_sdr_sourced_net_arr,
    SUM(acc.fy_booked_ae_sourced_net_arr)        AS fy_booked_ae_sourced_net_arr,
    SUM(acc.fy_booked_churn_contraction_net_arr) AS fy_booked_churn_contraction_net_arr,
    SUM(acc.fy_booked_fo_net_arr)                AS fy_booked_fo_net_arr,
    SUM(acc.fy_booked_new_connected_net_arr)     AS fy_booked_new_connected_net_arr,
    SUM(acc.fy_booked_growth_net_arr)            AS fy_booked_growth_net_arr,
    SUM(acc.fy_booked_deal_count)                AS fy_booked_deal_count,
    SUM(acc.fy_booked_direct_net_arr)            AS fy_booked_direct_net_arr,
    SUM(acc.fy_booked_channel_net_arr)           AS fy_booked_channel_net_arr,
    SUM(acc.fy_booked_direct_deal_count)         AS fy_booked_direct_deal_count,
    SUM(acc.fy_booked_channel_deal_count)        AS fy_booked_channel_deal_count,

    -- open pipe forward looking
    SUM(acc.total_open_pipe)              AS total_open_pipe,
    SUM(acc.total_count_open_deals_pipe)  AS total_count_open_deals_pipe,
    SUM(acc.customer_has_open_pipe_flag)  AS customer_has_open_pipe_flag,
    SUM(acc.prospect_has_open_pipe_flag)  AS prospect_has_open_pipe_flag,

    -- pipe generation
    SUM(acc.pg_ytd_net_arr) AS pg_ytd_net_arr,
    SUM(acc.pg_ytd_web_direct_sourced_net_arr)    AS pg_ytd_web_direct_sourced_net_arr,
    SUM(acc.pg_ytd_channel_sourced_net_arr)       AS pg_ytd_channel_sourced_net_arr,
    SUM(acc.pg_ytd_sdr_sourced_net_arr)           AS pg_ytd_sdr_sourced_net_arr,
    SUM(acc.pg_ytd_ae_sourced_net_arr)            AS pg_ytd_ae_sourced_net_arr,

    SUM(acc.pg_last_12m_net_arr) AS pg_last_12m_net_arr,
    SUM(acc.pg_last_12m_web_direct_sourced_net_arr)   AS pg_last_12m_web_direct_sourced_net_arr,
    SUM(acc.pg_last_12m_channel_sourced_net_arr)      AS pg_last_12m_channel_sourced_net_arr,
    SUM(acc.pg_last_12m_sdr_sourced_net_arr)          AS pg_last_12m_sdr_sourced_net_arr,
    SUM(acc.pg_last_12m_ae_sourced_net_arr)           AS pg_last_12m_ae_sourced_net_arr,
    
    SUM(acc.last_12m_sao_deal_count)                    AS last_12m_sao_deal_count,
    SUM(acc.last_12m_sao_net_arr)                       AS last_12m_sao_net_arr,
    SUM(acc.last_12m_sao_booked_net_arr)                AS last_12m_sao_booked_net_arr, 
    SUM(acc.fy_sao_deal_count)                          AS fy_sao_deal_count,
    SUM(acc.fy_sao_net_arr)                             AS fy_sao_net_arr,
    SUM(acc.fy_sao_booked_net_arr)                      AS fy_sao_booked_net_arr
    
  FROM consolidated_accounts acc
    LEFT JOIN final_virtual_upa new_upa
        ON new_upa.account_id = acc.account_id
        AND new_upa.report_fiscal_year = acc.report_fiscal_year
  GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21

)
, final AS (

  SELECT
      
    acc.*, 
    
    CASE 
      WHEN upa.arr > 0 AND upa.arr < 5000
        THEN '1. 0-5k ARR'
      WHEN upa.arr >= 5000 AND upa.arr < 10000
        THEN '2. 0-10k ARR'
      WHEN upa.arr >= 10000 AND upa.arr < 50000
        THEN '3. 10k-50k ARR'
      WHEN upa.arr >= 50000 AND upa.arr < 100000
        THEN '4. 50K-100k ARR'
      WHEN upa.arr >= 100000 AND upa.arr < 500000
        THEN '5. 100k-500k ARR'
      WHEN upa.arr >= 500000 AND upa.arr < 1000000
        THEN '6. 500k-1M ARR'     
      WHEN upa.arr >= 500000 AND upa.arr < 1000000
        THEN '7. >=1M ARR' 
      ELSE 'n/a'
    END    AS account_family_arr_bin_name,
    
    COALESCE(upa.potential_users,0)                 AS upa_potential_users,
    COALESCE(upa.licenses,0)                        AS upa_licenses,
    COALESCE(upa.linkedin_developer,0)              AS upa_linkedin_developer,
    COALESCE(upa.zi_developers,0)                   AS upa_zi_developers,
    COALESCE(upa.zi_revenue,0)                      AS upa_zi_revenue,
    COALESCE(upa.employees,0)                       AS upa_employees,
    COALESCE(upa.count_of_customers,0)              AS upa_count_of_customers,

    CASE
        WHEN upa.upa_id = acc.account_id
            THEN 1
        ELSE 0
    END                                     AS is_upa_flag,

    upa.is_customer_flag                    AS hierarchy_is_customer_flag,
    
    COALESCE(virtual.virtual_upa_id,acc.upa_id)                             AS virtual_upa_id,
    COALESCE(virtual.virtual_upa_name,acc.upa_name)                         AS virtual_upa_name,
    COALESCE(virtual.virtual_upa_segment,acc.parent_crm_account_sales_segment)                AS virtual_upa_ad_segment,
    COALESCE(virtual.virtual_upa_geo,acc.upa_user_geo)                      AS virtual_upa_geo,
    COALESCE(virtual.virtual_upa_region,acc.upa_user_region)                AS virtual_upa_region,
    COALESCE(virtual.virtual_upa_area,acc.upa_user_area)                    AS virtual_upa_area,
    COALESCE(virtual.virtual_upa_country,acc.crm_account_billing_country)   AS virtual_upa_ad_country,
    COALESCE(virtual.virtual_upa_state,acc.parent_crm_account_upa_state)    AS virtual_upa_ad_state,
    COALESCE(virtual.virtual_upa_zip_code,acc.parent_crm_account_upa_postal_code) AS virtual_upa_ad_zip_code,
    COALESCE(virtual.virtual_upa_industry,acc.upa_industry)                 AS virtual_upa_industry,
    COALESCE(virtual.virtual_upa_owner_name,acc.upa_owner_name)             AS virtual_upa_owner_name,
    COALESCE(virtual.virtual_upa_owner_title_category,acc.upa_owner_title_category)   AS virtual_upa_owner_title_category,
    COALESCE(virtual.virtual_upa_owner_id,acc.upa_owner_id)                 AS virtual_upa_owner_id, 
    CASE 
        WHEN virtual.upa_id IS NOT NULL 
            THEN 'Virtual'
        ELSE 'Real'
    END                                                                     AS virtual_upa_type

  FROM consolidated_accounts acc
    LEFT JOIN consolidated_upa upa
        ON upa.upa_id = acc.upa_id
        AND upa.report_fiscal_year = acc.report_fiscal_year
    LEFT JOIN final_virtual_upa virtual
        ON virtual.account_id = acc.account_id
        AND virtual.report_fiscal_year = acc.report_fiscal_year

)

SELECT *
FROM final4f:Tf47c,

-- TODO: 20221208 TAM fields need to refactored as they are not called TAM anymore

WITH date_details AS (

    SELECT *
    --FROM  prod.workspace_sales.date_details
    FROM "PROD".workspace_sales.date_details

 ), sfdc_opportunity_xf AS (

    SELECT *
    --FROM prod.restricted_safe_workspace_sales.sfdc_opportunity_xf
    FROM "PROD".restricted_safe_workspace_sales.sfdc_opportunity_xf
    WHERE is_deleted = 0
      AND is_edu_oss = 0
      AND is_jihu_account = 0

 ), sfdc_opportunity_snapshot_xf AS (

    SELECT h.*
    --FROM prod.restricted_safe_workspace_sales.sfdc_opportunity_snapshot_history_xf AS h
    FROM "PROD".restricted_safe_workspace_sales.sfdc_opportunity_snapshot_history_xf h
    INNER JOIN date_details snapshot_date
      ON snapshot_date.date_actual = h.snapshot_date
    WHERE h.is_deleted = 0
      AND h.is_edu_oss = 0
      AND h.is_jihu_account = 0
      -- same day of FY across years
      AND snapshot_date.day_of_fiscal_year_normalised = (SELECT DISTINCT day_of_fiscal_year_normalised
                                                          FROM date_details
                                                          WHERE date_actual = DATEADD(day, -2, CURRENT_DATE))
 ), mart_available_to_renew AS (

    SELECT renew.*,
        renew_date.first_day_of_fiscal_quarter  AS renew_fiscal_quarter_date,
        renew_date.fiscal_quarter_name_fy       AS renew_fiscal_quarter_name,
        renew_date.fiscal_quarter               AS renew_fiscal_quarter_number
    FROM "PROD".restricted_safe_common_mart_finance.mart_available_to_renew renew
    --FROM prod.restricted_safe_common_mart_finance.mart_available_to_renew
    LEFT JOIN date_details renew_date
        ON renew_date.date_actual = renew.renewal_month
    
 ), dim_subscription AS (

    SELECT
      dim_subscription_id,
      CASE
          WHEN dim_billing_account_id_invoice_owner_account != dim_billing_account_id
              THEN 1
          ELSE 0
      END AS is_channel_arr_flag
    --FROM prod.common.dim_subscription
    FROM "PROD".common.dim_subscription

 ), mart_arr AS (

    SELECT *
    --FROM prod.restricted_safe_common_mart_sales.mart_arr
    FROM "PROD".restricted_safe_common_mart_sales.mart_arr   

  ), raw_account AS (
  
    SELECT *
    FROM "RAW".salesforce_stitch.account
    --FROM raw.salesforce_stitch.account 

  -- missing fields in mart crm account so adding dim_crm_account cte here on top of the mart below
  ), dim_crm_account AS (

    SELECT *
    --FROM prod.restricted_safe_common.dim_crm_account
    FROM "PROD".restricted_safe_common.dim_crm_account

    -- missing fields in dim_crm_account so adding raw account here
  -- has_tam__c
  -- PUBLIC_SECTOR_ACCOUNT__C,
  -- PUBSEC_TYPE__C,
  -- POTENTIAL_ARR_LAM__C
  -- BILLINGSTATE
  -- customer_score__c
  ), mart_crm_account AS (

    SELECT acc.*,
        raw.has_tam__c                              AS has_tam_flag,
        raw.public_sector_account__c                AS public_sector_account_flag,
        raw.pubsec_type__c                          AS pubsec_type,
        raw.lam_tier__c                             AS potential_lam_arr,
        raw.billingstatecode                        AS account_billing_state,
        raw.customer_score__c                       AS customer_score,
        raw.account_demographics_territory__c       AS account_demographics_territory,
        raw.account_demographics_upa_state__c       AS account_demographics_upa_state_code,
        raw.account_demographics_upa_state_name__c  AS account_demographics_upa_state_name
    --FROM prod.restricted_safe_common_mart_sales.mart_crm_account acc
    FROM "PROD".restricted_safe_common_mart_sales.mart_crm_account acc
    LEFT JOIN raw_account raw
      ON raw.id = acc.dim_crm_account_id
    
  ), sfdc_accounts_xf AS (

    SELECT *
    --FROM prod.restricted_safe_legacy.sfdc_accounts_xf
    FROM "PROD".restricted_safe_legacy.sfdc_accounts_xf

  ), sfdc_users_xf AS (

    SELECT *,
       CASE
            WHEN lower(title) like '%strategic account%'
                OR lower(title) like '%account executive%'
                OR lower(title) like '%country manager%'
                OR lower(title) like '%public sector channel manager%'
                THEN 'Rep'
            WHEN lower(title) like '%area sales manager%'
                THEN 'ASM'
            ELSE 'Other'
      END                                       AS title_category
    --FROM prod.workspace_sales.sfdc_users_xf
    FROM "PROD".workspace_sales.sfdc_users_xf

  ), report_dates AS (

    SELECT DISTINCT fiscal_year         AS report_fiscal_year,
                    first_day_of_month  AS report_month_date
    FROM prod.workspace_sales.date_details
    CROSS JOIN (SELECT current_date AS today_date)
    WHERE fiscal_year > 2021
        AND month_actual = MONTH(today_date)
        AND date_actual < today_date

  ), account_year_key AS (

    SELECT DISTINCT
      a.dim_crm_account_id AS account_id,
      d.report_fiscal_year,
      d.report_month_date
  FROM dim_crm_account AS a
  CROSS JOIN report_dates AS d

  ), nfy_atr_base AS (

    SELECT 
        dim_crm_account_id      AS account_id,
        report_dates.report_fiscal_year,
        SUM(arr)                AS nfy_atr,
         SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 1
            THEN arr
          ELSE 0
        END)                    AS nfy_q1_atr,
        SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 2
            THEN arr
          ELSE 0
        END)                    AS nfy_q2_atr,
        SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 3
            THEN arr
          ELSE 0
        END)                    AS nfy_q3_atr,
        SUM(CASE
          WHEN atr.renew_fiscal_quarter_number = 4
            THEN arr
          ELSE 0
        END)                    AS nfy_q4_atr
    FROM mart_available_to_renew atr
    CROSS JOIN report_dates
    WHERE is_available_to_renew = 1
    AND atr.fiscal_year = report_dates.report_fiscal_year + 1
    GROUP BY 1,2
    
), last_12m_atr_base AS (

    SELECT dim_crm_account_id   AS account_id,
        report_dates.report_fiscal_year,
        COUNT(DISTINCT atr.renewal_month) AS count_unique_months,
    
        SUM(arr)                AS last_12m_atr
    FROM mart_available_to_renew atr
    CROSS JOIN report_dates
    WHERE is_available_to_renew = 1
    --AND renewal_type = 'Non-MYB'
    AND atr.renewal_month < report_dates.report_month_date
    AND atr.renewal_month >= DATEADD(month,-12,report_dates.report_month_date)
    GROUP BY 1,2
    
), fy_atr_base AS (

    SELECT dim_crm_account_id   AS account_id,
        report_dates.report_fiscal_year,
        COUNT(DISTINCT atr.renewal_month) AS count_unique_months,
        SUM(arr)                AS fy_atr
    FROM mart_available_to_renew atr
    CROSS JOIN report_dates
    WHERE is_available_to_renew = 1
    --AND renewal_type = 'Non-MYB'
    AND atr.fiscal_year = report_dates.report_fiscal_year
    GROUP BY 1,2


-- Rolling 1 year Net ARR
), net_arr_last_12m AS (
  -- net_arr_ttm

    SELECT
      o.account_id,
      d.report_fiscal_year          AS report_fiscal_year,
      SUM(o.net_arr)                AS last_12m_booked_net_arr,   -- ttm_net_arr
      SUM(CASE
            WHEN  o.sales_qualified_source != 'Web Direct Generated'
              THEN o.net_arr
            ELSE 0
          END)          AS last_12m_booked_non_web_net_arr,  -- ttm_non_web_net_arr
      SUM(CASE
            WHEN o.sales_qualified_source = 'Web Direct Generated'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_web_direct_sourced_net_arr,  --ttm_web_direct_sourced_net_arr
      SUM(CASE
            WHEN (o.sales_qualified_source = 'Partner Generated' OR o.sales_qualified_source = 'Partner Generated')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_channel_sourced_net_arr,  -- ttm_web_direct_sourced_net_arr
      SUM(CASE
            WHEN o.sales_qualified_source = 'SDR Generated'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_sdr_sourced_net_arr,  -- ttm_sdr_sourced_net_arr
      SUM(CASE
            WHEN o.sales_qualified_source = 'AE Generated'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_ae_sourced_net_arr,  -- ttm_ae_sourced_net_arr
      SUM(CASE
            WHEN o.is_eligible_churn_contraction_flag = 1
               THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_churn_contraction_net_arr,  -- ttm_churn_contraction_net_arr

       -- FO year
        SUM(CASE
            WHEN o.order_type_stamped = '1. New - First Order'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_fo_net_arr,  -- ttm_fo_net_arr

        -- New Connected year
        SUM(CASE
            WHEN o.order_type_stamped = '2. New - Connected'
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_new_connected_net_arr, -- ttm_new_connected_net_arr

        -- Growth year
        SUM(CASE
            WHEN o.order_type_stamped NOT IN ('2. New - Connected','1. New - First Order')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_growth_net_arr,   --ttm_growth_net_arr

        -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_direct_net_arr,   --ttm_direct_net_arr

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
            THEN o.net_arr
            ELSE 0 END) AS last_12m_booked_channel_net_arr,   --ttm_channel_net_arr

        SUM (CASE
            WHEN o.is_won = 1
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_deal_count,  --ttm_deal_count

         SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_count,  -- ttm_trx_count

          SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
                AND ((o.is_renewal = 1 AND o.arr_basis > 5000)
                        OR o.net_arr > 5000)
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_over_5k_count,   -- ttm_trx_over_5k_count

          SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
                AND ((o.is_renewal = 1 AND o.arr_basis > 10000)
                        OR o.net_arr > 10000)
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_over_10k_count,  -- ttm_trx_over_10k_count

          SUM (CASE
            WHEN (o.is_won = 1
                  OR (o.is_renewal = 1 AND o.is_lost = 1))
                AND ((o.is_renewal = 1 AND o.arr_basis > 50000)
                        OR o.net_arr > 50000)
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_trx_over_50k_count,  -- ttm_trx_over_50k_count

          SUM (CASE
            WHEN o.is_renewal = 1
            THEN o.calculated_deal_count
            ELSE 0 END )   AS last_12m_booked_renewal_deal_count,   -- ttm_renewal_deal_count

        SUM(CASE
            WHEN o.is_eligible_churn_contraction_flag = 1
                AND o.opportunity_category IN ('Standard','Internal Correction','Ramp Deal','Contract Reset','Contract Reset/Ramp Deal')
            THEN o.calculated_deal_count
            ELSE 0 END) AS last_12m_booked_churn_contraction_deal_count,  -- ttm_churn_contraction_deal_count

          -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
                AND o.is_won = 1
            THEN o.calculated_deal_count
            ELSE 0 END) AS last_12m_booked_direct_deal_count,  -- ttm_direct_deal_count

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
                AND o.is_won = 1
            THEN o.calculated_deal_count
            ELSE 0 END) AS last_12m_booked_channel_deal_count  -- ttm_channel_deal_count

    FROM sfdc_opportunity_xf AS o
    CROSS JOIN report_dates AS d
    WHERE o.close_date BETWEEN DATEADD(month, -12,DATE_TRUNC('month',d.report_month_date)) and DATE_TRUNC('month',d.report_month_date)
        AND o.booked_net_arr <> 0
    GROUP BY 1, 2
    
  -- total booked net arr in fy
  ), fy_net_arr AS (

    SELECT
      o.account_id,
      o.close_fiscal_year   AS report_fiscal_year,
      SUM(o.booked_net_arr) AS fy_booked_net_arr,
      SUM(CASE
            WHEN  o.sales_qualified_source != 'Web Direct Generated'
              THEN o.booked_net_arr
            ELSE 0
          END)          AS fy_booked_non_web_booked_net_arr,
      SUM(CASE
            WHEN o.sales_qualified_source = 'Web Direct Generated'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_web_direct_sourced_net_arr,
      SUM(CASE
            WHEN (o.sales_qualified_source = 'Partner Generated' OR o.sales_qualified_source = 'Partner Generated')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_channel_sourced_net_arr,
      SUM(CASE
            WHEN o.sales_qualified_source = 'SDR Generated'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_sdr_sourced_net_arr,
      SUM(CASE
            WHEN o.sales_qualified_source = 'AE Generated'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_ae_sourced_net_arr,
      SUM(CASE
            WHEN o.is_eligible_churn_contraction_flag = 1
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_churn_contraction_net_arr,

        -- First Order year
        SUM(CASE
            WHEN o.order_type_stamped = '1. New - First Order'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_fo_net_arr,

        -- New Connected year
        SUM(CASE
            WHEN o.order_type_stamped = '2. New - Connected'
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_new_connected_net_arr,

        -- Growth year
        SUM(CASE
            WHEN o.order_type_stamped NOT IN ('2. New - Connected','1. New - First Order')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_growth_net_arr,

        SUM(o.calculated_deal_count)   AS fy_booked_deal_count,

        -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_direct_net_arr,

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
            THEN o.booked_net_arr
            ELSE 0 END) AS fy_booked_channel_net_arr,

         -- deal path direct year
        SUM(CASE
            WHEN (o.deal_path != 'Channel' AND o.deal_path != 'Partner')
            THEN o.calculated_deal_count
            ELSE 0 END) AS fy_booked_direct_deal_count,

        -- deal path channel year
        SUM(CASE
            WHEN (o.deal_path = 'Channel' OR o.deal_path = 'Partner')
            THEN o.calculated_deal_count
            ELSE 0 END) AS fy_booked_channel_deal_count

    FROM sfdc_opportunity_xf AS o
    WHERE o.booked_net_arr <> 0
    GROUP BY 1,2

  -- Total open pipeline at the same point in previous fiscal years (total open pipe)
  ), op_forward_one_year AS (

    SELECT
      h.account_id,
      h.snapshot_fiscal_year        AS report_fiscal_year,
      -- net arr pipeline
      SUM(h.net_arr)                AS total_open_pipe,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year + 1
                  THEN h.net_arr
              ELSE 0
          END)                      AS nfy_open_pipeline,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year
                  THEN h.net_arr
              ELSE 0
          END)                       AS fy_open_pipeline,
      
      -- deal count pipeline
      SUM(h.calculated_deal_count)   AS total_count_open_deals,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year + 1
                  THEN h.net_arr
              ELSE 0
          END)                      AS nfy_count_open_deals,
      SUM(CASE 
              WHEN h.close_fiscal_year = h.snapshot_fiscal_year
                  THEN h.net_arr
              ELSE 0
          END)                       AS fy_count_open_deals
      
    FROM sfdc_opportunity_snapshot_xf AS h
    WHERE h.close_date > h.snapshot_date
      AND h.forecast_category_name NOT IN  ('Omitted','Closed')
      AND h.order_type_stamped != '7. PS / Other'
      AND h.net_arr != 0
      AND h.is_eligible_open_pipeline_flag = 1
      GROUP BY 1,2

  -- Last 12 months pipe gen at same point of time in the year
  ), pg_last_12_months AS (

    SELECT
      h.account_id,
      h.snapshot_fiscal_year AS report_fiscal_year,
      SUM(h.net_arr)                 AS pg_last_12m_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'Web Direct Generated'
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_web_direct_sourced_net_arr,
      SUM(CASE
            WHEN (h.sales_qualified_source = 'Partner Generated' OR h.sales_qualified_source = 'Partner Generated')
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_channel_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'SDR Generated'
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_sdr_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'AE Generated'
            THEN h.net_arr
            ELSE 0 END)              AS pg_last_12m_ae_sourced_net_arr,

      SUM(CASE
            WHEN h.sales_qualified_source = 'Web Direct Generated'
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_web_direct_sourced_deal_count,
      SUM(CASE
            WHEN (h.sales_qualified_source = 'Partner Generated' OR h.sales_qualified_source = 'Partner Generated')
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_channel_sourced_deal_count,
      SUM(CASE
            WHEN h.sales_qualified_source = 'SDR Generated'
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_sdr_sourced_deal_count,
      SUM(CASE
            WHEN h.sales_qualified_source = 'AE Generated'
            THEN h.calculated_deal_count
            ELSE 0 END)              AS pg_last_12m_ae_sourced_deal_count

    FROM sfdc_opportunity_snapshot_xf AS h

    -- pipeline created within the last 12 months
    WHERE
        h.pipeline_created_date > dateadd(month,-12,h.snapshot_date)
      AND h.pipeline_created_date <= h.snapshot_date
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_created_pipeline_flag = 1
    GROUP BY 1,2

  -- Pipe generation at the same point in time in the fiscal year
  ), pg_ytd AS (

    SELECT
      h.account_id,
      h.net_arr_created_fiscal_year  AS report_fiscal_year,
      SUM(h.net_arr)                 AS pg_ytd_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'Web Direct Generated'
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_web_direct_sourced_net_arr,
      SUM(CASE
            WHEN (h.sales_qualified_source = 'Partner Generated' OR h.sales_qualified_source = 'Partner Generated')
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_channel_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'SDR Generated'
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_sdr_sourced_net_arr,
      SUM(CASE
            WHEN h.sales_qualified_source = 'AE Generated'
            THEN h.net_arr
            ELSE 0 END) AS pg_ytd_ae_sourced_net_arr
    FROM sfdc_opportunity_snapshot_xf AS h
      -- pipeline created within the fiscal year
    WHERE h.snapshot_fiscal_year = h.net_arr_created_fiscal_year
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_created_pipeline_flag = 1
      AND h.net_arr > 0
      GROUP BY 1,2

  -- ARR at the same point in time in Fiscal Year
  ), arr_at_same_month AS (

    SELECT
      mrr.dim_crm_account_id AS account_id,
      mrr_date.fiscal_year   AS report_fiscal_year,
  --    ultimate_parent_account_id,
      SUM(mrr.mrr)      AS mrr,
      SUM(mrr.arr)      AS arr,
      SUM(CASE
              WHEN sub.is_channel_arr_flag = 1
                  THEN mrr.arr
              ELSE 0
          END)          AS reseller_arr,
      SUM(CASE
              WHEN  sub.is_channel_arr_flag = 0
                  THEN mrr.arr
              ELSE 0
          END)          AS direct_arr,


      SUM(CASE
              WHEN  (mrr.product_tier_name LIKE '%Starter%'
                      OR mrr.product_tier_name LIKE '%Bronze%')
                  THEN mrr.arr
              ELSE 0
          END)          AS product_starter_arr,


      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%Premium%'
                  THEN mrr.arr
              ELSE 0
          END)          AS product_premium_arr,
      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%Ultimate%'
                  THEN mrr.arr
              ELSE 0
          END)          AS product_ultimate_arr,

      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%Self-Managed%'
                  THEN mrr.arr
              ELSE 0
          END)          AS delivery_self_managed_arr,
      SUM(CASE
              WHEN  mrr.product_tier_name LIKE '%SaaS%'
                  THEN mrr.arr
              ELSE 0
          END)          AS delivery_saas_arr

    FROM mart_arr AS mrr
    INNER JOIN date_details AS mrr_date
      ON mrr.arr_month = mrr_date.date_actual
    INNER JOIN dim_subscription AS sub
      ON sub.dim_subscription_id = mrr.dim_subscription_id
    WHERE mrr_date.month_actual =  (SELECT DISTINCT month_actual
                                      FROM date_details
                                      WHERE date_actual = DATE_TRUNC('month', DATEADD(month, -1, CURRENT_DATE)))
    GROUP BY 1,2

), sao_last_12_month AS (
   
  SELECT 
        h.sales_accepted_fiscal_year   AS report_fiscal_year,
        h.account_id,
        SUM(h.calculated_deal_count)    AS last_12m_sao_deal_count,
        SUM(h.net_arr)                  AS last_12m_sao_net_arr,
        SUM(h.booked_net_arr)           AS last_12m_sao_booked_net_arr       
        
  FROM sfdc_opportunity_snapshot_xf AS h
    WHERE
        h.sales_accepted_date > dateadd(month,-12,h.snapshot_date)
      AND h.sales_accepted_date <= h.snapshot_date
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_sao_flag = 1
      AND h.is_renewal = 0
    GROUP BY 1,2
    
), sao_fy AS (      

  SELECT 
        h.sales_accepted_fiscal_year   AS report_fiscal_year,
        h.account_id,
        SUM(h.calculated_deal_count)    AS fy_sao_deal_count,
        SUM(h.net_arr)                  AS fy_sao_net_arr,
        SUM(h.booked_net_arr)           AS fy_sao_booked_net_arr       
        
  FROM sfdc_opportunity_snapshot_xf AS h
    WHERE
       h.snapshot_fiscal_year = h.sales_accepted_fiscal_year
      AND h.sales_accepted_date <= h.snapshot_date
      AND h.order_type_stamped != '7. PS / Other'
      AND h.is_eligible_sao_flag = 1
      AND h.is_renewal = 0
    GROUP BY 1,2
    
), consolidated_accounts AS (

  SELECT
    ak.report_fiscal_year,
    a.account_id                      AS account_id,
    a.account_name                    AS account_name,
    a.ultimate_parent_account_id      AS upa_id,
    a.ultimate_parent_account_name    AS upa_name,
    a.is_key_account,
    a.abm_tier,
    a.ultimate_parent_account_id,
    u.name                              AS account_owner_name,
    a.owner_id                          AS account_owner_id,
    trim(u.employee_number)             AS account_owner_employee_number,
    upa_owner.name                      AS upa_owner_name,
    upa_owner.user_id                   AS upa_owner_id,
    upa_owner.title_category            AS upa_owner_title_category,
    trim(upa_owner.employee_number)     AS upa_owner_employee_number,
    a.billing_country                   AS account_country,
    a.billing_postal_code               AS account_zip_code,
    mart_crm_account.account_billing_state AS account_state,

    
    -- Account demographics fields
    upa_account.parent_crm_account_sales_segment                    AS parent_crm_account_sales_segment,
    upa_account.parent_crm_account_geo                              AS parent_crm_account_geo,
    upa_account.parent_crm_account_region                           AS parent_crm_account_region,
    upa_account.parent_crm_account_area                             AS parent_crm_account_area,
    upa_account.crm_account_billing_country                         AS crm_account_billing_country,  
    upa_account.parent_crm_account_upa_state                        AS parent_crm_account_upa_state,
    upa_account.parent_crm_account_upa_city                         AS parent_crm_account_upa_city,
    upa_account.parent_crm_account_upa_postal_code                  AS parent_crm_account_upa_postal_code,
    upa_account.parent_crm_account_territory                        AS parent_crm_account_territory,

    
    -- substitute this by key segment
    u.user_geo                                    AS account_user_geo,
    u.user_region                                 AS account_user_region,
    u.user_segment                                AS account_user_segment,
    u.user_area                                   AS account_user_area,
    u.role_name                                   AS account_owner_role,
    u.title_category                              AS account_owner_title_category,
    a.industry                                    AS account_industry,
    upa_owner.user_geo                            AS upa_user_geo,
    upa_owner.user_region                         AS upa_user_region,
    upa_owner.user_segment                        AS upa_user_segment,
    upa_owner.user_area                           AS upa_user_area,
    upa_owner.role_name                           AS upa_user_role,
    upa.industry                                  AS upa_industry,
    
    -- NF: These fields are only useful to calculate LAM Dev Count which is already calculated
    coalesce(mart_crm_account.potential_users, 0)                               AS potential_users,
    coalesce(mart_crm_account.number_of_licenses_this_account, 0)               AS licenses,
    coalesce(mart_crm_account.decision_maker_count_linkedin, 0)                 AS linkedin_developer,
    coalesce(mart_crm_account.crm_account_zoom_info_number_of_developers, 0)    AS zi_developers,
    coalesce(mart_crm_account.zoom_info_company_revenue, 0)                     AS zi_revenue,


    -- LAM Dev count calculated at the UPA level
    upa_account.parent_crm_account_lam_dev_count                       AS upa_lam_dev_count,
    mart_crm_account.public_sector_account_flag,
    mart_crm_account.pubsec_type,
    mart_crm_account.potential_lam_arr,
    coalesce(mart_crm_account.crm_account_employee_count, 0)   AS employees,
    
    COALESCE(mart_crm_account.carr_account_family, 0)                       AS account_family_arr,
    LEAST(50000,GREATEST(coalesce(mart_crm_account.number_of_licenses_this_account,0),COALESCE(mart_crm_account.potential_users, mart_crm_account.decision_maker_count_linkedin, mart_crm_account.crm_account_zoom_info_number_of_developers, 0)))           AS calculated_developer_count,

    -- Account score used to balance patches in maps
    mart_crm_account.customer_score,


    -- TODO: 20221208 They are not called TAMs anymore, this part needs to be refactored
    a.technical_account_manager_date,
    a.technical_account_manager                                             AS technical_account_manager_name,
    CASE
      WHEN mart_crm_account.has_tam_flag
          THEN 1
      ELSE 0
    END                                           AS has_technical_account_manager_flag,

    a.health_score_color                          AS account_health_score_color,
    a.health_number                               AS account_health_number,

    -- atr for current fy
    COALESCE(fy_atr_base.fy_atr,0)           AS fy_atr,
    -- next fiscal year atr base reported at fy
    COALESCE(nfy_atr_base.nfy_atr,0)         AS nfy_atr,
    COALESCE(nfy_atr_base.nfy_q1_atr,0)      AS nfy_q1_atr,
    COALESCE(nfy_atr_base.nfy_q2_atr,0)      AS nfy_q2_atr,
    COALESCE(nfy_atr_base.nfy_q3_atr,0)      AS nfy_q3_atr,
    COALESCE(nfy_atr_base.nfy_q4_atr,0)      AS nfy_q4_atr,
    -- last 12 months ATR
    COALESCE(last_12m_atr_base.last_12m_atr,0)    AS last_12m_atr,

    -- arr by fy
    COALESCE(arr.arr,0)                           AS arr,

    COALESCE(arr.reseller_arr,0)                  AS arr_channel,
    COALESCE(arr.direct_arr,0)                    AS arr_direct,

    COALESCE(arr.product_starter_arr,0)           AS product_starter_arr,
    COALESCE(arr.product_premium_arr,0)           AS product_premium_arr,
    COALESCE(arr.product_ultimate_arr,0)          AS product_ultimate_arr,


    CASE
      WHEN COALESCE(arr.product_ultimate_arr,0) > COALESCE(arr.product_starter_arr,0) + COALESCE(arr.product_premium_arr,0)
          THEN 1
      ELSE 0
    END                                           AS is_ultimate_customer_flag,

    CASE
      WHEN COALESCE(arr.product_ultimate_arr,0) < COALESCE(arr.product_starter_arr,0) + COALESCE(arr.product_premium_arr,0)
          THEN 1
      ELSE 0
    END                                           AS is_premium_customer_flag,

    COALESCE(arr.delivery_self_managed_arr,0)     AS delivery_self_managed_arr,
    COALESCE(arr.delivery_saas_arr,0)             AS delivery_saas_arr,

    -- accounts counts
    CASE
      WHEN COALESCE(arr.arr,0) = 0
      THEN 1
      ELSE 0
    END                                           AS is_prospect_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 0
      THEN 1
      ELSE 0
    END                                           AS is_customer_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 5000
      THEN 1
      ELSE 0
    END                                           AS is_over_5k_customer_flag,
    CASE
      WHEN COALESCE(arr.arr,0) > 10000
      THEN 1
      ELSE 0
    END                                           AS is_over_10k_customer_flag,
    CASE
      WHEN COALESCE(arr.arr,0) > 50000
      THEN 1
      ELSE 0
    END                                           AS is_over_50k_customer_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 100000
      THEN 1
      ELSE 0
    END                                           AS is_over_100k_customer_flag,

    CASE
      WHEN COALESCE(arr.arr,0) > 500000
      THEN 1
      ELSE 0
    END                                           AS is_over_500k_customer_flag,

    -- rolling last 12 months booked net arr
    COALESCE(net_arr_last_12m.last_12m_booked_net_arr,0)                       AS last_12m_booked_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_non_web_net_arr,0)               AS last_12m_booked_non_web_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_web_direct_sourced_net_arr,0)    AS last_12m_booked_web_direct_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_sourced_net_arr,0)       AS last_12m_booked_channel_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_sdr_sourced_net_arr,0)           AS last_12m_booked_sdr_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_ae_sourced_net_arr,0)            AS last_12m_booked_ae_sourced_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_churn_contraction_net_arr,0)     AS last_12m_booked_churn_contraction_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_fo_net_arr,0)                    AS last_12m_booked_fo_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_new_connected_net_arr,0)         AS last_12m_booked_new_connected_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_growth_net_arr,0)                AS last_12m_booked_growth_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_deal_count,0)                    AS last_12m_booked_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_direct_net_arr,0)                AS last_12m_booked_direct_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_net_arr,0)               AS last_12m_booked_channel_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_net_arr,0)  - COALESCE(net_arr_last_12m.last_12m_booked_channel_sourced_net_arr,0)   AS last_12m_booked_channel_co_sell_net_arr,
    COALESCE(net_arr_last_12m.last_12m_booked_direct_deal_count,0)             AS last_12m_booked_direct_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_channel_deal_count,0)            AS last_12m_booked_channel_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_churn_contraction_deal_count,0)  AS last_12m_booked_churn_contraction_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_renewal_deal_count,0)            AS last_12m_booked_renewal_deal_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_count,0)                     AS last_12m_booked_trx_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_over_5k_count,0)             AS last_12m_booked_trx_over_5k_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_over_10k_count,0)            AS last_12m_booked_trx_over_10k_count,
    COALESCE(net_arr_last_12m.last_12m_booked_trx_over_50k_count,0)            AS last_12m_booked_trx_over_50k_count,

    -- fy booked net arr
    COALESCE(net_arr_fiscal.fy_booked_net_arr,0)                     AS fy_booked_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_web_direct_sourced_net_arr,0)  AS fy_booked_web_direct_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_channel_sourced_net_arr,0)     AS fy_booked_channel_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_sdr_sourced_net_arr,0)         AS fy_booked_sdr_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_ae_sourced_net_arr,0)          AS fy_booked_ae_sourced_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_churn_contraction_net_arr,0)   AS fy_booked_churn_contraction_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_fo_net_arr,0)                  AS fy_booked_fo_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_new_connected_net_arr,0)       AS fy_booked_new_connected_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_growth_net_arr,0)              AS fy_booked_growth_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_deal_count,0)                  AS fy_booked_deal_count,
    COALESCE(net_arr_fiscal.fy_booked_direct_net_arr,0)              AS fy_booked_direct_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_channel_net_arr,0)             AS fy_booked_channel_net_arr,
    COALESCE(net_arr_fiscal.fy_booked_direct_deal_count,0)           AS fy_booked_direct_deal_count,
    COALESCE(net_arr_fiscal.fy_booked_channel_deal_count,0)          AS fy_booked_channel_deal_count,

    -- open pipe forward looking
    COALESCE(op.total_open_pipe,0)                  AS total_open_pipe,
    COALESCE(op.total_count_open_deals,0)           AS total_count_open_deals_pipe,
    COALESCE(op.nfy_open_pipeline,0)                AS nfy_open_pipeline,
    COALESCE(op.fy_open_pipeline,0)                 AS fy_open_pipeline,
    COALESCE(op.nfy_count_open_deals,0)             AS nfy_count_open_deals,
    COALESCE(op.fy_count_open_deals,0)              AS fy_count_open_deals,

    CASE
      WHEN COALESCE(arr.arr,0) > 0
          AND COALESCE(op.total_open_pipe,0) > 0
              THEN 1
          ELSE 0
    END                                                       AS customer_has_open_pipe_flag,

    CASE
      WHEN COALESCE(arr.arr,0) = 0
          AND COALESCE(op.total_open_pipe,0) > 0
              THEN 1
          ELSE 0
    END                                                       AS prospect_has_open_pipe_flag,

    -- pipe generation
    COALESCE(pg.pg_ytd_net_arr,0)                             AS pg_ytd_net_arr,
    COALESCE(pg.pg_ytd_web_direct_sourced_net_arr,0)          AS pg_ytd_web_direct_sourced_net_arr,
    COALESCE(pg.pg_ytd_channel_sourced_net_arr,0)             AS pg_ytd_channel_sourced_net_arr,
    COALESCE(pg.pg_ytd_sdr_sourced_net_arr,0)                 AS pg_ytd_sdr_sourced_net_arr,
    COALESCE(pg.pg_ytd_ae_sourced_net_arr,0)                  AS pg_ytd_ae_sourced_net_arr,

    COALESCE(pg_ly.pg_last_12m_net_arr,0)                     AS pg_last_12m_net_arr,
    COALESCE(pg_ly.pg_last_12m_web_direct_sourced_net_arr,0)  AS pg_last_12m_web_direct_sourced_net_arr,
    COALESCE(pg_ly.pg_last_12m_channel_sourced_net_arr,0)     AS pg_last_12m_channel_sourced_net_arr,
    COALESCE(pg_ly.pg_last_12m_sdr_sourced_net_arr,0)         AS pg_last_12m_sdr_sourced_net_arr,
    COALESCE(pg_ly.pg_last_12m_ae_sourced_net_arr,0)          AS pg_last_12m_ae_sourced_net_arr,

    COALESCE(pg_last_12m_web_direct_sourced_deal_count,0)     AS pg_last_12m_web_direct_sourced_deal_count,
    COALESCE(pg_last_12m_channel_sourced_deal_count,0)        AS pg_last_12m_channel_sourced_deal_count,
    COALESCE(pg_last_12m_sdr_sourced_deal_count,0)            AS pg_last_12m_sdr_sourced_deal_count,
    COALESCE(pg_last_12m_ae_sourced_deal_count,0)             AS pg_last_12m_ae_sourced_deal_count,
    
    -- SAO metrics
    COALESCE(sao_last_12_month.last_12m_sao_deal_count,0)       AS last_12m_sao_deal_count,
    COALESCE(sao_last_12_month.last_12m_sao_net_arr,0)          AS last_12m_sao_net_arr,
    COALESCE(sao_last_12_month.last_12m_sao_booked_net_arr,0)   AS last_12m_sao_booked_net_arr, 
    COALESCE(sao_fy.fy_sao_deal_count,0)                        AS fy_sao_deal_count,
    COALESCE(sao_fy.fy_sao_net_arr,0)                           AS fy_sao_net_arr,
    COALESCE(sao_fy.fy_sao_booked_net_arr,0)                    AS fy_sao_booked_net_arr,
    
     -- LAM Dev Count Category
    CASE 
        WHEN upa_account.parent_crm_account_lam_dev_count < 100
            THEN '0. <100'    
        WHEN upa_account.parent_crm_account_lam_dev_count >= 100
            AND upa_account.parent_crm_account_lam_dev_count < 250
            THEN '1. [100-250)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 250
            AND upa_account.parent_crm_account_lam_dev_count < 500
            THEN '2. [250-500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 500
            AND upa_account.parent_crm_account_lam_dev_count < 1500
            THEN '3. [500-1500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 1500
            AND upa_account.parent_crm_account_lam_dev_count < 2500
            THEN '4. [1500-2500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 2500
            AND upa_account.parent_crm_account_lam_dev_count < 3500
            THEN '5. [2500-3500)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 3500
            AND upa_account.parent_crm_account_lam_dev_count < 5000
            THEN '6. [3500-5000)'
        WHEN upa_account.parent_crm_account_lam_dev_count >= 5000
            THEN '7. >5000'
    END AS lam_dev_count_bin_name,
    
    CASE 
        WHEN upa_account.parent_crm_account_lam_dev_count < 100
            THEN 0
        WHEN upa_account.parent_crm_account_lam_dev_count >= 100
            AND upa_account.parent_crm_account_lam_dev_count < 250
            THEN 100
        WHEN upa_account.parent_crm_account_lam_dev_count >= 250
            AND upa_account.parent_crm_account_lam_dev_count < 500
            THEN 250
        WHEN upa_account.parent_crm_account_lam_dev_count >= 500
            AND upa_account.parent_crm_account_lam_dev_count < 1500
            THEN 500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 1500
            AND upa_account.parent_crm_account_lam_dev_count < 2500
            THEN 1500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 2500
            AND upa_account.parent_crm_account_lam_dev_count < 3500
            THEN 2500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 3500
            AND upa_account.parent_crm_account_lam_dev_count < 5000
            THEN 3500
        WHEN upa_account.parent_crm_account_lam_dev_count >= 5000
            THEN 5000
    END AS lam_dev_count_bin_rank,      
    
    -- Public Sector
    CASE
        WHEN mart_crm_account.pubsec_type ='ROW-PubSec'
            THEN 'Public'
        ELSE 'Private'
    END                     AS sector_type,
    CASE
        WHEN mart_crm_account.pubsec_type ='ROW-PubSec'
            THEN 1
        ELSE 0
    END                     AS is_public_sector_flag

  FROM account_year_key AS ak
  INNER JOIN sfdc_accounts_xf AS a
    ON ak.account_id = a.account_id
  LEFT JOIN mart_crm_account AS upa_account
    ON a.ultimate_parent_account_id = upa_account.dim_crm_account_id
  LEFT JOIN sfdc_accounts_xf AS upa
    ON a.ultimate_parent_account_id = upa.account_id
  LEFT JOIN dim_crm_account AS dim_account
    ON ak.account_id = dim_account.dim_crm_account_id
  LEFT JOIN mart_crm_account
    ON ak.account_id = mart_crm_account.dim_crm_account_id
  LEFT JOIN sfdc_users_xf AS u
    ON a.owner_id = u.user_id
  LEFT JOIN sfdc_users_xf AS upa_owner
    ON upa.owner_id = upa_owner.user_id
  LEFT JOIN fy_atr_base
    ON fy_atr_base.account_id = ak.account_id
    AND fy_atr_base.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN last_12m_atr_base AS last_12m_atr_base
    ON last_12m_atr_base.account_id = ak.account_id
    AND last_12m_atr_base.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN nfy_atr_base
    ON nfy_atr_base.account_id = ak.account_id
    AND nfy_atr_base.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN net_arr_last_12m
    ON net_arr_last_12m.account_id = ak.account_id
    AND net_arr_last_12m.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN op_forward_one_year AS op
    ON op.account_id = ak.account_id
    AND op.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN pg_ytd AS pg
    ON pg.account_id = ak.account_id
    AND pg.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN pg_last_12_months AS pg_ly
    ON pg_ly.account_id = ak.account_id
    AND pg_ly.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN arr_at_same_month AS arr
    ON arr.account_id = ak.account_id
    AND arr.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN fy_net_arr AS net_arr_fiscal
    ON net_arr_fiscal.account_id = ak.account_id
    AND net_arr_fiscal.report_fiscal_year = ak.report_fiscal_year
  -- SAOs
  LEFT JOIN sao_last_12_month 
    ON sao_last_12_month.account_id = ak.account_id
    AND sao_last_12_month.report_fiscal_year = ak.report_fiscal_year
  LEFT JOIN sao_fy
    ON sao_fy.account_id = ak.account_id
    AND sao_fy.report_fiscal_year = ak.report_fiscal_year

    -----------------------
-- Adjust for hierarchies split between different geos
), upa_virtual_cte AS (

SELECT 
    report_fiscal_year,
    upa_id,
    upa_name,
    upa_user_geo,
    account_id                                AS virtual_upa_id,
    account_name                              AS virtual_upa_name,
    parent_crm_account_sales_segment          AS virtual_upa_segment,
    parent_crm_account_geo                    AS virtual_upa_geo,
    parent_crm_account_region                 AS virtual_upa_region,
    parent_crm_account_area                   AS virtual_upa_area,
    crm_account_billing_country               AS virtual_upa_country,
    parent_crm_account_upa_postal_code        AS virtual_upa_zip_code,
    account_industry                          AS virtual_upa_industry,
    parent_crm_account_upa_state              AS virtual_upa_state,
    account_owner_name                        AS virtual_upa_owner_name,
    account_owner_title_category              AS virtual_upa_owner_title_category,
    account_owner_id                          AS virtual_upa_owner_id,
    account_id,
    account_name,
    account_owner_name,
    arr AS account_arr,
    1 AS level
FROM consolidated_accounts
WHERE upa_user_geo != account_user_geo
    AND arr > 5000
   -- AND upa_user_geo = 'EMEA'
UNION ALL 
SELECT 
    upa.report_fiscal_year,
    upa.upa_id,
    upa.upa_name,
    upa.upa_user_geo,
    upa.virtual_upa_id,
    upa.virtual_upa_name,
    upa.virtual_upa_segment,
    upa.virtual_upa_geo,
    upa.virtual_upa_region,
    upa.virtual_upa_area,
    upa.virtual_upa_country,
    upa.virtual_upa_zip_code,
    upa.virtual_upa_industry,
    upa.virtual_upa_state,
    upa.virtual_upa_owner_name,
    upa.virtual_upa_owner_title_category,
    upa.virtual_upa_owner_id,
    child.account_id,
    child.account_name,
    child.account_owner_name,
    child.arr AS account_arr,
    level + 1 AS level
FROM consolidated_accounts child
INNER JOIN upa_virtual_cte upa
    ON child.ultimate_parent_account_id = upa.account_id
    AND child.report_fiscal_year = upa.report_fiscal_year

), max_virtual_upa_depth AS (

    SELECT 
        report_fiscal_year,
        upa_id,
        upa_name,
        virtual_upa_segment,
        virtual_upa_geo,
        virtual_upa_id, 
        virtual_upa_name, 
        MAX(level) AS max_depth
    FROM upa_virtual_cte
    GROUP BY 1,2,3,4,5,6,7
    
), selected_virtual_upa_head AS (

SELECT 
    report_fiscal_year,
    upa_id,
    upa_name,
    virtual_upa_segment,
    virtual_upa_geo,
    virtual_upa_id,
    virtual_upa_name,
    max_depth,
    ROW_NUMBER() OVER (PARTITION BY upa_id, report_fiscal_year ORDER BY max_depth DESC) AS level
FROM max_virtual_upa_depth
QUALIFY level = 1

        
-- selects the longest hierarchy from the virtual UPAs options
), selected_hierarchy_virtual_upa AS (

    
    SELECT total.*
    FROM upa_virtual_cte total
    INNER JOIN selected_virtual_upa_head selected
        ON total.virtual_upa_id = selected.virtual_upa_id
        AND total.report_fiscal_year = selected.report_fiscal_year


-- identify unique virtual upas
), select_unique_virtual_upa AS (

SELECT 
    final.report_fiscal_year,
    final.upa_id,
    final.upa_name,
    final.upa_user_geo,
    final.virtual_upa_id,
    final.virtual_upa_name,
    final.virtual_upa_segment,
    final.virtual_upa_geo,
    final.virtual_upa_region,
    final.virtual_upa_area,
    final.virtual_upa_country,
    final.virtual_upa_zip_code,
    final.virtual_upa_industry,
    final.virtual_upa_state,
    final.virtual_upa_owner_name,
    final.virtual_upa_owner_title_category,
    final.virtual_upa_owner_id
FROM selected_hierarchy_virtual_upa final
    

-- identify accounts that belong to the same owner of a virtual upa within the hierarchy
), final_virtual_upa AS (
    
SELECT 
    final.report_fiscal_year,
    final.upa_id,
    final.upa_name,
    final.upa_user_geo,
    extra.virtual_upa_id,
    extra.virtual_upa_name,
    extra.virtual_upa_segment,
    extra.virtual_upa_geo,
    extra.virtual_upa_region,
    extra.virtual_upa_area,
    extra.virtual_upa_country,
    extra.virtual_upa_zip_code,
    extra.virtual_upa_industry,
    extra.virtual_upa_state,
    extra.virtual_upa_owner_name,
    extra.virtual_upa_owner_title_category,
    extra.virtual_upa_owner_id,
    final.account_id,
    final.account_name,
    final.account_owner_name,
    final.arr AS account_arr,
    -1 AS level
FROM consolidated_accounts final
    INNER JOIN select_unique_virtual_upa extra
        ON final.upa_id = extra.upa_id
        AND final.account_owner_name = extra.virtual_upa_owner_name
        AND final.report_fiscal_year = extra.report_fiscal_year
-- Exclude accounts already in the hierarchy table
WHERE final.account_id NOT IN (SELECT DISTINCT account_id FROM selected_hierarchy_virtual_upa)
UNION
  SELECT 
    final.report_fiscal_year,
    final.upa_id,
    final.upa_name,
    final.upa_user_geo,
    final.virtual_upa_id,
    final.virtual_upa_name,
    final.virtual_upa_segment,
    final.virtual_upa_geo,
    final.virtual_upa_region,
    final.virtual_upa_area,
    final.virtual_upa_country,
    final.virtual_upa_zip_code,
    final.virtual_upa_industry,
    final.virtual_upa_state,
    final.virtual_upa_owner_name,
    final.virtual_upa_owner_title_category,
    final.virtual_upa_owner_id,
    final.account_id,
    final.account_name,
    final.account_owner_name,
    final.account_arr,
    final.level
FROM selected_hierarchy_virtual_upa final
------------------------

), consolidated_upa AS (

  SELECT
    acc.report_fiscal_year,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN 'Virtual'
        ELSE 'Real'
    END                                     AS upa_type,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_id 
        ELSE acc.upa_id
    END                                     AS upa_id,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_name
        ELSE acc.upa_name
    END                                     AS upa_name,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_owner_name
        ELSE acc.upa_owner_name
    END                                     AS upa_owner_name,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_owner_id 
        ELSE acc.upa_owner_id
    END                                     AS upa_owner_id,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_owner_title_category
        ELSE acc.upa_owner_title_category
    END                                     AS upa_owner_title_category,
    
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_industry 
        ELSE acc.upa_industry
    END                                     AS upa_industry,
    
    -- Account Demographics
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_segment
        ELSE acc.parent_crm_account_sales_segment
    END                                     AS upa_ad_segment,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_geo
        ELSE acc.parent_crm_account_geo
    END                                     AS upa_ad_geo,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_region 
        ELSE acc.parent_crm_account_region
    END                                     AS upa_ad_region,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_area
        ELSE acc.parent_crm_account_area
    END                                     AS upa_ad_area,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_country 
        ELSE acc.crm_account_billing_country
    END                                     AS upa_ad_country,

    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_state 
        ELSE acc.parent_crm_account_upa_state
    END                                     AS upa_ad_state,

    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_zip_code 
        ELSE acc.parent_crm_account_upa_postal_code
    END                                     AS upa_ad_zip_code,

    -- Account User Owner fields
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_segment
        ELSE acc.upa_user_segment
    END                                     AS upa_user_segment,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_geo
        ELSE acc.upa_user_geo
    END                                     AS upa_user_geo,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_region 
        ELSE acc.upa_user_region
    END                                     AS upa_user_region,
    CASE 
        WHEN new_upa.upa_id IS NOT NULL 
            THEN new_upa.virtual_upa_area
        ELSE acc.upa_user_area
    END                                     AS upa_user_area,
    
    
    acc.lam_dev_count_bin_rank,
    acc.lam_dev_count_bin_name,

    -- Public Sector
    CASE
        WHEN MAX(acc.is_public_sector_flag) = 1
            THEN 'Public'
        ELSE 'Private'
    END                             AS sector_type,
    
    -- Customer score used in maps for account visualization
    MAX(acc.customer_score) AS customer_score,
    
    MAX(acc.is_public_sector_flag)      AS is_public_sector_flag,
    
    
    -- SUM(CASE WHEN acc.account_forbes_rank IS NOT NULL THEN 1 ELSE 0 END)   AS count_forbes_accounts,
    -- MIN(account_forbes_rank)      AS forbes_rank,
    MAX(acc.potential_users)          AS potential_users,
    MAX(acc.licenses)                 AS licenses,
    MAX(acc.linkedin_developer)       AS linkedin_developer,
    MAX(acc.zi_developers)            AS zi_developers,
    MAX(acc.zi_revenue)               AS zi_revenue,
    MAX(acc.employees)                AS employees,
    MAX(acc.upa_lam_dev_count)        AS upa_lam_dev_count,

    SUM(acc.has_technical_account_manager_flag) AS count_technical_account_managers,

    -- atr for current fy
    SUM(acc.fy_atr)  AS fy_atr,
    -- next fiscal year atr base reported at fy
    SUM(acc.nfy_atr) AS nfy_atr,

    -- arr by fy
    SUM(acc.arr) AS arr,

    CASE 
        WHEN  MAX(acc.is_customer_flag) = 1
        THEN 0
    ELSE 1
    END                                   AS is_prospect_flag,
    MAX(acc.is_customer_flag)             AS is_customer_flag,
    MAX(acc.is_over_5k_customer_flag)     AS is_over_5k_customer_flag,
    MAX(acc.is_over_10k_customer_flag)    AS is_over_10k_customer_flag,
    MAX(acc.is_over_50k_customer_flag)    AS is_over_50k_customer_flag,
    MAX(acc.is_over_500k_customer_flag)   AS is_over_500k_customer_flag,
    SUM(acc.is_over_5k_customer_flag)     AS count_over_5k_customers,
    SUM(acc.is_over_10k_customer_flag)    AS count_over_10k_customers,
    SUM(acc.is_over_50k_customer_flag)    AS count_over_50k_customers,
    SUM(acc.is_over_500k_customer_flag)   AS count_over_500k_customers,
    SUM(acc.is_prospect_flag)             AS count_of_prospects,
    SUM(acc.is_customer_flag)             AS count_of_customers,

    SUM(acc.arr_channel)                  AS arr_channel,
    SUM(acc.arr_direct)                   AS arr_direct,

    SUM(acc.product_starter_arr)          AS product_starter_arr,
    SUM(acc.product_premium_arr)          AS product_premium_arr,
    SUM(acc.product_ultimate_arr)         AS product_ultimate_arr,
    SUM(acc.delivery_self_managed_arr)    AS delivery_self_managed_arr,
    SUM(acc.delivery_saas_arr)            AS delivery_saas_arr,


    -- rolling last 12 months bokked net arr
    SUM(last_12m_booked_net_arr)                      AS last_12m_booked_net_arr,
    SUM(acc.last_12m_booked_non_web_net_arr)              AS last_12m_booked_non_web_net_arr,
    SUM(acc.last_12m_booked_web_direct_sourced_net_arr)   AS last_12m_booked_web_direct_sourced_net_arr,
    SUM(acc.last_12m_booked_channel_sourced_net_arr)      AS last_12m_booked_channel_sourced_net_arr,
    SUM(acc.last_12m_booked_sdr_sourced_net_arr)          AS last_12m_booked_sdr_sourced_net_arr,
    SUM(acc.last_12m_booked_ae_sourced_net_arr)           AS last_12m_booked_ae_sourced_net_arr,
    SUM(acc.last_12m_booked_churn_contraction_net_arr)    AS last_12m_booked_churn_contraction_net_arr,
    SUM(acc.last_12m_booked_fo_net_arr)                   AS last_12m_booked_fo_net_arr,
    SUM(acc.last_12m_booked_new_connected_net_arr)        AS last_12m_booked_new_connected_net_arr,
    SUM(acc.last_12m_booked_growth_net_arr)               AS last_12m_booked_growth_net_arr,
    SUM(acc.last_12m_booked_deal_count)                   AS last_12m_booked_deal_count,
    SUM(acc.last_12m_booked_direct_net_arr)               AS last_12m_booked_direct_net_arr,
    SUM(acc.last_12m_booked_channel_net_arr)              AS last_12m_booked_channel_net_arr,
    SUM(acc.last_12m_atr)                                 AS last_12m_atr,

    -- fy booked net arr
    SUM(acc.fy_booked_net_arr)                   AS fy_booked_net_arr,
    SUM(acc.fy_booked_web_direct_sourced_net_arr) AS fy_booked_web_direct_sourced_net_arr,
    SUM(acc.fy_booked_channel_sourced_net_arr)   AS fy_booked_channel_sourced_net_arr,
    SUM(acc.fy_booked_sdr_sourced_net_arr)       AS fy_booked_sdr_sourced_net_arr,
    SUM(acc.fy_booked_ae_sourced_net_arr)        AS fy_booked_ae_sourced_net_arr,
    SUM(acc.fy_booked_churn_contraction_net_arr) AS fy_booked_churn_contraction_net_arr,
    SUM(acc.fy_booked_fo_net_arr)                AS fy_booked_fo_net_arr,
    SUM(acc.fy_booked_new_connected_net_arr)     AS fy_booked_new_connected_net_arr,
    SUM(acc.fy_booked_growth_net_arr)            AS fy_booked_growth_net_arr,
    SUM(acc.fy_booked_deal_count)                AS fy_booked_deal_count,
    SUM(acc.fy_booked_direct_net_arr)            AS fy_booked_direct_net_arr,
    SUM(acc.fy_booked_channel_net_arr)           AS fy_booked_channel_net_arr,
    SUM(acc.fy_booked_direct_deal_count)         AS fy_booked_direct_deal_count,
    SUM(acc.fy_booked_channel_deal_count)        AS fy_booked_channel_deal_count,

    -- open pipe forward looking
    SUM(acc.total_open_pipe)              AS total_open_pipe,
    SUM(acc.total_count_open_deals_pipe)  AS total_count_open_deals_pipe,
    SUM(acc.customer_has_open_pipe_flag)  AS customer_has_open_pipe_flag,
    SUM(acc.prospect_has_open_pipe_flag)  AS prospect_has_open_pipe_flag,

    -- pipe generation
    SUM(acc.pg_ytd_net_arr) AS pg_ytd_net_arr,
    SUM(acc.pg_ytd_web_direct_sourced_net_arr)    AS pg_ytd_web_direct_sourced_net_arr,
    SUM(acc.pg_ytd_channel_sourced_net_arr)       AS pg_ytd_channel_sourced_net_arr,
    SUM(acc.pg_ytd_sdr_sourced_net_arr)           AS pg_ytd_sdr_sourced_net_arr,
    SUM(acc.pg_ytd_ae_sourced_net_arr)            AS pg_ytd_ae_sourced_net_arr,

    SUM(acc.pg_last_12m_net_arr) AS pg_last_12m_net_arr,
    SUM(acc.pg_last_12m_web_direct_sourced_net_arr)   AS pg_last_12m_web_direct_sourced_net_arr,
    SUM(acc.pg_last_12m_channel_sourced_net_arr)      AS pg_last_12m_channel_sourced_net_arr,
    SUM(acc.pg_last_12m_sdr_sourced_net_arr)          AS pg_last_12m_sdr_sourced_net_arr,
    SUM(acc.pg_last_12m_ae_sourced_net_arr)           AS pg_last_12m_ae_sourced_net_arr,
    
    SUM(acc.last_12m_sao_deal_count)                    AS last_12m_sao_deal_count,
    SUM(acc.last_12m_sao_net_arr)                       AS last_12m_sao_net_arr,
    SUM(acc.last_12m_sao_booked_net_arr)                AS last_12m_sao_booked_net_arr, 
    SUM(acc.fy_sao_deal_count)                          AS fy_sao_deal_count,
    SUM(acc.fy_sao_net_arr)                             AS fy_sao_net_arr,
    SUM(acc.fy_sao_booked_net_arr)                      AS fy_sao_booked_net_arr
    
  FROM consolidated_accounts acc
    LEFT JOIN final_virtual_upa new_upa
        ON new_upa.account_id = acc.account_id
        AND new_upa.report_fiscal_year = acc.report_fiscal_year
  GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21

)
, final AS (

  SELECT
      
    acc.*, 
    
    CASE 
      WHEN upa.arr > 0 AND upa.arr < 5000
        THEN '1. 0-5k ARR'
      WHEN upa.arr >= 5000 AND upa.arr < 10000
        THEN '2. 0-10k ARR'
      WHEN upa.arr >= 10000 AND upa.arr < 50000
        THEN '3. 10k-50k ARR'
      WHEN upa.arr >= 50000 AND upa.arr < 100000
        THEN '4. 50K-100k ARR'
      WHEN upa.arr >= 100000 AND upa.arr < 500000
        THEN '5. 100k-500k ARR'
      WHEN upa.arr >= 500000 AND upa.arr < 1000000
        THEN '6. 500k-1M ARR'     
      WHEN upa.arr >= 500000 AND upa.arr < 1000000
        THEN '7. >=1M ARR' 
      ELSE 'n/a'
    END    AS account_family_arr_bin_name,
    
    COALESCE(upa.potential_users,0)                 AS upa_potential_users,
    COALESCE(upa.licenses,0)                        AS upa_licenses,
    COALESCE(upa.linkedin_developer,0)              AS upa_linkedin_developer,
    COALESCE(upa.zi_developers,0)                   AS upa_zi_developers,
    COALESCE(upa.zi_revenue,0)                      AS upa_zi_revenue,
    COALESCE(upa.employees,0)                       AS upa_employees,
    COALESCE(upa.count_of_customers,0)              AS upa_count_of_customers,

    CASE
        WHEN upa.upa_id = acc.account_id
            THEN 1
        ELSE 0
    END                                     AS is_upa_flag,

    upa.is_customer_flag                    AS hierarchy_is_customer_flag,
    
    COALESCE(virtual.virtual_upa_id,acc.upa_id)                             AS virtual_upa_id,
    COALESCE(virtual.virtual_upa_name,acc.upa_name)                         AS virtual_upa_name,
    COALESCE(virtual.virtual_upa_segment,acc.parent_crm_account_sales_segment)                AS virtual_upa_ad_segment,
    COALESCE(virtual.virtual_upa_geo,acc.upa_user_geo)                      AS virtual_upa_geo,
    COALESCE(virtual.virtual_upa_region,acc.upa_user_region)                AS virtual_upa_region,
    COALESCE(virtual.virtual_upa_area,acc.upa_user_area)                    AS virtual_upa_area,
    COALESCE(virtual.virtual_upa_country,acc.crm_account_billing_country)   AS virtual_upa_ad_country,
    COALESCE(virtual.virtual_upa_state,acc.parent_crm_account_upa_state)    AS virtual_upa_ad_state,
    COALESCE(virtual.virtual_upa_zip_code,acc.parent_crm_account_upa_postal_code) AS virtual_upa_ad_zip_code,
    COALESCE(virtual.virtual_upa_industry,acc.upa_industry)                 AS virtual_upa_industry,
    COALESCE(virtual.virtual_upa_owner_name,acc.upa_owner_name)             AS virtual_upa_owner_name,
    COALESCE(virtual.virtual_upa_owner_title_category,acc.upa_owner_title_category)   AS virtual_upa_owner_title_category,
    COALESCE(virtual.virtual_upa_owner_id,acc.upa_owner_id)                 AS virtual_upa_owner_id, 
    CASE 
        WHEN virtual.upa_id IS NOT NULL 
            THEN 'Virtual'
        ELSE 'Real'
    END                                                                     AS virtual_upa_type

  FROM consolidated_accounts acc
    LEFT JOIN consolidated_upa upa
        ON upa.upa_id = acc.upa_id
        AND upa.report_fiscal_year = acc.report_fiscal_year
    LEFT JOIN final_virtual_upa virtual
        ON virtual.account_id = acc.account_id
        AND virtual.report_fiscal_year = acc.report_fiscal_year

)

SELECT *
FROM final50:T845e,{{ config(
     materialized = "incremental",
     unique_key = "monthly_stage_usage_by_subscription_pk",
     tags=["mnpi_exception"]
) }}

WITH usage_ping AS (
    SELECT
        *,
        DATE_TRUNC('MONTH', ping_created_at) AS ping_created_at_month
    FROM {{ ref('prep_ping_instance') }}

    {% if is_incremental() %}
    
    WHERE ping_created_at_month >= (SELECT DATEADD('month', -1, MAX(snapshot_month)) FROM {{this}}) --  Give a month buffer in case of late arriving pings 
    
  {% endif %}

),

license_subscription_mapping AS (
    SELECT
        *
    FROM {{ ref('map_license_subscription_account') }}
),

dates AS (
    SELECT
        *
    FROM {{ ref('dim_date') }}
),

saas_usage_ping AS (
    SELECT
        *
    FROM {{ ref('prep_saas_usage_ping_namespace') }}
),

namespace_subscription_bridge AS (
    SELECT
        *
    FROM {{ ref('bdg_namespace_order_subscription_monthly') }}
),

usage_ping_metrics AS (
    SELECT
        *
    FROM {{ ref('dim_ping_metric') }}
),

dim_subscription AS (
    SELECT
        *
    FROM {{ ref('dim_subscription') }}
),

sm_last_monthly_ping_per_account AS (
    SELECT
        COALESCE(sha256.dim_crm_account_id, md5.dim_crm_account_id)     AS dim_crm_account_id,
        COALESCE(sha256.dim_subscription_id, md5.dim_subscription_id)   AS dim_subscription_id,
        usage_ping.dim_instance_id                                      AS uuid,
        usage_ping.hostname,
        usage_ping.raw_usage_data_payload,
        CAST(usage_ping.ping_created_at_month AS DATE) AS snapshot_month
    FROM usage_ping
    LEFT JOIN license_subscription_mapping AS md5
      ON usage_ping.license_md5 = md5.license_md5
    LEFT JOIN license_subscription_mapping AS sha256
      ON usage_ping.license_sha256 = sha256.license_sha256
    WHERE (usage_ping.license_md5 IS NOT NULL OR usage_ping.license_sha256 IS NOT NULL)
        AND CAST(
            usage_ping.ping_created_at_month AS DATE
        ) < DATE_TRUNC('month', CURRENT_DATE)
  QUALIFY ROW_NUMBER () OVER (
    PARTITION BY
      sha256.dim_subscription_id,
      md5.dim_subscription_id,
      usage_ping.dim_instance_id,
      usage_ping.hostname,
      CAST(usage_ping.ping_created_at_month AS DATE)
    ORDER BY
      usage_ping.ping_created_at DESC
  ) = 1
),

saas_last_monthly_ping_per_account AS (
    SELECT
        namespace_subscription_bridge.dim_crm_account_id,
        namespace_subscription_bridge.dim_subscription_id,
        namespace_subscription_bridge.dim_namespace_id,
        namespace_subscription_bridge.snapshot_month,
        saas_usage_ping.ping_name AS metrics_path,
        saas_usage_ping.counter_value AS metrics_value
    FROM saas_usage_ping
    INNER JOIN dates ON saas_usage_ping.ping_date = dates.date_day
    INNER JOIN
        namespace_subscription_bridge ON
            saas_usage_ping.dim_namespace_id =
            namespace_subscription_bridge.dim_namespace_id
            AND dates.first_day_of_month =
            namespace_subscription_bridge.snapshot_month
            AND namespace_subscription_bridge.namespace_order_subscription_match_status = 'Paid All Matching'
    WHERE namespace_subscription_bridge.dim_crm_account_id IS NOT NULL
        AND namespace_subscription_bridge.snapshot_month < DATE_TRUNC(
            'month', CURRENT_DATE
        )
        AND metrics_path LIKE 'usage_activity_by_stage%'
        AND metrics_value > 0 -- Filter out non-instances
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY
      namespace_subscription_bridge.dim_crm_account_id,
      namespace_subscription_bridge.dim_namespace_id,
      namespace_subscription_bridge.snapshot_month,
      saas_usage_ping.ping_name
    ORDER BY
      saas_usage_ping.ping_date DESC
  ) = 1
),

flattened_metrics AS (
    SELECT
        dim_crm_account_id,
        dim_subscription_id,
        NULL AS dim_namespace_id,
        uuid,
        hostname,
        snapshot_month,
        "PATH" AS metrics_path,
        "VALUE" AS metrics_value
    FROM sm_last_monthly_ping_per_account,
        LATERAL FLATTEN(INPUT => raw_usage_data_payload, RECURSIVE => TRUE)
    WHERE metrics_path LIKE 'usage_activity_by_stage%'
        AND IS_REAL(metrics_value) = 1
        AND metrics_value > 0

    UNION ALL

    SELECT
        dim_crm_account_id,
        dim_subscription_id,
        dim_namespace_id,
        NULL AS uuid,
        NULL AS hostname,
        snapshot_month,
        metrics_path,
        metrics_value
    FROM saas_last_monthly_ping_per_account
)

SELECT
    {{ dbt_utils.surrogate_key(["dim_subscription.dim_subscription_id_original", "flattened_metrics.snapshot_month"]) }} AS monthly_stage_usage_by_subscription_pk,
    dim_subscription.dim_subscription_id_original,
    flattened_metrics.snapshot_month,

    -- NUMBER OF FEATURES USED BY PRODUCT STAGE
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'plan'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_plan_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'plan'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_plan_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'create'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_create_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'create'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_create_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'verify'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_verify_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'verify'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_verify_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'package'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_package_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'package'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_package_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'release'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_release_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'release'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_release_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'configure'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_configure_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'configure'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_configure_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'monitor'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_monitor_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'monitor'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_monitor_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'manage'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_manage_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'manage' 
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_manage_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'secure'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_secure_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'secure'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_secure_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'growth'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_growth_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'growth'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_growth_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'enablement'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_enablement_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'enablement'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_enablement_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'govern'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_govern_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'govern'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_govern_28days_features,

        COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_fulfillment_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_fulfillment_28days_features,

        COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'analytics'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_analytics_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'analytics'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_analytics_28days_features,

    -- NUMBER OF FEATURES USED BY PRODUCT STAGE
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'dev'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_dev_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'dev'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_dev_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'enablement'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_enablement_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'enablement'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_enablement_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_fulfillment_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_fulfillment_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'growth'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_growth_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'growth'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_growth_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'ops'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_ops_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'ops'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_ops_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'sec'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_sec_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'sec'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_sec_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'seg'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_seg_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'seg'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_seg_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'analytics'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_analytics_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'analytics'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_analytics_28days_features,

    -- NUMBER OF FEATURES USED BY PRODUCT TIER
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_free_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_free_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_premium_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_premium_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'ultimate'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_ultimate_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'ultimate'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_ultimate_28days_features,

    -- NUMBER OF TIMES FEAURES ARE USED BY STAGE
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'plan'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_plan_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'create'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_create_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'verify'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_verify_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'package'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_package_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'release'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_release_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'configure'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_configure_alltime_features_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'monitor'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_monitor_alltime_features_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'manage'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_manage_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'secure'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_secure_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'growth'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_growth_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'enablement'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_enablement_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'govern'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_govern_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'fulfillment'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_fulfillment_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'analytics'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_analytics_alltime_feature_sum,

    /* If want to calculate 28 day metrics, could use the lag function. Or
       compute by nesting this SELECT statement in a WITH and computing after
       the fact, STAGE_PLAN_ALLTIME_FEATURE_SUM -
       COALESCE(LAG(STAGE_PLAN_ALLTIME_FEATURE_SUM)
       OVER (PARTITION BY flattened_metrics.DIM_CRM_ACCOUNT_ID ORDER BY
       flattened_metrics.SNAPSHOT_MONTH), 0) as STAGE_PLAN_28DAYS_FEATURE_SUM
    */

    -- FEATURE USE SHARE BY STAGE
    SUM(
        CASE
            WHEN
                usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_value
        END
    ) AS all_stages_alltime_feature_sum,
    ROUND(
        DIV0(stage_plan_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_plan_alltime_share_pct,
    ROUND(
        DIV0(stage_create_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_create_alltime_share_pct,
    ROUND(
        DIV0(stage_verify_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_verify_alltime_share_pct,
    ROUND(
        DIV0(stage_package_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_package_alltime_share_pct,
    ROUND(
        DIV0(stage_release_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_release_alltime_share_pct,
    ROUND(
        DIV0(stage_configure_alltime_features_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_configure_alltime_share_pct,
    ROUND(
        DIV0(stage_monitor_alltime_features_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_monitor_alltime_share_pct,
    ROUND(
        DIV0(stage_manage_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_manage_alltime_share_pct,
    ROUND(
        DIV0(stage_secure_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_secure_alltime_share_pct,
    ROUND(
        DIV0(stage_growth_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_growth_alltime_share_pct,
    ROUND(
        DIV0(stage_enablement_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_enablement_alltime_share_pct,
    ROUND(
        DIV0(stage_govern_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_govern_alltime_share_pct,
    ROUND(
        DIV0(stage_fulfillment_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_fulfillment_alltime_share_pct,
    ROUND(
        DIV0(stage_analytics_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_analytics_alltime_share_pct,

    -- MOST USED STAGE ALL TIME
    CASE GREATEST(
        stage_plan_alltime_share_pct,
        stage_create_alltime_share_pct,
        stage_verify_alltime_share_pct,
        stage_package_alltime_share_pct,
        stage_release_alltime_share_pct,
        stage_configure_alltime_share_pct,
        stage_monitor_alltime_share_pct,
        stage_manage_alltime_share_pct,
        stage_secure_alltime_share_pct,
        stage_growth_alltime_share_pct,
        stage_enablement_alltime_share_pct,
        stage_govern_alltime_share_pct,
        stage_fulfillment_alltime_share_pct,
        stage_analytics_alltime_share_pct
    )
        WHEN stage_plan_alltime_share_pct THEN 'plan'
        WHEN stage_create_alltime_share_pct THEN 'create'
        WHEN stage_verify_alltime_share_pct THEN 'verify'
        WHEN stage_package_alltime_share_pct THEN 'package'
        WHEN stage_release_alltime_share_pct THEN 'release'
        WHEN stage_configure_alltime_share_pct THEN 'configure'
        WHEN stage_monitor_alltime_share_pct THEN 'monitor'
        WHEN stage_manage_alltime_share_pct THEN 'manage'
        WHEN stage_secure_alltime_share_pct THEN 'secure'
        WHEN stage_growth_alltime_share_pct THEN 'growth'
        WHEN stage_enablement_alltime_share_pct THEN 'enablement'
        WHEN stage_govern_alltime_share_pct THEN 'govern'
        WHEN stage_fulfillment_alltime_share_pct THEN 'fulfillment'
        WHEN stage_analytics_alltime_share_pct THEN 'analytics'
        ELSE 'none'
    END AS stage_most_used_alltime,


    -- NUMBER OF SEAT LICENSES USING EACH STAGE
    -- Cannot get at because of the level of granuality of the usage
    -- datflattened_metrics.

    -- TOTAL MONTHS USED BY STAGES
    CASE WHEN stage_plan_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_plan_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_plan_months_used,
    CASE WHEN stage_create_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_create_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_create_months_used,
    CASE WHEN stage_verify_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_verify_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_verify_months_used,
    CASE WHEN stage_package_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_package_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_package_months_used,
    CASE WHEN stage_release_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_release_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_release_months_used,
    CASE WHEN stage_configure_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_configure_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_configure_months_used,
    CASE WHEN stage_monitor_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_monitor_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_monitor_months_used,
    CASE WHEN stage_manage_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_manage_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_manage_months_used,
    CASE WHEN stage_secure_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_secure_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_secure_months_used,
    CASE WHEN stage_growth_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_growth_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_growth_months_used,
    CASE WHEN stage_enablement_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_enablement_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_enablement_months_used,
    CASE WHEN stage_govern_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_govern_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_govern_months_used,
    CASE WHEN stage_fulfillment_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_fulfillment_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_fulfillment_months_used,
    CASE WHEN stage_analytics_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_analytics_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_analytics_months_used

FROM flattened_metrics
LEFT JOIN
    usage_ping_metrics ON
        flattened_metrics.metrics_path = usage_ping_metrics.metrics_path
LEFT JOIN
    dim_subscription ON
        dim_subscription.dim_subscription_id = flattened_metrics.dim_subscription_id
WHERE usage_ping_metrics.metrics_status = 'active'
      AND dim_subscription.dim_subscription_id_original IS NOT NULL
GROUP BY
    dim_subscription.dim_subscription_id_original,
    flattened_metrics.snapshot_month51:T844b,

WITH usage_ping AS (
    SELECT
        *,
        DATE_TRUNC('MONTH', ping_created_at) AS ping_created_at_month
    FROM "PROD".common_prep.prep_ping_instance

    
    
    WHERE ping_created_at_month >= (SELECT DATEADD('month', -1, MAX(snapshot_month)) FROM "PROD".workspace_data_science.monthly_stage_usage_by_subscription) --  Give a month buffer in case of late arriving pings 
    
  

),

license_subscription_mapping AS (
    SELECT
        *
    FROM "PROD".common_mapping.map_license_subscription_account
),

dates AS (
    SELECT
        *
    FROM "PROD".common.dim_date
),

saas_usage_ping AS (
    SELECT
        *
    FROM "PROD".common_prep.prep_saas_usage_ping_namespace
),

namespace_subscription_bridge AS (
    SELECT
        *
    FROM "PROD".common.bdg_namespace_order_subscription_monthly
),

usage_ping_metrics AS (
    SELECT
        *
    FROM "PROD".common.dim_ping_metric
),

dim_subscription AS (
    SELECT
        *
    FROM "PROD".common.dim_subscription
),

sm_last_monthly_ping_per_account AS (
    SELECT
        COALESCE(sha256.dim_crm_account_id, md5.dim_crm_account_id)     AS dim_crm_account_id,
        COALESCE(sha256.dim_subscription_id, md5.dim_subscription_id)   AS dim_subscription_id,
        usage_ping.dim_instance_id                                      AS uuid,
        usage_ping.hostname,
        usage_ping.raw_usage_data_payload,
        CAST(usage_ping.ping_created_at_month AS DATE) AS snapshot_month
    FROM usage_ping
    LEFT JOIN license_subscription_mapping AS md5
      ON usage_ping.license_md5 = md5.license_md5
    LEFT JOIN license_subscription_mapping AS sha256
      ON usage_ping.license_sha256 = sha256.license_sha256
    WHERE (usage_ping.license_md5 IS NOT NULL OR usage_ping.license_sha256 IS NOT NULL)
        AND CAST(
            usage_ping.ping_created_at_month AS DATE
        ) < DATE_TRUNC('month', CURRENT_DATE)
  QUALIFY ROW_NUMBER () OVER (
    PARTITION BY
      sha256.dim_subscription_id,
      md5.dim_subscription_id,
      usage_ping.dim_instance_id,
      usage_ping.hostname,
      CAST(usage_ping.ping_created_at_month AS DATE)
    ORDER BY
      usage_ping.ping_created_at DESC
  ) = 1
),

saas_last_monthly_ping_per_account AS (
    SELECT
        namespace_subscription_bridge.dim_crm_account_id,
        namespace_subscription_bridge.dim_subscription_id,
        namespace_subscription_bridge.dim_namespace_id,
        namespace_subscription_bridge.snapshot_month,
        saas_usage_ping.ping_name AS metrics_path,
        saas_usage_ping.counter_value AS metrics_value
    FROM saas_usage_ping
    INNER JOIN dates ON saas_usage_ping.ping_date = dates.date_day
    INNER JOIN
        namespace_subscription_bridge ON
            saas_usage_ping.dim_namespace_id =
            namespace_subscription_bridge.dim_namespace_id
            AND dates.first_day_of_month =
            namespace_subscription_bridge.snapshot_month
            AND namespace_subscription_bridge.namespace_order_subscription_match_status = 'Paid All Matching'
    WHERE namespace_subscription_bridge.dim_crm_account_id IS NOT NULL
        AND namespace_subscription_bridge.snapshot_month < DATE_TRUNC(
            'month', CURRENT_DATE
        )
        AND metrics_path LIKE 'usage_activity_by_stage%'
        AND metrics_value > 0 -- Filter out non-instances
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY
      namespace_subscription_bridge.dim_crm_account_id,
      namespace_subscription_bridge.dim_namespace_id,
      namespace_subscription_bridge.snapshot_month,
      saas_usage_ping.ping_name
    ORDER BY
      saas_usage_ping.ping_date DESC
  ) = 1
),

flattened_metrics AS (
    SELECT
        dim_crm_account_id,
        dim_subscription_id,
        NULL AS dim_namespace_id,
        uuid,
        hostname,
        snapshot_month,
        "PATH" AS metrics_path,
        "VALUE" AS metrics_value
    FROM sm_last_monthly_ping_per_account,
        LATERAL FLATTEN(INPUT => raw_usage_data_payload, RECURSIVE => TRUE)
    WHERE metrics_path LIKE 'usage_activity_by_stage%'
        AND IS_REAL(metrics_value) = 1
        AND metrics_value > 0

    UNION ALL

    SELECT
        dim_crm_account_id,
        dim_subscription_id,
        dim_namespace_id,
        NULL AS uuid,
        NULL AS hostname,
        snapshot_month,
        metrics_path,
        metrics_value
    FROM saas_last_monthly_ping_per_account
)

SELECT
    md5(cast(coalesce(cast(dim_subscription.dim_subscription_id_original as 
    varchar
), '') || '-' || coalesce(cast(flattened_metrics.snapshot_month as 
    varchar
), '') as 
    varchar
)) AS monthly_stage_usage_by_subscription_pk,
    dim_subscription.dim_subscription_id_original,
    flattened_metrics.snapshot_month,

    -- NUMBER OF FEATURES USED BY PRODUCT STAGE
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'plan'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_plan_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'plan'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_plan_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'create'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_create_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'create'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_create_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'verify'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_verify_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'verify'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_verify_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'package'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_package_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'package'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_package_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'release'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_release_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'release'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_release_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'configure'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_configure_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'configure'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_configure_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'monitor'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_monitor_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'monitor'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_monitor_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'manage'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_manage_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'manage' 
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_manage_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'secure'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_secure_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'secure'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_secure_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'growth'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_growth_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'growth'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_growth_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'enablement'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_enablement_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'enablement'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_enablement_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'govern'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_govern_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'govern'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_govern_28days_features,

        COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_fulfillment_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_fulfillment_28days_features,

        COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'analytics'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_analytics_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.stage_name = 'analytics'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS stage_analytics_28days_features,

    -- NUMBER OF FEATURES USED BY PRODUCT STAGE
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'dev'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_dev_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'dev'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_dev_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'enablement'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_enablement_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'enablement'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_enablement_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_fulfillment_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'fulfillment'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_fulfillment_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'growth'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_growth_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'growth'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_growth_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'ops'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_ops_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'ops'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_ops_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'sec'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_sec_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'sec'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_sec_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'seg'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_seg_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'seg'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_seg_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'analytics'
                AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_analytics_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                usage_ping_metrics.section_name = 'analytics'
                AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS section_analytics_28days_features,

    -- NUMBER OF FEATURES USED BY PRODUCT TIER
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_free_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_free_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_premium_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'free'
                ) AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_premium_28days_features,

    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'ultimate'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_ultimate_alltime_features,
    COUNT(
        DISTINCT CASE
            WHEN
                CONTAINS(
                    usage_ping_metrics.tier, 'ultimate'
                ) AND NOT CONTAINS(
                    usage_ping_metrics.tier, 'premium'
                ) AND usage_ping_metrics.time_frame = '28d'
                THEN flattened_metrics.metrics_path
        END
    ) AS tier_ultimate_28days_features,

    -- NUMBER OF TIMES FEAURES ARE USED BY STAGE
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'plan'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_plan_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'create'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_create_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'verify'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_verify_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'package'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_package_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'release'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_release_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'configure'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_configure_alltime_features_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'monitor'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_monitor_alltime_features_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'manage'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_manage_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'secure'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_secure_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'growth'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_growth_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'enablement'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_enablement_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'govern'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_govern_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'fulfillment'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_fulfillment_alltime_feature_sum,
    COALESCE(
        SUM(
            CASE
                WHEN
                    usage_ping_metrics.stage_name = 'analytics'
                    AND usage_ping_metrics.time_frame = 'all'
                    THEN flattened_metrics.metrics_value
            END
        ),
        0
    ) AS stage_analytics_alltime_feature_sum,

    /* If want to calculate 28 day metrics, could use the lag function. Or
       compute by nesting this SELECT statement in a WITH and computing after
       the fact, STAGE_PLAN_ALLTIME_FEATURE_SUM -
       COALESCE(LAG(STAGE_PLAN_ALLTIME_FEATURE_SUM)
       OVER (PARTITION BY flattened_metrics.DIM_CRM_ACCOUNT_ID ORDER BY
       flattened_metrics.SNAPSHOT_MONTH), 0) as STAGE_PLAN_28DAYS_FEATURE_SUM
    */

    -- FEATURE USE SHARE BY STAGE
    SUM(
        CASE
            WHEN
                usage_ping_metrics.time_frame = 'all'
                THEN flattened_metrics.metrics_value
        END
    ) AS all_stages_alltime_feature_sum,
    ROUND(
        DIV0(stage_plan_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_plan_alltime_share_pct,
    ROUND(
        DIV0(stage_create_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_create_alltime_share_pct,
    ROUND(
        DIV0(stage_verify_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_verify_alltime_share_pct,
    ROUND(
        DIV0(stage_package_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_package_alltime_share_pct,
    ROUND(
        DIV0(stage_release_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_release_alltime_share_pct,
    ROUND(
        DIV0(stage_configure_alltime_features_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_configure_alltime_share_pct,
    ROUND(
        DIV0(stage_monitor_alltime_features_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_monitor_alltime_share_pct,
    ROUND(
        DIV0(stage_manage_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_manage_alltime_share_pct,
    ROUND(
        DIV0(stage_secure_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_secure_alltime_share_pct,
    ROUND(
        DIV0(stage_growth_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_growth_alltime_share_pct,
    ROUND(
        DIV0(stage_enablement_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_enablement_alltime_share_pct,
    ROUND(
        DIV0(stage_govern_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_govern_alltime_share_pct,
    ROUND(
        DIV0(stage_fulfillment_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_fulfillment_alltime_share_pct,
    ROUND(
        DIV0(stage_analytics_alltime_feature_sum,
             all_stages_alltime_feature_sum), 4
    ) AS stage_analytics_alltime_share_pct,

    -- MOST USED STAGE ALL TIME
    CASE GREATEST(
        stage_plan_alltime_share_pct,
        stage_create_alltime_share_pct,
        stage_verify_alltime_share_pct,
        stage_package_alltime_share_pct,
        stage_release_alltime_share_pct,
        stage_configure_alltime_share_pct,
        stage_monitor_alltime_share_pct,
        stage_manage_alltime_share_pct,
        stage_secure_alltime_share_pct,
        stage_growth_alltime_share_pct,
        stage_enablement_alltime_share_pct,
        stage_govern_alltime_share_pct,
        stage_fulfillment_alltime_share_pct,
        stage_analytics_alltime_share_pct
    )
        WHEN stage_plan_alltime_share_pct THEN 'plan'
        WHEN stage_create_alltime_share_pct THEN 'create'
        WHEN stage_verify_alltime_share_pct THEN 'verify'
        WHEN stage_package_alltime_share_pct THEN 'package'
        WHEN stage_release_alltime_share_pct THEN 'release'
        WHEN stage_configure_alltime_share_pct THEN 'configure'
        WHEN stage_monitor_alltime_share_pct THEN 'monitor'
        WHEN stage_manage_alltime_share_pct THEN 'manage'
        WHEN stage_secure_alltime_share_pct THEN 'secure'
        WHEN stage_growth_alltime_share_pct THEN 'growth'
        WHEN stage_enablement_alltime_share_pct THEN 'enablement'
        WHEN stage_govern_alltime_share_pct THEN 'govern'
        WHEN stage_fulfillment_alltime_share_pct THEN 'fulfillment'
        WHEN stage_analytics_alltime_share_pct THEN 'analytics'
        ELSE 'none'
    END AS stage_most_used_alltime,


    -- NUMBER OF SEAT LICENSES USING EACH STAGE
    -- Cannot get at because of the level of granuality of the usage
    -- datflattened_metrics.

    -- TOTAL MONTHS USED BY STAGES
    CASE WHEN stage_plan_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_plan_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_plan_months_used,
    CASE WHEN stage_create_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_create_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_create_months_used,
    CASE WHEN stage_verify_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_verify_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_verify_months_used,
    CASE WHEN stage_package_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_package_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_package_months_used,
    CASE WHEN stage_release_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_release_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_release_months_used,
    CASE WHEN stage_configure_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_configure_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_configure_months_used,
    CASE WHEN stage_monitor_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_monitor_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_monitor_months_used,
    CASE WHEN stage_manage_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_manage_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_manage_months_used,
    CASE WHEN stage_secure_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_secure_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_secure_months_used,
    CASE WHEN stage_growth_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_growth_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_growth_months_used,
    CASE WHEN stage_enablement_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_enablement_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_enablement_months_used,
    CASE WHEN stage_govern_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_govern_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_govern_months_used,
    CASE WHEN stage_fulfillment_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_fulfillment_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_fulfillment_months_used,
    CASE WHEN stage_analytics_28days_features = 0 THEN 0
        ELSE
            ROW_NUMBER() OVER (
                PARTITION BY
                    dim_subscription.dim_subscription_id_original,
                    CASE WHEN stage_analytics_28days_features > 0 THEN 1 END
                ORDER BY flattened_metrics.snapshot_month
            )
    END AS stage_analytics_months_used

FROM flattened_metrics
LEFT JOIN
    usage_ping_metrics ON
        flattened_metrics.metrics_path = usage_ping_metrics.metrics_path
LEFT JOIN
    dim_subscription ON
        dim_subscription.dim_subscription_id = flattened_metrics.dim_subscription_id
WHERE usage_ping_metrics.metrics_status = 'active'
      AND dim_subscription.dim_subscription_id_original IS NOT NULL
GROUP BY
    dim_subscription.dim_subscription_id_original,
    flattened_metrics.snapshot_month52:T22b9,WITH dim_billing_account AS (

    SELECT *
    FROM {{ ref('dim_billing_account') }}

), dim_crm_account AS (

    SELECT *
    FROM {{ ref('dim_crm_account') }}

), dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), dim_product_detail AS (

    SELECT *
    FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}

), fct_mrr AS (

    SELECT *
    FROM {{ ref('fct_mrr') }}
    WHERE subscription_status IN ('Active', 'Cancelled')

), mart_arr AS (

    SELECT
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      product_tier_name,
      product_delivery_type,
      product_ranking,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    {{ dbt_utils.group_by(n=5) }}

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      product_tier_name,
      product_delivery_type,
      product_ranking,
      dim_date.date_actual         AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_parent_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      base.product_tier_name                                                                 AS product_tier_name,
      base.product_delivery_type                                                             AS product_delivery_type,
      base.product_ranking                                                                   AS product_ranking,
      SUM(ZEROIFNULL(quantity))                                                              AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.dim_parent_crm_account_id = mart_arr.dim_parent_crm_account_id
      AND base.product_tier_name = mart_arr.product_tier_name
    {{ dbt_utils.group_by(n=6) }}

), prior_month AS (

    SELECT
      monthly_arr_parent_level.*,
      COALESCE(LAG(quantity) OVER (PARTITION BY dim_parent_crm_account_id, product_tier_name ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY dim_parent_crm_account_id, product_tier_name ORDER BY arr_month),0)      AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY dim_parent_crm_account_id, product_tier_name ORDER BY arr_month)              AS row_number
    FROM monthly_arr_parent_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      {{ type_of_arr_change('arr','previous_arr','row_number') }}
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      {{ reason_for_arr_change_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      {{ reason_for_quantity_change_seat_change('quantity', 'previous_quantity') }}
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      {{ reason_for_arr_change_price_change('product_tier_name', 'product_tier_name', 'quantity', 'previous_quantity', 'arr', 'previous_arr', 'product_ranking',' product_ranking') }}
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      {{ annual_price_per_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }}
    FROM type_of_arr_change

), combined AS (

    SELECT
      {{ dbt_utils.surrogate_key(['type_of_arr_change.arr_month', 'type_of_arr_change.dim_parent_crm_account_id',
        'type_of_arr_change.product_tier_name']) }}
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.product_tier_name,
      type_of_arr_change.product_delivery_type,
      type_of_arr_change.product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_beg.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_beg.product_tier_name
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_seat_change.product_tier_name
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_price_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_price_change.product_tier_name
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_end.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_end.product_tier_name
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = annual_price_per_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month
      AND type_of_arr_change.product_tier_name = annual_price_per_seat_change.product_tier_name

)

SELECT *
FROM combined53:T26b4,WITH dim_billing_account AS (

    SELECT *
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription

), fct_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_mrr
    WHERE subscription_status IN ('Active', 'Cancelled')

), mart_arr AS (

    SELECT
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      fct_mrr.mrr                                                                     AS mrr,
      fct_mrr.quantity                                                                AS quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      product_tier_name,
      product_delivery_type,
      product_ranking,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    group by 1,2,3,4,5

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      product_tier_name,
      product_delivery_type,
      product_ranking,
      dim_date.date_actual         AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_parent_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      base.product_tier_name                                                                 AS product_tier_name,
      base.product_delivery_type                                                             AS product_delivery_type,
      base.product_ranking                                                                   AS product_ranking,
      SUM(ZEROIFNULL(quantity))                                                              AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.dim_parent_crm_account_id = mart_arr.dim_parent_crm_account_id
      AND base.product_tier_name = mart_arr.product_tier_name
    group by 1,2,3,4,5,6

), prior_month AS (

    SELECT
      monthly_arr_parent_level.*,
      COALESCE(LAG(quantity) OVER (PARTITION BY dim_parent_crm_account_id, product_tier_name ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY dim_parent_crm_account_id, product_tier_name ORDER BY arr_month),0)      AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY dim_parent_crm_account_id, product_tier_name ORDER BY arr_month)              AS row_number
    FROM monthly_arr_parent_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN arr = 0 AND previous_arr > 0
       THEN 'Churn'
     WHEN arr < previous_arr AND arr > 0
       THEN 'Contraction'
     WHEN arr > previous_arr AND row_number > 1
       THEN 'Expansion'
     WHEN arr = previous_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      CASE
      WHEN previous_quantity != quantity AND previous_quantity > 0
        THEN ZEROIFNULL(previous_arr /NULLIF(previous_quantity,0) * (quantity - previous_quantity))
      WHEN previous_quantity != quantity AND previous_quantity = 0
        THEN arr
      ELSE 0
    END                AS seat_change_arr,
      CASE
     WHEN previous_quantity != quantity
     THEN quantity - previous_quantity
     ELSE 0
    END                AS seat_change_quantity
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      ZEROIFNULL(
           CASE
             WHEN product_tier_name = product_tier_name
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             WHEN product_tier_name != product_tier_name AND  product_ranking = product_ranking
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      product_tier_name,
      ZEROIFNULL(( arr / NULLIF(quantity,0) ) - ( previous_arr / NULLIF(previous_quantity,0))) AS annual_price_per_seat_change
    FROM type_of_arr_change

), combined AS (

    SELECT
      md5(cast(coalesce(cast(type_of_arr_change.arr_month as 
    varchar
), '') || '-' || coalesce(cast(type_of_arr_change.dim_parent_crm_account_id as 
    varchar
), '') || '-' || coalesce(cast(type_of_arr_change.product_tier_name as 
    varchar
), '') as 
    varchar
))
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.product_tier_name,
      type_of_arr_change.product_delivery_type,
      type_of_arr_change.product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_beg.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_beg.product_tier_name
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_seat_change.product_tier_name
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_price_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_price_change.product_tier_name
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_end.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
      AND type_of_arr_change.product_tier_name = reason_for_arr_change_end.product_tier_name
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = annual_price_per_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month
      AND type_of_arr_change.product_tier_name = annual_price_per_seat_change.product_tier_name

)

SELECT *
FROM combined54:T2091,{{ simple_cte([
    ('dim_billing_account','dim_billing_account'),
    ('dim_crm_account','dim_crm_account'),
    ('dim_date','dim_date'),
    ('dim_product_detail','dim_product_detail'),
    ('dim_subscription','dim_subscription'),
    ('fct_mrr', 'fct_mrr')
]) }}

, data_quality_filter_subscription_slugify AS (
    
    /*
    There is a data quality issue where a subscription_name_slugify can be mapped to more than one subscription_name. 
    There are 5 subscription_name_slugifys and 10 subscription_names that this impacts as of 2023-02-20. This CTE is 
    used to filter out these subscriptions from the model. The data quality issue causes a fanout with the subscription 
    lineages that are used to group on in the data model.
    */

    SELECT 
      subscription_name_slugify,
      COUNT(subscription_name) AS nbr_records
    FROM dim_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')
    GROUP BY 1
    HAVING nbr_records > 1

)

, oldest_subscription_in_cohort AS (

    /*
    This CTE fetches the subscription id, crm account id, and subscription lineage for the oldest subscription in the lineage a given subscription is a part of. 
    This information is used to group linked subscriptions together in the model and provide a connected view of delta arr changes in a subscription lineage.
    */

    SELECT 
      sub.dim_subscription_id,
      sub_w_org_id.dim_subscription_id AS dim_oldest_subscription_in_cohort_id,
      sub_w_org_id.dim_crm_account_id AS dim_oldest_crm_account_in_cohort_id,
      sub_w_org_id.subscription_lineage,
      sub_w_org_id.subscription_cohort_month AS oldest_subscription_cohort_month
    FROM dim_subscription sub
    LEFT JOIN dim_subscription sub_w_org_id
      ON sub.oldest_subscription_in_cohort = sub_w_org_id.subscription_name_slugify
    WHERE sub.subscription_status IN ('Active', 'Cancelled')
      AND sub_w_org_id.subscription_status IN ('Active', 'Cancelled')
      AND sub.subscription_name_slugify NOT IN (SELECT subscription_name_slugify FROM data_quality_filter_subscription_slugify)
      AND sub_w_org_id.subscription_name_slugify NOT IN (SELECT subscription_name_slugify FROM data_quality_filter_subscription_slugify)

)

, mart_arr AS (

    SELECT
      dim_date.date_actual                                                                          AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL)               AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)                             AS fiscal_year,
      dim_crm_account.dim_parent_crm_account_id,
      oldest_subscription_in_cohort.subscription_lineage,
      oldest_subscription_in_cohort.dim_oldest_subscription_in_cohort_id,
      dim_product_detail.product_tier_name,
      dim_product_detail.product_delivery_type,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN oldest_subscription_in_cohort
      ON oldest_subscription_in_cohort.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id    
    LEFT JOIN dim_crm_account
      ON oldest_subscription_in_cohort.dim_oldest_crm_account_in_cohort_id = dim_crm_account.dim_crm_account_id
    WHERE fct_mrr.subscription_status IN ('Active', 'Cancelled')
      AND dim_crm_account.is_jihu_account != 'TRUE'
      --Filter out storage charges. This fact model focuses on the tier plans.
      AND LOWER(dim_product_detail.product_tier_name) != 'storage' 

)

, max_min_month AS (

    SELECT
      dim_parent_crm_account_id,
      subscription_lineage,
      dim_oldest_subscription_in_cohort_id,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    {{ dbt_utils.group_by(n=3) }}

)

, base AS (

    SELECT
      dim_parent_crm_account_id,
      subscription_lineage,
      dim_oldest_subscription_in_cohort_id,
      dim_date.date_id AS dim_date_month_id,
      dim_date.date_actual AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

)

, monthly_arr_subscription_level AS (

    SELECT
      base.dim_date_month_id,
      base.arr_month,
      base.dim_parent_crm_account_id,
      base.subscription_lineage,
      base.dim_oldest_subscription_in_cohort_id,
      ARRAY_AGG(DISTINCT mart_arr.product_tier_name ) WITHIN GROUP (ORDER BY mart_arr.product_tier_name  ASC) AS product_tier_name,
      ARRAY_AGG(DISTINCT mart_arr.product_delivery_type) WITHIN GROUP (ORDER BY mart_arr.product_delivery_type ASC) AS product_delivery_type,
      MAX(mart_arr.product_ranking) AS product_ranking,
      SUM(ZEROIFNULL(mart_arr.quantity)) AS quantity,
      SUM(ZEROIFNULL(mart_arr.mrr)*12) AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.subscription_lineage = mart_arr.subscription_lineage
    {{ dbt_utils.group_by(n=5) }}

)

, prior_month AS (

    SELECT
      monthly_arr_subscription_level.*,
      LAG(product_tier_name ) OVER (PARTITION BY subscription_lineage ORDER BY arr_month) AS previous_product_tier_name,
      LAG(product_delivery_type) OVER (PARTITION BY subscription_lineage ORDER BY arr_month) AS previous_product_delivery_type,
      COALESCE(LAG(product_ranking) OVER (PARTITION BY subscription_lineage ORDER BY arr_month),0) AS previous_product_ranking,
      COALESCE(LAG(quantity) OVER (PARTITION BY subscription_lineage ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY subscription_lineage ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY subscription_lineage ORDER BY arr_month) AS row_number
    FROM monthly_arr_subscription_level

)

, type_of_arr_change_cte AS (

    SELECT DISTINCT
      {{ dbt_utils.surrogate_key(['arr_month', 'dim_oldest_subscription_in_cohort_id']) }}
                                                                    AS delta_arr_subscription_lineage_product_monthly_pk,
      prior_month.*,
      {{ type_of_arr_change('arr','previous_arr','row_number') }},
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity,
      {{ reason_for_arr_change_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      {{ reason_for_quantity_change_seat_change('quantity', 'previous_quantity') }},
      {{ reason_for_arr_change_price_change('product_tier_name ', 'previous_product_tier_name ', 'quantity', 'previous_quantity', 'arr', 'previous_arr', 'product_ranking',' previous_product_ranking') }},
      {{ reason_for_arr_change_tier_change('product_ranking', 'previous_product_ranking', 'quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      {{ annual_price_per_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM prior_month

)

, final AS (

    SELECT
      --primary key
      delta_arr_subscription_lineage_product_monthly_pk,

      --foreign keys
      dim_date_month_id,
      dim_parent_crm_account_id,
      dim_oldest_subscription_in_cohort_id,

      --degenerate dimensions 
      product_tier_name,
      previous_product_tier_name,
      product_delivery_type,
      previous_product_delivery_type,
      product_ranking,
      previous_product_ranking,
      type_of_arr_change,

      --facts
      beg_arr,
      seat_change_arr,
      tier_change_arr,
      price_change_arr,
      end_arr,
      annual_price_per_seat_change,
      beg_quantity,
      seat_change_quantity,
      end_quantity
    FROM type_of_arr_change_cte

)


{{ dbt_audit(
    cte_ref="final",
    created_by="@iweeks",
    updated_by="@iweeks",
    created_date="2023-02-22",
    updated_date="2023-02-22"
) }}55:T8ff,Delta ARR is a measure of changes to ARR compared to the prior month. The [ARR Analysis Framework](https://internal-handbook.gitlab.io/handbook/sales/annual-recurring-revenue-arr/#arr-analysis-framework) handbook page provides more details on the analysis.

The model uses the subscription_lineage grain to calculate the Delta ARR. This is a fundamental change from previous Delta ARR models at the subscription grain. When looking at the subscription grain, debook-book scenarios are not captured. Therefore, it is necessary to analyze the subscription_lineage grain for accurate product level Delta ARR changes. This model provides a method to analyze the 6 subscription linkage scenarios provided in this [Linking Subscriptions for Data Retention](https://docs.google.com/spreadsheets/d/1SYFy0Xqau1dbOm2YXmp0NvWDEkL_vIcWaFhKzwcocCM/edit#gid=0) file.

The model ERD can be found [HERE](https://lucid.app/lucidchart/invitations/accept/inv_07d25d39-3076-408f-b768-67d1895ea064). 

Model Validation:

The model ties out 100% to mart_arr with the below 3 exceptions:

1. The model removes subscriptions with data quality problems in the subscription_name_slugify field that is used for the subscription lineage. These were 5 subscriptions at the time of model creation and they do not have a material impact on the model insights.

1. The model removes Storage product charges. The model is intended to focus on the paid plan tiers only.

1. At the time of model creation, there were 23 subscriptions that were part of lineages where subscriptions in the lineage roll up to different Salesforce ultimate parent accounts. All of the ARR for these subscriptions is in the model; however, the model rolls up the ARR for these subscriptions to the ultimate parent account of the oldest subscription in the lineage. This results in these 23 parent accounts not tieing out 100% to mart_arr.

Model Caveat:

1. It should be that a subscription only has 1 paid tier plan attached to it. However, there are a small minority of subscriptions that have more than 1 product. Therefore, it is necessary to put the product tiers into an array in the model for completeness. In virtually all cases, it is 2 product tiers on the subscription with many of them having old Bronze/Starter plans in addition to Premium plans.56:T266d,

WITH dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), fct_mrr AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr

)

, data_quality_filter_subscription_slugify AS (
    
    /*
    There is a data quality issue where a subscription_name_slugify can be mapped to more than one subscription_name. 
    There are 5 subscription_name_slugifys and 10 subscription_names that this impacts as of 2023-02-20. This CTE is 
    used to filter out these subscriptions from the model. The data quality issue causes a fanout with the subscription 
    lineages that are used to group on in the data model.
    */

    SELECT 
      subscription_name_slugify,
      COUNT(subscription_name) AS nbr_records
    FROM dim_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')
    GROUP BY 1
    HAVING nbr_records > 1

)

, oldest_subscription_in_cohort AS (

    /*
    This CTE fetches the subscription id, crm account id, and subscription lineage for the oldest subscription in the lineage a given subscription is a part of. 
    This information is used to group linked subscriptions together in the model and provide a connected view of delta arr changes in a subscription lineage.
    */

    SELECT 
      sub.dim_subscription_id,
      sub_w_org_id.dim_subscription_id AS dim_oldest_subscription_in_cohort_id,
      sub_w_org_id.dim_crm_account_id AS dim_oldest_crm_account_in_cohort_id,
      sub_w_org_id.subscription_lineage,
      sub_w_org_id.subscription_cohort_month AS oldest_subscription_cohort_month
    FROM dim_subscription sub
    LEFT JOIN dim_subscription sub_w_org_id
      ON sub.oldest_subscription_in_cohort = sub_w_org_id.subscription_name_slugify
    WHERE sub.subscription_status IN ('Active', 'Cancelled')
      AND sub_w_org_id.subscription_status IN ('Active', 'Cancelled')
      AND sub.subscription_name_slugify NOT IN (SELECT subscription_name_slugify FROM data_quality_filter_subscription_slugify)
      AND sub_w_org_id.subscription_name_slugify NOT IN (SELECT subscription_name_slugify FROM data_quality_filter_subscription_slugify)

)

, mart_arr AS (

    SELECT
      dim_date.date_actual                                                                          AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL)               AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)                             AS fiscal_year,
      dim_crm_account.dim_parent_crm_account_id,
      oldest_subscription_in_cohort.subscription_lineage,
      oldest_subscription_in_cohort.dim_oldest_subscription_in_cohort_id,
      dim_product_detail.product_tier_name,
      dim_product_detail.product_delivery_type,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN oldest_subscription_in_cohort
      ON oldest_subscription_in_cohort.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id    
    LEFT JOIN dim_crm_account
      ON oldest_subscription_in_cohort.dim_oldest_crm_account_in_cohort_id = dim_crm_account.dim_crm_account_id
    WHERE fct_mrr.subscription_status IN ('Active', 'Cancelled')
      AND dim_crm_account.is_jihu_account != 'TRUE'
      --Filter out storage charges. This fact model focuses on the tier plans.
      AND LOWER(dim_product_detail.product_tier_name) != 'storage' 

)

, max_min_month AS (

    SELECT
      dim_parent_crm_account_id,
      subscription_lineage,
      dim_oldest_subscription_in_cohort_id,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    group by 1,2,3

)

, base AS (

    SELECT
      dim_parent_crm_account_id,
      subscription_lineage,
      dim_oldest_subscription_in_cohort_id,
      dim_date.date_id AS dim_date_month_id,
      dim_date.date_actual AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

)

, monthly_arr_subscription_level AS (

    SELECT
      base.dim_date_month_id,
      base.arr_month,
      base.dim_parent_crm_account_id,
      base.subscription_lineage,
      base.dim_oldest_subscription_in_cohort_id,
      ARRAY_AGG(DISTINCT mart_arr.product_tier_name ) WITHIN GROUP (ORDER BY mart_arr.product_tier_name  ASC) AS product_tier_name,
      ARRAY_AGG(DISTINCT mart_arr.product_delivery_type) WITHIN GROUP (ORDER BY mart_arr.product_delivery_type ASC) AS product_delivery_type,
      MAX(mart_arr.product_ranking) AS product_ranking,
      SUM(ZEROIFNULL(mart_arr.quantity)) AS quantity,
      SUM(ZEROIFNULL(mart_arr.mrr)*12) AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.subscription_lineage = mart_arr.subscription_lineage
    group by 1,2,3,4,5

)

, prior_month AS (

    SELECT
      monthly_arr_subscription_level.*,
      LAG(product_tier_name ) OVER (PARTITION BY subscription_lineage ORDER BY arr_month) AS previous_product_tier_name,
      LAG(product_delivery_type) OVER (PARTITION BY subscription_lineage ORDER BY arr_month) AS previous_product_delivery_type,
      COALESCE(LAG(product_ranking) OVER (PARTITION BY subscription_lineage ORDER BY arr_month),0) AS previous_product_ranking,
      COALESCE(LAG(quantity) OVER (PARTITION BY subscription_lineage ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY subscription_lineage ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY subscription_lineage ORDER BY arr_month) AS row_number
    FROM monthly_arr_subscription_level

)

, type_of_arr_change_cte AS (

    SELECT DISTINCT
      md5(cast(coalesce(cast(arr_month as 
    varchar
), '') || '-' || coalesce(cast(dim_oldest_subscription_in_cohort_id as 
    varchar
), '') as 
    varchar
))
                                                                    AS delta_arr_subscription_lineage_product_monthly_pk,
      prior_month.*,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN arr = 0 AND previous_arr > 0
       THEN 'Churn'
     WHEN arr < previous_arr AND arr > 0
       THEN 'Contraction'
     WHEN arr > previous_arr AND row_number > 1
       THEN 'Expansion'
     WHEN arr = previous_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity,
      CASE
      WHEN previous_quantity != quantity AND previous_quantity > 0
        THEN ZEROIFNULL(previous_arr /NULLIF(previous_quantity,0) * (quantity - previous_quantity))
      WHEN previous_quantity != quantity AND previous_quantity = 0
        THEN arr
      ELSE 0
    END                AS seat_change_arr,
      CASE
     WHEN previous_quantity != quantity
     THEN quantity - previous_quantity
     ELSE 0
    END                AS seat_change_quantity,
      ZEROIFNULL(
           CASE
             WHEN previous_product_tier_name  = product_tier_name 
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             WHEN previous_product_tier_name  != product_tier_name  AND  previous_product_ranking = product_ranking
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr,
      CASE
      WHEN previous_product_ranking != product_ranking
      THEN ZEROIFNULL(quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0)))
      ELSE 0
    END                   AS tier_change_arr,
      ZEROIFNULL(( arr / NULLIF(quantity,0) ) - ( previous_arr / NULLIF(previous_quantity,0))) AS annual_price_per_seat_change,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM prior_month

)

, final AS (

    SELECT
      --primary key
      delta_arr_subscription_lineage_product_monthly_pk,

      --foreign keys
      dim_date_month_id,
      dim_parent_crm_account_id,
      dim_oldest_subscription_in_cohort_id,

      --degenerate dimensions 
      product_tier_name,
      previous_product_tier_name,
      product_delivery_type,
      previous_product_delivery_type,
      product_ranking,
      previous_product_ranking,
      type_of_arr_change,

      --facts
      beg_arr,
      seat_change_arr,
      tier_change_arr,
      price_change_arr,
      end_arr,
      annual_price_per_seat_change,
      beg_quantity,
      seat_change_quantity,
      end_quantity
    FROM type_of_arr_change_cte

)


SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2023-02-22'::DATE        AS model_created_date,
      '2023-02-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final57:T1e13,WITH dim_crm_account AS (

    SELECT *
    FROM {{ ref('dim_crm_account') }}

), dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), dim_product_detail AS (

    SELECT *
    FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}

), fct_mrr AS (

    SELECT *
    FROM {{ ref('fct_mrr') }}
    WHERE subscription_status IN ('Active', 'Cancelled')

), next_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      product_tier_name                                                                                               AS product_category,
      MIN(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id, product_tier_name)    AS next_renewal_month_product
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    WHERE subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)

), last_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      product_tier_name                                                                                               AS product_category,
      MAX(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id, product_tier_name)    AS last_renewal_month_product
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    WHERE subscription_end_month < DATE_TRUNC('month',CURRENT_DATE)

), parent_account_mrrs AS (

    SELECT
      dim_crm_account.dim_parent_crm_account_id,
      dim_product_detail.product_tier_name              AS product_category,
      dim_product_detail.product_ranking,
      dim_date.date_actual                              AS mrr_month,
      dateadd('year', 1, date_actual)                   AS retention_month,
      next_renewal_month_product,
      last_renewal_month_product,
      SUM(ZEROIFNULL(mrr))                              AS mrr_total,
      SUM(ZEROIFNULL(arr))                              AS arr_total,
      SUM(ZEROIFNULL(quantity))                         AS quantity_total
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = fct_mrr.dim_crm_account_id
    LEFT JOIN next_renewal_month
      ON next_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
      AND next_renewal_month.product_category = dim_product_detail.product_tier_name
    LEFT JOIN last_renewal_month
      ON last_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
      AND last_renewal_month.product_category = dim_product_detail.product_tier_name
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    {{ dbt_utils.group_by(n=7) }}

), retention_subs AS (

    SELECT
      current_mrr.dim_parent_crm_account_id,
      current_mrr.product_category,
      current_mrr.product_ranking,
      current_mrr.mrr_month          AS current_mrr_month,
      current_mrr.retention_month,
      current_mrr.mrr_total          AS current_mrr,
      future_mrr.mrr_total           AS future_mrr,
      current_mrr.arr_total          AS current_arr,
      future_mrr.arr_total           AS future_arr,
      current_mrr.quantity_total     AS current_quantity,
      future_mrr.quantity_total      AS future_quantity,
      current_mrr.last_renewal_month_product,
      current_mrr.next_renewal_month_product,
      --The type of arr change requires a row_number. Row_number = 1 indicates new in the macro; however, for retention, new is not a valid option since retention starts in month 12, well after the First Order transaction.
      2                              AS row_number
    FROM parent_account_mrrs AS current_mrr
    LEFT JOIN parent_account_mrrs AS future_mrr
      ON current_mrr.dim_parent_crm_account_id = future_mrr.dim_parent_crm_account_id
      AND current_mrr.product_category = future_mrr.product_category
      AND current_mrr.retention_month = future_mrr.mrr_month

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['retention_subs.dim_parent_crm_account_id', 'product_category', 'retention_month']) }} AS primary_key,
      retention_subs.dim_parent_crm_account_id,
      dim_crm_account.crm_account_name          AS parent_crm_account_name,
      product_category,
      product_ranking,
      retention_month,
      dim_date.fiscal_year                      AS retention_fiscal_year,
      dim_date.fiscal_quarter                   AS retention_fiscal_quarter,
      retention_subs.last_renewal_month_product,
      retention_subs.next_renewal_month_product,
      current_mrr                               AS prior_year_mrr,
      COALESCE(future_mrr, 0)                   AS net_retention_mrr,
      CASE WHEN net_retention_mrr > 0
        THEN least(net_retention_mrr, current_mrr)
        ELSE 0 END                              AS gross_retention_mrr,
      current_arr                               AS prior_year_arr,
      COALESCE(future_arr, 0)                   AS net_retention_arr,
      CASE WHEN net_retention_arr > 0
        THEN least(net_retention_arr, current_arr)
        ELSE 0 END                              AS gross_retention_arr,
      current_quantity                          AS prior_year_quantity,
      COALESCE(future_quantity, 0)              AS net_retention_quantity,
      {{ reason_for_quantity_change_seat_change('net_retention_quantity', 'prior_year_quantity') }},
      {{ type_of_arr_change('net_retention_arr', 'prior_year_arr','row_number') }},
      {{ reason_for_arr_change_seat_change('net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }},
      {{ reason_for_arr_change_price_change('product_category', 'product_category', 'net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr', 'product_ranking','product_ranking') }},
      {{ annual_price_per_seat_change('net_retention_quantity', 'prior_year_quantity', 'net_retention_arr', 'prior_year_arr') }}
    FROM retention_subs
    INNER JOIN dim_date
      ON dim_date.date_actual = retention_subs.retention_month
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = retention_subs.dim_parent_crm_account_id
    WHERE retention_month <= dateadd(month, -1, CURRENT_DATE)

)

SELECT *
FROM final58:T22cf,WITH dim_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription

), fct_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_mrr
    WHERE subscription_status IN ('Active', 'Cancelled')

), next_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      product_tier_name                                                                                               AS product_category,
      MIN(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id, product_tier_name)    AS next_renewal_month_product
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    WHERE subscription_end_month >= DATE_TRUNC('month',CURRENT_DATE)

), last_renewal_month AS (

    SELECT DISTINCT
      merged_accounts.dim_parent_crm_account_id,
      product_tier_name                                                                                               AS product_category,
      MAX(subscription_end_month) OVER (PARTITION BY merged_accounts.dim_parent_crm_account_id, product_tier_name)    AS last_renewal_month_product
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account AS crm_accounts
      ON crm_accounts.dim_crm_account_id = fct_mrr.dim_crm_account_id
    INNER JOIN dim_crm_account AS merged_accounts
      ON merged_accounts.dim_crm_account_id = COALESCE(crm_accounts.merged_to_account_id, crm_accounts.dim_crm_account_id)
    LEFT JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
      AND subscription_end_month <= DATEADD('year', 1, date_actual)
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    WHERE subscription_end_month < DATE_TRUNC('month',CURRENT_DATE)

), parent_account_mrrs AS (

    SELECT
      dim_crm_account.dim_parent_crm_account_id,
      dim_product_detail.product_tier_name              AS product_category,
      dim_product_detail.product_ranking,
      dim_date.date_actual                              AS mrr_month,
      dateadd('year', 1, date_actual)                   AS retention_month,
      next_renewal_month_product,
      last_renewal_month_product,
      SUM(ZEROIFNULL(mrr))                              AS mrr_total,
      SUM(ZEROIFNULL(arr))                              AS arr_total,
      SUM(ZEROIFNULL(quantity))                         AS quantity_total
    FROM fct_mrr
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = fct_mrr.dim_crm_account_id
    LEFT JOIN next_renewal_month
      ON next_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
      AND next_renewal_month.product_category = dim_product_detail.product_tier_name
    LEFT JOIN last_renewal_month
      ON last_renewal_month.dim_parent_crm_account_id = dim_crm_account.dim_parent_crm_account_id
      AND last_renewal_month.product_category = dim_product_detail.product_tier_name
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    group by 1,2,3,4,5,6,7

), retention_subs AS (

    SELECT
      current_mrr.dim_parent_crm_account_id,
      current_mrr.product_category,
      current_mrr.product_ranking,
      current_mrr.mrr_month          AS current_mrr_month,
      current_mrr.retention_month,
      current_mrr.mrr_total          AS current_mrr,
      future_mrr.mrr_total           AS future_mrr,
      current_mrr.arr_total          AS current_arr,
      future_mrr.arr_total           AS future_arr,
      current_mrr.quantity_total     AS current_quantity,
      future_mrr.quantity_total      AS future_quantity,
      current_mrr.last_renewal_month_product,
      current_mrr.next_renewal_month_product,
      --The type of arr change requires a row_number. Row_number = 1 indicates new in the macro; however, for retention, new is not a valid option since retention starts in month 12, well after the First Order transaction.
      2                              AS row_number
    FROM parent_account_mrrs AS current_mrr
    LEFT JOIN parent_account_mrrs AS future_mrr
      ON current_mrr.dim_parent_crm_account_id = future_mrr.dim_parent_crm_account_id
      AND current_mrr.product_category = future_mrr.product_category
      AND current_mrr.retention_month = future_mrr.mrr_month

), final AS (

    SELECT
      md5(cast(coalesce(cast(retention_subs.dim_parent_crm_account_id as 
    varchar
), '') || '-' || coalesce(cast(product_category as 
    varchar
), '') || '-' || coalesce(cast(retention_month as 
    varchar
), '') as 
    varchar
)) AS primary_key,
      retention_subs.dim_parent_crm_account_id,
      dim_crm_account.crm_account_name          AS parent_crm_account_name,
      product_category,
      product_ranking,
      retention_month,
      dim_date.fiscal_year                      AS retention_fiscal_year,
      dim_date.fiscal_quarter                   AS retention_fiscal_quarter,
      retention_subs.last_renewal_month_product,
      retention_subs.next_renewal_month_product,
      current_mrr                               AS prior_year_mrr,
      COALESCE(future_mrr, 0)                   AS net_retention_mrr,
      CASE WHEN net_retention_mrr > 0
        THEN least(net_retention_mrr, current_mrr)
        ELSE 0 END                              AS gross_retention_mrr,
      current_arr                               AS prior_year_arr,
      COALESCE(future_arr, 0)                   AS net_retention_arr,
      CASE WHEN net_retention_arr > 0
        THEN least(net_retention_arr, current_arr)
        ELSE 0 END                              AS gross_retention_arr,
      current_quantity                          AS prior_year_quantity,
      COALESCE(future_quantity, 0)              AS net_retention_quantity,
      CASE
     WHEN prior_year_quantity != net_retention_quantity
     THEN net_retention_quantity - prior_year_quantity
     ELSE 0
    END                AS seat_change_quantity,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN net_retention_arr = 0 AND prior_year_arr > 0
       THEN 'Churn'
     WHEN net_retention_arr < prior_year_arr AND net_retention_arr > 0
       THEN 'Contraction'
     WHEN net_retention_arr > prior_year_arr AND row_number > 1
       THEN 'Expansion'
     WHEN net_retention_arr = prior_year_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change,
      CASE
      WHEN prior_year_quantity != net_retention_quantity AND prior_year_quantity > 0
        THEN ZEROIFNULL(prior_year_arr /NULLIF(prior_year_quantity,0) * (net_retention_quantity - prior_year_quantity))
      WHEN prior_year_quantity != net_retention_quantity AND prior_year_quantity = 0
        THEN net_retention_arr
      ELSE 0
    END                AS seat_change_arr,
      ZEROIFNULL(
           CASE
             WHEN product_category = product_category
               THEN net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0))
             WHEN product_category != product_category AND product_ranking = product_ranking
               THEN net_retention_quantity * (net_retention_arr/NULLIF(net_retention_quantity,0) - prior_year_arr/NULLIF(prior_year_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr,
      ZEROIFNULL(( net_retention_arr / NULLIF(net_retention_quantity,0) ) - ( prior_year_arr / NULLIF(prior_year_quantity,0))) AS annual_price_per_seat_change
    FROM retention_subs
    INNER JOIN dim_date
      ON dim_date.date_actual = retention_subs.retention_month
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = retention_subs.dim_parent_crm_account_id
    WHERE retention_month <= dateadd(month, -1, CURRENT_DATE)

)

SELECT *
FROM final59:T2274,WITH dim_billing_account AS (

    SELECT *
    FROM {{ ref('dim_billing_account') }}

), dim_crm_account AS (

    SELECT *
    FROM {{ ref('dim_crm_account') }}

), dim_date AS (

    SELECT *
    FROM {{ ref('dim_date') }}

), dim_product_detail AS (

    SELECT *
    FROM {{ ref('dim_product_detail') }}

), dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}

), fct_mrr AS (

    SELECT *
    FROM {{ ref('fct_mrr') }}
    WHERE subscription_status IN ('Active', 'Cancelled')

), mart_arr AS (

    SELECT
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_crm_account.parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id,
      dim_product_detail.product_tier_name                                            AS product_category,
      dim_product_detail.product_delivery_type                                        AS delivery,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    {{ dbt_utils.group_by(n=2) }}

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_date.date_actual         AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_parent_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      ARRAY_AGG(DISTINCT product_category) WITHIN GROUP (ORDER BY product_category ASC)      AS product_category,
      ARRAY_AGG(DISTINCT delivery) WITHIN GROUP (ORDER BY delivery ASC)                      AS delivery,
      MAX(product_ranking)                                                                   AS product_ranking,
      SUM(ZEROIFNULL(quantity))                                                              AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.dim_parent_crm_account_id = mart_arr.dim_parent_crm_account_id
    {{ dbt_utils.group_by(n=3) }}

), prior_month AS (

    SELECT
      monthly_arr_parent_level.*,
      LAG(product_category) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month) AS previous_product_category,
      LAG(delivery) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month) AS previous_delivery,
      COALESCE(LAG(product_ranking) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month),0) AS previous_product_ranking,
      COALESCE(LAG(quantity) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month) AS row_number
    FROM monthly_arr_parent_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      {{ type_of_arr_change('arr','previous_arr','row_number') }}
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      {{ reason_for_arr_change_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }},
      {{ reason_for_quantity_change_seat_change('quantity', 'previous_quantity') }}
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      {{ reason_for_arr_change_price_change('product_category', 'previous_product_category', 'quantity', 'previous_quantity', 'arr', 'previous_arr', 'product_ranking',' previous_product_ranking') }}
    FROM type_of_arr_change

), reason_for_arr_change_tier_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      {{ reason_for_arr_change_tier_change('product_ranking', 'previous_product_ranking', 'quantity', 'previous_quantity', 'arr', 'previous_arr') }}
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      {{ annual_price_per_seat_change('quantity', 'previous_quantity', 'arr', 'previous_arr') }}
    FROM type_of_arr_change

), combined AS (

    SELECT
      {{ dbt_utils.surrogate_key(['type_of_arr_change.arr_month', 'type_of_arr_change.dim_parent_crm_account_id']) }}
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.product_category,
      type_of_arr_change.previous_product_category                  AS previous_month_product_category,
      type_of_arr_change.delivery,
      type_of_arr_change.previous_delivery                          AS previous_month_delivery,
      type_of_arr_change.product_ranking,
      type_of_arr_change.previous_product_ranking                   AS previous_month_product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_tier_change.tier_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_beg.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_price_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
    LEFT JOIN reason_for_arr_change_tier_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_tier_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_tier_change.arr_month
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_end.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = annual_price_per_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month

)

SELECT *
FROM combined5a:T2693,WITH dim_billing_account AS (

    SELECT *
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_date AS (

    SELECT *
    FROM "PROD".common.dim_date

), dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription

), fct_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_common.fct_mrr
    WHERE subscription_status IN ('Active', 'Cancelled')

), mart_arr AS (

    SELECT
      dim_date.date_actual                                                            AS arr_month,
      IFF(is_first_day_of_last_month_of_fiscal_quarter, fiscal_quarter_name_fy, NULL) AS fiscal_quarter_name_fy,
      IFF(is_first_day_of_last_month_of_fiscal_year, fiscal_year, NULL)               AS fiscal_year,
      dim_crm_account.parent_crm_account_name,
      dim_crm_account.dim_parent_crm_account_id,
      dim_product_detail.product_tier_name                                            AS product_category,
      dim_product_detail.product_delivery_type                                        AS delivery,
      dim_product_detail.product_ranking,
      fct_mrr.mrr,
      fct_mrr.quantity
    FROM fct_mrr
    INNER JOIN dim_subscription
      ON dim_subscription.dim_subscription_id = fct_mrr.dim_subscription_id
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_mrr.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON dim_billing_account.dim_billing_account_id = fct_mrr.dim_billing_account_id
    INNER JOIN dim_date
      ON dim_date.date_id = fct_mrr.dim_date_id
    LEFT JOIN dim_crm_account
      ON dim_billing_account.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), max_min_month AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      MIN(arr_month)                      AS date_month_start,
      --add 1 month to generate churn month
      DATEADD('month',1,MAX(arr_month))   AS date_month_end
    FROM mart_arr
    group by 1,2

), base AS (

    SELECT
      parent_crm_account_name,
      dim_parent_crm_account_id,
      dim_date.date_actual         AS arr_month,
      dim_date.fiscal_quarter_name_fy,
      dim_date.fiscal_year
    FROM max_min_month
    INNER JOIN dim_date
      -- all months after start date
      ON  dim_date.date_actual >= max_min_month.date_month_start
      -- up to and including end date
      AND dim_date.date_actual <=  max_min_month.date_month_end
      AND day_of_month = 1

), monthly_arr_parent_level AS (

    SELECT
      base.arr_month,
      base.parent_crm_account_name,
      base.dim_parent_crm_account_id,
      ARRAY_AGG(DISTINCT product_category) WITHIN GROUP (ORDER BY product_category ASC)      AS product_category,
      ARRAY_AGG(DISTINCT delivery) WITHIN GROUP (ORDER BY delivery ASC)                      AS delivery,
      MAX(product_ranking)                                                                   AS product_ranking,
      SUM(ZEROIFNULL(quantity))                                                              AS quantity,
      SUM(ZEROIFNULL(mrr)*12)                                                                AS arr
    FROM base
    LEFT JOIN mart_arr
      ON base.arr_month = mart_arr.arr_month
      AND base.dim_parent_crm_account_id = mart_arr.dim_parent_crm_account_id
    group by 1,2,3

), prior_month AS (

    SELECT
      monthly_arr_parent_level.*,
      LAG(product_category) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month) AS previous_product_category,
      LAG(delivery) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month) AS previous_delivery,
      COALESCE(LAG(product_ranking) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month),0) AS previous_product_ranking,
      COALESCE(LAG(quantity) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month),0) AS previous_quantity,
      COALESCE(LAG(arr) OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month),0) AS previous_arr,
      ROW_NUMBER() OVER (PARTITION BY dim_parent_crm_account_id ORDER BY arr_month) AS row_number
    FROM monthly_arr_parent_level

), type_of_arr_change AS (

    SELECT
      prior_month.*,
      CASE
     WHEN row_number = 1
       THEN 'New'
     WHEN arr = 0 AND previous_arr > 0
       THEN 'Churn'
     WHEN arr < previous_arr AND arr > 0
       THEN 'Contraction'
     WHEN arr > previous_arr AND row_number > 1
       THEN 'Expansion'
     WHEN arr = previous_arr
       THEN 'No Impact'
     ELSE NULL
   END                 AS type_of_arr_change
    FROM prior_month

), reason_for_arr_change_beg AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      previous_arr      AS beg_arr,
      previous_quantity AS beg_quantity
    FROM type_of_arr_change

), reason_for_arr_change_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
      WHEN previous_quantity != quantity AND previous_quantity > 0
        THEN ZEROIFNULL(previous_arr /NULLIF(previous_quantity,0) * (quantity - previous_quantity))
      WHEN previous_quantity != quantity AND previous_quantity = 0
        THEN arr
      ELSE 0
    END                AS seat_change_arr,
      CASE
     WHEN previous_quantity != quantity
     THEN quantity - previous_quantity
     ELSE 0
    END                AS seat_change_quantity
    FROM type_of_arr_change

), reason_for_arr_change_price_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      ZEROIFNULL(
           CASE
             WHEN previous_product_category = product_category
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             WHEN previous_product_category != product_category AND  previous_product_ranking = product_ranking
               THEN quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0))
             ELSE 0
           END
          )               AS price_change_arr
    FROM type_of_arr_change

), reason_for_arr_change_tier_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      CASE
      WHEN previous_product_ranking != product_ranking
      THEN ZEROIFNULL(quantity * (arr/NULLIF(quantity,0) - previous_arr/NULLIF(previous_quantity,0)))
      ELSE 0
    END                   AS tier_change_arr
    FROM type_of_arr_change

), reason_for_arr_change_end AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      arr                   AS end_arr,
      quantity              AS end_quantity
    FROM type_of_arr_change

), annual_price_per_seat_change AS (

    SELECT
      arr_month,
      dim_parent_crm_account_id,
      ZEROIFNULL(( arr / NULLIF(quantity,0) ) - ( previous_arr / NULLIF(previous_quantity,0))) AS annual_price_per_seat_change
    FROM type_of_arr_change

), combined AS (

    SELECT
      md5(cast(coalesce(cast(type_of_arr_change.arr_month as 
    varchar
), '') || '-' || coalesce(cast(type_of_arr_change.dim_parent_crm_account_id as 
    varchar
), '') as 
    varchar
))
                                                                    AS primary_key,
      type_of_arr_change.arr_month,
      type_of_arr_change.parent_crm_account_name,
      type_of_arr_change.dim_parent_crm_account_id,
      type_of_arr_change.product_category,
      type_of_arr_change.previous_product_category                  AS previous_month_product_category,
      type_of_arr_change.delivery,
      type_of_arr_change.previous_delivery                          AS previous_month_delivery,
      type_of_arr_change.product_ranking,
      type_of_arr_change.previous_product_ranking                   AS previous_month_product_ranking,
      type_of_arr_change.type_of_arr_change,
      reason_for_arr_change_beg.beg_arr,
      reason_for_arr_change_beg.beg_quantity,
      reason_for_arr_change_seat_change.seat_change_arr,
      reason_for_arr_change_seat_change.seat_change_quantity,
      reason_for_arr_change_price_change.price_change_arr,
      reason_for_arr_change_tier_change.tier_change_arr,
      reason_for_arr_change_end.end_arr,
      reason_for_arr_change_end.end_quantity,
      annual_price_per_seat_change.annual_price_per_seat_change
    FROM type_of_arr_change
    LEFT JOIN reason_for_arr_change_beg
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_beg.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_beg.arr_month
    LEFT JOIN reason_for_arr_change_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_seat_change.arr_month
    LEFT JOIN reason_for_arr_change_price_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_price_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_price_change.arr_month
    LEFT JOIN reason_for_arr_change_tier_change
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_tier_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_tier_change.arr_month
    LEFT JOIN reason_for_arr_change_end
      ON type_of_arr_change.dim_parent_crm_account_id = reason_for_arr_change_end.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = reason_for_arr_change_end.arr_month
    LEFT JOIN annual_price_per_seat_change
      ON type_of_arr_change.dim_parent_crm_account_id = annual_price_per_seat_change.dim_parent_crm_account_id
      AND type_of_arr_change.arr_month = annual_price_per_seat_change.arr_month

)

SELECT *
FROM combined5b:T2ef2,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('metric_opt_in', 'rpt_ping_metric_first_last_versions'),
    ('mart_charge', 'mart_charge'),
    ('dim_charge', 'dim_charge'),
    ('fct_charge', 'fct_charge'),
    ('dim_subscription', 'dim_subscription'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_crm_account', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_date', 'dim_date'),
    ('mart_ping_instance_metric', 'mart_ping_instance_metric'),
    ('mart_ping_instance_metric_monthly', 'mart_ping_instance_metric_monthly')
    ])

}}

/*
Determine latest version for each subscription to determine if the potential metric is valid for a given month
*/

, subscriptions_w_versions AS (

  SELECT
      ping_created_date_month           AS ping_created_date_month,
      dim_installation_id               AS dim_installation_id,
      latest_subscription_id            AS latest_subscription_id,
      ping_edition                      AS ping_edition,
      version_is_prerelease             AS version_is_prerelease,
      major_minor_version_id            AS major_minor_version_id,
      instance_user_count               AS instance_user_count
  FROM mart_ping_instance_metric_monthly
      WHERE ping_delivery_type = 'Self-Managed'
      QUALIFY ROW_NUMBER() OVER (
            PARTITION BY ping_created_date_month, latest_subscription_id, dim_installation_id
              ORDER BY major_minor_version_id DESC) = 1

/*
Deduping the mart to ensure instance_user_count isn't counted 2+ times
*/

), deduped_subscriptions_w_versions AS (

    SELECT
        ping_created_date_month           AS ping_created_date_month,
        dim_installation_id               AS dim_installation_id,
        latest_subscription_id            AS latest_subscription_id,
        ping_edition                      AS ping_edition,
        version_is_prerelease             AS version_is_prerelease,
        major_minor_version_id            AS major_minor_version_id,
        MAX(instance_user_count)          AS instance_user_count
    FROM subscriptions_w_versions
      {{ dbt_utils.group_by(n=6)}}
/*
Get the count of pings each month per subscription_name_slugify
*/

), ping_counts AS (

  SELECT
    ping_created_date_month                     AS ping_created_date_month,
    dim_installation_id                         AS dim_installation_id,
    latest_subscription_id                      AS latest_subscription_id,
    COUNT(DISTINCT(dim_ping_instance_id))       AS ping_count
  FROM mart_ping_instance_metric
      {{ dbt_utils.group_by(n=3)}}

/*
Join subscription information with count of pings
*/

), joined_subscriptions AS (

  SELECT
    deduped_subscriptions_w_versions.*,
    ping_counts.ping_count
  FROM deduped_subscriptions_w_versions
    INNER JOIN ping_counts
  ON deduped_subscriptions_w_versions.ping_created_date_month = ping_counts.ping_created_date_month
    AND deduped_subscriptions_w_versions.latest_subscription_id = ping_counts.latest_subscription_id
    AND deduped_subscriptions_w_versions.dim_installation_id = ping_counts.dim_installation_id
/*
Aggregate mart_charge information (used as the basis of truth), this gets rid of host deviation
*/

), mart_charge_cleaned AS (

  SELECT
       dim_date.date_actual               AS arr_month,
       fct_charge.dim_subscription_id     AS dim_subscription_id,
       SUM(quantity)                      AS licensed_user_count,
       IFF(SUM(arr) > 0, TRUE, FALSE)     AS is_paid_subscription
     FROM fct_charge
     INNER JOIN dim_date
        ON effective_start_month <= dim_date.date_actual
        AND (effective_end_month >= dim_date.date_actual OR effective_end_month IS NULL)
        AND dim_date.day_of_month = 1
     INNER JOIN dim_charge
       ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
     INNER JOIN dim_subscription
       ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
     INNER JOIN dim_product_detail
       ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
      WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
        AND subscription_status IN ('Active','Cancelled')
        AND dim_product_detail.product_tier_name != 'Storage'
        AND DATE_TRUNC('MONTH', CURRENT_DATE) > arr_month
      {{ dbt_utils.group_by(n=2)}}

/*
Join mart_charge information bringing in mart_charge subscriptions which DO NOT appear in ping fact data
*/

), arr_counts_joined AS (

  SELECT
    mart_charge_cleaned.arr_month                                                                           AS ping_created_date_month,
    joined_subscriptions.dim_installation_id                                                                AS dim_installation_id,
    mart_charge_cleaned.dim_subscription_id                                                                 AS latest_subscription_id,
    joined_subscriptions.ping_edition                                                                       AS ping_edition,
    joined_subscriptions.version_is_prerelease                                                              AS version_is_prerelease,
    joined_subscriptions.major_minor_version_id                                                             AS major_minor_version_id,
    joined_subscriptions.instance_user_count                                                                AS instance_user_count,
    mart_charge_cleaned.licensed_user_count                                                                 AS licensed_user_count,
    mart_charge_cleaned.is_paid_subscription                                                                AS is_paid_subscription,
    joined_subscriptions.ping_count                                                                         AS ping_count,
    FALSE                                                                                                   AS is_missing_charge_subscription
  FROM mart_charge_cleaned
    LEFT OUTER JOIN joined_subscriptions
  ON joined_subscriptions.latest_subscription_id = mart_charge_cleaned.dim_subscription_id
      AND joined_subscriptions.ping_created_date_month = mart_charge_cleaned.arr_month

/*
Grab the latest values to join to missing subs
*/

), latest_mart_charge_values AS (

    SELECT
        dim_subscription_id,
        is_paid_subscription,
        licensed_user_count
    FROM mart_charge_cleaned
        QUALIFY ROW_NUMBER() OVER (
              PARTITION BY dim_subscription_id
              ORDER BY arr_month DESC) = 1

/*
This CTE below grabs the missing installation/subs for each month missing from arr_counts_joined (latest_subs) where there are actual pings from that install/sub combo)
*/

), missing_subs AS (

    SELECT
        ping_created_date_month                 AS ping_created_date_month,
        dim_installation_id                     AS dim_installation_id,
        latest_subscription_id                  AS latest_subscription_id,
        ping_edition                            AS ping_edition,
        version_is_prerelease                   AS version_is_prerelease,
        MAX(major_minor_version_id)             AS major_minor_version_id,
        MAX(instance_user_count)                AS instance_user_count,
        COUNT(DISTINCT(dim_ping_instance_id))   AS ping_count
    FROM mart_ping_instance_metric
        WHERE is_last_ping_of_month = TRUE
          AND CONCAT(latest_subscription_id, to_varchar(ping_created_date_month)) NOT IN
            (SELECT DISTINCT(CONCAT(latest_subscription_id, to_varchar(ping_created_date_month))) FROM arr_counts_joined)
          {{ dbt_utils.group_by(n=5)}}

/*
Join to capture missing metrics, uses the last value found for these in fct_charge
*/

), missing_subs_joined AS (

    SELECT
        missing_subs.*,
        latest_mart_charge_values.licensed_user_count         AS licensed_user_count,
        latest_mart_charge_values.is_paid_subscription        AS is_paid_subscription,
        TRUE                                                  AS is_missing_charge_subscription
    FROM missing_subs
        INNER JOIN latest_mart_charge_values
    ON missing_subs.latest_subscription_id = latest_mart_charge_values.dim_subscription_id

), latest_subs_unioned AS (

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM arr_counts_joined

        UNION ALL

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM missing_subs_joined

), final AS (

    SELECT
        {{ dbt_utils.surrogate_key(['ping_created_date_month', 'latest_subscription_id', 'dim_installation_id', 'ping_edition', 'version_is_prerelease']) }}                      AS ping_latest_subscriptions_monthly_id,
        latest_subs_unioned.ping_created_date_month                                                                                                                               AS ping_created_date_month,
        latest_subs_unioned.dim_installation_id                                                                                                                                   AS dim_installation_id,
        latest_subs_unioned.latest_subscription_id                                                                                                                                AS latest_subscription_id,
        latest_subs_unioned.ping_edition                                                                                                                                          AS ping_edition,
        latest_subs_unioned.version_is_prerelease                                                                                                                                 AS version_is_prerelease,
        latest_subs_unioned.major_minor_version_id                                                                                                                                AS major_minor_version_id,
        latest_subs_unioned.instance_user_count                                                                                                                                   AS instance_user_count,
        FLOOR(latest_subs_unioned.licensed_user_count)                                                                                                                            AS licensed_user_count,
        latest_subs_unioned.is_paid_subscription                                                                                                                                  AS is_paid_subscription,
        IFNULL(latest_subs_unioned.ping_count, 0)                                                                                                                                 AS ping_count,
        IFF(latest_subs_unioned.ping_edition IS NULL, FALSE, TRUE)                                                                                                                AS has_sent_pings,
        latest_subs_unioned.is_missing_charge_subscription                                                                                                                        AS is_missing_charge_subscription
    FROM latest_subs_unioned
      WHERE ping_created_date_month < DATE_TRUNC('month', CURRENT_DATE)

)

 {{ dbt_audit(
     cte_ref="final",
     created_by="@icooper-acp",
     updated_by="@jpeguero",
     created_date="2022-05-05",
     updated_date="2022-12-15"
 ) }}5c:Tb7b, **Description:** Self-Managed subscriptions by month and installation (if the subscription sent a ping that month). For xMAU/PI reporting, this model is used to determine the total number of active Self-Managed subscriptions on a given month and what percent of subscriptions sent a ping from a given version. It can also be used to determine what percent of subscriptions sent a ping on a given month, etc. 
- The version an installation is reporting on (major_minor_version_id), seat count (licensed_user_count), and count of pings sent that month (ping_count) are also included
- Unpaid subscriptions (ex: OSS, EDU) are _included_ in this model

**Data Grain:**
- ping_created_date_month
- latest_subscription_id
- dim_installation_id (only populated if subscription sent a ping that month)

_Important caveat:_ The grain of this model is slightly different depending on whether a subscription sent a ping that month. It is advised to look at the `MAX()` value, grouped by `latest_subscription_id`.
- If a subscription sent a ping that month, there is 1 record per subscription per installation reporting. (Note: a subscription can be associated with > 1 installation, so a single subscription could have multiple records for a given month)
- If a subscription did not send a ping that month, there is 1 record per subscription where `dim_installation_id IS NULL`

Example query

```
WITH subscription_level AS (

  SELECT
    ping_created_date_month,
    latest_subscription_id,
    COUNT(dim_installation_id) AS installation_count,
    MAX(has_sent_pings) AS has_sent_pings,
    MAX(licensed_user_count) AS seat_count
  FROM common_mart_product.rpt_ping_latest_subscriptions_monthly
  GROUP BY 1,2

)

SELECT
  ping_created_date_month,
  COUNT(latest_subscription_id) AS subscription_count,
  COUNT(IFF(has_sent_pings = TRUE, latest_subscription_id, NULL)) AS sent_ping_count,
  DIV0(sent_ping_count, subscription_count) AS subscription_ping_opt_in_rate
FROM subscription_level
GROUP BY 1
ORDER BY 1
;
```

**Filters Applied to Model:**
- Include subscriptions where:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `major_minor_version_id`, `version_is_prerelease`, and `instance_user_count` look at 'Last Ping of the Month' pings
- Exclude the current month

**Business Logic in this Model:**
- If a ping is received from an installation with a license mapped to a subscription but no corresponding record is found in `fct_charge`, a record is still included in the model where `is_missing_charge_subscription = FALSE`. In this case, the most recent record available in `fct_charge` is used to determine the number of seats associated with the subscription.
- For a given month, all records associated with a subscription will have the same seat count (`licensed_user_count`) since that value is tied to the subscription, not an installation 5d:T31f8,



WITH metric_opt_in AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_metric_first_last_versions

), mart_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dim_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_charge

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), mart_ping_instance_metric AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric

), mart_ping_instance_metric_monthly AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric_monthly

)

/*
Determine latest version for each subscription to determine if the potential metric is valid for a given month
*/

, subscriptions_w_versions AS (

  SELECT
      ping_created_date_month           AS ping_created_date_month,
      dim_installation_id               AS dim_installation_id,
      latest_subscription_id            AS latest_subscription_id,
      ping_edition                      AS ping_edition,
      version_is_prerelease             AS version_is_prerelease,
      major_minor_version_id            AS major_minor_version_id,
      instance_user_count               AS instance_user_count
  FROM mart_ping_instance_metric_monthly
      WHERE ping_delivery_type = 'Self-Managed'
      QUALIFY ROW_NUMBER() OVER (
            PARTITION BY ping_created_date_month, latest_subscription_id, dim_installation_id
              ORDER BY major_minor_version_id DESC) = 1

/*
Deduping the mart to ensure instance_user_count isn't counted 2+ times
*/

), deduped_subscriptions_w_versions AS (

    SELECT
        ping_created_date_month           AS ping_created_date_month,
        dim_installation_id               AS dim_installation_id,
        latest_subscription_id            AS latest_subscription_id,
        ping_edition                      AS ping_edition,
        version_is_prerelease             AS version_is_prerelease,
        major_minor_version_id            AS major_minor_version_id,
        MAX(instance_user_count)          AS instance_user_count
    FROM subscriptions_w_versions
      group by 1,2,3,4,5,6
/*
Get the count of pings each month per subscription_name_slugify
*/

), ping_counts AS (

  SELECT
    ping_created_date_month                     AS ping_created_date_month,
    dim_installation_id                         AS dim_installation_id,
    latest_subscription_id                      AS latest_subscription_id,
    COUNT(DISTINCT(dim_ping_instance_id))       AS ping_count
  FROM mart_ping_instance_metric
      group by 1,2,3

/*
Join subscription information with count of pings
*/

), joined_subscriptions AS (

  SELECT
    deduped_subscriptions_w_versions.*,
    ping_counts.ping_count
  FROM deduped_subscriptions_w_versions
    INNER JOIN ping_counts
  ON deduped_subscriptions_w_versions.ping_created_date_month = ping_counts.ping_created_date_month
    AND deduped_subscriptions_w_versions.latest_subscription_id = ping_counts.latest_subscription_id
    AND deduped_subscriptions_w_versions.dim_installation_id = ping_counts.dim_installation_id
/*
Aggregate mart_charge information (used as the basis of truth), this gets rid of host deviation
*/

), mart_charge_cleaned AS (

  SELECT
       dim_date.date_actual               AS arr_month,
       fct_charge.dim_subscription_id     AS dim_subscription_id,
       SUM(quantity)                      AS licensed_user_count,
       IFF(SUM(arr) > 0, TRUE, FALSE)     AS is_paid_subscription
     FROM fct_charge
     INNER JOIN dim_date
        ON effective_start_month <= dim_date.date_actual
        AND (effective_end_month >= dim_date.date_actual OR effective_end_month IS NULL)
        AND dim_date.day_of_month = 1
     INNER JOIN dim_charge
       ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
     INNER JOIN dim_subscription
       ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
     INNER JOIN dim_product_detail
       ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
      WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
        AND subscription_status IN ('Active','Cancelled')
        AND dim_product_detail.product_tier_name != 'Storage'
        AND DATE_TRUNC('MONTH', CURRENT_DATE) > arr_month
      group by 1,2

/*
Join mart_charge information bringing in mart_charge subscriptions which DO NOT appear in ping fact data
*/

), arr_counts_joined AS (

  SELECT
    mart_charge_cleaned.arr_month                                                                           AS ping_created_date_month,
    joined_subscriptions.dim_installation_id                                                                AS dim_installation_id,
    mart_charge_cleaned.dim_subscription_id                                                                 AS latest_subscription_id,
    joined_subscriptions.ping_edition                                                                       AS ping_edition,
    joined_subscriptions.version_is_prerelease                                                              AS version_is_prerelease,
    joined_subscriptions.major_minor_version_id                                                             AS major_minor_version_id,
    joined_subscriptions.instance_user_count                                                                AS instance_user_count,
    mart_charge_cleaned.licensed_user_count                                                                 AS licensed_user_count,
    mart_charge_cleaned.is_paid_subscription                                                                AS is_paid_subscription,
    joined_subscriptions.ping_count                                                                         AS ping_count,
    FALSE                                                                                                   AS is_missing_charge_subscription
  FROM mart_charge_cleaned
    LEFT OUTER JOIN joined_subscriptions
  ON joined_subscriptions.latest_subscription_id = mart_charge_cleaned.dim_subscription_id
      AND joined_subscriptions.ping_created_date_month = mart_charge_cleaned.arr_month

/*
Grab the latest values to join to missing subs
*/

), latest_mart_charge_values AS (

    SELECT
        dim_subscription_id,
        is_paid_subscription,
        licensed_user_count
    FROM mart_charge_cleaned
        QUALIFY ROW_NUMBER() OVER (
              PARTITION BY dim_subscription_id
              ORDER BY arr_month DESC) = 1

/*
This CTE below grabs the missing installation/subs for each month missing from arr_counts_joined (latest_subs) where there are actual pings from that install/sub combo)
*/

), missing_subs AS (

    SELECT
        ping_created_date_month                 AS ping_created_date_month,
        dim_installation_id                     AS dim_installation_id,
        latest_subscription_id                  AS latest_subscription_id,
        ping_edition                            AS ping_edition,
        version_is_prerelease                   AS version_is_prerelease,
        MAX(major_minor_version_id)             AS major_minor_version_id,
        MAX(instance_user_count)                AS instance_user_count,
        COUNT(DISTINCT(dim_ping_instance_id))   AS ping_count
    FROM mart_ping_instance_metric
        WHERE is_last_ping_of_month = TRUE
          AND CONCAT(latest_subscription_id, to_varchar(ping_created_date_month)) NOT IN
            (SELECT DISTINCT(CONCAT(latest_subscription_id, to_varchar(ping_created_date_month))) FROM arr_counts_joined)
          group by 1,2,3,4,5

/*
Join to capture missing metrics, uses the last value found for these in fct_charge
*/

), missing_subs_joined AS (

    SELECT
        missing_subs.*,
        latest_mart_charge_values.licensed_user_count         AS licensed_user_count,
        latest_mart_charge_values.is_paid_subscription        AS is_paid_subscription,
        TRUE                                                  AS is_missing_charge_subscription
    FROM missing_subs
        INNER JOIN latest_mart_charge_values
    ON missing_subs.latest_subscription_id = latest_mart_charge_values.dim_subscription_id

), latest_subs_unioned AS (

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM arr_counts_joined

        UNION ALL

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM missing_subs_joined

), final AS (

    SELECT
        md5(cast(coalesce(cast(ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(latest_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(dim_installation_id as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') || '-' || coalesce(cast(version_is_prerelease as 
    varchar
), '') as 
    varchar
))                      AS ping_latest_subscriptions_monthly_id,
        latest_subs_unioned.ping_created_date_month                                                                                                                               AS ping_created_date_month,
        latest_subs_unioned.dim_installation_id                                                                                                                                   AS dim_installation_id,
        latest_subs_unioned.latest_subscription_id                                                                                                                                AS latest_subscription_id,
        latest_subs_unioned.ping_edition                                                                                                                                          AS ping_edition,
        latest_subs_unioned.version_is_prerelease                                                                                                                                 AS version_is_prerelease,
        latest_subs_unioned.major_minor_version_id                                                                                                                                AS major_minor_version_id,
        latest_subs_unioned.instance_user_count                                                                                                                                   AS instance_user_count,
        FLOOR(latest_subs_unioned.licensed_user_count)                                                                                                                            AS licensed_user_count,
        latest_subs_unioned.is_paid_subscription                                                                                                                                  AS is_paid_subscription,
        IFNULL(latest_subs_unioned.ping_count, 0)                                                                                                                                 AS ping_count,
        IFF(latest_subs_unioned.ping_edition IS NULL, FALSE, TRUE)                                                                                                                AS has_sent_pings,
        latest_subs_unioned.is_missing_charge_subscription                                                                                                                        AS is_missing_charge_subscription
    FROM latest_subs_unioned
      WHERE ping_created_date_month < DATE_TRUNC('month', CURRENT_DATE)

)

 SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-05-05'::DATE        AS model_created_date,
      '2022-12-15'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final5e:Tba06,{{config({
    "materialized": "table",
    "transient": false
  })
}}

{% set renewal_fiscal_years = dbt_utils.get_column_values(
        table=ref('prep_renewal_fiscal_years'),
        where="fiscal_year >= 2019",
        column='fiscal_year',
        order_by='fiscal_year' )%}

{{ simple_cte([
    ('dim_date','dim_date'),
    ('dim_crm_account','dim_crm_account'),
    ('dim_crm_user','dim_crm_user'),
    ('dim_subscription', 'dim_subscription'),
    ('dim_crm_opportunity', 'dim_crm_opportunity'),
    ('fct_crm_opportunity', 'fct_crm_opportunity'),
    ('dim_charge', 'dim_charge'),
    ('fct_charge', 'fct_charge'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_amendment', 'dim_amendment')
]) }}

, dim_subscription_source AS (

    SELECT
      dim_subscription.*,
       CASE
         WHEN LEAD(term_start_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
             = term_start_month THEN TRUE
         ELSE FALSE
       END AS is_dup_term
     FROM dim_subscription
     WHERE
       --data quality, last version is expired with no ARR in mart_arr. Should filter it out completely.
       dim_subscription_id NOT IN ('2c92a0ff5e1dcf14015e3bb595f14eef','2c92a0ff5e1dcf14015e3c191d4f7689','2c92a007644967bc01645d54e7df49a8', '2c92a007644967bc01645d54e9b54a4b', '2c92a0ff5e1dcf1a015e3bf7a32475a5')
       --test subscription
       AND subscription_name != 'Test- New Subscription'
       --data quality, last term not entered with same pattern, sub_name = A-S00022101
       AND dim_subscription_id != '2c92a00f7579c362017588a2de19174a'
       --term dates do not align to the subscription term dates, sub_name = A-S00038937
       AND dim_subscription_id != '2c92a01177472c5201774af57f834a43'
       --data quality, last term not entered with same pattern that fits ATR logic. Edge cases that needs to be filtered out to get to the last term version that should count for this subscription.
       --sub_name = A-S00011774
       AND dim_subscription_id NOT IN ('8a1298657dd7f81d017dde1bd9c03fa8','8a128b317dd7e89a017ddd38a74d3037','8a128b317dd7e89a017ddd38a6052ff0',
                                       '8a128b317dc30baa017dc41e5b0932e9','8a128b317dc30baa017dc41e59dd32be','8a128b317dc30baa017dc41e58b43295',
                                       '2c92a0fd7cc1ab13017cc843195f62fb','2c92a0fd7cc1ab13017cc843186f62da','2c92a0fd7cc1ab13017cc843178162b6',
                                       '2c92a0fd7cc1ab13017cc843164d6292')

), dim_subscription_int AS (

    SELECT
      dim_subscription_source.*,
      CASE
        WHEN LEAD(term_end_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            = term_end_month THEN TRUE
        WHEN LEAD(term_end_month,2) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            = term_end_month THEN TRUE
        WHEN LEAD(subscription_end_fiscal_year) OVER (PARTITION BY subscription_name ORDER BY
            subscription_version) = subscription_end_fiscal_year THEN TRUE
        WHEN LEAD(term_start_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            = term_start_month THEN TRUE
        --check for subsequent subscriptiptions that are backed out
        WHEN LEAD(term_start_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,2) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,3) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,4) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,5) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,6) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,7) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,8) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,9) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,10) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,11) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,12) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,13) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,14) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        ELSE FALSE
      END AS exclude_from_term_sorting
    FROM dim_subscription_source
    WHERE is_dup_term = FALSE

), base_subscriptions AS (

    SELECT
      dim_subscription_id,
      RANK() OVER (PARTITION BY subscription_name, term_start_month ORDER BY subscription_version DESC) AS last_term_version,
      RANK() OVER (PARTITION BY subscription_name ORDER BY subscription_version DESC) AS last_version
    FROM dim_subscription_int
    WHERE exclude_from_term_sorting = FALSE

), dim_subscription_last_term AS (

    SELECT
      dim_subscription.*,
      base_subscriptions.last_version
    FROM dim_subscription
    INNER JOIN base_subscriptions
      ON dim_subscription.dim_subscription_id = base_subscriptions.dim_subscription_id
    WHERE last_term_version = 1

), mart_charge_base AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id                                                        AS dim_charge_id,

      --Natural Key
      dim_charge.subscription_name                                                    AS subscription_name,
      dim_charge.subscription_version                                                 AS subscription_version,
      dim_charge.rate_plan_charge_number                                              AS rate_plan_charge_number,
      dim_charge.rate_plan_charge_version                                             AS rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment                                             AS rate_plan_charge_segment,

      --Charge Information
      dim_charge.rate_plan_name                                                       AS rate_plan_name,
      dim_charge.rate_plan_charge_name                                                AS rate_plan_charge_name,
      dim_charge.rate_plan_charge_description                                         AS rate_plan_charge_description,
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.created_by_id                                                  AS subscription_created_by_id,
      dim_subscription.updated_by_id                                                  AS subscription_updated_by_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.term_start_date,
      dim_subscription.term_end_date,
      dim_subscription.term_start_month,
      dim_subscription.term_end_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.is_single_fiscal_year_term_subscription,
      dim_subscription.term_start_fiscal_year,
      dim_subscription.term_end_fiscal_year,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,

      -- crm account info
      dim_crm_user.dim_crm_user_id                                                    AS dim_crm_user_id,
      dim_crm_user.crm_user_sales_segment                                             AS crm_user_sales_segment,
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,

      --Amendment Information
      dim_subscription.dim_amendment_id_subscription,
      fct_charge.dim_amendment_id_charge,
      dim_amendment_subscription.effective_date                                       AS subscription_amendment_effective_date,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.delta_tcv,
      fct_charge.estimated_total_future_billings
    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), mart_charge AS (

    SELECT mart_charge_base.*
    FROM mart_charge_base
    INNER JOIN dim_subscription_last_term
      ON mart_charge_base.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    WHERE is_included_in_arr_calc = 'TRUE'
      AND mart_charge_base.term_end_month = mart_charge_base.effective_end_month
      AND arr != 0

{% for renewal_fiscal_year in renewal_fiscal_years -%}
), renewal_subscriptions_{{renewal_fiscal_year}} AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_{{renewal_fiscal_year}} AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_{{renewal_fiscal_year}})
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_{{renewal_fiscal_year}})
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_{{renewal_fiscal_year}}.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_{{renewal_fiscal_year}}
      ON mart_charge.subscription_name = renewal_subscriptions_{{renewal_fiscal_year}}.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('{{renewal_fiscal_year}}'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('{{renewal_fiscal_year}}'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '{{renewal_fiscal_year}}'
        )

), agg_charge_term_less_than_equal_12_{{renewal_fiscal_year}} AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_{{renewal_fiscal_year}}
    WHERE current_term <= 12
    {{ dbt_utils.group_by(n=23) }}

), agg_charge_term_greater_than_12_{{renewal_fiscal_year}} AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_{{renewal_fiscal_year}}
    WHERE current_term > 12
    {{ dbt_utils.group_by(n=23) }}

), twenty_four_mth_term_{{renewal_fiscal_year}} AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

), thirty_six_mth_term_{{renewal_fiscal_year}} AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}
    ORDER BY 1

), forty_eight_mth_term_{{renewal_fiscal_year}} AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}
    ORDER BY 1

), sixty_mth_term_{{renewal_fiscal_year}} AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('{{renewal_fiscal_year}}','-01-01')
    {{ dbt_utils.group_by(n=23) }}
    ORDER BY 1

), combined_{{renewal_fiscal_year}} AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_{{renewal_fiscal_year}}

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_{{renewal_fiscal_year}}

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_{{renewal_fiscal_year}}

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_{{renewal_fiscal_year}}

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_{{renewal_fiscal_year}}

    UNION ALL

    SELECT *
    FROM sixty_mth_term_{{renewal_fiscal_year}}

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_{{renewal_fiscal_year}} AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_{{renewal_fiscal_year}}.term_end_month, base_{{renewal_fiscal_year}}.dim_charge_id)      AS concat_primary_key,
      {{ dbt_utils.surrogate_key(['concat_primary_key' ]) }}                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_{{renewal_fiscal_year}}.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_{{renewal_fiscal_year}}.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_{{renewal_fiscal_year}}.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_{{renewal_fiscal_year}}.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_{{renewal_fiscal_year}}.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_{{renewal_fiscal_year}}.subscription_name                                                                                        AS subscription_name,
      base_{{renewal_fiscal_year}}.subscription_start_month                                                                                 AS subscription_start_month,
      base_{{renewal_fiscal_year}}.subscription_end_month                                                                                   AS subscription_end_month,
      base_{{renewal_fiscal_year}}.term_start_month                                                                                         AS term_start_month,
      base_{{renewal_fiscal_year}}.term_end_month                                                                                           AS renewal_month,
      combined_{{renewal_fiscal_year}}.term_end_month                                                                                       AS bookings_term_end_month,
      base_{{renewal_fiscal_year}}.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_{{renewal_fiscal_year}}.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_{{renewal_fiscal_year}}.current_term                                                                                             AS current_term,
      renewal_subscriptions_{{renewal_fiscal_year}}.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_{{renewal_fiscal_year}}.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_{{renewal_fiscal_year}}.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_{{renewal_fiscal_year}}.crm_account_name                                                                                         AS crm_account_name,
      base_{{renewal_fiscal_year}}.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_{{renewal_fiscal_year}}.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_{{renewal_fiscal_year}}.user_name                                                                                                AS user_name,
      base_{{renewal_fiscal_year}}.user_role_id                                                                                             AS user_role_id,
      base_{{renewal_fiscal_year}}.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_{{renewal_fiscal_year}}.crm_user_geo                                                                                             AS crm_user_geo,
      base_{{renewal_fiscal_year}}.crm_user_region                                                                                          AS crm_user_region,
      base_{{renewal_fiscal_year}}.crm_user_area                                                                                            AS crm_user_area,
      base_{{renewal_fiscal_year}}.product_tier_name                                                                                        AS product_tier_name,
      base_{{renewal_fiscal_year}}.product_delivery_type                                                                                    AS product_delivery_type,
      combined_{{renewal_fiscal_year}}.renewal_type                                                                                         AS renewal_type,
      base_{{renewal_fiscal_year}}.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_{{renewal_fiscal_year}}.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_{{renewal_fiscal_year}}.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_{{renewal_fiscal_year}}.current_term                                                                                             AS subscription_term,
      base_{{renewal_fiscal_year}}.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_{{renewal_fiscal_year}}.term_end_month BETWEEN DATEADD('month',1, CONCAT('{{renewal_fiscal_year}}'-1,'-01-01'))
          AND CONCAT('{{renewal_fiscal_year}}','-01-01')
            AND base_{{renewal_fiscal_year}}.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_{{renewal_fiscal_year}}.arr                                                                                                      AS arr
    FROM combined_{{renewal_fiscal_year}}
    LEFT JOIN dim_date
      ON combined_{{renewal_fiscal_year}}.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_{{renewal_fiscal_year}}
      ON combined_{{renewal_fiscal_year}}.dim_charge_id = base_{{renewal_fiscal_year}}.dim_charge_id
    LEFT JOIN renewal_subscriptions_{{renewal_fiscal_year}}
      ON base_{{renewal_fiscal_year}}.subscription_name = renewal_subscriptions_{{renewal_fiscal_year}}.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_{{renewal_fiscal_year}}.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_{{renewal_fiscal_year}}.term_end_month BETWEEN DATEADD('month',1, CONCAT('{{renewal_fiscal_year}}'-1,'-01-01'))
      AND CONCAT('{{renewal_fiscal_year}}','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

{% endfor -%}
), unioned as (

{% for renewal_fiscal_year in renewal_fiscal_years-%}

    SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_{{renewal_fiscal_year}}
    {%- if not loop.last %} UNION ALL {%- endif %}

{% endfor -%}

)

{{ dbt_audit(
    cte_ref="unioned",
    created_by="@michellecooper",
    updated_by="@nmcavinue",
    created_date="2021-12-06",
    updated_date="2023-05-30"
) }}5f:T4f7ad,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_crm_user AS (

    SELECT * 
    FROM "PROD".common.dim_crm_user

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_crm_opportunity AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_opportunity

), fct_crm_opportunity AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_crm_opportunity

), dim_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_charge

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_amendment AS (

    SELECT * 
    FROM "PROD".common.dim_amendment

)

, dim_subscription_source AS (

    SELECT
      dim_subscription.*,
       CASE
         WHEN LEAD(term_start_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
             = term_start_month THEN TRUE
         ELSE FALSE
       END AS is_dup_term
     FROM dim_subscription
     WHERE
       --data quality, last version is expired with no ARR in mart_arr. Should filter it out completely.
       dim_subscription_id NOT IN ('2c92a0ff5e1dcf14015e3bb595f14eef','2c92a0ff5e1dcf14015e3c191d4f7689','2c92a007644967bc01645d54e7df49a8', '2c92a007644967bc01645d54e9b54a4b', '2c92a0ff5e1dcf1a015e3bf7a32475a5')
       --test subscription
       AND subscription_name != 'Test- New Subscription'
       --data quality, last term not entered with same pattern, sub_name = A-S00022101
       AND dim_subscription_id != '2c92a00f7579c362017588a2de19174a'
       --term dates do not align to the subscription term dates, sub_name = A-S00038937
       AND dim_subscription_id != '2c92a01177472c5201774af57f834a43'
       --data quality, last term not entered with same pattern that fits ATR logic. Edge cases that needs to be filtered out to get to the last term version that should count for this subscription.
       --sub_name = A-S00011774
       AND dim_subscription_id NOT IN ('8a1298657dd7f81d017dde1bd9c03fa8','8a128b317dd7e89a017ddd38a74d3037','8a128b317dd7e89a017ddd38a6052ff0',
                                       '8a128b317dc30baa017dc41e5b0932e9','8a128b317dc30baa017dc41e59dd32be','8a128b317dc30baa017dc41e58b43295',
                                       '2c92a0fd7cc1ab13017cc843195f62fb','2c92a0fd7cc1ab13017cc843186f62da','2c92a0fd7cc1ab13017cc843178162b6',
                                       '2c92a0fd7cc1ab13017cc843164d6292')

), dim_subscription_int AS (

    SELECT
      dim_subscription_source.*,
      CASE
        WHEN LEAD(term_end_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            = term_end_month THEN TRUE
        WHEN LEAD(term_end_month,2) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            = term_end_month THEN TRUE
        WHEN LEAD(subscription_end_fiscal_year) OVER (PARTITION BY subscription_name ORDER BY
            subscription_version) = subscription_end_fiscal_year THEN TRUE
        WHEN LEAD(term_start_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            = term_start_month THEN TRUE
        --check for subsequent subscriptiptions that are backed out
        WHEN LEAD(term_start_month) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,2) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,3) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,4) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,5) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,6) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,7) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,8) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,9) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,10) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,11) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,12) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,13) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        WHEN LEAD(term_start_month,14) OVER (PARTITION BY subscription_name ORDER BY subscription_version)
            < term_start_month THEN TRUE
        ELSE FALSE
      END AS exclude_from_term_sorting
    FROM dim_subscription_source
    WHERE is_dup_term = FALSE

), base_subscriptions AS (

    SELECT
      dim_subscription_id,
      RANK() OVER (PARTITION BY subscription_name, term_start_month ORDER BY subscription_version DESC) AS last_term_version,
      RANK() OVER (PARTITION BY subscription_name ORDER BY subscription_version DESC) AS last_version
    FROM dim_subscription_int
    WHERE exclude_from_term_sorting = FALSE

), dim_subscription_last_term AS (

    SELECT
      dim_subscription.*,
      base_subscriptions.last_version
    FROM dim_subscription
    INNER JOIN base_subscriptions
      ON dim_subscription.dim_subscription_id = base_subscriptions.dim_subscription_id
    WHERE last_term_version = 1

), mart_charge_base AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id                                                        AS dim_charge_id,

      --Natural Key
      dim_charge.subscription_name                                                    AS subscription_name,
      dim_charge.subscription_version                                                 AS subscription_version,
      dim_charge.rate_plan_charge_number                                              AS rate_plan_charge_number,
      dim_charge.rate_plan_charge_version                                             AS rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment                                             AS rate_plan_charge_segment,

      --Charge Information
      dim_charge.rate_plan_name                                                       AS rate_plan_name,
      dim_charge.rate_plan_charge_name                                                AS rate_plan_charge_name,
      dim_charge.rate_plan_charge_description                                         AS rate_plan_charge_description,
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.created_by_id                                                  AS subscription_created_by_id,
      dim_subscription.updated_by_id                                                  AS subscription_updated_by_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.term_start_date,
      dim_subscription.term_end_date,
      dim_subscription.term_start_month,
      dim_subscription.term_end_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.is_single_fiscal_year_term_subscription,
      dim_subscription.term_start_fiscal_year,
      dim_subscription.term_end_fiscal_year,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,

      -- crm account info
      dim_crm_user.dim_crm_user_id                                                    AS dim_crm_user_id,
      dim_crm_user.crm_user_sales_segment                                             AS crm_user_sales_segment,
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,

      --Amendment Information
      dim_subscription.dim_amendment_id_subscription,
      fct_charge.dim_amendment_id_charge,
      dim_amendment_subscription.effective_date                                       AS subscription_amendment_effective_date,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.delta_tcv,
      fct_charge.estimated_total_future_billings
    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'

), mart_charge AS (

    SELECT mart_charge_base.*
    FROM mart_charge_base
    INNER JOIN dim_subscription_last_term
      ON mart_charge_base.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    WHERE is_included_in_arr_calc = 'TRUE'
      AND mart_charge_base.term_end_month = mart_charge_base.effective_end_month
      AND arr != 0

), renewal_subscriptions_2019 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2019 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2019)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2019)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2019.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2019
      ON mart_charge.subscription_name = renewal_subscriptions_2019.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2019'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2019'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2019'
        )

), agg_charge_term_less_than_equal_12_2019 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2019
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2019 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2019
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2019 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2019 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2019 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2019 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2019
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2019','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2019 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2019

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2019

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2019

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2019

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2019

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2019

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2019 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2019.term_end_month, base_2019.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2019.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2019.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2019.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2019.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2019.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2019.subscription_name                                                                                        AS subscription_name,
      base_2019.subscription_start_month                                                                                 AS subscription_start_month,
      base_2019.subscription_end_month                                                                                   AS subscription_end_month,
      base_2019.term_start_month                                                                                         AS term_start_month,
      base_2019.term_end_month                                                                                           AS renewal_month,
      combined_2019.term_end_month                                                                                       AS bookings_term_end_month,
      base_2019.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2019.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2019.current_term                                                                                             AS current_term,
      renewal_subscriptions_2019.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2019.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2019.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2019.crm_account_name                                                                                         AS crm_account_name,
      base_2019.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2019.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2019.user_name                                                                                                AS user_name,
      base_2019.user_role_id                                                                                             AS user_role_id,
      base_2019.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2019.crm_user_geo                                                                                             AS crm_user_geo,
      base_2019.crm_user_region                                                                                          AS crm_user_region,
      base_2019.crm_user_area                                                                                            AS crm_user_area,
      base_2019.product_tier_name                                                                                        AS product_tier_name,
      base_2019.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2019.renewal_type                                                                                         AS renewal_type,
      base_2019.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2019.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2019.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2019.current_term                                                                                             AS subscription_term,
      base_2019.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2019.term_end_month BETWEEN DATEADD('month',1, CONCAT('2019'-1,'-01-01'))
          AND CONCAT('2019','-01-01')
            AND base_2019.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2019.arr                                                                                                      AS arr
    FROM combined_2019
    LEFT JOIN dim_date
      ON combined_2019.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2019
      ON combined_2019.dim_charge_id = base_2019.dim_charge_id
    LEFT JOIN renewal_subscriptions_2019
      ON base_2019.subscription_name = renewal_subscriptions_2019.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2019.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2019.term_end_month BETWEEN DATEADD('month',1, CONCAT('2019'-1,'-01-01'))
      AND CONCAT('2019','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2020 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2020 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2020)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2020)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2020.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2020
      ON mart_charge.subscription_name = renewal_subscriptions_2020.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2020'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2020'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2020'
        )

), agg_charge_term_less_than_equal_12_2020 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2020
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2020 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2020
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2020 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2020 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2020 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2020 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2020
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2020','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2020 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2020

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2020

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2020

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2020

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2020

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2020

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2020 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2020.term_end_month, base_2020.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2020.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2020.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2020.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2020.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2020.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2020.subscription_name                                                                                        AS subscription_name,
      base_2020.subscription_start_month                                                                                 AS subscription_start_month,
      base_2020.subscription_end_month                                                                                   AS subscription_end_month,
      base_2020.term_start_month                                                                                         AS term_start_month,
      base_2020.term_end_month                                                                                           AS renewal_month,
      combined_2020.term_end_month                                                                                       AS bookings_term_end_month,
      base_2020.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2020.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2020.current_term                                                                                             AS current_term,
      renewal_subscriptions_2020.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2020.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2020.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2020.crm_account_name                                                                                         AS crm_account_name,
      base_2020.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2020.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2020.user_name                                                                                                AS user_name,
      base_2020.user_role_id                                                                                             AS user_role_id,
      base_2020.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2020.crm_user_geo                                                                                             AS crm_user_geo,
      base_2020.crm_user_region                                                                                          AS crm_user_region,
      base_2020.crm_user_area                                                                                            AS crm_user_area,
      base_2020.product_tier_name                                                                                        AS product_tier_name,
      base_2020.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2020.renewal_type                                                                                         AS renewal_type,
      base_2020.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2020.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2020.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2020.current_term                                                                                             AS subscription_term,
      base_2020.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2020.term_end_month BETWEEN DATEADD('month',1, CONCAT('2020'-1,'-01-01'))
          AND CONCAT('2020','-01-01')
            AND base_2020.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2020.arr                                                                                                      AS arr
    FROM combined_2020
    LEFT JOIN dim_date
      ON combined_2020.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2020
      ON combined_2020.dim_charge_id = base_2020.dim_charge_id
    LEFT JOIN renewal_subscriptions_2020
      ON base_2020.subscription_name = renewal_subscriptions_2020.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2020.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2020.term_end_month BETWEEN DATEADD('month',1, CONCAT('2020'-1,'-01-01'))
      AND CONCAT('2020','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2021 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2021 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2021)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2021)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2021.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2021
      ON mart_charge.subscription_name = renewal_subscriptions_2021.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2021'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2021'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2021'
        )

), agg_charge_term_less_than_equal_12_2021 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2021
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2021 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2021
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2021 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2021 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2021 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2021 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2021
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2021','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2021 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2021

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2021

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2021

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2021

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2021

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2021

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2021 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2021.term_end_month, base_2021.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2021.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2021.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2021.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2021.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2021.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2021.subscription_name                                                                                        AS subscription_name,
      base_2021.subscription_start_month                                                                                 AS subscription_start_month,
      base_2021.subscription_end_month                                                                                   AS subscription_end_month,
      base_2021.term_start_month                                                                                         AS term_start_month,
      base_2021.term_end_month                                                                                           AS renewal_month,
      combined_2021.term_end_month                                                                                       AS bookings_term_end_month,
      base_2021.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2021.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2021.current_term                                                                                             AS current_term,
      renewal_subscriptions_2021.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2021.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2021.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2021.crm_account_name                                                                                         AS crm_account_name,
      base_2021.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2021.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2021.user_name                                                                                                AS user_name,
      base_2021.user_role_id                                                                                             AS user_role_id,
      base_2021.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2021.crm_user_geo                                                                                             AS crm_user_geo,
      base_2021.crm_user_region                                                                                          AS crm_user_region,
      base_2021.crm_user_area                                                                                            AS crm_user_area,
      base_2021.product_tier_name                                                                                        AS product_tier_name,
      base_2021.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2021.renewal_type                                                                                         AS renewal_type,
      base_2021.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2021.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2021.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2021.current_term                                                                                             AS subscription_term,
      base_2021.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2021.term_end_month BETWEEN DATEADD('month',1, CONCAT('2021'-1,'-01-01'))
          AND CONCAT('2021','-01-01')
            AND base_2021.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2021.arr                                                                                                      AS arr
    FROM combined_2021
    LEFT JOIN dim_date
      ON combined_2021.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2021
      ON combined_2021.dim_charge_id = base_2021.dim_charge_id
    LEFT JOIN renewal_subscriptions_2021
      ON base_2021.subscription_name = renewal_subscriptions_2021.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2021.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2021.term_end_month BETWEEN DATEADD('month',1, CONCAT('2021'-1,'-01-01'))
      AND CONCAT('2021','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2022 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2022 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2022)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2022)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2022.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2022
      ON mart_charge.subscription_name = renewal_subscriptions_2022.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2022'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2022'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2022'
        )

), agg_charge_term_less_than_equal_12_2022 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2022
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2022 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2022
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2022 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2022 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2022 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2022 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2022
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2022','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2022 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2022

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2022

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2022

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2022

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2022

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2022

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2022 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2022.term_end_month, base_2022.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2022.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2022.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2022.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2022.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2022.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2022.subscription_name                                                                                        AS subscription_name,
      base_2022.subscription_start_month                                                                                 AS subscription_start_month,
      base_2022.subscription_end_month                                                                                   AS subscription_end_month,
      base_2022.term_start_month                                                                                         AS term_start_month,
      base_2022.term_end_month                                                                                           AS renewal_month,
      combined_2022.term_end_month                                                                                       AS bookings_term_end_month,
      base_2022.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2022.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2022.current_term                                                                                             AS current_term,
      renewal_subscriptions_2022.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2022.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2022.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2022.crm_account_name                                                                                         AS crm_account_name,
      base_2022.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2022.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2022.user_name                                                                                                AS user_name,
      base_2022.user_role_id                                                                                             AS user_role_id,
      base_2022.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2022.crm_user_geo                                                                                             AS crm_user_geo,
      base_2022.crm_user_region                                                                                          AS crm_user_region,
      base_2022.crm_user_area                                                                                            AS crm_user_area,
      base_2022.product_tier_name                                                                                        AS product_tier_name,
      base_2022.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2022.renewal_type                                                                                         AS renewal_type,
      base_2022.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2022.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2022.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2022.current_term                                                                                             AS subscription_term,
      base_2022.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2022.term_end_month BETWEEN DATEADD('month',1, CONCAT('2022'-1,'-01-01'))
          AND CONCAT('2022','-01-01')
            AND base_2022.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2022.arr                                                                                                      AS arr
    FROM combined_2022
    LEFT JOIN dim_date
      ON combined_2022.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2022
      ON combined_2022.dim_charge_id = base_2022.dim_charge_id
    LEFT JOIN renewal_subscriptions_2022
      ON base_2022.subscription_name = renewal_subscriptions_2022.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2022.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2022.term_end_month BETWEEN DATEADD('month',1, CONCAT('2022'-1,'-01-01'))
      AND CONCAT('2022','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2023 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2023 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2023)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2023)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2023.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2023
      ON mart_charge.subscription_name = renewal_subscriptions_2023.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2023'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2023'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2023'
        )

), agg_charge_term_less_than_equal_12_2023 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2023
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2023 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2023
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2023 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2023 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2023 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2023 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2023
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2023','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2023 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2023

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2023

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2023

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2023

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2023

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2023

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2023 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2023.term_end_month, base_2023.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2023.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2023.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2023.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2023.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2023.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2023.subscription_name                                                                                        AS subscription_name,
      base_2023.subscription_start_month                                                                                 AS subscription_start_month,
      base_2023.subscription_end_month                                                                                   AS subscription_end_month,
      base_2023.term_start_month                                                                                         AS term_start_month,
      base_2023.term_end_month                                                                                           AS renewal_month,
      combined_2023.term_end_month                                                                                       AS bookings_term_end_month,
      base_2023.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2023.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2023.current_term                                                                                             AS current_term,
      renewal_subscriptions_2023.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2023.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2023.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2023.crm_account_name                                                                                         AS crm_account_name,
      base_2023.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2023.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2023.user_name                                                                                                AS user_name,
      base_2023.user_role_id                                                                                             AS user_role_id,
      base_2023.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2023.crm_user_geo                                                                                             AS crm_user_geo,
      base_2023.crm_user_region                                                                                          AS crm_user_region,
      base_2023.crm_user_area                                                                                            AS crm_user_area,
      base_2023.product_tier_name                                                                                        AS product_tier_name,
      base_2023.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2023.renewal_type                                                                                         AS renewal_type,
      base_2023.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2023.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2023.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2023.current_term                                                                                             AS subscription_term,
      base_2023.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2023.term_end_month BETWEEN DATEADD('month',1, CONCAT('2023'-1,'-01-01'))
          AND CONCAT('2023','-01-01')
            AND base_2023.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2023.arr                                                                                                      AS arr
    FROM combined_2023
    LEFT JOIN dim_date
      ON combined_2023.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2023
      ON combined_2023.dim_charge_id = base_2023.dim_charge_id
    LEFT JOIN renewal_subscriptions_2023
      ON base_2023.subscription_name = renewal_subscriptions_2023.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2023.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2023.term_end_month BETWEEN DATEADD('month',1, CONCAT('2023'-1,'-01-01'))
      AND CONCAT('2023','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2024 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2024 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2024)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2024)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2024.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2024
      ON mart_charge.subscription_name = renewal_subscriptions_2024.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2024'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2024'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2024'
        )

), agg_charge_term_less_than_equal_12_2024 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2024
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2024 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2024
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2024 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2024 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2024 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2024 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2024
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2024','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2024 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2024

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2024

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2024

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2024

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2024

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2024

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2024 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2024.term_end_month, base_2024.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2024.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2024.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2024.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2024.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2024.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2024.subscription_name                                                                                        AS subscription_name,
      base_2024.subscription_start_month                                                                                 AS subscription_start_month,
      base_2024.subscription_end_month                                                                                   AS subscription_end_month,
      base_2024.term_start_month                                                                                         AS term_start_month,
      base_2024.term_end_month                                                                                           AS renewal_month,
      combined_2024.term_end_month                                                                                       AS bookings_term_end_month,
      base_2024.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2024.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2024.current_term                                                                                             AS current_term,
      renewal_subscriptions_2024.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2024.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2024.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2024.crm_account_name                                                                                         AS crm_account_name,
      base_2024.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2024.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2024.user_name                                                                                                AS user_name,
      base_2024.user_role_id                                                                                             AS user_role_id,
      base_2024.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2024.crm_user_geo                                                                                             AS crm_user_geo,
      base_2024.crm_user_region                                                                                          AS crm_user_region,
      base_2024.crm_user_area                                                                                            AS crm_user_area,
      base_2024.product_tier_name                                                                                        AS product_tier_name,
      base_2024.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2024.renewal_type                                                                                         AS renewal_type,
      base_2024.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2024.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2024.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2024.current_term                                                                                             AS subscription_term,
      base_2024.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2024.term_end_month BETWEEN DATEADD('month',1, CONCAT('2024'-1,'-01-01'))
          AND CONCAT('2024','-01-01')
            AND base_2024.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2024.arr                                                                                                      AS arr
    FROM combined_2024
    LEFT JOIN dim_date
      ON combined_2024.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2024
      ON combined_2024.dim_charge_id = base_2024.dim_charge_id
    LEFT JOIN renewal_subscriptions_2024
      ON base_2024.subscription_name = renewal_subscriptions_2024.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2024.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2024.term_end_month BETWEEN DATEADD('month',1, CONCAT('2024'-1,'-01-01'))
      AND CONCAT('2024','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2025 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2025 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2025)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2025)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2025.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2025
      ON mart_charge.subscription_name = renewal_subscriptions_2025.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2025'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2025'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2025'
        )

), agg_charge_term_less_than_equal_12_2025 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2025
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2025 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2025
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2025 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2025 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2025 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2025 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2025
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2025','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2025 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2025

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2025

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2025

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2025

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2025

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2025

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2025 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2025.term_end_month, base_2025.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2025.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2025.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2025.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2025.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2025.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2025.subscription_name                                                                                        AS subscription_name,
      base_2025.subscription_start_month                                                                                 AS subscription_start_month,
      base_2025.subscription_end_month                                                                                   AS subscription_end_month,
      base_2025.term_start_month                                                                                         AS term_start_month,
      base_2025.term_end_month                                                                                           AS renewal_month,
      combined_2025.term_end_month                                                                                       AS bookings_term_end_month,
      base_2025.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2025.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2025.current_term                                                                                             AS current_term,
      renewal_subscriptions_2025.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2025.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2025.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2025.crm_account_name                                                                                         AS crm_account_name,
      base_2025.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2025.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2025.user_name                                                                                                AS user_name,
      base_2025.user_role_id                                                                                             AS user_role_id,
      base_2025.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2025.crm_user_geo                                                                                             AS crm_user_geo,
      base_2025.crm_user_region                                                                                          AS crm_user_region,
      base_2025.crm_user_area                                                                                            AS crm_user_area,
      base_2025.product_tier_name                                                                                        AS product_tier_name,
      base_2025.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2025.renewal_type                                                                                         AS renewal_type,
      base_2025.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2025.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2025.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2025.current_term                                                                                             AS subscription_term,
      base_2025.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2025.term_end_month BETWEEN DATEADD('month',1, CONCAT('2025'-1,'-01-01'))
          AND CONCAT('2025','-01-01')
            AND base_2025.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2025.arr                                                                                                      AS arr
    FROM combined_2025
    LEFT JOIN dim_date
      ON combined_2025.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2025
      ON combined_2025.dim_charge_id = base_2025.dim_charge_id
    LEFT JOIN renewal_subscriptions_2025
      ON base_2025.subscription_name = renewal_subscriptions_2025.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2025.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2025.term_end_month BETWEEN DATEADD('month',1, CONCAT('2025'-1,'-01-01'))
      AND CONCAT('2025','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2026 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2026 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2026)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2026)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2026.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2026
      ON mart_charge.subscription_name = renewal_subscriptions_2026.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2026'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2026'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2026'
        )

), agg_charge_term_less_than_equal_12_2026 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2026
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2026 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2026
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2026 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2026 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2026 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2026 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2026
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2026','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2026 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2026

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2026

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2026

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2026

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2026

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2026

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2026 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2026.term_end_month, base_2026.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2026.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2026.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2026.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2026.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2026.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2026.subscription_name                                                                                        AS subscription_name,
      base_2026.subscription_start_month                                                                                 AS subscription_start_month,
      base_2026.subscription_end_month                                                                                   AS subscription_end_month,
      base_2026.term_start_month                                                                                         AS term_start_month,
      base_2026.term_end_month                                                                                           AS renewal_month,
      combined_2026.term_end_month                                                                                       AS bookings_term_end_month,
      base_2026.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2026.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2026.current_term                                                                                             AS current_term,
      renewal_subscriptions_2026.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2026.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2026.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2026.crm_account_name                                                                                         AS crm_account_name,
      base_2026.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2026.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2026.user_name                                                                                                AS user_name,
      base_2026.user_role_id                                                                                             AS user_role_id,
      base_2026.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2026.crm_user_geo                                                                                             AS crm_user_geo,
      base_2026.crm_user_region                                                                                          AS crm_user_region,
      base_2026.crm_user_area                                                                                            AS crm_user_area,
      base_2026.product_tier_name                                                                                        AS product_tier_name,
      base_2026.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2026.renewal_type                                                                                         AS renewal_type,
      base_2026.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2026.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2026.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2026.current_term                                                                                             AS subscription_term,
      base_2026.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2026.term_end_month BETWEEN DATEADD('month',1, CONCAT('2026'-1,'-01-01'))
          AND CONCAT('2026','-01-01')
            AND base_2026.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2026.arr                                                                                                      AS arr
    FROM combined_2026
    LEFT JOIN dim_date
      ON combined_2026.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2026
      ON combined_2026.dim_charge_id = base_2026.dim_charge_id
    LEFT JOIN renewal_subscriptions_2026
      ON base_2026.subscription_name = renewal_subscriptions_2026.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2026.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2026.term_end_month BETWEEN DATEADD('month',1, CONCAT('2026'-1,'-01-01'))
      AND CONCAT('2026','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2027 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2027 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2027)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2027)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2027.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2027
      ON mart_charge.subscription_name = renewal_subscriptions_2027.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2027'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2027'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2027'
        )

), agg_charge_term_less_than_equal_12_2027 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2027
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2027 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2027
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2027 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2027 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2027 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2027 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2027
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2027','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2027 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2027

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2027

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2027

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2027

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2027

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2027

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2027 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2027.term_end_month, base_2027.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2027.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2027.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2027.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2027.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2027.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2027.subscription_name                                                                                        AS subscription_name,
      base_2027.subscription_start_month                                                                                 AS subscription_start_month,
      base_2027.subscription_end_month                                                                                   AS subscription_end_month,
      base_2027.term_start_month                                                                                         AS term_start_month,
      base_2027.term_end_month                                                                                           AS renewal_month,
      combined_2027.term_end_month                                                                                       AS bookings_term_end_month,
      base_2027.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2027.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2027.current_term                                                                                             AS current_term,
      renewal_subscriptions_2027.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2027.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2027.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2027.crm_account_name                                                                                         AS crm_account_name,
      base_2027.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2027.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2027.user_name                                                                                                AS user_name,
      base_2027.user_role_id                                                                                             AS user_role_id,
      base_2027.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2027.crm_user_geo                                                                                             AS crm_user_geo,
      base_2027.crm_user_region                                                                                          AS crm_user_region,
      base_2027.crm_user_area                                                                                            AS crm_user_area,
      base_2027.product_tier_name                                                                                        AS product_tier_name,
      base_2027.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2027.renewal_type                                                                                         AS renewal_type,
      base_2027.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2027.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2027.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2027.current_term                                                                                             AS subscription_term,
      base_2027.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2027.term_end_month BETWEEN DATEADD('month',1, CONCAT('2027'-1,'-01-01'))
          AND CONCAT('2027','-01-01')
            AND base_2027.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2027.arr                                                                                                      AS arr
    FROM combined_2027
    LEFT JOIN dim_date
      ON combined_2027.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2027
      ON combined_2027.dim_charge_id = base_2027.dim_charge_id
    LEFT JOIN renewal_subscriptions_2027
      ON base_2027.subscription_name = renewal_subscriptions_2027.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2027.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2027.term_end_month BETWEEN DATEADD('month',1, CONCAT('2027'-1,'-01-01'))
      AND CONCAT('2027','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2028 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2028 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2028)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2028)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2028.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2028
      ON mart_charge.subscription_name = renewal_subscriptions_2028.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2028'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2028'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2028'
        )

), agg_charge_term_less_than_equal_12_2028 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2028
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2028 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2028
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2028 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2028 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2028 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2028 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2028
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2028','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2028 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2028

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2028

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2028

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2028

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2028

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2028

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2028 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2028.term_end_month, base_2028.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2028.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2028.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2028.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2028.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2028.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2028.subscription_name                                                                                        AS subscription_name,
      base_2028.subscription_start_month                                                                                 AS subscription_start_month,
      base_2028.subscription_end_month                                                                                   AS subscription_end_month,
      base_2028.term_start_month                                                                                         AS term_start_month,
      base_2028.term_end_month                                                                                           AS renewal_month,
      combined_2028.term_end_month                                                                                       AS bookings_term_end_month,
      base_2028.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2028.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2028.current_term                                                                                             AS current_term,
      renewal_subscriptions_2028.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2028.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2028.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2028.crm_account_name                                                                                         AS crm_account_name,
      base_2028.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2028.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2028.user_name                                                                                                AS user_name,
      base_2028.user_role_id                                                                                             AS user_role_id,
      base_2028.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2028.crm_user_geo                                                                                             AS crm_user_geo,
      base_2028.crm_user_region                                                                                          AS crm_user_region,
      base_2028.crm_user_area                                                                                            AS crm_user_area,
      base_2028.product_tier_name                                                                                        AS product_tier_name,
      base_2028.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2028.renewal_type                                                                                         AS renewal_type,
      base_2028.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2028.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2028.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2028.current_term                                                                                             AS subscription_term,
      base_2028.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2028.term_end_month BETWEEN DATEADD('month',1, CONCAT('2028'-1,'-01-01'))
          AND CONCAT('2028','-01-01')
            AND base_2028.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2028.arr                                                                                                      AS arr
    FROM combined_2028
    LEFT JOIN dim_date
      ON combined_2028.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2028
      ON combined_2028.dim_charge_id = base_2028.dim_charge_id
    LEFT JOIN renewal_subscriptions_2028
      ON base_2028.subscription_name = renewal_subscriptions_2028.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2028.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2028.term_end_month BETWEEN DATEADD('month',1, CONCAT('2028'-1,'-01-01'))
      AND CONCAT('2028','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), renewal_subscriptions_2029 AS (

    SELECT DISTINCT
      sub_1.subscription_name,
      sub_1.zuora_renewal_subscription_name,
      DATE_TRUNC('month',sub_2.subscription_end_date) AS subscription_end_month
    FROM dim_subscription_last_term sub_1
    INNER JOIN dim_subscription_last_term sub_2
      ON sub_1.zuora_renewal_subscription_name = sub_2.subscription_name
    WHERE sub_1.zuora_renewal_subscription_name != ''
      AND sub_1.last_version = 1
      AND sub_2.last_version = 1

), base_2029 AS (--get the base data set of recurring charges.

    SELECT
      mart_charge.dim_charge_id,
      mart_charge.dim_crm_account_id,
      mart_charge.dim_billing_account_id,
      mart_charge.dim_subscription_id,
      mart_charge.dim_product_detail_id,
      mart_charge.parent_crm_account_name,
      mart_charge.crm_account_name,
      mart_charge.parent_crm_account_sales_segment,
      dim_crm_user.dim_crm_user_id,
      dim_crm_user.user_name,
      dim_crm_user.user_role_id,
      dim_crm_user.crm_user_sales_segment,
      dim_crm_user.crm_user_geo,
      dim_crm_user.crm_user_region,
      dim_crm_user.crm_user_area,
      mart_charge.product_tier_name,
      mart_charge.product_delivery_type,
      mart_charge.subscription_name,
      dim_subscription_last_term.zuora_renewal_subscription_name,
      dim_subscription_last_term.current_term,
      mart_charge.is_single_fiscal_year_term_subscription,
      CASE
        WHEN dim_subscription_last_term.current_term >= 24
          THEN TRUE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2029)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking,
      CASE
        WHEN dim_subscription_last_term.subscription_name IN (SELECT DISTINCT subscription_name FROM renewal_subscriptions_2029)
          THEN TRUE
        ELSE FALSE
      END                                                                                                                                               AS is_multi_year_booking_with_multi_subs,
      mart_charge.is_paid_in_full,
      mart_charge.estimated_total_future_billings,
      mart_charge.effective_start_month,
      mart_charge.effective_end_month,
      mart_charge.subscription_start_month,
      mart_charge.subscription_end_month,
      mart_charge.term_start_month,
      mart_charge.term_end_month,
      DATEADD('month',-1,mart_charge.term_end_month)                                                                                                    AS last_paid_month_in_term,
      renewal_subscriptions_2029.subscription_end_month                                                                              AS multi_year_booking_subscription_end_month,
      DATEDIFF(month,mart_charge.effective_start_month,mart_charge.effective_end_month)                                                                 AS charge_term,
      mart_charge.arr
    FROM mart_charge
    LEFT JOIN dim_subscription_last_term
      ON mart_charge.dim_subscription_id = dim_subscription_last_term.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON mart_charge.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN renewal_subscriptions_2029
      ON mart_charge.subscription_name = renewal_subscriptions_2029.subscription_name
    WHERE ( mart_charge.term_start_month <= CONCAT('2029'-1,'-01-01')
      AND mart_charge.term_end_month > CONCAT('2029'-1,'-01-01')
      )
      OR (
          mart_charge.is_single_fiscal_year_term_subscription = TRUE
          AND mart_charge.term_start_fiscal_year = '2029'
        )

), agg_charge_term_less_than_equal_12_2029 AS (--get the starting and ending month ARR for charges with current terms <= 12 months. These terms do not need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                             AS renewal_type,
      is_single_fiscal_year_term_subscription,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      current_term,
      --charge_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)   AS arr
    FROM base_2029
    WHERE current_term <= 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), agg_charge_term_greater_than_12_2029 AS (--get the starting and ending month ARR for terms > 12 months. These terms need additional logic.

    SELECT
      CASE
        WHEN is_multi_year_booking = TRUE THEN 'MYB'
        ELSE 'Non-MYB'
      END                                   AS renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      --current_term,
      CASE--the below odd term charges do not behave well in the multi-year bookings logic and end up with duplicate renewals in the fiscal year. This CASE statement smooths out the charges so they only have one renewal entry in the fiscal year.
        WHEN current_term = 25 THEN 24
        WHEN current_term = 26 THEN 24
        WHEN current_term = 27 THEN 36
        WHEN current_term = 28 THEN 36
        WHEN current_term = 29 THEN 36
        WHEN current_term = 30 THEN 36
        WHEN current_term = 31 THEN 36
        WHEN current_term = 32 THEN 36
        WHEN current_term = 35 THEN 36
        WHEN current_term = 37 THEN 36
        WHEN current_term = 38 THEN 36
        WHEN current_term = 41 THEN 36
        WHEN current_term = 42 THEN 48
        WHEN current_term = 49 THEN 48
        WHEN current_term = 57 THEN 60
        ELSE current_term
      END                                   AS current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      term_end_month,
      subscription_end_month,
      SUM(arr)                              AS arr
    FROM base_2029
    WHERE current_term > 12
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), twenty_four_mth_term_2029 AS (--create records for the intermitent renewals for multi-year charges that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/2,term_start_month)  AS term_end_month,
      subscription_end_month,
      SUM(arr)                                          AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 13 AND 24
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), thirty_six_mth_term_2029 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_myb for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/3*2,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 25 AND 36
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), forty_eight_mth_term_2029 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4,term_start_month)      AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/4*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 37 AND 48
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), sixty_mth_term_2029 AS (--create records for the intermitent renewals for multi-year bookings that are not in the Zuora data. The start and end months are in the agg_MYB for multi-year bookings.

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5,term_start_month)          AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*2,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*3,term_start_month)        AS term_end_month,
      subscription_end_month,
      SUM(arr)                                                  AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 49 AND 60
      AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

    UNION ALL

    SELECT
      renewal_type,
      is_multi_year_booking,
      is_multi_year_booking_with_multi_subs,
      is_single_fiscal_year_term_subscription,
      current_term,
      dim_charge_id,
      dim_crm_account_id,
      dim_billing_account_id,
      dim_subscription_id,
      dim_crm_user_id,
      user_name,
      user_role_id,
      crm_user_sales_segment,
      crm_user_geo,
      crm_user_region,
      crm_user_area,
      dim_product_detail_id,
      product_tier_name,
      product_delivery_type,
      subscription_name,
      term_start_month,
      DATEADD('month',current_term/5*4,term_start_month)    AS term_end_month,
      subscription_end_month,
      SUM(arr)                                              AS arr
    FROM agg_charge_term_greater_than_12_2029
    WHERE current_term BETWEEN 49 AND 60 AND term_end_month > CONCAT('2029','-01-01')
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
    ORDER BY 1

), combined_2029 AS (--union all of the charges

    SELECT *
    FROM agg_charge_term_less_than_equal_12_2029

    UNION ALL

    SELECT *
    FROM agg_charge_term_greater_than_12_2029

    UNION ALL

    SELECT *
    FROM twenty_four_mth_term_2029

    UNION ALL

    SELECT *
    FROM thirty_six_mth_term_2029

    UNION ALL

    SELECT *
    FROM forty_eight_mth_term_2029

    UNION ALL

    SELECT *
    FROM sixty_mth_term_2029

), opportunity_term_group AS (

    SELECT
      dim_subscription.dim_subscription_id,
      dim_crm_opportunity.dim_crm_opportunity_id,
      CASE
        WHEN close_date IS NULL THEN '1951-01-01'
        ELSE DATE_TRUNC('month',close_date)
      END                                     AS close_month,
      CASE
        WHEN dim_crm_opportunity.opportunity_term = 0
          THEN '0 Years'
        WHEN dim_crm_opportunity.opportunity_term <= 12
          THEN '1 Year'
        WHEN dim_crm_opportunity.opportunity_term > 12
          AND dim_crm_opportunity.opportunity_term <= 24
            THEN '2 Years'
        WHEN dim_crm_opportunity.opportunity_term > 24
          AND dim_crm_opportunity.opportunity_term <= 36
            THEN '3 Years'
        WHEN dim_crm_opportunity.opportunity_term > 36
          THEN '4 Years+'
        WHEN dim_crm_opportunity.opportunity_term IS NULL
          THEN 'No Opportunity Term'
      END                                                                                                               AS opportunity_term_group
    FROM dim_subscription
    LEFT JOIN dim_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = dim_crm_opportunity.dim_crm_opportunity_id
    LEFT JOIN fct_crm_opportunity
      ON dim_subscription.dim_crm_opportunity_id = fct_crm_opportunity.dim_crm_opportunity_id

), renewal_report_2029 AS (--create the renewal report for the applicable fiscal year.

    SELECT
      CONCAT(dim_date.fiscal_quarter_name_fy, base_2029.term_end_month, base_2029.dim_charge_id)      AS concat_primary_key,
      md5(cast(coalesce(cast(concat_primary_key as 
    varchar
), '') as 
    varchar
))                                                                                AS primary_key,
      dim_date.fiscal_year                                                                                                                  AS fiscal_year,
      dim_date.fiscal_quarter_name_fy                                                                                                       AS fiscal_quarter_name_fy,
      opportunity_term_group.close_month                                                                                                    AS close_month,
      base_2029.dim_charge_id                                                                                            AS dim_charge_id,
      opportunity_term_group.dim_crm_opportunity_id                                                                                         AS dim_crm_opportunity_id,
      base_2029.dim_crm_account_id                                                                                       AS dim_crm_account_id,
      base_2029.dim_billing_account_id                                                                                   AS dim_billing_account_id,
      base_2029.dim_subscription_id                                                                                      AS dim_subscription_id,
      base_2029.dim_product_detail_id                                                                                    AS dim_product_detail_id,
      base_2029.subscription_name                                                                                        AS subscription_name,
      base_2029.subscription_start_month                                                                                 AS subscription_start_month,
      base_2029.subscription_end_month                                                                                   AS subscription_end_month,
      base_2029.term_start_month                                                                                         AS term_start_month,
      base_2029.term_end_month                                                                                           AS renewal_month,
      combined_2029.term_end_month                                                                                       AS bookings_term_end_month,
      base_2029.multi_year_booking_subscription_end_month                                                                AS multi_year_booking_subscription_end_month,
      base_2029.last_paid_month_in_term                                                                                  AS last_paid_month_in_term,
      base_2029.current_term                                                                                             AS current_term,
      renewal_subscriptions_2029.zuora_renewal_subscription_name                                                         AS zuora_renewal_subscription_name,
      renewal_subscriptions_2029.subscription_end_month                                                                  AS renewal_subscription_end_month,
      base_2029.parent_crm_account_name                                                                                  AS parent_crm_account_name,
      base_2029.crm_account_name                                                                                         AS crm_account_name,
      base_2029.parent_crm_account_sales_segment                                                                         AS parent_crm_account_sales_segment,
      base_2029.dim_crm_user_id                                                                                          AS dim_crm_user_id,
      base_2029.user_name                                                                                                AS user_name,
      base_2029.user_role_id                                                                                             AS user_role_id,
      base_2029.crm_user_sales_segment                                                                                   AS crm_user_sales_segment,
      base_2029.crm_user_geo                                                                                             AS crm_user_geo,
      base_2029.crm_user_region                                                                                          AS crm_user_region,
      base_2029.crm_user_area                                                                                            AS crm_user_area,
      base_2029.product_tier_name                                                                                        AS product_tier_name,
      base_2029.product_delivery_type                                                                                    AS product_delivery_type,
      combined_2029.renewal_type                                                                                         AS renewal_type,
      base_2029.is_multi_year_booking                                                                                    AS is_multi_year_booking,
      base_2029.is_multi_year_booking_with_multi_subs                                                                    AS is_multi_year_booking_with_multi_subs,
      base_2029.is_single_fiscal_year_term_subscription                                                                  AS is_single_fiscal_year_term_subscription,
      base_2029.current_term                                                                                             AS subscription_term,
      base_2029.estimated_total_future_billings                                                                          AS estimated_total_future_billings,
      CASE
        WHEN base_2029.term_end_month BETWEEN DATEADD('month',1, CONCAT('2029'-1,'-01-01'))
          AND CONCAT('2029','-01-01')
            AND base_2029.is_multi_year_booking_with_multi_subs = FALSE
            THEN TRUE
        ELSE FALSE
      END                                                                                                                                   AS is_available_to_renew,
      CASE
        WHEN opportunity_term_group.opportunity_term_group IS NULL
          THEN 'No Opportunity Term'
        ELSE opportunity_term_group.opportunity_term_group
      END                                                                                                                                   AS opportunity_term_group,
      base_2029.arr                                                                                                      AS arr
    FROM combined_2029
    LEFT JOIN dim_date
      ON combined_2029.term_end_month = dim_date.first_day_of_month
    LEFT JOIN base_2029
      ON combined_2029.dim_charge_id = base_2029.dim_charge_id
    LEFT JOIN renewal_subscriptions_2029
      ON base_2029.subscription_name = renewal_subscriptions_2029.subscription_name
    LEFT JOIN opportunity_term_group
      ON base_2029.dim_subscription_id = opportunity_term_group.dim_subscription_id
    WHERE combined_2029.term_end_month BETWEEN DATEADD('month',1, CONCAT('2029'-1,'-01-01'))
      AND CONCAT('2029','-01-01')
        AND day_of_month = 1
    ORDER BY fiscal_quarter_name_fy

), unioned as (

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2019 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2020 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2021 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2022 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2023 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2024 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2025 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2026 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2027 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2028 UNION ALL

SELECT
    primary_key,
    fiscal_year,
    fiscal_quarter_name_fy,
    close_month,
    dim_charge_id,
    dim_crm_opportunity_id,
    dim_crm_account_id,
    dim_billing_account_id,
    dim_subscription_id,
    dim_product_detail_id,
    subscription_name,
    subscription_start_month,
    subscription_end_month,
    term_start_month,
    renewal_month,
    bookings_term_end_month,
    multi_year_booking_subscription_end_month,
    last_paid_month_in_term,
    current_term,
    zuora_renewal_subscription_name,
    renewal_subscription_end_month,
    parent_crm_account_name,
    crm_account_name,
    parent_crm_account_sales_segment,
    dim_crm_user_id,
    user_name,
    user_role_id,
    crm_user_sales_segment,
    crm_user_geo,
    crm_user_region,
    crm_user_area,
    product_tier_name,
    product_delivery_type,
    renewal_type,
    is_multi_year_booking,
    is_multi_year_booking_with_multi_subs,
    is_single_fiscal_year_term_subscription,
    subscription_term,
    estimated_total_future_billings,
    is_available_to_renew,
    opportunity_term_group,
    arr
    FROM renewal_report_2029

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@nmcavinue'::VARCHAR       AS updated_by,
      '2021-12-06'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM unioned60:T817,
-- Using dbt updated at field as we want a new set of data everyday.
    
    
    SELECT
    "DIM_SUBSCRIPTION_ID",
  "SUBSCRIPTION_NAME",
  "SUBSCRIPTION_VERSION",
  "DIM_CRM_ACCOUNT_ID",
  "DIM_BILLING_ACCOUNT_ID",
  "DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT",
  "DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT",
  "DIM_CRM_OPPORTUNITY_ID",
  "DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL",
  "DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL",
  "DIM_AMENDMENT_ID_SUBSCRIPTION",
  "CREATED_BY_ID",
  "UPDATED_BY_ID",
  "DIM_SUBSCRIPTION_ID_ORIGINAL",
  "DIM_SUBSCRIPTION_ID_PREVIOUS",
  "SUBSCRIPTION_NAME_SLUGIFY",
  "SUBSCRIPTION_STATUS",
  "NAMESPACE_ID",
  "NAMESPACE_NAME",
  "ZUORA_RENEWAL_SUBSCRIPTION_NAME",
  "ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY",
  "CURRENT_TERM",
  "RENEWAL_TERM",
  "RENEWAL_TERM_PERIOD_TYPE",
  "EOA_STARTER_BRONZE_OFFER_ACCEPTED",
  "SUBSCRIPTION_SALES_TYPE",
  "AUTO_RENEW_NATIVE_HIST",
  "AUTO_RENEW_CUSTOMERDOT_HIST",
  "TURN_ON_CLOUD_LICENSING",
  "TURN_ON_OPERATIONAL_METRICS",
  "CONTRACT_OPERATIONAL_METRICS",
  "CONTRACT_AUTO_RENEWAL",
  "TURN_ON_AUTO_RENEWAL",
  "CONTRACT_SEAT_RECONCILIATION",
  "TURN_ON_SEAT_RECONCILIATION",
  "IS_QUESTIONABLE_OPPORTUNITY_MAPPING",
  "INVOICE_OWNER_ACCOUNT",
  "CREATOR_ACCOUNT",
  "WAS_PURCHASED_THROUGH_RESELLER",
  "MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE",
  "SUBSCRIPTION_START_DATE",
  "SUBSCRIPTION_END_DATE",
  "SUBSCRIPTION_START_MONTH",
  "SUBSCRIPTION_END_MONTH",
  "SUBSCRIPTION_END_FISCAL_YEAR",
  "SUBSCRIPTION_CREATED_DATE",
  "SUBSCRIPTION_UPDATED_DATE",
  "TERM_START_DATE",
  "TERM_END_DATE",
  "TERM_START_MONTH",
  "TERM_END_MONTH",
  "TERM_START_FISCAL_YEAR",
  "TERM_END_FISCAL_YEAR",
  "IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION",
  "SECOND_ACTIVE_RENEWAL_MONTH",
  "CANCELLED_DATE",
  "SUBSCRIPTION_LINEAGE",
  "OLDEST_SUBSCRIPTION_IN_COHORT",
  "SUBSCRIPTION_COHORT_MONTH",
  "SUBSCRIPTION_COHORT_QUARTER",
  "SUBSCRIPTION_COHORT_YEAR",
  "CREATED_BY",
  "UPDATED_BY",
  "MODEL_CREATED_DATE",
  "MODEL_UPDATED_DATE",
  "DBT_CREATED_AT"
    FROM "PROD".common.dim_subscription
61:T79d,with zuora_subscription_intermediate as (

    SELECT *
    FROM {{ ref ('prep_subscription_lineage_intermediate')}}

), zuora_subscription_lineage AS (

    SELECT *
    FROM {{ ref ('prep_subscription_lineage')}}

), zuora_subscription_parentage AS (

    SELECT *
    FROM {{ ref ('prep_subscription_lineage_parentage_finish')}}

), final AS (

    SELECT
      zuora_subscription_intermediate.subscription_id                                                                       AS dim_subscription_id,
      zuora_subscription_intermediate.subscription_name_slugify                                                             AS subscription_name_slugify,
      zuora_subscription_lineage.lineage                                                                                    AS subscription_lineage,
      COALESCE(zuora_subscription_parentage.ultimate_parent_sub,zuora_subscription_intermediate.subscription_name_slugify)  AS oldest_subscription_in_cohort,
      COALESCE(zuora_subscription_parentage.cohort_month, zuora_subscription_intermediate.subscription_month)               AS subscription_cohort_month,
      COALESCE(zuora_subscription_parentage.cohort_quarter,zuora_subscription_intermediate.subscription_quarter)            AS subscription_cohort_quarter,
      COALESCE(zuora_subscription_parentage.cohort_year, zuora_subscription_intermediate.subscription_year)                 AS subscription_cohort_year
    FROM zuora_subscription_intermediate
    LEFT JOIN zuora_subscription_lineage
      ON zuora_subscription_intermediate.subscription_name_slugify = zuora_subscription_lineage.subscription_name_slugify
    LEFT JOIN zuora_subscription_parentage
      ON zuora_subscription_intermediate.subscription_name_slugify = zuora_subscription_parentage.child_sub

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@paul_armstrong",
    updated_by="@iweeks",
    created_date="2021-02-11",
    updated_date="2021-07-29"
) }}62:T8a0,with zuora_subscription_intermediate as (

    SELECT *
    FROM "PROD".common_prep.prep_subscription_lineage_intermediate

), zuora_subscription_lineage AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription_lineage

), zuora_subscription_parentage AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription_lineage_parentage_finish

), final AS (

    SELECT
      zuora_subscription_intermediate.subscription_id                                                                       AS dim_subscription_id,
      zuora_subscription_intermediate.subscription_name_slugify                                                             AS subscription_name_slugify,
      zuora_subscription_lineage.lineage                                                                                    AS subscription_lineage,
      COALESCE(zuora_subscription_parentage.ultimate_parent_sub,zuora_subscription_intermediate.subscription_name_slugify)  AS oldest_subscription_in_cohort,
      COALESCE(zuora_subscription_parentage.cohort_month, zuora_subscription_intermediate.subscription_month)               AS subscription_cohort_month,
      COALESCE(zuora_subscription_parentage.cohort_quarter,zuora_subscription_intermediate.subscription_quarter)            AS subscription_cohort_quarter,
      COALESCE(zuora_subscription_parentage.cohort_year, zuora_subscription_intermediate.subscription_year)                 AS subscription_cohort_year
    FROM zuora_subscription_intermediate
    LEFT JOIN zuora_subscription_lineage
      ON zuora_subscription_intermediate.subscription_name_slugify = zuora_subscription_lineage.subscription_name_slugify
    LEFT JOIN zuora_subscription_parentage
      ON zuora_subscription_intermediate.subscription_name_slugify = zuora_subscription_parentage.child_sub

)

SELECT
      *,
      '@paul_armstrong'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2021-02-11'::DATE        AS model_created_date,
      '2021-07-29'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final63:T1d7a,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
      ('map_merged_crm_account', 'map_merged_crm_account'),
      ('date_details', 'date_details'),
      ('zuora_account_source', 'zuora_account_source'),
      ('prep_billing_account_user', 'prep_billing_account_user'),
      ('sfdc_customer_subscription_source', 'sfdc_customer_subscription_source')

])}}

, zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@michellecooper",
    created_date="2021-01-07",
    updated_date="2023-04-12"
) }}64:T1f00,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), date_details AS (

    SELECT * 
    FROM "PROD".legacy.date_details

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

), sfdc_customer_subscription_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_customer_subscription_source

)

, zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-07'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined65:T943,WITH zuora_amendment AS (

  SELECT *
  FROM {{ ref('zuora_amendment_source') }}
  WHERE is_deleted = FALSE

), base AS (

    SELECT
      --Surrogate Key
      amendment_id                         AS dim_amendment_id,

      --Common Dimension keys
      subscription_id                      AS dim_subscription_id,

      --Information
      amendment_name,
      amendment_type,
      amendment_description,
      auto_renew,
      amendment_code,
      amendment_status,

      --Term information
      term_type,
      current_term,
      current_term_period_type,
      renewal_term,
      renewal_term_period_type,
      renewal_setting,

      --Dates
      term_start_date,
      effective_date,
      service_activation_date,
      customer_acceptance_date,
      contract_effective_date
    FROM zuora_amendment

    UNION ALL

    SELECT
      --Surrogate Keys
      MD5('-1')                             AS dim_amendment_id,

      --Common Dimension keys
      MD5('-1')                             AS dim_subscription_id,

      --Information
      'Missing amendment_name'              AS amendment_name,
      'Missing amendment_type'              AS amendment_type,
      'Missing amendment_description'       AS amendment_description,
      0                                     AS auto_renew,
      'Missing amendment_code'              AS amendment_code,
      'Missing amendment_status'            AS amendment_status,

      --Term information
      'Missing term_type'                   AS term_type,
      -1                                    AS current_term,
      'Missing current_term_period_type'    AS current_term_period_type,
      -1                                    AS renewal_term,
      'Missing renewal_term_period_type'    AS renewal_term_period_type,
      'Missing renewal_setting'             AS renewal_setting,

      --Dates
      '9999-12-31 00:00:00.000 +0000'       AS term_start_date,
      '9999-12-31 00:00:00.000 +0000'       AS effective_date,
      '9999-12-31 00:00:00.000 +0000'       AS service_activation_date,
      '9999-12-31 00:00:00.000 +0000'       AS customer_acceptance_date,
      '9999-12-31 00:00:00.000 +0000'       AS contract_effective_date

)

{{ dbt_audit(
    cte_ref="base",
    created_by="@iweeks",
    updated_by="@iweeks",
    created_date="2021-05-10",
    updated_date="2021-05-10"
) }}66:Ta34,WITH zuora_amendment AS (

  SELECT *
  FROM "PREP".zuora.zuora_amendment_source
  WHERE is_deleted = FALSE

), base AS (

    SELECT
      --Surrogate Key
      amendment_id                         AS dim_amendment_id,

      --Common Dimension keys
      subscription_id                      AS dim_subscription_id,

      --Information
      amendment_name,
      amendment_type,
      amendment_description,
      auto_renew,
      amendment_code,
      amendment_status,

      --Term information
      term_type,
      current_term,
      current_term_period_type,
      renewal_term,
      renewal_term_period_type,
      renewal_setting,

      --Dates
      term_start_date,
      effective_date,
      service_activation_date,
      customer_acceptance_date,
      contract_effective_date
    FROM zuora_amendment

    UNION ALL

    SELECT
      --Surrogate Keys
      MD5('-1')                             AS dim_amendment_id,

      --Common Dimension keys
      MD5('-1')                             AS dim_subscription_id,

      --Information
      'Missing amendment_name'              AS amendment_name,
      'Missing amendment_type'              AS amendment_type,
      'Missing amendment_description'       AS amendment_description,
      0                                     AS auto_renew,
      'Missing amendment_code'              AS amendment_code,
      'Missing amendment_status'            AS amendment_status,

      --Term information
      'Missing term_type'                   AS term_type,
      -1                                    AS current_term,
      'Missing current_term_period_type'    AS current_term_period_type,
      -1                                    AS renewal_term,
      'Missing renewal_term_period_type'    AS renewal_term_period_type,
      'Missing renewal_setting'             AS renewal_setting,

      --Dates
      '9999-12-31 00:00:00.000 +0000'       AS term_start_date,
      '9999-12-31 00:00:00.000 +0000'       AS effective_date,
      '9999-12-31 00:00:00.000 +0000'       AS service_activation_date,
      '9999-12-31 00:00:00.000 +0000'       AS customer_acceptance_date,
      '9999-12-31 00:00:00.000 +0000'       AS contract_effective_date

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2021-05-10'::DATE        AS model_created_date,
      '2021-05-10'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM base67:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}69:T111c,{{ config({
    "tags": ["mnpi_exception"],
    "alias": "dim_subscription"
}) }}

WITH prep_amendment AS (

  SELECT *
  FROM {{ ref('prep_amendment') }}

), subscription AS (

    SELECT *
    FROM {{ ref('prep_subscription') }}

), subscription_opportunity_mapping AS (

    SELECT *
    FROM {{ ref('map_subscription_opportunity') }}

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM {{ ref('map_subscription_lineage') }}

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@michellecooper",
    created_date="2020-12-16",
    updated_date="2023-04-12"
) }}6a:T11db,

WITH prep_amendment AS (

  SELECT *
  FROM "PROD".common_prep.prep_amendment

), subscription AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription

), subscription_opportunity_mapping AS (

    SELECT *
    FROM "PROD".common_mapping.map_subscription_opportunity

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM "PROD".common_mapping.map_subscription_lineage

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    

  COALESCE(prep_amendment.dim_amendment_id, MD5(-1)) 

                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-12-16'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM finalc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.dim_subscription"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"dim_subscription"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","mnpi_exception",{"children":[["$","code",null,{"children":["$","a",null,{"children":"mnpi_exception"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.common.dim_subscription"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"35 MB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 09:26UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Dimension table representing subscription details. The Zuora subscription is created and maintained as part of the broader Quote Creation business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#3-quote-creation).\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Subscriptions).\n\nThe grain of the table is the version of a Zuora subscription.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":6,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":7,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":9,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":10,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":14,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":15,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":16,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":17,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"NAMESPACE_ID":{"type":"TEXT","index":18,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":19,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":20,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":21,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":22,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":23,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":24,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":25,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":26,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":27,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":28,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":29,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":30,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":31,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":32,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":33,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":34,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":35,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"IS_QUESTIONABLE_OPPORTUNITY_MAPPING":{"type":"NUMBER","index":36,"name":"IS_QUESTIONABLE_OPPORTUNITY_MAPPING","comment":null,"display_name":"is_questionable_opportunity_mapping"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":37,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":38,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":39,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":40,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":41,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":42,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":43,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":44,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":45,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":46,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":47,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"TERM_START_DATE":{"type":"DATE","index":48,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":49,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":50,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":51,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":52,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":53,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":54,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":55,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":56,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":57,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":58,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":59,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":60,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"SUBSCRIPTION_COHORT_YEAR":{"type":"DATE","index":61,"name":"SUBSCRIPTION_COHORT_YEAR","comment":null,"display_name":"subscription_cohort_year"},"CREATED_BY":{"type":"TEXT","index":62,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":63,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":64,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":65,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":66,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":67,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"lineage":{"name":"lineage","description":"All the subscriptions subsquent to the primary subscription, separated by commas.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lineage"},"cohort_month":{"name":"cohort_month","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_month"},"cohort_quarter":{"name":"cohort_quarter","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_quarter"},"cohort_year":{"name":"cohort_year","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_year"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":36424192,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_subscription","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.map_subscription_opportunity","model.gitlab_snowflake.map_subscription_opportunity","model.gitlab_snowflake.map_subscription_lineage","model.gitlab_snowflake.map_subscription_lineage"]},"config":{"enabled":true,"alias":"dim_subscription","schema":"common","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_subscription.sql","original_file_path":"models/common/dimensions_shared/dim_subscription.sql","name":"dim_subscription","alias":"dim_subscription","checksum":{"name":"sha256","checksum":"44a135462088f0caceab046c41bf8e7354f2c148c50ecbee98d6658fddfeda60"},"tags":["mnpi_exception"],"refs":[["prep_amendment"],["prep_amendment"],["prep_subscription"],["prep_subscription"],["map_subscription_opportunity"],["map_subscription_opportunity"],["map_subscription_lineage"],["map_subscription_lineage"]],"sources":[],"metrics":[],"description":"Dimension table representing subscription details. The Zuora subscription is created and maintained as part of the broader Quote Creation business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#3-quote-creation).\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Subscriptions).\n\nThe grain of the table is the version of a Zuora subscription.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"],"alias":"dim_subscription"},"created_at":1689033750.8111765,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_subscription","label":"dim_subscription"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_SALES","name":"MART_RETENTION_PARENT_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"FCT_RETENTION_ID":{"type":"TEXT","index":1,"name":"fct_retention_id","comment":null,"description":"A unique identifier of the retention record.","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr","retention"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"fct_retention_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"RETENTION_MONTH":{"type":"DATE","index":4,"name":"RETENTION_MONTH","comment":null,"display_name":"retention_month"},"RETENTION_FISCAL_YEAR":{"type":"NUMBER","index":5,"name":"RETENTION_FISCAL_YEAR","comment":null,"display_name":"retention_fiscal_year"},"RETENTION_FISCAL_QUARTER":{"type":"TEXT","index":6,"name":"RETENTION_FISCAL_QUARTER","comment":null,"display_name":"retention_fiscal_quarter"},"LAST_RENEWAL_MONTH":{"type":"DATE","index":7,"name":"LAST_RENEWAL_MONTH","comment":null,"display_name":"last_renewal_month"},"NEXT_RENEWAL_MONTH":{"type":"DATE","index":8,"name":"NEXT_RENEWAL_MONTH","comment":null,"display_name":"next_renewal_month"},"PRIOR_YEAR_MRR":{"type":"FLOAT","index":9,"name":"PRIOR_YEAR_MRR","comment":null,"display_name":"prior_year_mrr"},"NET_RETENTION_MRR":{"type":"FLOAT","index":10,"name":"NET_RETENTION_MRR","comment":null,"display_name":"net_retention_mrr"},"GROSS_RETENTION_MRR":{"type":"FLOAT","index":11,"name":"GROSS_RETENTION_MRR","comment":null,"display_name":"gross_retention_mrr"},"PRIOR_YEAR_ARR":{"type":"FLOAT","index":12,"name":"PRIOR_YEAR_ARR","comment":null,"display_name":"prior_year_arr"},"NET_RETENTION_ARR":{"type":"FLOAT","index":13,"name":"NET_RETENTION_ARR","comment":null,"display_name":"net_retention_arr"},"GROSS_RETENTION_ARR":{"type":"FLOAT","index":14,"name":"GROSS_RETENTION_ARR","comment":null,"display_name":"gross_retention_arr"},"PRIOR_YEAR_QUANTITY":{"type":"FLOAT","index":15,"name":"PRIOR_YEAR_QUANTITY","comment":null,"display_name":"prior_year_quantity"},"NET_RETENTION_QUANTITY":{"type":"FLOAT","index":16,"name":"NET_RETENTION_QUANTITY","comment":null,"display_name":"net_retention_quantity"},"PRIOR_YEAR_PARENT_CUSTOMER_COUNT":{"type":"NUMBER","index":17,"name":"PRIOR_YEAR_PARENT_CUSTOMER_COUNT","comment":null,"display_name":"prior_year_parent_customer_count"},"NET_RETENTION_PARENT_CUSTOMER_COUNT":{"type":"NUMBER","index":18,"name":"NET_RETENTION_PARENT_CUSTOMER_COUNT","comment":null,"display_name":"net_retention_parent_customer_count"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":19,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"NET_RETENTION_PRODUCT_CATEGORY":{"type":"ARRAY","index":20,"name":"NET_RETENTION_PRODUCT_CATEGORY","comment":null,"display_name":"net_retention_product_category"},"PRIOR_YEAR_PRODUCT_CATEGORY":{"type":"ARRAY","index":21,"name":"PRIOR_YEAR_PRODUCT_CATEGORY","comment":null,"display_name":"prior_year_product_category"},"NET_RETENTION_PRODUCT_RANKING":{"type":"NUMBER","index":22,"name":"NET_RETENTION_PRODUCT_RANKING","comment":null,"display_name":"net_retention_product_ranking"},"PRIOR_YEAR_PRODUCT_RANKING":{"type":"NUMBER","index":23,"name":"PRIOR_YEAR_PRODUCT_RANKING","comment":null,"display_name":"prior_year_product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":24,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":25,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":26,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"TIER_CHANGE_ARR":{"type":"FLOAT","index":27,"name":"TIER_CHANGE_ARR","comment":null,"display_name":"tier_change_arr"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":28,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"},"CREATED_BY":{"type":"TEXT","index":29,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":30,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":31,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":32,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":33,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":34,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":64597504,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_retention_parent_account","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.reason_for_arr_change_tier_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_sales","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_sales","fqn":["gitlab_snowflake","common_mart_sales","restricted_safe","mart_retention_parent_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_sales/restricted_safe/mart_retention_parent_account.sql","original_file_path":"models/common_mart_sales/restricted_safe/mart_retention_parent_account.sql","name":"mart_retention_parent_account","alias":"mart_retention_parent_account","checksum":{"name":"sha256","checksum":"f7dae14ebc8424b79aad0a05eac52161b49239d67c786cdd4037de0dab8a4551"},"tags":["safe"],"refs":[["dim_date"],["dim_date"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table to support drillable retention analysis by the Parent CRM account grain","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_sales/restricted_safe/mart_retention_parent_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.3499205,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_sales.mart_retention_parent_account","label":"mart_retention_parent_account"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"MART_DELTA_ARR_SUBSCRIPTION_MONTH","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"ARR_MONTH","comment":null,"display_name":"arr_month"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":6,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"PRODUCT_CATEGORY":{"type":"ARRAY","index":8,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"PREVIOUS_MONTH_PRODUCT_CATEGORY":{"type":"ARRAY","index":9,"name":"PREVIOUS_MONTH_PRODUCT_CATEGORY","comment":null,"display_name":"previous_month_product_category"},"DELIVERY":{"type":"ARRAY","index":10,"name":"DELIVERY","comment":null,"display_name":"delivery"},"PREVIOUS_MONTH_DELIVERY":{"type":"ARRAY","index":11,"name":"PREVIOUS_MONTH_DELIVERY","comment":null,"display_name":"previous_month_delivery"},"PRODUCT_RANKING":{"type":"NUMBER","index":12,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"PREVIOUS_MONTH_PRODUCT_RANKING":{"type":"NUMBER","index":13,"name":"PREVIOUS_MONTH_PRODUCT_RANKING","comment":null,"display_name":"previous_month_product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":14,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"BEG_ARR":{"type":"FLOAT","index":15,"name":"BEG_ARR","comment":null,"display_name":"beg_arr"},"BEG_QUANTITY":{"type":"FLOAT","index":16,"name":"BEG_QUANTITY","comment":null,"display_name":"beg_quantity"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":17,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":18,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":19,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"TIER_CHANGE_ARR":{"type":"FLOAT","index":20,"name":"TIER_CHANGE_ARR","comment":null,"display_name":"tier_change_arr"},"END_ARR":{"type":"FLOAT","index":21,"name":"END_ARR","comment":null,"display_name":"end_arr"},"END_QUANTITY":{"type":"FLOAT","index":22,"name":"END_QUANTITY","comment":null,"display_name":"end_quantity"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":23,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":75712000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_delta_arr_subscription_month","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.reason_for_arr_change_tier_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","marts","arr","mart_delta_arr_subscription_month"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/arr/mart_delta_arr_subscription_month.sql","original_file_path":"models/marts/arr/mart_delta_arr_subscription_month.sql","name":"mart_delta_arr_subscription_month","alias":"mart_delta_arr_subscription_month","checksum":{"name":"sha256","checksum":"be81c317ef88f986148d427a3f143a6ea98d061fa371843c44196fb840f2f5cc"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table by month purusant to the ARR Analysis Framework at the subscription level","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/arr/mart_delta_arr_subscription_month.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.3402548,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.mart_delta_arr_subscription_month","label":"mart_delta_arr_subscription_month"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"WIP_MART_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CHARGE_ID":{"type":"TEXT","index":1,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"CHARGE_TYPE":{"type":"TEXT","index":7,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":8,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":9,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":10,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"EFFECTIVE_START_DATE":{"type":"DATE","index":11,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":12,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":13,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":14,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":15,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":16,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":17,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":18,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":19,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":20,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":21,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":22,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":24,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":25,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":26,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":27,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":28,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":29,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":30,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":31,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":32,"name":"SOLD_TO_COUNTRY","comment":null,"display_name":"sold_to_country"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":33,"name":"BILLING_ACCOUNT_NAME","comment":null,"display_name":"billing_account_name"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":34,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":35,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":36,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":37,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":38,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":39,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":40,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":41,"name":"PARENT_CRM_ACCOUNT_GEO","comment":null,"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":42,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":43,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":44,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":45,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":46,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"HEALTH_NUMBER":{"type":"FLOAT","index":47,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":48,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":49,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"BILLING_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":50,"name":"BILLING_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"billing_account_cohort_month"},"BILLING_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":51,"name":"BILLING_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"billing_account_cohort_quarter"},"CRM_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":52,"name":"CRM_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"crm_account_cohort_month"},"CRM_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":53,"name":"CRM_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"crm_account_cohort_quarter"},"PARENT_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":54,"name":"PARENT_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"parent_account_cohort_month"},"PARENT_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":55,"name":"PARENT_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"parent_account_cohort_quarter"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":56,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":57,"name":"PRODUCT_TIER_NAME","comment":null,"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":58,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"SERVICE_TYPE":{"type":"TEXT","index":59,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":60,"name":"PRODUCT_RATE_PLAN_NAME","comment":null,"display_name":"product_rate_plan_name"},"SUBSCRIPTION_AMENDMENT_TYPE":{"type":"TEXT","index":61,"name":"SUBSCRIPTION_AMENDMENT_TYPE","comment":null,"display_name":"subscription_amendment_type"},"SUBSCRIPTION_AMENDMENT_NAME":{"type":"TEXT","index":62,"name":"SUBSCRIPTION_AMENDMENT_NAME","comment":null,"display_name":"subscription_amendment_name"},"CHARGE_AMENDMENT_TYPE":{"type":"TEXT","index":63,"name":"CHARGE_AMENDMENT_TYPE","comment":null,"display_name":"charge_amendment_type"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":64,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"MRR":{"type":"FLOAT","index":65,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR":{"type":"FLOAT","index":66,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR":{"type":"FLOAT","index":67,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"ARR":{"type":"FLOAT","index":68,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":69,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARR":{"type":"FLOAT","index":70,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":71,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":72,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY":{"type":"FLOAT","index":73,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":74,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"CREATED_BY":{"type":"TEXT","index":75,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":76,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":77,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":78,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":79,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":80,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.wip_mart_charge","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.wip_fct_charge","model.gitlab_snowflake.wip_fct_charge"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","wip_mart_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/wip_mart_charge.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/wip_mart_charge.sql","name":"wip_mart_charge","alias":"wip_mart_charge","checksum":{"name":"sha256","checksum":"6a8ff5692a5eb8d859c6cf7714caa660e1aa9dd1de048f9e1be26af4ae2094c5"},"tags":["workspace","safe"],"refs":[["dim_amendment"],["dim_amendment"],["dim_billing_account"],["dim_billing_account"],["dim_charge"],["dim_charge"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["wip_fct_charge"],["wip_fct_charge"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/wip_mart_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["safe"],"secure":true},"created_at":1689033687.1613626,"compiled_sql":"$18","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.wip_mart_charge","label":"wip_mart_charge"},{"metadata":{"type":"BASE TABLE","schema":"DATA_QUALITY","name":"PRODUCT_DATA_DETECTION_RUN_DETAIL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"PRIMARY_KEY","comment":null,"display_name":"primary_key"},"RULE_ID":{"type":"NUMBER","index":2,"name":"rule_id","comment":null,"description":"The identifier of each data quality detection rule.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"rule_id"},"PROCESSED_RECORD_COUNT":{"type":"NUMBER","index":3,"name":"processed_record_count","comment":null,"description":"The total number of records that have been processed.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"processed_record_count"},"PASSED_RECORD_COUNT":{"type":"NUMBER","index":4,"name":"passed_record_count","comment":null,"description":"The total number of records that have passed the data quality detection rule.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"passed_record_count"},"FAILED_RECORD_COUNT":{"type":"NUMBER","index":5,"name":"failed_record_count","comment":null,"description":"The total number of records that have failed the data quality detection rule.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"failed_record_count"},"RULE_RUN_DATE":{"type":"DATE","index":6,"name":"rule_run_date","comment":null,"description":"The date on which the data quality detection ule is run. The value is coming from dim_date table.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"rule_run_date"},"TYPE_OF_DATA":{"type":"TEXT","index":7,"name":"type_of_data","comment":null,"description":"he subject area for which the data quality rules apply to. The values could include - Product/Sales/Marketing.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"type_of_data"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:48UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":10529792,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.product_data_detection_run_detail","raw_sql":"$19","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.product_data_detection_rule_3","model.gitlab_snowflake.product_data_detection_rule_3","model.gitlab_snowflake.dim_host_instance_type","model.gitlab_snowflake.dim_host_instance_type","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.map_license_subscription_account","model.gitlab_snowflake.map_license_subscription_account","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.bdg_namespace_order_subscription"]},"config":{"enabled":true,"alias":null,"schema":"data_quality","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":false,"unique_key":"primary_key","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"data_quality","fqn":["gitlab_snowflake","data_quality","product_data_detection_run_detail"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"data_quality/product_data_detection_run_detail.sql","original_file_path":"models/data_quality/product_data_detection_run_detail.sql","name":"product_data_detection_run_detail","alias":"product_data_detection_run_detail","checksum":{"name":"sha256","checksum":"612e0ab28406a1afaa692ebe5f1ae0e110a397d53ca87140bcf23b0e8ff7ae36"},"tags":["product","mnpi_exception"],"refs":[["product_data_detection_rule_3"],["product_data_detection_rule_3"],["dim_host_instance_type"],["dim_host_instance_type"],["dim_license"],["dim_license"],["dim_subscription"],["dim_subscription"],["map_license_subscription_account"],["map_license_subscription_account"],["fct_mrr"],["fct_mrr"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["dim_date"],["dim_date"],["bdg_namespace_order_subscription"],["bdg_namespace_order_subscription"]],"sources":[],"metrics":[],"description":"A table with all the run details of the data quality detection rules. \n\nThis is an incremental model that contains the total number of processed records, passed records and failed records based on the data detection rules.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/data_quality/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/data_quality/product_data_detection_run_detail.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"data_quality","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"primary_key","full_refresh":false},"created_at":1689033731.389836,"compiled_sql":"$1a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".data_quality.product_data_detection_run_detail","label":"product_data_detection_run_detail"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_SALES","name":"MART_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CHARGE_ID":{"type":"TEXT","index":1,"name":"dim_charge_id","comment":null,"description":"The unique identifier of a rate plan charge","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_charge_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"RATE_PLAN_NAME":{"type":"TEXT","index":7,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":8,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":9,"name":"RATE_PLAN_CHARGE_DESCRIPTION","comment":null,"display_name":"rate_plan_charge_description"},"CHARGE_TYPE":{"type":"TEXT","index":10,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":11,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":12,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":13,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"EFFECTIVE_START_DATE":{"type":"DATE","index":14,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":15,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":16,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":17,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":18,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":19,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":20,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"SUBSCRIPTION_CREATED_BY_ID":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_CREATED_BY_ID","comment":null,"display_name":"subscription_created_by_id"},"SUBSCRIPTION_UPDATED_BY_ID":{"type":"TEXT","index":22,"name":"SUBSCRIPTION_UPDATED_BY_ID","comment":null,"display_name":"subscription_updated_by_id"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":24,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":25,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":26,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":27,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":28,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":29,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":30,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"TERM_START_DATE":{"type":"DATE","index":31,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":32,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":33,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":34,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":35,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":37,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":38,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":39,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":40,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":41,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":42,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":43,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":44,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":45,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":46,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":47,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":48,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":49,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":50,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":51,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":52,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":53,"name":"SOLD_TO_COUNTRY","comment":null,"display_name":"sold_to_country"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":54,"name":"BILLING_ACCOUNT_NAME","comment":null,"display_name":"billing_account_name"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":55,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"SSP_CHANNEL":{"type":"TEXT","index":56,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":57,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":58,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":59,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"DIM_CRM_USER_ID":{"type":"TEXT","index":60,"name":"DIM_CRM_USER_ID","comment":null,"display_name":"dim_crm_user_id"},"CRM_USER_SALES_SEGMENT":{"type":"TEXT","index":61,"name":"CRM_USER_SALES_SEGMENT","comment":null,"display_name":"crm_user_sales_segment"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":62,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":63,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":64,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":65,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":66,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":67,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":68,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":69,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":70,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":71,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":72,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"HEALTH_NUMBER":{"type":"FLOAT","index":73,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":74,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"DIM_ORDER_ID":{"type":"TEXT","index":75,"name":"dim_order_id","comment":null,"description":"Unique identifier for an order. Can be used to join to dim_order.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_order_id"},"SUBSCRIPTION_RENEWAL_TYPE":{"type":"TEXT","index":76,"name":"subscription_renewal_type","comment":null,"description":"Calculated field that indicates how a subscription renewal was made. Can be one of 'Auto-Renewal', 'Customer Portal', 'Sales-Assisted' or null when the charge is not related to a subscription renewal.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_renewal_type"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":77,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":78,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"BILLING_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":79,"name":"BILLING_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"billing_account_cohort_month"},"BILLING_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":80,"name":"BILLING_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"billing_account_cohort_quarter"},"CRM_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":81,"name":"CRM_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"crm_account_cohort_month"},"CRM_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":82,"name":"CRM_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"crm_account_cohort_quarter"},"PARENT_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":83,"name":"PARENT_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"parent_account_cohort_month"},"PARENT_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":84,"name":"PARENT_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"parent_account_cohort_quarter"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":85,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":86,"name":"PRODUCT_TIER_NAME","comment":null,"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":87,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":88,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"SERVICE_TYPE":{"type":"TEXT","index":89,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":90,"name":"PRODUCT_RATE_PLAN_NAME","comment":null,"display_name":"product_rate_plan_name"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":91,"name":"IS_LICENSED_USER","comment":null,"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":92,"name":"IS_ARPU","comment":null,"display_name":"is_arpu"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":93,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":94,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"SUBSCRIPTION_AMENDMENT_EFFECTIVE_DATE":{"type":"TIMESTAMP_TZ","index":95,"name":"SUBSCRIPTION_AMENDMENT_EFFECTIVE_DATE","comment":null,"display_name":"subscription_amendment_effective_date"},"SUBSCRIPTION_AMENDMENT_TYPE":{"type":"TEXT","index":96,"name":"SUBSCRIPTION_AMENDMENT_TYPE","comment":null,"display_name":"subscription_amendment_type"},"SUBSCRIPTION_AMENDMENT_NAME":{"type":"TEXT","index":97,"name":"SUBSCRIPTION_AMENDMENT_NAME","comment":null,"display_name":"subscription_amendment_name"},"CHARGE_AMENDMENT_TYPE":{"type":"TEXT","index":98,"name":"CHARGE_AMENDMENT_TYPE","comment":null,"display_name":"charge_amendment_type"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":99,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"MRR":{"type":"FLOAT","index":100,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR":{"type":"FLOAT","index":101,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR":{"type":"FLOAT","index":102,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"ARR":{"type":"FLOAT","index":103,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":104,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARR":{"type":"FLOAT","index":105,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":106,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":107,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY":{"type":"FLOAT","index":108,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"DELTA_TCV":{"type":"FLOAT","index":109,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":110,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"CREATED_BY":{"type":"TEXT","index":111,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":112,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":113,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":114,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":115,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":116,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":121374720,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_charge","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_order","model.gitlab_snowflake.dim_order","model.gitlab_snowflake.dim_order_action","model.gitlab_snowflake.dim_order_action","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_sales","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"transient":false,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_sales","fqn":["gitlab_snowflake","common_mart_sales","restricted_safe","mart_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_sales/restricted_safe/mart_charge.sql","original_file_path":"models/common_mart_sales/restricted_safe/mart_charge.sql","name":"mart_charge","alias":"mart_charge","checksum":{"name":"sha256","checksum":"32b3e052ca03ccc622c3e5b5b0fe8136c0e2e28e4778bc3017a4b27ca04c6005"},"tags":["safe"],"refs":[["dim_amendment"],["dim_amendment"],["dim_billing_account"],["dim_billing_account"],["dim_charge"],["dim_charge"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["dim_crm_user"],["dim_crm_user"],["dim_order"],["dim_order"],["dim_order_action"],["dim_order_action"],["fct_charge"],["fct_charge"],["prep_billing_account_user"],["prep_billing_account_user"]],"sources":[],"metrics":[],"description":"Model combining Subscription related objects such as product details and rate plan charge details into a mart.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_sales/restricted_safe/mart_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"transient":false},"created_at":1689033765.2524543,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_sales.mart_charge","label":"mart_charge"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_ID":{"type":"TEXT","index":1,"name":"ping_instance_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ping_instance_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":3,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":4,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":5,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":6,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":8,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"DIM_APP_RELEASE_MAJOR_MINOR_SK":{"type":"TEXT","index":10,"name":"dim_app_release_major_minor_sk","comment":null,"description":"Surrogate key of dim_app_release_major_minor. Currently identified by hashing the major_minor_version field combined with the application field.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_app_release_major_minor_sk"},"APP_RELEASE_MAJOR_MINOR_ID":{"type":"TEXT","index":11,"name":"app_release_major_minor_id","comment":null,"description":"The natural key of dim_app_release_major_minor. This natural key is defined as the concatenation of the `application` and the major minor version. For example, for the GitLab version 13.6.2, the `app_release_major_minor_id` is `GiLab-13.06`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"app_release_major_minor_id"},"DIM_HOST_ID":{"type":"NUMBER","index":12,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":13,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"DIM_LOCATION_COUNTRY_ID":{"type":"NUMBER","index":14,"name":"dim_location_country_id","comment":null,"description":"The unique identifier of a country, easily joined to `dim_location_country`. The location is associated with the IP address of the ping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_location_country_id"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":15,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":16,"name":"ping_deployment_type","comment":null,"description":"Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":17,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":18,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":20,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":21,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":22,"name":"major_minor_version","comment":null,"description":"The concatenation of major and minor version, easily joined to `dim_gitlab_releases`. For example, for 13.6.2, `major_minor_version` is 13.6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"MAJOR_MINOR_VERSION_NUM":{"type":"NUMBER","index":23,"name":"major_minor_version_num","comment":null,"description":"The numeric variation of `major_minor_version`, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_num` is 1306. This id is intended to facilitate easy ordering on versions.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_num"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":24,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":25,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"RELEASE_DATE":{"type":"DATE","index":26,"name":"RELEASE_DATE","comment":null,"display_name":"release_date"},"VERSION_NUMBER":{"type":"NUMBER","index":27,"name":"version_number","comment":null,"description":"The sequential number of the major_minor_version.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_number"},"DAYS_AFTER_VERSION_RELEASE_DATE":{"type":"NUMBER","index":28,"name":"days_after_version_release_date","comment":null,"description":"The number of days between the date the ping was sent and the release date of the version associated with the ping. When `version_is_prerelease = TRUE`, then this field is less than 0.\n\nThere are some cases when `version_is_prerelease = FALSE` and the field is still lower than 0. These cases where manually set to zero in the data model.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_after_version_release_date"},"LATEST_VERSION_AVAILABLE_AT_PING_CREATION":{"type":"TEXT","index":29,"name":"latest_version_available_at_ping_creation","comment":null,"description":"The most recent version that is available at the time the ping is created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_version_available_at_ping_creation"},"VERSIONS_BEHIND_LATEST_AT_PING_CREATION":{"type":"NUMBER","index":30,"name":"versions_behind_latest_at_ping_creation","comment":null,"description":"The number of versions by which the ping-associated version lags behind. When `version_is_prerelease = TRUE`, then this field is less than 0.\n\nThere are some cases when `version_is_prerelease = FALSE` and the field is still lower than 0. These cases where manually set to zero in the data model.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"versions_behind_latest_at_ping_creation"},"IS_INTERNAL":{"type":"BOOLEAN","index":31,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":32,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":33,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":34,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":35,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"COLLECTED_DATA_CATEGORIES":{"type":"TEXT","index":36,"name":"collected_data_categories","comment":null,"description":"Comma-separated list of collected data categories corresponding to the installation's settings (ex: `standard,subscription,operational,optional`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"collected_data_categories"},"COUNTRY_NAME":{"type":"TEXT","index":37,"name":"country_name","comment":null,"description":"The name of the country associated with the IP address of the ping (ex. Australia, France, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country_name"},"ISO_2_COUNTRY_CODE":{"type":"TEXT","index":38,"name":"iso_2_country_code","comment":null,"description":"The two-letter ISO country code associated with the IP address of the ping (ex. AU, FR, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"iso_2_country_code"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":39,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":40,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":41,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":42,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":43,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":45,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":47,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":48,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":49,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":50,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":51,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":52,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":53,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":54,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":55,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"CREATED_BY":{"type":"TEXT","index":56,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":57,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":58,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":59,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_latest_available_app_release_major_minor_sk":{"name":"dim_latest_available_app_release_major_minor_sk","description":"The latest avaiable dim_app_release_major_minor_sk at the moment the ping is sent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_latest_available_app_release_major_minor_sk"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:00UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4873754624,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.group_by","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.fct_ping_instance","model.gitlab_snowflake.fct_ping_instance","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_app_release_major_minor","model.gitlab_snowflake.dim_app_release_major_minor","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"ping_instance_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance.sql","original_file_path":"models/common_mart/mart_ping_instance.sql","name":"mart_ping_instance","alias":"mart_ping_instance","checksum":{"name":"sha256","checksum":"8b189b85d5b17fdeed3ae3364b9d3425cbcdcc798b4c165fbc2e11ee67431266"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_location_country"],["dim_location_country"],["fct_ping_instance"],["fct_ping_instance"],["dim_ping_metric"],["dim_ping_metric"],["dim_app_release_major_minor"],["dim_app_release_major_minor"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$1e","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"],"unique_key":"ping_instance_id"},"created_at":1689033731.5658507,"compiled_sql":"$1f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance","label":"mart_ping_instance"},{"metadata":{"type":"BASE TABLE","schema":"PUMPS","name":"PUMP_GAINSIGHT_METRICS_MONTHLY_PAID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"snapshot_month","comment":null,"description":"Month in which the product usage was reported.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_month"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_NAMESPACE_ID":{"type":"TEXT","index":3,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":4,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":5,"name":"NAMESPACE_CREATION_DATE","comment":null,"display_name":"namespace_creation_date"},"UUID":{"type":"TEXT","index":6,"name":"uuid","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"uuid"},"HOSTNAME":{"type":"TEXT","index":7,"name":"hostname","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hostname"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":8,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"dim_billing_account_id","comment":null,"description":"Returns unknown ID (MD5(-1)) if the `account_id` from `fct_product_usage_wave_1_3_metrics_monthly` is not found in `dim_billing_account`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":10,"name":"dim_crm_account_id","comment":null,"description":"Returns unknown ID (MD5(-1)) if the `dim_crm_account_id` from `dim_billing_account` is not found in `dim_crm_account`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":11,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"subscription_status","comment":null,"description":"Status of the subscription at the time the usage ping was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_status"},"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION","comment":null,"display_name":"subscription_status_most_recent_version"},"TERM_START_DATE":{"type":"DATE","index":15,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":16,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":17,"name":"subscription_start_date","comment":null,"description":"Date the subscription term of the subscription_id started.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":18,"name":"subscription_end_date","comment":null,"description":"Date the subscription term of the subscription_id ended.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SNAPSHOT_DATE_ID":{"type":"NUMBER","index":19,"name":"snapshot_date_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_date_id"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ping_created_at","comment":null,"description":"Actual date that the usage ping was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"DIM_USAGE_PING_ID":{"type":"TEXT","index":21,"name":"dim_usage_ping_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_usage_ping_id"},"INSTANCE_TYPE":{"type":"TEXT","index":22,"name":"instance_type","comment":null,"description":"Type of the instance","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_type"},"INCLUDED_IN_HEALTH_MEASURES_STR":{"type":"TEXT","index":23,"name":"INCLUDED_IN_HEALTH_MEASURES_STR","comment":null,"display_name":"included_in_health_measures_str"},"CLEANED_VERSION":{"type":"TEXT","index":24,"name":"cleaned_version","comment":null,"description":"Version of GitLab running on the instance","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cleaned_version"},"COUNTRY_NAME":{"type":"TEXT","index":25,"name":"country_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country_name"},"ISO_2_COUNTRY_CODE":{"type":"TEXT","index":26,"name":"iso_2_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"iso_2_country_code"},"ISO_3_COUNTRY_CODE":{"type":"TEXT","index":27,"name":"iso_3_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"iso_3_country_code"},"DELIVERY_TYPE":{"type":"TEXT","index":28,"name":"delivery_type","comment":null,"description":"Indicates if the product usage came from a SaaS or Self-Managed user.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"delivery_type"},"INSTALLATION_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":29,"name":"installation_creation_date","comment":null,"description":"Based off of the [`installation_creation_date`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/license/20230228110448_installation_creation_date.yml) \nService Ping metric. For installations where the root user (id = 1) is not deleted, it returns the root user creation date. For installations where the root user \nis deleted, it returns the earliest available user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"installation_creation_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":30,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"BILLABLE_USER_COUNT":{"type":"NUMBER","index":31,"name":"BILLABLE_USER_COUNT","comment":null,"display_name":"billable_user_count"},"ACTIVE_USER_COUNT":{"type":"NUMBER","index":32,"name":"ACTIVE_USER_COUNT","comment":null,"display_name":"active_user_count"},"MAX_HISTORICAL_USER_COUNT":{"type":"NUMBER","index":33,"name":"MAX_HISTORICAL_USER_COUNT","comment":null,"display_name":"max_historical_user_count"},"LICENSE_USER_COUNT":{"type":"FLOAT","index":34,"name":"LICENSE_USER_COUNT","comment":null,"display_name":"license_user_count"},"LICENSE_USER_COUNT_SOURCE":{"type":"TEXT","index":35,"name":"LICENSE_USER_COUNT_SOURCE","comment":null,"display_name":"license_user_count_source"},"UMAU_28_DAYS_USER":{"type":"NUMBER","index":36,"name":"umau_28_days_user","comment":null,"description":"Number of distinct users who have generated a manage event by month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180814_events.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_28_days_user"},"ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":37,"name":"action_monthly_active_users_project_repo_28_days_user","comment":null,"description":"Number of distinct users who have generated a manage event by month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180814_events.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"action_monthly_active_users_project_repo_28_days_user"},"MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":38,"name":"merge_requests_28_days_user","comment":null,"description":"Count distinct authors of merge requests. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175055_merge_requests.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_requests_28_days_user"},"PROJECTS_WITH_REPOSITORIES_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":39,"name":"projects_with_repositories_enabled_28_days_user","comment":null,"description":"Count of users creating projects that have a matching Git repository, result of a Git push action, for last 28 days.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216182049_projects_with_repositories_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_with_repositories_enabled_28_days_user"},"COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":40,"name":"commit_comment_all_time_event","comment":null,"description":"Count of total unique commit comments. Does not include MR diff comments.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216182004_commit_comment.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"commit_comment_all_time_event"},"SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":41,"name":"source_code_pushes_all_time_event","comment":null,"description":"Count of total Git push operations.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216182006_source_code_pushes.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"source_code_pushes_all_time_event"},"CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":42,"name":"ci_pipelines_28_days_user","comment":null,"description":"Distinct users triggering pipelines in a month.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175554_ci_pipelines.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_pipelines_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":43,"name":"ci_internal_pipelines_28_days_user","comment":null,"description":"Total pipelines in GitLab repositories in a month.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175546_ci_internal_pipelines.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_internal_pipelines_28_days_user"},"CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":44,"name":"ci_builds_28_days_user","comment":null,"description":"Unique monthly builds in project.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175542_ci_builds.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_builds_28_days_user"},"CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":45,"name":"ci_builds_all_time_user","comment":null,"description":"Unique count of builds in project.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216175525_ci_builds.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_builds_all_time_user"},"CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":46,"name":"ci_builds_all_time_event","comment":null,"description":"Unique builds in project.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216175510_ci_builds.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_builds_all_time_event"},"CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":47,"name":"ci_runners_all_time_event","comment":null,"description":"All-time count of CI Runners ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsci_runners))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_runners_all_time_event"},"AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":48,"name":"auto_devops_enabled_all_time_event","comment":null,"description":"All-time count of Projects with auto DevOps template enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsauto_devops_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_devops_enabled_all_time_event"},"GITLAB_SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":49,"name":"gitlab_shared_runners_enabled","comment":null,"description":"Flags whether shared runners are enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#gitlab_shared_runners_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_shared_runners_enabled"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":50,"name":"container_registry_enabled","comment":null,"description":"Flags whether container registry is enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#container_registry_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_enabled"},"TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":51,"name":"template_repositories_all_time_event","comment":null,"description":"All-time total of custom project templates and projects without namespaces ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countstemplate_repositories))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"template_repositories_all_time_event"},"CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":52,"name":"ci_pipeline_config_repository_28_days_user","comment":null,"description":"Monthly count of unique users triggering pipelines from templates in repository ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyverifyci_pipeline_config_repository))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_pipeline_config_repository_28_days_user"},"USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":53,"name":"user_unique_users_all_secure_scanners_28_days_user","comment":null,"description":"Monthly count of unique users running secure CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_unique_users_all_secure_scanners))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_unique_users_all_secure_scanners_28_days_user"},"USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":54,"name":"user_sast_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running SAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_sast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_sast_jobs_28_days_user"},"USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":55,"name":"user_dast_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running DAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_dast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_dast_jobs_28_days_user"},"USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":56,"name":"user_dependency_scanning_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running dependency scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_dependency_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_dependency_scanning_jobs_28_days_user"},"USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":57,"name":"user_license_management_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running license management CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_license_management_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_license_management_jobs_28_days_user"},"USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":58,"name":"user_secret_detection_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running secret detection CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_secret_detection_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_secret_detection_jobs_28_days_user"},"USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":59,"name":"user_container_scanning_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running container scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_container_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_container_scanning_jobs_28_days_user"},"OBJECT_STORE_PACKAGES_ENABLED":{"type":"BOOLEAN","index":60,"name":"object_store_packages_enabled","comment":null,"description":"Flags whether Object Storage is enabled for Uploads ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#object_storepackagesenabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"object_store_packages_enabled"},"PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":61,"name":"projects_with_packages_all_time_event","comment":null,"description":"All-time count of projects with package registry configured ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_with_packages))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_with_packages_all_time_event"},"PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":62,"name":"projects_with_packages_28_days_event","comment":null,"description":"Projects with package registry enabled. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181055_projects_with_packages.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_with_packages_28_days_event"},"DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":63,"name":"deployments_28_days_user","comment":null,"description":"Monthly count of unique users triggering deployments ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyreleasedeployments))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"deployments_28_days_user"},"RELEASES_28_DAYS_USER":{"type":"NUMBER","index":64,"name":"releases_28_days_user","comment":null,"description":"Monthly count of unique users authoring releases ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyreleasereleases))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"releases_28_days_user"},"EPICS_28_DAYS_USER":{"type":"NUMBER","index":65,"name":"epics_28_days_user","comment":null,"description":"Monthly count of unique users authoring epics ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanepics))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_28_days_user"},"ISSUES_28_DAYS_USER":{"type":"NUMBER","index":66,"name":"issues_28_days_user","comment":null,"description":"Monthly count of unique users authoring issues ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanissues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issues_28_days_user"},"CI_INTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":67,"name":"ci_internal_pipelines_all_time_event","comment":null,"description":"All-time count of pipelines in GitLab repositories ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsci_internal_pipelines))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_internal_pipelines_all_time_event"},"CI_EXTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":68,"name":"ci_external_pipelines_all_time_event","comment":null,"description":"All-time count of pipelines in external repositories ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsci_external_pipelines))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_external_pipelines_all_time_event"},"MERGE_REQUESTS_ALL_TIME_EVENT":{"type":"NUMBER","index":69,"name":"merge_requests_all_time_event","comment":null,"description":"All-time count of Merge Requests ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsmerge_requests))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_requests_all_time_event"},"TODOS_ALL_TIME_EVENT":{"type":"NUMBER","index":70,"name":"todos_all_time_event","comment":null,"description":"All-time count of ToDos created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countstodos))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"todos_all_time_event"},"EPICS_ALL_TIME_EVENT":{"type":"NUMBER","index":71,"name":"epics_all_time_event","comment":null,"description":"All-time count of Epics created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsepics))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_all_time_event"},"ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":72,"name":"issues_all_time_event","comment":null,"description":"All-time count of Issues created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsissues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issues_all_time_event"},"PROJECTS_ALL_TIME_EVENT":{"type":"NUMBER","index":73,"name":"projects_all_time_event","comment":null,"description":"All-time count of Projects created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_all_time_event"},"DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":74,"name":"deployments_28_days_event","comment":null,"description":"Monthly count of deployments ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#counts_monthlydeployments))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"deployments_28_days_event"},"PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":75,"name":"packages_28_days_event","comment":null,"description":"Monthly count of Packages ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#counts_monthlypackages))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"packages_28_days_event"},"SAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":76,"name":"sast_jobs_all_time_event","comment":null,"description":"All-time count of SAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countssast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sast_jobs_all_time_event"},"DAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":77,"name":"dast_jobs_all_time_event","comment":null,"description":"All-time count of DAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsdast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dast_jobs_all_time_event"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":78,"name":"dependency_scanning_jobs_all_time_event","comment":null,"description":"All-time count of Dependency Scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsdependency_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dependency_scanning_jobs_all_time_event"},"LICENSE_MANAGEMENT_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":79,"name":"license_management_jobs_all_time_event","comment":null,"description":"All-time count of License Management CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countslicense_management_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_management_jobs_all_time_event"},"SECRET_DETECTION_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":80,"name":"secret_detection_jobs_all_time_event","comment":null,"description":"All-time count of Secret Detectionâ CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countssecret_detection_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"secret_detection_jobs_all_time_event"},"CONTAINER_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":81,"name":"container_scanning_jobs_all_time_event","comment":null,"description":"All-time count of Container Scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countscontainer_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_scanning_jobs_all_time_event"},"PROJECTS_JENKINS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":82,"name":"projects_jenkins_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Jenkins ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jenkins_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jenkins_active_all_time_event"},"PROJECTS_BAMBOO_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":83,"name":"projects_bamboo_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Bamboo CI ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_bamboo_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_bamboo_active_all_time_event"},"PROJECTS_JIRA_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":84,"name":"projects_jira_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Jira ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_active_all_time_event"},"PROJECTS_DRONE_CI_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":85,"name":"projects_drone_ci_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Drone CI ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_drone_ci_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_drone_ci_active_all_time_event"},"PROJECTS_GITHUB_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":86,"name":"projects_github_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for GitHub ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_github_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_github_active_all_time_event"},"PROJECTS_JIRA_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":87,"name":"projects_jira_server_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Server ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_server_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_server_active_all_time_event"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":88,"name":"projects_jira_dvcs_cloud_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Cloud (DVCS Connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_dvcs_cloud_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_cloud_active_all_time_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":89,"name":"projects_with_repositories_enabled_all_time_event","comment":null,"description":"All-time count of projects with repositories enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_with_repositories_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_with_repositories_enabled_all_time_event"},"PROTECTED_BRANCHES_ALL_TIME_EVENT":{"type":"NUMBER","index":90,"name":"protected_branches_all_time_event","comment":null,"description":"All-time count of protected branches ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprotected_branches))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"protected_branches_all_time_event"},"REMOTE_MIRRORS_ALL_TIME_EVENT":{"type":"NUMBER","index":91,"name":"remote_mirrors_all_time_event","comment":null,"description":"All-time count of remote mirrors ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsremote_mirrors))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"remote_mirrors_all_time_event"},"PROJECTS_ENFORCING_CODE_OWNER_APPROVAL_28_DAYS_USER":{"type":"NUMBER","index":92,"name":"projects_enforcing_code_owner_approval_28_days_user","comment":null,"description":"Monthly count of unique users creating projects that require code owner approval ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlycreateprojects_enforcing_code_owner_approval))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_enforcing_code_owner_approval_28_days_user"},"PROJECT_CLUSTERS_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":93,"name":"project_clusters_enabled_28_days_user","comment":null,"description":"Monthly count of unique users using GitLab Managed enabled clusters attached to projects ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyconfigureproject_clusters_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_clusters_enabled_28_days_user"},"ANALYTICS_28_DAYS_USER":{"type":"NUMBER","index":94,"name":"analytics_28_days_user","comment":null,"description":"The number of unique users viewing any [Analytics page](https://docs.gitlab.com/ee/user/analytics/) ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#manage-manageoptimize---smau-gmau---mau-viewing-analytics-features))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"analytics_28_days_user"},"ISSUES_EDIT_28_DAYS_USER":{"type":"NUMBER","index":95,"name":"issues_edit_28_days_user","comment":null,"description":"Number of unique users interacting with an issue (open, close, reopen, adjust label, adjust milestone, adjust weight, comment) ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#plan-planproject-management---smau-paid-gmau---mau-interacting-with-issues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issues_edit_28_days_user"},"USER_PACKAGES_28_DAYS_USER":{"type":"NUMBER","index":96,"name":"user_packages_28_days_user","comment":null,"description":"The maximum distinct count of users who published a package to the Package Registry. In the future, this value will the distinct count of users across all Package AMAUs ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#packagepackage---smau-gmau---count-of-users-publishing-packages))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_packages_28_days_user"},"TERRAFORM_STATE_API_28_DAYS_USER":{"type":"NUMBER","index":97,"name":"terraform_state_api_28_days_user","comment":null,"description":"Monthly active users of GitLab Managed Terraform State ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#configureconfigure---smau-gmau---mau-of-gitlab-managed-terraform-state))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"terraform_state_api_28_days_user"},"INCIDENT_MANAGEMENT_28_DAYS_USER":{"type":"NUMBER","index":98,"name":"incident_management_28_days_user","comment":null,"description":"Unique users that interact with alerts or incidents ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#monitormonitor---smau-gmau---unique-users-that-interact-with-alerts-and-incidents))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"incident_management_28_days_user"},"AUTO_DEVOPS_ENABLED":{"type":"BOOLEAN","index":99,"name":"auto_devops_enabled","comment":null,"description":"Flags whether auto DevOps is enabled on an instance ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#instance_auto_devops_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_devops_enabled"},"GITALY_CLUSTERS_INSTANCE":{"type":"NUMBER","index":100,"name":"gitaly_clusters_instance","comment":null,"description":"Number of GitLab Managed clusters both enabled and disabled on an instance ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#gitalyclusters))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitaly_clusters_instance"},"EPICS_DEEPEST_RELATIONSHIP_LEVEL_INSTANCE":{"type":"NUMBER","index":101,"name":"epics_deepest_relationship_level_instance","comment":null,"description":"Numeric level of the deepest relationship of all epics on an instance ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsepics_deepest_relationship_level))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_deepest_relationship_level_instance"},"CLUSTERS_APPLICATIONS_CILIUM_ALL_TIME_EVENT":{"type":"NUMBER","index":102,"name":"clusters_applications_cilium_all_time_event","comment":null,"description":"All-time total of GitLab Managed clusters with GitLab Managed App:Cilium installed ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsclusters_applications_cilium))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"clusters_applications_cilium_all_time_event"},"NETWORK_POLICY_FORWARDS_ALL_TIME_EVENT":{"type":"NUMBER","index":103,"name":"network_policy_forwards_all_time_event","comment":null,"description":"Cumulative count of packets forwarded by Cilium (Container Network Security) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsnetwork_policy_forwards))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"network_policy_forwards_all_time_event"},"NETWORK_POLICY_DROPS_ALL_TIME_EVENT":{"type":"NUMBER","index":104,"name":"network_policy_drops_all_time_event","comment":null,"description":"Cumulative count of packets dropped by Cilium (Container Network Security) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsnetwork_policy_drops))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"network_policy_drops_all_time_event"},"REQUIREMENTS_WITH_TEST_REPORT_ALL_TIME_EVENT":{"type":"NUMBER","index":105,"name":"requirements_with_test_report_all_time_event","comment":null,"description":"All-time count of requirements having a test report ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsrequirements_with_test_report))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"requirements_with_test_report_all_time_event"},"REQUIREMENT_TEST_REPORTS_CI_ALL_TIME_EVENT":{"type":"NUMBER","index":106,"name":"requirement_test_reports_ci_all_time_event","comment":null,"description":"All-time count of requirement test reports created from CI ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsrequirement_test_reports_ci))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"requirement_test_reports_ci_all_time_event"},"PROJECTS_IMPORTED_FROM_GITHUB_ALL_TIME_EVENT":{"type":"NUMBER","index":107,"name":"projects_imported_from_github_all_time_event","comment":null,"description":"All-time count of project imported from GitHub ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_imported_from_github))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_imported_from_github_all_time_event"},"PROJECTS_JIRA_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":108,"name":"projects_jira_cloud_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Cloud ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_cloud_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_cloud_active_all_time_event"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":109,"name":"projects_jira_dvcs_server_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Software (DVCS connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_dvcs_server_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_server_active_all_time_event"},"SERVICE_DESK_ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":110,"name":"service_desk_issues_all_time_event","comment":null,"description":"All-time count of service desk issues ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsservice_desk_issues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_desk_issues_all_time_event"},"CI_PIPELINES_ALL_TIME_USER":{"type":"NUMBER","index":111,"name":"ci_pipelines_all_time_user","comment":null,"description":"All-time count of distinct Users triggering Total pipelines ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stageverifyci_pipelines))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_pipelines_all_time_user"},"SERVICE_DESK_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":112,"name":"service_desk_issues_28_days_user","comment":null,"description":"Monthly count of users opening service desk issues ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanservice_desk_issues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_desk_issues_28_days_user"},"PROJECTS_JIRA_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":113,"name":"projects_jira_active_28_days_user","comment":null,"description":"Monthly count of users interacting with active integrations of Jira Software ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanprojects_jira_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_active_28_days_user"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":114,"name":"projects_jira_dvcs_cloud_active_28_days_user","comment":null,"description":"Monthly count of users interacting with active integrations of Jira Cloud (DVCS connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanprojects_jira_dvcs_cloud_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_cloud_active_28_days_user"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":115,"name":"projects_jira_dvcs_server_active_28_days_user","comment":null,"description":"Monthly count of users interacting with active integrations of Jira Software (DVCS connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanprojects_jira_dvcs_server_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_server_active_28_days_user"},"MERGE_REQUESTS_WITH_REQUIRED_CODE_OWNERS_28_DAYS_USER":{"type":"NUMBER","index":116,"name":"merge_requests_with_required_code_owners_28_days_user","comment":null,"description":"Monthly count of users creating merge requests with required code owners ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlycreatemerge_requests_with_required_codeowners))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_requests_with_required_code_owners_28_days_user"},"ANALYTICS_VALUE_STREAM_28_DAYS_EVENT":{"type":"NUMBER","index":117,"name":"analytics_value_stream_28_days_event","comment":null,"description":"Monthly count of visits to [Value Stream Analytics](https://about.gitlab.com/stages-devops-lifecycle/value-stream-analytics/) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersanalyticsg_analytics_valuestream_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"analytics_value_stream_28_days_event"},"CODE_REVIEW_USER_APPROVE_MR_28_DAYS_USER":{"type":"NUMBER","index":118,"name":"code_review_user_approve_mr_28_days_user","comment":null,"description":"Monthly count of users approving merge requests ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_counterscode_reviewi_code_review_user_approve_mr_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"code_review_user_approve_mr_28_days_user"},"EPICS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":119,"name":"epics_usage_28_days_user","comment":null,"description":"Monthly users count for epics_usage ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersepics_usageepics_usage_total_unique_counts_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_usage_28_days_user"},"CI_TEMPLATES_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":120,"name":"ci_templates_usage_28_days_event","comment":null,"description":"Monthly count of CI templates ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersci_templatesci_templates_total_unique_counts_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_templates_usage_28_days_event"},"PROJECT_MANAGEMENT_ISSUE_MILESTONE_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":121,"name":"project_management_issue_milestone_changed_28_days_user","comment":null,"description":"Monthly count of MAU changing an issueâs milestone ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersissues_editg_project_management_issue_milestone_changed_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_management_issue_milestone_changed_28_days_user"},"PROJECT_MANAGEMENT_ISSUE_ITERATION_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":122,"name":"project_management_issue_iteration_changed_28_days_user","comment":null,"description":"Monthly count of MAU changing an issueâs iteration ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersissues_editg_project_management_issue_iteration_changed_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_management_issue_iteration_changed_28_days_user"},"PROTECTED_BRANCHES_28_DAYS_USER":{"type":"NUMBER","index":123,"name":"protected_branches_28_days_user","comment":null,"description":"Count of users creating projects with repositories making use of at least one protected branch in last 28 days. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216182051_protected_branches.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"protected_branches_28_days_user"},"CI_CD_LEAD_TIME_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":124,"name":"ci_cd_lead_time_usage_28_days_event","comment":null,"description":"Count of unique visits to the project level CI CD Analytics lead time tab. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20211126091206_p_analytics_ci_cd_lead_time_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"ci_cd_lead_time_usage_28_days_event"},"CI_CD_DEPLOYMENT_FREQUENCY_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":125,"name":"ci_cd_deployment_frequency_usage_28_days_event","comment":null,"description":"Count of unique visits to the project level CI CD Analytics deployment frequency tab. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20211126090835_p_analytics_ci_cd_deployment_frequency_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"ci_cd_deployment_frequency_usage_28_days_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_USER":{"type":"NUMBER","index":126,"name":"projects_with_repositories_enabled_all_time_user","comment":null,"description":"Count of users creating projects that have a matching Git repository, result of a Git push action. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182023_projects_with_repositories_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_with_repositories_enabled_all_time_user"},"API_FUZZING_JOBS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":127,"name":"api_fuzzing_jobs_usage_28_days_user","comment":null,"description":"Count of distinct users creating API Fuzzing jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180355_user_api_fuzzing_jobs.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"api_fuzzing_jobs_usage_28_days_user"},"COVERAGE_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":128,"name":"coverage_fuzzing_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 coverage-guided Fuzz Testing job.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180359_coverage_fuzzing_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"coverage_fuzzing_pipeline_usage_28_days_event"},"API_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":129,"name":"api_fuzzing_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 API Fuzzing Testing job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180401_api_fuzzing_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"api_fuzzing_pipeline_usage_28_days_event"},"CONTAINER_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":130,"name":"container_scanning_pipeline_usage_28_days_event","comment":null,"description":"Pipelines containing a Container Scanning job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216175507_container_scanning_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"container_scanning_pipeline_usage_28_days_event"},"DEPENDENCY_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":131,"name":"dependency_scanning_pipeline_usage_28_days_event","comment":null,"description":"Count of pipelines with successful Dependency Scanning jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216175226_dependency_scanning_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dependency_scanning_pipeline_usage_28_days_event"},"SAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":132,"name":"sast_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 SAST job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216182129_sast_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"sast_pipeline_usage_28_days_event"},"SECRET_DETECTION_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":133,"name":"secret_detection_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 Secret Detection job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216182131_secret_detection_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"secret_detection_pipeline_usage_28_days_event"},"DAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":134,"name":"dast_pipeline_usage_28_days_event","comment":null,"description":"Count of pipelines that have at least 1 DAST job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216175618_dast_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dast_pipeline_usage_28_days_event"},"COVERAGE_FUZZING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":135,"name":"coverage_fuzzing_jobs_28_days_user","comment":null,"description":"Users who run a coverage fuzzing job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183817_user_coverage_fuzzing_jobs.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"coverage_fuzzing_jobs_28_days_user"},"ENVIRONMENTS_ALL_TIME_EVENT":{"type":"NUMBER","index":136,"name":"environments_all_time_event","comment":null,"description":"Total available and stopped environments. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181914_environments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"environments_all_time_event"},"FEATURE_FLAGS_ALL_TIME_EVENT":{"type":"NUMBER","index":137,"name":"feature_flags_all_time_event","comment":null,"description":"Number of feature flag toggles. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181249_feature_flags.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"feature_flags_all_time_event"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":138,"name":"successful_deployments_28_days_event","comment":null,"description":"Total successful deployments. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181923_successful_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"successful_deployments_28_days_event"},"FAILED_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":139,"name":"failed_deployments_28_days_event","comment":null,"description":"Total failed deployments. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181924_failed_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"failed_deployments_28_days_event"},"PROJECTS_COMPLIANCE_FRAMEWORK_ALL_TIME_EVENT":{"type":"NUMBER","index":140,"name":"projects_compliance_framework_all_time_event","comment":null,"description":"Number of projects labeled with a compliance framework label. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180825_projects_with_compliance_framework.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_compliance_framework_all_time_event"},"COMMIT_CI_CONFIG_FILE_28_DAYS_USER":{"type":"NUMBER","index":141,"name":"commit_ci_config_file_28_days_user","comment":null,"description":"Monthly unique user count doing commits which contains the CI config file.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216184303_o_pipeline_authoring_unique_users_committing_ciconfigfile_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"commit_ci_config_file_28_days_user"},"VIEW_AUDIT_ALL_TIME_USER":{"type":"NUMBER","index":142,"name":"view_audit_all_time_user","comment":null,"description":"Unique users who have viewed audit events. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216183906_g_compliance_audit_events.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"view_audit_all_time_user"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_USER":{"type":"NUMBER","index":143,"name":"dependency_scanning_jobs_all_time_user","comment":null,"description":"Total number of users running Dependency Scanning jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216175216_user_dependency_scanning_jobs.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dependency_scanning_jobs_all_time_user"},"ANALYTICS_DEVOPS_ADOPTION_ALL_TIME_USER":{"type":"NUMBER","index":144,"name":"analytics_devops_adoption_all_time_user","comment":null,"description":"Unique users viewing analytics devops adoption. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210423005644_i_analytics_dev_ops_adoption.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"analytics_devops_adoption_all_time_user"},"PROJECTS_IMPORTED_ALL_TIME_EVENT":{"type":"NUMBER","index":145,"name":"projects_imported_all_time_event","comment":null,"description":"Number of projects imported. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210514141520_project_imports_total.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_imported_all_time_event"},"PREFERENCES_SECURITY_DASHBOARD_28_DAYS_USER":{"type":"NUMBER","index":146,"name":"preferences_security_dashboard_28_days_user","comment":null,"description":"Users who set personal preference to see Security Dashboard on Group\n information page. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216182209_user_preferences_group_overview_security_dashboard.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"preferences_security_dashboard_28_days_user"},"WEB_IDE_EDIT_28_DAYS_USER":{"type":"NUMBER","index":147,"name":"web_ide_edit_28_days_user","comment":null,"description":"Number of unique users per month who edited a file from any web editor. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180327_action_monthly_active_users_ide_edit.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"web_ide_edit_28_days_user"},"AUTO_DEVOPS_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":148,"name":"auto_devops_pipelines_all_time_event","comment":null,"description":"Total pipelines from an Auto DevOps template. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216175516_ci_pipeline_config_auto_devops.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"auto_devops_pipelines_all_time_event"},"PROJECTS_PROMETHEUS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":149,"name":"projects_prometheus_active_all_time_event","comment":null,"description":"Count of projects with active integrations for Prometheus. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216180931_projects_prometheus_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_prometheus_active_all_time_event"},"PROMETHEUS_ENABLED":{"type":"BOOLEAN","index":150,"name":"prometheus_enabled","comment":null,"description":"Whether the bundled Prometheus is enabled. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/settings/20210204124912_prometheus_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"prometheus_enabled"},"PROMETHEUS_METRICS_ENABLED":{"type":"BOOLEAN","index":151,"name":"prometheus_metrics_enabled","comment":null,"description":"Whether Prometheus Metrics endpoint is enabled. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/settings/20210204124914_prometheus_metrics_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"prometheus_metrics_enabled"},"GROUP_SAML_ENABLED":{"type":"BOOLEAN","index":152,"name":"group_saml_enabled","comment":null,"description":"Has the instance enabled Group SAML SSO `https://docs.gitlab.com/ee/user/group/saml_sso/`\n on at least 1 group? [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/settings/20210216180813_group_saml_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"group_saml_enabled"},"JIRA_ISSUE_IMPORTS_ALL_TIME_EVENT":{"type":"NUMBER","index":153,"name":"jira_issue_imports_all_time_event","comment":null,"description":"Count of projects imported from Jira. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216180654_jira.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"jira_issue_imports_all_time_event"},"AUTHOR_EPIC_ALL_TIME_USER":{"type":"NUMBER","index":154,"name":"author_epic_all_time_user","comment":null,"description":"Count distinct author ids from epics. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181134_epics.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"author_epic_all_time_user"},"AUTHOR_ISSUE_ALL_TIME_USER":{"type":"NUMBER","index":155,"name":"author_issue_all_time_user","comment":null,"description":"Count of users creating Issues. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181115_issues.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"author_issue_all_time_user"},"FAILED_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":156,"name":"failed_deployments_28_days_user","comment":null,"description":"Disinct users who initiated a failed deployment. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181937_failed_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"failed_deployments_28_days_user"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"successful_deployments_28_days_user","comment":null,"description":"Disinct users who initiated a successful deployment. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181941_successful_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"successful_deployments_28_days_user"},"GEO_ENABLED":{"type":"BOOLEAN","index":158,"name":"geo_enabled","comment":null,"description":"Is Geo enabled? [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/settings/20210216180406_geo_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"geo_enabled"},"AUTO_DEVOPS_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":159,"name":"auto_devops_pipelines_28_days_user","comment":null,"description":"Distinct users that ran an auto DevOps pipeline without a .gitlab-ci.yml file. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175548_ci_pipeline_config_auto_devops.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"auto_devops_pipelines_28_days_user"},"ACTIVE_INSTANCE_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":160,"name":"active_instance_runners_all_time_event","comment":null,"description":"Total active Shared (Instance) Runners. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210502045402_ci_runners_instance_type_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"active_instance_runners_all_time_event"},"ACTIVE_GROUP_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"active_group_runners_all_time_event","comment":null,"description":"Total active Group Runners. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210502050341_ci_runners_group_type_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"active_group_runners_all_time_event"},"ACTIVE_PROJECT_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"active_project_runners_all_time_event","comment":null,"description":"Total active Specific (Project) Runners. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210502050834_ci_runners_project_type_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"active_project_runners_all_time_event"},"GITALY_VERSION":{"type":"TEXT","index":163,"name":"gitaly_version","comment":null,"description":"Version of Gitaly. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/license/20210204124928_version.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"gitaly_version"},"GITALY_SERVERS_ALL_TIME_EVENT":{"type":"NUMBER","index":164,"name":"gitaly_servers_all_time_event","comment":null,"description":"Total Gitalty Servers. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210204124930_servers.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"gitaly_servers_all_time_event"},"API_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":165,"name":"api_fuzzing_scans_all_time_event","comment":null,"description":"Number of DAST API Fuzzing security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216180353_api_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"api_fuzzing_scans_all_time_event"},"API_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":166,"name":"api_fuzzing_scans_28_days_event","comment":null,"description":"Count of API fuzz test scans. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183838_api_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"api_fuzzing_scans_28_days_event"},"COVERAGE_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":167,"name":"coverage_fuzzing_scans_all_time_event","comment":null,"description":"Number of Coverage Fuzzing security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216180352_coverage_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"coverage_fuzzing_scans_all_time_event"},"COVERAGE_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":168,"name":"coverage_fuzzing_scans_28_days_event","comment":null,"description":"Number of Coverage Guided Fuzz Test security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183836_coverage_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"coverage_fuzzing_scans_28_days_event"},"SECRET_DETECTION_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":169,"name":"secret_detection_scans_all_time_event","comment":null,"description":"Counts secret detection jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182123_secret_detection_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"secret_detection_scans_all_time_event"},"SECRET_DETECTION_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":170,"name":"secret_detection_scans_28_days_event","comment":null,"description":"Number of Secret Detection security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210830231956_secret_detection_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"secret_detection_scans_28_days_event"},"DEPENDENCY_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":171,"name":"dependency_scanning_scans_all_time_event","comment":null,"description":"Total count of Dependency Scanning security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216175220_dependency_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dependency_scanning_scans_all_time_event"},"DEPENDENCY_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":172,"name":"dependency_scanning_scans_28_days_event","comment":null,"description":"Monthly count of Dependency Scanning security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183828_dependency_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dependency_scanning_scans_28_days_event"},"CONTAINER_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":173,"name":"container_scanning_scans_all_time_event","comment":null,"description":"Counts container scanning jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216175503_container_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"container_scanning_scans_all_time_event"},"CONTAINER_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":174,"name":"container_scanning_scans_28_days_event","comment":null,"description":"Number of Container Scanning security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210830231849_container_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"container_scanning_scans_28_days_event"},"DAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":175,"name":"dast_scans_all_time_event","comment":null,"description":"Counts dast jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182122_dast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dast_scans_all_time_event"},"DAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":176,"name":"dast_scans_28_days_event","comment":null,"description":"Number of DAST security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183832_dast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"dast_scans_28_days_event"},"SAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":177,"name":"sast_scans_all_time_event","comment":null,"description":"Counts sast jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182120_sast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"sast_scans_all_time_event"},"SAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":178,"name":"sast_scans_28_days_event","comment":null,"description":"Number of SAST security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210830231329_sast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"sast_scans_28_days_event"},"PACKAGES_PUSHED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":179,"name":"packages_pushed_registry_all_time_event","comment":null,"description":"A count of packages that have been published to the package registry\nusing a deploy token. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216183005_package_events_i_package_push_package_by_deploy_token.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"packages_pushed_registry_all_time_event"},"PACKAGES_PULLED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":180,"name":"packages_pulled_registry_all_time_event","comment":null,"description":"A count of packages that have been downloaded from the package registry\nby a guest. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216183000_package_events_i_package_pull_package_by_guest.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"packages_pulled_registry_all_time_event"},"COMPLIANCE_DASHBOARD_VIEW_28_DAYS_USER":{"type":"NUMBER","index":181,"name":"compliance_dashboard_view_28_days_user","comment":null,"description":"Unique users who have viewed the compliance dashboard in a given month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183926_g_compliance_dashboard_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"compliance_dashboard_view_28_days_user"},"AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":182,"name":"audit_screen_view_28_days_user","comment":null,"description":"Unique users who have viewed the audit event screen in a given month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183930_g_compliance_audit_events_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"audit_screen_view_28_days_user"},"INSTANCE_AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":183,"name":"instance_audit_screen_view_28_days_user","comment":null,"description":"Unique users that have viewed the instance-level audit events screen. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183934_i_compliance_audit_events_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"instance_audit_screen_view_28_days_user"},"CREDENTIAL_INVENTORY_VIEW_28_DAYS_USER":{"type":"NUMBER","index":184,"name":"credential_inventory_view_28_days_user","comment":null,"description":"Unique users who have viewed the credential inventory in a given month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183938_i_compliance_credential_inventory_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"credential_inventory_view_28_days_user"},"COMPLIANCE_FRAMEWORKS_PIPELINE_ALL_TIME_EVENT":{"type":"NUMBER","index":185,"name":"compliance_frameworks_pipeline_all_time_event","comment":null,"description":"Count of compliance frameworks that have a pipeline configuration. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210622123800_compliance_frameworks_with_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"compliance_frameworks_pipeline_all_time_event"},"COMPLIANCE_FRAMEWORKS_PIPELINE_28_DAYS_EVENT":{"type":"NUMBER","index":186,"name":"compliance_frameworks_pipeline_28_days_event","comment":null,"description":"Count of compliance frameworks that have a pipeline configuration. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210622091519_compliance_frameworks_with_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"compliance_frameworks_pipeline_28_days_event"},"GROUPS_STREAMING_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":187,"name":"groups_streaming_destinations_all_time_event","comment":null,"description":"Count of compliance frameworks that have a pipeline configuration. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210622123800_compliance_frameworks_with_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"groups_streaming_destinations_all_time_event"},"GROUPS_STREAMING_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":188,"name":"groups_streaming_destinations_28_days_event","comment":null,"description":"Distinct count of groups with any event streaming destinations. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20211130091657_groups_with_event_streaming_destinations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"groups_streaming_destinations_28_days_event"},"AUDIT_EVENT_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":189,"name":"audit_event_destinations_all_time_event","comment":null,"description":"Count of audit event streaming destinations. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20211130085433_g_manage_compliance_audit_event_destinations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"audit_event_destinations_all_time_event"},"AUDIT_EVENT_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":190,"name":"audit_event_destinations_28_days_event","comment":null,"description":"Count of audit event streaming destinations. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20211130085433_g_manage_compliance_audit_event_destinations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"audit_event_destinations_28_days_event"},"PROJECTS_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":191,"name":"projects_status_checks_all_time_event","comment":null,"description":"Total number of distinct projects with external status checks. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20220308162514_projects_with_external_status_checks.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_status_checks_all_time_event"},"EXTERNAL_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":192,"name":"external_status_checks_all_time_event","comment":null,"description":"Total number of external status checks. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20220308155129_external_status_checks.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"external_status_checks_all_time_event"},"PAID_LICENSE_SEARCH_28_DAYS_USER":{"type":"NUMBER","index":193,"name":"paid_license_search_28_days_user","comment":null,"description":"Calculated unique users to perform a search with a paid license enabled\nby month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216184035_i_search_paid_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"paid_license_search_28_days_user"},"LAST_ACTIVITY_28_DAYS_USER":{"type":"NUMBER","index":194,"name":"last_activity_28_days_user","comment":null,"description":"Users that have a last_activity_on date within the past 28 days. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20220621085114_unique_active_users_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"last_activity_28_days_user"},"SNIPPETS_28_DAYS_EVENT":{"type":"NUMBER","index":195,"name":"snippets_28_days_event","comment":null,"description":"Monthly count of All Snippets. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180312_snippets.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"snippets_28_days_event"},"SINGLE_FILE_EDITOR_28_DAYS_USER":{"type":"NUMBER","index":196,"name":"single_file_editor_28_days_user","comment":null,"description":"Number of users editing a file from the single file editor. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180334_g_edit_by_sfe_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"single_file_editor_28_days_user"},"MERGE_REQUESTS_CREATED_28_DAYS_EVENT":{"type":"NUMBER","index":197,"name":"merge_requests_created_28_days_event","comment":null,"description":"Count of unique merge requests created per month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20221213182900_i_code_review_create_mr_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"merge_requests_created_28_days_event"},"MERGE_REQUESTS_CREATED_28_DAYS_USER":{"type":"NUMBER","index":198,"name":"merge_requests_created_28_days_user","comment":null,"description":"Count of unique users per month who created a MR. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/60dda716679ae92aa368633bdee597b8fa57984f/config/metrics/counts_28d/20210216175132_i_code_review_user_create_mr_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"merge_requests_created_28_days_user"},"MERGE_REQUESTS_APPROVAL_RULES_28_DAYS_EVENT":{"type":"NUMBER","index":199,"name":"merge_requests_approval_rules_28_days_event","comment":null,"description":"Count of distinct merge requests merged using approval rules. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20221211202138_merged_merge_requests_using_approval_rules_distinct.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"merge_requests_approval_rules_28_days_event"},"CUSTOM_COMPLIANCE_FRAMEWORKS_28_DAYS_EVENT":{"type":"NUMBER","index":200,"name":"custom_compliance_frameworks_28_days_event","comment":null,"description":"Monthly count of all custom compliance framework labels. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210507165054_custom_compliance_frameworks.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"custom_compliance_frameworks_28_days_event"},"PROJECTS_SECURITY_POLICY_28_DAYS_EVENT":{"type":"NUMBER","index":201,"name":"projects_security_policy_28_days_event","comment":null,"description":"The total number of projects with an assigned security policy project. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20220927083011_distinct_count_project_id_from_security_orchestration_policy_configurations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"projects_security_policy_28_days_event"},"MERGE_REQUESTS_SECURITY_POLICY_28_DAYS_USER":{"type":"NUMBER","index":202,"name":"merge_requests_security_policy_28_days_user","comment":null,"description":"The total number of users who have created merge requests in Projects that have an assigned security policy project. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20220927083016_user_merge_requests_for_projects_with_security_policy_project.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"merge_requests_security_policy_28_days_user"},"PIPELINES_IMPLICIT_AUTO_DEVOPS_28_DAYS_EVENT":{"type":"NUMBER","index":203,"name":"pipelines_implicit_auto_devops_28_days_event","comment":null,"description":"Count of pipelines with implicit Auto DevOps runs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216184458_p_ci_templates_implicit_auto_devops_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"pipelines_implicit_auto_devops_28_days_event"},"PIPELINE_SCHEDULES_28_DAYS_USER":{"type":"NUMBER","index":204,"name":"pipeline_schedules_28_days_user","comment":null,"description":"Distinct users creating pipeline schedules in a month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175552_ci_pipeline_schedules.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"pipeline_schedules_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_EVENT":{"type":"NUMBER","index":205,"name":"ci_internal_pipelines_28_days_event","comment":null,"description":"Total monthly (28D) pipelines in Gitlab repositories for all project and project types [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20230217215050_ci_internal_pipelines.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('pump_gainsight_metrics_monthly_paid')) }}\"})"}],"display_name":"ci_internal_pipelines_28_days_event"},"IS_LATEST_DATA":{"type":"BOOLEAN","index":206,"name":"is_latest_data","comment":null,"description":"Flags the row with the most recently received data from Usage Ping","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_latest_data"},"PRIMARY_KEY":{"type":"TEXT","index":207,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"primary_key"},"CREATED_BY":{"type":"TEXT","index":208,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":209,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":210,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":211,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":212,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":213,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"subscription_status_original":{"name":"subscription_status_original","description":"Status of the original subscription id at the time the usage ping was created. This was added to allow a status to be reported even when manual changes to Zuora subscriptions have broken the join.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_status_original"},"subscription_start_date_original":{"name":"subscription_start_date_original","description":"Date the subscription term of the orgininal subscription version started.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date_original"},"subscription_end_date_original":{"name":"subscription_end_date_original","description":"Date the subscription term of the original subscription version ended. Because of how subscription end dates are calcuated in dim_subscription_snapshot_bottom_up, this will be the same as the subscription_end_date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date_original"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:52UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":242752000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.pump_gainsight_metrics_monthly_paid","raw_sql":"$20","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_keyed_nulls","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_saas","model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_saas","model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_self_managed","model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_self_managed","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time"]},"config":{"enabled":true,"alias":null,"schema":"pumps","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"pumps","fqn":["gitlab_snowflake","marts","pumps","pump_gainsight_metrics_monthly_paid"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/pumps/pump_gainsight_metrics_monthly_paid.sql","original_file_path":"models/marts/pumps/pump_gainsight_metrics_monthly_paid.sql","name":"pump_gainsight_metrics_monthly_paid","alias":"pump_gainsight_metrics_monthly_paid","checksum":{"name":"sha256","checksum":"cee1a3f900ebc8cc3afd6fb5821da9d30eeb172b3e3ccba677bb2ed92e204427"},"tags":["product","mnpi_exception"],"refs":[["rpt_gainsight_metrics_monthly_paid_saas"],["rpt_gainsight_metrics_monthly_paid_saas"],["rpt_gainsight_metrics_monthly_paid_self_managed"],["rpt_gainsight_metrics_monthly_paid_self_managed"],["dim_billing_account"],["dim_billing_account"],["dim_location_country"],["dim_location_country"],["dim_subscription"],["dim_subscription"],["dim_namespace"],["dim_namespace"],["mart_charge"],["mart_charge"],["dim_date"],["dim_date"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_event_based_metric_counts_namespace_all_time"],["wk_rpt_event_based_metric_counts_namespace_all_time"]],"sources":[],"metrics":[],"description":"$21","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/marts/pumps/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/pumps/pump_gainsight_metrics_monthly_paid.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"pumps","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033729.6612644,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".pumps.pump_gainsight_metrics_monthly_paid","label":"pump_gainsight_metrics_monthly_paid"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_CUSTOMER_SUCCESS","name":"MART_PRODUCT_USAGE_PAID_USER_METRICS_MONTHLY_WORKSPACE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"snapshot_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_month"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_NAMESPACE_ID":{"type":"TEXT","index":3,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":4,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":5,"name":"NAMESPACE_CREATION_DATE","comment":null,"display_name":"namespace_creation_date"},"UUID":{"type":"TEXT","index":6,"name":"UUID","comment":null,"display_name":"uuid"},"HOSTNAME":{"type":"TEXT","index":7,"name":"HOSTNAME","comment":null,"display_name":"hostname"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":8,"name":"DIM_INSTALLATION_ID","comment":null,"display_name":"dim_installation_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":10,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":11,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION","comment":null,"display_name":"subscription_status_most_recent_version"},"TERM_START_DATE":{"type":"DATE","index":15,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":16,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":17,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":18,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SNAPSHOT_DATE_ID":{"type":"NUMBER","index":19,"name":"snapshot_date_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_date_id"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"PING_CREATED_AT","comment":null,"display_name":"ping_created_at"},"DIM_USAGE_PING_ID":{"type":"TEXT","index":21,"name":"DIM_USAGE_PING_ID","comment":null,"display_name":"dim_usage_ping_id"},"INSTANCE_TYPE":{"type":"TEXT","index":22,"name":"INSTANCE_TYPE","comment":null,"display_name":"instance_type"},"INCLUDED_IN_HEALTH_MEASURES_STR":{"type":"TEXT","index":23,"name":"INCLUDED_IN_HEALTH_MEASURES_STR","comment":null,"display_name":"included_in_health_measures_str"},"CLEANED_VERSION":{"type":"TEXT","index":24,"name":"CLEANED_VERSION","comment":null,"display_name":"cleaned_version"},"COUNTRY_NAME":{"type":"TEXT","index":25,"name":"COUNTRY_NAME","comment":null,"display_name":"country_name"},"ISO_2_COUNTRY_CODE":{"type":"TEXT","index":26,"name":"ISO_2_COUNTRY_CODE","comment":null,"display_name":"iso_2_country_code"},"ISO_3_COUNTRY_CODE":{"type":"TEXT","index":27,"name":"ISO_3_COUNTRY_CODE","comment":null,"display_name":"iso_3_country_code"},"DELIVERY_TYPE":{"type":"TEXT","index":28,"name":"delivery_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"delivery_type"},"DEPLOYMENT_TYPE":{"type":"TEXT","index":29,"name":"deployment_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"deployment_type"},"INSTALLATION_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":30,"name":"INSTALLATION_CREATION_DATE","comment":null,"display_name":"installation_creation_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":31,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"BILLABLE_USER_COUNT":{"type":"NUMBER","index":32,"name":"BILLABLE_USER_COUNT","comment":null,"display_name":"billable_user_count"},"ACTIVE_USER_COUNT":{"type":"NUMBER","index":33,"name":"ACTIVE_USER_COUNT","comment":null,"display_name":"active_user_count"},"MAX_HISTORICAL_USER_COUNT":{"type":"NUMBER","index":34,"name":"MAX_HISTORICAL_USER_COUNT","comment":null,"display_name":"max_historical_user_count"},"LICENSE_USER_COUNT":{"type":"FLOAT","index":35,"name":"LICENSE_USER_COUNT","comment":null,"display_name":"license_user_count"},"LICENSE_USER_COUNT_SOURCE":{"type":"TEXT","index":36,"name":"LICENSE_USER_COUNT_SOURCE","comment":null,"display_name":"license_user_count_source"},"UMAU_28_DAYS_USER":{"type":"NUMBER","index":37,"name":"UMAU_28_DAYS_USER","comment":null,"display_name":"umau_28_days_user"},"ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":38,"name":"ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"action_monthly_active_users_project_repo_28_days_user"},"MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":39,"name":"MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"merge_requests_28_days_user"},"PROJECTS_WITH_REPOSITORIES_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":40,"name":"PROJECTS_WITH_REPOSITORIES_ENABLED_28_DAYS_USER","comment":null,"display_name":"projects_with_repositories_enabled_28_days_user"},"COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":41,"name":"COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"commit_comment_all_time_event"},"SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":42,"name":"SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"source_code_pushes_all_time_event"},"CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":43,"name":"CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"ci_pipelines_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":44,"name":"CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"ci_internal_pipelines_28_days_user"},"CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":45,"name":"CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"ci_builds_28_days_user"},"CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":46,"name":"CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"ci_builds_all_time_user"},"CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":47,"name":"CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"ci_builds_all_time_event"},"CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":48,"name":"CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"ci_runners_all_time_event"},"AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":49,"name":"AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"auto_devops_enabled_all_time_event"},"GITLAB_SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":50,"name":"GITLAB_SHARED_RUNNERS_ENABLED","comment":null,"display_name":"gitlab_shared_runners_enabled"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":51,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":52,"name":"TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"template_repositories_all_time_event"},"CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":53,"name":"CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"ci_pipeline_config_repository_28_days_user"},"USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":54,"name":"USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"user_unique_users_all_secure_scanners_28_days_user"},"USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":55,"name":"USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"user_sast_jobs_28_days_user"},"USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":56,"name":"USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"user_dast_jobs_28_days_user"},"USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":57,"name":"USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"user_dependency_scanning_jobs_28_days_user"},"USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":58,"name":"USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"user_license_management_jobs_28_days_user"},"USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":59,"name":"USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"user_secret_detection_jobs_28_days_user"},"USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":60,"name":"USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"user_container_scanning_jobs_28_days_user"},"OBJECT_STORE_PACKAGES_ENABLED":{"type":"BOOLEAN","index":61,"name":"OBJECT_STORE_PACKAGES_ENABLED","comment":null,"display_name":"object_store_packages_enabled"},"PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":62,"name":"PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"projects_with_packages_all_time_event"},"PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":63,"name":"PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"projects_with_packages_28_days_event"},"DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":64,"name":"DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"deployments_28_days_user"},"RELEASES_28_DAYS_USER":{"type":"NUMBER","index":65,"name":"RELEASES_28_DAYS_USER","comment":null,"display_name":"releases_28_days_user"},"EPICS_28_DAYS_USER":{"type":"NUMBER","index":66,"name":"EPICS_28_DAYS_USER","comment":null,"display_name":"epics_28_days_user"},"ISSUES_28_DAYS_USER":{"type":"NUMBER","index":67,"name":"ISSUES_28_DAYS_USER","comment":null,"display_name":"issues_28_days_user"},"CI_INTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":68,"name":"CI_INTERNAL_PIPELINES_ALL_TIME_EVENT","comment":null,"display_name":"ci_internal_pipelines_all_time_event"},"CI_EXTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":69,"name":"CI_EXTERNAL_PIPELINES_ALL_TIME_EVENT","comment":null,"display_name":"ci_external_pipelines_all_time_event"},"MERGE_REQUESTS_ALL_TIME_EVENT":{"type":"NUMBER","index":70,"name":"MERGE_REQUESTS_ALL_TIME_EVENT","comment":null,"display_name":"merge_requests_all_time_event"},"TODOS_ALL_TIME_EVENT":{"type":"NUMBER","index":71,"name":"TODOS_ALL_TIME_EVENT","comment":null,"display_name":"todos_all_time_event"},"EPICS_ALL_TIME_EVENT":{"type":"NUMBER","index":72,"name":"EPICS_ALL_TIME_EVENT","comment":null,"display_name":"epics_all_time_event"},"ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":73,"name":"ISSUES_ALL_TIME_EVENT","comment":null,"display_name":"issues_all_time_event"},"PROJECTS_ALL_TIME_EVENT":{"type":"NUMBER","index":74,"name":"PROJECTS_ALL_TIME_EVENT","comment":null,"display_name":"projects_all_time_event"},"DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":75,"name":"DEPLOYMENTS_28_DAYS_EVENT","comment":null,"display_name":"deployments_28_days_event"},"PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":76,"name":"PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"packages_28_days_event"},"SAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":77,"name":"SAST_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"sast_jobs_all_time_event"},"DAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":78,"name":"DAST_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"dast_jobs_all_time_event"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":79,"name":"DEPENDENCY_SCANNING_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"dependency_scanning_jobs_all_time_event"},"LICENSE_MANAGEMENT_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":80,"name":"LICENSE_MANAGEMENT_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"license_management_jobs_all_time_event"},"SECRET_DETECTION_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":81,"name":"SECRET_DETECTION_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"secret_detection_jobs_all_time_event"},"CONTAINER_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":82,"name":"CONTAINER_SCANNING_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"container_scanning_jobs_all_time_event"},"PROJECTS_JENKINS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":83,"name":"PROJECTS_JENKINS_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jenkins_active_all_time_event"},"PROJECTS_BAMBOO_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":84,"name":"PROJECTS_BAMBOO_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_bamboo_active_all_time_event"},"PROJECTS_JIRA_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":85,"name":"PROJECTS_JIRA_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_active_all_time_event"},"PROJECTS_DRONE_CI_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":86,"name":"PROJECTS_DRONE_CI_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_drone_ci_active_all_time_event"},"PROJECTS_GITHUB_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":87,"name":"PROJECTS_GITHUB_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_github_active_all_time_event"},"PROJECTS_JIRA_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":88,"name":"PROJECTS_JIRA_SERVER_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_server_active_all_time_event"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":89,"name":"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_dvcs_cloud_active_all_time_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":90,"name":"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"projects_with_repositories_enabled_all_time_event"},"PROTECTED_BRANCHES_ALL_TIME_EVENT":{"type":"NUMBER","index":91,"name":"PROTECTED_BRANCHES_ALL_TIME_EVENT","comment":null,"display_name":"protected_branches_all_time_event"},"REMOTE_MIRRORS_ALL_TIME_EVENT":{"type":"NUMBER","index":92,"name":"REMOTE_MIRRORS_ALL_TIME_EVENT","comment":null,"display_name":"remote_mirrors_all_time_event"},"PROJECTS_ENFORCING_CODE_OWNER_APPROVAL_28_DAYS_USER":{"type":"NUMBER","index":93,"name":"PROJECTS_ENFORCING_CODE_OWNER_APPROVAL_28_DAYS_USER","comment":null,"display_name":"projects_enforcing_code_owner_approval_28_days_user"},"PROJECT_CLUSTERS_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":94,"name":"PROJECT_CLUSTERS_ENABLED_28_DAYS_USER","comment":null,"display_name":"project_clusters_enabled_28_days_user"},"ANALYTICS_28_DAYS_USER":{"type":"NUMBER","index":95,"name":"ANALYTICS_28_DAYS_USER","comment":null,"display_name":"analytics_28_days_user"},"ISSUES_EDIT_28_DAYS_USER":{"type":"NUMBER","index":96,"name":"ISSUES_EDIT_28_DAYS_USER","comment":null,"display_name":"issues_edit_28_days_user"},"USER_PACKAGES_28_DAYS_USER":{"type":"NUMBER","index":97,"name":"USER_PACKAGES_28_DAYS_USER","comment":null,"display_name":"user_packages_28_days_user"},"TERRAFORM_STATE_API_28_DAYS_USER":{"type":"NUMBER","index":98,"name":"TERRAFORM_STATE_API_28_DAYS_USER","comment":null,"display_name":"terraform_state_api_28_days_user"},"INCIDENT_MANAGEMENT_28_DAYS_USER":{"type":"NUMBER","index":99,"name":"INCIDENT_MANAGEMENT_28_DAYS_USER","comment":null,"display_name":"incident_management_28_days_user"},"AUTO_DEVOPS_ENABLED":{"type":"BOOLEAN","index":100,"name":"AUTO_DEVOPS_ENABLED","comment":null,"display_name":"auto_devops_enabled"},"GITALY_CLUSTERS_INSTANCE":{"type":"NUMBER","index":101,"name":"GITALY_CLUSTERS_INSTANCE","comment":null,"display_name":"gitaly_clusters_instance"},"EPICS_DEEPEST_RELATIONSHIP_LEVEL_INSTANCE":{"type":"NUMBER","index":102,"name":"EPICS_DEEPEST_RELATIONSHIP_LEVEL_INSTANCE","comment":null,"display_name":"epics_deepest_relationship_level_instance"},"CLUSTERS_APPLICATIONS_CILIUM_ALL_TIME_EVENT":{"type":"NUMBER","index":103,"name":"CLUSTERS_APPLICATIONS_CILIUM_ALL_TIME_EVENT","comment":null,"display_name":"clusters_applications_cilium_all_time_event"},"NETWORK_POLICY_FORWARDS_ALL_TIME_EVENT":{"type":"NUMBER","index":104,"name":"NETWORK_POLICY_FORWARDS_ALL_TIME_EVENT","comment":null,"display_name":"network_policy_forwards_all_time_event"},"NETWORK_POLICY_DROPS_ALL_TIME_EVENT":{"type":"NUMBER","index":105,"name":"NETWORK_POLICY_DROPS_ALL_TIME_EVENT","comment":null,"display_name":"network_policy_drops_all_time_event"},"REQUIREMENTS_WITH_TEST_REPORT_ALL_TIME_EVENT":{"type":"NUMBER","index":106,"name":"REQUIREMENTS_WITH_TEST_REPORT_ALL_TIME_EVENT","comment":null,"display_name":"requirements_with_test_report_all_time_event"},"REQUIREMENT_TEST_REPORTS_CI_ALL_TIME_EVENT":{"type":"NUMBER","index":107,"name":"REQUIREMENT_TEST_REPORTS_CI_ALL_TIME_EVENT","comment":null,"display_name":"requirement_test_reports_ci_all_time_event"},"PROJECTS_IMPORTED_FROM_GITHUB_ALL_TIME_EVENT":{"type":"NUMBER","index":108,"name":"PROJECTS_IMPORTED_FROM_GITHUB_ALL_TIME_EVENT","comment":null,"display_name":"projects_imported_from_github_all_time_event"},"PROJECTS_JIRA_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":109,"name":"PROJECTS_JIRA_CLOUD_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_cloud_active_all_time_event"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":110,"name":"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_dvcs_server_active_all_time_event"},"SERVICE_DESK_ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":111,"name":"SERVICE_DESK_ISSUES_ALL_TIME_EVENT","comment":null,"display_name":"service_desk_issues_all_time_event"},"CI_PIPELINES_ALL_TIME_USER":{"type":"NUMBER","index":112,"name":"CI_PIPELINES_ALL_TIME_USER","comment":null,"display_name":"ci_pipelines_all_time_user"},"SERVICE_DESK_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":113,"name":"SERVICE_DESK_ISSUES_28_DAYS_USER","comment":null,"display_name":"service_desk_issues_28_days_user"},"PROJECTS_JIRA_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":114,"name":"PROJECTS_JIRA_ACTIVE_28_DAYS_USER","comment":null,"display_name":"projects_jira_active_28_days_user"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":115,"name":"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_28_DAYS_USER","comment":null,"display_name":"projects_jira_dvcs_cloud_active_28_days_user"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":116,"name":"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_28_DAYS_USER","comment":null,"display_name":"projects_jira_dvcs_server_active_28_days_user"},"MERGE_REQUESTS_WITH_REQUIRED_CODE_OWNERS_28_DAYS_USER":{"type":"NUMBER","index":117,"name":"MERGE_REQUESTS_WITH_REQUIRED_CODE_OWNERS_28_DAYS_USER","comment":null,"display_name":"merge_requests_with_required_code_owners_28_days_user"},"ANALYTICS_VALUE_STREAM_28_DAYS_EVENT":{"type":"NUMBER","index":118,"name":"ANALYTICS_VALUE_STREAM_28_DAYS_EVENT","comment":null,"display_name":"analytics_value_stream_28_days_event"},"CODE_REVIEW_USER_APPROVE_MR_28_DAYS_USER":{"type":"NUMBER","index":119,"name":"CODE_REVIEW_USER_APPROVE_MR_28_DAYS_USER","comment":null,"display_name":"code_review_user_approve_mr_28_days_user"},"EPICS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":120,"name":"EPICS_USAGE_28_DAYS_USER","comment":null,"display_name":"epics_usage_28_days_user"},"CI_TEMPLATES_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":121,"name":"CI_TEMPLATES_USAGE_28_DAYS_EVENT","comment":null,"display_name":"ci_templates_usage_28_days_event"},"PROJECT_MANAGEMENT_ISSUE_MILESTONE_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":122,"name":"PROJECT_MANAGEMENT_ISSUE_MILESTONE_CHANGED_28_DAYS_USER","comment":null,"display_name":"project_management_issue_milestone_changed_28_days_user"},"PROJECT_MANAGEMENT_ISSUE_ITERATION_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":123,"name":"PROJECT_MANAGEMENT_ISSUE_ITERATION_CHANGED_28_DAYS_USER","comment":null,"display_name":"project_management_issue_iteration_changed_28_days_user"},"PROTECTED_BRANCHES_28_DAYS_USER":{"type":"NUMBER","index":124,"name":"PROTECTED_BRANCHES_28_DAYS_USER","comment":null,"display_name":"protected_branches_28_days_user"},"CI_CD_LEAD_TIME_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":125,"name":"CI_CD_LEAD_TIME_USAGE_28_DAYS_EVENT","comment":null,"display_name":"ci_cd_lead_time_usage_28_days_event"},"CI_CD_DEPLOYMENT_FREQUENCY_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":126,"name":"CI_CD_DEPLOYMENT_FREQUENCY_USAGE_28_DAYS_EVENT","comment":null,"display_name":"ci_cd_deployment_frequency_usage_28_days_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_USER":{"type":"NUMBER","index":127,"name":"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_USER","comment":null,"display_name":"projects_with_repositories_enabled_all_time_user"},"API_FUZZING_JOBS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":128,"name":"API_FUZZING_JOBS_USAGE_28_DAYS_USER","comment":null,"display_name":"api_fuzzing_jobs_usage_28_days_user"},"COVERAGE_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":129,"name":"COVERAGE_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"coverage_fuzzing_pipeline_usage_28_days_event"},"API_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":130,"name":"API_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"api_fuzzing_pipeline_usage_28_days_event"},"CONTAINER_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":131,"name":"CONTAINER_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"container_scanning_pipeline_usage_28_days_event"},"DEPENDENCY_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":132,"name":"DEPENDENCY_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"dependency_scanning_pipeline_usage_28_days_event"},"SAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":133,"name":"SAST_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"sast_pipeline_usage_28_days_event"},"SECRET_DETECTION_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":134,"name":"SECRET_DETECTION_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"secret_detection_pipeline_usage_28_days_event"},"DAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":135,"name":"DAST_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"dast_pipeline_usage_28_days_event"},"COVERAGE_FUZZING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":136,"name":"COVERAGE_FUZZING_JOBS_28_DAYS_USER","comment":null,"display_name":"coverage_fuzzing_jobs_28_days_user"},"ENVIRONMENTS_ALL_TIME_EVENT":{"type":"NUMBER","index":137,"name":"ENVIRONMENTS_ALL_TIME_EVENT","comment":null,"display_name":"environments_all_time_event"},"FEATURE_FLAGS_ALL_TIME_EVENT":{"type":"NUMBER","index":138,"name":"FEATURE_FLAGS_ALL_TIME_EVENT","comment":null,"display_name":"feature_flags_all_time_event"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":139,"name":"SUCCESSFUL_DEPLOYMENTS_28_DAYS_EVENT","comment":null,"display_name":"successful_deployments_28_days_event"},"FAILED_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":140,"name":"FAILED_DEPLOYMENTS_28_DAYS_EVENT","comment":null,"display_name":"failed_deployments_28_days_event"},"PROJECTS_COMPLIANCE_FRAMEWORK_ALL_TIME_EVENT":{"type":"NUMBER","index":141,"name":"PROJECTS_COMPLIANCE_FRAMEWORK_ALL_TIME_EVENT","comment":null,"display_name":"projects_compliance_framework_all_time_event"},"COMMIT_CI_CONFIG_FILE_28_DAYS_USER":{"type":"NUMBER","index":142,"name":"COMMIT_CI_CONFIG_FILE_28_DAYS_USER","comment":null,"display_name":"commit_ci_config_file_28_days_user"},"VIEW_AUDIT_ALL_TIME_USER":{"type":"NUMBER","index":143,"name":"VIEW_AUDIT_ALL_TIME_USER","comment":null,"display_name":"view_audit_all_time_user"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_USER":{"type":"NUMBER","index":144,"name":"DEPENDENCY_SCANNING_JOBS_ALL_TIME_USER","comment":null,"display_name":"dependency_scanning_jobs_all_time_user"},"ANALYTICS_DEVOPS_ADOPTION_ALL_TIME_USER":{"type":"NUMBER","index":145,"name":"ANALYTICS_DEVOPS_ADOPTION_ALL_TIME_USER","comment":null,"display_name":"analytics_devops_adoption_all_time_user"},"PROJECTS_IMPORTED_ALL_TIME_EVENT":{"type":"NUMBER","index":146,"name":"PROJECTS_IMPORTED_ALL_TIME_EVENT","comment":null,"display_name":"projects_imported_all_time_event"},"PREFERENCES_SECURITY_DASHBOARD_28_DAYS_USER":{"type":"NUMBER","index":147,"name":"PREFERENCES_SECURITY_DASHBOARD_28_DAYS_USER","comment":null,"display_name":"preferences_security_dashboard_28_days_user"},"WEB_IDE_EDIT_28_DAYS_USER":{"type":"NUMBER","index":148,"name":"WEB_IDE_EDIT_28_DAYS_USER","comment":null,"display_name":"web_ide_edit_28_days_user"},"AUTO_DEVOPS_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":149,"name":"AUTO_DEVOPS_PIPELINES_ALL_TIME_EVENT","comment":null,"display_name":"auto_devops_pipelines_all_time_event"},"PROJECTS_PROMETHEUS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":150,"name":"PROJECTS_PROMETHEUS_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_prometheus_active_all_time_event"},"PROMETHEUS_ENABLED":{"type":"BOOLEAN","index":151,"name":"PROMETHEUS_ENABLED","comment":null,"display_name":"prometheus_enabled"},"PROMETHEUS_METRICS_ENABLED":{"type":"BOOLEAN","index":152,"name":"PROMETHEUS_METRICS_ENABLED","comment":null,"display_name":"prometheus_metrics_enabled"},"GROUP_SAML_ENABLED":{"type":"BOOLEAN","index":153,"name":"GROUP_SAML_ENABLED","comment":null,"display_name":"group_saml_enabled"},"JIRA_ISSUE_IMPORTS_ALL_TIME_EVENT":{"type":"NUMBER","index":154,"name":"JIRA_ISSUE_IMPORTS_ALL_TIME_EVENT","comment":null,"display_name":"jira_issue_imports_all_time_event"},"AUTHOR_EPIC_ALL_TIME_USER":{"type":"NUMBER","index":155,"name":"AUTHOR_EPIC_ALL_TIME_USER","comment":null,"display_name":"author_epic_all_time_user"},"AUTHOR_ISSUE_ALL_TIME_USER":{"type":"NUMBER","index":156,"name":"AUTHOR_ISSUE_ALL_TIME_USER","comment":null,"display_name":"author_issue_all_time_user"},"FAILED_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"FAILED_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"failed_deployments_28_days_user"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":158,"name":"SUCCESSFUL_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"successful_deployments_28_days_user"},"GEO_ENABLED":{"type":"BOOLEAN","index":159,"name":"GEO_ENABLED","comment":null,"display_name":"geo_enabled"},"AUTO_DEVOPS_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":160,"name":"AUTO_DEVOPS_PIPELINES_28_DAYS_USER","comment":null,"display_name":"auto_devops_pipelines_28_days_user"},"ACTIVE_INSTANCE_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"ACTIVE_INSTANCE_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"active_instance_runners_all_time_event"},"ACTIVE_GROUP_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"ACTIVE_GROUP_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"active_group_runners_all_time_event"},"ACTIVE_PROJECT_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":163,"name":"ACTIVE_PROJECT_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"active_project_runners_all_time_event"},"GITALY_VERSION":{"type":"TEXT","index":164,"name":"GITALY_VERSION","comment":null,"display_name":"gitaly_version"},"GITALY_SERVERS_ALL_TIME_EVENT":{"type":"NUMBER","index":165,"name":"GITALY_SERVERS_ALL_TIME_EVENT","comment":null,"display_name":"gitaly_servers_all_time_event"},"API_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":166,"name":"API_FUZZING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"api_fuzzing_scans_all_time_event"},"API_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":167,"name":"API_FUZZING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"api_fuzzing_scans_28_days_event"},"COVERAGE_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":168,"name":"COVERAGE_FUZZING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"coverage_fuzzing_scans_all_time_event"},"COVERAGE_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":169,"name":"COVERAGE_FUZZING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"coverage_fuzzing_scans_28_days_event"},"SECRET_DETECTION_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":170,"name":"SECRET_DETECTION_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"secret_detection_scans_all_time_event"},"SECRET_DETECTION_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":171,"name":"SECRET_DETECTION_SCANS_28_DAYS_EVENT","comment":null,"display_name":"secret_detection_scans_28_days_event"},"DEPENDENCY_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":172,"name":"DEPENDENCY_SCANNING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"dependency_scanning_scans_all_time_event"},"DEPENDENCY_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":173,"name":"DEPENDENCY_SCANNING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"dependency_scanning_scans_28_days_event"},"CONTAINER_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":174,"name":"CONTAINER_SCANNING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"container_scanning_scans_all_time_event"},"CONTAINER_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":175,"name":"CONTAINER_SCANNING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"container_scanning_scans_28_days_event"},"DAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":176,"name":"DAST_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"dast_scans_all_time_event"},"DAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":177,"name":"DAST_SCANS_28_DAYS_EVENT","comment":null,"display_name":"dast_scans_28_days_event"},"SAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":178,"name":"SAST_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"sast_scans_all_time_event"},"SAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":179,"name":"SAST_SCANS_28_DAYS_EVENT","comment":null,"display_name":"sast_scans_28_days_event"},"PACKAGES_PUSHED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":180,"name":"PACKAGES_PUSHED_REGISTRY_ALL_TIME_EVENT","comment":null,"display_name":"packages_pushed_registry_all_time_event"},"PACKAGES_PULLED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":181,"name":"PACKAGES_PULLED_REGISTRY_ALL_TIME_EVENT","comment":null,"display_name":"packages_pulled_registry_all_time_event"},"COMPLIANCE_DASHBOARD_VIEW_28_DAYS_USER":{"type":"NUMBER","index":182,"name":"COMPLIANCE_DASHBOARD_VIEW_28_DAYS_USER","comment":null,"display_name":"compliance_dashboard_view_28_days_user"},"AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":183,"name":"AUDIT_SCREEN_VIEW_28_DAYS_USER","comment":null,"display_name":"audit_screen_view_28_days_user"},"INSTANCE_AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":184,"name":"INSTANCE_AUDIT_SCREEN_VIEW_28_DAYS_USER","comment":null,"display_name":"instance_audit_screen_view_28_days_user"},"CREDENTIAL_INVENTORY_VIEW_28_DAYS_USER":{"type":"NUMBER","index":185,"name":"CREDENTIAL_INVENTORY_VIEW_28_DAYS_USER","comment":null,"display_name":"credential_inventory_view_28_days_user"},"COMPLIANCE_FRAMEWORKS_PIPELINE_ALL_TIME_EVENT":{"type":"NUMBER","index":186,"name":"COMPLIANCE_FRAMEWORKS_PIPELINE_ALL_TIME_EVENT","comment":null,"display_name":"compliance_frameworks_pipeline_all_time_event"},"COMPLIANCE_FRAMEWORKS_PIPELINE_28_DAYS_EVENT":{"type":"NUMBER","index":187,"name":"COMPLIANCE_FRAMEWORKS_PIPELINE_28_DAYS_EVENT","comment":null,"display_name":"compliance_frameworks_pipeline_28_days_event"},"GROUPS_STREAMING_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":188,"name":"GROUPS_STREAMING_DESTINATIONS_ALL_TIME_EVENT","comment":null,"display_name":"groups_streaming_destinations_all_time_event"},"GROUPS_STREAMING_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":189,"name":"GROUPS_STREAMING_DESTINATIONS_28_DAYS_EVENT","comment":null,"display_name":"groups_streaming_destinations_28_days_event"},"AUDIT_EVENT_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":190,"name":"AUDIT_EVENT_DESTINATIONS_ALL_TIME_EVENT","comment":null,"display_name":"audit_event_destinations_all_time_event"},"AUDIT_EVENT_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":191,"name":"AUDIT_EVENT_DESTINATIONS_28_DAYS_EVENT","comment":null,"display_name":"audit_event_destinations_28_days_event"},"PROJECTS_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":192,"name":"PROJECTS_STATUS_CHECKS_ALL_TIME_EVENT","comment":null,"display_name":"projects_status_checks_all_time_event"},"EXTERNAL_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":193,"name":"EXTERNAL_STATUS_CHECKS_ALL_TIME_EVENT","comment":null,"display_name":"external_status_checks_all_time_event"},"PAID_LICENSE_SEARCH_28_DAYS_USER":{"type":"NUMBER","index":194,"name":"PAID_LICENSE_SEARCH_28_DAYS_USER","comment":null,"display_name":"paid_license_search_28_days_user"},"LAST_ACTIVITY_28_DAYS_USER":{"type":"NUMBER","index":195,"name":"LAST_ACTIVITY_28_DAYS_USER","comment":null,"display_name":"last_activity_28_days_user"},"SNIPPETS_28_DAYS_EVENT":{"type":"NUMBER","index":196,"name":"SNIPPETS_28_DAYS_EVENT","comment":null,"display_name":"snippets_28_days_event"},"SINGLE_FILE_EDITOR_28_DAYS_USER":{"type":"NUMBER","index":197,"name":"SINGLE_FILE_EDITOR_28_DAYS_USER","comment":null,"display_name":"single_file_editor_28_days_user"},"MERGE_REQUESTS_CREATED_28_DAYS_EVENT":{"type":"NUMBER","index":198,"name":"MERGE_REQUESTS_CREATED_28_DAYS_EVENT","comment":null,"display_name":"merge_requests_created_28_days_event"},"MERGE_REQUESTS_CREATED_28_DAYS_USER":{"type":"NUMBER","index":199,"name":"MERGE_REQUESTS_CREATED_28_DAYS_USER","comment":null,"display_name":"merge_requests_created_28_days_user"},"MERGE_REQUESTS_APPROVAL_RULES_28_DAYS_EVENT":{"type":"NUMBER","index":200,"name":"MERGE_REQUESTS_APPROVAL_RULES_28_DAYS_EVENT","comment":null,"display_name":"merge_requests_approval_rules_28_days_event"},"CUSTOM_COMPLIANCE_FRAMEWORKS_28_DAYS_EVENT":{"type":"NUMBER","index":201,"name":"CUSTOM_COMPLIANCE_FRAMEWORKS_28_DAYS_EVENT","comment":null,"display_name":"custom_compliance_frameworks_28_days_event"},"PROJECTS_SECURITY_POLICY_28_DAYS_EVENT":{"type":"NUMBER","index":202,"name":"PROJECTS_SECURITY_POLICY_28_DAYS_EVENT","comment":null,"display_name":"projects_security_policy_28_days_event"},"MERGE_REQUESTS_SECURITY_POLICY_28_DAYS_USER":{"type":"NUMBER","index":203,"name":"MERGE_REQUESTS_SECURITY_POLICY_28_DAYS_USER","comment":null,"display_name":"merge_requests_security_policy_28_days_user"},"PIPELINES_IMPLICIT_AUTO_DEVOPS_28_DAYS_EVENT":{"type":"NUMBER","index":204,"name":"PIPELINES_IMPLICIT_AUTO_DEVOPS_28_DAYS_EVENT","comment":null,"display_name":"pipelines_implicit_auto_devops_28_days_event"},"PIPELINE_SCHEDULES_28_DAYS_USER":{"type":"NUMBER","index":205,"name":"PIPELINE_SCHEDULES_28_DAYS_USER","comment":null,"display_name":"pipeline_schedules_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_EVENT":{"type":"NUMBER","index":206,"name":"CI_INTERNAL_PIPELINES_28_DAYS_EVENT","comment":null,"display_name":"ci_internal_pipelines_28_days_event"},"IS_LATEST_DATA":{"type":"BOOLEAN","index":207,"name":"IS_LATEST_DATA","comment":null,"display_name":"is_latest_data"},"PRIMARY_KEY":{"type":"TEXT","index":208,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"primary_key"},"CREATED_BY":{"type":"TEXT","index":209,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":210,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":211,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":212,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":213,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":214,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:53UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1299031552,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_product_usage_paid_user_metrics_monthly_workspace","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_keyed_nulls","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.fct_saas_product_usage_metrics_monthly","model.gitlab_snowflake.fct_saas_product_usage_metrics_monthly","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail"]},"config":{"enabled":true,"alias":null,"schema":"workspace_customer_success","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_customer_success","fqn":["gitlab_snowflake","workspaces","workspace_customer_success","mart_product_usage_paid_user_metrics_monthly_workspace"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_customer_success/mart_product_usage_paid_user_metrics_monthly_workspace.sql","original_file_path":"models/workspaces/workspace_customer_success/mart_product_usage_paid_user_metrics_monthly_workspace.sql","name":"mart_product_usage_paid_user_metrics_monthly_workspace","alias":"mart_product_usage_paid_user_metrics_monthly_workspace","checksum":{"name":"sha256","checksum":"800b6674710aec03940f65166e6718adaaca14a23a70b28f121543cb6ba310fb"},"tags":["workspace","mnpi_exception"],"refs":[["fct_saas_product_usage_metrics_monthly"],["fct_saas_product_usage_metrics_monthly"],["fct_ping_instance_metric_wave_monthly"],["fct_ping_instance_metric_wave_monthly"],["dim_billing_account"],["dim_billing_account"],["dim_location_country"],["dim_location_country"],["dim_subscription"],["dim_subscription"],["dim_namespace"],["dim_namespace"],["mart_charge"],["mart_charge"],["dim_date"],["dim_date"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_event_based_metric_counts_namespace_all_time"],["wk_rpt_event_based_metric_counts_namespace_all_time"],["dim_product_detail"],["dim_product_detail"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_customer_success/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_customer_success/mart_product_usage_paid_user_metrics_monthly_workspace.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_customer_success","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033732.8935497,"compiled_sql":"$24","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_customer_success.mart_product_usage_paid_user_metrics_monthly_workspace","label":"mart_product_usage_paid_user_metrics_monthly_workspace"},{"metadata":{"type":"BASE TABLE","schema":"DATA_QUALITY","name":"PRODUCT_DATA_DETECTION_RULE_3","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"LICENSE_STATUS":{"type":"TEXT","index":1,"name":"LICENSE_STATUS","comment":null,"display_name":"license_status"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_AMENDMENT_ID":{"type":"TEXT","index":4,"name":"DIM_AMENDMENT_ID","comment":null,"display_name":"dim_amendment_id"},"AMENDMENT_NAME":{"type":"TEXT","index":5,"name":"AMENDMENT_NAME","comment":null,"display_name":"amendment_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":6,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":8,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":9,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"AMENDMENT_TYPE":{"type":"TEXT","index":10,"name":"AMENDMENT_TYPE","comment":null,"display_name":"amendment_type"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":11,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER":{"type":"TEXT","index":12,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER","comment":null,"display_name":"dim_billing_account_id_invoice_owner"},"LAST_SUBSCRIPTION_START_DATE":{"type":"DATE","index":13,"name":"LAST_SUBSCRIPTION_START_DATE","comment":null,"display_name":"last_subscription_start_date"},"LAST_SUBSCRIPTION_END_DATE":{"type":"DATE","index":14,"name":"LAST_SUBSCRIPTION_END_DATE","comment":null,"display_name":"last_subscription_end_date"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":15,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"DOES_SUBSCRIPTION_NAME_CONTAINS_AMENDMENTS_ISSUE_LICENSE":{"type":"BOOLEAN","index":16,"name":"DOES_SUBSCRIPTION_NAME_CONTAINS_AMENDMENTS_ISSUE_LICENSE","comment":null,"display_name":"does_subscription_name_contains_amendments_issue_license"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":17,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DIM_LICENSE_ID":{"type":"NUMBER","index":18,"name":"DIM_LICENSE_ID","comment":null,"display_name":"dim_license_id"},"LICENSE_MD5":{"type":"TEXT","index":19,"name":"license_md5","comment":null,"description":"The md5 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":20,"name":"license_sha256","comment":null,"description":"The SHA-256 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"DIM_ENVIRONMENT_ID":{"type":"NUMBER","index":21,"name":"DIM_ENVIRONMENT_ID","comment":null,"display_name":"dim_environment_id"},"ENVIRONMENT":{"type":"TEXT","index":22,"name":"ENVIRONMENT","comment":null,"display_name":"environment"},"LICENSE_PLAN":{"type":"TEXT","index":23,"name":"LICENSE_PLAN","comment":null,"display_name":"license_plan"},"LICENSE_START_DATE":{"type":"DATE","index":24,"name":"LICENSE_START_DATE","comment":null,"display_name":"license_start_date"},"LICENSE_EXPIRE_DATE":{"type":"DATE","index":25,"name":"LICENSE_EXPIRE_DATE","comment":null,"display_name":"license_expire_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:19UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":3023872,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.product_data_detection_rule_3","raw_sql":"$25","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.mart_arr","model.gitlab_snowflake.mart_arr","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license"]},"config":{"enabled":true,"alias":null,"schema":"data_quality","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"data_quality","fqn":["gitlab_snowflake","data_quality","product_data_detection_rule_3"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"data_quality/product_data_detection_rule_3.sql","original_file_path":"models/data_quality/product_data_detection_rule_3.sql","name":"product_data_detection_rule_3","alias":"product_data_detection_rule_3","checksum":{"name":"sha256","checksum":"6a5d042df1d433e4162b03206bd6979d544a5498708274fa8edbcf9cfe7f03a9"},"tags":["product","mnpi_exception"],"refs":[["dim_amendment"],["dim_amendment"],["fct_mrr"],["fct_mrr"],["dim_product_detail"],["dim_product_detail"],["dim_crm_account"],["dim_crm_account"],["mart_arr"],["mart_arr"],["dim_subscription"],["dim_subscription"],["dim_license"],["dim_license"]],"sources":[],"metrics":[],"description":"This table processes the relationship between a subscription name and the current license ID that subscription is related to. It is used in product_data_detection_run_detail to process data quality errors for missing licenses in subscriptions.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/data_quality/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/data_quality/product_data_detection_rule_3.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"data_quality","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033731.386178,"compiled_sql":"$26","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".data_quality.product_data_detection_rule_3","label":"product_data_detection_rule_3"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_EVENT_VALID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_PK":{"type":"TEXT","index":1,"name":"event_pk","comment":null,"description":"The unique identifier of an event. This is a generated primary key and will not join back to the source models","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"event_pk"},"DIM_EVENT_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_event_date_id","comment":null,"description":"The ID of the event date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_event_date_id"},"DIM_ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"dim_ultimate_parent_namespace_id","comment":null,"description":"The unique identifier of the ultimate parent namespace in which the event was generated, easily joined to `dim_namespace`. The recommended JOIN is `dim_ultimate_parent_namespace_id = dim_namespace.dim_namespace_id`, which will be a one-to-one relationship. JOINing on `dim_ultimate_parent_namespace_id = dim_namespace.ultimate_parent_namespace_id` will return `dim_namespace` records for both the ultimate parent _and_ all sub-groups underneath it. This field will be NULL if the event is not tied to a namespace (ex. users_created)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ultimate_parent_namespace_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":4,"name":"dim_project_id","comment":null,"description":"The unique identifier of the project in which the event was generated, easily joined to `dim_project`. This will be NULL if the event is not tied to a project (ex. epic_creation, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_project_id"},"DIM_USER_SK":{"type":"TEXT","index":5,"name":"DIM_USER_SK","comment":null,"display_name":"dim_user_sk"},"DIM_USER_ID":{"type":"NUMBER","index":6,"name":"dim_user_id","comment":null,"description":"The unique identifier of the user who generated the event, easily joined to `dim_user`. This will be NULL if the event is not tied to a specific user (ex. terraform_reports, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_user_id"},"DIM_LATEST_PRODUCT_TIER_ID":{"type":"TEXT","index":7,"name":"dim_latest_product_tier_id","comment":null,"description":"The unique identifier of the ultimate parent namespace's latest product tier, easily joined to `dim_product_tier`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_latest_product_tier_id"},"DIM_LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":8,"name":"dim_latest_subscription_id","comment":null,"description":"The unique identifier of the ultimate parent namespace's latest subscription, easily joined to `dim_subscription`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_latest_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"dim_crm_account_id","comment":null,"description":"The unique identifier of a crm account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":10,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"ORDER_ID":{"type":"NUMBER","index":11,"name":"ORDER_ID","comment":null,"display_name":"order_id"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"event_created_at","comment":null,"description":"Timestamp of the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_created_at"},"EVENT_DATE":{"type":"DATE","index":13,"name":"event_date","comment":null,"description":"The date of the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_date"},"IS_NULL_USER":{"type":"BOOLEAN","index":14,"name":"IS_NULL_USER","comment":null,"display_name":"is_null_user"},"GROUP_NAME":{"type":"TEXT","index":15,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"group_name"},"SECTION_NAME":{"type":"TEXT","index":16,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"section_name"},"STAGE_NAME":{"type":"TEXT","index":17,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"IS_SMAU":{"type":"BOOLEAN","index":18,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":19,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":20,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_umau"},"PARENT_ID":{"type":"NUMBER","index":21,"name":"parent_id","comment":null,"description":"The unique identifier of the project (dim_project_id) associated with the event. If no project is associated, the ultimate parent namespace associated with the event. This will be NULL if neither a project or namespace is associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"PARENT_TYPE":{"type":"TEXT","index":22,"name":"parent_type","comment":null,"description":"Denotes whether the event was associate with a project or namespace ('project' or 'group'). This will be NULL if neither a project or namespace is associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_type"},"EVENT_NAME":{"type":"TEXT","index":23,"name":"event_name","comment":null,"description":"The name tied to the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"event_name"},"PLAN_ID_AT_EVENT_DATE":{"type":"NUMBER","index":24,"name":"plan_id_at_event_date","comment":null,"description":"The ID of the ultimate parent namespace's plan on the day the event was created (ex. 34, 100, 101, etc). If multiple plans are available on a given day, this reflects the plan on the last event of the day for the namespace. Defaults to '34' (free) if a value is not available","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":25,"name":"plan_name_at_event_date","comment":null,"description":"The name of the ultimate parent namespace's plan type on the day when the event was created (ex. free, premium, ultimate). If multiple plans are available on a given day, this reflects the plan on the last event of the day for the namespace. Defaults to 'free' if a value is not available","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":26,"name":"plan_was_paid_at_event_date","comment":null,"description":"Boolean flag which is set to True if the ultimate parent namespace's plan was paid on the day when the event was created. If multiple plans are available on a given day, this reflects the plan on the last event of the day for the namespace. Defaults to False if a value is not available","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"plan_was_paid_at_event_date"},"DAYS_SINCE_USER_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":27,"name":"days_since_user_creation_at_event_date","comment":null,"description":"The count of days between user creation and the event. This will be NULL if a user is not associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_user_creation_at_event_date"},"DAYS_SINCE_NAMESPACE_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":28,"name":"days_since_namespace_creation_at_event_date","comment":null,"description":"The count of days between ultimate parent namespace creation and the event. This will be NULL if a namespace is not associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_namespace_creation_at_event_date"},"DAYS_SINCE_PROJECT_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":29,"name":"days_since_project_creation_at_event_date","comment":null,"description":"The count of days between project creation and the event. This will be NULL if a project is not associated with the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_project_creation_at_event_date"},"DATA_SOURCE":{"type":"TEXT","index":30,"name":"data_source","comment":null,"description":"The source application where the data was extracted from (ex. GITLAB_DOTCOM, VERSION_DB)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"CREATED_BY":{"type":"TEXT","index":31,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":32,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":33,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":34,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":35,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":523363277312,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_event_valid","raw_sql":"$27","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.fct_event","model.gitlab_snowflake.fct_event","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.dim_user","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.fct_event","model.gitlab_snowflake.fct_event"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["mnpi_exception","product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_event_valid"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_event_valid.sql","original_file_path":"models/common/facts_product_and_engineering/fct_event_valid.sql","name":"fct_event_valid","alias":"fct_event_valid","checksum":{"name":"sha256","checksum":"6de01b97662d5d99aaec69b34816a2f3bb954005847fb3eaab94748dc7a57ad9"},"tags":["mnpi_exception","product"],"refs":[["fct_event"],["fct_event"],["dim_user"],["dim_user"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["bdg_namespace_order_subscription"],["bdg_namespace_order_subscription"],["dim_subscription"],["dim_subscription"],["dim_namespace"],["dim_namespace"],["fct_event"],["fct_event"]],"sources":[],"metrics":[],"description":"$28","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_event_valid.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception","product"]},"created_at":1689033750.9805472,"compiled_sql":"$29","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_event_valid","label":"fct_event_valid"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_SALES","name":"MART_ARR_JIHU","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"arr_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"arr_month"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":3,"name":"FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"fiscal_quarter_name_fy"},"FISCAL_YEAR":{"type":"NUMBER","index":4,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":5,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":6,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":8,"name":"SOLD_TO_COUNTRY","comment":null,"display_name":"sold_to_country"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":9,"name":"billing_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"billing_account_name"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":10,"name":"billing_account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"billing_account_number"},"SSP_CHANNEL":{"type":"TEXT","index":11,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":12,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":14,"name":"crm_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":15,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":16,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":17,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":18,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":19,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":20,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":21,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":22,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND","comment":null,"display_name":"crm_account_employee_count_band"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":23,"name":"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"parent_crm_account_max_family_employee"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":24,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":25,"name":"PARENT_CRM_ACCOUNT_UPA_STATE","comment":null,"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":26,"name":"PARENT_CRM_ACCOUNT_UPA_CITY","comment":null,"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_STREET":{"type":"TEXT","index":27,"name":"PARENT_CRM_ACCOUNT_UPA_STREET","comment":null,"display_name":"parent_crm_account_upa_street"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":28,"name":"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE","comment":null,"display_name":"parent_crm_account_upa_postal_code"},"PARENT_CRM_ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":29,"name":"PARENT_CRM_ACCOUNT_ROLE_TYPE","comment":null,"display_name":"parent_crm_account_role_type"},"PARENT_CRM_ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":30,"name":"PARENT_CRM_ACCOUNT_BUSINESS_UNIT","comment":null,"display_name":"parent_crm_account_business_unit"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":31,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"crm_account_employee_count"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":32,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"HEALTH_NUMBER":{"type":"FLOAT","index":33,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":34,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":35,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":36,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":37,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":38,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_sales_type"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":39,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":40,"name":"subscription_name_slugify","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":41,"name":"oldest_subscription_in_cohort","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":42,"name":"subscription_lineage","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_lineage"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":43,"name":"subscription_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":44,"name":"subscription_cohort_quarter","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_cohort_quarter"},"BILLING_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":45,"name":"billing_account_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_cohort_month"},"BILLING_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":46,"name":"billing_account_cohort_quarter","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_cohort_quarter"},"CRM_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":47,"name":"crm_account_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_cohort_month"},"CRM_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":48,"name":"crm_account_cohort_quarter","comment":null,"description":"The cohort month of the ultimate parent account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_cohort_quarter"},"PARENT_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":49,"name":"PARENT_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"parent_account_cohort_month"},"PARENT_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":50,"name":"parent_account_cohort_quarter","comment":null,"description":"The cohort quarter of the ultimate parent account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_account_cohort_quarter"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":51,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":52,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":53,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":54,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":55,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":56,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":57,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":58,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":59,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":60,"name":"product_tier_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":61,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":62,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"SERVICE_TYPE":{"type":"TEXT","index":63,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":64,"name":"PRODUCT_RATE_PLAN_NAME","comment":null,"display_name":"product_rate_plan_name"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":65,"name":"IS_LICENSED_USER","comment":null,"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":66,"name":"IS_ARPU","comment":null,"display_name":"is_arpu"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":67,"name":"unit_of_measure","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unit_of_measure"},"MRR":{"type":"FLOAT","index":68,"name":"mrr","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mrr"},"ARR":{"type":"FLOAT","index":69,"name":"arr","comment":null,"description":"Calculated as 12 * MRR value","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":70,"name":"quantity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"MONTHS_SINCE_BILLING_ACCOUNT_COHORT_START":{"type":"NUMBER","index":71,"name":"months_since_billing_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_billing_account_cohort_start"},"QUARTERS_SINCE_BILLING_ACCOUNT_COHORT_START":{"type":"NUMBER","index":72,"name":"quarters_since_billing_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_billing_account_cohort_start"},"MONTHS_SINCE_CRM_ACCOUNT_COHORT_START":{"type":"NUMBER","index":73,"name":"months_since_crm_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_crm_account_cohort_start"},"QUARTERS_SINCE_CRM_ACCOUNT_COHORT_START":{"type":"NUMBER","index":74,"name":"quarters_since_crm_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_crm_account_cohort_start"},"MONTHS_SINCE_PARENT_ACCOUNT_COHORT_START":{"type":"NUMBER","index":75,"name":"months_since_parent_account_cohort_start","comment":null,"description":"The number of months between the MRR being reported in that row and the parent account cohort month. Must be a positive number.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_parent_account_cohort_start"},"QUARTERS_SINCE_PARENT_ACCOUNT_COHORT_START":{"type":"NUMBER","index":76,"name":"quarters_since_parent_account_cohort_start","comment":null,"description":"The number of quarters between the MRR being reported in that row and the parent account cohort quarter. Must be a positive number.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_parent_account_cohort_start"},"MONTHS_SINCE_SUBSCRIPTION_COHORT_START":{"type":"NUMBER","index":77,"name":"months_since_subscription_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_subscription_cohort_start"},"QUARTERS_SINCE_SUBSCRIPTION_COHORT_START":{"type":"NUMBER","index":78,"name":"quarters_since_subscription_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_subscription_cohort_start"},"ARR_BAND_CALC":{"type":"TEXT","index":79,"name":"ARR_BAND_CALC","comment":null,"display_name":"arr_band_calc"},"CREATED_BY":{"type":"TEXT","index":80,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":81,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":82,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":83,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":84,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":85,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"is_reseller":{"name":"is_reseller","description":"Identify whether a crm_account is a reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_reseller"},"ultimate_parent_account_id":{"name":"ultimate_parent_account_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_id"},"ultimate_parent_account_name":{"name":"ultimate_parent_account_name","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_name"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":363525120,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_arr_jihu","raw_sql":"$2a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_sales","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"transient":false,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_sales","fqn":["gitlab_snowflake","common_mart_sales","restricted_safe","mart_arr_jihu"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_sales/restricted_safe/mart_arr_jihu.sql","original_file_path":"models/common_mart_sales/restricted_safe/mart_arr_jihu.sql","name":"mart_arr_jihu","alias":"mart_arr_jihu","checksum":{"name":"sha256","checksum":"cef56ca7b6d75ee049e850924cb6ef2a975cfdd6ed3c5f186d44d4eae7ce7cfd"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Data mart to explore ARR which INCLUDES Jihu accounts. This model will satisfy use cases that need to provide a consolidated view of ARR to include Jihu accounts. This model is built using the same logic as the Zuora UI out of the box MRR Trend Report. The report looks at the charges associated with subscriptions, along with their effective dates and subscription statuses, and calculates ARR.\n\nHere is an image documenting the ERD for this table:\n\n<div style=\"width: 640px; height: 480px; margin: 10px; position: relative;\"><iframe allowfullscreen frameborder=\"0\" style=\"width:640px; height:480px\" src=\"https://app.lucidchart.com/documents/embeddedchart/998dbbae-f04e-4310-9d85-0c360a40a018\" id=\"T0XuoGn786sQ\"></iframe></div>","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_sales/restricted_safe/mart_arr_jihu.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"transient":false},"created_at":1689033765.2415743,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_sales.mart_arr_jihu","label":"mart_arr_jihu"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"RPT_ARR_NO_MANUAL_ADJUSTMENT_FOR_SFDC_RECONCILIATION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"Primary key of the model (arr month, subscription name, product detail id),","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"arr_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"arr_month"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":3,"name":"FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"fiscal_quarter_name_fy"},"FISCAL_YEAR":{"type":"NUMBER","index":4,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":5,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":6,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":8,"name":"SOLD_TO_COUNTRY","comment":null,"display_name":"sold_to_country"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":9,"name":"billing_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"billing_account_name"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":10,"name":"billing_account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"billing_account_number"},"SSP_CHANNEL":{"type":"TEXT","index":11,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":12,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":13,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":14,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":15,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":16,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":17,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":18,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":19,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":20,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEES":{"type":"FLOAT","index":21,"name":"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEES","comment":null,"display_name":"parent_crm_account_max_family_employees"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":22,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"HEALTH_NUMBER":{"type":"FLOAT","index":23,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":24,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"PARENT_CRM_ACCOUNT_LAM":{"type":"FLOAT","index":25,"name":"PARENT_CRM_ACCOUNT_LAM","comment":null,"display_name":"parent_crm_account_lam"},"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT":{"type":"FLOAT","index":26,"name":"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT","comment":null,"display_name":"parent_crm_account_lam_dev_count"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":27,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":28,"name":"PARENT_CRM_ACCOUNT_GEO","comment":null,"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":29,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":30,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":31,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":32,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"crm_account_employee_count"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":33,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND","comment":null,"display_name":"crm_account_employee_count_band"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":34,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":35,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":37,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":38,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":39,"name":"subscription_name_slugify","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":40,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":41,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":42,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":43,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"BILLING_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":44,"name":"BILLING_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"billing_account_cohort_month"},"BILLING_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":45,"name":"BILLING_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"billing_account_cohort_quarter"},"CRM_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":46,"name":"CRM_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"crm_account_cohort_month"},"CRM_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":47,"name":"CRM_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"crm_account_cohort_quarter"},"PARENT_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":48,"name":"PARENT_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"parent_account_cohort_month"},"PARENT_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":49,"name":"PARENT_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"parent_account_cohort_quarter"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":50,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":51,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":52,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":53,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":54,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":55,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":56,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":57,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":58,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":59,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":60,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":61,"name":"WAS_PURCHASED_THROUGH_RESELLER","comment":null,"display_name":"was_purchased_through_reseller"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":62,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":63,"name":"product_tier_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":64,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":65,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"SERVICE_TYPE":{"type":"TEXT","index":66,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":67,"name":"PRODUCT_RATE_PLAN_NAME","comment":null,"display_name":"product_rate_plan_name"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":68,"name":"IS_LICENSED_USER","comment":null,"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":69,"name":"IS_ARPU","comment":null,"display_name":"is_arpu"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":70,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"MRR":{"type":"FLOAT","index":71,"name":"mrr","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mrr"},"ARR":{"type":"FLOAT","index":72,"name":"ARR","comment":null,"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":73,"name":"QUANTITY","comment":null,"display_name":"quantity"},"MONTHS_SINCE_BILLING_ACCOUNT_COHORT_START":{"type":"NUMBER","index":74,"name":"MONTHS_SINCE_BILLING_ACCOUNT_COHORT_START","comment":null,"display_name":"months_since_billing_account_cohort_start"},"QUARTERS_SINCE_BILLING_ACCOUNT_COHORT_START":{"type":"NUMBER","index":75,"name":"QUARTERS_SINCE_BILLING_ACCOUNT_COHORT_START","comment":null,"display_name":"quarters_since_billing_account_cohort_start"},"MONTHS_SINCE_CRM_ACCOUNT_COHORT_START":{"type":"NUMBER","index":76,"name":"MONTHS_SINCE_CRM_ACCOUNT_COHORT_START","comment":null,"display_name":"months_since_crm_account_cohort_start"},"QUARTERS_SINCE_CRM_ACCOUNT_COHORT_START":{"type":"NUMBER","index":77,"name":"QUARTERS_SINCE_CRM_ACCOUNT_COHORT_START","comment":null,"display_name":"quarters_since_crm_account_cohort_start"},"MONTHS_SINCE_PARENT_ACCOUNT_COHORT_START":{"type":"NUMBER","index":78,"name":"MONTHS_SINCE_PARENT_ACCOUNT_COHORT_START","comment":null,"display_name":"months_since_parent_account_cohort_start"},"QUARTERS_SINCE_PARENT_ACCOUNT_COHORT_START":{"type":"NUMBER","index":79,"name":"QUARTERS_SINCE_PARENT_ACCOUNT_COHORT_START","comment":null,"display_name":"quarters_since_parent_account_cohort_start"},"MONTHS_SINCE_SUBSCRIPTION_COHORT_START":{"type":"NUMBER","index":80,"name":"MONTHS_SINCE_SUBSCRIPTION_COHORT_START","comment":null,"display_name":"months_since_subscription_cohort_start"},"QUARTERS_SINCE_SUBSCRIPTION_COHORT_START":{"type":"NUMBER","index":81,"name":"QUARTERS_SINCE_SUBSCRIPTION_COHORT_START","comment":null,"display_name":"quarters_since_subscription_cohort_start"},"ARR_BAND_CALC":{"type":"TEXT","index":82,"name":"ARR_BAND_CALC","comment":null,"display_name":"arr_band_calc"},"CREATED_BY":{"type":"TEXT","index":83,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":84,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":85,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":86,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":87,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":88,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_arr_no_manual_adjustment_for_sfdc_reconciliation","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.prep_charge","model.gitlab_snowflake.prep_charge"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","rpt_arr_no_manual_adjustment_for_sfdc_reconciliation"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/rpt_arr_no_manual_adjustment_for_sfdc_reconciliation.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/rpt_arr_no_manual_adjustment_for_sfdc_reconciliation.sql","name":"rpt_arr_no_manual_adjustment_for_sfdc_reconciliation","alias":"rpt_arr_no_manual_adjustment_for_sfdc_reconciliation","checksum":{"name":"sha256","checksum":"4835459d054192fa0151f5e907bea9bc33cf173b72dc3474088a8698b410bba7"},"tags":["workspace","safe"],"refs":[["dim_subscription"],["dim_subscription"],["dim_product_detail"],["dim_product_detail"],["dim_billing_account"],["dim_billing_account"],["dim_date"],["dim_date"],["dim_crm_account"],["dim_crm_account"],["prep_charge"],["prep_charge"]],"sources":[],"metrics":[],"description":"Report view of [mart_arr](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.mart_arr) without the manual true up adjustments added from Zuora Revenue. This report is used exclusively for the montly Salesforce reconciliation process and is not to be used for financial reporting since it does not include the manually adjusted true up charges.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/rpt_arr_no_manual_adjustment_for_sfdc_reconciliation.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["safe"],"secure":true},"created_at":1689033734.2886949,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.rpt_arr_no_manual_adjustment_for_sfdc_reconciliation","label":"rpt_arr_no_manual_adjustment_for_sfdc_reconciliation"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_PRODUCT","name":"MART_USER_REQUEST","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"Primary key of mart_user_request. It is at the grain of the user request (combination of the issue_id or epic_id depending on where the request was done) and the links in those requests (combination of opp_id, account_id and zendesk ticket_id)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"DIM_ISSUE_ID":{"type":"NUMBER","index":2,"name":"DIM_ISSUE_ID","comment":null,"display_name":"dim_issue_id"},"DIM_EPIC_ID":{"type":"NUMBER","index":3,"name":"DIM_EPIC_ID","comment":null,"display_name":"dim_epic_id"},"USER_REQUEST_IN":{"type":"TEXT","index":4,"name":"USER_REQUEST_IN","comment":null,"display_name":"user_request_in"},"LINK_TYPE":{"type":"TEXT","index":5,"name":"LINK_TYPE","comment":null,"display_name":"link_type"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_TICKET_ID":{"type":"NUMBER","index":8,"name":"DIM_TICKET_ID","comment":null,"display_name":"dim_ticket_id"},"REQUEST_PRIORITY":{"type":"NUMBER","index":9,"name":"REQUEST_PRIORITY","comment":null,"display_name":"request_priority"},"IS_REQUEST_PRIORITY_EMPTY":{"type":"BOOLEAN","index":10,"name":"IS_REQUEST_PRIORITY_EMPTY","comment":null,"display_name":"is_request_priority_empty"},"IS_USER_REQUEST_ONLY_IN_COLLABORATION_PROJECT":{"type":"BOOLEAN","index":11,"name":"is_user_request_only_in_collaboration_project","comment":null,"description":"If TRUE means that the issue / epic user request is ONLY found in the customer collaboration project, which means the priority request_prioty will always be one, and not in an issue / epic comment or description in `gitlab-org`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_user_request_only_in_collaboration_project"},"LINK_LAST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"link_last_updated_at","comment":null,"description":"Timestamp for the last updated time of the comment / description where the SFDC / Zendesk link was found in the issue / epic user request. In case the user request was only found in the customer collaboration project, it refers to the last time that the issue / epic request was found in the customer collaboration project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"link_last_updated_at"},"LINK_LAST_UPDATED_DATE":{"type":"DATE","index":13,"name":"LINK_LAST_UPDATED_DATE","comment":null,"display_name":"link_last_updated_date"},"LINK_LAST_UPDATED_MONTH":{"type":"DATE","index":14,"name":"LINK_LAST_UPDATED_MONTH","comment":null,"display_name":"link_last_updated_month"},"CRM_OPPORTUNITY_LINK":{"type":"TEXT","index":15,"name":"CRM_OPPORTUNITY_LINK","comment":null,"display_name":"crm_opportunity_link"},"CRM_ACCOUNT_LINK":{"type":"TEXT","index":16,"name":"CRM_ACCOUNT_LINK","comment":null,"display_name":"crm_account_link"},"TICKET_LINK":{"type":"TEXT","index":17,"name":"TICKET_LINK","comment":null,"display_name":"ticket_link"},"ISSUE_EPIC_TITLE":{"type":"TEXT","index":18,"name":"ISSUE_EPIC_TITLE","comment":null,"display_name":"issue_epic_title"},"ISSUE_EPIC_URL":{"type":"TEXT","index":19,"name":"ISSUE_EPIC_URL","comment":null,"display_name":"issue_epic_url"},"ISSUE_EPIC_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ISSUE_EPIC_CREATED_AT","comment":null,"display_name":"issue_epic_created_at"},"ISSUE_EPIC_CREATED_DATE":{"type":"DATE","index":21,"name":"ISSUE_EPIC_CREATED_DATE","comment":null,"display_name":"issue_epic_created_date"},"ISSUE_EPIC_CREATED_MONTH":{"type":"DATE","index":22,"name":"ISSUE_EPIC_CREATED_MONTH","comment":null,"display_name":"issue_epic_created_month"},"ISSUE_EPIC_STATE_NAME":{"type":"TEXT","index":23,"name":"ISSUE_EPIC_STATE_NAME","comment":null,"display_name":"issue_epic_state_name"},"ISSUE_EPIC_CLOSED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ISSUE_EPIC_CLOSED_AT","comment":null,"display_name":"issue_epic_closed_at"},"ISSUE_EPIC_CLOSED_DATE":{"type":"DATE","index":25,"name":"ISSUE_EPIC_CLOSED_DATE","comment":null,"display_name":"issue_epic_closed_date"},"ISSUE_EPIC_CLOSED_MONTH":{"type":"DATE","index":26,"name":"ISSUE_EPIC_CLOSED_MONTH","comment":null,"display_name":"issue_epic_closed_month"},"MILESTONE_TITLE":{"type":"TEXT","index":27,"name":"MILESTONE_TITLE","comment":null,"display_name":"milestone_title"},"MILESTONE_DUE_DATE":{"type":"DATE","index":28,"name":"MILESTONE_DUE_DATE","comment":null,"display_name":"milestone_due_date"},"ISSUE_EPIC_LABELS":{"type":"ARRAY","index":29,"name":"ISSUE_EPIC_LABELS","comment":null,"display_name":"issue_epic_labels"},"DELIVERABLE":{"type":"TEXT","index":30,"name":"DELIVERABLE","comment":null,"display_name":"deliverable"},"PRODUCT_GROUP_EXTENDED":{"type":"TEXT","index":31,"name":"PRODUCT_GROUP_EXTENDED","comment":null,"display_name":"product_group_extended"},"PRODUCT_GROUP":{"type":"TEXT","index":32,"name":"PRODUCT_GROUP","comment":null,"display_name":"product_group"},"PRODUCT_CATEGORY":{"type":"TEXT","index":33,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"PRODUCT_STAGE":{"type":"TEXT","index":34,"name":"PRODUCT_STAGE","comment":null,"display_name":"product_stage"},"ISSUE_EPIC_TYPE":{"type":"TEXT","index":35,"name":"ISSUE_EPIC_TYPE","comment":null,"display_name":"issue_epic_type"},"ISSUE_STATUS":{"type":"TEXT","index":36,"name":"ISSUE_STATUS","comment":null,"display_name":"issue_status"},"THEME_LABELS":{"type":"ARRAY","index":37,"name":"theme_labels","comment":null,"description":"Non-scoped theme:* labels in the issue or epic user request. Since there can be multiple for a single issue/epic, this field is an array.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"theme_labels"},"EPIC_STATUS":{"type":"NUMBER","index":38,"name":"EPIC_STATUS","comment":null,"display_name":"epic_status"},"PARENT_EPIC_PATH":{"type":"TEXT","index":39,"name":"PARENT_EPIC_PATH","comment":null,"display_name":"parent_epic_path"},"PARENT_EPIC_TITLE":{"type":"TEXT","index":40,"name":"PARENT_EPIC_TITLE","comment":null,"display_name":"parent_epic_title"},"UPVOTE_COUNT":{"type":"NUMBER","index":41,"name":"UPVOTE_COUNT","comment":null,"display_name":"upvote_count"},"ISSUE_EPIC_WEIGHT":{"type":"NUMBER","index":42,"name":"ISSUE_EPIC_WEIGHT","comment":null,"display_name":"issue_epic_weight"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":43,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"CRM_ACCOUNT_NEXT_RENEWAL_MONTH":{"type":"DATE","index":44,"name":"crm_account_next_renewal_month","comment":null,"description":"CRM Account next renewal month based on Zuora subscription and charge information. If NULL it means that either the renewal month has passed or the account didn't have one.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_next_renewal_month"},"CRM_ACCOUNT_HEALTH_SCORE_COLOR":{"type":"TEXT","index":45,"name":"CRM_ACCOUNT_HEALTH_SCORE_COLOR","comment":null,"display_name":"crm_account_health_score_color"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":46,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":47,"name":"TECHNICAL_ACCOUNT_MANAGER","comment":null,"display_name":"technical_account_manager"},"STRATEGIC_ACCOUNT_LEADER":{"type":"TEXT","index":48,"name":"STRATEGIC_ACCOUNT_LEADER","comment":null,"display_name":"strategic_account_leader"},"CUSTOMER_REACH":{"type":"FLOAT","index":49,"name":"customer_reach","comment":null,"description":"CRM Account amount of seats in the current month based on Zuora subscription and charge information.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_reach"},"CRM_ACCOUNT_ARR":{"type":"FLOAT","index":50,"name":"CRM_ACCOUNT_ARR","comment":null,"display_name":"crm_account_arr"},"CRM_ACCOUNT_OPEN_OPP_NET_ARR":{"type":"FLOAT","index":51,"name":"crm_account_open_opp_net_arr","comment":null,"description":"Sum of Net ARR for all currently open SFDC opportunities for the CRM Account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_open_opp_net_arr"},"CRM_ACCOUNT_OPEN_OPP_NET_ARR_FO":{"type":"FLOAT","index":52,"name":"crm_account_open_opp_net_arr_fo","comment":null,"description":"Sum of Net ARR for all currently open SFDC opportunities for the CRM Account with order type New First Order.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_open_opp_net_arr_fo"},"CRM_ACCOUNT_OPEN_OPP_NET_ARR_GROWTH":{"type":"FLOAT","index":53,"name":"crm_account_open_opp_net_arr_growth","comment":null,"description":"Sum of Net ARR for all currently open SFDC opportunities for the CRM Account with order type New Connected and Growth.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_open_opp_net_arr_growth"},"OPPORTUNITY_REACH":{"type":"FLOAT","index":54,"name":"opportunity_reach","comment":null,"description":"Count of aggregate prospect licenses from open SFDC opportunities, where prospect means New First Order opportunities. The amount of seats in the opportunity are fetched from the primary quote linked to the opportunity.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"opportunity_reach"},"CRM_ACCOUNT_LOST_OPP_NET_ARR":{"type":"FLOAT","index":55,"name":"crm_account_lost_opp_net_arr","comment":null,"description":"For the CRM Account, sum of all Net ARR where the prospect was lost. Where prospect means New First Order opportunities.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_lost_opp_net_arr"},"CRM_ACCOUNT_LOST_CUSTOMER_ARR":{"type":"FLOAT","index":56,"name":"crm_account_lost_customer_arr","comment":null,"description":"For the CRM Account, sum of all ARR lost when the customer left GitLab.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_lost_customer_arr"},"LOST_ARR":{"type":"FLOAT","index":57,"name":"lost_arr","comment":null,"description":"Sum of crm_account_lost_opp_arr and crm_account_lost_customer_arr","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lost_arr"},"CRM_OPP_STAGE_NAME":{"type":"TEXT","index":58,"name":"CRM_OPP_STAGE_NAME","comment":null,"display_name":"crm_opp_stage_name"},"CRM_OPP_IS_CLOSED":{"type":"BOOLEAN","index":59,"name":"CRM_OPP_IS_CLOSED","comment":null,"display_name":"crm_opp_is_closed"},"CRM_OPP_CLOSE_DATE":{"type":"DATE","index":60,"name":"CRM_OPP_CLOSE_DATE","comment":null,"display_name":"crm_opp_close_date"},"CRM_OPP_ORDER_TYPE":{"type":"TEXT","index":61,"name":"CRM_OPP_ORDER_TYPE","comment":null,"display_name":"crm_opp_order_type"},"CRM_OPP_ORDER_TYPE_GROUPED":{"type":"TEXT","index":62,"name":"CRM_OPP_ORDER_TYPE_GROUPED","comment":null,"display_name":"crm_opp_order_type_grouped"},"PRIMARY_SOLUTION_ARCHITECT_ID":{"type":"TEXT","index":63,"name":"primary_solution_architect_id","comment":null,"description":"The primary solution architecht user id associated with the SFDC opportunity, whenever there is an opportunity linked to the user request.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"primary_solution_architect_id"},"PRIMARY_SOLUTION_ARCHITECT_USER_NAME":{"type":"TEXT","index":64,"name":"primary_solution_architect_user_name","comment":null,"description":"The primary solution architecht user name associated with the SFDC opportunity, whenever there is an opportunity linked to the user request.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"primary_solution_architect_user_name"},"CRM_OPP_NEXT_RENEWAL_MONTH":{"type":"DATE","index":65,"name":"CRM_OPP_NEXT_RENEWAL_MONTH","comment":null,"display_name":"crm_opp_next_renewal_month"},"CRM_OPP_NET_ARR":{"type":"FLOAT","index":66,"name":"CRM_OPP_NET_ARR","comment":null,"display_name":"crm_opp_net_arr"},"CRM_OPP_ARR_BASIS":{"type":"FLOAT","index":67,"name":"CRM_OPP_ARR_BASIS","comment":null,"display_name":"crm_opp_arr_basis"},"CRM_OPP_SEATS":{"type":"FLOAT","index":68,"name":"CRM_OPP_SEATS","comment":null,"display_name":"crm_opp_seats"},"CRM_OPP_PROBABILITY":{"type":"FLOAT","index":69,"name":"CRM_OPP_PROBABILITY","comment":null,"display_name":"crm_opp_probability"},"PRIORITY_INPUT_URL":{"type":"TEXT","index":70,"name":"PRIORITY_INPUT_URL","comment":null,"display_name":"priority_input_url"},"USER_REQUEST_LINK":{"type":"TEXT","index":71,"name":"USER_REQUEST_LINK","comment":null,"display_name":"user_request_link"},"LINK_RETENTION_PERCENTAGE":{"type":"FLOAT","index":72,"name":"LINK_RETENTION_PERCENTAGE","comment":null,"display_name":"link_retention_percentage"},"LINK_GROWTH_PERCENTAGE":{"type":"FLOAT","index":73,"name":"LINK_GROWTH_PERCENTAGE","comment":null,"display_name":"link_growth_percentage"},"LINK_RETENTION_PRIORITY":{"type":"FLOAT","index":74,"name":"LINK_RETENTION_PRIORITY","comment":null,"display_name":"link_retention_priority"},"LINK_GROWTH_PRIORITY":{"type":"FLOAT","index":75,"name":"LINK_GROWTH_PRIORITY","comment":null,"display_name":"link_growth_priority"},"LINK_RETENTION_PRIORITY_WEIGHTING":{"type":"FLOAT","index":76,"name":"LINK_RETENTION_PRIORITY_WEIGHTING","comment":null,"display_name":"link_retention_priority_weighting"},"LINK_GROWTH_PRIORITY_WEIGHTING":{"type":"FLOAT","index":77,"name":"LINK_GROWTH_PRIORITY_WEIGHTING","comment":null,"display_name":"link_growth_priority_weighting"},"LINK_RETENTION_SCORE":{"type":"FLOAT","index":78,"name":"LINK_RETENTION_SCORE","comment":null,"display_name":"link_retention_score"},"LINK_GROWTH_SCORE":{"type":"FLOAT","index":79,"name":"LINK_GROWTH_SCORE","comment":null,"display_name":"link_growth_score"},"LINK_COMBINED_SCORE":{"type":"FLOAT","index":80,"name":"LINK_COMBINED_SCORE","comment":null,"display_name":"link_combined_score"},"LINK_PRIORITY_SCORE":{"type":"FLOAT","index":81,"name":"LINK_PRIORITY_SCORE","comment":null,"display_name":"link_priority_score"},"LINK_WEIGHTED_PRIORITY_SCORE":{"type":"FLOAT","index":82,"name":"LINK_WEIGHTED_PRIORITY_SCORE","comment":null,"display_name":"link_weighted_priority_score"},"LINK_WEIGHTED_PRIORITY_SCORE_INPUT":{"type":"TEXT","index":83,"name":"LINK_WEIGHTED_PRIORITY_SCORE_INPUT","comment":null,"display_name":"link_weighted_priority_score_input"},"CREATED_BY":{"type":"TEXT","index":84,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":85,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":86,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":87,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":88,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":89,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":21994496,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_user_request","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_label_links","model.gitlab_snowflake.prep_label_links","model.gitlab_snowflake.prep_labels","model.gitlab_snowflake.prep_labels","model.gitlab_snowflake.bdg_epic_user_request","model.gitlab_snowflake.bdg_epic_user_request","model.gitlab_snowflake.bdg_issue_user_request","model.gitlab_snowflake.bdg_issue_user_request","model.gitlab_snowflake.dim_epic","model.gitlab_snowflake.dim_epic","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.dim_issue","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.fct_quote_item","model.gitlab_snowflake.fct_quote_item","model.gitlab_snowflake.dim_quote","model.gitlab_snowflake.dim_quote","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.dim_order_type","model.gitlab_snowflake.dim_order_type","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_crm_user"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_product","database":"PROD","tags":["product","safe","product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_product","fqn":["gitlab_snowflake","common_mart_product","restricted_safe","mart_user_request"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/restricted_safe/mart_user_request.sql","original_file_path":"models/common_mart_product/restricted_safe/mart_user_request.sql","name":"mart_user_request","alias":"mart_user_request","checksum":{"name":"sha256","checksum":"9e3e0baea55f0f1a5f06847c3b0a0f9f14e3c366e0336e0eda36d13118997946"},"tags":["product","safe"],"refs":[["prep_label_links"],["prep_label_links"],["prep_labels"],["prep_labels"],["bdg_epic_user_request"],["bdg_epic_user_request"],["bdg_issue_user_request"],["bdg_issue_user_request"],["dim_epic"],["dim_epic"],["dim_issue"],["dim_issue"],["fct_mrr"],["fct_mrr"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_crm_account"],["dim_crm_account"],["dim_subscription"],["dim_subscription"],["fct_crm_opportunity"],["fct_crm_opportunity"],["dim_crm_user"],["dim_crm_user"],["fct_quote_item"],["fct_quote_item"],["dim_quote"],["dim_quote"],["dim_crm_opportunity"],["dim_crm_opportunity"],["dim_order_type"],["dim_order_type"],["dim_crm_user"],["dim_crm_user"]],"sources":[],"metrics":[],"description":"Mart table that contains all user requests to the Gitlab product by the customers.\n\nIt unions `bdg_issue_user_request` and `bdg_epic_user_request` to have the product request that are contained both in the epics and issues in the `gitlab-org` group.\nAfter that, it adds useful data around these issues and epics as well the crm_account and crm_opportunity links that are useful to prioritize those user requests.\n\nMore documentation around the use cases this model solves for can be found in the [Customer Issue Prioritization Framework Handbook Page](https://about.gitlab.com/handbook/product/product-processes/customer-issues-prioritization-framework/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/restricted_safe/mart_user_request.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe","product"],"secure":true},"created_at":1689033737.3128543,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_product.mart_user_request","label":"mart_user_request"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"MART_DISCOUNT_ARR","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"Unique identifier of a product charge on the invoice amortized by month.","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"DIM_CHARGE_ID":{"type":"TEXT","index":2,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":3,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":4,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":5,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":6,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":7,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"OPPORTUNITY_NAME":{"type":"TEXT","index":8,"name":"OPPORTUNITY_NAME","comment":null,"display_name":"opportunity_name"},"DIM_PARENT_CRM_ACCOUNT_ID_INVOICE":{"type":"TEXT","index":9,"name":"DIM_PARENT_CRM_ACCOUNT_ID_INVOICE","comment":null,"display_name":"dim_parent_crm_account_id_invoice"},"PARENT_CRM_ACCOUNT_NAME_INVOICE":{"type":"TEXT","index":10,"name":"PARENT_CRM_ACCOUNT_NAME_INVOICE","comment":null,"display_name":"parent_crm_account_name_invoice"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY_INVOICE":{"type":"TEXT","index":11,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY_INVOICE","comment":null,"display_name":"parent_crm_account_upa_country_invoice"},"DIM_CRM_ACCOUNT_ID_INVOICE":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID_INVOICE","comment":null,"display_name":"dim_crm_account_id_invoice"},"CRM_ACCOUNT_NAME_INVOICE":{"type":"TEXT","index":13,"name":"CRM_ACCOUNT_NAME_INVOICE","comment":null,"display_name":"crm_account_name_invoice"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT_INVOICE":{"type":"TEXT","index":14,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT_INVOICE","comment":null,"display_name":"parent_crm_account_sales_segment_invoice"},"DIM_PARENT_CRM_ACCOUNT_ID_SUBSCRIPTION":{"type":"TEXT","index":15,"name":"DIM_PARENT_CRM_ACCOUNT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_parent_crm_account_id_subscription"},"PARENT_CRM_ACCOUNT_NAME_SUBSCRIPTION":{"type":"TEXT","index":16,"name":"PARENT_CRM_ACCOUNT_NAME_SUBSCRIPTION","comment":null,"display_name":"parent_crm_account_name_subscription"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY_SUBSCRIPTION":{"type":"TEXT","index":17,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY_SUBSCRIPTION","comment":null,"display_name":"parent_crm_account_upa_country_subscription"},"DIM_CRM_ACCOUNT_ID_SUBSCRIPTION":{"type":"TEXT","index":18,"name":"DIM_CRM_ACCOUNT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_crm_account_id_subscription"},"CRM_ACCOUNT_NAME_SUBSCRIPTION":{"type":"TEXT","index":19,"name":"CRM_ACCOUNT_NAME_SUBSCRIPTION","comment":null,"display_name":"crm_account_name_subscription"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT_SUBSCRIPTION":{"type":"TEXT","index":20,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT_SUBSCRIPTION","comment":null,"display_name":"parent_crm_account_sales_segment_subscription"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"IS_MYB":{"type":"BOOLEAN","index":22,"name":"is_myb","comment":null,"description":"Identifies if a subscription charge is for a multiple year term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":23,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"CURRENT_TERM_MONTHS":{"type":"NUMBER","index":24,"name":"current_term_months","comment":null,"description":"Term of the subscription in months.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_term_months"},"CURRENT_TERM_YEARS":{"type":"NUMBER","index":25,"name":"current_term_years","comment":null,"description":"Term of the subscription in years. Rounds to the one decimal point. For examples, an 18 month term subscription will be a 1.5 year term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_term_years"},"IS_RESELLER":{"type":"BOOLEAN","index":26,"name":"IS_RESELLER","comment":null,"display_name":"is_reseller"},"PRODUCT_RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":27,"name":"PRODUCT_RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"product_rate_plan_charge_name"},"PRODUCT_CATEGORY":{"type":"TEXT","index":28,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"PRODUCT_RANKING":{"type":"NUMBER","index":29,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"DELIVERY":{"type":"TEXT","index":30,"name":"DELIVERY","comment":null,"display_name":"delivery"},"SERVICE_TYPE":{"type":"TEXT","index":31,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":32,"name":"IS_LICENSED_USER","comment":null,"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":33,"name":"IS_ARPU","comment":null,"display_name":"is_arpu"},"IS_EXCLUDED_FROM_DISC_ANALYSIS":{"type":"BOOLEAN","index":34,"name":"IS_EXCLUDED_FROM_DISC_ANALYSIS","comment":null,"display_name":"is_excluded_from_disc_analysis"},"ANNUAL_BILLING_LIST_PRICE":{"type":"FLOAT","index":35,"name":"ANNUAL_BILLING_LIST_PRICE","comment":null,"display_name":"annual_billing_list_price"},"OPPORTUNITY_OWNER_USER_SEGMENT":{"type":"TEXT","index":36,"name":"OPPORTUNITY_OWNER_USER_SEGMENT","comment":null,"display_name":"opportunity_owner_user_segment"},"OPPORTUNITY_OWNER_USER_GEO":{"type":"TEXT","index":37,"name":"OPPORTUNITY_OWNER_USER_GEO","comment":null,"display_name":"opportunity_owner_user_geo"},"OPPORTUNITY_OWNER_USER_REGION":{"type":"TEXT","index":38,"name":"OPPORTUNITY_OWNER_USER_REGION","comment":null,"display_name":"opportunity_owner_user_region"},"OPPORTUNITY_OWNER_USER_AREA":{"type":"TEXT","index":39,"name":"OPPORTUNITY_OWNER_USER_AREA","comment":null,"display_name":"opportunity_owner_user_area"},"ORDER_TYPE":{"type":"TEXT","index":40,"name":"ORDER_TYPE","comment":null,"display_name":"order_type"},"SUBSCRIPTION_SALES_TYPE":{"type":"ARRAY","index":41,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":42,"name":"INVOICE_ITEM_CHARGE_AMOUNT","comment":null,"display_name":"invoice_item_charge_amount"},"ARPU":{"type":"FLOAT","index":43,"name":"ARPU","comment":null,"display_name":"arpu"},"ARR":{"type":"FLOAT","index":44,"name":"ARR","comment":null,"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":45,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PCT_PAID_OF_TOTAL_REVENUE":{"type":"FLOAT","index":46,"name":"PCT_PAID_OF_TOTAL_REVENUE","comment":null,"display_name":"pct_paid_of_total_revenue"},"ARR_BUCKETS":{"type":"TEXT","index":47,"name":"ARR_BUCKETS","comment":null,"display_name":"arr_buckets"},"NUMBER_OF_SEATS_BUCKETS":{"type":"TEXT","index":48,"name":"NUMBER_OF_SEATS_BUCKETS","comment":null,"display_name":"number_of_seats_buckets"},"CREATED_BY":{"type":"TEXT","index":49,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":50,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":51,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":52,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":53,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":54,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":26636288,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_discount_arr","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.arr_buckets","macro.gitlab_snowflake.number_of_seats_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_invoice_item","model.gitlab_snowflake.fct_invoice_item","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.dim_crm_opportunity"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","marts","arr","mart_discount_arr"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/arr/mart_discount_arr.sql","original_file_path":"models/marts/arr/mart_discount_arr.sql","name":"mart_discount_arr","alias":"mart_discount_arr","checksum":{"name":"sha256","checksum":"ff17d1470ba07a5c298c3e15fc88e8e6454b24119920adce415f3c2d2f9e08cf"},"tags":["safe"],"refs":[["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["fct_invoice_item"],["fct_invoice_item"],["dim_subscription"],["dim_subscription"],["dim_charge"],["dim_charge"],["dim_crm_opportunity"],["dim_crm_opportunity"]],"sources":[],"metrics":[],"description":"Model with Invoiced ARR used to calculate discounts across various dimensions.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/arr/mart_discount_arr.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.317435,"compiled_sql":"$31","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.mart_discount_arr","label":"mart_discount_arr"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_WEEKLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"NUMBER","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":6,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":8,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":9,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":13,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":14,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":15,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":16,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":17,"name":"PING_DEPLOYMENT_TYPE","comment":null,"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":18,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":21,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":22,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":23,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":24,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":26,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":28,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":29,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":30,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":31,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":32,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":33,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":34,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":35,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":36,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":37,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":38,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":39,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":40,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":41,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":42,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":45,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":47,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":48,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":50,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":52,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":53,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":54,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":55,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":56,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"CREATED_BY":{"type":"TEXT","index":57,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:03UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":242513092096,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_weekly","raw_sql":"{{ config(\n    tags=[\"product\", \"mnpi_exception\"]\n) }}\n\n{{ macro_mart_ping_instance_metric('fct_ping_instance_metric_weekly') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.macro_mart_ping_instance_metric","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_weekly","model.gitlab_snowflake.fct_ping_instance_metric_weekly","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_weekly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_weekly.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_weekly.sql","name":"mart_ping_instance_metric_weekly","alias":"mart_ping_instance_metric_weekly","checksum":{"name":"sha256","checksum":"41b490aa080ebb1307c78a35a54f9d7275fc34f3d840056841b259000344b50e"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_weekly"],["fct_ping_instance_metric_weekly"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$32","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_weekly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.6314888,"compiled_sql":"$33","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_weekly","label":"mart_ping_instance_metric_weekly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MAPPING","name":"MAP_LATEST_SUBSCRIPTION_NAMESPACE_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_MONTH":{"type":"DATE","index":1,"name":"DATE_MONTH","comment":null,"display_name":"date_month"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":3,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"DIM_NAMESPACE_ID":{"type":"TEXT","index":4,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":5,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"PRODUCT_RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":6,"name":"PRODUCT_RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"product_rate_plan_charge_name"},"CHARGE_TYPE":{"type":"TEXT","index":7,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":24425984,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_latest_subscription_namespace_monthly","raw_sql":"$34","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.date_spine","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_latest_subscription_namespace_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_latest_subscription_namespace_monthly.sql","original_file_path":"models/common_mapping/map_latest_subscription_namespace_monthly.sql","name":"map_latest_subscription_namespace_monthly","alias":"map_latest_subscription_namespace_monthly","checksum":{"name":"sha256","checksum":"6ad8e69d6efb27ca585dbd0b21416fe794f9975f3cb137e3002a8524359c85d9"},"tags":["mnpi_exception"],"refs":[["dim_subscription"],["dim_subscription"],["dim_product_detail"],["dim_product_detail"],["fct_charge"],["fct_charge"]],"sources":[],"metrics":[],"description":"This table contains the most recent subscription version associated with each namespace in each month, and represents the most complete namespace <> subscription mapping we have. It prefers the Zuora namespace <> subscription mappings, then fills in any nulls with bridge logic. The end objective is to backfill Zuora with all mappings so that `dim_subscription` can be the SSOT for namespace <> subscription relationships.\n\nAlthough in the prep data, namespaces can be associated with multiple `dim_subscription_id`s and/or multiple `dim_subscription_id_original`s in a single month, we use a `QUALIFY` statement in this table to limit down to **one** subscription per namespace per month (the most recently created subscription).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_latest_subscription_namespace_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033765.670977,"compiled_sql":"$35","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_latest_subscription_namespace_monthly","label":"map_latest_subscription_namespace_monthly"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_SALES","name":"MART_RETENTION_CRM_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"FCT_RETENTION_ID":{"type":"TEXT","index":1,"name":"fct_retention_id","comment":null,"description":"A unique identifier of the retention record.","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr","retention"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"fct_retention_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"RETENTION_MONTH":{"type":"DATE","index":4,"name":"RETENTION_MONTH","comment":null,"display_name":"retention_month"},"RETENTION_FISCAL_QUARTER":{"type":"TEXT","index":5,"name":"RETENTION_FISCAL_QUARTER","comment":null,"display_name":"retention_fiscal_quarter"},"RETENTION_FISCAL_YEAR":{"type":"NUMBER","index":6,"name":"RETENTION_FISCAL_YEAR","comment":null,"display_name":"retention_fiscal_year"},"LAST_RENEWAL_MONTH":{"type":"DATE","index":7,"name":"LAST_RENEWAL_MONTH","comment":null,"display_name":"last_renewal_month"},"NEXT_RENEWAL_MONTH":{"type":"DATE","index":8,"name":"NEXT_RENEWAL_MONTH","comment":null,"display_name":"next_renewal_month"},"PRIOR_YEAR_MRR":{"type":"FLOAT","index":9,"name":"PRIOR_YEAR_MRR","comment":null,"display_name":"prior_year_mrr"},"NET_RETENTION_MRR":{"type":"FLOAT","index":10,"name":"NET_RETENTION_MRR","comment":null,"display_name":"net_retention_mrr"},"GROSS_RETENTION_MRR":{"type":"FLOAT","index":11,"name":"GROSS_RETENTION_MRR","comment":null,"display_name":"gross_retention_mrr"},"PRIOR_YEAR_ARR":{"type":"FLOAT","index":12,"name":"PRIOR_YEAR_ARR","comment":null,"display_name":"prior_year_arr"},"NET_RETENTION_ARR":{"type":"FLOAT","index":13,"name":"NET_RETENTION_ARR","comment":null,"display_name":"net_retention_arr"},"GROSS_RETENTION_ARR":{"type":"FLOAT","index":14,"name":"GROSS_RETENTION_ARR","comment":null,"display_name":"gross_retention_arr"},"PRIOR_YEAR_QUANTITY":{"type":"FLOAT","index":15,"name":"PRIOR_YEAR_QUANTITY","comment":null,"display_name":"prior_year_quantity"},"NET_RETENTION_QUANTITY":{"type":"FLOAT","index":16,"name":"NET_RETENTION_QUANTITY","comment":null,"display_name":"net_retention_quantity"},"PRIOR_YEAR_CRM_CUSTOMER_COUNT":{"type":"NUMBER","index":17,"name":"PRIOR_YEAR_CRM_CUSTOMER_COUNT","comment":null,"display_name":"prior_year_crm_customer_count"},"NET_RETENTION_CRM_CUSTOMER_COUNT":{"type":"NUMBER","index":18,"name":"NET_RETENTION_CRM_CUSTOMER_COUNT","comment":null,"display_name":"net_retention_crm_customer_count"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":19,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"NET_RETENTION_PRODUCT_CATEGORY":{"type":"ARRAY","index":20,"name":"NET_RETENTION_PRODUCT_CATEGORY","comment":null,"display_name":"net_retention_product_category"},"PRIOR_YEAR_PRODUCT_CATEGORY":{"type":"ARRAY","index":21,"name":"PRIOR_YEAR_PRODUCT_CATEGORY","comment":null,"display_name":"prior_year_product_category"},"NET_RETENTION_PRODUCT_RANKING":{"type":"NUMBER","index":22,"name":"NET_RETENTION_PRODUCT_RANKING","comment":null,"display_name":"net_retention_product_ranking"},"PRIOR_YEAR_PRODUCT_RANKING":{"type":"NUMBER","index":23,"name":"PRIOR_YEAR_PRODUCT_RANKING","comment":null,"display_name":"prior_year_product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":24,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":25,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":26,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"TIER_CHANGE_ARR":{"type":"FLOAT","index":27,"name":"TIER_CHANGE_ARR","comment":null,"display_name":"tier_change_arr"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":28,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"},"CREATED_BY":{"type":"TEXT","index":29,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":30,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":31,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":32,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":33,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":34,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":68466688,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_retention_crm_account","raw_sql":"$36","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.reason_for_arr_change_tier_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_sales","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_sales","fqn":["gitlab_snowflake","common_mart_sales","restricted_safe","mart_retention_crm_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_sales/restricted_safe/mart_retention_crm_account.sql","original_file_path":"models/common_mart_sales/restricted_safe/mart_retention_crm_account.sql","name":"mart_retention_crm_account","alias":"mart_retention_crm_account","checksum":{"name":"sha256","checksum":"b4da76bd92e5c42e8feee39cda9f69f20edf2b78a819d1c7f26427fe68918db4"},"tags":["safe"],"refs":[["dim_date"],["dim_date"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table to support drillable retention analysis by the CRM account grain.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_sales/restricted_safe/mart_retention_crm_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.3465922,"compiled_sql":"$37","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_sales.mart_retention_crm_account","label":"mart_retention_crm_account"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_7_DAY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"VARIANT","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":6,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":8,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":9,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":13,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":14,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":15,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":16,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":17,"name":"ping_deployment_type","comment":null,"description":" Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":18,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":21,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":22,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":23,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":24,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":26,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":28,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":29,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":30,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":31,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":32,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":33,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":34,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":35,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":36,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":37,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":38,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":39,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":40,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":41,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":42,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":45,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":47,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":48,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":50,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":52,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":53,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":54,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":55,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":56,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"CREATED_BY":{"type":"TEXT","index":57,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":247492590080,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_7_day","raw_sql":"{{ config(\n    tags=[\"product\", \"mnpi_exception\"]\n) }}\n \n{{ macro_mart_ping_instance_metric('fct_ping_instance_metric_7_day') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.macro_mart_ping_instance_metric","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_7_day","model.gitlab_snowflake.fct_ping_instance_metric_7_day","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_7_day"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_7_day.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_7_day.sql","name":"mart_ping_instance_metric_7_day","alias":"mart_ping_instance_metric_7_day","checksum":{"name":"sha256","checksum":"cc3f62492134da2cdb7711229a6d2680447d8dc75c456980d1294eb567ad3b15"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_7_day"],["fct_ping_instance_metric_7_day"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$38","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_7_day.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.6629617,"compiled_sql":"$39","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_7_day","label":"mart_ping_instance_metric_7_day"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_28_DAY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"VARIANT","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":6,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":8,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":9,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":13,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":14,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":15,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":16,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":17,"name":"ping_deployment_type","comment":null,"description":" Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":18,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":21,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":22,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":23,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":24,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":26,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":28,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":29,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":30,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":31,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":32,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":33,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":34,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":35,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":36,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":37,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":38,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":39,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":40,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":41,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":42,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":45,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":47,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":48,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":50,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":52,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":53,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":54,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":55,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":56,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"CREATED_BY":{"type":"TEXT","index":57,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:18UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":318079325696,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_28_day","raw_sql":"{{ config(\n    tags=[\"product\", \"mnpi_exception\"]\n) }}\n\n{{ macro_mart_ping_instance_metric('fct_ping_instance_metric_28_day') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.macro_mart_ping_instance_metric","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_28_day","model.gitlab_snowflake.fct_ping_instance_metric_28_day","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_28_day"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_28_day.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_28_day.sql","name":"mart_ping_instance_metric_28_day","alias":"mart_ping_instance_metric_28_day","checksum":{"name":"sha256","checksum":"d0dca3bc1ac3ddaa757db763fd9df69a92c85bb8726a6c80638a38ddcac0e630"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_28_day"],["fct_ping_instance_metric_28_day"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$3a","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_28_day.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.6976585,"compiled_sql":"$3b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_28_day","label":"mart_ping_instance_metric_28_day"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_CUSTOMER_SUCCESS","name":"WK_PUMP_GAINSIGHT_METRICS_MONTHLY_PAID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_NAMESPACE_ID":{"type":"TEXT","index":3,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":4,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":5,"name":"NAMESPACE_CREATION_DATE","comment":null,"display_name":"namespace_creation_date"},"UUID":{"type":"TEXT","index":6,"name":"UUID","comment":null,"display_name":"uuid"},"HOSTNAME":{"type":"TEXT","index":7,"name":"HOSTNAME","comment":null,"display_name":"hostname"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":8,"name":"DIM_INSTALLATION_ID","comment":null,"display_name":"dim_installation_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":10,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":11,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION","comment":null,"display_name":"subscription_status_most_recent_version"},"TERM_START_DATE":{"type":"DATE","index":15,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":16,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":17,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":18,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SNAPSHOT_DATE_ID":{"type":"NUMBER","index":19,"name":"SNAPSHOT_DATE_ID","comment":null,"display_name":"snapshot_date_id"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"PING_CREATED_AT","comment":null,"display_name":"ping_created_at"},"DIM_USAGE_PING_ID":{"type":"TEXT","index":21,"name":"DIM_USAGE_PING_ID","comment":null,"display_name":"dim_usage_ping_id"},"INSTANCE_TYPE":{"type":"TEXT","index":22,"name":"INSTANCE_TYPE","comment":null,"display_name":"instance_type"},"INCLUDED_IN_HEALTH_MEASURES_STR":{"type":"TEXT","index":23,"name":"INCLUDED_IN_HEALTH_MEASURES_STR","comment":null,"display_name":"included_in_health_measures_str"},"CLEANED_VERSION":{"type":"TEXT","index":24,"name":"CLEANED_VERSION","comment":null,"display_name":"cleaned_version"},"COUNTRY_NAME":{"type":"TEXT","index":25,"name":"COUNTRY_NAME","comment":null,"display_name":"country_name"},"ISO_2_COUNTRY_CODE":{"type":"TEXT","index":26,"name":"ISO_2_COUNTRY_CODE","comment":null,"display_name":"iso_2_country_code"},"ISO_3_COUNTRY_CODE":{"type":"TEXT","index":27,"name":"ISO_3_COUNTRY_CODE","comment":null,"display_name":"iso_3_country_code"},"DELIVERY_TYPE":{"type":"TEXT","index":28,"name":"DELIVERY_TYPE","comment":null,"display_name":"delivery_type"},"INSTALLATION_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":29,"name":"INSTALLATION_CREATION_DATE","comment":null,"display_name":"installation_creation_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":30,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"BILLABLE_USER_COUNT":{"type":"NUMBER","index":31,"name":"BILLABLE_USER_COUNT","comment":null,"display_name":"billable_user_count"},"ACTIVE_USER_COUNT":{"type":"NUMBER","index":32,"name":"ACTIVE_USER_COUNT","comment":null,"display_name":"active_user_count"},"MAX_HISTORICAL_USER_COUNT":{"type":"NUMBER","index":33,"name":"MAX_HISTORICAL_USER_COUNT","comment":null,"display_name":"max_historical_user_count"},"LICENSE_USER_COUNT":{"type":"FLOAT","index":34,"name":"LICENSE_USER_COUNT","comment":null,"display_name":"license_user_count"},"LICENSE_USER_COUNT_SOURCE":{"type":"TEXT","index":35,"name":"LICENSE_USER_COUNT_SOURCE","comment":null,"display_name":"license_user_count_source"},"UMAU_28_DAYS_USER":{"type":"NUMBER","index":36,"name":"UMAU_28_DAYS_USER","comment":null,"display_name":"umau_28_days_user"},"ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":37,"name":"ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"action_monthly_active_users_project_repo_28_days_user"},"MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":38,"name":"MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"merge_requests_28_days_user"},"PROJECTS_WITH_REPOSITORIES_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":39,"name":"PROJECTS_WITH_REPOSITORIES_ENABLED_28_DAYS_USER","comment":null,"display_name":"projects_with_repositories_enabled_28_days_user"},"COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":40,"name":"COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"commit_comment_all_time_event"},"SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":41,"name":"SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"source_code_pushes_all_time_event"},"CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":42,"name":"CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"ci_pipelines_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":43,"name":"CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"ci_internal_pipelines_28_days_user"},"CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":44,"name":"CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"ci_builds_28_days_user"},"CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":45,"name":"CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"ci_builds_all_time_user"},"CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":46,"name":"CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"ci_builds_all_time_event"},"CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":47,"name":"CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"ci_runners_all_time_event"},"AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":48,"name":"AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"auto_devops_enabled_all_time_event"},"GITLAB_SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":49,"name":"GITLAB_SHARED_RUNNERS_ENABLED","comment":null,"display_name":"gitlab_shared_runners_enabled"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":50,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":51,"name":"TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"template_repositories_all_time_event"},"CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":52,"name":"CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"ci_pipeline_config_repository_28_days_user"},"USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":53,"name":"USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"user_unique_users_all_secure_scanners_28_days_user"},"USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":54,"name":"USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"user_sast_jobs_28_days_user"},"USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":55,"name":"USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"user_dast_jobs_28_days_user"},"USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":56,"name":"USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"user_dependency_scanning_jobs_28_days_user"},"USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":57,"name":"USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"user_license_management_jobs_28_days_user"},"USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":58,"name":"USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"user_secret_detection_jobs_28_days_user"},"USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":59,"name":"USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"user_container_scanning_jobs_28_days_user"},"OBJECT_STORE_PACKAGES_ENABLED":{"type":"BOOLEAN","index":60,"name":"OBJECT_STORE_PACKAGES_ENABLED","comment":null,"display_name":"object_store_packages_enabled"},"PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":61,"name":"PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"projects_with_packages_all_time_event"},"PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":62,"name":"PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"projects_with_packages_28_days_event"},"DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":63,"name":"DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"deployments_28_days_user"},"RELEASES_28_DAYS_USER":{"type":"NUMBER","index":64,"name":"RELEASES_28_DAYS_USER","comment":null,"display_name":"releases_28_days_user"},"EPICS_28_DAYS_USER":{"type":"NUMBER","index":65,"name":"EPICS_28_DAYS_USER","comment":null,"display_name":"epics_28_days_user"},"ISSUES_28_DAYS_USER":{"type":"NUMBER","index":66,"name":"ISSUES_28_DAYS_USER","comment":null,"display_name":"issues_28_days_user"},"CI_INTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":67,"name":"CI_INTERNAL_PIPELINES_ALL_TIME_EVENT","comment":null,"display_name":"ci_internal_pipelines_all_time_event"},"CI_EXTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":68,"name":"CI_EXTERNAL_PIPELINES_ALL_TIME_EVENT","comment":null,"display_name":"ci_external_pipelines_all_time_event"},"MERGE_REQUESTS_ALL_TIME_EVENT":{"type":"NUMBER","index":69,"name":"MERGE_REQUESTS_ALL_TIME_EVENT","comment":null,"display_name":"merge_requests_all_time_event"},"TODOS_ALL_TIME_EVENT":{"type":"NUMBER","index":70,"name":"TODOS_ALL_TIME_EVENT","comment":null,"display_name":"todos_all_time_event"},"EPICS_ALL_TIME_EVENT":{"type":"NUMBER","index":71,"name":"EPICS_ALL_TIME_EVENT","comment":null,"display_name":"epics_all_time_event"},"ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":72,"name":"ISSUES_ALL_TIME_EVENT","comment":null,"display_name":"issues_all_time_event"},"PROJECTS_ALL_TIME_EVENT":{"type":"NUMBER","index":73,"name":"PROJECTS_ALL_TIME_EVENT","comment":null,"display_name":"projects_all_time_event"},"DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":74,"name":"DEPLOYMENTS_28_DAYS_EVENT","comment":null,"display_name":"deployments_28_days_event"},"PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":75,"name":"PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"packages_28_days_event"},"SAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":76,"name":"SAST_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"sast_jobs_all_time_event"},"DAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":77,"name":"DAST_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"dast_jobs_all_time_event"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":78,"name":"DEPENDENCY_SCANNING_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"dependency_scanning_jobs_all_time_event"},"LICENSE_MANAGEMENT_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":79,"name":"LICENSE_MANAGEMENT_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"license_management_jobs_all_time_event"},"SECRET_DETECTION_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":80,"name":"SECRET_DETECTION_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"secret_detection_jobs_all_time_event"},"CONTAINER_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":81,"name":"CONTAINER_SCANNING_JOBS_ALL_TIME_EVENT","comment":null,"display_name":"container_scanning_jobs_all_time_event"},"PROJECTS_JENKINS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":82,"name":"PROJECTS_JENKINS_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jenkins_active_all_time_event"},"PROJECTS_BAMBOO_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":83,"name":"PROJECTS_BAMBOO_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_bamboo_active_all_time_event"},"PROJECTS_JIRA_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":84,"name":"PROJECTS_JIRA_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_active_all_time_event"},"PROJECTS_DRONE_CI_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":85,"name":"PROJECTS_DRONE_CI_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_drone_ci_active_all_time_event"},"PROJECTS_GITHUB_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":86,"name":"PROJECTS_GITHUB_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_github_active_all_time_event"},"PROJECTS_JIRA_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":87,"name":"PROJECTS_JIRA_SERVER_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_server_active_all_time_event"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":88,"name":"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_dvcs_cloud_active_all_time_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":89,"name":"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"projects_with_repositories_enabled_all_time_event"},"PROTECTED_BRANCHES_ALL_TIME_EVENT":{"type":"NUMBER","index":90,"name":"PROTECTED_BRANCHES_ALL_TIME_EVENT","comment":null,"display_name":"protected_branches_all_time_event"},"REMOTE_MIRRORS_ALL_TIME_EVENT":{"type":"NUMBER","index":91,"name":"REMOTE_MIRRORS_ALL_TIME_EVENT","comment":null,"display_name":"remote_mirrors_all_time_event"},"PROJECTS_ENFORCING_CODE_OWNER_APPROVAL_28_DAYS_USER":{"type":"NUMBER","index":92,"name":"PROJECTS_ENFORCING_CODE_OWNER_APPROVAL_28_DAYS_USER","comment":null,"display_name":"projects_enforcing_code_owner_approval_28_days_user"},"PROJECT_CLUSTERS_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":93,"name":"PROJECT_CLUSTERS_ENABLED_28_DAYS_USER","comment":null,"display_name":"project_clusters_enabled_28_days_user"},"ANALYTICS_28_DAYS_USER":{"type":"NUMBER","index":94,"name":"ANALYTICS_28_DAYS_USER","comment":null,"display_name":"analytics_28_days_user"},"ISSUES_EDIT_28_DAYS_USER":{"type":"NUMBER","index":95,"name":"ISSUES_EDIT_28_DAYS_USER","comment":null,"display_name":"issues_edit_28_days_user"},"USER_PACKAGES_28_DAYS_USER":{"type":"NUMBER","index":96,"name":"USER_PACKAGES_28_DAYS_USER","comment":null,"display_name":"user_packages_28_days_user"},"TERRAFORM_STATE_API_28_DAYS_USER":{"type":"NUMBER","index":97,"name":"TERRAFORM_STATE_API_28_DAYS_USER","comment":null,"display_name":"terraform_state_api_28_days_user"},"INCIDENT_MANAGEMENT_28_DAYS_USER":{"type":"NUMBER","index":98,"name":"INCIDENT_MANAGEMENT_28_DAYS_USER","comment":null,"display_name":"incident_management_28_days_user"},"AUTO_DEVOPS_ENABLED":{"type":"BOOLEAN","index":99,"name":"AUTO_DEVOPS_ENABLED","comment":null,"display_name":"auto_devops_enabled"},"GITALY_CLUSTERS_INSTANCE":{"type":"NUMBER","index":100,"name":"GITALY_CLUSTERS_INSTANCE","comment":null,"display_name":"gitaly_clusters_instance"},"EPICS_DEEPEST_RELATIONSHIP_LEVEL_INSTANCE":{"type":"NUMBER","index":101,"name":"EPICS_DEEPEST_RELATIONSHIP_LEVEL_INSTANCE","comment":null,"display_name":"epics_deepest_relationship_level_instance"},"CLUSTERS_APPLICATIONS_CILIUM_ALL_TIME_EVENT":{"type":"NUMBER","index":102,"name":"CLUSTERS_APPLICATIONS_CILIUM_ALL_TIME_EVENT","comment":null,"display_name":"clusters_applications_cilium_all_time_event"},"NETWORK_POLICY_FORWARDS_ALL_TIME_EVENT":{"type":"NUMBER","index":103,"name":"NETWORK_POLICY_FORWARDS_ALL_TIME_EVENT","comment":null,"display_name":"network_policy_forwards_all_time_event"},"NETWORK_POLICY_DROPS_ALL_TIME_EVENT":{"type":"NUMBER","index":104,"name":"NETWORK_POLICY_DROPS_ALL_TIME_EVENT","comment":null,"display_name":"network_policy_drops_all_time_event"},"REQUIREMENTS_WITH_TEST_REPORT_ALL_TIME_EVENT":{"type":"NUMBER","index":105,"name":"REQUIREMENTS_WITH_TEST_REPORT_ALL_TIME_EVENT","comment":null,"display_name":"requirements_with_test_report_all_time_event"},"REQUIREMENT_TEST_REPORTS_CI_ALL_TIME_EVENT":{"type":"NUMBER","index":106,"name":"REQUIREMENT_TEST_REPORTS_CI_ALL_TIME_EVENT","comment":null,"display_name":"requirement_test_reports_ci_all_time_event"},"PROJECTS_IMPORTED_FROM_GITHUB_ALL_TIME_EVENT":{"type":"NUMBER","index":107,"name":"PROJECTS_IMPORTED_FROM_GITHUB_ALL_TIME_EVENT","comment":null,"display_name":"projects_imported_from_github_all_time_event"},"PROJECTS_JIRA_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":108,"name":"PROJECTS_JIRA_CLOUD_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_cloud_active_all_time_event"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":109,"name":"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_jira_dvcs_server_active_all_time_event"},"SERVICE_DESK_ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":110,"name":"SERVICE_DESK_ISSUES_ALL_TIME_EVENT","comment":null,"display_name":"service_desk_issues_all_time_event"},"CI_PIPELINES_ALL_TIME_USER":{"type":"NUMBER","index":111,"name":"CI_PIPELINES_ALL_TIME_USER","comment":null,"display_name":"ci_pipelines_all_time_user"},"SERVICE_DESK_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":112,"name":"SERVICE_DESK_ISSUES_28_DAYS_USER","comment":null,"display_name":"service_desk_issues_28_days_user"},"PROJECTS_JIRA_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":113,"name":"PROJECTS_JIRA_ACTIVE_28_DAYS_USER","comment":null,"display_name":"projects_jira_active_28_days_user"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":114,"name":"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_28_DAYS_USER","comment":null,"display_name":"projects_jira_dvcs_cloud_active_28_days_user"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":115,"name":"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_28_DAYS_USER","comment":null,"display_name":"projects_jira_dvcs_server_active_28_days_user"},"MERGE_REQUESTS_WITH_REQUIRED_CODE_OWNERS_28_DAYS_USER":{"type":"NUMBER","index":116,"name":"MERGE_REQUESTS_WITH_REQUIRED_CODE_OWNERS_28_DAYS_USER","comment":null,"display_name":"merge_requests_with_required_code_owners_28_days_user"},"ANALYTICS_VALUE_STREAM_28_DAYS_EVENT":{"type":"NUMBER","index":117,"name":"ANALYTICS_VALUE_STREAM_28_DAYS_EVENT","comment":null,"display_name":"analytics_value_stream_28_days_event"},"CODE_REVIEW_USER_APPROVE_MR_28_DAYS_USER":{"type":"NUMBER","index":118,"name":"CODE_REVIEW_USER_APPROVE_MR_28_DAYS_USER","comment":null,"display_name":"code_review_user_approve_mr_28_days_user"},"EPICS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":119,"name":"EPICS_USAGE_28_DAYS_USER","comment":null,"display_name":"epics_usage_28_days_user"},"CI_TEMPLATES_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":120,"name":"CI_TEMPLATES_USAGE_28_DAYS_EVENT","comment":null,"display_name":"ci_templates_usage_28_days_event"},"PROJECT_MANAGEMENT_ISSUE_MILESTONE_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":121,"name":"PROJECT_MANAGEMENT_ISSUE_MILESTONE_CHANGED_28_DAYS_USER","comment":null,"display_name":"project_management_issue_milestone_changed_28_days_user"},"PROJECT_MANAGEMENT_ISSUE_ITERATION_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":122,"name":"PROJECT_MANAGEMENT_ISSUE_ITERATION_CHANGED_28_DAYS_USER","comment":null,"display_name":"project_management_issue_iteration_changed_28_days_user"},"PROTECTED_BRANCHES_28_DAYS_USER":{"type":"NUMBER","index":123,"name":"PROTECTED_BRANCHES_28_DAYS_USER","comment":null,"display_name":"protected_branches_28_days_user"},"CI_CD_LEAD_TIME_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":124,"name":"CI_CD_LEAD_TIME_USAGE_28_DAYS_EVENT","comment":null,"display_name":"ci_cd_lead_time_usage_28_days_event"},"CI_CD_DEPLOYMENT_FREQUENCY_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":125,"name":"CI_CD_DEPLOYMENT_FREQUENCY_USAGE_28_DAYS_EVENT","comment":null,"display_name":"ci_cd_deployment_frequency_usage_28_days_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_USER":{"type":"NUMBER","index":126,"name":"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_USER","comment":null,"display_name":"projects_with_repositories_enabled_all_time_user"},"API_FUZZING_JOBS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":127,"name":"API_FUZZING_JOBS_USAGE_28_DAYS_USER","comment":null,"display_name":"api_fuzzing_jobs_usage_28_days_user"},"COVERAGE_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":128,"name":"COVERAGE_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"coverage_fuzzing_pipeline_usage_28_days_event"},"API_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":129,"name":"API_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"api_fuzzing_pipeline_usage_28_days_event"},"CONTAINER_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":130,"name":"CONTAINER_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"container_scanning_pipeline_usage_28_days_event"},"DEPENDENCY_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":131,"name":"DEPENDENCY_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"dependency_scanning_pipeline_usage_28_days_event"},"SAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":132,"name":"SAST_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"sast_pipeline_usage_28_days_event"},"SECRET_DETECTION_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":133,"name":"SECRET_DETECTION_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"secret_detection_pipeline_usage_28_days_event"},"DAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":134,"name":"DAST_PIPELINE_USAGE_28_DAYS_EVENT","comment":null,"display_name":"dast_pipeline_usage_28_days_event"},"COVERAGE_FUZZING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":135,"name":"COVERAGE_FUZZING_JOBS_28_DAYS_USER","comment":null,"display_name":"coverage_fuzzing_jobs_28_days_user"},"ENVIRONMENTS_ALL_TIME_EVENT":{"type":"NUMBER","index":136,"name":"ENVIRONMENTS_ALL_TIME_EVENT","comment":null,"display_name":"environments_all_time_event"},"FEATURE_FLAGS_ALL_TIME_EVENT":{"type":"NUMBER","index":137,"name":"FEATURE_FLAGS_ALL_TIME_EVENT","comment":null,"display_name":"feature_flags_all_time_event"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":138,"name":"SUCCESSFUL_DEPLOYMENTS_28_DAYS_EVENT","comment":null,"display_name":"successful_deployments_28_days_event"},"FAILED_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":139,"name":"FAILED_DEPLOYMENTS_28_DAYS_EVENT","comment":null,"display_name":"failed_deployments_28_days_event"},"PROJECTS_COMPLIANCE_FRAMEWORK_ALL_TIME_EVENT":{"type":"NUMBER","index":140,"name":"PROJECTS_COMPLIANCE_FRAMEWORK_ALL_TIME_EVENT","comment":null,"display_name":"projects_compliance_framework_all_time_event"},"COMMIT_CI_CONFIG_FILE_28_DAYS_USER":{"type":"NUMBER","index":141,"name":"COMMIT_CI_CONFIG_FILE_28_DAYS_USER","comment":null,"display_name":"commit_ci_config_file_28_days_user"},"VIEW_AUDIT_ALL_TIME_USER":{"type":"NUMBER","index":142,"name":"VIEW_AUDIT_ALL_TIME_USER","comment":null,"display_name":"view_audit_all_time_user"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_USER":{"type":"NUMBER","index":143,"name":"DEPENDENCY_SCANNING_JOBS_ALL_TIME_USER","comment":null,"display_name":"dependency_scanning_jobs_all_time_user"},"ANALYTICS_DEVOPS_ADOPTION_ALL_TIME_USER":{"type":"NUMBER","index":144,"name":"ANALYTICS_DEVOPS_ADOPTION_ALL_TIME_USER","comment":null,"display_name":"analytics_devops_adoption_all_time_user"},"PROJECTS_IMPORTED_ALL_TIME_EVENT":{"type":"NUMBER","index":145,"name":"PROJECTS_IMPORTED_ALL_TIME_EVENT","comment":null,"display_name":"projects_imported_all_time_event"},"PREFERENCES_SECURITY_DASHBOARD_28_DAYS_USER":{"type":"NUMBER","index":146,"name":"PREFERENCES_SECURITY_DASHBOARD_28_DAYS_USER","comment":null,"display_name":"preferences_security_dashboard_28_days_user"},"WEB_IDE_EDIT_28_DAYS_USER":{"type":"NUMBER","index":147,"name":"WEB_IDE_EDIT_28_DAYS_USER","comment":null,"display_name":"web_ide_edit_28_days_user"},"AUTO_DEVOPS_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":148,"name":"AUTO_DEVOPS_PIPELINES_ALL_TIME_EVENT","comment":null,"display_name":"auto_devops_pipelines_all_time_event"},"PROJECTS_PROMETHEUS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":149,"name":"PROJECTS_PROMETHEUS_ACTIVE_ALL_TIME_EVENT","comment":null,"display_name":"projects_prometheus_active_all_time_event"},"PROMETHEUS_ENABLED":{"type":"BOOLEAN","index":150,"name":"PROMETHEUS_ENABLED","comment":null,"display_name":"prometheus_enabled"},"PROMETHEUS_METRICS_ENABLED":{"type":"BOOLEAN","index":151,"name":"PROMETHEUS_METRICS_ENABLED","comment":null,"display_name":"prometheus_metrics_enabled"},"GROUP_SAML_ENABLED":{"type":"BOOLEAN","index":152,"name":"GROUP_SAML_ENABLED","comment":null,"display_name":"group_saml_enabled"},"JIRA_ISSUE_IMPORTS_ALL_TIME_EVENT":{"type":"NUMBER","index":153,"name":"JIRA_ISSUE_IMPORTS_ALL_TIME_EVENT","comment":null,"display_name":"jira_issue_imports_all_time_event"},"AUTHOR_EPIC_ALL_TIME_USER":{"type":"NUMBER","index":154,"name":"AUTHOR_EPIC_ALL_TIME_USER","comment":null,"display_name":"author_epic_all_time_user"},"AUTHOR_ISSUE_ALL_TIME_USER":{"type":"NUMBER","index":155,"name":"AUTHOR_ISSUE_ALL_TIME_USER","comment":null,"display_name":"author_issue_all_time_user"},"FAILED_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":156,"name":"FAILED_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"failed_deployments_28_days_user"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"SUCCESSFUL_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"successful_deployments_28_days_user"},"GEO_ENABLED":{"type":"BOOLEAN","index":158,"name":"GEO_ENABLED","comment":null,"display_name":"geo_enabled"},"AUTO_DEVOPS_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":159,"name":"AUTO_DEVOPS_PIPELINES_28_DAYS_USER","comment":null,"display_name":"auto_devops_pipelines_28_days_user"},"ACTIVE_INSTANCE_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":160,"name":"ACTIVE_INSTANCE_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"active_instance_runners_all_time_event"},"ACTIVE_GROUP_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"ACTIVE_GROUP_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"active_group_runners_all_time_event"},"ACTIVE_PROJECT_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"ACTIVE_PROJECT_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"active_project_runners_all_time_event"},"GITALY_VERSION":{"type":"TEXT","index":163,"name":"GITALY_VERSION","comment":null,"display_name":"gitaly_version"},"GITALY_SERVERS_ALL_TIME_EVENT":{"type":"NUMBER","index":164,"name":"GITALY_SERVERS_ALL_TIME_EVENT","comment":null,"display_name":"gitaly_servers_all_time_event"},"API_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":165,"name":"API_FUZZING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"api_fuzzing_scans_all_time_event"},"API_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":166,"name":"API_FUZZING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"api_fuzzing_scans_28_days_event"},"COVERAGE_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":167,"name":"COVERAGE_FUZZING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"coverage_fuzzing_scans_all_time_event"},"COVERAGE_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":168,"name":"COVERAGE_FUZZING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"coverage_fuzzing_scans_28_days_event"},"SECRET_DETECTION_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":169,"name":"SECRET_DETECTION_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"secret_detection_scans_all_time_event"},"SECRET_DETECTION_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":170,"name":"SECRET_DETECTION_SCANS_28_DAYS_EVENT","comment":null,"display_name":"secret_detection_scans_28_days_event"},"DEPENDENCY_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":171,"name":"DEPENDENCY_SCANNING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"dependency_scanning_scans_all_time_event"},"DEPENDENCY_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":172,"name":"DEPENDENCY_SCANNING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"dependency_scanning_scans_28_days_event"},"CONTAINER_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":173,"name":"CONTAINER_SCANNING_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"container_scanning_scans_all_time_event"},"CONTAINER_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":174,"name":"CONTAINER_SCANNING_SCANS_28_DAYS_EVENT","comment":null,"display_name":"container_scanning_scans_28_days_event"},"DAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":175,"name":"DAST_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"dast_scans_all_time_event"},"DAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":176,"name":"DAST_SCANS_28_DAYS_EVENT","comment":null,"display_name":"dast_scans_28_days_event"},"SAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":177,"name":"SAST_SCANS_ALL_TIME_EVENT","comment":null,"display_name":"sast_scans_all_time_event"},"SAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":178,"name":"SAST_SCANS_28_DAYS_EVENT","comment":null,"display_name":"sast_scans_28_days_event"},"PACKAGES_PUSHED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":179,"name":"PACKAGES_PUSHED_REGISTRY_ALL_TIME_EVENT","comment":null,"display_name":"packages_pushed_registry_all_time_event"},"PACKAGES_PULLED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":180,"name":"PACKAGES_PULLED_REGISTRY_ALL_TIME_EVENT","comment":null,"display_name":"packages_pulled_registry_all_time_event"},"COMPLIANCE_DASHBOARD_VIEW_28_DAYS_USER":{"type":"NUMBER","index":181,"name":"COMPLIANCE_DASHBOARD_VIEW_28_DAYS_USER","comment":null,"display_name":"compliance_dashboard_view_28_days_user"},"AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":182,"name":"AUDIT_SCREEN_VIEW_28_DAYS_USER","comment":null,"display_name":"audit_screen_view_28_days_user"},"INSTANCE_AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":183,"name":"INSTANCE_AUDIT_SCREEN_VIEW_28_DAYS_USER","comment":null,"display_name":"instance_audit_screen_view_28_days_user"},"CREDENTIAL_INVENTORY_VIEW_28_DAYS_USER":{"type":"NUMBER","index":184,"name":"CREDENTIAL_INVENTORY_VIEW_28_DAYS_USER","comment":null,"display_name":"credential_inventory_view_28_days_user"},"COMPLIANCE_FRAMEWORKS_PIPELINE_ALL_TIME_EVENT":{"type":"NUMBER","index":185,"name":"COMPLIANCE_FRAMEWORKS_PIPELINE_ALL_TIME_EVENT","comment":null,"display_name":"compliance_frameworks_pipeline_all_time_event"},"COMPLIANCE_FRAMEWORKS_PIPELINE_28_DAYS_EVENT":{"type":"NUMBER","index":186,"name":"COMPLIANCE_FRAMEWORKS_PIPELINE_28_DAYS_EVENT","comment":null,"display_name":"compliance_frameworks_pipeline_28_days_event"},"GROUPS_STREAMING_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":187,"name":"GROUPS_STREAMING_DESTINATIONS_ALL_TIME_EVENT","comment":null,"display_name":"groups_streaming_destinations_all_time_event"},"GROUPS_STREAMING_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":188,"name":"GROUPS_STREAMING_DESTINATIONS_28_DAYS_EVENT","comment":null,"display_name":"groups_streaming_destinations_28_days_event"},"AUDIT_EVENT_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":189,"name":"AUDIT_EVENT_DESTINATIONS_ALL_TIME_EVENT","comment":null,"display_name":"audit_event_destinations_all_time_event"},"AUDIT_EVENT_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":190,"name":"AUDIT_EVENT_DESTINATIONS_28_DAYS_EVENT","comment":null,"display_name":"audit_event_destinations_28_days_event"},"PROJECTS_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":191,"name":"PROJECTS_STATUS_CHECKS_ALL_TIME_EVENT","comment":null,"display_name":"projects_status_checks_all_time_event"},"EXTERNAL_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":192,"name":"EXTERNAL_STATUS_CHECKS_ALL_TIME_EVENT","comment":null,"display_name":"external_status_checks_all_time_event"},"PAID_LICENSE_SEARCH_28_DAYS_USER":{"type":"NUMBER","index":193,"name":"PAID_LICENSE_SEARCH_28_DAYS_USER","comment":null,"display_name":"paid_license_search_28_days_user"},"LAST_ACTIVITY_28_DAYS_USER":{"type":"NUMBER","index":194,"name":"LAST_ACTIVITY_28_DAYS_USER","comment":null,"display_name":"last_activity_28_days_user"},"SNIPPETS_28_DAYS_EVENT":{"type":"NUMBER","index":195,"name":"SNIPPETS_28_DAYS_EVENT","comment":null,"display_name":"snippets_28_days_event"},"SINGLE_FILE_EDITOR_28_DAYS_USER":{"type":"NUMBER","index":196,"name":"SINGLE_FILE_EDITOR_28_DAYS_USER","comment":null,"display_name":"single_file_editor_28_days_user"},"MERGE_REQUESTS_CREATED_28_DAYS_EVENT":{"type":"NUMBER","index":197,"name":"MERGE_REQUESTS_CREATED_28_DAYS_EVENT","comment":null,"display_name":"merge_requests_created_28_days_event"},"MERGE_REQUESTS_CREATED_28_DAYS_USER":{"type":"NUMBER","index":198,"name":"MERGE_REQUESTS_CREATED_28_DAYS_USER","comment":null,"display_name":"merge_requests_created_28_days_user"},"MERGE_REQUESTS_APPROVAL_RULES_28_DAYS_EVENT":{"type":"NUMBER","index":199,"name":"MERGE_REQUESTS_APPROVAL_RULES_28_DAYS_EVENT","comment":null,"display_name":"merge_requests_approval_rules_28_days_event"},"CUSTOM_COMPLIANCE_FRAMEWORKS_28_DAYS_EVENT":{"type":"NUMBER","index":200,"name":"CUSTOM_COMPLIANCE_FRAMEWORKS_28_DAYS_EVENT","comment":null,"display_name":"custom_compliance_frameworks_28_days_event"},"PROJECTS_SECURITY_POLICY_28_DAYS_EVENT":{"type":"NUMBER","index":201,"name":"PROJECTS_SECURITY_POLICY_28_DAYS_EVENT","comment":null,"display_name":"projects_security_policy_28_days_event"},"MERGE_REQUESTS_SECURITY_POLICY_28_DAYS_USER":{"type":"NUMBER","index":202,"name":"MERGE_REQUESTS_SECURITY_POLICY_28_DAYS_USER","comment":null,"display_name":"merge_requests_security_policy_28_days_user"},"PIPELINES_IMPLICIT_AUTO_DEVOPS_28_DAYS_EVENT":{"type":"NUMBER","index":203,"name":"PIPELINES_IMPLICIT_AUTO_DEVOPS_28_DAYS_EVENT","comment":null,"display_name":"pipelines_implicit_auto_devops_28_days_event"},"PIPELINE_SCHEDULES_28_DAYS_USER":{"type":"NUMBER","index":204,"name":"PIPELINE_SCHEDULES_28_DAYS_USER","comment":null,"display_name":"pipeline_schedules_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_EVENT":{"type":"NUMBER","index":205,"name":"CI_INTERNAL_PIPELINES_28_DAYS_EVENT","comment":null,"display_name":"ci_internal_pipelines_28_days_event"},"IS_LATEST_DATA":{"type":"BOOLEAN","index":206,"name":"IS_LATEST_DATA","comment":null,"display_name":"is_latest_data"},"PRIMARY_KEY":{"type":"TEXT","index":207,"name":"PRIMARY_KEY","comment":null,"display_name":"primary_key"},"CREATED_BY":{"type":"TEXT","index":208,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":209,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":210,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":211,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":212,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":213,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:53UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":242408960,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.wk_pump_gainsight_metrics_monthly_paid","raw_sql":"$3c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_keyed_nulls","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_saas","model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_saas","model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_self_managed","model.gitlab_snowflake.rpt_gainsight_metrics_monthly_paid_self_managed","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time"]},"config":{"enabled":true,"alias":null,"schema":"workspace_customer_success","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_customer_success","fqn":["gitlab_snowflake","workspaces","workspace_customer_success","wk_pump_gainsight_metrics_monthly_paid"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_customer_success/wk_pump_gainsight_metrics_monthly_paid.sql","original_file_path":"models/workspaces/workspace_customer_success/wk_pump_gainsight_metrics_monthly_paid.sql","name":"wk_pump_gainsight_metrics_monthly_paid","alias":"wk_pump_gainsight_metrics_monthly_paid","checksum":{"name":"sha256","checksum":"185ac0a1b407800fef867e0b60ce830c9b60fddca4ee944187805c861b47b6e9"},"tags":["workspace","mnpi_exception"],"refs":[["rpt_gainsight_metrics_monthly_paid_saas"],["rpt_gainsight_metrics_monthly_paid_saas"],["rpt_gainsight_metrics_monthly_paid_self_managed"],["rpt_gainsight_metrics_monthly_paid_self_managed"],["dim_billing_account"],["dim_billing_account"],["dim_location_country"],["dim_location_country"],["dim_subscription"],["dim_subscription"],["dim_namespace"],["dim_namespace"],["mart_charge"],["mart_charge"],["dim_date"],["dim_date"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_event_based_metric_counts_namespace_all_time"],["wk_rpt_event_based_metric_counts_namespace_all_time"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_customer_success/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_customer_success/wk_pump_gainsight_metrics_monthly_paid.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_customer_success","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033732.9050465,"compiled_sql":"$3d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_customer_success.wk_pump_gainsight_metrics_monthly_paid","label":"wk_pump_gainsight_metrics_monthly_paid"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"MART_DELTA_ARR_SUBSCRIPTION_PRODUCT_MONTH","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"ARR_MONTH","comment":null,"display_name":"arr_month"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":6,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"PRODUCT_CATEGORY":{"type":"TEXT","index":8,"name":"product_category","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":9,"name":"delivery","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"delivery"},"PRODUCT_RANKING":{"type":"NUMBER","index":10,"name":"product_ranking","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":11,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"BEG_ARR":{"type":"FLOAT","index":12,"name":"BEG_ARR","comment":null,"display_name":"beg_arr"},"BEG_QUANTITY":{"type":"FLOAT","index":13,"name":"BEG_QUANTITY","comment":null,"display_name":"beg_quantity"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":14,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":15,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":16,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"END_ARR":{"type":"FLOAT","index":17,"name":"END_ARR","comment":null,"display_name":"end_arr"},"END_QUANTITY":{"type":"FLOAT","index":18,"name":"END_QUANTITY","comment":null,"display_name":"end_quantity"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":19,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":69571584,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_delta_arr_subscription_product_month","raw_sql":"$3e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","marts","arr","mart_delta_arr_subscription_product_month"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/arr/mart_delta_arr_subscription_product_month.sql","original_file_path":"models/marts/arr/mart_delta_arr_subscription_product_month.sql","name":"mart_delta_arr_subscription_product_month","alias":"mart_delta_arr_subscription_product_month","checksum":{"name":"sha256","checksum":"b3a518aa62e20c6973a7b4175d75df18bfc85abc306321662d5246871b9664c8"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table by month purusant to the ARR Analysis Framework at the subscription || product_category level","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/arr/mart_delta_arr_subscription_product_month.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.337156,"compiled_sql":"$3f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.mart_delta_arr_subscription_product_month","label":"mart_delta_arr_subscription_product_month"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"NUMBER","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"MONTHLY_METRIC_VALUE":{"type":"NUMBER","index":5,"name":"monthly_metric_value","comment":null,"description":"For 28 day metrics, this is the metric value that comes directly from the ping payload. For all-time metrics, this is a calculation using the monthly_all_time_metric_calc macro. The macro calculates an installation-level MoM difference in metric value, attempting to create a monthly version of an all-time counter.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"monthly_metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":6,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":8,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":9,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":10,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":11,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":14,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":15,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":16,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":17,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":18,"name":"ping_deployment_type","comment":null,"description":"Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":19,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":21,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":22,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":23,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":24,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":25,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":26,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":27,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":28,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":29,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":30,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":31,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":32,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":33,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":34,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":35,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":36,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":37,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":38,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":39,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":40,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":41,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":42,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":43,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":45,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":47,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":48,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":49,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":50,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":51,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":52,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":53,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":54,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":55,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"CREATED_BY":{"type":"TEXT","index":56,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":57,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":58,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":59,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:19UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":241528479744,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_monthly","raw_sql":"$40","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_hosts","model.gitlab_snowflake.dim_hosts","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_monthly","model.gitlab_snowflake.fct_ping_instance_metric_monthly","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_monthly.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_monthly.sql","name":"mart_ping_instance_metric_monthly","alias":"mart_ping_instance_metric_monthly","checksum":{"name":"sha256","checksum":"efb43703c880fc151f81362920cc041b147afcaa49da14abe4e8c679fd73d841"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_hosts"],["dim_hosts"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_monthly"],["fct_ping_instance_metric_monthly"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$41","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.600816,"compiled_sql":"$42","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_monthly","label":"mart_ping_instance_metric_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_ORDER_HIST","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_ORDER_ID":{"type":"NUMBER","index":1,"name":"dim_order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_order_id"},"CUSTOMER_ID":{"type":"NUMBER","index":2,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID":{"type":"TEXT","index":3,"name":"product_rate_plan_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id"},"ORDER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"order_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"order_created_at"},"ORDER_START_DATE":{"type":"DATE","index":5,"name":"ORDER_START_DATE","comment":null,"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"DATE","index":6,"name":"ORDER_END_DATE","comment":null,"display_name":"order_end_date"},"ORDER_QUANTITY":{"type":"NUMBER","index":7,"name":"ORDER_QUANTITY","comment":null,"display_name":"order_quantity"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":8,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":9,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":10,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":11,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"AMENDMENT_TYPE":{"type":"TEXT","index":13,"name":"AMENDMENT_TYPE","comment":null,"display_name":"amendment_type"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":14,"name":"ORDER_IS_TRIAL","comment":null,"display_name":"order_is_trial"},"LAST_EXTRA_CI_MINUTES_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LAST_EXTRA_CI_MINUTES_SYNC_AT","comment":null,"display_name":"last_extra_ci_minutes_sync_at"},"INCREASED_BILLING_RATE_NOTIFIED_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"INCREASED_BILLING_RATE_NOTIFIED_AT","comment":null,"display_name":"increased_billing_rate_notified_at"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":17,"name":"valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":18,"name":"valid_to","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"valid_to"},"CREATED_BY":{"type":"TEXT","index":19,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":20,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":21,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":22,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":24,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:42UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":81267712,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_order_hist","raw_sql":"$43","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_versions_source","model.gitlab_snowflake.customers_db_versions_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_order_hist"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_order_hist.sql","original_file_path":"models/common_prep/prep_order_hist.sql","name":"prep_order_hist","alias":"prep_order_hist","checksum":{"name":"sha256","checksum":"5337349fdf4cb47687921a21390f3df4e9c552cbc5c339ebf49821f5f9a0b08c"},"tags":["mnpi_exception"],"refs":[["customers_db_versions_source"],["customers_db_versions_source"],["customers_db_orders_source"],["customers_db_orders_source"],["dim_date"],["dim_date"],["prep_namespace"],["prep_namespace"],["dim_subscription"],["dim_subscription"],["dim_billing_account"],["dim_billing_account"]],"sources":[],"metrics":[],"description":"Table containing GitLab order snapshots.\n\nThe grain of this table is one row per order per valid_to/valid_from combination.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_order_hist.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.4845302,"compiled_sql":"$44","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_order_hist","label":"prep_order_hist"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"MART_PRODUCT_USAGE_PAID_USER_METRICS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"snapshot_month","comment":null,"description":"Month in which the product usage was reported.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_month"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_NAMESPACE_ID":{"type":"TEXT","index":3,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":4,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":5,"name":"NAMESPACE_CREATION_DATE","comment":null,"display_name":"namespace_creation_date"},"UUID":{"type":"TEXT","index":6,"name":"uuid","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"uuid"},"HOSTNAME":{"type":"TEXT","index":7,"name":"hostname","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hostname"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":8,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"dim_billing_account_id","comment":null,"description":"Returns unknown ID (MD5(-1)) if the `account_id` from `fct_product_usage_wave_1_3_metrics_monthly` is not found in `dim_billing_account`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":10,"name":"dim_crm_account_id","comment":null,"description":"Returns unknown ID (MD5(-1)) if the `dim_crm_account_id` from `dim_billing_account` is not found in `dim_crm_account`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":11,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"subscription_status","comment":null,"description":"Status of the subscription at the time the usage ping was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_status"},"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_STATUS_MOST_RECENT_VERSION","comment":null,"display_name":"subscription_status_most_recent_version"},"TERM_START_DATE":{"type":"DATE","index":15,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":16,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":17,"name":"subscription_start_date","comment":null,"description":"Date the subscription term of the subscription_id started.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":18,"name":"subscription_end_date","comment":null,"description":"Date the subscription term of the subscription_id ended.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SNAPSHOT_DATE_ID":{"type":"NUMBER","index":19,"name":"snapshot_date_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_date_id"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ping_created_at","comment":null,"description":"Actual date that the usage ping was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"DIM_USAGE_PING_ID":{"type":"TEXT","index":21,"name":"dim_usage_ping_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_usage_ping_id"},"INSTANCE_TYPE":{"type":"TEXT","index":22,"name":"instance_type","comment":null,"description":"Type of the instance","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_type"},"INCLUDED_IN_HEALTH_MEASURES_STR":{"type":"TEXT","index":23,"name":"INCLUDED_IN_HEALTH_MEASURES_STR","comment":null,"display_name":"included_in_health_measures_str"},"CLEANED_VERSION":{"type":"TEXT","index":24,"name":"cleaned_version","comment":null,"description":"Version of GitLab running on the instance","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cleaned_version"},"COUNTRY_NAME":{"type":"TEXT","index":25,"name":"country_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country_name"},"ISO_2_COUNTRY_CODE":{"type":"TEXT","index":26,"name":"iso_2_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"iso_2_country_code"},"ISO_3_COUNTRY_CODE":{"type":"TEXT","index":27,"name":"iso_3_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"iso_3_country_code"},"DELIVERY_TYPE":{"type":"TEXT","index":28,"name":"delivery_type","comment":null,"description":"Indicates if the product usage came from a SaaS or Self-Managed user.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"delivery_type"},"DEPLOYMENT_TYPE":{"type":"TEXT","index":29,"name":"DEPLOYMENT_TYPE","comment":null,"display_name":"deployment_type"},"INSTALLATION_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":30,"name":"installation_creation_date","comment":null,"description":"Based off of the [`installation_creation_date`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/license/20230228110448_installation_creation_date.yml) \nService Ping metric. For installations where the root user (id = 1) is not deleted, it returns the root user creation date. For installations where the root user \nis deleted, it returns the earliest available user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"installation_creation_date"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":31,"name":"LICENSE_UTILIZATION","comment":null,"display_name":"license_utilization"},"BILLABLE_USER_COUNT":{"type":"NUMBER","index":32,"name":"BILLABLE_USER_COUNT","comment":null,"display_name":"billable_user_count"},"ACTIVE_USER_COUNT":{"type":"NUMBER","index":33,"name":"ACTIVE_USER_COUNT","comment":null,"display_name":"active_user_count"},"MAX_HISTORICAL_USER_COUNT":{"type":"NUMBER","index":34,"name":"MAX_HISTORICAL_USER_COUNT","comment":null,"display_name":"max_historical_user_count"},"LICENSE_USER_COUNT":{"type":"FLOAT","index":35,"name":"LICENSE_USER_COUNT","comment":null,"display_name":"license_user_count"},"LICENSE_USER_COUNT_SOURCE":{"type":"TEXT","index":36,"name":"LICENSE_USER_COUNT_SOURCE","comment":null,"display_name":"license_user_count_source"},"UMAU_28_DAYS_USER":{"type":"NUMBER","index":37,"name":"umau_28_days_user","comment":null,"description":"Number of distinct users who have generated a manage event by month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180814_events.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_28_days_user"},"ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":38,"name":"action_monthly_active_users_project_repo_28_days_user","comment":null,"description":"Number of distinct users who have generated a manage event by month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180814_events.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"action_monthly_active_users_project_repo_28_days_user"},"MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":39,"name":"merge_requests_28_days_user","comment":null,"description":"Count distinct authors of merge requests. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175055_merge_requests.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_requests_28_days_user"},"PROJECTS_WITH_REPOSITORIES_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":40,"name":"projects_with_repositories_enabled_28_days_user","comment":null,"description":"Count of users creating projects that have a matching Git repository, result of a Git push action, for last 28 days.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216182049_projects_with_repositories_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_with_repositories_enabled_28_days_user"},"COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":41,"name":"commit_comment_all_time_event","comment":null,"description":"Count of total unique commit comments. Does not include MR diff comments.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216182004_commit_comment.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"commit_comment_all_time_event"},"SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":42,"name":"source_code_pushes_all_time_event","comment":null,"description":"Count of total Git push operations.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216182006_source_code_pushes.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"source_code_pushes_all_time_event"},"CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":43,"name":"ci_pipelines_28_days_user","comment":null,"description":"Distinct users triggering pipelines in a month.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175554_ci_pipelines.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_pipelines_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":44,"name":"ci_internal_pipelines_28_days_user","comment":null,"description":"Total pipelines in GitLab repositories in a month.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175546_ci_internal_pipelines.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_internal_pipelines_28_days_user"},"CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":45,"name":"ci_builds_28_days_user","comment":null,"description":"Unique monthly builds in project.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175542_ci_builds.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_builds_28_days_user"},"CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":46,"name":"ci_builds_all_time_user","comment":null,"description":"Unique count of builds in project.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216175525_ci_builds.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_builds_all_time_user"},"CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":47,"name":"ci_builds_all_time_event","comment":null,"description":"Unique builds in project.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216175510_ci_builds.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_builds_all_time_event"},"CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":48,"name":"ci_runners_all_time_event","comment":null,"description":"All-time count of CI Runners ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsci_runners))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_runners_all_time_event"},"AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":49,"name":"auto_devops_enabled_all_time_event","comment":null,"description":"All-time count of Projects with auto DevOps template enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsauto_devops_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_devops_enabled_all_time_event"},"GITLAB_SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":50,"name":"gitlab_shared_runners_enabled","comment":null,"description":"Flags whether shared runners are enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#gitlab_shared_runners_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_shared_runners_enabled"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":51,"name":"container_registry_enabled","comment":null,"description":"Flags whether container registry is enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#container_registry_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_enabled"},"TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":52,"name":"template_repositories_all_time_event","comment":null,"description":"All-time total of custom project templates and projects without namespaces ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countstemplate_repositories))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"template_repositories_all_time_event"},"CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":53,"name":"ci_pipeline_config_repository_28_days_user","comment":null,"description":"Monthly count of unique users triggering pipelines from templates in repository ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyverifyci_pipeline_config_repository))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_pipeline_config_repository_28_days_user"},"USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":54,"name":"user_unique_users_all_secure_scanners_28_days_user","comment":null,"description":"Monthly count of unique users running secure CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_unique_users_all_secure_scanners))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_unique_users_all_secure_scanners_28_days_user"},"USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":55,"name":"user_sast_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running SAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_sast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_sast_jobs_28_days_user"},"USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":56,"name":"user_dast_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running DAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_dast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_dast_jobs_28_days_user"},"USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":57,"name":"user_dependency_scanning_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running dependency scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_dependency_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_dependency_scanning_jobs_28_days_user"},"USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":58,"name":"user_license_management_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running license management CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_license_management_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_license_management_jobs_28_days_user"},"USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":59,"name":"user_secret_detection_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running secret detection CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_secret_detection_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_secret_detection_jobs_28_days_user"},"USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":60,"name":"user_container_scanning_jobs_28_days_user","comment":null,"description":"Monthly count of unique users running container scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlysecureuser_container_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_container_scanning_jobs_28_days_user"},"OBJECT_STORE_PACKAGES_ENABLED":{"type":"BOOLEAN","index":61,"name":"object_store_packages_enabled","comment":null,"description":"Flags whether Object Storage is enabled for Uploads ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#object_storepackagesenabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"object_store_packages_enabled"},"PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":62,"name":"projects_with_packages_all_time_event","comment":null,"description":"All-time count of projects with package registry configured ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_with_packages))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_with_packages_all_time_event"},"PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":63,"name":"projects_with_packages_28_days_event","comment":null,"description":"Projects with package registry enabled. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181055_projects_with_packages.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_with_packages_28_days_event"},"DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":64,"name":"deployments_28_days_user","comment":null,"description":"Monthly count of unique users triggering deployments ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyreleasedeployments))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"deployments_28_days_user"},"RELEASES_28_DAYS_USER":{"type":"NUMBER","index":65,"name":"releases_28_days_user","comment":null,"description":"Monthly count of unique users authoring releases ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyreleasereleases))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"releases_28_days_user"},"EPICS_28_DAYS_USER":{"type":"NUMBER","index":66,"name":"epics_28_days_user","comment":null,"description":"Monthly count of unique users authoring epics ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanepics))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_28_days_user"},"ISSUES_28_DAYS_USER":{"type":"NUMBER","index":67,"name":"issues_28_days_user","comment":null,"description":"Monthly count of unique users authoring issues ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanissues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issues_28_days_user"},"CI_INTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":68,"name":"ci_internal_pipelines_all_time_event","comment":null,"description":"All-time count of pipelines in GitLab repositories ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsci_internal_pipelines))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_internal_pipelines_all_time_event"},"CI_EXTERNAL_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":69,"name":"ci_external_pipelines_all_time_event","comment":null,"description":"All-time count of pipelines in external repositories ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsci_external_pipelines))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_external_pipelines_all_time_event"},"MERGE_REQUESTS_ALL_TIME_EVENT":{"type":"NUMBER","index":70,"name":"merge_requests_all_time_event","comment":null,"description":"All-time count of Merge Requests ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsmerge_requests))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_requests_all_time_event"},"TODOS_ALL_TIME_EVENT":{"type":"NUMBER","index":71,"name":"todos_all_time_event","comment":null,"description":"All-time count of ToDos created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countstodos))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"todos_all_time_event"},"EPICS_ALL_TIME_EVENT":{"type":"NUMBER","index":72,"name":"epics_all_time_event","comment":null,"description":"All-time count of Epics created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsepics))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_all_time_event"},"ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":73,"name":"issues_all_time_event","comment":null,"description":"All-time count of Issues created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsissues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issues_all_time_event"},"PROJECTS_ALL_TIME_EVENT":{"type":"NUMBER","index":74,"name":"projects_all_time_event","comment":null,"description":"All-time count of Projects created ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_all_time_event"},"DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":75,"name":"deployments_28_days_event","comment":null,"description":"Monthly count of deployments ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#counts_monthlydeployments))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"deployments_28_days_event"},"PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":76,"name":"packages_28_days_event","comment":null,"description":"Monthly count of Packages ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#counts_monthlypackages))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"packages_28_days_event"},"SAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":77,"name":"sast_jobs_all_time_event","comment":null,"description":"All-time count of SAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countssast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sast_jobs_all_time_event"},"DAST_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":78,"name":"dast_jobs_all_time_event","comment":null,"description":"All-time count of DAST CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsdast_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dast_jobs_all_time_event"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":79,"name":"dependency_scanning_jobs_all_time_event","comment":null,"description":"All-time count of Dependency Scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsdependency_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dependency_scanning_jobs_all_time_event"},"LICENSE_MANAGEMENT_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":80,"name":"license_management_jobs_all_time_event","comment":null,"description":"All-time count of License Management CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countslicense_management_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_management_jobs_all_time_event"},"SECRET_DETECTION_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":81,"name":"secret_detection_jobs_all_time_event","comment":null,"description":"All-time count of Secret Detectionâ CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countssecret_detection_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"secret_detection_jobs_all_time_event"},"CONTAINER_SCANNING_JOBS_ALL_TIME_EVENT":{"type":"NUMBER","index":82,"name":"container_scanning_jobs_all_time_event","comment":null,"description":"All-time count of Container Scanning CI builds ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countscontainer_scanning_jobs))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_scanning_jobs_all_time_event"},"PROJECTS_JENKINS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":83,"name":"projects_jenkins_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Jenkins ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jenkins_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jenkins_active_all_time_event"},"PROJECTS_BAMBOO_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":84,"name":"projects_bamboo_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Bamboo CI ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_bamboo_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_bamboo_active_all_time_event"},"PROJECTS_JIRA_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":85,"name":"projects_jira_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Jira ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_active_all_time_event"},"PROJECTS_DRONE_CI_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":86,"name":"projects_drone_ci_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for Drone CI ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_drone_ci_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_drone_ci_active_all_time_event"},"PROJECTS_GITHUB_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":87,"name":"projects_github_active_all_time_event","comment":null,"description":"All-time count of projects with active integrations for GitHub ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_github_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_github_active_all_time_event"},"PROJECTS_JIRA_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":88,"name":"projects_jira_server_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Server ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_server_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_server_active_all_time_event"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":89,"name":"projects_jira_dvcs_cloud_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Cloud (DVCS Connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_dvcs_cloud_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_cloud_active_all_time_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":90,"name":"projects_with_repositories_enabled_all_time_event","comment":null,"description":"All-time count of projects with repositories enabled ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_with_repositories_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_with_repositories_enabled_all_time_event"},"PROTECTED_BRANCHES_ALL_TIME_EVENT":{"type":"NUMBER","index":91,"name":"protected_branches_all_time_event","comment":null,"description":"All-time count of protected branches ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprotected_branches))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"protected_branches_all_time_event"},"REMOTE_MIRRORS_ALL_TIME_EVENT":{"type":"NUMBER","index":92,"name":"remote_mirrors_all_time_event","comment":null,"description":"All-time count of remote mirrors ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsremote_mirrors))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"remote_mirrors_all_time_event"},"PROJECTS_ENFORCING_CODE_OWNER_APPROVAL_28_DAYS_USER":{"type":"NUMBER","index":93,"name":"projects_enforcing_code_owner_approval_28_days_user","comment":null,"description":"Monthly count of unique users creating projects that require code owner approval ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlycreateprojects_enforcing_code_owner_approval))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_enforcing_code_owner_approval_28_days_user"},"PROJECT_CLUSTERS_ENABLED_28_DAYS_USER":{"type":"NUMBER","index":94,"name":"project_clusters_enabled_28_days_user","comment":null,"description":"Monthly count of unique users using GitLab Managed enabled clusters attached to projects ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyconfigureproject_clusters_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_clusters_enabled_28_days_user"},"ANALYTICS_28_DAYS_USER":{"type":"NUMBER","index":95,"name":"analytics_28_days_user","comment":null,"description":"The number of unique users viewing any [Analytics page](https://docs.gitlab.com/ee/user/analytics/) ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#manage-manageoptimize---smau-gmau---mau-viewing-analytics-features))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"analytics_28_days_user"},"ISSUES_EDIT_28_DAYS_USER":{"type":"NUMBER","index":96,"name":"issues_edit_28_days_user","comment":null,"description":"Number of unique users interacting with an issue (open, close, reopen, adjust label, adjust milestone, adjust weight, comment) ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#plan-planproject-management---smau-paid-gmau---mau-interacting-with-issues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issues_edit_28_days_user"},"USER_PACKAGES_28_DAYS_USER":{"type":"NUMBER","index":97,"name":"user_packages_28_days_user","comment":null,"description":"The maximum distinct count of users who published a package to the Package Registry. In the future, this value will the distinct count of users across all Package AMAUs ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#packagepackage---smau-gmau---count-of-users-publishing-packages))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_packages_28_days_user"},"TERRAFORM_STATE_API_28_DAYS_USER":{"type":"NUMBER","index":98,"name":"terraform_state_api_28_days_user","comment":null,"description":"Monthly active users of GitLab Managed Terraform State ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#configureconfigure---smau-gmau---mau-of-gitlab-managed-terraform-state))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"terraform_state_api_28_days_user"},"INCIDENT_MANAGEMENT_28_DAYS_USER":{"type":"NUMBER","index":99,"name":"incident_management_28_days_user","comment":null,"description":"Unique users that interact with alerts or incidents ([source](https://about.gitlab.com/handbook/product/stage-and-group-performance-indicators/#monitormonitor---smau-gmau---unique-users-that-interact-with-alerts-and-incidents))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"incident_management_28_days_user"},"AUTO_DEVOPS_ENABLED":{"type":"BOOLEAN","index":100,"name":"auto_devops_enabled","comment":null,"description":"Flags whether auto DevOps is enabled on an instance ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#instance_auto_devops_enabled))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_devops_enabled"},"GITALY_CLUSTERS_INSTANCE":{"type":"NUMBER","index":101,"name":"gitaly_clusters_instance","comment":null,"description":"Number of GitLab Managed clusters both enabled and disabled on an instance ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#gitalyclusters))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitaly_clusters_instance"},"EPICS_DEEPEST_RELATIONSHIP_LEVEL_INSTANCE":{"type":"NUMBER","index":102,"name":"epics_deepest_relationship_level_instance","comment":null,"description":"Numeric level of the deepest relationship of all epics on an instance ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsepics_deepest_relationship_level))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_deepest_relationship_level_instance"},"CLUSTERS_APPLICATIONS_CILIUM_ALL_TIME_EVENT":{"type":"NUMBER","index":103,"name":"clusters_applications_cilium_all_time_event","comment":null,"description":"All-time total of GitLab Managed clusters with GitLab Managed App:Cilium installed ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsclusters_applications_cilium))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"clusters_applications_cilium_all_time_event"},"NETWORK_POLICY_FORWARDS_ALL_TIME_EVENT":{"type":"NUMBER","index":104,"name":"network_policy_forwards_all_time_event","comment":null,"description":"Cumulative count of packets forwarded by Cilium (Container Network Security) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsnetwork_policy_forwards))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"network_policy_forwards_all_time_event"},"NETWORK_POLICY_DROPS_ALL_TIME_EVENT":{"type":"NUMBER","index":105,"name":"network_policy_drops_all_time_event","comment":null,"description":"Cumulative count of packets dropped by Cilium (Container Network Security) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsnetwork_policy_drops))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"network_policy_drops_all_time_event"},"REQUIREMENTS_WITH_TEST_REPORT_ALL_TIME_EVENT":{"type":"NUMBER","index":106,"name":"requirements_with_test_report_all_time_event","comment":null,"description":"All-time count of requirements having a test report ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsrequirements_with_test_report))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"requirements_with_test_report_all_time_event"},"REQUIREMENT_TEST_REPORTS_CI_ALL_TIME_EVENT":{"type":"NUMBER","index":107,"name":"requirement_test_reports_ci_all_time_event","comment":null,"description":"All-time count of requirement test reports created from CI ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsrequirement_test_reports_ci))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"requirement_test_reports_ci_all_time_event"},"PROJECTS_IMPORTED_FROM_GITHUB_ALL_TIME_EVENT":{"type":"NUMBER","index":108,"name":"projects_imported_from_github_all_time_event","comment":null,"description":"All-time count of project imported from GitHub ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_imported_from_github))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_imported_from_github_all_time_event"},"PROJECTS_JIRA_CLOUD_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":109,"name":"projects_jira_cloud_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Cloud ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_cloud_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_cloud_active_all_time_event"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":110,"name":"projects_jira_dvcs_server_active_all_time_event","comment":null,"description":"All-time count of active integrations with Jira Software (DVCS connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsprojects_jira_dvcs_server_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_server_active_all_time_event"},"SERVICE_DESK_ISSUES_ALL_TIME_EVENT":{"type":"NUMBER","index":111,"name":"service_desk_issues_all_time_event","comment":null,"description":"All-time count of service desk issues ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#countsservice_desk_issues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_desk_issues_all_time_event"},"CI_PIPELINES_ALL_TIME_USER":{"type":"NUMBER","index":112,"name":"ci_pipelines_all_time_user","comment":null,"description":"All-time count of distinct Users triggering Total pipelines ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stageverifyci_pipelines))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_pipelines_all_time_user"},"SERVICE_DESK_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":113,"name":"service_desk_issues_28_days_user","comment":null,"description":"Monthly count of users opening service desk issues ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanservice_desk_issues))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_desk_issues_28_days_user"},"PROJECTS_JIRA_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":114,"name":"projects_jira_active_28_days_user","comment":null,"description":"Monthly count of users interacting with active integrations of Jira Software ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanprojects_jira_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_active_28_days_user"},"PROJECTS_JIRA_DVCS_CLOUD_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":115,"name":"projects_jira_dvcs_cloud_active_28_days_user","comment":null,"description":"Monthly count of users interacting with active integrations of Jira Cloud (DVCS connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanprojects_jira_dvcs_cloud_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_cloud_active_28_days_user"},"PROJECTS_JIRA_DVCS_SERVER_ACTIVE_28_DAYS_USER":{"type":"NUMBER","index":116,"name":"projects_jira_dvcs_server_active_28_days_user","comment":null,"description":"Monthly count of users interacting with active integrations of Jira Software (DVCS connector) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlyplanprojects_jira_dvcs_server_active))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"projects_jira_dvcs_server_active_28_days_user"},"MERGE_REQUESTS_WITH_REQUIRED_CODE_OWNERS_28_DAYS_USER":{"type":"NUMBER","index":117,"name":"merge_requests_with_required_code_owners_28_days_user","comment":null,"description":"Monthly count of users creating merge requests with required code owners ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#usage_activity_by_stage_monthlycreatemerge_requests_with_required_codeowners))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merge_requests_with_required_code_owners_28_days_user"},"ANALYTICS_VALUE_STREAM_28_DAYS_EVENT":{"type":"NUMBER","index":118,"name":"analytics_value_stream_28_days_event","comment":null,"description":"Monthly count of visits to [Value Stream Analytics](https://about.gitlab.com/stages-devops-lifecycle/value-stream-analytics/) ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersanalyticsg_analytics_valuestream_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"analytics_value_stream_28_days_event"},"CODE_REVIEW_USER_APPROVE_MR_28_DAYS_USER":{"type":"NUMBER","index":119,"name":"code_review_user_approve_mr_28_days_user","comment":null,"description":"Monthly count of users approving merge requests ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_counterscode_reviewi_code_review_user_approve_mr_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"code_review_user_approve_mr_28_days_user"},"EPICS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":120,"name":"epics_usage_28_days_user","comment":null,"description":"Monthly users count for epics_usage ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersepics_usageepics_usage_total_unique_counts_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"epics_usage_28_days_user"},"CI_TEMPLATES_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":121,"name":"ci_templates_usage_28_days_event","comment":null,"description":"Monthly count of CI templates ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersci_templatesci_templates_total_unique_counts_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ci_templates_usage_28_days_event"},"PROJECT_MANAGEMENT_ISSUE_MILESTONE_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":122,"name":"project_management_issue_milestone_changed_28_days_user","comment":null,"description":"Monthly count of MAU changing an issueâs milestone ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersissues_editg_project_management_issue_milestone_changed_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_management_issue_milestone_changed_28_days_user"},"PROJECT_MANAGEMENT_ISSUE_ITERATION_CHANGED_28_DAYS_USER":{"type":"NUMBER","index":123,"name":"project_management_issue_iteration_changed_28_days_user","comment":null,"description":"Monthly count of MAU changing an issueâs iteration ([source](https://docs.gitlab.com/ee/development/usage_ping/dictionary.html#redis_hll_countersissues_editg_project_management_issue_iteration_changed_monthly))","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_management_issue_iteration_changed_28_days_user"},"PROTECTED_BRANCHES_28_DAYS_USER":{"type":"NUMBER","index":124,"name":"protected_branches_28_days_user","comment":null,"description":"Count of users creating projects with repositories making use of at least one protected branch in last 28 days. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216182051_protected_branches.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"protected_branches_28_days_user"},"CI_CD_LEAD_TIME_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":125,"name":"ci_cd_lead_time_usage_28_days_event","comment":null,"description":"Count of unique visits to the project level CI CD Analytics lead time tab. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20211126091206_p_analytics_ci_cd_lead_time_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"ci_cd_lead_time_usage_28_days_event"},"CI_CD_DEPLOYMENT_FREQUENCY_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":126,"name":"ci_cd_deployment_frequency_usage_28_days_event","comment":null,"description":"Count of unique visits to the project level CI CD Analytics deployment frequency tab. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20211126090835_p_analytics_ci_cd_deployment_frequency_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"ci_cd_deployment_frequency_usage_28_days_event"},"PROJECTS_WITH_REPOSITORIES_ENABLED_ALL_TIME_USER":{"type":"NUMBER","index":127,"name":"projects_with_repositories_enabled_all_time_user","comment":null,"description":"Count of users creating projects that have a matching Git repository, result of a Git push action. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182023_projects_with_repositories_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_with_repositories_enabled_all_time_user"},"API_FUZZING_JOBS_USAGE_28_DAYS_USER":{"type":"NUMBER","index":128,"name":"api_fuzzing_jobs_usage_28_days_user","comment":null,"description":"Count of distinct users creating API Fuzzing jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180355_user_api_fuzzing_jobs.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"api_fuzzing_jobs_usage_28_days_user"},"COVERAGE_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":129,"name":"coverage_fuzzing_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 coverage-guided Fuzz Testing job.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180359_coverage_fuzzing_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"coverage_fuzzing_pipeline_usage_28_days_event"},"API_FUZZING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":130,"name":"api_fuzzing_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 API Fuzzing Testing job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180401_api_fuzzing_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"api_fuzzing_pipeline_usage_28_days_event"},"CONTAINER_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":131,"name":"container_scanning_pipeline_usage_28_days_event","comment":null,"description":"Pipelines containing a Container Scanning job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216175507_container_scanning_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"container_scanning_pipeline_usage_28_days_event"},"DEPENDENCY_SCANNING_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":132,"name":"dependency_scanning_pipeline_usage_28_days_event","comment":null,"description":"Count of pipelines with successful Dependency Scanning jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216175226_dependency_scanning_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dependency_scanning_pipeline_usage_28_days_event"},"SAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":133,"name":"sast_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 SAST job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216182129_sast_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"sast_pipeline_usage_28_days_event"},"SECRET_DETECTION_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":134,"name":"secret_detection_pipeline_usage_28_days_event","comment":null,"description":"Counts of Pipelines that have at least 1 Secret Detection job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216182131_secret_detection_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"secret_detection_pipeline_usage_28_days_event"},"DAST_PIPELINE_USAGE_28_DAYS_EVENT":{"type":"NUMBER","index":135,"name":"dast_pipeline_usage_28_days_event","comment":null,"description":"Count of pipelines that have at least 1 DAST job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216175618_dast_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dast_pipeline_usage_28_days_event"},"COVERAGE_FUZZING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":136,"name":"coverage_fuzzing_jobs_28_days_user","comment":null,"description":"Users who run a coverage fuzzing job. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183817_user_coverage_fuzzing_jobs.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"coverage_fuzzing_jobs_28_days_user"},"ENVIRONMENTS_ALL_TIME_EVENT":{"type":"NUMBER","index":137,"name":"environments_all_time_event","comment":null,"description":"Total available and stopped environments. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181914_environments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"environments_all_time_event"},"FEATURE_FLAGS_ALL_TIME_EVENT":{"type":"NUMBER","index":138,"name":"feature_flags_all_time_event","comment":null,"description":"Number of feature flag toggles. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181249_feature_flags.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"feature_flags_all_time_event"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":139,"name":"successful_deployments_28_days_event","comment":null,"description":"Total successful deployments. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181923_successful_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"successful_deployments_28_days_event"},"FAILED_DEPLOYMENTS_28_DAYS_EVENT":{"type":"NUMBER","index":140,"name":"failed_deployments_28_days_event","comment":null,"description":"Total failed deployments. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181924_failed_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"failed_deployments_28_days_event"},"PROJECTS_COMPLIANCE_FRAMEWORK_ALL_TIME_EVENT":{"type":"NUMBER","index":141,"name":"projects_compliance_framework_all_time_event","comment":null,"description":"Number of projects labeled with a compliance framework label. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216180825_projects_with_compliance_framework.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_compliance_framework_all_time_event"},"COMMIT_CI_CONFIG_FILE_28_DAYS_USER":{"type":"NUMBER","index":142,"name":"commit_ci_config_file_28_days_user","comment":null,"description":"Monthly unique user count doing commits which contains the CI config file.[link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216184303_o_pipeline_authoring_unique_users_committing_ciconfigfile_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"commit_ci_config_file_28_days_user"},"VIEW_AUDIT_ALL_TIME_USER":{"type":"NUMBER","index":143,"name":"view_audit_all_time_user","comment":null,"description":"Unique users who have viewed audit events. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216183906_g_compliance_audit_events.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"view_audit_all_time_user"},"DEPENDENCY_SCANNING_JOBS_ALL_TIME_USER":{"type":"NUMBER","index":144,"name":"dependency_scanning_jobs_all_time_user","comment":null,"description":"Total number of users running Dependency Scanning jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216175216_user_dependency_scanning_jobs.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dependency_scanning_jobs_all_time_user"},"ANALYTICS_DEVOPS_ADOPTION_ALL_TIME_USER":{"type":"NUMBER","index":145,"name":"analytics_devops_adoption_all_time_user","comment":null,"description":"Unique users viewing analytics devops adoption. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210423005644_i_analytics_dev_ops_adoption.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"analytics_devops_adoption_all_time_user"},"PROJECTS_IMPORTED_ALL_TIME_EVENT":{"type":"NUMBER","index":146,"name":"projects_imported_all_time_event","comment":null,"description":"Number of projects imported. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210514141520_project_imports_total.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_imported_all_time_event"},"PREFERENCES_SECURITY_DASHBOARD_28_DAYS_USER":{"type":"NUMBER","index":147,"name":"preferences_security_dashboard_28_days_user","comment":null,"description":"Users who set personal preference to see Security Dashboard on Group\n information page. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216182209_user_preferences_group_overview_security_dashboard.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"preferences_security_dashboard_28_days_user"},"WEB_IDE_EDIT_28_DAYS_USER":{"type":"NUMBER","index":148,"name":"web_ide_edit_28_days_user","comment":null,"description":"Number of unique users per month who edited a file from any web editor. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180327_action_monthly_active_users_ide_edit.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"web_ide_edit_28_days_user"},"AUTO_DEVOPS_PIPELINES_ALL_TIME_EVENT":{"type":"NUMBER","index":149,"name":"auto_devops_pipelines_all_time_event","comment":null,"description":"Total pipelines from an Auto DevOps template. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216175516_ci_pipeline_config_auto_devops.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"auto_devops_pipelines_all_time_event"},"PROJECTS_PROMETHEUS_ACTIVE_ALL_TIME_EVENT":{"type":"NUMBER","index":150,"name":"projects_prometheus_active_all_time_event","comment":null,"description":"Count of projects with active integrations for Prometheus. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216180931_projects_prometheus_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_prometheus_active_all_time_event"},"PROMETHEUS_ENABLED":{"type":"BOOLEAN","index":151,"name":"prometheus_enabled","comment":null,"description":"Whether the bundled Prometheus is enabled. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/settings/20210204124912_prometheus_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"prometheus_enabled"},"PROMETHEUS_METRICS_ENABLED":{"type":"BOOLEAN","index":152,"name":"prometheus_metrics_enabled","comment":null,"description":"Whether Prometheus Metrics endpoint is enabled. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/settings/20210204124914_prometheus_metrics_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"prometheus_metrics_enabled"},"GROUP_SAML_ENABLED":{"type":"BOOLEAN","index":153,"name":"group_saml_enabled","comment":null,"description":"Has the instance enabled Group SAML SSO `https://docs.gitlab.com/ee/user/group/saml_sso/`\n on at least 1 group? [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/settings/20210216180813_group_saml_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"group_saml_enabled"},"JIRA_ISSUE_IMPORTS_ALL_TIME_EVENT":{"type":"NUMBER","index":154,"name":"jira_issue_imports_all_time_event","comment":null,"description":"Count of projects imported from Jira. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216180654_jira.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"jira_issue_imports_all_time_event"},"AUTHOR_EPIC_ALL_TIME_USER":{"type":"NUMBER","index":155,"name":"author_epic_all_time_user","comment":null,"description":"Count distinct author ids from epics. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181134_epics.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"author_epic_all_time_user"},"AUTHOR_ISSUE_ALL_TIME_USER":{"type":"NUMBER","index":156,"name":"author_issue_all_time_user","comment":null,"description":"Count of users creating Issues. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216181115_issues.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"author_issue_all_time_user"},"FAILED_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"failed_deployments_28_days_user","comment":null,"description":"Disinct users who initiated a failed deployment. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181937_failed_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"failed_deployments_28_days_user"},"SUCCESSFUL_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":158,"name":"successful_deployments_28_days_user","comment":null,"description":"Disinct users who initiated a successful deployment. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216181941_successful_deployments.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"successful_deployments_28_days_user"},"GEO_ENABLED":{"type":"BOOLEAN","index":159,"name":"geo_enabled","comment":null,"description":"Is Geo enabled? [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/settings/20210216180406_geo_enabled.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"geo_enabled"},"AUTO_DEVOPS_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":160,"name":"auto_devops_pipelines_28_days_user","comment":null,"description":"Distinct users that ran an auto DevOps pipeline without a .gitlab-ci.yml file. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175548_ci_pipeline_config_auto_devops.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"auto_devops_pipelines_28_days_user"},"ACTIVE_INSTANCE_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"active_instance_runners_all_time_event","comment":null,"description":"Total active Shared (Instance) Runners. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210502045402_ci_runners_instance_type_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"active_instance_runners_all_time_event"},"ACTIVE_GROUP_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"active_group_runners_all_time_event","comment":null,"description":"Total active Group Runners. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210502050341_ci_runners_group_type_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"active_group_runners_all_time_event"},"ACTIVE_PROJECT_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":163,"name":"active_project_runners_all_time_event","comment":null,"description":"Total active Specific (Project) Runners. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210502050834_ci_runners_project_type_active.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"active_project_runners_all_time_event"},"GITALY_VERSION":{"type":"TEXT","index":164,"name":"gitaly_version","comment":null,"description":"Version of Gitaly. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/license/20210204124928_version.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"gitaly_version"},"GITALY_SERVERS_ALL_TIME_EVENT":{"type":"NUMBER","index":165,"name":"gitaly_servers_all_time_event","comment":null,"description":"Total Gitalty Servers. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210204124930_servers.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"gitaly_servers_all_time_event"},"API_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":166,"name":"api_fuzzing_scans_all_time_event","comment":null,"description":"Number of DAST API Fuzzing security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216180353_api_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"api_fuzzing_scans_all_time_event"},"API_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":167,"name":"api_fuzzing_scans_28_days_event","comment":null,"description":"Count of API fuzz test scans. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183838_api_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"api_fuzzing_scans_28_days_event"},"COVERAGE_FUZZING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":168,"name":"coverage_fuzzing_scans_all_time_event","comment":null,"description":"Number of Coverage Fuzzing security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216180352_coverage_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"coverage_fuzzing_scans_all_time_event"},"COVERAGE_FUZZING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":169,"name":"coverage_fuzzing_scans_28_days_event","comment":null,"description":"Number of Coverage Guided Fuzz Test security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183836_coverage_fuzzing_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"coverage_fuzzing_scans_28_days_event"},"SECRET_DETECTION_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":170,"name":"secret_detection_scans_all_time_event","comment":null,"description":"Counts secret detection jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182123_secret_detection_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"secret_detection_scans_all_time_event"},"SECRET_DETECTION_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":171,"name":"secret_detection_scans_28_days_event","comment":null,"description":"Number of Secret Detection security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210830231956_secret_detection_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"secret_detection_scans_28_days_event"},"DEPENDENCY_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":172,"name":"dependency_scanning_scans_all_time_event","comment":null,"description":"Total count of Dependency Scanning security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216175220_dependency_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dependency_scanning_scans_all_time_event"},"DEPENDENCY_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":173,"name":"dependency_scanning_scans_28_days_event","comment":null,"description":"Monthly count of Dependency Scanning security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183828_dependency_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dependency_scanning_scans_28_days_event"},"CONTAINER_SCANNING_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":174,"name":"container_scanning_scans_all_time_event","comment":null,"description":"Counts container scanning jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216175503_container_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"container_scanning_scans_all_time_event"},"CONTAINER_SCANNING_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":175,"name":"container_scanning_scans_28_days_event","comment":null,"description":"Number of Container Scanning security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210830231849_container_scanning_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"container_scanning_scans_28_days_event"},"DAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":176,"name":"dast_scans_all_time_event","comment":null,"description":"Counts dast jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182122_dast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dast_scans_all_time_event"},"DAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":177,"name":"dast_scans_28_days_event","comment":null,"description":"Number of DAST security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183832_dast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"dast_scans_28_days_event"},"SAST_SCANS_ALL_TIME_EVENT":{"type":"NUMBER","index":178,"name":"sast_scans_all_time_event","comment":null,"description":"Counts sast jobs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216182120_sast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"sast_scans_all_time_event"},"SAST_SCANS_28_DAYS_EVENT":{"type":"NUMBER","index":179,"name":"sast_scans_28_days_event","comment":null,"description":"Number of SAST security scans run. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210830231329_sast_scans.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"sast_scans_28_days_event"},"PACKAGES_PUSHED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":180,"name":"packages_pushed_registry_all_time_event","comment":null,"description":"A count of packages that have been published to the package registry\nusing a deploy token. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216183005_package_events_i_package_push_package_by_deploy_token.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"packages_pushed_registry_all_time_event"},"PACKAGES_PULLED_REGISTRY_ALL_TIME_EVENT":{"type":"NUMBER","index":181,"name":"packages_pulled_registry_all_time_event","comment":null,"description":"A count of packages that have been downloaded from the package registry\nby a guest. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_all/20210216183000_package_events_i_package_pull_package_by_guest.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"packages_pulled_registry_all_time_event"},"COMPLIANCE_DASHBOARD_VIEW_28_DAYS_USER":{"type":"NUMBER","index":182,"name":"compliance_dashboard_view_28_days_user","comment":null,"description":"Unique users who have viewed the compliance dashboard in a given month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183926_g_compliance_dashboard_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"compliance_dashboard_view_28_days_user"},"AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":183,"name":"audit_screen_view_28_days_user","comment":null,"description":"Unique users who have viewed the audit event screen in a given month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183930_g_compliance_audit_events_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"audit_screen_view_28_days_user"},"INSTANCE_AUDIT_SCREEN_VIEW_28_DAYS_USER":{"type":"NUMBER","index":184,"name":"instance_audit_screen_view_28_days_user","comment":null,"description":"Unique users that have viewed the instance-level audit events screen. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183934_i_compliance_audit_events_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"instance_audit_screen_view_28_days_user"},"CREDENTIAL_INVENTORY_VIEW_28_DAYS_USER":{"type":"NUMBER","index":185,"name":"credential_inventory_view_28_days_user","comment":null,"description":"Unique users who have viewed the credential inventory in a given month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210216183938_i_compliance_credential_inventory_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"credential_inventory_view_28_days_user"},"COMPLIANCE_FRAMEWORKS_PIPELINE_ALL_TIME_EVENT":{"type":"NUMBER","index":186,"name":"compliance_frameworks_pipeline_all_time_event","comment":null,"description":"Count of compliance frameworks that have a pipeline configuration. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210622123800_compliance_frameworks_with_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"compliance_frameworks_pipeline_all_time_event"},"COMPLIANCE_FRAMEWORKS_PIPELINE_28_DAYS_EVENT":{"type":"NUMBER","index":187,"name":"compliance_frameworks_pipeline_28_days_event","comment":null,"description":"Count of compliance frameworks that have a pipeline configuration. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210622091519_compliance_frameworks_with_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"compliance_frameworks_pipeline_28_days_event"},"GROUPS_STREAMING_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":188,"name":"groups_streaming_destinations_all_time_event","comment":null,"description":"Count of compliance frameworks that have a pipeline configuration. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210622123800_compliance_frameworks_with_pipeline.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"groups_streaming_destinations_all_time_event"},"GROUPS_STREAMING_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":189,"name":"groups_streaming_destinations_28_days_event","comment":null,"description":"Distinct count of groups with any event streaming destinations. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20211130091657_groups_with_event_streaming_destinations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"groups_streaming_destinations_28_days_event"},"AUDIT_EVENT_DESTINATIONS_ALL_TIME_EVENT":{"type":"NUMBER","index":190,"name":"audit_event_destinations_all_time_event","comment":null,"description":"Count of audit event streaming destinations. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20211130085433_g_manage_compliance_audit_event_destinations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"audit_event_destinations_all_time_event"},"AUDIT_EVENT_DESTINATIONS_28_DAYS_EVENT":{"type":"NUMBER","index":191,"name":"audit_event_destinations_28_days_event","comment":null,"description":"Count of audit event streaming destinations. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20211130085433_g_manage_compliance_audit_event_destinations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"audit_event_destinations_28_days_event"},"PROJECTS_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":192,"name":"projects_status_checks_all_time_event","comment":null,"description":"Total number of distinct projects with external status checks. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20220308162514_projects_with_external_status_checks.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_status_checks_all_time_event"},"EXTERNAL_STATUS_CHECKS_ALL_TIME_EVENT":{"type":"NUMBER","index":193,"name":"external_status_checks_all_time_event","comment":null,"description":"Total number of external status checks. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20220308155129_external_status_checks.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"external_status_checks_all_time_event"},"PAID_LICENSE_SEARCH_28_DAYS_USER":{"type":"NUMBER","index":194,"name":"paid_license_search_28_days_user","comment":null,"description":"Calculated unique users to perform a search with a paid license enabled\nby month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_all/20210216184035_i_search_paid_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"paid_license_search_28_days_user"},"LAST_ACTIVITY_28_DAYS_USER":{"type":"NUMBER","index":195,"name":"last_activity_28_days_user","comment":null,"description":"Users that have a last_activity_on date within the past 28 days. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20220621085114_unique_active_users_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"last_activity_28_days_user"},"SNIPPETS_28_DAYS_EVENT":{"type":"NUMBER","index":196,"name":"snippets_28_days_event","comment":null,"description":"Monthly count of All Snippets. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180312_snippets.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"snippets_28_days_event"},"SINGLE_FILE_EDITOR_28_DAYS_USER":{"type":"NUMBER","index":197,"name":"single_file_editor_28_days_user","comment":null,"description":"Number of users editing a file from the single file editor. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216180334_g_edit_by_sfe_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"single_file_editor_28_days_user"},"MERGE_REQUESTS_CREATED_28_DAYS_EVENT":{"type":"NUMBER","index":198,"name":"merge_requests_created_28_days_event","comment":null,"description":"Count of unique merge requests created per month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20221213182900_i_code_review_create_mr_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"merge_requests_created_28_days_event"},"MERGE_REQUESTS_CREATED_28_DAYS_USER":{"type":"NUMBER","index":199,"name":"merge_requests_created_28_days_user","comment":null,"description":"Count of unique users per month who created a MR. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/60dda716679ae92aa368633bdee597b8fa57984f/config/metrics/counts_28d/20210216175132_i_code_review_user_create_mr_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"merge_requests_created_28_days_user"},"MERGE_REQUESTS_APPROVAL_RULES_28_DAYS_EVENT":{"type":"NUMBER","index":200,"name":"merge_requests_approval_rules_28_days_event","comment":null,"description":"Count of distinct merge requests merged using approval rules. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20221211202138_merged_merge_requests_using_approval_rules_distinct.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"merge_requests_approval_rules_28_days_event"},"CUSTOM_COMPLIANCE_FRAMEWORKS_28_DAYS_EVENT":{"type":"NUMBER","index":201,"name":"custom_compliance_frameworks_28_days_event","comment":null,"description":"Monthly count of all custom compliance framework labels. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20210507165054_custom_compliance_frameworks.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"custom_compliance_frameworks_28_days_event"},"PROJECTS_SECURITY_POLICY_28_DAYS_EVENT":{"type":"NUMBER","index":202,"name":"projects_security_policy_28_days_event","comment":null,"description":"The total number of projects with an assigned security policy project. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20220927083011_distinct_count_project_id_from_security_orchestration_policy_configurations.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"projects_security_policy_28_days_event"},"MERGE_REQUESTS_SECURITY_POLICY_28_DAYS_USER":{"type":"NUMBER","index":203,"name":"merge_requests_security_policy_28_days_user","comment":null,"description":"The total number of users who have created merge requests in Projects that have an assigned security policy project. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/config/metrics/counts_28d/20220927083016_user_merge_requests_for_projects_with_security_policy_project.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"merge_requests_security_policy_28_days_user"},"PIPELINES_IMPLICIT_AUTO_DEVOPS_28_DAYS_EVENT":{"type":"NUMBER","index":204,"name":"pipelines_implicit_auto_devops_28_days_event","comment":null,"description":"Count of pipelines with implicit Auto DevOps runs. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216184458_p_ci_templates_implicit_auto_devops_monthly.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"pipelines_implicit_auto_devops_28_days_event"},"PIPELINE_SCHEDULES_28_DAYS_USER":{"type":"NUMBER","index":205,"name":"pipeline_schedules_28_days_user","comment":null,"description":"Distinct users creating pipeline schedules in a month. [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20210216175552_ci_pipeline_schedules.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"pipeline_schedules_28_days_user"},"CI_INTERNAL_PIPELINES_28_DAYS_EVENT":{"type":"NUMBER","index":206,"name":"ci_internal_pipelines_28_days_event","comment":null,"description":"Total monthly (28D) pipelines in Gitlab repositories for all project and project types [link](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/counts_28d/20230217215050_ci_internal_pipelines.yml)","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.at_least_one","short":"+","label":"dbt_utils.at_least_one({\"model\":\"{{ get_where_subquery(ref('mart_product_usage_paid_user_metrics_monthly')) }}\"})"}],"display_name":"ci_internal_pipelines_28_days_event"},"IS_LATEST_DATA":{"type":"BOOLEAN","index":207,"name":"is_latest_data","comment":null,"description":"Flags the row with the most recently received data from Usage Ping","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_latest_data"},"PRIMARY_KEY":{"type":"TEXT","index":208,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"primary_key"},"CREATED_BY":{"type":"TEXT","index":209,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":210,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":211,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":212,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":213,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":214,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"subscription_status_original":{"name":"subscription_status_original","description":"Status of the original subscription id at the time the usage ping was created. This was added to allow a status to be reported even when manual changes to Zuora subscriptions have broken the join.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_status_original"},"subscription_start_date_original":{"name":"subscription_start_date_original","description":"Date the subscription term of the orgininal subscription version started.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date_original"},"subscription_end_date_original":{"name":"subscription_end_date_original","description":"Date the subscription term of the original subscription version ended. Because of how subscription end dates are calcuated in dim_subscription_snapshot_bottom_up, this will be the same as the subscription_end_date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date_original"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:53UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1292314624,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_product_usage_paid_user_metrics_monthly","raw_sql":"$45","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_keyed_nulls","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.fct_saas_product_usage_metrics_monthly","model.gitlab_snowflake.fct_saas_product_usage_metrics_monthly","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.redis_namespace_snowplow_clicks_aggregated_workspace","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_user_based_metric_counts_namespace_monthly","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time","model.gitlab_snowflake.wk_rpt_event_based_metric_counts_namespace_all_time","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","marts","pumps","mart_product_usage_paid_user_metrics_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/pumps/mart_product_usage_paid_user_metrics_monthly.sql","original_file_path":"models/marts/pumps/mart_product_usage_paid_user_metrics_monthly.sql","name":"mart_product_usage_paid_user_metrics_monthly","alias":"mart_product_usage_paid_user_metrics_monthly","checksum":{"name":"sha256","checksum":"67062c3c1be411ee9ce263a46737105f9340e5e50f4b3bbb414dcc8b7d3ec144"},"tags":["product","mnpi_exception"],"refs":[["fct_saas_product_usage_metrics_monthly"],["fct_saas_product_usage_metrics_monthly"],["fct_ping_instance_metric_wave_monthly"],["fct_ping_instance_metric_wave_monthly"],["dim_billing_account"],["dim_billing_account"],["dim_location_country"],["dim_location_country"],["dim_subscription"],["dim_subscription"],["dim_namespace"],["dim_namespace"],["mart_charge"],["mart_charge"],["dim_date"],["dim_date"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["redis_namespace_snowplow_clicks_aggregated_workspace"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_user_based_metric_counts_namespace_monthly"],["wk_rpt_event_based_metric_counts_namespace_all_time"],["wk_rpt_event_based_metric_counts_namespace_all_time"],["dim_product_detail"],["dim_product_detail"]],"sources":[],"metrics":[],"description":"This table unions the sets of all Self-Managed and SaaS **paid users**. The data from this table will be used for Customer Product Insights.\n\nThe grain of this table is subscription per namespace || uuid-hostname per month.\n\nThe join to `dim_subscription_snapshot_bottom_up` uses a datediff of -1 day so that the `subscription_status` reflects the position at the end of the previous month. This avoids the situation where a subscription expires on the last day of the month and new one begins on the 1st of the next month meaning the join produces a NULL.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/marts/pumps/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/pumps/mart_product_usage_paid_user_metrics_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033729.5500338,"compiled_sql":"$46","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.mart_product_usage_paid_user_metrics_monthly","label":"mart_product_usage_paid_user_metrics_monthly"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"SAAS_CHARGES_WITH_NAMESPACE_ID","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":1,"name":"rate_plan_charge_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"rate_plan_charge_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":6,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"CURRENT_CUSTOMER_ID":{"type":"NUMBER","index":7,"name":"CURRENT_CUSTOMER_ID","comment":null,"display_name":"current_customer_id"},"NAMESPACE_ID":{"type":"NUMBER","index":8,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":3776000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.saas_charges_with_namespace_id","raw_sql":"$47","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_base_mrr","model.gitlab_snowflake.zuora_base_mrr","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","saas_charges_with_namespace_id"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/saas_charges_with_namespace_id.sql","original_file_path":"models/legacy/zuora/restricted_safe/saas_charges_with_namespace_id.sql","name":"saas_charges_with_namespace_id","alias":"saas_charges_with_namespace_id","checksum":{"name":"sha256","checksum":"15b909a3972a1ae028965cc91a1ad729e091cf38afe16f4dabc47da20ccd3002"},"tags":["safe"],"refs":[["zuora_base_mrr"],["zuora_base_mrr"],["customers_db_charges_xf"],["customers_db_charges_xf"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_subscription"],["dim_subscription"]],"sources":[],"metrics":[],"description":"This model joins together zuora data source with Customers App data souce and GitLab.com App data source. It allows to map when possible a `charge_id` (zuora) to a `customer_id` (customers) and then to a `namespace_id` (gitlab).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/saas_charges_with_namespace_id.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2113593,"compiled_sql":"$48","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.saas_charges_with_namespace_id","label":"saas_charges_with_namespace_id"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_ALL_TIME","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"VARIANT","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":6,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":8,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":9,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":13,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":14,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":15,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":16,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":17,"name":"ping_deployment_type","comment":null,"description":" Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":18,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":21,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":22,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":23,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":24,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":26,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":28,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":29,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":30,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":31,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":32,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":33,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":34,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":35,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":36,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":37,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":38,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":39,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":40,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":41,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":42,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":45,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":47,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":48,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":50,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":52,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":53,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":54,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":55,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":56,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"CREATED_BY":{"type":"TEXT","index":57,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:32UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":430239835136,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_all_time","raw_sql":"{{ config(\n    tags=[\"product\", \"mnpi_exception\"]\n) }}\n\n{{ macro_mart_ping_instance_metric('fct_ping_instance_metric_all_time') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.macro_mart_ping_instance_metric","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_all_time","model.gitlab_snowflake.fct_ping_instance_metric_all_time","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_all_time"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_all_time.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_all_time.sql","name":"mart_ping_instance_metric_all_time","alias":"mart_ping_instance_metric_all_time","checksum":{"name":"sha256","checksum":"6c848ea7923cb32200800cc924fc8fe9a83672bc043f4a69bb7ba64f1c2cb202"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_all_time"],["fct_ping_instance_metric_all_time"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$49","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_all_time.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.7321966,"compiled_sql":"$4a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_all_time","label":"mart_ping_instance_metric_all_time"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_SALES","name":"MART_ARR","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"arr_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"arr_month"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":3,"name":"FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"fiscal_quarter_name_fy"},"FISCAL_YEAR":{"type":"NUMBER","index":4,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":5,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":6,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":8,"name":"SOLD_TO_COUNTRY","comment":null,"display_name":"sold_to_country"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":9,"name":"billing_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"billing_account_name"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":10,"name":"billing_account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"billing_account_number"},"SSP_CHANNEL":{"type":"TEXT","index":11,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":12,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":13,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":14,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":15,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":16,"name":"crm_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":17,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":18,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":19,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":20,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":21,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND","comment":null,"display_name":"crm_account_employee_count_band"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":22,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"HEALTH_NUMBER":{"type":"FLOAT","index":23,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":24,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"PARENT_CRM_ACCOUNT_LAM":{"type":"FLOAT","index":25,"name":"PARENT_CRM_ACCOUNT_LAM","comment":null,"display_name":"parent_crm_account_lam"},"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT":{"type":"FLOAT","index":26,"name":"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT","comment":null,"display_name":"parent_crm_account_lam_dev_count"},"PARENT_CRM_ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":27,"name":"PARENT_CRM_ACCOUNT_BUSINESS_UNIT","comment":null,"display_name":"parent_crm_account_business_unit"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":28,"name":"PARENT_CRM_ACCOUNT_GEO","comment":null,"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":29,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":30,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":31,"name":"PARENT_CRM_ACCOUNT_ROLE_TYPE","comment":null,"display_name":"parent_crm_account_role_type"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":32,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":33,"name":"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE","comment":null,"display_name":"parent_crm_account_max_family_employee"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":34,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":35,"name":"PARENT_CRM_ACCOUNT_UPA_STATE","comment":null,"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":36,"name":"PARENT_CRM_ACCOUNT_UPA_CITY","comment":null,"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_STREET":{"type":"TEXT","index":37,"name":"PARENT_CRM_ACCOUNT_UPA_STREET","comment":null,"display_name":"parent_crm_account_upa_street"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":38,"name":"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE","comment":null,"display_name":"parent_crm_account_upa_postal_code"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":39,"name":"CRM_ACCOUNT_EMPLOYEE_COUNT","comment":null,"display_name":"crm_account_employee_count"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":40,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":41,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":42,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":43,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_sales_type"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":44,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":45,"name":"subscription_name_slugify","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":46,"name":"oldest_subscription_in_cohort","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":47,"name":"subscription_lineage","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_lineage"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":48,"name":"subscription_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":49,"name":"subscription_cohort_quarter","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_cohort_quarter"},"BILLING_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":50,"name":"billing_account_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_cohort_month"},"BILLING_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":51,"name":"billing_account_cohort_quarter","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_cohort_quarter"},"CRM_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":52,"name":"crm_account_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_cohort_month"},"CRM_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":53,"name":"crm_account_cohort_quarter","comment":null,"description":"The cohort month of the ultimate parent account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_cohort_quarter"},"PARENT_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":54,"name":"PARENT_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"parent_account_cohort_month"},"PARENT_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":55,"name":"parent_account_cohort_quarter","comment":null,"description":"The cohort quarter of the ultimate parent account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_account_cohort_quarter"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":56,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":57,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":58,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":59,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":60,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":61,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":62,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":63,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":64,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":65,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":66,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":67,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":68,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":69,"name":"product_tier_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":70,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":71,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"SERVICE_TYPE":{"type":"TEXT","index":72,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":73,"name":"PRODUCT_RATE_PLAN_NAME","comment":null,"display_name":"product_rate_plan_name"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":74,"name":"is_licensed_user","comment":null,"description":"Flag to identify licensed users. It works by excluding `Storage` product_tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":75,"name":"is_arpu","comment":null,"description":"Flag to identify what counts towards Annual Revenue Per User (ARPU). It works by excluding `Storage` product_tier and `EDU` product_rate_plan.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_arpu"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":76,"name":"unit_of_measure","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unit_of_measure"},"MRR":{"type":"FLOAT","index":77,"name":"mrr","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mrr"},"ARR":{"type":"FLOAT","index":78,"name":"arr","comment":null,"description":"Calculated as 12 * MRR value","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":79,"name":"quantity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"MONTHS_SINCE_BILLING_ACCOUNT_COHORT_START":{"type":"NUMBER","index":80,"name":"months_since_billing_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_billing_account_cohort_start"},"QUARTERS_SINCE_BILLING_ACCOUNT_COHORT_START":{"type":"NUMBER","index":81,"name":"quarters_since_billing_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_billing_account_cohort_start"},"MONTHS_SINCE_CRM_ACCOUNT_COHORT_START":{"type":"NUMBER","index":82,"name":"months_since_crm_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_crm_account_cohort_start"},"QUARTERS_SINCE_CRM_ACCOUNT_COHORT_START":{"type":"NUMBER","index":83,"name":"quarters_since_crm_account_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_crm_account_cohort_start"},"MONTHS_SINCE_PARENT_ACCOUNT_COHORT_START":{"type":"NUMBER","index":84,"name":"months_since_parent_account_cohort_start","comment":null,"description":"The number of months between the MRR being reported in that row and the parent account cohort month. Must be a positive number.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_parent_account_cohort_start"},"QUARTERS_SINCE_PARENT_ACCOUNT_COHORT_START":{"type":"NUMBER","index":85,"name":"quarters_since_parent_account_cohort_start","comment":null,"description":"The number of quarters between the MRR being reported in that row and the parent account cohort quarter. Must be a positive number.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_parent_account_cohort_start"},"MONTHS_SINCE_SUBSCRIPTION_COHORT_START":{"type":"NUMBER","index":86,"name":"months_since_subscription_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"months_since_subscription_cohort_start"},"QUARTERS_SINCE_SUBSCRIPTION_COHORT_START":{"type":"NUMBER","index":87,"name":"quarters_since_subscription_cohort_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarters_since_subscription_cohort_start"},"ARR_BAND_CALC":{"type":"TEXT","index":88,"name":"ARR_BAND_CALC","comment":null,"display_name":"arr_band_calc"},"CREATED_BY":{"type":"TEXT","index":89,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":90,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":91,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":92,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":93,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":94,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"is_reseller":{"name":"is_reseller","description":"Identify whether a crm_account is a reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_reseller"},"ultimate_parent_account_id":{"name":"ultimate_parent_account_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_id"},"ultimate_parent_account_name":{"name":"ultimate_parent_account_name","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_name"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":220679680,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_arr","raw_sql":"$4b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":"mart_arr","schema":"restricted_safe_common_mart_sales","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"transient":false,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_sales","fqn":["gitlab_snowflake","common_mart_sales","restricted_safe","mart_arr"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_sales/restricted_safe/mart_arr.sql","original_file_path":"models/common_mart_sales/restricted_safe/mart_arr.sql","name":"mart_arr","alias":"mart_arr","checksum":{"name":"sha256","checksum":"b24e1f80c45f4682b8930c0d897805421298e1c6da3603947e6df1cce8e22d59"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"$4c","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_sales/restricted_safe/mart_arr.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"transient":false,"alias":"mart_arr"},"created_at":1689033765.221361,"compiled_sql":"$4d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_sales.mart_arr","label":"mart_arr"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_WORKSPACE_SALES","name":"REPORT_METRICS_SUMMARY_ACCOUNT_YEAR","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"REPORT_FISCAL_YEAR":{"type":"NUMBER","index":1,"name":"REPORT_FISCAL_YEAR","comment":null,"display_name":"report_fiscal_year"},"ACCOUNT_ID":{"type":"TEXT","index":2,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"UPA_ID":{"type":"TEXT","index":4,"name":"UPA_ID","comment":null,"display_name":"upa_id"},"UPA_NAME":{"type":"TEXT","index":5,"name":"UPA_NAME","comment":null,"display_name":"upa_name"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":6,"name":"IS_KEY_ACCOUNT","comment":null,"display_name":"is_key_account"},"ABM_TIER":{"type":"TEXT","index":7,"name":"ABM_TIER","comment":null,"display_name":"abm_tier"},"ULTIMATE_PARENT_ACCOUNT_ID":{"type":"TEXT","index":8,"name":"ULTIMATE_PARENT_ACCOUNT_ID","comment":null,"display_name":"ultimate_parent_account_id"},"ACCOUNT_OWNER_NAME":{"type":"TEXT","index":9,"name":"ACCOUNT_OWNER_NAME","comment":null,"display_name":"account_owner_name"},"ACCOUNT_OWNER_ID":{"type":"TEXT","index":10,"name":"ACCOUNT_OWNER_ID","comment":null,"display_name":"account_owner_id"},"ACCOUNT_OWNER_EMPLOYEE_NUMBER":{"type":"TEXT","index":11,"name":"ACCOUNT_OWNER_EMPLOYEE_NUMBER","comment":null,"display_name":"account_owner_employee_number"},"UPA_OWNER_NAME":{"type":"TEXT","index":12,"name":"UPA_OWNER_NAME","comment":null,"display_name":"upa_owner_name"},"UPA_OWNER_ID":{"type":"TEXT","index":13,"name":"UPA_OWNER_ID","comment":null,"display_name":"upa_owner_id"},"UPA_OWNER_TITLE_CATEGORY":{"type":"TEXT","index":14,"name":"UPA_OWNER_TITLE_CATEGORY","comment":null,"display_name":"upa_owner_title_category"},"UPA_OWNER_EMPLOYEE_NUMBER":{"type":"TEXT","index":15,"name":"UPA_OWNER_EMPLOYEE_NUMBER","comment":null,"display_name":"upa_owner_employee_number"},"ACCOUNT_COUNTRY":{"type":"TEXT","index":16,"name":"ACCOUNT_COUNTRY","comment":null,"display_name":"account_country"},"ACCOUNT_ZIP_CODE":{"type":"TEXT","index":17,"name":"ACCOUNT_ZIP_CODE","comment":null,"display_name":"account_zip_code"},"ACCOUNT_STATE":{"type":"TEXT","index":18,"name":"ACCOUNT_STATE","comment":null,"display_name":"account_state"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":19,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":20,"name":"PARENT_CRM_ACCOUNT_GEO","comment":null,"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":21,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":22,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"CRM_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":23,"name":"CRM_ACCOUNT_BILLING_COUNTRY","comment":null,"display_name":"crm_account_billing_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":24,"name":"PARENT_CRM_ACCOUNT_UPA_STATE","comment":null,"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":25,"name":"PARENT_CRM_ACCOUNT_UPA_CITY","comment":null,"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":26,"name":"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE","comment":null,"display_name":"parent_crm_account_upa_postal_code"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":27,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"ACCOUNT_USER_GEO":{"type":"TEXT","index":28,"name":"ACCOUNT_USER_GEO","comment":null,"display_name":"account_user_geo"},"ACCOUNT_USER_REGION":{"type":"TEXT","index":29,"name":"ACCOUNT_USER_REGION","comment":null,"display_name":"account_user_region"},"ACCOUNT_USER_SEGMENT":{"type":"TEXT","index":30,"name":"ACCOUNT_USER_SEGMENT","comment":null,"display_name":"account_user_segment"},"ACCOUNT_USER_AREA":{"type":"TEXT","index":31,"name":"ACCOUNT_USER_AREA","comment":null,"display_name":"account_user_area"},"ACCOUNT_OWNER_ROLE":{"type":"TEXT","index":32,"name":"ACCOUNT_OWNER_ROLE","comment":null,"display_name":"account_owner_role"},"ACCOUNT_OWNER_TITLE_CATEGORY":{"type":"TEXT","index":33,"name":"ACCOUNT_OWNER_TITLE_CATEGORY","comment":null,"display_name":"account_owner_title_category"},"ACCOUNT_INDUSTRY":{"type":"TEXT","index":34,"name":"ACCOUNT_INDUSTRY","comment":null,"display_name":"account_industry"},"UPA_USER_GEO":{"type":"TEXT","index":35,"name":"UPA_USER_GEO","comment":null,"display_name":"upa_user_geo"},"UPA_USER_REGION":{"type":"TEXT","index":36,"name":"UPA_USER_REGION","comment":null,"display_name":"upa_user_region"},"UPA_USER_SEGMENT":{"type":"TEXT","index":37,"name":"UPA_USER_SEGMENT","comment":null,"display_name":"upa_user_segment"},"UPA_USER_AREA":{"type":"TEXT","index":38,"name":"UPA_USER_AREA","comment":null,"display_name":"upa_user_area"},"UPA_USER_ROLE":{"type":"TEXT","index":39,"name":"UPA_USER_ROLE","comment":null,"display_name":"upa_user_role"},"UPA_INDUSTRY":{"type":"TEXT","index":40,"name":"UPA_INDUSTRY","comment":null,"display_name":"upa_industry"},"POTENTIAL_USERS":{"type":"FLOAT","index":41,"name":"POTENTIAL_USERS","comment":null,"display_name":"potential_users"},"LICENSES":{"type":"FLOAT","index":42,"name":"LICENSES","comment":null,"display_name":"licenses"},"LINKEDIN_DEVELOPER":{"type":"FLOAT","index":43,"name":"LINKEDIN_DEVELOPER","comment":null,"display_name":"linkedin_developer"},"ZI_DEVELOPERS":{"type":"FLOAT","index":44,"name":"ZI_DEVELOPERS","comment":null,"display_name":"zi_developers"},"ZI_REVENUE":{"type":"FLOAT","index":45,"name":"ZI_REVENUE","comment":null,"display_name":"zi_revenue"},"UPA_LAM_DEV_COUNT":{"type":"FLOAT","index":46,"name":"UPA_LAM_DEV_COUNT","comment":null,"display_name":"upa_lam_dev_count"},"PUBLIC_SECTOR_ACCOUNT_FLAG":{"type":"BOOLEAN","index":47,"name":"PUBLIC_SECTOR_ACCOUNT_FLAG","comment":null,"display_name":"public_sector_account_flag"},"PUBSEC_TYPE":{"type":"TEXT","index":48,"name":"PUBSEC_TYPE","comment":null,"display_name":"pubsec_type"},"POTENTIAL_LAM_ARR":{"type":"FLOAT","index":49,"name":"POTENTIAL_LAM_ARR","comment":null,"display_name":"potential_lam_arr"},"EMPLOYEES":{"type":"FLOAT","index":50,"name":"EMPLOYEES","comment":null,"display_name":"employees"},"ACCOUNT_FAMILY_ARR":{"type":"FLOAT","index":51,"name":"ACCOUNT_FAMILY_ARR","comment":null,"display_name":"account_family_arr"},"CALCULATED_DEVELOPER_COUNT":{"type":"FLOAT","index":52,"name":"CALCULATED_DEVELOPER_COUNT","comment":null,"display_name":"calculated_developer_count"},"CUSTOMER_SCORE":{"type":"FLOAT","index":53,"name":"CUSTOMER_SCORE","comment":null,"display_name":"customer_score"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":54,"name":"TECHNICAL_ACCOUNT_MANAGER_DATE","comment":null,"display_name":"technical_account_manager_date"},"TECHNICAL_ACCOUNT_MANAGER_NAME":{"type":"TEXT","index":55,"name":"TECHNICAL_ACCOUNT_MANAGER_NAME","comment":null,"display_name":"technical_account_manager_name"},"HAS_TECHNICAL_ACCOUNT_MANAGER_FLAG":{"type":"NUMBER","index":56,"name":"HAS_TECHNICAL_ACCOUNT_MANAGER_FLAG","comment":null,"display_name":"has_technical_account_manager_flag"},"ACCOUNT_HEALTH_SCORE_COLOR":{"type":"TEXT","index":57,"name":"ACCOUNT_HEALTH_SCORE_COLOR","comment":null,"display_name":"account_health_score_color"},"ACCOUNT_HEALTH_NUMBER":{"type":"FLOAT","index":58,"name":"ACCOUNT_HEALTH_NUMBER","comment":null,"display_name":"account_health_number"},"FY_ATR":{"type":"FLOAT","index":59,"name":"FY_ATR","comment":null,"display_name":"fy_atr"},"NFY_ATR":{"type":"FLOAT","index":60,"name":"NFY_ATR","comment":null,"display_name":"nfy_atr"},"NFY_Q1_ATR":{"type":"FLOAT","index":61,"name":"NFY_Q1_ATR","comment":null,"display_name":"nfy_q1_atr"},"NFY_Q2_ATR":{"type":"FLOAT","index":62,"name":"NFY_Q2_ATR","comment":null,"display_name":"nfy_q2_atr"},"NFY_Q3_ATR":{"type":"FLOAT","index":63,"name":"NFY_Q3_ATR","comment":null,"display_name":"nfy_q3_atr"},"NFY_Q4_ATR":{"type":"FLOAT","index":64,"name":"NFY_Q4_ATR","comment":null,"display_name":"nfy_q4_atr"},"LAST_12M_ATR":{"type":"FLOAT","index":65,"name":"LAST_12M_ATR","comment":null,"display_name":"last_12m_atr"},"ARR":{"type":"FLOAT","index":66,"name":"ARR","comment":null,"display_name":"arr"},"ARR_CHANNEL":{"type":"FLOAT","index":67,"name":"ARR_CHANNEL","comment":null,"display_name":"arr_channel"},"ARR_DIRECT":{"type":"FLOAT","index":68,"name":"ARR_DIRECT","comment":null,"display_name":"arr_direct"},"PRODUCT_STARTER_ARR":{"type":"FLOAT","index":69,"name":"PRODUCT_STARTER_ARR","comment":null,"display_name":"product_starter_arr"},"PRODUCT_PREMIUM_ARR":{"type":"FLOAT","index":70,"name":"PRODUCT_PREMIUM_ARR","comment":null,"display_name":"product_premium_arr"},"PRODUCT_ULTIMATE_ARR":{"type":"FLOAT","index":71,"name":"PRODUCT_ULTIMATE_ARR","comment":null,"display_name":"product_ultimate_arr"},"IS_ULTIMATE_CUSTOMER_FLAG":{"type":"NUMBER","index":72,"name":"IS_ULTIMATE_CUSTOMER_FLAG","comment":null,"display_name":"is_ultimate_customer_flag"},"IS_PREMIUM_CUSTOMER_FLAG":{"type":"NUMBER","index":73,"name":"IS_PREMIUM_CUSTOMER_FLAG","comment":null,"display_name":"is_premium_customer_flag"},"DELIVERY_SELF_MANAGED_ARR":{"type":"FLOAT","index":74,"name":"DELIVERY_SELF_MANAGED_ARR","comment":null,"display_name":"delivery_self_managed_arr"},"DELIVERY_SAAS_ARR":{"type":"FLOAT","index":75,"name":"DELIVERY_SAAS_ARR","comment":null,"display_name":"delivery_saas_arr"},"IS_PROSPECT_FLAG":{"type":"NUMBER","index":76,"name":"IS_PROSPECT_FLAG","comment":null,"display_name":"is_prospect_flag"},"IS_CUSTOMER_FLAG":{"type":"NUMBER","index":77,"name":"IS_CUSTOMER_FLAG","comment":null,"display_name":"is_customer_flag"},"IS_OVER_5K_CUSTOMER_FLAG":{"type":"NUMBER","index":78,"name":"IS_OVER_5K_CUSTOMER_FLAG","comment":null,"display_name":"is_over_5k_customer_flag"},"IS_OVER_10K_CUSTOMER_FLAG":{"type":"NUMBER","index":79,"name":"IS_OVER_10K_CUSTOMER_FLAG","comment":null,"display_name":"is_over_10k_customer_flag"},"IS_OVER_50K_CUSTOMER_FLAG":{"type":"NUMBER","index":80,"name":"IS_OVER_50K_CUSTOMER_FLAG","comment":null,"display_name":"is_over_50k_customer_flag"},"IS_OVER_100K_CUSTOMER_FLAG":{"type":"NUMBER","index":81,"name":"IS_OVER_100K_CUSTOMER_FLAG","comment":null,"display_name":"is_over_100k_customer_flag"},"IS_OVER_500K_CUSTOMER_FLAG":{"type":"NUMBER","index":82,"name":"IS_OVER_500K_CUSTOMER_FLAG","comment":null,"display_name":"is_over_500k_customer_flag"},"LAST_12M_BOOKED_NET_ARR":{"type":"FLOAT","index":83,"name":"LAST_12M_BOOKED_NET_ARR","comment":null,"display_name":"last_12m_booked_net_arr"},"LAST_12M_BOOKED_NON_WEB_NET_ARR":{"type":"FLOAT","index":84,"name":"LAST_12M_BOOKED_NON_WEB_NET_ARR","comment":null,"display_name":"last_12m_booked_non_web_net_arr"},"LAST_12M_BOOKED_WEB_DIRECT_SOURCED_NET_ARR":{"type":"FLOAT","index":85,"name":"LAST_12M_BOOKED_WEB_DIRECT_SOURCED_NET_ARR","comment":null,"display_name":"last_12m_booked_web_direct_sourced_net_arr"},"LAST_12M_BOOKED_CHANNEL_SOURCED_NET_ARR":{"type":"FLOAT","index":86,"name":"LAST_12M_BOOKED_CHANNEL_SOURCED_NET_ARR","comment":null,"display_name":"last_12m_booked_channel_sourced_net_arr"},"LAST_12M_BOOKED_SDR_SOURCED_NET_ARR":{"type":"FLOAT","index":87,"name":"LAST_12M_BOOKED_SDR_SOURCED_NET_ARR","comment":null,"display_name":"last_12m_booked_sdr_sourced_net_arr"},"LAST_12M_BOOKED_AE_SOURCED_NET_ARR":{"type":"FLOAT","index":88,"name":"LAST_12M_BOOKED_AE_SOURCED_NET_ARR","comment":null,"display_name":"last_12m_booked_ae_sourced_net_arr"},"LAST_12M_BOOKED_CHURN_CONTRACTION_NET_ARR":{"type":"FLOAT","index":89,"name":"LAST_12M_BOOKED_CHURN_CONTRACTION_NET_ARR","comment":null,"display_name":"last_12m_booked_churn_contraction_net_arr"},"LAST_12M_BOOKED_FO_NET_ARR":{"type":"FLOAT","index":90,"name":"LAST_12M_BOOKED_FO_NET_ARR","comment":null,"display_name":"last_12m_booked_fo_net_arr"},"LAST_12M_BOOKED_NEW_CONNECTED_NET_ARR":{"type":"FLOAT","index":91,"name":"LAST_12M_BOOKED_NEW_CONNECTED_NET_ARR","comment":null,"display_name":"last_12m_booked_new_connected_net_arr"},"LAST_12M_BOOKED_GROWTH_NET_ARR":{"type":"FLOAT","index":92,"name":"LAST_12M_BOOKED_GROWTH_NET_ARR","comment":null,"display_name":"last_12m_booked_growth_net_arr"},"LAST_12M_BOOKED_DEAL_COUNT":{"type":"NUMBER","index":93,"name":"LAST_12M_BOOKED_DEAL_COUNT","comment":null,"display_name":"last_12m_booked_deal_count"},"LAST_12M_BOOKED_DIRECT_NET_ARR":{"type":"FLOAT","index":94,"name":"LAST_12M_BOOKED_DIRECT_NET_ARR","comment":null,"display_name":"last_12m_booked_direct_net_arr"},"LAST_12M_BOOKED_CHANNEL_NET_ARR":{"type":"FLOAT","index":95,"name":"LAST_12M_BOOKED_CHANNEL_NET_ARR","comment":null,"display_name":"last_12m_booked_channel_net_arr"},"LAST_12M_BOOKED_CHANNEL_CO_SELL_NET_ARR":{"type":"FLOAT","index":96,"name":"LAST_12M_BOOKED_CHANNEL_CO_SELL_NET_ARR","comment":null,"display_name":"last_12m_booked_channel_co_sell_net_arr"},"LAST_12M_BOOKED_DIRECT_DEAL_COUNT":{"type":"NUMBER","index":97,"name":"LAST_12M_BOOKED_DIRECT_DEAL_COUNT","comment":null,"display_name":"last_12m_booked_direct_deal_count"},"LAST_12M_BOOKED_CHANNEL_DEAL_COUNT":{"type":"NUMBER","index":98,"name":"LAST_12M_BOOKED_CHANNEL_DEAL_COUNT","comment":null,"display_name":"last_12m_booked_channel_deal_count"},"LAST_12M_BOOKED_CHURN_CONTRACTION_DEAL_COUNT":{"type":"NUMBER","index":99,"name":"LAST_12M_BOOKED_CHURN_CONTRACTION_DEAL_COUNT","comment":null,"display_name":"last_12m_booked_churn_contraction_deal_count"},"LAST_12M_BOOKED_RENEWAL_DEAL_COUNT":{"type":"NUMBER","index":100,"name":"LAST_12M_BOOKED_RENEWAL_DEAL_COUNT","comment":null,"display_name":"last_12m_booked_renewal_deal_count"},"LAST_12M_BOOKED_TRX_COUNT":{"type":"NUMBER","index":101,"name":"LAST_12M_BOOKED_TRX_COUNT","comment":null,"display_name":"last_12m_booked_trx_count"},"LAST_12M_BOOKED_TRX_OVER_5K_COUNT":{"type":"NUMBER","index":102,"name":"LAST_12M_BOOKED_TRX_OVER_5K_COUNT","comment":null,"display_name":"last_12m_booked_trx_over_5k_count"},"LAST_12M_BOOKED_TRX_OVER_10K_COUNT":{"type":"NUMBER","index":103,"name":"LAST_12M_BOOKED_TRX_OVER_10K_COUNT","comment":null,"display_name":"last_12m_booked_trx_over_10k_count"},"LAST_12M_BOOKED_TRX_OVER_50K_COUNT":{"type":"NUMBER","index":104,"name":"LAST_12M_BOOKED_TRX_OVER_50K_COUNT","comment":null,"display_name":"last_12m_booked_trx_over_50k_count"},"FY_BOOKED_NET_ARR":{"type":"FLOAT","index":105,"name":"FY_BOOKED_NET_ARR","comment":null,"display_name":"fy_booked_net_arr"},"FY_BOOKED_WEB_DIRECT_SOURCED_NET_ARR":{"type":"FLOAT","index":106,"name":"FY_BOOKED_WEB_DIRECT_SOURCED_NET_ARR","comment":null,"display_name":"fy_booked_web_direct_sourced_net_arr"},"FY_BOOKED_CHANNEL_SOURCED_NET_ARR":{"type":"FLOAT","index":107,"name":"FY_BOOKED_CHANNEL_SOURCED_NET_ARR","comment":null,"display_name":"fy_booked_channel_sourced_net_arr"},"FY_BOOKED_SDR_SOURCED_NET_ARR":{"type":"FLOAT","index":108,"name":"FY_BOOKED_SDR_SOURCED_NET_ARR","comment":null,"display_name":"fy_booked_sdr_sourced_net_arr"},"FY_BOOKED_AE_SOURCED_NET_ARR":{"type":"FLOAT","index":109,"name":"FY_BOOKED_AE_SOURCED_NET_ARR","comment":null,"display_name":"fy_booked_ae_sourced_net_arr"},"FY_BOOKED_CHURN_CONTRACTION_NET_ARR":{"type":"FLOAT","index":110,"name":"FY_BOOKED_CHURN_CONTRACTION_NET_ARR","comment":null,"display_name":"fy_booked_churn_contraction_net_arr"},"FY_BOOKED_FO_NET_ARR":{"type":"FLOAT","index":111,"name":"FY_BOOKED_FO_NET_ARR","comment":null,"display_name":"fy_booked_fo_net_arr"},"FY_BOOKED_NEW_CONNECTED_NET_ARR":{"type":"FLOAT","index":112,"name":"FY_BOOKED_NEW_CONNECTED_NET_ARR","comment":null,"display_name":"fy_booked_new_connected_net_arr"},"FY_BOOKED_GROWTH_NET_ARR":{"type":"FLOAT","index":113,"name":"FY_BOOKED_GROWTH_NET_ARR","comment":null,"display_name":"fy_booked_growth_net_arr"},"FY_BOOKED_DEAL_COUNT":{"type":"NUMBER","index":114,"name":"FY_BOOKED_DEAL_COUNT","comment":null,"display_name":"fy_booked_deal_count"},"FY_BOOKED_DIRECT_NET_ARR":{"type":"FLOAT","index":115,"name":"FY_BOOKED_DIRECT_NET_ARR","comment":null,"display_name":"fy_booked_direct_net_arr"},"FY_BOOKED_CHANNEL_NET_ARR":{"type":"FLOAT","index":116,"name":"FY_BOOKED_CHANNEL_NET_ARR","comment":null,"display_name":"fy_booked_channel_net_arr"},"FY_BOOKED_DIRECT_DEAL_COUNT":{"type":"NUMBER","index":117,"name":"FY_BOOKED_DIRECT_DEAL_COUNT","comment":null,"display_name":"fy_booked_direct_deal_count"},"FY_BOOKED_CHANNEL_DEAL_COUNT":{"type":"NUMBER","index":118,"name":"FY_BOOKED_CHANNEL_DEAL_COUNT","comment":null,"display_name":"fy_booked_channel_deal_count"},"TOTAL_OPEN_PIPE":{"type":"FLOAT","index":119,"name":"TOTAL_OPEN_PIPE","comment":null,"display_name":"total_open_pipe"},"TOTAL_COUNT_OPEN_DEALS_PIPE":{"type":"NUMBER","index":120,"name":"TOTAL_COUNT_OPEN_DEALS_PIPE","comment":null,"display_name":"total_count_open_deals_pipe"},"NFY_OPEN_PIPELINE":{"type":"FLOAT","index":121,"name":"NFY_OPEN_PIPELINE","comment":null,"display_name":"nfy_open_pipeline"},"FY_OPEN_PIPELINE":{"type":"FLOAT","index":122,"name":"FY_OPEN_PIPELINE","comment":null,"display_name":"fy_open_pipeline"},"NFY_COUNT_OPEN_DEALS":{"type":"FLOAT","index":123,"name":"NFY_COUNT_OPEN_DEALS","comment":null,"display_name":"nfy_count_open_deals"},"FY_COUNT_OPEN_DEALS":{"type":"FLOAT","index":124,"name":"FY_COUNT_OPEN_DEALS","comment":null,"display_name":"fy_count_open_deals"},"CUSTOMER_HAS_OPEN_PIPE_FLAG":{"type":"NUMBER","index":125,"name":"CUSTOMER_HAS_OPEN_PIPE_FLAG","comment":null,"display_name":"customer_has_open_pipe_flag"},"PROSPECT_HAS_OPEN_PIPE_FLAG":{"type":"NUMBER","index":126,"name":"PROSPECT_HAS_OPEN_PIPE_FLAG","comment":null,"display_name":"prospect_has_open_pipe_flag"},"PG_YTD_NET_ARR":{"type":"FLOAT","index":127,"name":"PG_YTD_NET_ARR","comment":null,"display_name":"pg_ytd_net_arr"},"PG_YTD_WEB_DIRECT_SOURCED_NET_ARR":{"type":"FLOAT","index":128,"name":"PG_YTD_WEB_DIRECT_SOURCED_NET_ARR","comment":null,"display_name":"pg_ytd_web_direct_sourced_net_arr"},"PG_YTD_CHANNEL_SOURCED_NET_ARR":{"type":"FLOAT","index":129,"name":"PG_YTD_CHANNEL_SOURCED_NET_ARR","comment":null,"display_name":"pg_ytd_channel_sourced_net_arr"},"PG_YTD_SDR_SOURCED_NET_ARR":{"type":"FLOAT","index":130,"name":"PG_YTD_SDR_SOURCED_NET_ARR","comment":null,"display_name":"pg_ytd_sdr_sourced_net_arr"},"PG_YTD_AE_SOURCED_NET_ARR":{"type":"FLOAT","index":131,"name":"PG_YTD_AE_SOURCED_NET_ARR","comment":null,"display_name":"pg_ytd_ae_sourced_net_arr"},"PG_LAST_12M_NET_ARR":{"type":"FLOAT","index":132,"name":"PG_LAST_12M_NET_ARR","comment":null,"display_name":"pg_last_12m_net_arr"},"PG_LAST_12M_WEB_DIRECT_SOURCED_NET_ARR":{"type":"FLOAT","index":133,"name":"PG_LAST_12M_WEB_DIRECT_SOURCED_NET_ARR","comment":null,"display_name":"pg_last_12m_web_direct_sourced_net_arr"},"PG_LAST_12M_CHANNEL_SOURCED_NET_ARR":{"type":"FLOAT","index":134,"name":"PG_LAST_12M_CHANNEL_SOURCED_NET_ARR","comment":null,"display_name":"pg_last_12m_channel_sourced_net_arr"},"PG_LAST_12M_SDR_SOURCED_NET_ARR":{"type":"FLOAT","index":135,"name":"PG_LAST_12M_SDR_SOURCED_NET_ARR","comment":null,"display_name":"pg_last_12m_sdr_sourced_net_arr"},"PG_LAST_12M_AE_SOURCED_NET_ARR":{"type":"FLOAT","index":136,"name":"PG_LAST_12M_AE_SOURCED_NET_ARR","comment":null,"display_name":"pg_last_12m_ae_sourced_net_arr"},"PG_LAST_12M_WEB_DIRECT_SOURCED_DEAL_COUNT":{"type":"NUMBER","index":137,"name":"PG_LAST_12M_WEB_DIRECT_SOURCED_DEAL_COUNT","comment":null,"display_name":"pg_last_12m_web_direct_sourced_deal_count"},"PG_LAST_12M_CHANNEL_SOURCED_DEAL_COUNT":{"type":"NUMBER","index":138,"name":"PG_LAST_12M_CHANNEL_SOURCED_DEAL_COUNT","comment":null,"display_name":"pg_last_12m_channel_sourced_deal_count"},"PG_LAST_12M_SDR_SOURCED_DEAL_COUNT":{"type":"NUMBER","index":139,"name":"PG_LAST_12M_SDR_SOURCED_DEAL_COUNT","comment":null,"display_name":"pg_last_12m_sdr_sourced_deal_count"},"PG_LAST_12M_AE_SOURCED_DEAL_COUNT":{"type":"NUMBER","index":140,"name":"PG_LAST_12M_AE_SOURCED_DEAL_COUNT","comment":null,"display_name":"pg_last_12m_ae_sourced_deal_count"},"LAST_12M_SAO_DEAL_COUNT":{"type":"NUMBER","index":141,"name":"LAST_12M_SAO_DEAL_COUNT","comment":null,"display_name":"last_12m_sao_deal_count"},"LAST_12M_SAO_NET_ARR":{"type":"FLOAT","index":142,"name":"LAST_12M_SAO_NET_ARR","comment":null,"display_name":"last_12m_sao_net_arr"},"LAST_12M_SAO_BOOKED_NET_ARR":{"type":"FLOAT","index":143,"name":"LAST_12M_SAO_BOOKED_NET_ARR","comment":null,"display_name":"last_12m_sao_booked_net_arr"},"FY_SAO_DEAL_COUNT":{"type":"NUMBER","index":144,"name":"FY_SAO_DEAL_COUNT","comment":null,"display_name":"fy_sao_deal_count"},"FY_SAO_NET_ARR":{"type":"FLOAT","index":145,"name":"FY_SAO_NET_ARR","comment":null,"display_name":"fy_sao_net_arr"},"FY_SAO_BOOKED_NET_ARR":{"type":"FLOAT","index":146,"name":"FY_SAO_BOOKED_NET_ARR","comment":null,"display_name":"fy_sao_booked_net_arr"},"LAM_DEV_COUNT_BIN_NAME":{"type":"TEXT","index":147,"name":"LAM_DEV_COUNT_BIN_NAME","comment":null,"display_name":"lam_dev_count_bin_name"},"LAM_DEV_COUNT_BIN_RANK":{"type":"NUMBER","index":148,"name":"LAM_DEV_COUNT_BIN_RANK","comment":null,"display_name":"lam_dev_count_bin_rank"},"SECTOR_TYPE":{"type":"TEXT","index":149,"name":"SECTOR_TYPE","comment":null,"display_name":"sector_type"},"IS_PUBLIC_SECTOR_FLAG":{"type":"NUMBER","index":150,"name":"IS_PUBLIC_SECTOR_FLAG","comment":null,"display_name":"is_public_sector_flag"},"ACCOUNT_FAMILY_ARR_BIN_NAME":{"type":"TEXT","index":151,"name":"ACCOUNT_FAMILY_ARR_BIN_NAME","comment":null,"display_name":"account_family_arr_bin_name"},"UPA_POTENTIAL_USERS":{"type":"FLOAT","index":152,"name":"UPA_POTENTIAL_USERS","comment":null,"display_name":"upa_potential_users"},"UPA_LICENSES":{"type":"FLOAT","index":153,"name":"UPA_LICENSES","comment":null,"display_name":"upa_licenses"},"UPA_LINKEDIN_DEVELOPER":{"type":"FLOAT","index":154,"name":"UPA_LINKEDIN_DEVELOPER","comment":null,"display_name":"upa_linkedin_developer"},"UPA_ZI_DEVELOPERS":{"type":"FLOAT","index":155,"name":"UPA_ZI_DEVELOPERS","comment":null,"display_name":"upa_zi_developers"},"UPA_ZI_REVENUE":{"type":"FLOAT","index":156,"name":"UPA_ZI_REVENUE","comment":null,"display_name":"upa_zi_revenue"},"UPA_EMPLOYEES":{"type":"FLOAT","index":157,"name":"UPA_EMPLOYEES","comment":null,"display_name":"upa_employees"},"UPA_COUNT_OF_CUSTOMERS":{"type":"NUMBER","index":158,"name":"UPA_COUNT_OF_CUSTOMERS","comment":null,"display_name":"upa_count_of_customers"},"IS_UPA_FLAG":{"type":"NUMBER","index":159,"name":"IS_UPA_FLAG","comment":null,"display_name":"is_upa_flag"},"HIERARCHY_IS_CUSTOMER_FLAG":{"type":"NUMBER","index":160,"name":"HIERARCHY_IS_CUSTOMER_FLAG","comment":null,"display_name":"hierarchy_is_customer_flag"},"VIRTUAL_UPA_ID":{"type":"TEXT","index":161,"name":"VIRTUAL_UPA_ID","comment":null,"display_name":"virtual_upa_id"},"VIRTUAL_UPA_NAME":{"type":"TEXT","index":162,"name":"VIRTUAL_UPA_NAME","comment":null,"display_name":"virtual_upa_name"},"VIRTUAL_UPA_AD_SEGMENT":{"type":"TEXT","index":163,"name":"VIRTUAL_UPA_AD_SEGMENT","comment":null,"display_name":"virtual_upa_ad_segment"},"VIRTUAL_UPA_GEO":{"type":"TEXT","index":164,"name":"VIRTUAL_UPA_GEO","comment":null,"display_name":"virtual_upa_geo"},"VIRTUAL_UPA_REGION":{"type":"TEXT","index":165,"name":"VIRTUAL_UPA_REGION","comment":null,"display_name":"virtual_upa_region"},"VIRTUAL_UPA_AREA":{"type":"TEXT","index":166,"name":"VIRTUAL_UPA_AREA","comment":null,"display_name":"virtual_upa_area"},"VIRTUAL_UPA_AD_COUNTRY":{"type":"TEXT","index":167,"name":"VIRTUAL_UPA_AD_COUNTRY","comment":null,"display_name":"virtual_upa_ad_country"},"VIRTUAL_UPA_AD_STATE":{"type":"TEXT","index":168,"name":"VIRTUAL_UPA_AD_STATE","comment":null,"display_name":"virtual_upa_ad_state"},"VIRTUAL_UPA_AD_ZIP_CODE":{"type":"TEXT","index":169,"name":"VIRTUAL_UPA_AD_ZIP_CODE","comment":null,"display_name":"virtual_upa_ad_zip_code"},"VIRTUAL_UPA_INDUSTRY":{"type":"TEXT","index":170,"name":"VIRTUAL_UPA_INDUSTRY","comment":null,"display_name":"virtual_upa_industry"},"VIRTUAL_UPA_OWNER_NAME":{"type":"TEXT","index":171,"name":"VIRTUAL_UPA_OWNER_NAME","comment":null,"display_name":"virtual_upa_owner_name"},"VIRTUAL_UPA_OWNER_TITLE_CATEGORY":{"type":"TEXT","index":172,"name":"VIRTUAL_UPA_OWNER_TITLE_CATEGORY","comment":null,"display_name":"virtual_upa_owner_title_category"},"VIRTUAL_UPA_OWNER_ID":{"type":"TEXT","index":173,"name":"VIRTUAL_UPA_OWNER_ID","comment":null,"display_name":"virtual_upa_owner_id"},"VIRTUAL_UPA_TYPE":{"type":"TEXT","index":174,"name":"VIRTUAL_UPA_TYPE","comment":null,"display_name":"virtual_upa_type"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-05 19:19UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":150163456,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.wk_sales_report_metrics_summary_account_year","raw_sql":"$4e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.salesforce.account","model.gitlab_snowflake.wk_sales_date_details","model.gitlab_snowflake.wk_sales_date_details","model.gitlab_snowflake.wk_sales_sfdc_opportunity_xf","model.gitlab_snowflake.wk_sales_sfdc_opportunity_xf","model.gitlab_snowflake.wk_sales_sfdc_opportunity_snapshot_history_xf","model.gitlab_snowflake.wk_sales_sfdc_opportunity_snapshot_history_xf","model.gitlab_snowflake.mart_available_to_renew","model.gitlab_snowflake.mart_available_to_renew","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.mart_arr","model.gitlab_snowflake.mart_arr","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.mart_crm_account","model.gitlab_snowflake.mart_crm_account","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.wk_sales_sfdc_users_xf","model.gitlab_snowflake.wk_sales_sfdc_users_xf"]},"config":{"enabled":true,"alias":"report_metrics_summary_account_year","schema":"restricted_safe_workspace_sales","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_sales","fqn":["gitlab_snowflake","workspaces","workspace_sales","restricted_safe","wk_sales_report_metrics_summary_account_year"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_sales/restricted_safe/wk_sales_report_metrics_summary_account_year.sql","original_file_path":"models/workspaces/workspace_sales/restricted_safe/wk_sales_report_metrics_summary_account_year.sql","name":"wk_sales_report_metrics_summary_account_year","alias":"report_metrics_summary_account_year","checksum":{"name":"sha256","checksum":"6812345d70a8e300218d27de43e9fa9c567384a17a6f3141cfdf156c749035c0"},"tags":["workspace","safe"],"refs":[["wk_sales_date_details"],["wk_sales_date_details"],["wk_sales_sfdc_opportunity_xf"],["wk_sales_sfdc_opportunity_xf"],["wk_sales_sfdc_opportunity_snapshot_history_xf"],["wk_sales_sfdc_opportunity_snapshot_history_xf"],["mart_available_to_renew"],["mart_available_to_renew"],["dim_subscription"],["dim_subscription"],["mart_arr"],["mart_arr"],["dim_crm_account"],["dim_crm_account"],["mart_crm_account"],["mart_crm_account"],["sfdc_accounts_xf"],["sfdc_accounts_xf"],["wk_sales_sfdc_users_xf"],["wk_sales_sfdc_users_xf"]],"sources":[["salesforce","account"]],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_sales/restricted_safe/wk_sales_report_metrics_summary_account_year.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"alias":"report_metrics_summary_account_year"},"created_at":1689033679.6211755,"compiled_sql":"$4f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_sales.report_metrics_summary_account_year","label":"wk_sales_report_metrics_summary_account_year"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_DATA_SCIENCE","name":"MONTHLY_STAGE_USAGE_BY_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MONTHLY_STAGE_USAGE_BY_SUBSCRIPTION_PK":{"type":"TEXT","index":1,"name":"MONTHLY_STAGE_USAGE_BY_SUBSCRIPTION_PK","comment":null,"display_name":"monthly_stage_usage_by_subscription_pk"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":2,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"SNAPSHOT_MONTH":{"type":"DATE","index":3,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"STAGE_PLAN_ALLTIME_FEATURES":{"type":"NUMBER","index":4,"name":"STAGE_PLAN_ALLTIME_FEATURES","comment":null,"display_name":"stage_plan_alltime_features"},"STAGE_PLAN_28DAYS_FEATURES":{"type":"NUMBER","index":5,"name":"STAGE_PLAN_28DAYS_FEATURES","comment":null,"display_name":"stage_plan_28days_features"},"STAGE_CREATE_ALLTIME_FEATURES":{"type":"NUMBER","index":6,"name":"STAGE_CREATE_ALLTIME_FEATURES","comment":null,"display_name":"stage_create_alltime_features"},"STAGE_CREATE_28DAYS_FEATURES":{"type":"NUMBER","index":7,"name":"STAGE_CREATE_28DAYS_FEATURES","comment":null,"display_name":"stage_create_28days_features"},"STAGE_VERIFY_ALLTIME_FEATURES":{"type":"NUMBER","index":8,"name":"STAGE_VERIFY_ALLTIME_FEATURES","comment":null,"display_name":"stage_verify_alltime_features"},"STAGE_VERIFY_28DAYS_FEATURES":{"type":"NUMBER","index":9,"name":"STAGE_VERIFY_28DAYS_FEATURES","comment":null,"display_name":"stage_verify_28days_features"},"STAGE_PACKAGE_ALLTIME_FEATURES":{"type":"NUMBER","index":10,"name":"STAGE_PACKAGE_ALLTIME_FEATURES","comment":null,"display_name":"stage_package_alltime_features"},"STAGE_PACKAGE_28DAYS_FEATURES":{"type":"NUMBER","index":11,"name":"STAGE_PACKAGE_28DAYS_FEATURES","comment":null,"display_name":"stage_package_28days_features"},"STAGE_RELEASE_ALLTIME_FEATURES":{"type":"NUMBER","index":12,"name":"STAGE_RELEASE_ALLTIME_FEATURES","comment":null,"display_name":"stage_release_alltime_features"},"STAGE_RELEASE_28DAYS_FEATURES":{"type":"NUMBER","index":13,"name":"STAGE_RELEASE_28DAYS_FEATURES","comment":null,"display_name":"stage_release_28days_features"},"STAGE_CONFIGURE_ALLTIME_FEATURES":{"type":"NUMBER","index":14,"name":"STAGE_CONFIGURE_ALLTIME_FEATURES","comment":null,"display_name":"stage_configure_alltime_features"},"STAGE_CONFIGURE_28DAYS_FEATURES":{"type":"NUMBER","index":15,"name":"STAGE_CONFIGURE_28DAYS_FEATURES","comment":null,"display_name":"stage_configure_28days_features"},"STAGE_MONITOR_ALLTIME_FEATURES":{"type":"NUMBER","index":16,"name":"STAGE_MONITOR_ALLTIME_FEATURES","comment":null,"display_name":"stage_monitor_alltime_features"},"STAGE_MONITOR_28DAYS_FEATURES":{"type":"NUMBER","index":17,"name":"STAGE_MONITOR_28DAYS_FEATURES","comment":null,"display_name":"stage_monitor_28days_features"},"STAGE_MANAGE_ALLTIME_FEATURES":{"type":"NUMBER","index":18,"name":"STAGE_MANAGE_ALLTIME_FEATURES","comment":null,"display_name":"stage_manage_alltime_features"},"STAGE_MANAGE_28DAYS_FEATURES":{"type":"NUMBER","index":19,"name":"STAGE_MANAGE_28DAYS_FEATURES","comment":null,"display_name":"stage_manage_28days_features"},"STAGE_SECURE_ALLTIME_FEATURES":{"type":"NUMBER","index":20,"name":"STAGE_SECURE_ALLTIME_FEATURES","comment":null,"display_name":"stage_secure_alltime_features"},"STAGE_SECURE_28DAYS_FEATURES":{"type":"NUMBER","index":21,"name":"STAGE_SECURE_28DAYS_FEATURES","comment":null,"display_name":"stage_secure_28days_features"},"STAGE_GROWTH_ALLTIME_FEATURES":{"type":"NUMBER","index":22,"name":"STAGE_GROWTH_ALLTIME_FEATURES","comment":null,"display_name":"stage_growth_alltime_features"},"STAGE_GROWTH_28DAYS_FEATURES":{"type":"NUMBER","index":23,"name":"STAGE_GROWTH_28DAYS_FEATURES","comment":null,"display_name":"stage_growth_28days_features"},"STAGE_ENABLEMENT_ALLTIME_FEATURES":{"type":"NUMBER","index":24,"name":"STAGE_ENABLEMENT_ALLTIME_FEATURES","comment":null,"display_name":"stage_enablement_alltime_features"},"STAGE_ENABLEMENT_28DAYS_FEATURES":{"type":"NUMBER","index":25,"name":"STAGE_ENABLEMENT_28DAYS_FEATURES","comment":null,"display_name":"stage_enablement_28days_features"},"STAGE_GOVERN_ALLTIME_FEATURES":{"type":"NUMBER","index":26,"name":"STAGE_GOVERN_ALLTIME_FEATURES","comment":null,"display_name":"stage_govern_alltime_features"},"STAGE_GOVERN_28DAYS_FEATURES":{"type":"NUMBER","index":27,"name":"STAGE_GOVERN_28DAYS_FEATURES","comment":null,"display_name":"stage_govern_28days_features"},"STAGE_FULFILLMENT_ALLTIME_FEATURES":{"type":"NUMBER","index":28,"name":"STAGE_FULFILLMENT_ALLTIME_FEATURES","comment":null,"display_name":"stage_fulfillment_alltime_features"},"STAGE_FULFILLMENT_28DAYS_FEATURES":{"type":"NUMBER","index":29,"name":"STAGE_FULFILLMENT_28DAYS_FEATURES","comment":null,"display_name":"stage_fulfillment_28days_features"},"STAGE_ANALYTICS_ALLTIME_FEATURES":{"type":"NUMBER","index":30,"name":"STAGE_ANALYTICS_ALLTIME_FEATURES","comment":null,"display_name":"stage_analytics_alltime_features"},"STAGE_ANALYTICS_28DAYS_FEATURES":{"type":"NUMBER","index":31,"name":"STAGE_ANALYTICS_28DAYS_FEATURES","comment":null,"display_name":"stage_analytics_28days_features"},"SECTION_DEV_ALLTIME_FEATURES":{"type":"NUMBER","index":32,"name":"SECTION_DEV_ALLTIME_FEATURES","comment":null,"display_name":"section_dev_alltime_features"},"SECTION_DEV_28DAYS_FEATURES":{"type":"NUMBER","index":33,"name":"SECTION_DEV_28DAYS_FEATURES","comment":null,"display_name":"section_dev_28days_features"},"SECTION_ENABLEMENT_ALLTIME_FEATURES":{"type":"NUMBER","index":34,"name":"SECTION_ENABLEMENT_ALLTIME_FEATURES","comment":null,"display_name":"section_enablement_alltime_features"},"SECTION_ENABLEMENT_28DAYS_FEATURES":{"type":"NUMBER","index":35,"name":"SECTION_ENABLEMENT_28DAYS_FEATURES","comment":null,"display_name":"section_enablement_28days_features"},"SECTION_FULFILLMENT_ALLTIME_FEATURES":{"type":"NUMBER","index":36,"name":"SECTION_FULFILLMENT_ALLTIME_FEATURES","comment":null,"display_name":"section_fulfillment_alltime_features"},"SECTION_FULFILLMENT_28DAYS_FEATURES":{"type":"NUMBER","index":37,"name":"SECTION_FULFILLMENT_28DAYS_FEATURES","comment":null,"display_name":"section_fulfillment_28days_features"},"SECTION_GROWTH_ALLTIME_FEATURES":{"type":"NUMBER","index":38,"name":"SECTION_GROWTH_ALLTIME_FEATURES","comment":null,"display_name":"section_growth_alltime_features"},"SECTION_GROWTH_28DAYS_FEATURES":{"type":"NUMBER","index":39,"name":"SECTION_GROWTH_28DAYS_FEATURES","comment":null,"display_name":"section_growth_28days_features"},"SECTION_OPS_ALLTIME_FEATURES":{"type":"NUMBER","index":40,"name":"SECTION_OPS_ALLTIME_FEATURES","comment":null,"display_name":"section_ops_alltime_features"},"SECTION_OPS_28DAYS_FEATURES":{"type":"NUMBER","index":41,"name":"SECTION_OPS_28DAYS_FEATURES","comment":null,"display_name":"section_ops_28days_features"},"SECTION_SEC_ALLTIME_FEATURES":{"type":"NUMBER","index":42,"name":"SECTION_SEC_ALLTIME_FEATURES","comment":null,"display_name":"section_sec_alltime_features"},"SECTION_SEC_28DAYS_FEATURES":{"type":"NUMBER","index":43,"name":"SECTION_SEC_28DAYS_FEATURES","comment":null,"display_name":"section_sec_28days_features"},"SECTION_SEG_ALLTIME_FEATURES":{"type":"NUMBER","index":44,"name":"SECTION_SEG_ALLTIME_FEATURES","comment":null,"display_name":"section_seg_alltime_features"},"SECTION_SEG_28DAYS_FEATURES":{"type":"NUMBER","index":45,"name":"SECTION_SEG_28DAYS_FEATURES","comment":null,"display_name":"section_seg_28days_features"},"SECTION_ANALYTICS_ALLTIME_FEATURES":{"type":"NUMBER","index":46,"name":"SECTION_ANALYTICS_ALLTIME_FEATURES","comment":null,"display_name":"section_analytics_alltime_features"},"SECTION_ANALYTICS_28DAYS_FEATURES":{"type":"NUMBER","index":47,"name":"SECTION_ANALYTICS_28DAYS_FEATURES","comment":null,"display_name":"section_analytics_28days_features"},"TIER_FREE_ALLTIME_FEATURES":{"type":"NUMBER","index":48,"name":"TIER_FREE_ALLTIME_FEATURES","comment":null,"display_name":"tier_free_alltime_features"},"TIER_FREE_28DAYS_FEATURES":{"type":"NUMBER","index":49,"name":"TIER_FREE_28DAYS_FEATURES","comment":null,"display_name":"tier_free_28days_features"},"TIER_PREMIUM_ALLTIME_FEATURES":{"type":"NUMBER","index":50,"name":"TIER_PREMIUM_ALLTIME_FEATURES","comment":null,"display_name":"tier_premium_alltime_features"},"TIER_PREMIUM_28DAYS_FEATURES":{"type":"NUMBER","index":51,"name":"TIER_PREMIUM_28DAYS_FEATURES","comment":null,"display_name":"tier_premium_28days_features"},"TIER_ULTIMATE_ALLTIME_FEATURES":{"type":"NUMBER","index":52,"name":"TIER_ULTIMATE_ALLTIME_FEATURES","comment":null,"display_name":"tier_ultimate_alltime_features"},"TIER_ULTIMATE_28DAYS_FEATURES":{"type":"NUMBER","index":53,"name":"TIER_ULTIMATE_28DAYS_FEATURES","comment":null,"display_name":"tier_ultimate_28days_features"},"STAGE_PLAN_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":54,"name":"STAGE_PLAN_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_plan_alltime_feature_sum"},"STAGE_CREATE_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":55,"name":"STAGE_CREATE_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_create_alltime_feature_sum"},"STAGE_VERIFY_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":56,"name":"STAGE_VERIFY_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_verify_alltime_feature_sum"},"STAGE_PACKAGE_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":57,"name":"STAGE_PACKAGE_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_package_alltime_feature_sum"},"STAGE_RELEASE_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":58,"name":"STAGE_RELEASE_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_release_alltime_feature_sum"},"STAGE_CONFIGURE_ALLTIME_FEATURES_SUM":{"type":"FLOAT","index":59,"name":"STAGE_CONFIGURE_ALLTIME_FEATURES_SUM","comment":null,"display_name":"stage_configure_alltime_features_sum"},"STAGE_MONITOR_ALLTIME_FEATURES_SUM":{"type":"FLOAT","index":60,"name":"STAGE_MONITOR_ALLTIME_FEATURES_SUM","comment":null,"display_name":"stage_monitor_alltime_features_sum"},"STAGE_MANAGE_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":61,"name":"STAGE_MANAGE_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_manage_alltime_feature_sum"},"STAGE_SECURE_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":62,"name":"STAGE_SECURE_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_secure_alltime_feature_sum"},"STAGE_GROWTH_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":63,"name":"STAGE_GROWTH_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_growth_alltime_feature_sum"},"STAGE_ENABLEMENT_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":64,"name":"STAGE_ENABLEMENT_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_enablement_alltime_feature_sum"},"STAGE_GOVERN_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":65,"name":"STAGE_GOVERN_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_govern_alltime_feature_sum"},"STAGE_FULFILLMENT_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":66,"name":"STAGE_FULFILLMENT_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_fulfillment_alltime_feature_sum"},"STAGE_ANALYTICS_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":67,"name":"STAGE_ANALYTICS_ALLTIME_FEATURE_SUM","comment":null,"display_name":"stage_analytics_alltime_feature_sum"},"ALL_STAGES_ALLTIME_FEATURE_SUM":{"type":"FLOAT","index":68,"name":"ALL_STAGES_ALLTIME_FEATURE_SUM","comment":null,"display_name":"all_stages_alltime_feature_sum"},"STAGE_PLAN_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":69,"name":"STAGE_PLAN_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_plan_alltime_share_pct"},"STAGE_CREATE_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":70,"name":"STAGE_CREATE_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_create_alltime_share_pct"},"STAGE_VERIFY_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":71,"name":"STAGE_VERIFY_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_verify_alltime_share_pct"},"STAGE_PACKAGE_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":72,"name":"STAGE_PACKAGE_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_package_alltime_share_pct"},"STAGE_RELEASE_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":73,"name":"STAGE_RELEASE_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_release_alltime_share_pct"},"STAGE_CONFIGURE_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":74,"name":"STAGE_CONFIGURE_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_configure_alltime_share_pct"},"STAGE_MONITOR_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":75,"name":"STAGE_MONITOR_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_monitor_alltime_share_pct"},"STAGE_MANAGE_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":76,"name":"STAGE_MANAGE_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_manage_alltime_share_pct"},"STAGE_SECURE_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":77,"name":"STAGE_SECURE_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_secure_alltime_share_pct"},"STAGE_GROWTH_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":78,"name":"STAGE_GROWTH_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_growth_alltime_share_pct"},"STAGE_ENABLEMENT_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":79,"name":"STAGE_ENABLEMENT_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_enablement_alltime_share_pct"},"STAGE_GOVERN_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":80,"name":"STAGE_GOVERN_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_govern_alltime_share_pct"},"STAGE_FULFILLMENT_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":81,"name":"STAGE_FULFILLMENT_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_fulfillment_alltime_share_pct"},"STAGE_ANALYTICS_ALLTIME_SHARE_PCT":{"type":"FLOAT","index":82,"name":"STAGE_ANALYTICS_ALLTIME_SHARE_PCT","comment":null,"display_name":"stage_analytics_alltime_share_pct"},"STAGE_MOST_USED_ALLTIME":{"type":"TEXT","index":83,"name":"STAGE_MOST_USED_ALLTIME","comment":null,"display_name":"stage_most_used_alltime"},"STAGE_PLAN_MONTHS_USED":{"type":"NUMBER","index":84,"name":"STAGE_PLAN_MONTHS_USED","comment":null,"display_name":"stage_plan_months_used"},"STAGE_CREATE_MONTHS_USED":{"type":"NUMBER","index":85,"name":"STAGE_CREATE_MONTHS_USED","comment":null,"display_name":"stage_create_months_used"},"STAGE_VERIFY_MONTHS_USED":{"type":"NUMBER","index":86,"name":"STAGE_VERIFY_MONTHS_USED","comment":null,"display_name":"stage_verify_months_used"},"STAGE_PACKAGE_MONTHS_USED":{"type":"NUMBER","index":87,"name":"STAGE_PACKAGE_MONTHS_USED","comment":null,"display_name":"stage_package_months_used"},"STAGE_RELEASE_MONTHS_USED":{"type":"NUMBER","index":88,"name":"STAGE_RELEASE_MONTHS_USED","comment":null,"display_name":"stage_release_months_used"},"STAGE_CONFIGURE_MONTHS_USED":{"type":"NUMBER","index":89,"name":"STAGE_CONFIGURE_MONTHS_USED","comment":null,"display_name":"stage_configure_months_used"},"STAGE_MONITOR_MONTHS_USED":{"type":"NUMBER","index":90,"name":"STAGE_MONITOR_MONTHS_USED","comment":null,"display_name":"stage_monitor_months_used"},"STAGE_MANAGE_MONTHS_USED":{"type":"NUMBER","index":91,"name":"STAGE_MANAGE_MONTHS_USED","comment":null,"display_name":"stage_manage_months_used"},"STAGE_SECURE_MONTHS_USED":{"type":"NUMBER","index":92,"name":"STAGE_SECURE_MONTHS_USED","comment":null,"display_name":"stage_secure_months_used"},"STAGE_GROWTH_MONTHS_USED":{"type":"NUMBER","index":93,"name":"STAGE_GROWTH_MONTHS_USED","comment":null,"display_name":"stage_growth_months_used"},"STAGE_ENABLEMENT_MONTHS_USED":{"type":"NUMBER","index":94,"name":"STAGE_ENABLEMENT_MONTHS_USED","comment":null,"display_name":"stage_enablement_months_used"},"STAGE_GOVERN_MONTHS_USED":{"type":"NUMBER","index":95,"name":"STAGE_GOVERN_MONTHS_USED","comment":null,"display_name":"stage_govern_months_used"},"STAGE_FULFILLMENT_MONTHS_USED":{"type":"NUMBER","index":96,"name":"STAGE_FULFILLMENT_MONTHS_USED","comment":null,"display_name":"stage_fulfillment_months_used"},"STAGE_ANALYTICS_MONTHS_USED":{"type":"NUMBER","index":97,"name":"STAGE_ANALYTICS_MONTHS_USED","comment":null,"display_name":"stage_analytics_months_used"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 19:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":64813568,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.monthly_stage_usage_by_subscription","raw_sql":"$50","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_ping_instance","model.gitlab_snowflake.prep_ping_instance","model.gitlab_snowflake.map_license_subscription_account","model.gitlab_snowflake.map_license_subscription_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_saas_usage_ping_namespace","model.gitlab_snowflake.prep_saas_usage_ping_namespace","model.gitlab_snowflake.bdg_namespace_order_subscription_monthly","model.gitlab_snowflake.bdg_namespace_order_subscription_monthly","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"workspace_data_science","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"monthly_stage_usage_by_subscription_pk","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_data_science","fqn":["gitlab_snowflake","workspaces","workspace_data_science","monthly_stage_usage_by_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_data_science/monthly_stage_usage_by_subscription.sql","original_file_path":"models/workspaces/workspace_data_science/monthly_stage_usage_by_subscription.sql","name":"monthly_stage_usage_by_subscription","alias":"monthly_stage_usage_by_subscription","checksum":{"name":"sha256","checksum":"301cddfb9cc53dedbe2fa47c1213e9d964765b83fd9ba4ae101155bd0e49bd28"},"tags":["workspace","mnpi_exception"],"refs":[["prep_ping_instance"],["prep_ping_instance"],["map_license_subscription_account"],["map_license_subscription_account"],["dim_date"],["dim_date"],["prep_saas_usage_ping_namespace"],["prep_saas_usage_ping_namespace"],["bdg_namespace_order_subscription_monthly"],["bdg_namespace_order_subscription_monthly"],["dim_ping_metric"],["dim_ping_metric"],["dim_subscription"],["dim_subscription"]],"sources":[],"metrics":[],"description":"Product usage metrics by the original subscription_id","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_data_science/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_data_science/monthly_stage_usage_by_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_data_science","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"monthly_stage_usage_by_subscription_pk"},"created_at":1689033735.100817,"compiled_sql":"$51","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_data_science.monthly_stage_usage_by_subscription","label":"monthly_stage_usage_by_subscription"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"MART_DELTA_ARR_PARENT_PRODUCT_MONTH","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"ARR_MONTH","comment":null,"display_name":"arr_month"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":5,"name":"product_tier_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":6,"name":"product_delivery_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":7,"name":"product_ranking","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":8,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"BEG_ARR":{"type":"FLOAT","index":9,"name":"BEG_ARR","comment":null,"display_name":"beg_arr"},"BEG_QUANTITY":{"type":"FLOAT","index":10,"name":"BEG_QUANTITY","comment":null,"display_name":"beg_quantity"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":11,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":12,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":13,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"END_ARR":{"type":"FLOAT","index":14,"name":"END_ARR","comment":null,"display_name":"end_arr"},"END_QUANTITY":{"type":"FLOAT","index":15,"name":"END_QUANTITY","comment":null,"display_name":"end_quantity"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":16,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":56608256,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_delta_arr_parent_product_month","raw_sql":"$52","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","marts","arr","mart_delta_arr_parent_product_month"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/arr/mart_delta_arr_parent_product_month.sql","original_file_path":"models/marts/arr/mart_delta_arr_parent_product_month.sql","name":"mart_delta_arr_parent_product_month","alias":"mart_delta_arr_parent_product_month","checksum":{"name":"sha256","checksum":"201facf0b08e76278c29c18e1a07d78dca9515266e3971374e71299e3450454d"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table by month pursuant to the ARR Analysis Framework at the parent customer || product category level","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/arr/mart_delta_arr_parent_product_month.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.3290226,"compiled_sql":"$53","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.mart_delta_arr_parent_product_month","label":"mart_delta_arr_parent_product_month"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_DELTA_ARR_SUBSCRIPTION_LINEAGE_PRODUCT_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DELTA_ARR_SUBSCRIPTION_LINEAGE_PRODUCT_MONTHLY_PK":{"type":"TEXT","index":1,"name":"delta_arr_subscription_lineage_product_monthly_pk","comment":null,"description":"The unique composite ID of the fct_delta_arr_subscription_month model consisting of arr_month and dim_oldest_subscription_in_cohort_id.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"delta_arr_subscription_lineage_product_monthly_pk"},"DIM_DATE_MONTH_ID":{"type":"NUMBER","index":2,"name":"DIM_DATE_MONTH_ID","comment":null,"display_name":"dim_date_month_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"DIM_OLDEST_SUBSCRIPTION_IN_COHORT_ID":{"type":"TEXT","index":4,"name":"dim_oldest_subscription_in_cohort_id","comment":null,"description":"Zuora subscriptions can have lineages of linked subscriptions. This field provides the dimension key for the oldest subscription in a lineage. This key can be used to group a subscription lineage together for analysis.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_oldest_subscription_in_cohort_id"},"PRODUCT_TIER_NAME":{"type":"ARRAY","index":5,"name":"product_tier_name","comment":null,"description":"A GitLab offering that provides a set of features at a particular price point such as Free, Premium, or Ultimate. This field also includes the delivery type such as SaaS or Self-Managed.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name"},"PREVIOUS_PRODUCT_TIER_NAME":{"type":"ARRAY","index":6,"name":"PREVIOUS_PRODUCT_TIER_NAME","comment":null,"display_name":"previous_product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"ARRAY","index":7,"name":"product_delivery_type","comment":null,"description":"This is the delivery type of GitLab to include either SaaS or Self-Managed.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_delivery_type"},"PREVIOUS_PRODUCT_DELIVERY_TYPE":{"type":"ARRAY","index":8,"name":"PREVIOUS_PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"previous_product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":9,"name":"product_ranking","comment":null,"description":"This is a field used for analysis and ranks the product tiers. Ultimate is 3, Premium is 2, and Bronze/Starter is 1.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_ranking"},"PREVIOUS_PRODUCT_RANKING":{"type":"NUMBER","index":10,"name":"PREVIOUS_PRODUCT_RANKING","comment":null,"display_name":"previous_product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":11,"name":"type_of_arr_change","comment":null,"description":"Types of Delta ARR:\n\nnew - ARR for the customerâs first paying month/quarter\nexpansion - ARR increased from previous month/quarter\ncontraction - ARR decreased from previous month/quarter\nchurn - ARR decreased all the way to zero for a customer who was paying in the previous month/quarter\nno impact - ARR remained the same from previous month/quarter","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"type_of_arr_change"},"BEG_ARR":{"type":"FLOAT","index":12,"name":"beg_arr","comment":null,"description":"The ARR at the beginning of an arr_month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"beg_arr"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":13,"name":"seat_change_arr","comment":null,"description":"A change in ARR due to the quantity of seats purchased.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"seat_change_arr"},"TIER_CHANGE_ARR":{"type":"FLOAT","index":14,"name":"tier_change_arr","comment":null,"description":"Change in ARR due to an upward or downward change in the product purchased (i.e., from Premium up to Ultimate).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tier_change_arr"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":15,"name":"price_change_arr","comment":null,"description":"The price changes represents discounts provided to the customer.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"price_change_arr"},"END_ARR":{"type":"FLOAT","index":16,"name":"end_arr","comment":null,"description":"The ARR at the end of the arr_month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"end_arr"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":17,"name":"annual_price_per_seat_change","comment":null,"description":"Change in the price per seat paid in the arr_month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"annual_price_per_seat_change"},"BEG_QUANTITY":{"type":"FLOAT","index":18,"name":"beg_quantity","comment":null,"description":"The number of licensed users at the beginning of an arr_month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"beg_quantity"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":19,"name":"seat_change_quantity","comment":null,"description":"A change in the quantity of seats purchased.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"seat_change_quantity"},"END_QUANTITY":{"type":"FLOAT","index":20,"name":"end_quantity","comment":null,"description":"The number of licensed users at the end of the arr_month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"end_quantity"},"CREATED_BY":{"type":"TEXT","index":21,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":22,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":23,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":24,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":25,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":26,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_crm_account_id":{"name":"dim_crm_account_id","description":"The unique identifier of a crm account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"previous_month_product_tier_name":{"name":"previous_month_product_tier_name","description":"This is the previous month's product tier. A GitLab offering that provides a set of features at a particular price point such as Free, Premium, or Ultimate. This field also includes the delivery type such as SaaS or Self-Managed.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"previous_month_product_tier_name"},"previous_month_product_delivery_type":{"name":"previous_month_product_delivery_type","description":"This is the previous month delivery type. Includes either SaaS or Self-Managed.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"previous_month_product_delivery_type"},"previous_month_product_ranking":{"name":"previous_month_product_ranking","description":"This is the previous month product ranking. Ultimate is 3, Premium is 2, and Bronze/Starter is 1.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"previous_month_product_ranking"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":104248320,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_delta_arr_subscription_lineage_product_monthly","raw_sql":"$54","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.reason_for_arr_change_tier_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_sales_and_marketing","restricted_safe","fct_delta_arr_subscription_lineage_product_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_sales_and_marketing/restricted_safe/fct_delta_arr_subscription_lineage_product_monthly.sql","original_file_path":"models/common/facts_sales_and_marketing/restricted_safe/fct_delta_arr_subscription_lineage_product_monthly.sql","name":"fct_delta_arr_subscription_lineage_product_monthly","alias":"fct_delta_arr_subscription_lineage_product_monthly","checksum":{"name":"sha256","checksum":"7c75d118bf5ef4c05f0b9410cc2499e68b26b4af0e9a3a6b2b9d33d2e2adcb80"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"$55","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_sales_and_marketing/restricted_safe/fct_delta_arr_subscription_lineage_product_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.7403674,"compiled_sql":"$56","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_delta_arr_subscription_lineage_product_monthly","label":"fct_delta_arr_subscription_lineage_product_monthly"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"MART_RETENTION_PARENT_ACCOUNT_PRODUCT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PRODUCT_CATEGORY":{"type":"TEXT","index":4,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"PRODUCT_RANKING":{"type":"NUMBER","index":5,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"RETENTION_MONTH":{"type":"DATE","index":6,"name":"RETENTION_MONTH","comment":null,"display_name":"retention_month"},"RETENTION_FISCAL_YEAR":{"type":"NUMBER","index":7,"name":"RETENTION_FISCAL_YEAR","comment":null,"display_name":"retention_fiscal_year"},"RETENTION_FISCAL_QUARTER":{"type":"TEXT","index":8,"name":"RETENTION_FISCAL_QUARTER","comment":null,"display_name":"retention_fiscal_quarter"},"LAST_RENEWAL_MONTH_PRODUCT":{"type":"DATE","index":9,"name":"LAST_RENEWAL_MONTH_PRODUCT","comment":null,"display_name":"last_renewal_month_product"},"NEXT_RENEWAL_MONTH_PRODUCT":{"type":"DATE","index":10,"name":"NEXT_RENEWAL_MONTH_PRODUCT","comment":null,"display_name":"next_renewal_month_product"},"PRIOR_YEAR_MRR":{"type":"FLOAT","index":11,"name":"PRIOR_YEAR_MRR","comment":null,"display_name":"prior_year_mrr"},"NET_RETENTION_MRR":{"type":"FLOAT","index":12,"name":"NET_RETENTION_MRR","comment":null,"display_name":"net_retention_mrr"},"GROSS_RETENTION_MRR":{"type":"FLOAT","index":13,"name":"GROSS_RETENTION_MRR","comment":null,"display_name":"gross_retention_mrr"},"PRIOR_YEAR_ARR":{"type":"FLOAT","index":14,"name":"PRIOR_YEAR_ARR","comment":null,"display_name":"prior_year_arr"},"NET_RETENTION_ARR":{"type":"FLOAT","index":15,"name":"NET_RETENTION_ARR","comment":null,"display_name":"net_retention_arr"},"GROSS_RETENTION_ARR":{"type":"FLOAT","index":16,"name":"GROSS_RETENTION_ARR","comment":null,"display_name":"gross_retention_arr"},"PRIOR_YEAR_QUANTITY":{"type":"FLOAT","index":17,"name":"PRIOR_YEAR_QUANTITY","comment":null,"display_name":"prior_year_quantity"},"NET_RETENTION_QUANTITY":{"type":"FLOAT","index":18,"name":"NET_RETENTION_QUANTITY","comment":null,"display_name":"net_retention_quantity"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":19,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":20,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":21,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":22,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":23,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":58699776,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_retention_parent_account_product","raw_sql":"$57","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","marts","arr","mart_retention_parent_account_product"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/arr/mart_retention_parent_account_product.sql","original_file_path":"models/marts/arr/mart_retention_parent_account_product.sql","name":"mart_retention_parent_account_product","alias":"mart_retention_parent_account_product","checksum":{"name":"sha256","checksum":"1551339b103f44d08a93f481526876fab3208ffca83a399e2ca0a5edc9f06c00"},"tags":["safe"],"refs":[["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table to support retention analysis at the ultimate_parent_account || product level.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/arr/mart_retention_parent_account_product.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.3430667,"compiled_sql":"$58","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.mart_retention_parent_account_product","label":"mart_retention_parent_account_product"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"MART_DELTA_ARR_PARENT_MONTH","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"ARR_MONTH":{"type":"DATE","index":2,"name":"ARR_MONTH","comment":null,"display_name":"arr_month"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PRODUCT_CATEGORY":{"type":"ARRAY","index":5,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"PREVIOUS_MONTH_PRODUCT_CATEGORY":{"type":"ARRAY","index":6,"name":"PREVIOUS_MONTH_PRODUCT_CATEGORY","comment":null,"display_name":"previous_month_product_category"},"DELIVERY":{"type":"ARRAY","index":7,"name":"DELIVERY","comment":null,"display_name":"delivery"},"PREVIOUS_MONTH_DELIVERY":{"type":"ARRAY","index":8,"name":"PREVIOUS_MONTH_DELIVERY","comment":null,"display_name":"previous_month_delivery"},"PRODUCT_RANKING":{"type":"NUMBER","index":9,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"PREVIOUS_MONTH_PRODUCT_RANKING":{"type":"NUMBER","index":10,"name":"PREVIOUS_MONTH_PRODUCT_RANKING","comment":null,"display_name":"previous_month_product_ranking"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":11,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"BEG_ARR":{"type":"FLOAT","index":12,"name":"BEG_ARR","comment":null,"display_name":"beg_arr"},"BEG_QUANTITY":{"type":"FLOAT","index":13,"name":"BEG_QUANTITY","comment":null,"display_name":"beg_quantity"},"SEAT_CHANGE_ARR":{"type":"FLOAT","index":14,"name":"SEAT_CHANGE_ARR","comment":null,"display_name":"seat_change_arr"},"SEAT_CHANGE_QUANTITY":{"type":"FLOAT","index":15,"name":"SEAT_CHANGE_QUANTITY","comment":null,"display_name":"seat_change_quantity"},"PRICE_CHANGE_ARR":{"type":"FLOAT","index":16,"name":"PRICE_CHANGE_ARR","comment":null,"display_name":"price_change_arr"},"TIER_CHANGE_ARR":{"type":"FLOAT","index":17,"name":"TIER_CHANGE_ARR","comment":null,"display_name":"tier_change_arr"},"END_ARR":{"type":"FLOAT","index":18,"name":"END_ARR","comment":null,"display_name":"end_arr"},"END_QUANTITY":{"type":"FLOAT","index":19,"name":"END_QUANTITY","comment":null,"display_name":"end_quantity"},"ANNUAL_PRICE_PER_SEAT_CHANGE":{"type":"FLOAT","index":20,"name":"ANNUAL_PRICE_PER_SEAT_CHANGE","comment":null,"display_name":"annual_price_per_seat_change"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":60800000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_delta_arr_parent_month","raw_sql":"$59","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.type_of_arr_change","macro.gitlab_snowflake.reason_for_arr_change_seat_change","macro.gitlab_snowflake.reason_for_quantity_change_seat_change","macro.gitlab_snowflake.reason_for_arr_change_price_change","macro.gitlab_snowflake.reason_for_arr_change_tier_change","macro.gitlab_snowflake.annual_price_per_seat_change","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","marts","arr","mart_delta_arr_parent_month"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/arr/mart_delta_arr_parent_month.sql","original_file_path":"models/marts/arr/mart_delta_arr_parent_month.sql","name":"mart_delta_arr_parent_month","alias":"mart_delta_arr_parent_month","checksum":{"name":"sha256","checksum":"4fcd12c7498cbc9c3acd3866a4c46ce14c1057ec7b1b20e6bcb27de1bc3e024c"},"tags":["safe"],"refs":[["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_date"],["dim_date"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_mrr"],["fct_mrr"]],"sources":[],"metrics":[],"description":"Mart table by month pursuant to the ARR Analysis Framework at the parent customer level","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/marts/arr/mart_delta_arr_parent_month.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.3203278,"compiled_sql":"$5a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.mart_delta_arr_parent_month","label":"mart_delta_arr_parent_month"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_LATEST_SUBSCRIPTIONS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_LATEST_SUBSCRIPTIONS_MONTHLY_ID":{"type":"TEXT","index":1,"name":"ping_latest_subscriptions_monthly_id","comment":null,"description":"The unique composite ID for the rpt_ping_latest_subscriptions_monthly model consisting of ping_created_date_month, latest_subscription_id, dim_installation_id, ping_edition, and version_is_prerelease","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_latest_subscriptions_monthly_id"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":2,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":3,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":4,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"PING_EDITION":{"type":"TEXT","index":5,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":6,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":7,"name":"major_minor_version_id","comment":null,"description":"The major_minor_version_id of the last ping sent from the installation that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":8,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"LICENSED_USER_COUNT":{"type":"FLOAT","index":9,"name":"licensed_user_count","comment":null,"description":"Count of licensed users (seats) associated with the subscription, calculated using `fct_charge`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"licensed_user_count"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":10,"name":"IS_PAID_SUBSCRIPTION","comment":null,"display_name":"is_paid_subscription"},"PING_COUNT":{"type":"NUMBER","index":11,"name":"ping_count","comment":null,"description":"The count of pings sent by the installation that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_count"},"HAS_SENT_PINGS":{"type":"BOOLEAN","index":12,"name":"has_sent_pings","comment":null,"description":"Boolean flag set to True if installation sent at least 1 ping that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_sent_pings"},"IS_MISSING_CHARGE_SUBSCRIPTION":{"type":"BOOLEAN","index":13,"name":"is_missing_charge_subscription","comment":null,"description":"Boolean flag set to True if a ping associated with the subscription was received during the month, but there is not a corresponding record in `fct_charge`. This can be True in cases of delayed renewals, etc.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_missing_charge_subscription"},"CREATED_BY":{"type":"TEXT","index":14,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":15,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":16,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":17,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":19,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:09UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":50234880,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","raw_sql":"$5b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_ping_metric_first_last_versions","model.gitlab_snowflake.rpt_ping_metric_first_last_versions","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.mart_ping_instance_metric","model.gitlab_snowflake.mart_ping_instance_metric","model.gitlab_snowflake.mart_ping_instance_metric_monthly","model.gitlab_snowflake.mart_ping_instance_metric_monthly"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_latest_subscriptions_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_latest_subscriptions_monthly.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_latest_subscriptions_monthly.sql","name":"rpt_ping_latest_subscriptions_monthly","alias":"rpt_ping_latest_subscriptions_monthly","checksum":{"name":"sha256","checksum":"98234131003c88a02dd0ec056fbc5ee19de21b9f241e897a46683567465cb4f6"},"tags":["product","mnpi_exception"],"refs":[["rpt_ping_metric_first_last_versions"],["rpt_ping_metric_first_last_versions"],["mart_charge"],["mart_charge"],["dim_charge"],["dim_charge"],["fct_charge"],["fct_charge"],["dim_subscription"],["dim_subscription"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_date"],["dim_date"],["mart_ping_instance_metric"],["mart_ping_instance_metric"],["mart_ping_instance_metric_monthly"],["mart_ping_instance_metric_monthly"]],"sources":[],"metrics":[],"description":"$5c","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_latest_subscriptions_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.1651056,"compiled_sql":"$5d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_latest_subscriptions_monthly","label":"rpt_ping_latest_subscriptions_monthly"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_FINANCE","name":"MART_AVAILABLE_TO_RENEW","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"Composite key for the model combining the unique identifier of the charge as well as the month the charge is effective in the term.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"FISCAL_YEAR":{"type":"NUMBER","index":2,"name":"fiscal_year","comment":null,"description":"Fiscal year when the subscription will be available to renew.","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","atr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_year"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":3,"name":"fiscal_quarter_name_fy","comment":null,"description":"Fiscal quarter when the subscription will be available to renew.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name_fy"},"CLOSE_MONTH":{"type":"DATE","index":4,"name":"close_month","comment":null,"description":"Month when the opportunity associated with the subscription closed based on its `close_date`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"close_month"},"DIM_CHARGE_ID":{"type":"TEXT","index":5,"name":"dim_charge_id","comment":null,"description":"Unique identifier of a rate plan charge associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_charge_id"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"dim_crm_opportunity_id","comment":null,"description":"Unique identifier of the crm opportunity associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_crm_account_id","comment":null,"description":"Unique identifier of the crm account associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":8,"name":"dim_billing_account_id","comment":null,"description":"Unique identifier of the billing account associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":9,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a subscription.","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","atr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":10,"name":"dim_product_detail_id","comment":null,"description":"Unique identifier of a product rate plan charge associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_detail_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":11,"name":"subscription_name","comment":null,"description":"Name applied to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":12,"name":"subscription_start_month","comment":null,"description":"Month when the subscription is set to begin.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":13,"name":"subscription_end_month","comment":null,"description":"Month when the subscription is set to end.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"TERM_START_MONTH":{"type":"DATE","index":14,"name":"term_start_month","comment":null,"description":"Month when a subscription term begins.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"term_start_month"},"RENEWAL_MONTH":{"type":"DATE","index":15,"name":"renewal_month","comment":null,"description":"Month when a subscription term ends.","meta":{},"data_type":null,"quote":null,"tags":["tdf","mart","atr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"renewal_month"},"BOOKINGS_TERM_END_MONTH":{"type":"DATE","index":16,"name":"bookings_term_end_month","comment":null,"description":"Similar to the term end month but calculates intermediate term end months for multi year subscriptions with terms greater than 12 months. These end months do not exist in the Zuora billing system. This allows us to get a view of all subscriptions renewing on a yearly basis.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"bookings_term_end_month"},"MULTI_YEAR_BOOKING_SUBSCRIPTION_END_MONTH":{"type":"DATE","index":17,"name":"MULTI_YEAR_BOOKING_SUBSCRIPTION_END_MONTH","comment":null,"display_name":"multi_year_booking_subscription_end_month"},"LAST_PAID_MONTH_IN_TERM":{"type":"DATE","index":18,"name":"last_paid_month_in_term","comment":null,"description":"Last month charge is applied for a charge's term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_paid_month_in_term"},"CURRENT_TERM":{"type":"NUMBER","index":19,"name":"current_term","comment":null,"description":"Duration of the subscription's current term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_term"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":20,"name":"zuora_renewal_subscription_name","comment":null,"description":"Name of a renewal subscription associated with the current subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"RENEWAL_SUBSCRIPTION_END_MONTH":{"type":"DATE","index":21,"name":"renewal_subscription_end_month","comment":null,"description":"End month of the renewal subscription associated with the current subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_subscription_end_month"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":22,"name":"parent_crm_account_name","comment":null,"description":"Name of the ultimate parent crm account associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":23,"name":"crm_account_name","comment":null,"description":"Name of the crm account associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":24,"name":"parent_crm_account_sales_segment","comment":null,"description":"Segment of the ultimate parent crm account associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"DIM_CRM_USER_ID":{"type":"TEXT","index":25,"name":"dim_crm_user_id","comment":null,"description":"Unique identifier of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_user_id"},"USER_NAME":{"type":"TEXT","index":26,"name":"user_name","comment":null,"description":"Name of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_name"},"USER_ROLE_ID":{"type":"TEXT","index":27,"name":"user_role_id","comment":null,"description":"Unique identifier of the role of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_role_id"},"CRM_USER_SALES_SEGMENT":{"type":"TEXT","index":28,"name":"crm_user_sales_segment","comment":null,"description":"Segment of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_user_sales_segment"},"CRM_USER_GEO":{"type":"TEXT","index":29,"name":"crm_user_geo","comment":null,"description":"Geo of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_user_geo"},"CRM_USER_REGION":{"type":"TEXT","index":30,"name":"crm_user_region","comment":null,"description":"Region of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_user_region"},"CRM_USER_AREA":{"type":"TEXT","index":31,"name":"crm_user_area","comment":null,"description":"Area of the account owner associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_user_area"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":32,"name":"product_tier_name","comment":null,"description":"Tier of the product on the charge.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":33,"name":"product_delivery_type","comment":null,"description":"Delivery type of the product on the charge.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_delivery_type"},"RENEWAL_TYPE":{"type":"TEXT","index":34,"name":"renewal_type","comment":null,"description":"Type of renewal (multi-year_booking or not)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_type"},"IS_MULTI_YEAR_BOOKING":{"type":"BOOLEAN","index":35,"name":"is_multi_year_booking","comment":null,"description":"Flag indicating if a subscription is multi-year or not.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_multi_year_booking"},"IS_MULTI_YEAR_BOOKING_WITH_MULTI_SUBS":{"type":"BOOLEAN","index":36,"name":"is_multi_year_booking_with_multi_subs","comment":null,"description":"Flag indicating if a subscription is multi-year with multiple associated subscriptions.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_multi_year_booking_with_multi_subs"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":37,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SUBSCRIPTION_TERM":{"type":"NUMBER","index":38,"name":"subscription_term","comment":null,"description":"Current term of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_term"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":39,"name":"estimated_total_future_billings","comment":null,"description":"Estimate of total amount to be billed in the future for a given charge.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"estimated_total_future_billings"},"IS_AVAILABLE_TO_RENEW":{"type":"BOOLEAN","index":40,"name":"is_available_to_renew","comment":null,"description":"Flag indicating if the subscription is available to renew in the period.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_available_to_renew"},"OPPORTUNITY_TERM_GROUP":{"type":"TEXT","index":41,"name":"opportunity_term_group","comment":null,"description":"Duration of the opportunity in years based on the opportunity's term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"opportunity_term_group"},"ARR":{"type":"FLOAT","index":42,"name":"arr","comment":null,"description":"Annual recurring revenue associated with the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"CREATED_BY":{"type":"TEXT","index":43,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":44,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":45,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":46,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":47,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":48,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"first_day_of_fiscal_quarter":{"name":"first_day_of_fiscal_quarter","description":"Calendar date of first day of fiscal quarter.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_quarter"},"multi-year_booking_subscription_end_month":{"name":"multi-year_booking_subscription_end_month","description":"Month when the final subscription in a multi-year booking is set to end.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"multi-year_booking_subscription_end_month"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:28UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":20987904,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_available_to_renew","raw_sql":"$5e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.get_column_values","macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key"],"nodes":["model.gitlab_snowflake.prep_renewal_fiscal_years","model.gitlab_snowflake.prep_renewal_fiscal_years","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_amendment"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_finance","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"transient":false,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_finance","fqn":["gitlab_snowflake","common_mart_finance","restricted_safe","mart_available_to_renew"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_finance/restricted_safe/mart_available_to_renew.sql","original_file_path":"models/common_mart_finance/restricted_safe/mart_available_to_renew.sql","name":"mart_available_to_renew","alias":"mart_available_to_renew","checksum":{"name":"sha256","checksum":"6dd3908c5a38f46b542960aa77253c796b50b8d99fe83b3dbef14b665bc77461"},"tags":["safe"],"refs":[["prep_renewal_fiscal_years"],["prep_renewal_fiscal_years"],["dim_date"],["dim_date"],["dim_crm_account"],["dim_crm_account"],["dim_crm_user"],["dim_crm_user"],["dim_subscription"],["dim_subscription"],["dim_crm_opportunity"],["dim_crm_opportunity"],["fct_crm_opportunity"],["fct_crm_opportunity"],["dim_charge"],["dim_charge"],["fct_charge"],["fct_charge"],["dim_billing_account"],["dim_billing_account"],["dim_product_detail"],["dim_product_detail"],["dim_amendment"],["dim_amendment"]],"sources":[],"metrics":[],"description":"This model generates a list of subscriptions which will be available to renew in a given time period based on existing charges and term dates. It also has logic built in to identify multi-year bookings which is not yet avilable in the source data.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_finance/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_finance/restricted_safe/mart_available_to_renew.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"transient":false},"created_at":1689033735.1840882,"compiled_sql":"$5f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_finance.mart_available_to_renew","label":"mart_available_to_renew"}],"snapshot":[{"raw_sql":"\n-- Using dbt updated at field as we want a new set of data everyday.\n    {{\n        config(\n          unique_key='dim_subscription_id',\n          strategy='timestamp',\n          updated_at='dbt_created_at',\n          invalidate_hard_deletes=True\n         )\n    }}\n    \n    SELECT\n    {{\n          dbt_utils.star(\n            from=ref('dim_subscription'),\n            except=['DBT_UPDATED_AT']\n            )\n      }}\n    FROM {{ ref('dim_subscription') }}\n\n","compiled":true,"resource_type":"snapshot","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":["edm_snapshot"],"meta":{},"materialized":"snapshot","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_subscription_id","on_schema_change":"ignore","grants":{},"strategy":"timestamp","target_schema":"snapshots","target_database":"SNOWFLAKE","updated_at":"dbt_created_at","query_tag":"dbt","transient":false,"invalidate_hard_deletes":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null},{"sql":"alter table {{ this }} set DATA_RETENTION_TIME_IN_DAYS = 30","transaction":true,"index":null}],"pre-hook":[]},"database":"SNOWFLAKE","schema":"snapshots","fqn":["gitlab_snowflake","common","dim_subscription_snapshot","dim_subscription_snapshot"],"unique_id":"snapshot.gitlab_snowflake.dim_subscription_snapshot","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dim_subscription_snapshot.sql","original_file_path":"snapshots/common/dim_subscription_snapshot.sql","name":"dim_subscription_snapshot","alias":"dim_subscription_snapshot","checksum":{"name":"sha256","checksum":"585d22efaf0a28847d7b7ee28a20eb1b269d961aadf6c57a66a6c31f0bdd2fb3"},"tags":["edm_snapshot"],"refs":[["dim_subscription"],["dim_subscription"],["dim_subscription"],["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":null,"build_path":null,"deferred":false,"unrendered_config":{"post-hook":["{{ mask_model() }}","alter table {{ this }} set DATA_RETENTION_TIME_IN_DAYS = 30"],"query_tag":"dbt","target_database":"{{ env_var('SNOWFLAKE_SNAPSHOT_DATABASE') }}","target_schema":"snapshots","transient":false,"tags":["edm_snapshot"],"unique_key":"dim_subscription_id","strategy":"timestamp","updated_at":"dbt_created_at","invalidate_hard_deletes":true},"created_at":1689033725.1580565,"compiled_sql":"$60","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"SNOWFLAKE\".snapshots.dim_subscription_snapshot","label":"dim_subscription_snapshot"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_subscription_id","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_dim_subscription_dim_subscription_id"],"unique_id":"test.gitlab_snowflake.not_null_dim_subscription_dim_subscription_id.548f845191","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_subscription_dim_subscription_id.sql","original_file_path":"models/common/schema.yml","name":"not_null_dim_subscription_dim_subscription_id","alias":"not_null_dim_subscription_dim_subscription_id","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_dim_subscription_dim_subscription_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.3779082,"compiled_sql":"\n    \n    \n\n\n\nselect dim_subscription_id\nfrom \"PROD\".common.dim_subscription\nwhere dim_subscription_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id","file_key_name":"models.dim_subscription","label":"not_null_dim_subscription_dim_subscription_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"dim_subscription_id","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","unique_dim_subscription_dim_subscription_id"],"unique_id":"test.gitlab_snowflake.unique_dim_subscription_dim_subscription_id.676027e5d5","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_dim_subscription_dim_subscription_id.sql","original_file_path":"models/common/schema.yml","name":"unique_dim_subscription_dim_subscription_id","alias":"unique_dim_subscription_dim_subscription_id","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/unique_dim_subscription_dim_subscription_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.3813553,"compiled_sql":"\n    \n    \n\nselect\n    dim_subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".common.dim_subscription\nwhere dim_subscription_id is not null\ngroup by dim_subscription_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id","file_key_name":"models.dim_subscription","label":"unique_dim_subscription_dim_subscription_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_subscription_id_original","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_dim_subscription_dim_subscription_id_original"],"unique_id":"test.gitlab_snowflake.not_null_dim_subscription_dim_subscription_id_original.a49f586d4a","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_subscription_dim_subscription_id_original.sql","original_file_path":"models/common/schema.yml","name":"not_null_dim_subscription_dim_subscription_id_original","alias":"not_null_dim_subscription_dim_subscription_id_original","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_dim_subscription_dim_subscription_id_original.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.3847513,"compiled_sql":"\n    \n    \n\n\n\nselect dim_subscription_id_original\nfrom \"PROD\".common.dim_subscription\nwhere dim_subscription_id_original is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id_original","file_key_name":"models.dim_subscription","label":"not_null_dim_subscription_dim_subscription_id_original"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"subscription_status","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_dim_subscription_subscription_status"],"unique_id":"test.gitlab_snowflake.not_null_dim_subscription_subscription_status.75588794a6","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_subscription_subscription_status.sql","original_file_path":"models/common/schema.yml","name":"not_null_dim_subscription_subscription_status","alias":"not_null_dim_subscription_subscription_status","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_dim_subscription_subscription_status.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.388277,"compiled_sql":"\n    \n    \n\n\n\nselect subscription_status\nfrom \"PROD\".common.dim_subscription\nwhere subscription_status is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_status","file_key_name":"models.dim_subscription","label":"not_null_dim_subscription_subscription_status"},{"raw_sql":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_subscripti_c0de11edda922766dfcd7170103cf7f5\") }}","test_metadata":{"name":"accepted_values","kwargs":{"values":["Active","Cancelled","Draft","Expired"],"column_name":"subscription_status","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":"accepted_values_dim_subscripti_c0de11edda922766dfcd7170103cf7f5","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","accepted_values_dim_subscription_subscription_status__Active__Cancelled__Draft__Expired"],"unique_id":"test.gitlab_snowflake.accepted_values_dim_subscription_subscription_status__Active__Cancelled__Draft__Expired.a58aa62916","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"accepted_values_dim_subscripti_c0de11edda922766dfcd7170103cf7f5.sql","original_file_path":"models/common/schema.yml","name":"accepted_values_dim_subscription_subscription_status__Active__Cancelled__Draft__Expired","alias":"accepted_values_dim_subscripti_c0de11edda922766dfcd7170103cf7f5","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/accepted_values_dim_subscripti_c0de11edda922766dfcd7170103cf7f5.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"accepted_values_dim_subscripti_c0de11edda922766dfcd7170103cf7f5"},"created_at":1689033753.392434,"compiled_sql":"\n    \n    \n\nwith all_values as (\n\n    select\n        subscription_status as value_field,\n        count(*) as n_records\n\n    from \"PROD\".common.dim_subscription\n    group by subscription_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Active','Cancelled','Draft','Expired'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_status","file_key_name":"models.dim_subscription","label":"accepted_values_dim_subscription_subscription_status__Active__Cancelled__Draft__Expired"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"subscription_sales_type","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_dim_subscription_subscription_sales_type"],"unique_id":"test.gitlab_snowflake.not_null_dim_subscription_subscription_sales_type.a8794abebb","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_dim_subscription_subscription_sales_type.sql","original_file_path":"models/common/schema.yml","name":"not_null_dim_subscription_subscription_sales_type","alias":"not_null_dim_subscription_subscription_sales_type","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_dim_subscription_subscription_sales_type.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033753.402253,"compiled_sql":"\n    \n    \n\n\n\nselect subscription_sales_type\nfrom \"PROD\".common.dim_subscription\nwhere subscription_sales_type is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_sales_type","file_key_name":"models.dim_subscription","label":"not_null_dim_subscription_subscription_sales_type"},{"raw_sql":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_subscripti_0e8cd32ef67dac178e79700e6c36be63\") }}","test_metadata":{"name":"accepted_values","kwargs":{"values":["Sales-Assisted","Self-Service"],"column_name":"subscription_sales_type","model":"{{ get_where_subquery(ref('dim_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.dim_subscription"]},"config":{"enabled":true,"alias":"accepted_values_dim_subscripti_0e8cd32ef67dac178e79700e6c36be63","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","accepted_values_dim_subscription_subscription_sales_type__Sales_Assisted__Self_Service"],"unique_id":"test.gitlab_snowflake.accepted_values_dim_subscription_subscription_sales_type__Sales_Assisted__Self_Service.075790a282","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"accepted_values_dim_subscripti_0e8cd32ef67dac178e79700e6c36be63.sql","original_file_path":"models/common/schema.yml","name":"accepted_values_dim_subscription_subscription_sales_type__Sales_Assisted__Self_Service","alias":"accepted_values_dim_subscripti_0e8cd32ef67dac178e79700e6c36be63","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["dim_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/accepted_values_dim_subscripti_0e8cd32ef67dac178e79700e6c36be63.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"accepted_values_dim_subscripti_0e8cd32ef67dac178e79700e6c36be63"},"created_at":1689033753.4064496,"compiled_sql":"\n    \n    \n\nwith all_values as (\n\n    select\n        subscription_sales_type as value_field,\n        count(*) as n_records\n\n    from \"PROD\".common.dim_subscription\n    group by subscription_sales_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Sales-Assisted','Self-Service'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_sales_type","file_key_name":"models.dim_subscription","label":"accepted_values_dim_subscription_subscription_sales_type__Sales_Assisted__Self_Service"},{"raw_sql":"{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_mrr_383d5e7a6ee0404edad4bb2df24f6fcc\") }}","test_metadata":{"name":"relationships","kwargs":{"to":"ref('dim_subscription')","field":"dim_subscription_id","column_name":"dim_subscription_id","model":"{{ get_where_subquery(ref('fct_mrr')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_relationships","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr"]},"config":{"enabled":true,"alias":"relationships_fct_mrr_383d5e7a6ee0404edad4bb2df24f6fcc","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","relationships_fct_mrr_dim_subscription_id__dim_subscription_id__ref_dim_subscription_"],"unique_id":"test.gitlab_snowflake.relationships_fct_mrr_dim_subscription_id__dim_subscription_id__ref_dim_subscription_.276cafce26","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"relationships_fct_mrr_383d5e7a6ee0404edad4bb2df24f6fcc.sql","original_file_path":"models/common/schema.yml","name":"relationships_fct_mrr_dim_subscription_id__dim_subscription_id__ref_dim_subscription_","alias":"relationships_fct_mrr_383d5e7a6ee0404edad4bb2df24f6fcc","checksum":{"name":"none","checksum":""},"tags":["common","mrr","tdf"],"refs":[["dim_subscription"],["fct_mrr"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/relationships_fct_mrr_383d5e7a6ee0404edad4bb2df24f6fcc.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"relationships_fct_mrr_383d5e7a6ee0404edad4bb2df24f6fcc"},"created_at":1689033755.161696,"compiled_sql":"\n    \n    \n\nwith child as (\n    select dim_subscription_id as from_field\n    from \"PROD\".restricted_safe_common.fct_mrr\n    where dim_subscription_id is not null\n),\n\nparent as (\n    select dim_subscription_id as to_field\n    from \"PROD\".common.dim_subscription\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id","file_key_name":"models.fct_mrr","label":"relationships_fct_mrr_dim_subscription_id__dim_subscription_id__ref_dim_subscription_"},{"raw_sql":"{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_mrr_with_zer_5ae20765e03a2e7cb84bf26094fb97ae\") }}","test_metadata":{"name":"relationships","kwargs":{"to":"ref('dim_subscription')","field":"dim_subscription_id","column_name":"dim_subscription_id","model":"{{ get_where_subquery(ref('fct_mrr_with_zero_dollar_charges')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_relationships","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges"]},"config":{"enabled":true,"alias":"relationships_fct_mrr_with_zer_5ae20765e03a2e7cb84bf26094fb97ae","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","relationships_fct_mrr_with_zero_dollar_charges_dim_subscription_id__dim_subscription_id__ref_dim_subscription_"],"unique_id":"test.gitlab_snowflake.relationships_fct_mrr_with_zero_dollar_charges_dim_subscription_id__dim_subscription_id__ref_dim_subscription_.3405c88008","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"relationships_fct_mrr_with_zer_5ae20765e03a2e7cb84bf26094fb97ae.sql","original_file_path":"models/common/schema.yml","name":"relationships_fct_mrr_with_zero_dollar_charges_dim_subscription_id__dim_subscription_id__ref_dim_subscription_","alias":"relationships_fct_mrr_with_zer_5ae20765e03a2e7cb84bf26094fb97ae","checksum":{"name":"none","checksum":""},"tags":["common","mrr","tdf"],"refs":[["dim_subscription"],["fct_mrr_with_zero_dollar_charges"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/relationships_fct_mrr_with_zer_5ae20765e03a2e7cb84bf26094fb97ae.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"relationships_fct_mrr_with_zer_5ae20765e03a2e7cb84bf26094fb97ae"},"created_at":1689033755.2143347,"compiled_sql":"\n    \n    \n\nwith child as (\n    select dim_subscription_id as from_field\n    from \"PROD\".restricted_safe_common.fct_mrr_all\n    where dim_subscription_id is not null\n),\n\nparent as (\n    select dim_subscription_id as to_field\n    from \"PROD\".common.dim_subscription\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id","file_key_name":"models.fct_mrr_with_zero_dollar_charges","label":"relationships_fct_mrr_with_zero_dollar_charges_dim_subscription_id__dim_subscription_id__ref_dim_subscription_"}],"exposure":[{"fqn":["gitlab_snowflake","propensity_to_downtier"],"unique_id":"exposure.gitlab_snowflake.propensity_to_downtier","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"data_science_exposures.yml","original_file_path":"models/data_science_exposures.yml","name":"propensity_to_downtier","type":"ml","owner":{"email":"kmagda@gitlab.com","name":"Klaudia Magda"},"resource_type":"exposure","description":"","maturity":"high","meta":{},"tags":[],"url":"https://gitlab.com/gitlab-data/data-science-projects/propensity-to-contract-and-churn/-/blob/main/prod/propensity_downtier.sql","depends_on":{"macros":[],"nodes":["model.gitlab_snowflake.mart_arr_snapshot_model","model.gitlab_snowflake.mart_product_usage_paid_user_metrics_monthly","model.gitlab_snowflake.monthly_stage_usage_by_account","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.mart_arr_snapshot_bottom_up","model.gitlab_snowflake.dim_crm_account_daily_snapshot","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_billing_account"]},"refs":[["mart_arr_snapshot_model"],["mart_product_usage_paid_user_metrics_monthly"],["monthly_stage_usage_by_account"],["dim_ping_instance"],["mart_arr_snapshot_bottom_up"],["dim_crm_account_daily_snapshot"],["dim_subscription"],["dim_billing_account"]],"sources":[],"created_at":1689033729.2771003,"label":"propensity_to_downtier"}]},"node":{"resource_type":"model","name":"dim_subscription","unique_id":"model.gitlab_snowflake.dim_subscription"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON_MAPPING","name":"MAP_SUBSCRIPTION_LINEAGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":3,"name":"subscription_lineage","comment":null,"description":"All the subscriptions subsquent to the primary subscription, separated by commas.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_lineage"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":4,"name":"oldest_subscription_in_cohort","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":5,"name":"subscription_cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":6,"name":"subscription_cohort_quarter","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_cohort_quarter"},"SUBSCRIPTION_COHORT_YEAR":{"type":"DATE","index":7,"name":"subscription_cohort_year","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_cohort_year"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:09UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4605440,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_subscription_lineage","raw_sql":"$61","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_subscription_lineage_intermediate","model.gitlab_snowflake.prep_subscription_lineage_intermediate","model.gitlab_snowflake.prep_subscription_lineage","model.gitlab_snowflake.prep_subscription_lineage","model.gitlab_snowflake.prep_subscription_lineage_parentage_finish","model.gitlab_snowflake.prep_subscription_lineage_parentage_finish"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_subscription_lineage"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_subscription_lineage.sql","original_file_path":"models/common_mapping/map_subscription_lineage.sql","name":"map_subscription_lineage","alias":"map_subscription_lineage","checksum":{"name":"sha256","checksum":"2c5a29604e2d675b0871d238cef21ae2b2e76b25792b01a0dc3873382008e96c"},"tags":[],"refs":[["prep_subscription_lineage_intermediate"],["prep_subscription_lineage_intermediate"],["prep_subscription_lineage"],["prep_subscription_lineage"],["prep_subscription_lineage_parentage_finish"],["prep_subscription_lineage_parentage_finish"]],"sources":[],"metrics":[],"description":"This models takes the `prep_subscription_intermediate` model and joins it to the `prep_subscription_lineage` model. The end result is every subscription is linked to its lineage (or null).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_subscription_lineage.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033765.6613574,"compiled_sql":"$62","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_subscription_lineage","label":"map_subscription_lineage"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MAPPING","name":"MAP_SUBSCRIPTION_OPPORTUNITY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":2,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_opportunity_id"},"IS_QUESTIONABLE_OPPORTUNITY_MAPPING":{"type":"NUMBER","index":3,"name":"IS_QUESTIONABLE_OPPORTUNITY_MAPPING","comment":null,"display_name":"is_questionable_opportunity_mapping"},"CREATED_BY":{"type":"TEXT","index":4,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":5,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":6,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":7,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":8,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":9,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:25UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":9415168,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_subscription_opportunity","raw_sql":"{{ config(\n    tags=[\"mnpi_exception\"]\n) }}\n\nWITH prep_subscription_opportunity_mapping AS (\n\n    SELECT *\n    FROM {{ ref('prep_subscription_opportunity_mapping') }}\n\n), final_mapping AS (\n\n    SELECT DISTINCT\n      dim_subscription_id,\n      dim_crm_opportunity_id,\n      is_questionable_opportunity_mapping\n    FROM prep_subscription_opportunity_mapping\n    WHERE dim_crm_opportunity_id IS NOT NULL\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"final_mapping\",\n    created_by=\"@michellecooper\",\n    updated_by=\"@michellecooper\",\n    created_date=\"2021-11-10\",\n    updated_date=\"2021-11-16\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_subscription_opportunity_mapping","model.gitlab_snowflake.prep_subscription_opportunity_mapping"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_subscription_opportunity"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_subscription_opportunity.sql","original_file_path":"models/common_mapping/map_subscription_opportunity.sql","name":"map_subscription_opportunity","alias":"map_subscription_opportunity","checksum":{"name":"sha256","checksum":"e9a364a192010d032f9d67c6b9af314c717dd2118d8041f6119f43816702a9b2"},"tags":["mnpi_exception"],"refs":[["prep_subscription_opportunity_mapping"],["prep_subscription_opportunity_mapping"]],"sources":[],"metrics":[],"description":"The distinct combination of subscriptions and opportunities generated through the rules defined in `prep_subscription_opportunity_mapping`. A flag has been created to indicate the subscription-opportunty mappings filled in by taking the most recent opportunity_id associated with a version of the subscription with the same subscription_name which we believe to have the lowest level of fidelity.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_subscription_opportunity.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033765.6633062,"compiled_sql":"\n\nWITH prep_subscription_opportunity_mapping AS (\n\n    SELECT *\n    FROM \"PROD\".restricted_safe_common_prep.prep_subscription_opportunity_mapping\n\n), final_mapping AS (\n\n    SELECT DISTINCT\n      dim_subscription_id,\n      dim_crm_opportunity_id,\n      is_questionable_opportunity_mapping\n    FROM prep_subscription_opportunity_mapping\n    WHERE dim_crm_opportunity_id IS NOT NULL\n\n)\n\nSELECT\n      *,\n      '@michellecooper'::VARCHAR       AS created_by,\n      '@michellecooper'::VARCHAR       AS updated_by,\n      '2021-11-10'::DATE        AS model_created_date,\n      '2021-11-16'::DATE        AS model_updated_date,\n      CURRENT_TIMESTAMP()               AS dbt_updated_at,\n\n    \n\n        \n\n            CURRENT_TIMESTAMP()               AS dbt_created_at\n\n        \n    \n    \n\n    FROM final_mapping","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_subscription_opportunity","label":"map_subscription_opportunity"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":7,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":9,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":10,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":15,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":17,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":18,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":19,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":20,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":21,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":22,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":23,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":24,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"NAMESPACE_NAME":{"type":"TEXT","index":25,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_ID":{"type":"TEXT","index":26,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":27,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":28,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":29,"name":"WAS_PURCHASED_THROUGH_RESELLER","comment":null,"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":30,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":33,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":34,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":37,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":38,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":39,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":40,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":41,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":42,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":44,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":45,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":46,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":47,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":48,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":49,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":50,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":51,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":52,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":53,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":54,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":55,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":56,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":57,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34212352,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription","raw_sql":"$63","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_subscription.sql","original_file_path":"models/common_prep/prep_subscription.sql","name":"prep_subscription","alias":"prep_subscription","checksum":{"name":"sha256","checksum":"1769b1b9c9fad9c8514abcf0c021261c8f88d9797bd412568b7e9982fec2041a"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["prep_billing_account_user"],["prep_billing_account_user"],["sfdc_customer_subscription_source"],["sfdc_customer_subscription_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the subscription shared dimension and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.5360272,"compiled_sql":"$64","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_subscription","label":"prep_subscription"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_AMENDMENT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_AMENDMENT_ID":{"type":"TEXT","index":1,"name":"dim_amendment_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_amendment_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"AMENDMENT_NAME":{"type":"TEXT","index":3,"name":"AMENDMENT_NAME","comment":null,"display_name":"amendment_name"},"AMENDMENT_TYPE":{"type":"TEXT","index":4,"name":"AMENDMENT_TYPE","comment":null,"display_name":"amendment_type"},"AMENDMENT_DESCRIPTION":{"type":"TEXT","index":5,"name":"AMENDMENT_DESCRIPTION","comment":null,"display_name":"amendment_description"},"AUTO_RENEW":{"type":"BOOLEAN","index":6,"name":"AUTO_RENEW","comment":null,"display_name":"auto_renew"},"AMENDMENT_CODE":{"type":"TEXT","index":7,"name":"AMENDMENT_CODE","comment":null,"display_name":"amendment_code"},"AMENDMENT_STATUS":{"type":"TEXT","index":8,"name":"AMENDMENT_STATUS","comment":null,"display_name":"amendment_status"},"TERM_TYPE":{"type":"TEXT","index":9,"name":"TERM_TYPE","comment":null,"display_name":"term_type"},"CURRENT_TERM":{"type":"NUMBER","index":10,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"CURRENT_TERM_PERIOD_TYPE":{"type":"TEXT","index":11,"name":"CURRENT_TERM_PERIOD_TYPE","comment":null,"display_name":"current_term_period_type"},"RENEWAL_TERM":{"type":"NUMBER","index":12,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":13,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"RENEWAL_SETTING":{"type":"TEXT","index":14,"name":"RENEWAL_SETTING","comment":null,"display_name":"renewal_setting"},"TERM_START_DATE":{"type":"TIMESTAMP_TZ","index":15,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"EFFECTIVE_DATE":{"type":"TIMESTAMP_TZ","index":16,"name":"EFFECTIVE_DATE","comment":null,"display_name":"effective_date"},"SERVICE_ACTIVATION_DATE":{"type":"TIMESTAMP_TZ","index":17,"name":"SERVICE_ACTIVATION_DATE","comment":null,"display_name":"service_activation_date"},"CUSTOMER_ACCEPTANCE_DATE":{"type":"TIMESTAMP_TZ","index":18,"name":"CUSTOMER_ACCEPTANCE_DATE","comment":null,"display_name":"customer_acceptance_date"},"CONTRACT_EFFECTIVE_DATE":{"type":"TIMESTAMP_TZ","index":19,"name":"CONTRACT_EFFECTIVE_DATE","comment":null,"display_name":"contract_effective_date"},"CREATED_BY":{"type":"TEXT","index":20,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":21,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":22,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":23,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":24,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":25,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:53UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":14362112,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_amendment","raw_sql":"$65","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_amendment_source","model.gitlab_snowflake.zuora_amendment_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_amendment"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_amendment.sql","original_file_path":"models/common_prep/prep_amendment.sql","name":"prep_amendment","alias":"prep_amendment","checksum":{"name":"sha256","checksum":"407e28346170d6810e8b5c341ac75274462c06a2fbb8e89026e54c337725a243"},"tags":[],"refs":[["zuora_amendment_source"],["zuora_amendment_source"]],"sources":[],"metrics":[],"description":"Prep table for Zuora Amendments that increment subscription versions. This prep table will be used in Facts and Dimensions.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_amendment.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.4008663,"compiled_sql":"$66","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_amendment","label":"prep_amendment"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$67","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.get_keyed_nulls","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/get_keyed_nulls.sql","original_file_path":"macros/utils/get_keyed_nulls.sql","name":"get_keyed_nulls","macro_sql":"{% macro get_keyed_nulls(columns) %}\n\n  COALESCE({{columns}}, MD5(-1)) \n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro generates a key for facts with missing dimensions so when the fact table is joined to the dimension it joins to a record that says it's unknown as in\n\n```sql\nSELECT * \nFROM DIM_GEO_AREA \nWHERE DIM_GEO_AREA_ID = MD5(-1);\n```\n\nwhich has:\n\n```\n***************************[ 1 ]***************************\nDIM_GEO_AREA_ID    | 6bb61e3b7bce0931da574d19d1d82c88\nGEO_AREA_NAME      | Missing geo_area_name\n```\n\nGenerally this should be used when creating and keying on new dimensions that might not be fully representing in the referencing tables","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[],"created_at":1689033766.0386684},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527}]},"node":{"resource_type":"model","name":"dim_subscription","unique_id":"model.gitlab_snowflake.dim_subscription"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L68",null,{"versions":{"Source":"$69","Compiled":"$6a"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
