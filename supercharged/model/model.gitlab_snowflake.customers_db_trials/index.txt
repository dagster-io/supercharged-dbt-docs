1:HL["/supercharged-dbt-docs/supercharged/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css",{"as":"style"}]
0:["3_N3LAWgtmWGg2et9V1N1",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.customers_db_trials","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.customers_db_trials\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/supercharged-dbt-docs/supercharged/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_5f725a","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.customers_db_trials","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.customers_db_trials\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.customers_db_trials","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"SetActive","async":false}
10:I{"id":2201,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ColumnDetails","async":false}
14:I{"id":9941,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ReferenceListClient","async":false}
31:I{"id":4431,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
f:Tac1,This model collects all trials started from the subscription portal. For this we use the `customers_db_orders_snapshots_base` model in order to isolate them. This model does the following thing:

* It isolates the orders that are flagged with the column `is_trial=TRUE`
* It deduplicates by taking the first row created
* It joins with customers, users and namespaces. 

Finally, this model identifies if a trial has been converted or not. To achieve that, we join the selected trials to the order_snapshots selecting only orders converted to subscription after the trial starting date  (look at example below). We exclude ci_minutes orders from the order_snapshots.   

There is one trick here to identify which subscriptions are actually valid and not refunded. In order to do so, we join on `zuora_rate_plan` and `zuora_rate_plan_charge` in order to filter out subscriptions that have (mrr <= 0 and tcv <=0). One of the case we filter out are those subscriptions that are cancelled instantly or fully refunded after a certain period.

The `customers_db_orders_snapshots_base` model has reliable data from the 1st of September, therefore we select only orders that have a `start_date` after this date.

Examples:

| ORDER_ID | ORDER_UPDATED_AT        | ORDER_START_DATE  | ORDER_END_DATE | ORDER_IS_TRIAL | SUBSCRIPTION_NAME_SLUGIFY |
|----------|-------------------------|-------------------|----------------|----------------|---------------------------|
| 32177    | 2019-09-06 23:09:21.858 | 2019-08-17        | 2019-09-15     | TRUE           |                           |
| 32177    | 2019-09-13 22:39:18.916 | 2019-08-17        | 2019-09-27     | TRUE           |                           |
| 32177    | 2019-09-26 21:26:23.227 | 2019-08-17        | 2019-10-02     | TRUE           |                           |
| 32177    | 2019-10-02 16:32:45.664 | 2019-10-02        | 2019-10-04     | TRUE           |                           |
| 32177    | 2019-10-02 00:00:00.075 | 2019-10-02        |                | FALSE          |                           |
| 32177    | 2019-10-03 20:11:31.497 | 2019-10-02        | 2020-10-02     | FALSE          | order-1-name-gold         |

NB: subscription_name_slugify has been anonymised

This order examplifies perfectly what is happening in the table `customers_db_orders`. When the order starts, 17th Aug, 2019, it is a trial. That means that the flag `order_is_trial` is set to TRUE. But it doesn't have either a subscription_id or a subscription_name (`subscription_name_slugify` is null). When it converts, 2nd Nov, 2019, the `order_is_trial` flag is set to `FALSE`, the order_start_date (and order_end_date) is changed and a `subscription_name` and `subscription_id` are set! (last row of the table)11:Te41,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (
  
  SELECT * 
  FROM {{ ref('customers_db_customers_source')}}
  
)

, namespaces AS (
  
  SELECT * 
  FROM {{ ref('gitlab_dotcom_namespaces')}}
  
)
 
, orders_snapshots AS (
  
  SELECT * 
  FROM {{ ref('customers_db_orders_snapshots_base')}}
  
)

, users AS (
 
 SELECT * 
 FROM {{ ref('gitlab_dotcom_users')}}
 
)

, zuora_rate_plan AS (
 
 SELECT * 
 FROM {{ ref('zuora_rate_plan')}}
 
)

, zuora_base_mrr AS (
 
 SELECT * 
 FROM {{ ref('zuora_base_mrr')}}
 
)

, zuora_subscription_with_positive_mrr_tcv AS (
  
  SELECT DISTINCT
    subscription_name_slugify,
    subscription_start_date
  FROM zuora_base_mrr 
  
)

, ci_minutes_charges AS (
  
  SELECT *
  FROM zuora_rate_plan
  WHERE rate_plan_name = '1,000 CI Minutes'
  
)

,  orders_shapshots_excluding_ci_minutes AS (

  SELECT orders_snapshots.*,
     FIRST_VALUE(subscription_name_slugify) IGNORE NULLS
      OVER (PARTITION BY order_id ORDER BY order_updated_at ASC) AS first_subscription_name_slugify
  FROM orders_snapshots
  LEFT JOIN ci_minutes_charges
    ON orders_snapshots.subscription_id = ci_minutes_charges.subscription_id
    AND orders_snapshots.product_rate_plan_id = ci_minutes_charges.product_rate_plan_id
  WHERE ci_minutes_charges.subscription_id IS NULL

)
  , trials AS (

  SELECT
    *,
    FIRST_VALUE(customer_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_customer_id,
    FIRST_VALUE(gitlab_namespace_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_namespace_id
  FROM orders_snapshots
  WHERE order_is_trial = TRUE

), converted_trials AS (

  SELECT DISTINCT
    trials.order_id,
    orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify AS subscription_name_slugify
  FROM trials
  INNER JOIN orders_shapshots_excluding_ci_minutes
    ON trials.order_id = orders_shapshots_excluding_ci_minutes.order_id
  INNER JOIN zuora_subscription_with_positive_mrr_tcv AS subscription
    ON orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify = subscription.subscription_name_slugify
      AND trials.order_start_date <= subscription.subscription_start_date
  WHERE orders_shapshots_excluding_ci_minutes.subscription_name_slugify IS NOT NULL

)
, joined AS (
  
  SELECT
    trials.order_id, 
    trials.latest_namespace_id                              AS gitlab_namespace_id,
    customers.customer_id,
    
      
    users.user_id                                           AS gitlab_user_id,
    IFF(users.user_id IS NOT NULL, TRUE, FALSE)             AS is_gitlab_user,
    users.created_at                                        AS user_created_at,
    
    
    namespaces.created_at                                   AS namespace_created_at,
    namespaces.namespace_type,
    
    IFF(converted_trials.order_id IS NOT NULL, TRUE, FALSE) AS is_converted,
    converted_trials.subscription_name_slugify,
    
    MIN(order_created_at)                                   AS order_created_at,
    MIN(trials.order_start_date)::DATE                      AS trial_start_date, 
    MAX(trials.order_end_date)::DATE                        AS trial_end_date
    
    
  FROM trials
    INNER JOIN customers ON trials.latest_customer_id = customers.customer_id
    LEFT JOIN namespaces ON trials.latest_namespace_id = namespaces.namespace_id
    LEFT JOIN users ON customers.customer_provider_user_id = users.user_id
    LEFT JOIN converted_trials ON trials.order_id = converted_trials.order_id
  WHERE trials.order_start_date >= '2019-09-01'
  {{dbt_utils.group_by(10)}}
  
)

SELECT * 
FROM joined12:Tac1,This model collects all trials started from the subscription portal. For this we use the `customers_db_orders_snapshots_base` model in order to isolate them. This model does the following thing:

* It isolates the orders that are flagged with the column `is_trial=TRUE`
* It deduplicates by taking the first row created
* It joins with customers, users and namespaces. 

Finally, this model identifies if a trial has been converted or not. To achieve that, we join the selected trials to the order_snapshots selecting only orders converted to subscription after the trial starting date  (look at example below). We exclude ci_minutes orders from the order_snapshots.   

There is one trick here to identify which subscriptions are actually valid and not refunded. In order to do so, we join on `zuora_rate_plan` and `zuora_rate_plan_charge` in order to filter out subscriptions that have (mrr <= 0 and tcv <=0). One of the case we filter out are those subscriptions that are cancelled instantly or fully refunded after a certain period.

The `customers_db_orders_snapshots_base` model has reliable data from the 1st of September, therefore we select only orders that have a `start_date` after this date.

Examples:

| ORDER_ID | ORDER_UPDATED_AT        | ORDER_START_DATE  | ORDER_END_DATE | ORDER_IS_TRIAL | SUBSCRIPTION_NAME_SLUGIFY |
|----------|-------------------------|-------------------|----------------|----------------|---------------------------|
| 32177    | 2019-09-06 23:09:21.858 | 2019-08-17        | 2019-09-15     | TRUE           |                           |
| 32177    | 2019-09-13 22:39:18.916 | 2019-08-17        | 2019-09-27     | TRUE           |                           |
| 32177    | 2019-09-26 21:26:23.227 | 2019-08-17        | 2019-10-02     | TRUE           |                           |
| 32177    | 2019-10-02 16:32:45.664 | 2019-10-02        | 2019-10-04     | TRUE           |                           |
| 32177    | 2019-10-02 00:00:00.075 | 2019-10-02        |                | FALSE          |                           |
| 32177    | 2019-10-03 20:11:31.497 | 2019-10-02        | 2020-10-02     | FALSE          | order-1-name-gold         |

NB: subscription_name_slugify has been anonymised

This order examplifies perfectly what is happening in the table `customers_db_orders`. When the order starts, 17th Aug, 2019, it is a trial. That means that the flag `order_is_trial` is set to TRUE. But it doesn't have either a subscription_id or a subscription_name (`subscription_name_slugify` is null). When it converts, 2nd Nov, 2019, the `order_is_trial` flag is set to `FALSE`, the order_start_date (and order_end_date) is changed and a `subscription_name` and `subscription_id` are set! (last row of the table)13:Te39,

WITH customers AS (
  
  SELECT * 
  FROM "PREP".customers.customers_db_customers_source
  
)

, namespaces AS (
  
  SELECT * 
  FROM "PREP".sensitive.gitlab_dotcom_namespaces
  
)
 
, orders_snapshots AS (
  
  SELECT * 
  FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, users AS (
 
 SELECT * 
 FROM "PREP".sensitive.gitlab_dotcom_users
 
)

, zuora_rate_plan AS (
 
 SELECT * 
 FROM "PROD".legacy.zuora_rate_plan
 
)

, zuora_base_mrr AS (
 
 SELECT * 
 FROM "PROD".restricted_safe_legacy.zuora_base_mrr
 
)

, zuora_subscription_with_positive_mrr_tcv AS (
  
  SELECT DISTINCT
    subscription_name_slugify,
    subscription_start_date
  FROM zuora_base_mrr 
  
)

, ci_minutes_charges AS (
  
  SELECT *
  FROM zuora_rate_plan
  WHERE rate_plan_name = '1,000 CI Minutes'
  
)

,  orders_shapshots_excluding_ci_minutes AS (

  SELECT orders_snapshots.*,
     FIRST_VALUE(subscription_name_slugify) IGNORE NULLS
      OVER (PARTITION BY order_id ORDER BY order_updated_at ASC) AS first_subscription_name_slugify
  FROM orders_snapshots
  LEFT JOIN ci_minutes_charges
    ON orders_snapshots.subscription_id = ci_minutes_charges.subscription_id
    AND orders_snapshots.product_rate_plan_id = ci_minutes_charges.product_rate_plan_id
  WHERE ci_minutes_charges.subscription_id IS NULL

)
  , trials AS (

  SELECT
    *,
    FIRST_VALUE(customer_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_customer_id,
    FIRST_VALUE(gitlab_namespace_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_namespace_id
  FROM orders_snapshots
  WHERE order_is_trial = TRUE

), converted_trials AS (

  SELECT DISTINCT
    trials.order_id,
    orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify AS subscription_name_slugify
  FROM trials
  INNER JOIN orders_shapshots_excluding_ci_minutes
    ON trials.order_id = orders_shapshots_excluding_ci_minutes.order_id
  INNER JOIN zuora_subscription_with_positive_mrr_tcv AS subscription
    ON orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify = subscription.subscription_name_slugify
      AND trials.order_start_date <= subscription.subscription_start_date
  WHERE orders_shapshots_excluding_ci_minutes.subscription_name_slugify IS NOT NULL

)
, joined AS (
  
  SELECT
    trials.order_id, 
    trials.latest_namespace_id                              AS gitlab_namespace_id,
    customers.customer_id,
    
      
    users.user_id                                           AS gitlab_user_id,
    IFF(users.user_id IS NOT NULL, TRUE, FALSE)             AS is_gitlab_user,
    users.created_at                                        AS user_created_at,
    
    
    namespaces.created_at                                   AS namespace_created_at,
    namespaces.namespace_type,
    
    IFF(converted_trials.order_id IS NOT NULL, TRUE, FALSE) AS is_converted,
    converted_trials.subscription_name_slugify,
    
    MIN(order_created_at)                                   AS order_created_at,
    MIN(trials.order_start_date)::DATE                      AS trial_start_date, 
    MAX(trials.order_end_date)::DATE                        AS trial_end_date
    
    
  FROM trials
    INNER JOIN customers ON trials.latest_customer_id = customers.customer_id
    LEFT JOIN namespaces ON trials.latest_namespace_id = namespaces.namespace_id
    LEFT JOIN users ON customers.customer_provider_user_id = users.user_id
    LEFT JOIN converted_trials ON trials.order_id = converted_trials.order_id
  WHERE trials.order_start_date >= '2019-09-01'
  group by 1,2,3,4,5,6,7,8,9,10
  
)

SELECT * 
FROM joined15:T401,This macro maps a job title to the IT job title hierarchy. It works by doing string matching on the job title and categorizing them into 3 buckets:

1. **IT Decision Makers**: CIO, CTO, VP of IT, ...
2. **IT Managers**: Manager of IT. Manager of Procurement, ...
3. **IT Individual contributors**: Software Developer, Application Developer, IT programmer, ...

These buckets are only for IT, information systems, engineering, ... Everything else gets a NULL value assigned to it.

This macro uses the pad_column macro to "pad" the job title field with spaces and discard unrelated pattern matching.

An example of this is the matching for the job title of `IT Manager`. The string pattern for it `%it%manager%` also gets unrelated matches like `Junior Digital Project Manager` or `Supplier Quality Section Manager`. To overcome this problem, the job title field is "padded" with spaces to the both sides of the string and the string pattern changed `% it%manager%`. This way the previous unrelated job titles would not match.16:Td833,{{ config(
    tags=["product"]
) }}
    
{{ simple_cte ([
  ('marketing_contact', 'dim_marketing_contact'),
  ('marketing_contact_order', 'bdg_marketing_contact_order'),
  ('dim_namespace', 'dim_namespace'),
  ('gitlab_dotcom_namespaces_source', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source'),
  ('gitlab_dotcom_members_source', 'gitlab_dotcom_members_source'),
  ('gitlab_dotcom_memberships', 'gitlab_dotcom_memberships'),
  ('customers_db_charges_xf', 'customers_db_charges_xf'),
  ('customers_db_trials', 'customers_db_trials'),
  ('customers_db_leads', 'customers_db_leads_source'),
  ('fct_event_user_daily', 'fct_event_user_daily'),
  ('map_gitlab_dotcom_xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
  ('services', 'gitlab_dotcom_integrations_source'),
  ('project', 'prep_project'),
  ('ptpt_scores_by_user', 'prep_ptpt_scores_by_user'),
  ('ptpf_scores_by_user', 'prep_ptpf_scores_by_user'),
  ('ptp_scores_by_user', 'prep_ptp_scores_by_user'),
  ('namespace_details', 'gitlab_dotcom_namespace_details_source')
]) }}

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    {{ dbt_utils.group_by(3) }}

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    {{ dbt_utils.group_by(7) }}
  
), pqls_with_product_information AS (

    SELECT
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION ALL

    SELECT 
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), latest_pql AS (

    SELECT
      pqls_with_product_information.*,
      gitlab_dotcom_namespaces_source.namespace_name                        AS pql_namespace_name
    FROM pqls_with_product_information
    LEFT JOIN gitlab_dotcom_namespaces_source
      ON gitlab_dotcom_namespaces_source.namespace_id = pqls_with_product_information.pql_namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email ORDER BY pql_event_created_at DESC) = 1

), services_by_email AS (

    SELECT
      latest_pql.email                                                                           AS email,
      COUNT(*)                                                                                   AS pql_nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS pql_integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    LEFT JOIN latest_pql
      ON latest_pql.pql_namespace_id = project.dim_namespace_id
    GROUP BY 1

), users_role_by_email AS (

    SELECT
      latest_pql.email,
      marketing_contact.job_title AS pql_namespace_creator_job_description
    FROM latest_pql 
    INNER JOIN dim_namespace
      ON latest_pql.pql_namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN marketing_contact
      ON dim_namespace.creator_id = marketing_contact.gitlab_dotcom_user_id

)
-------------------------- End of PQL logic --------------------------

, subscription_aggregate AS (

    SELECT
      dim_marketing_contact_id,
      MIN(subscription_start_date)                                                               AS min_subscription_start_date,
      MAX(subscription_end_date)                                                                 AS max_subscription_end_date
    FROM marketing_contact_order
    WHERE subscription_start_date is not null
    GROUP BY dim_marketing_contact_id

), namespace_notifications AS (

    SELECT
      COALESCE(notification_email, email) AS email_address,
      namespace_details.namespace_id      AS user_limit_namespace_id,
      dashboard_notification_at           AS user_limit_notification_at,
      dashboard_enforcement_at            AS user_limit_enforcement_at
    FROM namespace_details
    INNER JOIN dim_namespace
      ON namespace_details.namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN gitlab_dotcom_users_source AS user
      ON user.user_id = dim_namespace.creator_id
      AND state = 'active'
    WHERE dashboard_notification_at IS NOT NULL OR dashboard_enforcement_at IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY COALESCE(dashboard_notification_at, dashboard_enforcement_at) ASC) = 1

), paid_subscription_aggregate AS (

    SELECT 
      dim_marketing_contact_id,
      COUNT(DISTINCT dim_subscription_id)                                                        AS nbr_of_paid_subscriptions
    FROM marketing_contact_order
    WHERE dim_subscription_id is not null
      AND (is_saas_bronze_tier 
           OR is_saas_premium_tier 
           OR is_saas_ultimate_tier 
           OR is_self_managed_starter_tier
           OR is_self_managed_premium_tier
           OR is_self_managed_ultimate_tier
          )
    GROUP BY dim_marketing_contact_id

), distinct_contact_subscription AS (

    SELECT DISTINCT
      dim_marketing_contact_id,
      dim_subscription_id,
      usage_umau_28_days_user,
      usage_action_monthly_active_users_project_repo_28_days_user,
      usage_merge_requests_28_days_user,
      usage_commit_comment_all_time_event,
      usage_source_code_pushes_all_time_event,
      usage_ci_pipelines_28_days_user,
      usage_ci_internal_pipelines_28_days_user,
      usage_ci_builds_28_days_user,
      usage_ci_builds_all_time_user,
      usage_ci_builds_all_time_event,
      usage_ci_runners_all_time_event,
      usage_auto_devops_enabled_all_time_event,
      usage_template_repositories_all_time_event,
      usage_ci_pipeline_config_repository_28_days_user,
      usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_user_container_scanning_jobs_28_days_user,
      usage_user_sast_jobs_28_days_user,
      usage_user_dast_jobs_28_days_user,
      usage_user_dependency_scanning_jobs_28_days_user,
      usage_user_license_management_jobs_28_days_user,
      usage_user_secret_detection_jobs_28_days_user,
      usage_projects_with_packages_all_time_event,
      usage_projects_with_packages_28_days_event,
      usage_deployments_28_days_user,
      usage_releases_28_days_user,
      usage_epics_28_days_user,
      usage_issues_28_days_user,
      usage_instance_user_count_not_aligned,
      usage_historical_max_users_not_aligned
    FROM marketing_contact_order
    WHERE dim_subscription_id IS NOT NULL

), usage_metrics AS (

    SELECT 
      dim_marketing_contact_id,
      SUM(usage_umau_28_days_user)                                                                  AS usage_umau_28_days_user,
      SUM(usage_action_monthly_active_users_project_repo_28_days_user)                              AS usage_action_monthly_active_users_project_repo_28_days_user,
      SUM(usage_merge_requests_28_days_user)                                                        AS usage_merge_requests_28_days_user,
      SUM(usage_commit_comment_all_time_event)                                                      AS usage_commit_comment_all_time_event,
      SUM(usage_source_code_pushes_all_time_event)                                                  AS usage_source_code_pushes_all_time_event,
      SUM(usage_ci_pipelines_28_days_user)                                                          AS usage_ci_pipelines_28_days_user,
      SUM(usage_ci_internal_pipelines_28_days_user)                                                 AS usage_ci_internal_pipelines_28_days_user,
      SUM(usage_ci_builds_28_days_user)                                                             AS usage_ci_builds_28_days_user,
      SUM(usage_ci_builds_all_time_user)                                                            AS usage_ci_builds_all_time_user,
      SUM(usage_ci_builds_all_time_event)                                                           AS usage_ci_builds_all_time_event,
      SUM(usage_ci_runners_all_time_event)                                                          AS usage_ci_runners_all_time_event,
      SUM(usage_auto_devops_enabled_all_time_event)                                                 AS usage_auto_devops_enabled_all_time_event,
      SUM(usage_template_repositories_all_time_event)                                               AS usage_template_repositories_all_time_event,
      SUM(usage_ci_pipeline_config_repository_28_days_user)                                         AS usage_ci_pipeline_config_repository_28_days_user,
      SUM(usage_user_unique_users_all_secure_scanners_28_days_user)                                 AS usage_user_unique_users_all_secure_scanners_28_days_user,
      SUM(usage_user_container_scanning_jobs_28_days_user)                                          AS usage_user_container_scanning_jobs_28_days_user,
      SUM(usage_user_sast_jobs_28_days_user)                                                        AS usage_user_sast_jobs_28_days_user,
      SUM(usage_user_dast_jobs_28_days_user)                                                        AS usage_user_dast_jobs_28_days_user,
      SUM(usage_user_dependency_scanning_jobs_28_days_user)                                         AS usage_user_dependency_scanning_jobs_28_days_user,
      SUM(usage_user_license_management_jobs_28_days_user)                                          AS usage_user_license_management_jobs_28_days_user,
      SUM(usage_user_secret_detection_jobs_28_days_user)                                            AS usage_user_secret_detection_jobs_28_days_user,
      SUM(usage_projects_with_packages_all_time_event)                                              AS usage_projects_with_packages_all_time_event,
      SUM(usage_projects_with_packages_28_days_event)                                               AS usage_projects_with_packages_28_days_event,
      SUM(usage_deployments_28_days_user)                                                           AS usage_deployments_28_days_user,
      SUM(usage_releases_28_days_user)                                                              AS usage_releases_28_days_user,
      SUM(usage_epics_28_days_user)                                                                 AS usage_epics_28_days_user,
      SUM(usage_issues_28_days_user)                                                                AS usage_issues_28_days_user,
      SUM(usage_instance_user_count_not_aligned)                                                    AS usage_instance_user_count_not_aligned,
      SUM(usage_historical_max_users_not_aligned)                                                   AS usage_historical_max_users_not_aligned
    FROM distinct_contact_subscription
    GROUP BY dim_marketing_contact_id

), prep AS (
  
    SELECT     
      marketing_contact.dim_marketing_contact_id,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Member' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_member,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Personal Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_individual_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND (marketing_contact_order.is_saas_ultimate_tier OR marketing_contact_order.is_saas_premium_tier OR marketing_contact_order.is_saas_bronze_tier)
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_paid_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND marketing_contact_order.is_saas_free_tier
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_free_tier,
      IFF(is_group_maintainer_of_saas_free_tier OR is_group_maintainer_of_saas_paid_tier, TRUE, FALSE) AS is_group_maintainer_of_saas,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Customer DB Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_customer_db_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Zuora Billing Contact' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_zuora_billing_contact,
      MIN(marketing_contact_order.days_since_saas_trial_ended)                                   AS days_since_saas_trial_ended,
      MIN(marketing_contact_order.days_since_saas_trial_ended_bucket)                            AS days_since_saas_trial_ended_bucket,
      MAX(marketing_contact_order.days_until_saas_trial_ends)                                    AS days_until_saas_trial_ends,
      MAX(marketing_contact_order.days_until_saas_trial_ends_bucket)                             AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_trial,   
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_trial,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_ultimate_tier,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_ultimate_tier,      
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_starter_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_starter_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_premium_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_premium_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_ultimate_tier) >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_ultimate_tier,
      CASE
        WHEN MAX(marketing_contact_order.is_setup_for_company) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_setup_for_company_use,
      CASE
        WHEN MAX(marketing_contact_order.does_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.does_free_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_free_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_public) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_public_ultimate_parent_namespace,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_private) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_private_ultimate_parent_namespace,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_public = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS public_ultimate_parent_namespaces,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_private = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS private_ultimate_parent_namespaces,
      ARRAY_AGG(
                DISTINCT
                CASE
                  WHEN marketing_contact_order.is_ultimate_parent_namespace = FALSE
                    THEN NULL
                  ELSE IFNULL(marketing_contact_order.marketing_contact_role || ': ' || 
                    IFNULL(marketing_contact_order.namespace_path, CASE 
                                            WHEN marketing_contact_order.self_managed_product_tier IS NOT NULL
                                              THEN 'Self-Managed' 
                                            ELSE '' 
                                          END)  || ' | ' || 
                    IFNULL(marketing_contact_order.saas_product_tier, '') || 
                    IFNULL(marketing_contact_order.self_managed_product_tier, ''),
                    
                    'No Namespace') END
               )                                                                                 AS role_tier_ultimate_namespace_text

    FROM marketing_contact
    LEFT JOIN  marketing_contact_order
      ON marketing_contact_order.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    GROUP BY marketing_contact.dim_marketing_contact_id

), joined AS (

    SELECT 
      prep.*,
      IFF(individual_namespace_is_saas_bronze_tier
        OR group_owner_of_saas_bronze_tier
        OR group_member_of_saas_bronze_tier
        OR responsible_for_group_saas_bronze_tier,
        TRUE, FALSE)                                        AS is_saas_bronze_tier,
      IFF(individual_namespace_is_saas_premium_tier
        OR group_owner_of_saas_premium_tier
        OR group_member_of_saas_premium_tier
        OR responsible_for_group_saas_premium_tier,
        TRUE, FALSE)                                        AS is_saas_premium_tier,
      IFF(individual_namespace_is_saas_ultimate_tier
        OR group_owner_of_saas_ultimate_tier
        OR group_member_of_saas_ultimate_tier
        OR responsible_for_group_saas_ultimate_tier, 
        TRUE, FALSE)                                        AS is_saas_ultimate_tier,
      IFF(is_saas_bronze_tier
        OR is_self_managed_starter_tier,
        TRUE, FALSE)                                        AS is_bronze_starter_tier,
      IFF(is_saas_premium_tier
        OR is_self_managed_premium_tier,
        TRUE, FALSE)                                        AS is_premium_tier,
      IFF(is_saas_ultimate_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_ultimate_tier,                                                      
      IFF(is_saas_bronze_tier
        OR is_saas_premium_tier
        OR is_saas_ultimate_tier,
        TRUE, FALSE)                                        AS is_saas_delivery,
      IFF(is_self_managed_starter_tier
        OR is_self_managed_premium_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_self_managed_delivery,
      IFF(individual_namespace_is_saas_free_tier
        OR group_member_of_saas_free_tier
        OR group_owner_of_saas_free_tier,
        TRUE, FALSE)                                        AS is_saas_free_tier,
      IFF(is_saas_delivery
        OR is_self_managed_delivery,
        TRUE, FALSE)                                        AS is_paid_tier,
      marketing_contact.is_paid_tier_marketo,
      IFF(is_paid_tier = TRUE OR (is_paid_tier = FALSE AND marketing_contact.is_paid_tier_marketo = TRUE), TRUE, FALSE)
                                                            AS is_paid_tier_change,
      subscription_aggregate.min_subscription_start_date,
      subscription_aggregate.max_subscription_end_date,
      paid_subscription_aggregate.nbr_of_paid_subscriptions,
      CASE 
        WHEN (prep.responsible_for_group_saas_free_tier
              OR prep.individual_namespace_is_saas_free_tier
              OR prep.group_owner_of_saas_free_tier
             ) 
             AND NOT (prep.responsible_for_group_saas_ultimate_tier
                      OR prep.responsible_for_group_saas_premium_tier
                      OR prep.responsible_for_group_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_premium_tier
                      OR prep.individual_namespace_is_saas_ultimate_tier
                      OR prep.group_owner_of_saas_bronze_tier
                      OR prep.group_owner_of_saas_premium_tier
                      OR prep.group_owner_of_saas_ultimate_tier
                     )
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_free_tier_only,
      marketing_contact.email_address,
      marketing_contact.first_name,
      IFNULL(marketing_contact.last_name, 'Unknown')                                             AS last_name,
      marketing_contact.gitlab_user_name,
      IFNULL(marketing_contact.company_name, 'Unknown')                                          AS company_name,
      marketing_contact.sfdc_record_id,
      marketing_contact.dim_crm_account_id,
      marketing_contact.job_title,
      marketing_contact.it_job_title_hierarchy,
      marketing_contact.country,
      marketing_contact.mobile_phone,
      marketing_contact.sfdc_parent_sales_segment,
      marketing_contact.sfdc_parent_crm_account_region,
      marketing_contact.marketo_lead_id,
      marketing_contact.is_marketo_lead,
      marketing_contact.is_marketo_email_hard_bounced,
      marketing_contact.marketo_email_hard_bounced_date,
      marketing_contact.is_marketo_unsubscribed,
      marketing_contact.is_marketo_opted_in,
      marketing_contact.has_marketo_unsubscribed,
      marketing_contact.marketo_compliance_segment_value,
      marketing_contact.is_sfdc_lead_contact,
      marketing_contact.sfdc_lead_contact,
      marketing_contact.sfdc_created_date,
      marketing_contact.is_sfdc_opted_out,
      marketing_contact.is_gitlab_dotcom_user,
      marketing_contact.gitlab_dotcom_user_id,
      marketing_contact.gitlab_dotcom_created_date,
      marketing_contact.gitlab_dotcom_confirmed_date,
      marketing_contact.gitlab_dotcom_active_state,
      marketing_contact.gitlab_dotcom_last_login_date,
      marketing_contact.gitlab_dotcom_email_opted_in,
      marketing_contact.days_since_saas_signup,
      marketing_contact.days_since_saas_signup_bucket,
      marketing_contact.is_customer_db_user,
      marketing_contact.customer_db_customer_id,
      marketing_contact.customer_db_created_date,
      marketing_contact.customer_db_confirmed_date,
      IFF(latest_pql.email IS NOT NULL, TRUE, FALSE) AS is_pql,
      marketing_contact.is_pql_marketo,
      IFF(is_pql = TRUE OR (is_pql = FALSE AND marketing_contact.is_pql_marketo = TRUE), TRUE, FALSE)
                                            AS is_pql_change,
      latest_pql.pql_namespace_id,
      latest_pql.pql_namespace_name,
      latest_pql.pql_namespace_name_masked, 
      latest_pql.pql_product_interaction,
      latest_pql.pql_list_stages,
      latest_pql.pql_nbr_stages,
      latest_pql.pql_nbr_namespace_users,
      latest_pql.pql_trial_start_date,
      latest_pql.pql_min_subscription_start_date,
      latest_pql.pql_event_created_at,
      services_by_email.pql_nbr_integrations_installed,
      services_by_email.pql_integrations_installed,
      users_role_by_email.pql_namespace_creator_job_description,
      marketing_contact.days_since_self_managed_owner_signup,
      marketing_contact.days_since_self_managed_owner_signup_bucket,
      marketing_contact.zuora_contact_id,
      marketing_contact.zuora_created_date,
      marketing_contact.zuora_active_state,
      marketing_contact.wip_is_valid_email_address,
      marketing_contact.wip_invalid_email_address_reason,

      -- Propensity to purchase trials fields
      IFF(ptpt_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpt_contact,
      IFF(is_ptpt_contact = TRUE OR (is_ptpt_contact = FALSE AND marketing_contact.is_ptpt_contact_marketo = TRUE), TRUE, FALSE)
                                                  AS is_ptpt_contact_change,
      ptpt_scores_by_user.namespace_id            AS ptpt_namespace_id,
      ptpt_scores_by_user.score_group             AS ptpt_score_group,
      ptpt_scores_by_user.insights                AS ptpt_insights,
      ptpt_scores_by_user.score_date              AS ptpt_score_date,
      ptpt_scores_by_user.past_score_group        AS ptpt_past_score_group,
      ptpt_scores_by_user.past_score_date         AS ptpt_past_score_date,

      -- Propensity to purchase Free fields
      IFF(ptpf_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpf_contact,
      ptpf_scores_by_user.namespace_id            AS ptpf_namespace_id,
      ptpf_scores_by_user.score_group             AS ptpf_score_group,
      ptpf_scores_by_user.score_date              AS ptpf_score_date,
      ptpf_scores_by_user.past_score_group        AS ptpf_past_score_group,
      ptpf_scores_by_user.past_score_date         AS ptpf_past_score_date,

      -- Propensity to purchase fields
      IFF(ptp_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptp_contact,
      IFF(is_ptp_contact = TRUE OR (is_ptp_contact = FALSE AND marketing_contact.is_ptp_contact_marketo = TRUE
        ), TRUE, FALSE)
                                                  AS is_ptp_contact_change,
      ptp_scores_by_user.namespace_id             AS ptp_namespace_id,
      ptp_scores_by_user.score_group              AS ptp_score_group,
      ptp_scores_by_user.score_date               AS ptp_score_date,
      ptp_scores_by_user.insights                 AS ptp_insights,
      ptp_scores_by_user.past_insights            AS ptp_past_insights,
      ptp_scores_by_user.past_score_group         AS ptp_past_score_group,
      ptp_scores_by_user.past_score_date          AS ptp_past_score_date,
      CASE
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 0 AND 30 THEN '< 30 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 30 AND 60 THEN '30 - 60 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 60 AND 90 THEN '60 - 90 days'
        WHEN ptp_scores_by_user.days_since_trial_start >= 90 THEN '90+ days'
      END                                         AS ptp_days_since_trial_start,
      ptp_scores_by_user.ptp_source               AS ptp_source,

      -- Namespace notification dates
      namespace_notifications.user_limit_namespace_id,
      namespace_notifications.user_limit_notification_at,
      namespace_notifications.user_limit_enforcement_at,
      IFF(namespace_notifications.user_limit_notification_at IS NOT NULL OR namespace_notifications.user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                              AS is_impacted_by_user_limit,
      IFF(is_impacted_by_user_limit = TRUE OR (is_impacted_by_user_limit = FALSE AND marketing_contact.is_impacted_by_user_limit_marketo = TRUE), TRUE, FALSE)
                                                  AS is_impacted_by_user_limit_change,

      usage_metrics.usage_umau_28_days_user,
      usage_metrics.usage_action_monthly_active_users_project_repo_28_days_user,
      usage_metrics.usage_merge_requests_28_days_user,
      usage_metrics.usage_commit_comment_all_time_event,
      usage_metrics.usage_source_code_pushes_all_time_event,
      usage_metrics.usage_ci_pipelines_28_days_user,
      usage_metrics.usage_ci_internal_pipelines_28_days_user,
      usage_metrics.usage_ci_builds_28_days_user,
      usage_metrics.usage_ci_builds_all_time_user,
      usage_metrics.usage_ci_builds_all_time_event,
      usage_metrics.usage_ci_runners_all_time_event,
      usage_metrics.usage_auto_devops_enabled_all_time_event,
      usage_metrics.usage_template_repositories_all_time_event,
      usage_metrics.usage_ci_pipeline_config_repository_28_days_user,
      usage_metrics.usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_metrics.usage_user_container_scanning_jobs_28_days_user,
      usage_metrics.usage_user_sast_jobs_28_days_user,
      usage_metrics.usage_user_dast_jobs_28_days_user,
      usage_metrics.usage_user_dependency_scanning_jobs_28_days_user,
      usage_metrics.usage_user_license_management_jobs_28_days_user,
      usage_metrics.usage_user_secret_detection_jobs_28_days_user,
      usage_metrics.usage_projects_with_packages_all_time_event,
      usage_metrics.usage_projects_with_packages_28_days_event,
      usage_metrics.usage_deployments_28_days_user,
      usage_metrics.usage_releases_28_days_user,
      usage_metrics.usage_epics_28_days_user,
      usage_metrics.usage_issues_28_days_user,
      usage_metrics.usage_instance_user_count_not_aligned,
      usage_metrics.usage_historical_max_users_not_aligned,
      'Raw'                                                                                      AS lead_status,
      'Snowflake Email Marketing Database'                                                       AS lead_source      
    FROM prep
    LEFT JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN subscription_aggregate
      ON subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN paid_subscription_aggregate
      ON paid_subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN usage_metrics
      ON usage_metrics.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN latest_pql
      ON latest_pql.email = marketing_contact.email_address
    LEFT JOIN services_by_email
      ON services_by_email.email = marketing_contact.email_address
    LEFT JOIN users_role_by_email
      ON users_role_by_email.email = marketing_contact.email_address
    LEFT JOIN ptpt_scores_by_user
      ON ptpt_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptpf_scores_by_user
      ON ptpf_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptp_scores_by_user
      ON ptp_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN namespace_notifications
      ON namespace_notifications.email_address = marketing_contact.email_address
)

{{ hash_diff(
    cte_ref="joined",
    return_cte="final",
    columns=[
      'is_group_namespace_owner',
      'is_group_namespace_member',
      'is_individual_namespace_owner',
      'is_customer_db_owner',
      'is_zuora_billing_contact',
      'days_since_saas_trial_ended_bucket',
      'individual_namespace_is_saas_trial',
      'individual_namespace_is_saas_free_tier',
      'individual_namespace_is_saas_bronze_tier',
      'individual_namespace_is_saas_premium_tier',
      'individual_namespace_is_saas_ultimate_tier',
      'group_member_of_saas_trial',
      'group_member_of_saas_free_tier',
      'group_member_of_saas_bronze_tier',
      'group_member_of_saas_premium_tier',
      'group_member_of_saas_ultimate_tier',
      'group_owner_of_saas_trial',
      'group_owner_of_saas_free_tier',
      'group_owner_of_saas_bronze_tier',
      'group_owner_of_saas_premium_tier',
      'group_owner_of_saas_ultimate_tier',
      'responsible_for_group_saas_trial',
      'responsible_for_group_saas_free_tier',
      'responsible_for_group_saas_bronze_tier',
      'responsible_for_group_saas_premium_tier',
      'responsible_for_group_saas_ultimate_tier',
      'is_self_managed_starter_tier',
      'is_self_managed_premium_tier',
      'is_self_managed_ultimate_tier',
      'email_address',
      'first_name',
      'last_name',
      'gitlab_user_name',
      'company_name',
      'country',
      'is_gitlab_dotcom_user',
      'gitlab_dotcom_user_id',
      'gitlab_dotcom_created_date',
      'gitlab_dotcom_confirmed_date',
      'gitlab_dotcom_active_state',
      'gitlab_dotcom_last_login_date',
      'gitlab_dotcom_email_opted_in',
      'is_customer_db_user',
      'customer_db_customer_id',
      'customer_db_created_date',
      'customer_db_confirmed_date',
      'zuora_contact_id',
      'zuora_created_date',
      'zuora_active_state',
      'pql_list_stages',
      'pql_nbr_stages',
      'pql_nbr_namespace_users',
      'has_namespace_setup_for_company_use',
      'pql_namespace_id',
      'pql_namespace_name',
      'pql_nbr_integrations_installed',
      'pql_integrations_installed',
      'pql_namespace_creator_job_description',
      'is_pql',
      'is_paid_tier',
      'is_pql_change',
      'is_paid_tier_change',
      'is_ptpt_contact',
      'is_ptpt_contact_change',
      'ptpt_namespace_id',
      'ptpt_score_group',
      'ptpt_insights',
      'ptpt_score_date',
      'ptpt_past_score_group',
      'is_member_of_public_ultimate_parent_namespace',
      'is_member_of_private_ultimate_parent_namespace',
      'user_limit_notification_at',
      'user_limit_enforcement_at',
      'is_impacted_by_user_limit',
      'is_impacted_by_user_limit_change',
      'user_limit_namespace_id',
      'marketo_lead_id',
      'is_ptp_contact',
      'is_ptp_contact_change',
      'ptp_namespace_id',
      'ptp_score_group',
      'ptp_score_date',
      'ptp_insights',
      'ptp_past_insights',
      'ptp_past_score_group',
      'ptp_days_since_trial_start',
      'ptp_source'
      ]
) }}

{{ dbt_audit(
    cte_ref="final",
    created_by="@trevor31",
    updated_by="@jpeguero",
    created_date="2021-02-09",
    updated_date="2023-06-19"
) }}17:Tea0b,
    


WITH marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), marketing_contact_order AS (

    SELECT * 
    FROM "PREP".sensitive.bdg_marketing_contact_order

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), gitlab_dotcom_namespaces_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), gitlab_dotcom_members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_dotcom_memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), customers_db_charges_xf AS (

    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

), customers_db_trials AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_trials

), customers_db_leads AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), fct_event_user_daily AS (

    SELECT * 
    FROM "PROD".common.fct_event_user_daily

), map_gitlab_dotcom_xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), services AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), ptpt_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptpt_scores_by_user

), ptpf_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptpf_scores_by_user

), ptp_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptp_scores_by_user

), namespace_details AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_details_source

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    group by 1,2,3

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    group by 1,2,3,4,5,6,7
  
), pqls_with_product_information AS (

    SELECT
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION ALL

    SELECT 
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), latest_pql AS (

    SELECT
      pqls_with_product_information.*,
      gitlab_dotcom_namespaces_source.namespace_name                        AS pql_namespace_name
    FROM pqls_with_product_information
    LEFT JOIN gitlab_dotcom_namespaces_source
      ON gitlab_dotcom_namespaces_source.namespace_id = pqls_with_product_information.pql_namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email ORDER BY pql_event_created_at DESC) = 1

), services_by_email AS (

    SELECT
      latest_pql.email                                                                           AS email,
      COUNT(*)                                                                                   AS pql_nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS pql_integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    LEFT JOIN latest_pql
      ON latest_pql.pql_namespace_id = project.dim_namespace_id
    GROUP BY 1

), users_role_by_email AS (

    SELECT
      latest_pql.email,
      marketing_contact.job_title AS pql_namespace_creator_job_description
    FROM latest_pql 
    INNER JOIN dim_namespace
      ON latest_pql.pql_namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN marketing_contact
      ON dim_namespace.creator_id = marketing_contact.gitlab_dotcom_user_id

)
-------------------------- End of PQL logic --------------------------

, subscription_aggregate AS (

    SELECT
      dim_marketing_contact_id,
      MIN(subscription_start_date)                                                               AS min_subscription_start_date,
      MAX(subscription_end_date)                                                                 AS max_subscription_end_date
    FROM marketing_contact_order
    WHERE subscription_start_date is not null
    GROUP BY dim_marketing_contact_id

), namespace_notifications AS (

    SELECT
      COALESCE(notification_email, email) AS email_address,
      namespace_details.namespace_id      AS user_limit_namespace_id,
      dashboard_notification_at           AS user_limit_notification_at,
      dashboard_enforcement_at            AS user_limit_enforcement_at
    FROM namespace_details
    INNER JOIN dim_namespace
      ON namespace_details.namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN gitlab_dotcom_users_source AS user
      ON user.user_id = dim_namespace.creator_id
      AND state = 'active'
    WHERE dashboard_notification_at IS NOT NULL OR dashboard_enforcement_at IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY COALESCE(dashboard_notification_at, dashboard_enforcement_at) ASC) = 1

), paid_subscription_aggregate AS (

    SELECT 
      dim_marketing_contact_id,
      COUNT(DISTINCT dim_subscription_id)                                                        AS nbr_of_paid_subscriptions
    FROM marketing_contact_order
    WHERE dim_subscription_id is not null
      AND (is_saas_bronze_tier 
           OR is_saas_premium_tier 
           OR is_saas_ultimate_tier 
           OR is_self_managed_starter_tier
           OR is_self_managed_premium_tier
           OR is_self_managed_ultimate_tier
          )
    GROUP BY dim_marketing_contact_id

), distinct_contact_subscription AS (

    SELECT DISTINCT
      dim_marketing_contact_id,
      dim_subscription_id,
      usage_umau_28_days_user,
      usage_action_monthly_active_users_project_repo_28_days_user,
      usage_merge_requests_28_days_user,
      usage_commit_comment_all_time_event,
      usage_source_code_pushes_all_time_event,
      usage_ci_pipelines_28_days_user,
      usage_ci_internal_pipelines_28_days_user,
      usage_ci_builds_28_days_user,
      usage_ci_builds_all_time_user,
      usage_ci_builds_all_time_event,
      usage_ci_runners_all_time_event,
      usage_auto_devops_enabled_all_time_event,
      usage_template_repositories_all_time_event,
      usage_ci_pipeline_config_repository_28_days_user,
      usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_user_container_scanning_jobs_28_days_user,
      usage_user_sast_jobs_28_days_user,
      usage_user_dast_jobs_28_days_user,
      usage_user_dependency_scanning_jobs_28_days_user,
      usage_user_license_management_jobs_28_days_user,
      usage_user_secret_detection_jobs_28_days_user,
      usage_projects_with_packages_all_time_event,
      usage_projects_with_packages_28_days_event,
      usage_deployments_28_days_user,
      usage_releases_28_days_user,
      usage_epics_28_days_user,
      usage_issues_28_days_user,
      usage_instance_user_count_not_aligned,
      usage_historical_max_users_not_aligned
    FROM marketing_contact_order
    WHERE dim_subscription_id IS NOT NULL

), usage_metrics AS (

    SELECT 
      dim_marketing_contact_id,
      SUM(usage_umau_28_days_user)                                                                  AS usage_umau_28_days_user,
      SUM(usage_action_monthly_active_users_project_repo_28_days_user)                              AS usage_action_monthly_active_users_project_repo_28_days_user,
      SUM(usage_merge_requests_28_days_user)                                                        AS usage_merge_requests_28_days_user,
      SUM(usage_commit_comment_all_time_event)                                                      AS usage_commit_comment_all_time_event,
      SUM(usage_source_code_pushes_all_time_event)                                                  AS usage_source_code_pushes_all_time_event,
      SUM(usage_ci_pipelines_28_days_user)                                                          AS usage_ci_pipelines_28_days_user,
      SUM(usage_ci_internal_pipelines_28_days_user)                                                 AS usage_ci_internal_pipelines_28_days_user,
      SUM(usage_ci_builds_28_days_user)                                                             AS usage_ci_builds_28_days_user,
      SUM(usage_ci_builds_all_time_user)                                                            AS usage_ci_builds_all_time_user,
      SUM(usage_ci_builds_all_time_event)                                                           AS usage_ci_builds_all_time_event,
      SUM(usage_ci_runners_all_time_event)                                                          AS usage_ci_runners_all_time_event,
      SUM(usage_auto_devops_enabled_all_time_event)                                                 AS usage_auto_devops_enabled_all_time_event,
      SUM(usage_template_repositories_all_time_event)                                               AS usage_template_repositories_all_time_event,
      SUM(usage_ci_pipeline_config_repository_28_days_user)                                         AS usage_ci_pipeline_config_repository_28_days_user,
      SUM(usage_user_unique_users_all_secure_scanners_28_days_user)                                 AS usage_user_unique_users_all_secure_scanners_28_days_user,
      SUM(usage_user_container_scanning_jobs_28_days_user)                                          AS usage_user_container_scanning_jobs_28_days_user,
      SUM(usage_user_sast_jobs_28_days_user)                                                        AS usage_user_sast_jobs_28_days_user,
      SUM(usage_user_dast_jobs_28_days_user)                                                        AS usage_user_dast_jobs_28_days_user,
      SUM(usage_user_dependency_scanning_jobs_28_days_user)                                         AS usage_user_dependency_scanning_jobs_28_days_user,
      SUM(usage_user_license_management_jobs_28_days_user)                                          AS usage_user_license_management_jobs_28_days_user,
      SUM(usage_user_secret_detection_jobs_28_days_user)                                            AS usage_user_secret_detection_jobs_28_days_user,
      SUM(usage_projects_with_packages_all_time_event)                                              AS usage_projects_with_packages_all_time_event,
      SUM(usage_projects_with_packages_28_days_event)                                               AS usage_projects_with_packages_28_days_event,
      SUM(usage_deployments_28_days_user)                                                           AS usage_deployments_28_days_user,
      SUM(usage_releases_28_days_user)                                                              AS usage_releases_28_days_user,
      SUM(usage_epics_28_days_user)                                                                 AS usage_epics_28_days_user,
      SUM(usage_issues_28_days_user)                                                                AS usage_issues_28_days_user,
      SUM(usage_instance_user_count_not_aligned)                                                    AS usage_instance_user_count_not_aligned,
      SUM(usage_historical_max_users_not_aligned)                                                   AS usage_historical_max_users_not_aligned
    FROM distinct_contact_subscription
    GROUP BY dim_marketing_contact_id

), prep AS (
  
    SELECT     
      marketing_contact.dim_marketing_contact_id,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Member' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_member,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Personal Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_individual_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND (marketing_contact_order.is_saas_ultimate_tier OR marketing_contact_order.is_saas_premium_tier OR marketing_contact_order.is_saas_bronze_tier)
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_paid_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND marketing_contact_order.is_saas_free_tier
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_free_tier,
      IFF(is_group_maintainer_of_saas_free_tier OR is_group_maintainer_of_saas_paid_tier, TRUE, FALSE) AS is_group_maintainer_of_saas,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Customer DB Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_customer_db_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Zuora Billing Contact' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_zuora_billing_contact,
      MIN(marketing_contact_order.days_since_saas_trial_ended)                                   AS days_since_saas_trial_ended,
      MIN(marketing_contact_order.days_since_saas_trial_ended_bucket)                            AS days_since_saas_trial_ended_bucket,
      MAX(marketing_contact_order.days_until_saas_trial_ends)                                    AS days_until_saas_trial_ends,
      MAX(marketing_contact_order.days_until_saas_trial_ends_bucket)                             AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_trial,   
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_trial,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_ultimate_tier,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_ultimate_tier,      
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_starter_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_starter_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_premium_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_premium_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_ultimate_tier) >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_ultimate_tier,
      CASE
        WHEN MAX(marketing_contact_order.is_setup_for_company) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_setup_for_company_use,
      CASE
        WHEN MAX(marketing_contact_order.does_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.does_free_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_free_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_public) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_public_ultimate_parent_namespace,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_private) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_private_ultimate_parent_namespace,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_public = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS public_ultimate_parent_namespaces,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_private = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS private_ultimate_parent_namespaces,
      ARRAY_AGG(
                DISTINCT
                CASE
                  WHEN marketing_contact_order.is_ultimate_parent_namespace = FALSE
                    THEN NULL
                  ELSE IFNULL(marketing_contact_order.marketing_contact_role || ': ' || 
                    IFNULL(marketing_contact_order.namespace_path, CASE 
                                            WHEN marketing_contact_order.self_managed_product_tier IS NOT NULL
                                              THEN 'Self-Managed' 
                                            ELSE '' 
                                          END)  || ' | ' || 
                    IFNULL(marketing_contact_order.saas_product_tier, '') || 
                    IFNULL(marketing_contact_order.self_managed_product_tier, ''),
                    
                    'No Namespace') END
               )                                                                                 AS role_tier_ultimate_namespace_text

    FROM marketing_contact
    LEFT JOIN  marketing_contact_order
      ON marketing_contact_order.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    GROUP BY marketing_contact.dim_marketing_contact_id

), joined AS (

    SELECT 
      prep.*,
      IFF(individual_namespace_is_saas_bronze_tier
        OR group_owner_of_saas_bronze_tier
        OR group_member_of_saas_bronze_tier
        OR responsible_for_group_saas_bronze_tier,
        TRUE, FALSE)                                        AS is_saas_bronze_tier,
      IFF(individual_namespace_is_saas_premium_tier
        OR group_owner_of_saas_premium_tier
        OR group_member_of_saas_premium_tier
        OR responsible_for_group_saas_premium_tier,
        TRUE, FALSE)                                        AS is_saas_premium_tier,
      IFF(individual_namespace_is_saas_ultimate_tier
        OR group_owner_of_saas_ultimate_tier
        OR group_member_of_saas_ultimate_tier
        OR responsible_for_group_saas_ultimate_tier, 
        TRUE, FALSE)                                        AS is_saas_ultimate_tier,
      IFF(is_saas_bronze_tier
        OR is_self_managed_starter_tier,
        TRUE, FALSE)                                        AS is_bronze_starter_tier,
      IFF(is_saas_premium_tier
        OR is_self_managed_premium_tier,
        TRUE, FALSE)                                        AS is_premium_tier,
      IFF(is_saas_ultimate_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_ultimate_tier,                                                      
      IFF(is_saas_bronze_tier
        OR is_saas_premium_tier
        OR is_saas_ultimate_tier,
        TRUE, FALSE)                                        AS is_saas_delivery,
      IFF(is_self_managed_starter_tier
        OR is_self_managed_premium_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_self_managed_delivery,
      IFF(individual_namespace_is_saas_free_tier
        OR group_member_of_saas_free_tier
        OR group_owner_of_saas_free_tier,
        TRUE, FALSE)                                        AS is_saas_free_tier,
      IFF(is_saas_delivery
        OR is_self_managed_delivery,
        TRUE, FALSE)                                        AS is_paid_tier,
      marketing_contact.is_paid_tier_marketo,
      IFF(is_paid_tier = TRUE OR (is_paid_tier = FALSE AND marketing_contact.is_paid_tier_marketo = TRUE), TRUE, FALSE)
                                                            AS is_paid_tier_change,
      subscription_aggregate.min_subscription_start_date,
      subscription_aggregate.max_subscription_end_date,
      paid_subscription_aggregate.nbr_of_paid_subscriptions,
      CASE 
        WHEN (prep.responsible_for_group_saas_free_tier
              OR prep.individual_namespace_is_saas_free_tier
              OR prep.group_owner_of_saas_free_tier
             ) 
             AND NOT (prep.responsible_for_group_saas_ultimate_tier
                      OR prep.responsible_for_group_saas_premium_tier
                      OR prep.responsible_for_group_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_premium_tier
                      OR prep.individual_namespace_is_saas_ultimate_tier
                      OR prep.group_owner_of_saas_bronze_tier
                      OR prep.group_owner_of_saas_premium_tier
                      OR prep.group_owner_of_saas_ultimate_tier
                     )
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_free_tier_only,
      marketing_contact.email_address,
      marketing_contact.first_name,
      IFNULL(marketing_contact.last_name, 'Unknown')                                             AS last_name,
      marketing_contact.gitlab_user_name,
      IFNULL(marketing_contact.company_name, 'Unknown')                                          AS company_name,
      marketing_contact.sfdc_record_id,
      marketing_contact.dim_crm_account_id,
      marketing_contact.job_title,
      marketing_contact.it_job_title_hierarchy,
      marketing_contact.country,
      marketing_contact.mobile_phone,
      marketing_contact.sfdc_parent_sales_segment,
      marketing_contact.sfdc_parent_crm_account_region,
      marketing_contact.marketo_lead_id,
      marketing_contact.is_marketo_lead,
      marketing_contact.is_marketo_email_hard_bounced,
      marketing_contact.marketo_email_hard_bounced_date,
      marketing_contact.is_marketo_unsubscribed,
      marketing_contact.is_marketo_opted_in,
      marketing_contact.has_marketo_unsubscribed,
      marketing_contact.marketo_compliance_segment_value,
      marketing_contact.is_sfdc_lead_contact,
      marketing_contact.sfdc_lead_contact,
      marketing_contact.sfdc_created_date,
      marketing_contact.is_sfdc_opted_out,
      marketing_contact.is_gitlab_dotcom_user,
      marketing_contact.gitlab_dotcom_user_id,
      marketing_contact.gitlab_dotcom_created_date,
      marketing_contact.gitlab_dotcom_confirmed_date,
      marketing_contact.gitlab_dotcom_active_state,
      marketing_contact.gitlab_dotcom_last_login_date,
      marketing_contact.gitlab_dotcom_email_opted_in,
      marketing_contact.days_since_saas_signup,
      marketing_contact.days_since_saas_signup_bucket,
      marketing_contact.is_customer_db_user,
      marketing_contact.customer_db_customer_id,
      marketing_contact.customer_db_created_date,
      marketing_contact.customer_db_confirmed_date,
      IFF(latest_pql.email IS NOT NULL, TRUE, FALSE) AS is_pql,
      marketing_contact.is_pql_marketo,
      IFF(is_pql = TRUE OR (is_pql = FALSE AND marketing_contact.is_pql_marketo = TRUE), TRUE, FALSE)
                                            AS is_pql_change,
      latest_pql.pql_namespace_id,
      latest_pql.pql_namespace_name,
      latest_pql.pql_namespace_name_masked, 
      latest_pql.pql_product_interaction,
      latest_pql.pql_list_stages,
      latest_pql.pql_nbr_stages,
      latest_pql.pql_nbr_namespace_users,
      latest_pql.pql_trial_start_date,
      latest_pql.pql_min_subscription_start_date,
      latest_pql.pql_event_created_at,
      services_by_email.pql_nbr_integrations_installed,
      services_by_email.pql_integrations_installed,
      users_role_by_email.pql_namespace_creator_job_description,
      marketing_contact.days_since_self_managed_owner_signup,
      marketing_contact.days_since_self_managed_owner_signup_bucket,
      marketing_contact.zuora_contact_id,
      marketing_contact.zuora_created_date,
      marketing_contact.zuora_active_state,
      marketing_contact.wip_is_valid_email_address,
      marketing_contact.wip_invalid_email_address_reason,

      -- Propensity to purchase trials fields
      IFF(ptpt_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpt_contact,
      IFF(is_ptpt_contact = TRUE OR (is_ptpt_contact = FALSE AND marketing_contact.is_ptpt_contact_marketo = TRUE), TRUE, FALSE)
                                                  AS is_ptpt_contact_change,
      ptpt_scores_by_user.namespace_id            AS ptpt_namespace_id,
      ptpt_scores_by_user.score_group             AS ptpt_score_group,
      ptpt_scores_by_user.insights                AS ptpt_insights,
      ptpt_scores_by_user.score_date              AS ptpt_score_date,
      ptpt_scores_by_user.past_score_group        AS ptpt_past_score_group,
      ptpt_scores_by_user.past_score_date         AS ptpt_past_score_date,

      -- Propensity to purchase Free fields
      IFF(ptpf_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpf_contact,
      ptpf_scores_by_user.namespace_id            AS ptpf_namespace_id,
      ptpf_scores_by_user.score_group             AS ptpf_score_group,
      ptpf_scores_by_user.score_date              AS ptpf_score_date,
      ptpf_scores_by_user.past_score_group        AS ptpf_past_score_group,
      ptpf_scores_by_user.past_score_date         AS ptpf_past_score_date,

      -- Propensity to purchase fields
      IFF(ptp_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptp_contact,
      IFF(is_ptp_contact = TRUE OR (is_ptp_contact = FALSE AND marketing_contact.is_ptp_contact_marketo = TRUE
        ), TRUE, FALSE)
                                                  AS is_ptp_contact_change,
      ptp_scores_by_user.namespace_id             AS ptp_namespace_id,
      ptp_scores_by_user.score_group              AS ptp_score_group,
      ptp_scores_by_user.score_date               AS ptp_score_date,
      ptp_scores_by_user.insights                 AS ptp_insights,
      ptp_scores_by_user.past_insights            AS ptp_past_insights,
      ptp_scores_by_user.past_score_group         AS ptp_past_score_group,
      ptp_scores_by_user.past_score_date          AS ptp_past_score_date,
      CASE
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 0 AND 30 THEN '< 30 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 30 AND 60 THEN '30 - 60 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 60 AND 90 THEN '60 - 90 days'
        WHEN ptp_scores_by_user.days_since_trial_start >= 90 THEN '90+ days'
      END                                         AS ptp_days_since_trial_start,
      ptp_scores_by_user.ptp_source               AS ptp_source,

      -- Namespace notification dates
      namespace_notifications.user_limit_namespace_id,
      namespace_notifications.user_limit_notification_at,
      namespace_notifications.user_limit_enforcement_at,
      IFF(namespace_notifications.user_limit_notification_at IS NOT NULL OR namespace_notifications.user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                              AS is_impacted_by_user_limit,
      IFF(is_impacted_by_user_limit = TRUE OR (is_impacted_by_user_limit = FALSE AND marketing_contact.is_impacted_by_user_limit_marketo = TRUE), TRUE, FALSE)
                                                  AS is_impacted_by_user_limit_change,

      usage_metrics.usage_umau_28_days_user,
      usage_metrics.usage_action_monthly_active_users_project_repo_28_days_user,
      usage_metrics.usage_merge_requests_28_days_user,
      usage_metrics.usage_commit_comment_all_time_event,
      usage_metrics.usage_source_code_pushes_all_time_event,
      usage_metrics.usage_ci_pipelines_28_days_user,
      usage_metrics.usage_ci_internal_pipelines_28_days_user,
      usage_metrics.usage_ci_builds_28_days_user,
      usage_metrics.usage_ci_builds_all_time_user,
      usage_metrics.usage_ci_builds_all_time_event,
      usage_metrics.usage_ci_runners_all_time_event,
      usage_metrics.usage_auto_devops_enabled_all_time_event,
      usage_metrics.usage_template_repositories_all_time_event,
      usage_metrics.usage_ci_pipeline_config_repository_28_days_user,
      usage_metrics.usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_metrics.usage_user_container_scanning_jobs_28_days_user,
      usage_metrics.usage_user_sast_jobs_28_days_user,
      usage_metrics.usage_user_dast_jobs_28_days_user,
      usage_metrics.usage_user_dependency_scanning_jobs_28_days_user,
      usage_metrics.usage_user_license_management_jobs_28_days_user,
      usage_metrics.usage_user_secret_detection_jobs_28_days_user,
      usage_metrics.usage_projects_with_packages_all_time_event,
      usage_metrics.usage_projects_with_packages_28_days_event,
      usage_metrics.usage_deployments_28_days_user,
      usage_metrics.usage_releases_28_days_user,
      usage_metrics.usage_epics_28_days_user,
      usage_metrics.usage_issues_28_days_user,
      usage_metrics.usage_instance_user_count_not_aligned,
      usage_metrics.usage_historical_max_users_not_aligned,
      'Raw'                                                                                      AS lead_status,
      'Snowflake Email Marketing Database'                                                       AS lead_source      
    FROM prep
    LEFT JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN subscription_aggregate
      ON subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN paid_subscription_aggregate
      ON paid_subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN usage_metrics
      ON usage_metrics.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN latest_pql
      ON latest_pql.email = marketing_contact.email_address
    LEFT JOIN services_by_email
      ON services_by_email.email = marketing_contact.email_address
    LEFT JOIN users_role_by_email
      ON users_role_by_email.email = marketing_contact.email_address
    LEFT JOIN ptpt_scores_by_user
      ON ptpt_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptpf_scores_by_user
      ON ptpf_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptp_scores_by_user
      ON ptp_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN namespace_notifications
      ON namespace_notifications.email_address = marketing_contact.email_address
)



  , hashing AS (

    SELECT *,

      md5(cast(coalesce(cast(is_group_namespace_owner as 
    varchar
), '') || '-' || coalesce(cast(is_group_namespace_member as 
    varchar
), '') || '-' || coalesce(cast(is_individual_namespace_owner as 
    varchar
), '') || '-' || coalesce(cast(is_customer_db_owner as 
    varchar
), '') || '-' || coalesce(cast(is_zuora_billing_contact as 
    varchar
), '') || '-' || coalesce(cast(days_since_saas_trial_ended_bucket as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_starter_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(email_address as 
    varchar
), '') || '-' || coalesce(cast(first_name as 
    varchar
), '') || '-' || coalesce(cast(last_name as 
    varchar
), '') || '-' || coalesce(cast(gitlab_user_name as 
    varchar
), '') || '-' || coalesce(cast(company_name as 
    varchar
), '') || '-' || coalesce(cast(country as 
    varchar
), '') || '-' || coalesce(cast(is_gitlab_dotcom_user as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_user_id as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_created_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_active_state as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_last_login_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_email_opted_in as 
    varchar
), '') || '-' || coalesce(cast(is_customer_db_user as 
    varchar
), '') || '-' || coalesce(cast(customer_db_customer_id as 
    varchar
), '') || '-' || coalesce(cast(customer_db_created_date as 
    varchar
), '') || '-' || coalesce(cast(customer_db_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(zuora_contact_id as 
    varchar
), '') || '-' || coalesce(cast(zuora_created_date as 
    varchar
), '') || '-' || coalesce(cast(zuora_active_state as 
    varchar
), '') || '-' || coalesce(cast(pql_list_stages as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_stages as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_namespace_users as 
    varchar
), '') || '-' || coalesce(cast(has_namespace_setup_for_company_use as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_name as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_integrations_installed as 
    varchar
), '') || '-' || coalesce(cast(pql_integrations_installed as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_creator_job_description as 
    varchar
), '') || '-' || coalesce(cast(is_pql as 
    varchar
), '') || '-' || coalesce(cast(is_paid_tier as 
    varchar
), '') || '-' || coalesce(cast(is_pql_change as 
    varchar
), '') || '-' || coalesce(cast(is_paid_tier_change as 
    varchar
), '') || '-' || coalesce(cast(is_ptpt_contact as 
    varchar
), '') || '-' || coalesce(cast(is_ptpt_contact_change as 
    varchar
), '') || '-' || coalesce(cast(ptpt_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(ptpt_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptpt_insights as 
    varchar
), '') || '-' || coalesce(cast(ptpt_score_date as 
    varchar
), '') || '-' || coalesce(cast(ptpt_past_score_group as 
    varchar
), '') || '-' || coalesce(cast(is_member_of_public_ultimate_parent_namespace as 
    varchar
), '') || '-' || coalesce(cast(is_member_of_private_ultimate_parent_namespace as 
    varchar
), '') || '-' || coalesce(cast(user_limit_notification_at as 
    varchar
), '') || '-' || coalesce(cast(user_limit_enforcement_at as 
    varchar
), '') || '-' || coalesce(cast(is_impacted_by_user_limit as 
    varchar
), '') || '-' || coalesce(cast(is_impacted_by_user_limit_change as 
    varchar
), '') || '-' || coalesce(cast(user_limit_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(marketo_lead_id as 
    varchar
), '') || '-' || coalesce(cast(is_ptp_contact as 
    varchar
), '') || '-' || coalesce(cast(is_ptp_contact_change as 
    varchar
), '') || '-' || coalesce(cast(ptp_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(ptp_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptp_score_date as 
    varchar
), '') || '-' || coalesce(cast(ptp_insights as 
    varchar
), '') || '-' || coalesce(cast(ptp_past_insights as 
    varchar
), '') || '-' || coalesce(cast(ptp_past_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptp_days_since_trial_start as 
    varchar
), '') || '-' || coalesce(cast(ptp_source as 
    varchar
), '') as 
    varchar
)) as prev_hash

    FROM joined

  ), final as (

      

        SELECT hashing.*,
          CASE
            WHEN hashing.prev_hash = t.prev_hash THEN last_changed
            ELSE CURRENT_TIMESTAMP()
          END AS last_changed
        FROM hashing
        LEFT JOIN "PREP".sensitive.mart_marketing_contact as t on t.prev_hash = hashing.prev_hash

      

  )


SELECT
      *,
      '@trevor31'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-09'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final18:Tbf3,Array of objects containing information related to each ultimate parent namespace that the marketing contact is directly related to. Each object inside the array is a different namespace.

For the trial fields in the objects, in case a namespace has had multiple trials only the latest one will be used to populate the fields. If a namespace never had a trials, these fields will not exist in the object.

Each object in the array contains the following fields (in case it does not, it means that the attribute is not applicable to that namespace):

- **Namespace_id**: Gitlab.com namespace_id of the namespace in question.
- **user_access_level**: Numerical value representing the access level the marketing user contact has to the namespace. Mapping of the numerical values can be seen [HERE](https://docs.gitlab.com/ee/api/access_requests.html).
- **user_access_level_name**: Name of the access level the marketing user contact has to the namespace.
- **gitlab_plan_title**: Plan of the namespace.
- **gitlab_plan_is_paid**: Flag indicating whether the namespace is paid or not.
- **is_setup_for_company**: Flag indicating whether the namespace was set up for company use or not.
- **current_member_count**: Number of members in the namespace
- **created_at**: Creation timestamp of the namespace.
- **creator_user_id**: The gitlab_dotcom_user_id of the creator of the namespace.
- **is_setup_for_company**: Flag indicating whether the namespace was set up for company use or not.
- **trial_start_date**: Trial start date of the namespace. 
- **trial_expired_date**: Date in which the trial expires/expired at. 
- **is_active_trial**: Flag that indicates whether the namespace is in an active trial. 
- **glm_content**: GLM content of the trial. 
- **glm_source**: GLM source of the trial. 
- **is_namespace_pql**: Flag indicating whether the namespace is part of the PQL program (Product Qualified Lead). 
- **list_of_stages**: Array listing all the stages adopted by the namespace during Trial and/or Free process. 
- **nbr_integrations_installed**: Number integrations installed in the namespace. 
- **integrations_installed**: Array listing all the integrations installed in the namespace. 
- **ptp_source**: Source of the propensity to purchase model. Currently, that can be from either PtPT (Propensity to Purchase: Trial) or PtPF (Propensity to Purchase: Free) models. 
- **ptp_score_date**: Date in which the ptp_score_group was calculated. 
- **ptp_score_group**: Score group for the namespace given by the PtP machine learning model. 
- **ptp_insights**: List of insights on the PtP scores. 
- **ptp_previous_score_group**: Previous score group for the namespace given by the PtP machine learning model. 
- **user_limit_notification_at**: Datetime detailing when the user limit notification happened for the namespace. 
- **user_limit_enforcement_at**: Datetime detailing when the user limit enforcement will happen for the namespace. 
- **is_impacted_by_user_limit**: Flag indicating whether the namespace is impacted by the user limits project.19:T49a2,{{ config(
    materialized='table'
) }}

{{ simple_cte([
    ('dim_marketing_contact','dim_marketing_contact'),
    ('gitlab_dotcom_members_source','gitlab_dotcom_members_source'),
    ('dim_namespace', 'dim_namespace'),
    ('ptpt_scores', 'ptpt_scores'),
    ('ptpf_scores', 'ptpf_scores'),
    ('customers_db_trial_histories_source', 'customers_db_trial_histories_source'),
    ('gitlab_dotcom_namespace_details_source', 'gitlab_dotcom_namespace_details_source'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source'),

    ('gitlab_dotcom_memberships', 'gitlab_dotcom_memberships'),
    ('customers_db_trials', 'customers_db_trials'),
    ('customers_db_charges_xf', 'customers_db_charges_xf'),
    ('customers_db_leads', 'customers_db_leads_source'),
    ('map_gitlab_dotcom_xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
    ('services', 'gitlab_dotcom_integrations_source'),
    ('project', 'prep_project'),
    ('fct_event_user_daily', 'fct_event_user_daily')
]) }}

, ptpt_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), ptpt_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpt_score_dates
    LIMIT 1

), ptpf_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), ptpf_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpf_score_dates
    LIMIT 1

), namespace_user_mapping AS (

  SELECT DISTINCT
    gitlab_dotcom_members_source.user_id,
    gitlab_dotcom_members_source.source_id AS namespace_id,
    dim_namespace.ultimate_parent_namespace_id,
    gitlab_dotcom_members_source.access_level
  FROM gitlab_dotcom_members_source
  LEFT JOIN dim_namespace
    ON gitlab_dotcom_members_source.source_id = dim_namespace.dim_namespace_id
  WHERE gitlab_dotcom_members_source.is_currently_valid = TRUE
    AND gitlab_dotcom_members_source.member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('gitlab_dotcom_members_source', 'user_id') }}
    AND gitlab_dotcom_members_source.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_dotcom_members_source.user_id, gitlab_dotcom_members_source.source_id
    ORDER BY gitlab_dotcom_members_source.access_level DESC) = 1 -- There are less than 100 cases where a user has more than one access level to
    -- the same namespace. This selects the highest of said access levels

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    {{ dbt_utils.group_by(3) }}

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    {{ dbt_utils.group_by(7) }}
  
), pqls_filtered AS (

    SELECT
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION

    SELECT 
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), services_by_namespace AS (

    SELECT
      project.dim_namespace_id                                                                   AS dim_namespace_id,
      COUNT(*)                                                                                   AS nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    INNER JOIN namespaces
      ON namespaces.dim_namespace_id = project.dim_namespace_id
    GROUP BY 1

), pqls_by_user AS (

    SELECT DISTINCT user_id
    FROM pqls

)

-------------------------- End of PQL logic --------------------------

, stages_adopted_by_namespace AS (

  SELECT DISTINCT
    dim_namespace_id,
    list_of_stages,
    active_stage_count
  FROM stages_adopted

), namespace_details AS (

  SELECT
    namespace_user_mapping.user_id,
    dim_namespace.dim_namespace_id                                              AS namespace_id,
    namespace_user_mapping.access_level                                         AS user_access_level,
    CASE user_access_level
      WHEN 50 THEN 'Owner'
      WHEN 40 THEN 'Maintainer'
      WHEN 30 THEN 'Developer'
      WHEN 20 THEN 'Reporter'
      WHEN 10 THEN 'Guest'
      WHEN 5  THEN 'Minimal access'
      ELSE 'Other'
    END                                                                         AS user_access_level_name,

    dim_namespace.gitlab_plan_title,
    dim_namespace.gitlab_plan_is_paid,
    dim_namespace.is_setup_for_company,
    dim_namespace.current_member_count,
    dim_namespace.created_at                                                    AS created_at,
    dim_namespace.creator_id                                                    AS creator_user_id,

    customers_db_trial_histories_source.start_date                              AS trial_start_date,
    customers_db_trial_histories_source.expired_on                              AS trial_expired_date,
    IFF(CURRENT_DATE() >= trial_start_date AND CURRENT_DATE() <= COALESCE(trial_expired_date, CURRENT_DATE()), TRUE, FALSE) 
                                                                                AS is_active_trial,
    customers_db_trial_histories_source.glm_content,
    customers_db_trial_histories_source.glm_source,

    IFF(pqls_filtered.pql_namespace_id IS NOT NULL, TRUE, FALSE)                AS is_namespace_pql,

    stages_adopted_by_namespace.list_of_stages,
    stages_adopted_by_namespace.active_stage_count,
    services_by_namespace.nbr_integrations_installed,
    services_by_namespace.integrations_installed,

    
    CASE
      WHEN last_ptpt_scores.score_group >= 4
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group >= 4
        THEN 'Free'
      WHEN last_ptpt_scores.score_group IS NOT NULL
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group IS NOT NULL
        THEN 'Free'
      ELSE NULL
    END                                                                         AS ptp_source,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_date, last_ptpf_scores.score_date)
                                                                                AS ptp_score_date,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_group, last_ptpf_scores.score_group)
                                                                                AS ptp_score_group,
    IFF(ptp_source = 'Trial', last_ptpt_scores.insights, last_ptpf_scores.insights)
                                                                                AS ptp_insights,
    IFF(ptp_source = 'Trial', second_last_ptpt_scores.score_group, second_last_ptpf_scores.score_group)
                                                                                AS ptp_previous_score_group,

    gitlab_dotcom_namespace_details_source.dashboard_notification_at            AS user_limit_notification_at,
    gitlab_dotcom_namespace_details_source.dashboard_enforcement_at             AS user_limit_enforcement_at,
    IFF(user_limit_notification_at IS NOT NULL OR user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                                                            AS is_impacted_by_user_limit

  FROM namespace_user_mapping
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
    AND namespace_is_ultimate_parent = TRUE
  LEFT JOIN ptpt_last_dates
  LEFT JOIN ptpt_scores AS last_ptpt_scores
    ON last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpt_scores.score_date = ptpt_last_dates.last_score_date
  LEFT JOIN ptpt_scores AS second_last_ptpt_scores
    ON second_last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpt_scores.score_date = ptpt_last_dates.second_last_score_date
  LEFT JOIN ptpf_last_dates
  LEFT JOIN ptpf_scores AS last_ptpf_scores
    ON last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpf_scores.score_date = ptpf_last_dates.last_score_date
  LEFT JOIN ptpf_scores AS second_last_ptpf_scores
    ON second_last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpf_scores.score_date = ptpf_last_dates.second_last_score_date
  LEFT JOIN customers_db_trial_histories_source
    ON customers_db_trial_histories_source.gl_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN gitlab_dotcom_namespace_details_source
    ON gitlab_dotcom_namespace_details_source.namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN stages_adopted_by_namespace
    ON stages_adopted_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN pqls_filtered
    ON pqls_filtered.pql_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN services_by_namespace
    ON services_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id

), user_aggregated_namespace_details AS (

  SELECT 
    user_id,
    ARRAY_AGG(OBJECT_CONSTRUCT(*)) AS namespaces_array
  FROM namespace_details
  GROUP BY 1
  
), user_trials AS (

  SELECT
    user_id,
    MAX(trial_start_date) AS max_trial_start_date
  FROM namespace_details
  GROUP BY 1

  ), user_details_and_namespace_details AS (

  SELECT
    dim_marketing_contact.dim_marketing_contact_id,
    dim_marketing_contact.email_address,
    dim_marketing_contact.first_name,
    dim_marketing_contact.last_name,
    dim_marketing_contact.country,
    dim_marketing_contact.company_name,
    dim_marketing_contact.job_title,
    dim_marketing_contact.gitlab_dotcom_user_id,
    dim_marketing_contact.gitlab_user_name,
    dim_marketing_contact.gitlab_dotcom_active_state,
    dim_marketing_contact.gitlab_dotcom_confirmed_date,
    dim_marketing_contact.gitlab_dotcom_created_date,
    dim_marketing_contact.gitlab_dotcom_last_login_date,
    dim_marketing_contact.gitlab_dotcom_email_opted_in,
    IFF(pqls_by_user.user_id IS NOT NULL, TRUE, FALSE) AS is_pql,
    user_trials.max_trial_start_date,
    user_aggregated_namespace_details.namespaces_array

  FROM dim_marketing_contact
  LEFT JOIN user_aggregated_namespace_details
    ON dim_marketing_contact.gitlab_dotcom_user_id = user_aggregated_namespace_details.user_id
  LEFT JOIN pqls_by_user
    ON pqls_by_user.user_id = dim_marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN user_trials
    ON user_trials.user_id = dim_marketing_contact.gitlab_dotcom_user_id

  WHERE dim_marketing_contact.gitlab_dotcom_user_id IS NOT NULL
    AND (
      dim_marketing_contact.gitlab_dotcom_created_date::DATE >= '2022-06-01'
      OR user_trials.max_trial_start_date::DATE >= DATEADD('month', -3, CURRENT_DATE)
    )

)

{{ hash_diff(
    cte_ref="user_details_and_namespace_details",
    return_cte="final",
    columns=[
      'first_name',
      'last_name',
      'country',
      'company_name',
      'job_title',
      'gitlab_dotcom_user_id',
      'gitlab_user_name',
      'gitlab_dotcom_active_state',
      'gitlab_dotcom_confirmed_date',
      'gitlab_dotcom_created_date',
      'gitlab_dotcom_last_login_date',
      'gitlab_dotcom_email_opted_in',
      'is_pql',
      'max_trial_start_date',
      'namespaces_array'
      ]
) }}

SELECT *
FROM final1a:T502a,



WITH dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), gitlab_dotcom_members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), ptpt_scores AS (

    SELECT * 
    FROM "PROD".workspace_data_science.ptpt_scores

), ptpf_scores AS (

    SELECT * 
    FROM "PROD".workspace_data_science.ptpf_scores

), customers_db_trial_histories_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), gitlab_dotcom_namespace_details_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_details_source

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), gitlab_dotcom_memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), customers_db_trials AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_trials

), customers_db_charges_xf AS (

    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

), customers_db_leads AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), map_gitlab_dotcom_xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), services AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), fct_event_user_daily AS (

    SELECT * 
    FROM "PROD".common.fct_event_user_daily

)

, ptpt_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), ptpt_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpt_score_dates
    LIMIT 1

), ptpf_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), ptpf_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpf_score_dates
    LIMIT 1

), namespace_user_mapping AS (

  SELECT DISTINCT
    gitlab_dotcom_members_source.user_id,
    gitlab_dotcom_members_source.source_id AS namespace_id,
    dim_namespace.ultimate_parent_namespace_id,
    gitlab_dotcom_members_source.access_level
  FROM gitlab_dotcom_members_source
  LEFT JOIN dim_namespace
    ON gitlab_dotcom_members_source.source_id = dim_namespace.dim_namespace_id
  WHERE gitlab_dotcom_members_source.is_currently_valid = TRUE
    AND gitlab_dotcom_members_source.member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = gitlab_dotcom_members_source.user_id

    )
    AND gitlab_dotcom_members_source.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_dotcom_members_source.user_id, gitlab_dotcom_members_source.source_id
    ORDER BY gitlab_dotcom_members_source.access_level DESC) = 1 -- There are less than 100 cases where a user has more than one access level to
    -- the same namespace. This selects the highest of said access levels

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    group by 1,2,3

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    group by 1,2,3,4,5,6,7
  
), pqls_filtered AS (

    SELECT
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION

    SELECT 
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), services_by_namespace AS (

    SELECT
      project.dim_namespace_id                                                                   AS dim_namespace_id,
      COUNT(*)                                                                                   AS nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    INNER JOIN namespaces
      ON namespaces.dim_namespace_id = project.dim_namespace_id
    GROUP BY 1

), pqls_by_user AS (

    SELECT DISTINCT user_id
    FROM pqls

)

-------------------------- End of PQL logic --------------------------

, stages_adopted_by_namespace AS (

  SELECT DISTINCT
    dim_namespace_id,
    list_of_stages,
    active_stage_count
  FROM stages_adopted

), namespace_details AS (

  SELECT
    namespace_user_mapping.user_id,
    dim_namespace.dim_namespace_id                                              AS namespace_id,
    namespace_user_mapping.access_level                                         AS user_access_level,
    CASE user_access_level
      WHEN 50 THEN 'Owner'
      WHEN 40 THEN 'Maintainer'
      WHEN 30 THEN 'Developer'
      WHEN 20 THEN 'Reporter'
      WHEN 10 THEN 'Guest'
      WHEN 5  THEN 'Minimal access'
      ELSE 'Other'
    END                                                                         AS user_access_level_name,

    dim_namespace.gitlab_plan_title,
    dim_namespace.gitlab_plan_is_paid,
    dim_namespace.is_setup_for_company,
    dim_namespace.current_member_count,
    dim_namespace.created_at                                                    AS created_at,
    dim_namespace.creator_id                                                    AS creator_user_id,

    customers_db_trial_histories_source.start_date                              AS trial_start_date,
    customers_db_trial_histories_source.expired_on                              AS trial_expired_date,
    IFF(CURRENT_DATE() >= trial_start_date AND CURRENT_DATE() <= COALESCE(trial_expired_date, CURRENT_DATE()), TRUE, FALSE) 
                                                                                AS is_active_trial,
    customers_db_trial_histories_source.glm_content,
    customers_db_trial_histories_source.glm_source,

    IFF(pqls_filtered.pql_namespace_id IS NOT NULL, TRUE, FALSE)                AS is_namespace_pql,

    stages_adopted_by_namespace.list_of_stages,
    stages_adopted_by_namespace.active_stage_count,
    services_by_namespace.nbr_integrations_installed,
    services_by_namespace.integrations_installed,

    
    CASE
      WHEN last_ptpt_scores.score_group >= 4
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group >= 4
        THEN 'Free'
      WHEN last_ptpt_scores.score_group IS NOT NULL
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group IS NOT NULL
        THEN 'Free'
      ELSE NULL
    END                                                                         AS ptp_source,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_date, last_ptpf_scores.score_date)
                                                                                AS ptp_score_date,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_group, last_ptpf_scores.score_group)
                                                                                AS ptp_score_group,
    IFF(ptp_source = 'Trial', last_ptpt_scores.insights, last_ptpf_scores.insights)
                                                                                AS ptp_insights,
    IFF(ptp_source = 'Trial', second_last_ptpt_scores.score_group, second_last_ptpf_scores.score_group)
                                                                                AS ptp_previous_score_group,

    gitlab_dotcom_namespace_details_source.dashboard_notification_at            AS user_limit_notification_at,
    gitlab_dotcom_namespace_details_source.dashboard_enforcement_at             AS user_limit_enforcement_at,
    IFF(user_limit_notification_at IS NOT NULL OR user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                                                            AS is_impacted_by_user_limit

  FROM namespace_user_mapping
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
    AND namespace_is_ultimate_parent = TRUE
  LEFT JOIN ptpt_last_dates
  LEFT JOIN ptpt_scores AS last_ptpt_scores
    ON last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpt_scores.score_date = ptpt_last_dates.last_score_date
  LEFT JOIN ptpt_scores AS second_last_ptpt_scores
    ON second_last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpt_scores.score_date = ptpt_last_dates.second_last_score_date
  LEFT JOIN ptpf_last_dates
  LEFT JOIN ptpf_scores AS last_ptpf_scores
    ON last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpf_scores.score_date = ptpf_last_dates.last_score_date
  LEFT JOIN ptpf_scores AS second_last_ptpf_scores
    ON second_last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpf_scores.score_date = ptpf_last_dates.second_last_score_date
  LEFT JOIN customers_db_trial_histories_source
    ON customers_db_trial_histories_source.gl_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN gitlab_dotcom_namespace_details_source
    ON gitlab_dotcom_namespace_details_source.namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN stages_adopted_by_namespace
    ON stages_adopted_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN pqls_filtered
    ON pqls_filtered.pql_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN services_by_namespace
    ON services_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id

), user_aggregated_namespace_details AS (

  SELECT 
    user_id,
    ARRAY_AGG(OBJECT_CONSTRUCT(*)) AS namespaces_array
  FROM namespace_details
  GROUP BY 1
  
), user_trials AS (

  SELECT
    user_id,
    MAX(trial_start_date) AS max_trial_start_date
  FROM namespace_details
  GROUP BY 1

  ), user_details_and_namespace_details AS (

  SELECT
    dim_marketing_contact.dim_marketing_contact_id,
    dim_marketing_contact.email_address,
    dim_marketing_contact.first_name,
    dim_marketing_contact.last_name,
    dim_marketing_contact.country,
    dim_marketing_contact.company_name,
    dim_marketing_contact.job_title,
    dim_marketing_contact.gitlab_dotcom_user_id,
    dim_marketing_contact.gitlab_user_name,
    dim_marketing_contact.gitlab_dotcom_active_state,
    dim_marketing_contact.gitlab_dotcom_confirmed_date,
    dim_marketing_contact.gitlab_dotcom_created_date,
    dim_marketing_contact.gitlab_dotcom_last_login_date,
    dim_marketing_contact.gitlab_dotcom_email_opted_in,
    IFF(pqls_by_user.user_id IS NOT NULL, TRUE, FALSE) AS is_pql,
    user_trials.max_trial_start_date,
    user_aggregated_namespace_details.namespaces_array

  FROM dim_marketing_contact
  LEFT JOIN user_aggregated_namespace_details
    ON dim_marketing_contact.gitlab_dotcom_user_id = user_aggregated_namespace_details.user_id
  LEFT JOIN pqls_by_user
    ON pqls_by_user.user_id = dim_marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN user_trials
    ON user_trials.user_id = dim_marketing_contact.gitlab_dotcom_user_id

  WHERE dim_marketing_contact.gitlab_dotcom_user_id IS NOT NULL
    AND (
      dim_marketing_contact.gitlab_dotcom_created_date::DATE >= '2022-06-01'
      OR user_trials.max_trial_start_date::DATE >= DATEADD('month', -3, CURRENT_DATE)
    )

)



  , hashing AS (

    SELECT *,

      md5(cast(coalesce(cast(first_name as 
    varchar
), '') || '-' || coalesce(cast(last_name as 
    varchar
), '') || '-' || coalesce(cast(country as 
    varchar
), '') || '-' || coalesce(cast(company_name as 
    varchar
), '') || '-' || coalesce(cast(job_title as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_user_id as 
    varchar
), '') || '-' || coalesce(cast(gitlab_user_name as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_active_state as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_created_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_last_login_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_email_opted_in as 
    varchar
), '') || '-' || coalesce(cast(is_pql as 
    varchar
), '') || '-' || coalesce(cast(max_trial_start_date as 
    varchar
), '') || '-' || coalesce(cast(namespaces_array as 
    varchar
), '') as 
    varchar
)) as prev_hash

    FROM user_details_and_namespace_details

  ), final as (

      

        SELECT hashing.*,
          CASE
            WHEN hashing.prev_hash = t.prev_hash THEN last_changed
            ELSE CURRENT_TIMESTAMP()
          END AS last_changed
        FROM hashing
        LEFT JOIN "PREP".sensitive.poc_pump_marketing_contact_namespace_detail as t on t.prev_hash = hashing.prev_hash

      

  )


SELECT *
FROM final1b:T113b,WITH customers AS (
  
    SELECT * 
    FROM {{ ref('customers_db_customers_source') }}
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM {{ ref('customers_db_orders_snapshots_base') }}
  
)

, orders_with_valid_charges AS (
  
    SELECT * 
    FROM {{ ref('customers_db_orders_with_valid_charges') }}
  
)

, trials AS (
  
    SELECT * 
    FROM {{ ref('customers_db_trials') }}
  
)

, zuora_rp AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan')}}
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan_charge')}}
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM {{ ref('zuora_subscription_xf')}}
  
)

, orders_with_subscriptions_without_product_plan_rate AS (
  
  SELECT DISTINCT
    order_id,
    subscription_id,
    subscription_name_slugify,
    customer_id,
    gitlab_namespace_id,
    product_rate_plan_id,
    FIRST_VALUE(order_created_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_from ASC) AS order_created_at,
    FIRST_VALUE(order_updated_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_to ASC)   AS order_updated_at
  FROM orders_snapshots
  WHERE orders_snapshots.product_rate_plan_id IS NULL 
    AND orders_snapshots.order_is_trial = FALSE
    AND orders_snapshots.subscription_id IS NOT NULL

)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      opr.customer_id,
      opr.gitlab_namespace_id,
      opr.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
       
      -- Orders metadata
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(opr.gitlab_namespace_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.gitlab_namespace_id IS NOT NULL DESC,
                        opr.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS trial_start_date
    
    FROM orders_with_subscriptions_without_product_plan_rate AS opr 
    INNER JOIN customers ON opr.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON opr.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND opr.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON opr.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    {{ dbt_utils.group_by(n=9) }}
    
)

, filtered_out_charges_with_valid_data AS (
  
  SELECT joined_with_customer_and_namespace_list.* 
  FROM joined_with_customer_and_namespace_list
  LEFT JOIN orders_with_valid_charges
    ON joined_with_customer_and_namespace_list.rate_plan_charge_id = orders_with_valid_charges.rate_plan_charge_id
  WHERE orders_with_valid_charges.rate_plan_charge_id IS NULL
)

SELECT * 
FROM filtered_out_charges_with_valid_data1c:Ta27,This is an intermediate ephemeral model used in the `customers_db_charges_xf`. Each row is a different zuora rate_plan_charge with a unique `rate_plan_charge_id` key.

As described in the `customers_db_orders` documentation, this base table has some weird overriding logics. When a subscription expires, the orders associated to this subscription lose some key important metadata: `product_rate_plan_id`.

Example:

| ORDER_ID | CUSTOMER_ID | SUBSCRIPTION_NAME_SLUGIFY | ORDER_IS_TRIAL | GITLAB_NAMESPACE_ID | ORDER_START_DATE        | ORDER_END_DATE          | PRODUCT_RATE_PLAN_ID             |
|----------|-------------|---------------------------|----------------|---------------------|-------------------------|-------------------------|----------------------------------|
| 5336     | 9010        | a-s00007947               | FALSE          | 2542496             | 2018-03-02 00:00:00.000 | 2019-03-02 00:00:00.000 |   

That means that all these expired subscriptions can't be captured and joined in a clean way to zuora models (we both join on `subscription_name_slugify` and `product_rate_plan_id`). 

This model isolates these subscriptions and will join them to zuora tables only through the `subscription_name_slugify` key.

Weird behavior of the `customers_db_orders` tables are that a subscription (unique `subscription_name_slugify`) can be linked to several customer accounts (`customer_id`) and therefore we can find several `customer_id` for the same `subscription_name_slugify`. We then capture the following metadata: 

* `current_customer_id` which is the `customer_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_customer_id` which is the `customer_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `customer_id_list`: all customers that are linked to a specific subscription.  


During the life of an order, the customer can change the namespace attached to the subscription. Using snapshots helps us record these changes. We capture the following 2 fields: 

* `current_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `gitlab_namespace_id_list`: all gitlab_namespace that are linked to a specific subscription.

We finally join with the `customers_db_orders_with_valid_charges` in order to exclude the `rate_plan_charge_id` that are already in this model.1d:T1160,WITH customers AS (
  
    SELECT * 
    FROM "PREP".customers.customers_db_customers_source
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, orders_with_valid_charges AS (
  
    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_orders_with_valid_charges
  
)

, trials AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_trials
  
)

, zuora_rp AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_rate_plan
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_rate_plan_charge
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_subscription_xf
  
)

, orders_with_subscriptions_without_product_plan_rate AS (
  
  SELECT DISTINCT
    order_id,
    subscription_id,
    subscription_name_slugify,
    customer_id,
    gitlab_namespace_id,
    product_rate_plan_id,
    FIRST_VALUE(order_created_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_from ASC) AS order_created_at,
    FIRST_VALUE(order_updated_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_to ASC)   AS order_updated_at
  FROM orders_snapshots
  WHERE orders_snapshots.product_rate_plan_id IS NULL 
    AND orders_snapshots.order_is_trial = FALSE
    AND orders_snapshots.subscription_id IS NOT NULL

)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      opr.customer_id,
      opr.gitlab_namespace_id,
      opr.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
       
      -- Orders metadata
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(opr.gitlab_namespace_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.gitlab_namespace_id IS NOT NULL DESC,
                        opr.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS trial_start_date
    
    FROM orders_with_subscriptions_without_product_plan_rate AS opr 
    INNER JOIN customers ON opr.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON opr.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND opr.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON opr.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    group by 1,2,3,4,5,6,7,8,9
    
)

, filtered_out_charges_with_valid_data AS (
  
  SELECT joined_with_customer_and_namespace_list.* 
  FROM joined_with_customer_and_namespace_list
  LEFT JOIN orders_with_valid_charges
    ON joined_with_customer_and_namespace_list.rate_plan_charge_id = orders_with_valid_charges.rate_plan_charge_id
  WHERE orders_with_valid_charges.rate_plan_charge_id IS NULL
)

SELECT * 
FROM filtered_out_charges_with_valid_data1e:T1126,WITH customers AS (
  
    SELECT * 
    FROM {{ ref('customers_db_customers_source') }}
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM {{ ref('customers_db_orders_snapshots_base') }}
  
)

, trials AS (
  
    SELECT * 
    FROM {{ ref('customers_db_trials') }}
  
)

, zuora_rp AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan')}}
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan_charge')}}
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM {{ ref('zuora_subscription_xf')}}
  
)

, orders_with_subscription AS (
  
    SELECT DISTINCT
      order_id,
      subscription_id,
      subscription_name_slugify,
      customer_id,
      gitlab_namespace_id,
      product_rate_plan_id,
      FIRST_VALUE(order_created_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_created_at,
      LAST_VALUE(order_updated_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_updated_at
    FROM orders_snapshots
    WHERE orders_snapshots.product_rate_plan_id IS NOT NULL 
      AND orders_snapshots.order_is_trial = FALSE
      AND orders_snapshots.subscription_id IS NOT NULL
)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      orders_with_subscription.customer_id,
      orders_with_subscription.gitlab_namespace_id,
      orders_with_subscription.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
      
      -- Orders metadata
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(orders_with_subscription.gitlab_namespace_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.gitlab_namespace_id IS NOT NULL DESC,
                        orders_with_subscription.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS trial_start_date
    
    FROM orders_with_subscription 
    INNER JOIN customers ON orders_with_subscription.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON orders_with_subscription.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND orders_with_subscription.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON orders_with_subscription.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    {{ dbt_utils.group_by(n=9) }}
    
)

SELECT * 
FROM joined_with_customer_and_namespace_list1f:T75d,This is an intermediate ephemeral model used in the `customers_db_charges_xf`. Each row is a different zuora rate_plan_charge with a unique `rate_plan_charge_id` key.

We isolate from the `customers_db_orders_snapshots` table the orders with the following criteria:

* `subscription_name_slugify` is not NULL
* `product_rate_plan_id` is not NULL
* `order_is_trial` is FALSE 

This will help us identify paid orders that were active when we started recording snapshots (Sept. 2019). From this, we will join them to zuora tables with the following keys:

* `subscription_name_slugify` joins to `zuora_subscription_xf`
* `product_rate_plan_id` joins to `zuora_rate_plan`

Weird behavior of the `customers_db_orders` tables are that a subscription (unique `subscription_name_slugify`) can be linked to several customer accounts (`customer_id`) and therefore we can find several `customer_id` for the same `subscription_name_slugify`. We then capture the following metadata: 

* `current_customer_id` which is the `customer_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_customer_id` which is the `customer_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `customer_id_list`: all customers that are linked to a specific subscription.  


During the life of an order, the customer can change the namespace attached to the subscription. Using snapshots helps us record these changes. We capture the following 2 fields: 

* `current_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `gitlab_namespace_id_list`: all gitlab_namespace that are linked to a specific subscription.20:T113a,WITH customers AS (
  
    SELECT * 
    FROM "PREP".customers.customers_db_customers_source
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, trials AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_trials
  
)

, zuora_rp AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_rate_plan
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_rate_plan_charge
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_subscription_xf
  
)

, orders_with_subscription AS (
  
    SELECT DISTINCT
      order_id,
      subscription_id,
      subscription_name_slugify,
      customer_id,
      gitlab_namespace_id,
      product_rate_plan_id,
      FIRST_VALUE(order_created_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_created_at,
      LAST_VALUE(order_updated_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_updated_at
    FROM orders_snapshots
    WHERE orders_snapshots.product_rate_plan_id IS NOT NULL 
      AND orders_snapshots.order_is_trial = FALSE
      AND orders_snapshots.subscription_id IS NOT NULL
)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      orders_with_subscription.customer_id,
      orders_with_subscription.gitlab_namespace_id,
      orders_with_subscription.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
      
      -- Orders metadata
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(orders_with_subscription.gitlab_namespace_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.gitlab_namespace_id IS NOT NULL DESC,
                        orders_with_subscription.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS trial_start_date
    
    FROM orders_with_subscription 
    INNER JOIN customers ON orders_with_subscription.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON orders_with_subscription.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND orders_with_subscription.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON orders_with_subscription.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    group by 1,2,3,4,5,6,7,8,9
    
)

SELECT * 
FROM joined_with_customer_and_namespace_list21:Tc59,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (

    SELECT *
    FROM {{ ref('customers_db_customers') }}

), trials AS  (

    SELECT *
    FROM {{ ref('customers_db_trials') }}

), users AS (

    SELECT
      {{ dbt_utils.star(from=ref('gitlab_dotcom_users')) }},
      created_at AS user_created_at,
      updated_at AS user_updated_at
    FROM {{ ref('gitlab_dotcom_users') }}

), highest_paid_subscription_plan AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_highest_paid_subscription_plan') }}

),   customers_with_trial AS (

    SELECT
      customers.customer_provider_user_id                         AS user_id,
      MIN(customers.customer_id)                                  AS first_customer_id,
      MIN(customers.customer_created_at)                          AS first_customer_created_at,
      ARRAY_AGG(customers.customer_id)
          WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
      MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
      MIN(trial_start_date)                                       AS has_started_trial_at
    FROM customers
      LEFT JOIN trials
        ON customers.customer_id = trials.customer_id
    WHERE customers.customer_provider = 'gitlab'
    GROUP BY 1

),   joined AS (
    SELECT
      users.*,
      TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
      TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
      CASE
        WHEN account_age <= 1 THEN '1 - 1 day or less'
        WHEN account_age <= 7 THEN '2 - 2 to 7 days'
        WHEN account_age <= 14 THEN '3 - 8 to 14 days'
        WHEN account_age <= 30 THEN '4 - 15 to 30 days'
        WHEN account_age <= 60 THEN '5 - 31 to 60 days'
        WHEN account_age > 60 THEN '6 - Over 60 days'
      END                                                                           AS account_age_cohort,

      highest_paid_subscription_plan.highest_paid_subscription_plan_id,
      highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
      highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
      highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

      IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
      customers_with_trial.first_customer_created_at,
      customers_with_trial.first_customer_id,
      customers_with_trial.customer_id_list,
      customers_with_trial.has_started_trial,
      customers_with_trial.has_started_trial_at

    FROM users
      LEFT JOIN highest_paid_subscription_plan
        ON users.user_id = highest_paid_subscription_plan.user_id
      LEFT JOIN customers_with_trial
        ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
    WHERE {{ filter_out_active_users('users', 'user_id') }}

)

SELECT *
FROM joined22:T912,This model extends the base model `gitlab_dotcom_users` and adds several other dimensions as well a filter out active users

### Age cohorts
This model adds account age cohorts to the users table, the defined cohorts are:

1-  1 day or less  
2-  2 to 7 days  
3-  8 to 14 days  
4-  15 to 30 days  
5-  31 to 60 days  
6-  Over 60 days  

The CTE does this by comparing the time of the dbt run with `created_at` in the users table.

### Highest inherited subscription

This model documents the highest subscription a user inherits from. Rules around inheritance are a bit complicated, as stated in the handbook [here](https://about.gitlab.com/handbook/marketing/product-marketing/enablement/dotcom-subscriptions/#common-misconceptions),

>>>
Reality: GitLab.com subscriptions are scoped to a namespace, and individual users could participate in many groups with different subscription types. For example, they might have personal projects on a Free subscription type, participate in an open-source project that has Gold features (because it's public) while their company has a Silver subscription.
>>>

A user inherits from a subscription when:
* They are a member of a group/sub-group that has a paid subscription.
* They are a member of a project which belongs to a group with a paid subscription
* They have a personal subscription attached to their personal namespace.

Some gotchas:
* If a user is part of a public open-source (or edu) group/project, they will not inherit from the Gold subscription of the group/project.
* If a user is part of a project created by another user's personal namespace, they won't inherit from the owner's namespace subscription.

We then know for each user: what's the highest plan they inherit from and where they inherit it from.

If a user inherits from 2+ subscriptions with the same plan, we choose one subscription over the other based on the inheritance source: First, user, then groups, then projects.

### Subscription Portal (customers.gitlab.com) data 

This model surfaces also if a user has created an account or not in the subscription portal by joining with the `customers_db_customers` table. It also informs us if a specific user has already started a trial and if so when. 

### Misc

A `days_active` column is added by comparing `created_at` with `last_activity_on`23:T1c4a,

WITH  __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
),customers AS (

    SELECT *
    FROM "PROD".legacy.customers_db_customers

), trials AS  (

    SELECT *
    FROM "PROD".legacy.customers_db_trials

), users AS (

    SELECT
      "USER_ID",
  "REMEMBER_CREATED_AT",
  "SIGN_IN_COUNT",
  "CURRENT_SIGN_IN_AT",
  "LAST_SIGN_IN_AT",
  "CREATED_AT",
  "UPDATED_AT",
  "IS_ADMIN",
  "PROJECTS_LIMIT",
  "FAILED_ATTEMPTS",
  "LOCKED_AT",
  "USER_LOCKED",
  "HAS_CREATE_GROUP_PERMISSIONS",
  "HAS_CREATE_TEAM_PERMISSIONS",
  "STATE",
  "COLOR_SCHEME_ID",
  "PASSWORD_EXPIRES_AT",
  "CREATED_BY_ID",
  "LAST_CREDENTIAL_CHECK_AT",
  "HAS_AVATAR",
  "CONFIRMED_AT",
  "CONFIRMATION_SENT_AT",
  "HAS_HIDE_NO_SSH_KEY_ENABLED",
  "ADMIN_EMAIL_UNSUBSCRIBED_AT",
  "NOTIFICATION_EMAIL",
  "NOTIFICATION_EMAIL_DOMAIN",
  "HAS_HIDE_NO_PASSWORD_ENABLED",
  "IS_PASSWORD_AUTOMATICALLY_SET",
  "LOCATION",
  "EMAIL",
  "EMAIL_DOMAIN",
  "PUBLIC_EMAIL",
  "PUBLIC_EMAIL_DOMAIN",
  "COMMIT_EMAIL",
  "COMMIT_EMAIL_DOMAIN",
  "IS_EMAIL_OPTED_IN",
  "EMAIL_OPTED_IN_SOURCE_ID",
  "EMAIL_OPTED_IN_AT",
  "DASHBOARD",
  "PROJECT_VIEW",
  "CONSUMED_TIMESTEP",
  "LAYOUT",
  "HAS_HIDE_PROJECT_LIMIT_ENABLED",
  "OTP_GRACE_PERIOD_STARTED_AT",
  "IS_EXTERNAL_USER",
  "ORGANIZATION",
  "AUDITOR",
  "DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP",
  "TWO_FACTOR_GRACE_PERIOD",
  "LAST_ACTIVITY_ON",
  "IS_NOTIFIED_OF_OWN_ACTIVITY",
  "PREFERRED_LANGUAGE",
  "THEME_ID",
  "ACCEPTED_TERM_ID",
  "IS_PRIVATE_PROFILE",
  "ROADMAP_LAYOUT",
  "INCLUDE_PRIVATE_CONTRIBUTIONS",
  "GROUP_VIEW",
  "MANAGING_GROUP_ID",
  "ROLE_ID",
  "ROLE",
  "USER_NAME",
  "FIRST_NAME",
  "LAST_NAME",
  "USERS_NAME",
  "USER_TYPE",
  "IT_JOB_TITLE_HIERARCHY",
      created_at AS user_created_at,
      updated_at AS user_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_users

), highest_paid_subscription_plan AS (

    SELECT *
    FROM __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan

),   customers_with_trial AS (

    SELECT
      customers.customer_provider_user_id                         AS user_id,
      MIN(customers.customer_id)                                  AS first_customer_id,
      MIN(customers.customer_created_at)                          AS first_customer_created_at,
      ARRAY_AGG(customers.customer_id)
          WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
      MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
      MIN(trial_start_date)                                       AS has_started_trial_at
    FROM customers
      LEFT JOIN trials
        ON customers.customer_id = trials.customer_id
    WHERE customers.customer_provider = 'gitlab'
    GROUP BY 1

),   joined AS (
    SELECT
      users.*,
      TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
      TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
      CASE
        WHEN account_age <= 1 THEN '1 - 1 day or less'
        WHEN account_age <= 7 THEN '2 - 2 to 7 days'
        WHEN account_age <= 14 THEN '3 - 8 to 14 days'
        WHEN account_age <= 30 THEN '4 - 15 to 30 days'
        WHEN account_age <= 60 THEN '5 - 31 to 60 days'
        WHEN account_age > 60 THEN '6 - Over 60 days'
      END                                                                           AS account_age_cohort,

      highest_paid_subscription_plan.highest_paid_subscription_plan_id,
      highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
      highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
      highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

      IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
      customers_with_trial.first_customer_created_at,
      customers_with_trial.first_customer_id,
      customers_with_trial.customer_id_list,
      customers_with_trial.has_started_trial,
      customers_with_trial.has_started_trial_at

    FROM users
      LEFT JOIN highest_paid_subscription_plan
        ON users.user_id = highest_paid_subscription_plan.user_id
      LEFT JOIN customers_with_trial
        ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'active' 
          AND users_source.user_id = users.user_id

    )

)

SELECT *
FROM joined24:T9e5, __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
)25:Tc18,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (

    SELECT *
    FROM {{ ref('customers_db_customers') }}

)

, trials AS  (

    SELECT *
    FROM {{ ref('customers_db_trials') }}

)

, users AS (

    SELECT
      {{ dbt_utils.star(from=ref('gitlab_dotcom_users')) }},
      created_at        AS user_created_at,
      updated_at        AS user_updated_at
    FROM {{ ref('gitlab_dotcom_users') }}

)

, highest_paid_subscription_plan AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_highest_paid_subscription_plan') }}

)

, customers_with_trial AS (

  SELECT
    customers.customer_provider_user_id                         AS user_id,
    MIN(customers.customer_id)                                  AS first_customer_id,
    MIN(customers.customer_created_at)                          AS first_customer_created_at,
    ARRAY_AGG(customers.customer_id)
        WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
    MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
    MIN(trial_start_date)                                       AS has_started_trial_at
  FROM customers
    LEFT JOIN trials
      ON customers.customer_id = trials.customer_id
  WHERE customers.customer_provider = 'gitlab'
  GROUP BY 1

)

, joined AS (
  SELECT
    users.*,
    TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
    TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
    CASE
      WHEN account_age <= 1 THEN '1 - 1 day or less'
      WHEN account_age <= 7 THEN '2 - 2 to 7 days'
      WHEN account_age <= 14 THEN '3 - 8 to 14 days'
      WHEN account_age <= 30 THEN '4 - 15 to 30 days'
      WHEN account_age <= 60 THEN '5 - 31 to 60 days'
      WHEN account_age > 60 THEN '6 - Over 60 days'
    END                                                                           AS account_age_cohort,

    highest_paid_subscription_plan.highest_paid_subscription_plan_id,
    highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
    highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
    highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

    IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
    customers_with_trial.first_customer_created_at,
    customers_with_trial.first_customer_id,
    customers_with_trial.customer_id_list,
    customers_with_trial.has_started_trial,
    customers_with_trial.has_started_trial_at

  FROM users
    LEFT JOIN highest_paid_subscription_plan
      ON users.user_id = highest_paid_subscription_plan.user_id
    LEFT JOIN customers_with_trial
      ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
  WHERE {{ filter_out_blocked_users('users', 'user_id') }}

)

SELECT *
FROM joined26:T8f0,This model extends the base model `gitlab_dotcom_users` and adds several other dimensions

### Age cohorts
This model adds account age cohorts to the users table, the defined cohorts are:

1-  1 day or less  
2-  2 to 7 days  
3-  8 to 14 days  
4-  15 to 30 days  
5-  31 to 60 days  
6-  Over 60 days  

The CTE does this by comparing the time of the dbt run with `created_at` in the users table.

### Highest inherited subscription

This model documents the highest subscription a user inherits from. Rules around inheritance are a bit complicated, as stated in the handbook [here](https://about.gitlab.com/handbook/marketing/product-marketing/enablement/dotcom-subscriptions/#common-misconceptions),

>>>
Reality: GitLab.com subscriptions are scoped to a namespace, and individual users could participate in many groups with different subscription types. For example, they might have personal projects on a Free subscription type, participate in an open-source project that has Gold features (because it's public) while their company has a Silver subscription.
>>>

A user inherits from a subscription when:
* They are a member of a group/sub-group that has a paid subscription.
* They are a member of a project which belongs to a group with a paid subscription
* They have a personal subscription attached to their personal namespace.

Some gotchas:
* If a user is part of a public open-source (or edu) group/project, they will not inherit from the Gold subscription of the group/project.
* If a user is part of a project created by another user's personal namespace, they won't inherit from the owner's namespace subscription.

We then know for each user: what's the highest plan they inherit from and where they inherit it from.

If a user inherits from 2+ subscriptions with the same plan, we choose one subscription over the other based on the inheritance source: First, user, then groups, then projects.

### Subscription Portal (customers.gitlab.com) data 

This model surfaces also if a user has created an account or not in the subscription portal by joining with the `customers_db_customers` table. It also informs us if a specific user has already started a trial and if so when. 

### Misc

A `days_active` column is added by comparing `created_at` with `last_activity_on`27:T1c09,

WITH  __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
),customers AS (

    SELECT *
    FROM "PROD".legacy.customers_db_customers

)

, trials AS  (

    SELECT *
    FROM "PROD".legacy.customers_db_trials

)

, users AS (

    SELECT
      "USER_ID",
  "REMEMBER_CREATED_AT",
  "SIGN_IN_COUNT",
  "CURRENT_SIGN_IN_AT",
  "LAST_SIGN_IN_AT",
  "CREATED_AT",
  "UPDATED_AT",
  "IS_ADMIN",
  "PROJECTS_LIMIT",
  "FAILED_ATTEMPTS",
  "LOCKED_AT",
  "USER_LOCKED",
  "HAS_CREATE_GROUP_PERMISSIONS",
  "HAS_CREATE_TEAM_PERMISSIONS",
  "STATE",
  "COLOR_SCHEME_ID",
  "PASSWORD_EXPIRES_AT",
  "CREATED_BY_ID",
  "LAST_CREDENTIAL_CHECK_AT",
  "HAS_AVATAR",
  "CONFIRMED_AT",
  "CONFIRMATION_SENT_AT",
  "HAS_HIDE_NO_SSH_KEY_ENABLED",
  "ADMIN_EMAIL_UNSUBSCRIBED_AT",
  "NOTIFICATION_EMAIL",
  "NOTIFICATION_EMAIL_DOMAIN",
  "HAS_HIDE_NO_PASSWORD_ENABLED",
  "IS_PASSWORD_AUTOMATICALLY_SET",
  "LOCATION",
  "EMAIL",
  "EMAIL_DOMAIN",
  "PUBLIC_EMAIL",
  "PUBLIC_EMAIL_DOMAIN",
  "COMMIT_EMAIL",
  "COMMIT_EMAIL_DOMAIN",
  "IS_EMAIL_OPTED_IN",
  "EMAIL_OPTED_IN_SOURCE_ID",
  "EMAIL_OPTED_IN_AT",
  "DASHBOARD",
  "PROJECT_VIEW",
  "CONSUMED_TIMESTEP",
  "LAYOUT",
  "HAS_HIDE_PROJECT_LIMIT_ENABLED",
  "OTP_GRACE_PERIOD_STARTED_AT",
  "IS_EXTERNAL_USER",
  "ORGANIZATION",
  "AUDITOR",
  "DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP",
  "TWO_FACTOR_GRACE_PERIOD",
  "LAST_ACTIVITY_ON",
  "IS_NOTIFIED_OF_OWN_ACTIVITY",
  "PREFERRED_LANGUAGE",
  "THEME_ID",
  "ACCEPTED_TERM_ID",
  "IS_PRIVATE_PROFILE",
  "ROADMAP_LAYOUT",
  "INCLUDE_PRIVATE_CONTRIBUTIONS",
  "GROUP_VIEW",
  "MANAGING_GROUP_ID",
  "ROLE_ID",
  "ROLE",
  "USER_NAME",
  "FIRST_NAME",
  "LAST_NAME",
  "USERS_NAME",
  "USER_TYPE",
  "IT_JOB_TITLE_HIERARCHY",
      created_at        AS user_created_at,
      updated_at        AS user_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_users

)

, highest_paid_subscription_plan AS (

    SELECT *
    FROM __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan

)

, customers_with_trial AS (

  SELECT
    customers.customer_provider_user_id                         AS user_id,
    MIN(customers.customer_id)                                  AS first_customer_id,
    MIN(customers.customer_created_at)                          AS first_customer_created_at,
    ARRAY_AGG(customers.customer_id)
        WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
    MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
    MIN(trial_start_date)                                       AS has_started_trial_at
  FROM customers
    LEFT JOIN trials
      ON customers.customer_id = trials.customer_id
  WHERE customers.customer_provider = 'gitlab'
  GROUP BY 1

)

, joined AS (
  SELECT
    users.*,
    TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
    TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
    CASE
      WHEN account_age <= 1 THEN '1 - 1 day or less'
      WHEN account_age <= 7 THEN '2 - 2 to 7 days'
      WHEN account_age <= 14 THEN '3 - 8 to 14 days'
      WHEN account_age <= 30 THEN '4 - 15 to 30 days'
      WHEN account_age <= 60 THEN '5 - 31 to 60 days'
      WHEN account_age > 60 THEN '6 - Over 60 days'
    END                                                                           AS account_age_cohort,

    highest_paid_subscription_plan.highest_paid_subscription_plan_id,
    highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
    highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
    highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

    IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
    customers_with_trial.first_customer_created_at,
    customers_with_trial.first_customer_id,
    customers_with_trial.customer_id_list,
    customers_with_trial.has_started_trial,
    customers_with_trial.has_started_trial_at

  FROM users
    LEFT JOIN highest_paid_subscription_plan
      ON users.user_id = highest_paid_subscription_plan.user_id
    LEFT JOIN customers_with_trial
      ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
  WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = users.user_id

    )

)

SELECT *
FROM joined28:T9e5, __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
)29:T62c,WITH source AS (

    SELECT *
    FROM {{ source('customers', 'customers_db_customers') }}
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed2a:T622,WITH source AS (

    SELECT *
    FROM "RAW".tap_postgres.customers_db_customers
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed2b:T1535,WITH source AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source

), with_product_category AS (

    SELECT *,
      CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
      CASE 
  WHEN LOWER(product_category) LIKE ANY ('%saas%', 'storage', 'standard', 'basic', 'plus', 'githost', '%dedicated - ultimate%')
    THEN 'SaaS'
  WHEN LOWER(product_category) LIKE '%self-managed%'
    THEN 'Self-Managed'
  WHEN product_category IN (
                                        'Other'
                                      , 'Support'
                                      , 'Trueup'
                                      )
    THEN 'Others'
  ELSE NULL
END AS delivery
    FROM source

)

SELECT *
FROM with_product_category2c:Te46,WITH zuora_accts AS (

    SELECT *
    FROM {{ ref('zuora_account') }}

), zuora_subscriptions_xf AS (

    SELECT *
    FROM {{ ref('zuora_subscription_xf') }}

), zuora_subscription_periods AS (

    SELECT *
    FROM {{ ref('zuora_subscription_periods') }}

), zuora_rp AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan') }}

), zuora_contact AS (
    
    SELECT *
    FROM {{ ref('zuora_contact') }}

), zuora_rpc AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge') }}

), original_rate_plan_id AS (
  
    SELECT DISTINCT
      zuora_rpc.original_id, 
      FIRST_VALUE(subscription_version_term_start_date) OVER (
        PARTITION BY original_id
        ORDER BY periods.version
      ) AS subscription_version_term_start_date,
      FIRST_VALUE(subscription_version_term_end_date) OVER (
        PARTITION BY original_id
        ORDER BY periods.version
      ) AS subscription_version_term_end_date

    FROM zuora_subscription_periods AS periods
      INNER JOIN zuora_rp 
        ON periods.subscription_id  = zuora_rp.subscription_id
      INNER JOIN zuora_rpc 
        ON zuora_rp.rate_plan_id = zuora_rpc.rate_plan_id

), base_mrr AS (

    SELECT
      zuora_rpc.rate_plan_charge_id,
      
      
      -- account info
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_contact.country,
      zuora_accts.currency,
      
      -- subscription info
      zuora_subscriptions_xf.subscription_name,
      zuora_subscriptions_xf.subscription_name_slugify,
      zuora_subscriptions_xf.subscription_start_date,
      
      --subscription_lineage info
      zuora_subscriptions_xf.exclude_from_renewal_report,
      zuora_subscriptions_xf.lineage,
      zuora_subscriptions_xf.oldest_subscription_in_cohort,
      zuora_subscriptions_xf.subscription_status,
      
      -- rate_plan info
      zuora_rp.delivery,
      zuora_rp.product_category,
      zuora_rp.rate_plan_name,
      
      --
      zuora_rpc.mrr,
      zuora_rpc.rate_plan_charge_name,
      zuora_rpc.rate_plan_charge_number,
      zuora_rpc.tcv,
      zuora_rpc.unit_of_measure,
      zuora_rpc.quantity,
      
      date_trunc('month', zuora_subscriptions_xf.subscription_start_date :: date) AS sub_start_month,
      date_trunc('month', dateadd('month', -1, zuora_subscriptions_xf.subscription_end_date :: DATE)) AS sub_end_month,
      date_trunc('month', zuora_rpc.effective_start_date :: DATE) AS effective_start_month,
      date_trunc('month', dateadd('month', -1, zuora_rpc.effective_end_date :: DATE)) AS effective_end_month,
      datediff(month, zuora_rpc.effective_start_date :: date,
              zuora_rpc.effective_end_date :: date) AS month_interval,
      zuora_rpc.effective_start_date,
      zuora_rpc.effective_end_date,
      original_rate_plan_id.subscription_version_term_start_date,
      original_rate_plan_id.subscription_version_term_end_date,
      zuora_subscriptions_xf.cohort_month,
      zuora_subscriptions_xf.cohort_quarter
    FROM zuora_accts
    INNER JOIN zuora_subscriptions_xf 
      ON zuora_accts.account_id = zuora_subscriptions_xf.account_id
    INNER JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscriptions_xf.subscription_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id AND zuora_rpc.mrr > 0 AND zuora_rpc.tcv > 0
    LEFT JOIN zuora_contact 
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN original_rate_plan_id
      ON zuora_rpc.original_id = original_rate_plan_id.original_id

)

SELECT *
FROM base_mrr
WHERE effective_end_month >= effective_start_month2d:T998,This model generates an entry for each unique charge associated with a subscription. The specific information about what is happening with a subscription is stored with the rate plan charge. That RPC is part of a Rate Plan, which is then linked to a subscription. There can be multiple rate plans and charges per subscription. The effective start and end dates define the time period that a charge is effective.

We only care about charges that have both Monthly Recurring Revenue (MRR) > $0 and Total Contract Value (TCV) > $0.

For the purposes of applying MRR to months, we only care about what rate plan charge was in effect on the very last day of the month. The effective_end_date calculation is taken as the previous month for the following reason: technically, on Zuora's side, the effective end date stored in the database is the day _after_ the subscription ended. (More info here https://community.zuora.com/t5/Subscriptions/How-to-get-ALL-the-products-per-active-subscription/td-p/2224) Another way to think about it is that the effective end date is the first day of the renewal. By subtracting the month, we're guaranteed to get the correct month for an end date. If in the DB it ends 7/31, then in reality that is the day before (7/30) and is therefore not in effect for the month of July (because it has to be in effect on the last day to be in force for that month). If the end date is 8/1, then it is in effect for the month of July and we're making the proper calculation by subtracting 1 month.

To reiterate, if there is a rate plan charge that starts 2017-03-15Ã and goes to 2017-06-10, then that charge would be counted for the months of March, April, and May. June is not counted because a different charge would be in effect on the last day of the month.

Another example: if the effective start and end dates of the charge occurred from 2018-08-02 to 2018-08-15, that would be completely dropped. If it occurred from 2018-08-16 to 2018-08-31, that would also be dropped because the charge was not in force on the last day of the month. If it occurred from 2018-08-30 to 2018-09-02, then that would be in force for the month of August.

The final WHERE filter validates that only charges that were in force at the end of the month are selected. Using the 2018-08-16 to 2018-08-31 example, the effective start and end months would be 2018-08-01 and 2018-07-01 which would result in a datediff value of -1 and would be filtered out.2e:Te6c,WITH zuora_accts AS (

    SELECT *
    FROM "PROD".legacy.zuora_account

), zuora_subscriptions_xf AS (

    SELECT *
    FROM "PROD".legacy.zuora_subscription_xf

), zuora_subscription_periods AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_subscription_periods

), zuora_rp AS (

    SELECT *
    FROM "PROD".legacy.zuora_rate_plan

), zuora_contact AS (
    
    SELECT *
    FROM "PROD".legacy.zuora_contact

), zuora_rpc AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_rate_plan_charge

), original_rate_plan_id AS (
  
    SELECT DISTINCT
      zuora_rpc.original_id, 
      FIRST_VALUE(subscription_version_term_start_date) OVER (
        PARTITION BY original_id
        ORDER BY periods.version
      ) AS subscription_version_term_start_date,
      FIRST_VALUE(subscription_version_term_end_date) OVER (
        PARTITION BY original_id
        ORDER BY periods.version
      ) AS subscription_version_term_end_date

    FROM zuora_subscription_periods AS periods
      INNER JOIN zuora_rp 
        ON periods.subscription_id  = zuora_rp.subscription_id
      INNER JOIN zuora_rpc 
        ON zuora_rp.rate_plan_id = zuora_rpc.rate_plan_id

), base_mrr AS (

    SELECT
      zuora_rpc.rate_plan_charge_id,
      
      
      -- account info
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_contact.country,
      zuora_accts.currency,
      
      -- subscription info
      zuora_subscriptions_xf.subscription_name,
      zuora_subscriptions_xf.subscription_name_slugify,
      zuora_subscriptions_xf.subscription_start_date,
      
      --subscription_lineage info
      zuora_subscriptions_xf.exclude_from_renewal_report,
      zuora_subscriptions_xf.lineage,
      zuora_subscriptions_xf.oldest_subscription_in_cohort,
      zuora_subscriptions_xf.subscription_status,
      
      -- rate_plan info
      zuora_rp.delivery,
      zuora_rp.product_category,
      zuora_rp.rate_plan_name,
      
      --
      zuora_rpc.mrr,
      zuora_rpc.rate_plan_charge_name,
      zuora_rpc.rate_plan_charge_number,
      zuora_rpc.tcv,
      zuora_rpc.unit_of_measure,
      zuora_rpc.quantity,
      
      date_trunc('month', zuora_subscriptions_xf.subscription_start_date :: date) AS sub_start_month,
      date_trunc('month', dateadd('month', -1, zuora_subscriptions_xf.subscription_end_date :: DATE)) AS sub_end_month,
      date_trunc('month', zuora_rpc.effective_start_date :: DATE) AS effective_start_month,
      date_trunc('month', dateadd('month', -1, zuora_rpc.effective_end_date :: DATE)) AS effective_end_month,
      datediff(month, zuora_rpc.effective_start_date :: date,
              zuora_rpc.effective_end_date :: date) AS month_interval,
      zuora_rpc.effective_start_date,
      zuora_rpc.effective_end_date,
      original_rate_plan_id.subscription_version_term_start_date,
      original_rate_plan_id.subscription_version_term_end_date,
      zuora_subscriptions_xf.cohort_month,
      zuora_subscriptions_xf.cohort_quarter
    FROM zuora_accts
    INNER JOIN zuora_subscriptions_xf 
      ON zuora_accts.account_id = zuora_subscriptions_xf.account_id
    INNER JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscriptions_xf.subscription_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id AND zuora_rpc.mrr > 0 AND zuora_rpc.tcv > 0
    LEFT JOIN zuora_contact 
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN original_rate_plan_id
      ON zuora_rpc.original_id = original_rate_plan_id.original_id

)

SELECT *
FROM base_mrr
WHERE effective_end_month >= effective_start_month2f:T716,{{ config({
    "alias": "customers_db_orders_snapshots"
    })
}}

WITH source AS (

    SELECT *
    FROM {{ source('snapshots', 'customers_db_orders_snapshots') }}

), renamed AS (

    SELECT 
      dbt_scd_id::VARCHAR                                     AS order_snapshot_id,
      id::NUMBER                                              AS order_id,
      customer_id::NUMBER                                     AS customer_id,
      product_rate_plan_id::VARCHAR                           AS product_rate_plan_id,
      subscription_id::VARCHAR                                AS subscription_id,
      subscription_name::VARCHAR                              AS subscription_name,
      {{zuora_slugify("subscription_name")}}::VARCHAR         AS subscription_name_slugify,
      start_date::TIMESTAMP                                   AS order_start_date,
      end_date::TIMESTAMP                                     AS order_end_date,
      quantity::NUMBER                                        AS order_quantity,
      created_at::TIMESTAMP                                   AS order_created_at,
      updated_at::TIMESTAMP                                   AS order_updated_at,
      TRY_TO_DECIMAL(NULLIF(gl_namespace_id, ''))::VARCHAR    AS gitlab_namespace_id,
      NULLIF(gl_namespace_name, '')::VARCHAR                  AS gitlab_namespace_name,
      amendment_type::VARCHAR                                 AS amendment_type,
      trial::BOOLEAN                                          AS order_is_trial,
      last_extra_ci_minutes_sync_at::TIMESTAMP                AS last_extra_ci_minutes_sync_at,
      "DBT_VALID_FROM"::TIMESTAMP                             AS valid_from,
      "DBT_VALID_TO"::TIMESTAMP                               AS valid_to
    FROM source

)

SELECT *
FROM renamed30:T7ca,

WITH source AS (

    SELECT *
    FROM "RAW".snapshots.customers_db_orders_snapshots

), renamed AS (

    SELECT 
      dbt_scd_id::VARCHAR                                     AS order_snapshot_id,
      id::NUMBER                                              AS order_id,
      customer_id::NUMBER                                     AS customer_id,
      product_rate_plan_id::VARCHAR                           AS product_rate_plan_id,
      subscription_id::VARCHAR                                AS subscription_id,
      subscription_name::VARCHAR                              AS subscription_name,
      trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        subscription_name
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )::VARCHAR         AS subscription_name_slugify,
      start_date::TIMESTAMP                                   AS order_start_date,
      end_date::TIMESTAMP                                     AS order_end_date,
      quantity::NUMBER                                        AS order_quantity,
      created_at::TIMESTAMP                                   AS order_created_at,
      updated_at::TIMESTAMP                                   AS order_updated_at,
      TRY_TO_DECIMAL(NULLIF(gl_namespace_id, ''))::VARCHAR    AS gitlab_namespace_id,
      NULLIF(gl_namespace_name, '')::VARCHAR                  AS gitlab_namespace_name,
      amendment_type::VARCHAR                                 AS amendment_type,
      trial::BOOLEAN                                          AS order_is_trial,
      last_extra_ci_minutes_sync_at::TIMESTAMP                AS last_extra_ci_minutes_sync_at,
      "DBT_VALID_FROM"::TIMESTAMP                             AS valid_from,
      "DBT_VALID_TO"::TIMESTAMP                               AS valid_to
    FROM source

)

SELECT *
FROM renamed32:Te41,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (
  
  SELECT * 
  FROM {{ ref('customers_db_customers_source')}}
  
)

, namespaces AS (
  
  SELECT * 
  FROM {{ ref('gitlab_dotcom_namespaces')}}
  
)
 
, orders_snapshots AS (
  
  SELECT * 
  FROM {{ ref('customers_db_orders_snapshots_base')}}
  
)

, users AS (
 
 SELECT * 
 FROM {{ ref('gitlab_dotcom_users')}}
 
)

, zuora_rate_plan AS (
 
 SELECT * 
 FROM {{ ref('zuora_rate_plan')}}
 
)

, zuora_base_mrr AS (
 
 SELECT * 
 FROM {{ ref('zuora_base_mrr')}}
 
)

, zuora_subscription_with_positive_mrr_tcv AS (
  
  SELECT DISTINCT
    subscription_name_slugify,
    subscription_start_date
  FROM zuora_base_mrr 
  
)

, ci_minutes_charges AS (
  
  SELECT *
  FROM zuora_rate_plan
  WHERE rate_plan_name = '1,000 CI Minutes'
  
)

,  orders_shapshots_excluding_ci_minutes AS (

  SELECT orders_snapshots.*,
     FIRST_VALUE(subscription_name_slugify) IGNORE NULLS
      OVER (PARTITION BY order_id ORDER BY order_updated_at ASC) AS first_subscription_name_slugify
  FROM orders_snapshots
  LEFT JOIN ci_minutes_charges
    ON orders_snapshots.subscription_id = ci_minutes_charges.subscription_id
    AND orders_snapshots.product_rate_plan_id = ci_minutes_charges.product_rate_plan_id
  WHERE ci_minutes_charges.subscription_id IS NULL

)
  , trials AS (

  SELECT
    *,
    FIRST_VALUE(customer_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_customer_id,
    FIRST_VALUE(gitlab_namespace_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_namespace_id
  FROM orders_snapshots
  WHERE order_is_trial = TRUE

), converted_trials AS (

  SELECT DISTINCT
    trials.order_id,
    orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify AS subscription_name_slugify
  FROM trials
  INNER JOIN orders_shapshots_excluding_ci_minutes
    ON trials.order_id = orders_shapshots_excluding_ci_minutes.order_id
  INNER JOIN zuora_subscription_with_positive_mrr_tcv AS subscription
    ON orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify = subscription.subscription_name_slugify
      AND trials.order_start_date <= subscription.subscription_start_date
  WHERE orders_shapshots_excluding_ci_minutes.subscription_name_slugify IS NOT NULL

)
, joined AS (
  
  SELECT
    trials.order_id, 
    trials.latest_namespace_id                              AS gitlab_namespace_id,
    customers.customer_id,
    
      
    users.user_id                                           AS gitlab_user_id,
    IFF(users.user_id IS NOT NULL, TRUE, FALSE)             AS is_gitlab_user,
    users.created_at                                        AS user_created_at,
    
    
    namespaces.created_at                                   AS namespace_created_at,
    namespaces.namespace_type,
    
    IFF(converted_trials.order_id IS NOT NULL, TRUE, FALSE) AS is_converted,
    converted_trials.subscription_name_slugify,
    
    MIN(order_created_at)                                   AS order_created_at,
    MIN(trials.order_start_date)::DATE                      AS trial_start_date, 
    MAX(trials.order_end_date)::DATE                        AS trial_end_date
    
    
  FROM trials
    INNER JOIN customers ON trials.latest_customer_id = customers.customer_id
    LEFT JOIN namespaces ON trials.latest_namespace_id = namespaces.namespace_id
    LEFT JOIN users ON customers.customer_provider_user_id = users.user_id
    LEFT JOIN converted_trials ON trials.order_id = converted_trials.order_id
  WHERE trials.order_start_date >= '2019-09-01'
  {{dbt_utils.group_by(10)}}
  
)

SELECT * 
FROM joined33:Te39,

WITH customers AS (
  
  SELECT * 
  FROM "PREP".customers.customers_db_customers_source
  
)

, namespaces AS (
  
  SELECT * 
  FROM "PREP".sensitive.gitlab_dotcom_namespaces
  
)
 
, orders_snapshots AS (
  
  SELECT * 
  FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, users AS (
 
 SELECT * 
 FROM "PREP".sensitive.gitlab_dotcom_users
 
)

, zuora_rate_plan AS (
 
 SELECT * 
 FROM "PROD".legacy.zuora_rate_plan
 
)

, zuora_base_mrr AS (
 
 SELECT * 
 FROM "PROD".restricted_safe_legacy.zuora_base_mrr
 
)

, zuora_subscription_with_positive_mrr_tcv AS (
  
  SELECT DISTINCT
    subscription_name_slugify,
    subscription_start_date
  FROM zuora_base_mrr 
  
)

, ci_minutes_charges AS (
  
  SELECT *
  FROM zuora_rate_plan
  WHERE rate_plan_name = '1,000 CI Minutes'
  
)

,  orders_shapshots_excluding_ci_minutes AS (

  SELECT orders_snapshots.*,
     FIRST_VALUE(subscription_name_slugify) IGNORE NULLS
      OVER (PARTITION BY order_id ORDER BY order_updated_at ASC) AS first_subscription_name_slugify
  FROM orders_snapshots
  LEFT JOIN ci_minutes_charges
    ON orders_snapshots.subscription_id = ci_minutes_charges.subscription_id
    AND orders_snapshots.product_rate_plan_id = ci_minutes_charges.product_rate_plan_id
  WHERE ci_minutes_charges.subscription_id IS NULL

)
  , trials AS (

  SELECT
    *,
    FIRST_VALUE(customer_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_customer_id,
    FIRST_VALUE(gitlab_namespace_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_namespace_id
  FROM orders_snapshots
  WHERE order_is_trial = TRUE

), converted_trials AS (

  SELECT DISTINCT
    trials.order_id,
    orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify AS subscription_name_slugify
  FROM trials
  INNER JOIN orders_shapshots_excluding_ci_minutes
    ON trials.order_id = orders_shapshots_excluding_ci_minutes.order_id
  INNER JOIN zuora_subscription_with_positive_mrr_tcv AS subscription
    ON orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify = subscription.subscription_name_slugify
      AND trials.order_start_date <= subscription.subscription_start_date
  WHERE orders_shapshots_excluding_ci_minutes.subscription_name_slugify IS NOT NULL

)
, joined AS (
  
  SELECT
    trials.order_id, 
    trials.latest_namespace_id                              AS gitlab_namespace_id,
    customers.customer_id,
    
      
    users.user_id                                           AS gitlab_user_id,
    IFF(users.user_id IS NOT NULL, TRUE, FALSE)             AS is_gitlab_user,
    users.created_at                                        AS user_created_at,
    
    
    namespaces.created_at                                   AS namespace_created_at,
    namespaces.namespace_type,
    
    IFF(converted_trials.order_id IS NOT NULL, TRUE, FALSE) AS is_converted,
    converted_trials.subscription_name_slugify,
    
    MIN(order_created_at)                                   AS order_created_at,
    MIN(trials.order_start_date)::DATE                      AS trial_start_date, 
    MAX(trials.order_end_date)::DATE                        AS trial_end_date
    
    
  FROM trials
    INNER JOIN customers ON trials.latest_customer_id = customers.customer_id
    LEFT JOIN namespaces ON trials.latest_namespace_id = namespaces.namespace_id
    LEFT JOIN users ON customers.customer_provider_user_id = users.user_id
    LEFT JOIN converted_trials ON trials.order_id = converted_trials.order_id
  WHERE trials.order_start_date >= '2019-09-01'
  group by 1,2,3,4,5,6,7,8,9,10
  
)

SELECT * 
FROM joinedc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.customers_db_trials"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"customers_db_trials"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","mnpi_exception",{"children":[["$","code",null,{"children":["$","a",null,{"children":"mnpi_exception"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.legacy.customers_db_trials"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"14 MB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 09:10UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"$f"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$L10",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CUSTOMERS_DB_TRIALS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ORDER_ID":{"type":"NUMBER","index":1,"name":"order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"order_id"},"GITLAB_NAMESPACE_ID":{"type":"TEXT","index":2,"name":"GITLAB_NAMESPACE_ID","comment":null,"display_name":"gitlab_namespace_id"},"CUSTOMER_ID":{"type":"NUMBER","index":3,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_id"},"GITLAB_USER_ID":{"type":"NUMBER","index":4,"name":"GITLAB_USER_ID","comment":null,"display_name":"gitlab_user_id"},"IS_GITLAB_USER":{"type":"BOOLEAN","index":5,"name":"IS_GITLAB_USER","comment":null,"display_name":"is_gitlab_user"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"IS_CONVERTED":{"type":"BOOLEAN","index":9,"name":"IS_CONVERTED","comment":null,"display_name":"is_converted"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":10,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"ORDER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"ORDER_CREATED_AT","comment":null,"display_name":"order_created_at"},"TRIAL_START_DATE":{"type":"DATE","index":12,"name":"TRIAL_START_DATE","comment":null,"display_name":"trial_start_date"},"TRIAL_END_DATE":{"type":"DATE","index":13,"name":"TRIAL_END_DATE","comment":null,"display_name":"trial_end_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":14724608,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_trials","raw_sql":"$11","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_base_mrr","model.gitlab_snowflake.zuora_base_mrr"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","customers","xf","customers_db_trials"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/xf/customers_db_trials.sql","original_file_path":"models/legacy/customers/xf/customers_db_trials.sql","name":"customers_db_trials","alias":"customers_db_trials","checksum":{"name":"sha256","checksum":"c77bef8135b36d587e86a3054aa39d9e3770f6360969969abf6f077c7b1dbea4"},"tags":["mnpi_exception"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["customers_db_orders_snapshots_base"],["customers_db_orders_snapshots_base"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_base_mrr"],["zuora_base_mrr"]],"sources":[],"metrics":[],"description":"$12","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/xf/customers_db_trials.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033762.9913282,"compiled_sql":"$13","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.customers_db_trials","label":"customers_db_trials"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"MART_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"IS_GROUP_NAMESPACE_OWNER":{"type":"BOOLEAN","index":2,"name":"is_group_namespace_owner","comment":null,"description":"Flags if group namespace owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace_owner"},"IS_GROUP_NAMESPACE_MEMBER":{"type":"BOOLEAN","index":3,"name":"is_group_namespace_member","comment":null,"description":"Flags if group namespace member","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace_member"},"IS_INDIVIDUAL_NAMESPACE_OWNER":{"type":"BOOLEAN","index":4,"name":"is_individual_namespace_owner","comment":null,"description":"Flags if personal namespace owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_individual_namespace_owner"},"IS_GROUP_MAINTAINER_OF_SAAS_PAID_TIER":{"type":"BOOLEAN","index":5,"name":"is_group_maintainer_of_saas_paid_tier","comment":null,"description":"Flags if group maintainer of a SaaS paid tier namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas_paid_tier"},"IS_GROUP_MAINTAINER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":6,"name":"is_group_maintainer_of_saas_free_tier","comment":null,"description":"Flags if group maintainer of a SaaS free tier namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas_free_tier"},"IS_GROUP_MAINTAINER_OF_SAAS":{"type":"BOOLEAN","index":7,"name":"is_group_maintainer_of_saas","comment":null,"description":"Flags if group maintainer of a SaaS namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas"},"IS_CUSTOMER_DB_OWNER":{"type":"BOOLEAN","index":8,"name":"is_customer_db_owner","comment":null,"description":"Flags if customer db owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_owner"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":9,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"DAYS_SINCE_SAAS_TRIAL_ENDED":{"type":"NUMBER","index":10,"name":"days_since_saas_trial_ended","comment":null,"description":"Number of days since saas trial ended","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_trial_ended"},"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET":{"type":"TEXT","index":11,"name":"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET","comment":null,"display_name":"days_since_saas_trial_ended_bucket"},"DAYS_UNTIL_SAAS_TRIAL_ENDS":{"type":"NUMBER","index":12,"name":"days_until_saas_trial_ends","comment":null,"description":"Number of days until saas trial ends","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_until_saas_trial_ends"},"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET":{"type":"TEXT","index":13,"name":"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET","comment":null,"display_name":"days_until_saas_trial_ends_bucket"},"INDIVIDUAL_NAMESPACE_IS_SAAS_TRIAL":{"type":"BOOLEAN","index":14,"name":"individual_namespace_is_saas_trial","comment":null,"description":"Flags if individual namespace is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_trial"},"INDIVIDUAL_NAMESPACE_IS_SAAS_FREE_TIER":{"type":"BOOLEAN","index":15,"name":"individual_namespace_is_saas_free_tier","comment":null,"description":"Flags if individual namespace is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_free_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":16,"name":"individual_namespace_is_saas_bronze_tier","comment":null,"description":"Flags if individual namespace is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_bronze_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":17,"name":"individual_namespace_is_saas_premium_tier","comment":null,"description":"Flags if individual namespace is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_premium_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":18,"name":"individual_namespace_is_saas_ultimate_tier","comment":null,"description":"Flags if individual namespace is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_ultimate_tier"},"GROUP_MEMBER_OF_SAAS_TRIAL":{"type":"BOOLEAN","index":19,"name":"group_member_of_saas_trial","comment":null,"description":"Flags if namespace of group member is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_trial"},"GROUP_MEMBER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":20,"name":"group_member_of_saas_free_tier","comment":null,"description":"Flags if namespace of group member is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_free_tier"},"GROUP_MEMBER_OF_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":21,"name":"group_member_of_saas_bronze_tier","comment":null,"description":"Flags if namespace of group member is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_bronze_tier"},"GROUP_MEMBER_OF_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":22,"name":"group_member_of_saas_premium_tier","comment":null,"description":"Flags if namespace of group member is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_premium_tier"},"GROUP_MEMBER_OF_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":23,"name":"group_member_of_saas_ultimate_tier","comment":null,"description":"Flags if namespace of group member is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_ultimate_tier"},"GROUP_OWNER_OF_SAAS_TRIAL":{"type":"BOOLEAN","index":24,"name":"group_owner_of_saas_trial","comment":null,"description":"Flags if namespace of group owner is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_trial"},"GROUP_OWNER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":25,"name":"group_owner_of_saas_free_tier","comment":null,"description":"Flags if namespace of group owner is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_free_tier"},"GROUP_OWNER_OF_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":26,"name":"group_owner_of_saas_bronze_tier","comment":null,"description":"Flags if namespace of group owner is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_bronze_tier"},"GROUP_OWNER_OF_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":27,"name":"group_owner_of_saas_premium_tier","comment":null,"description":"Flags if namespace of group owner is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_premium_tier"},"GROUP_OWNER_OF_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":28,"name":"group_owner_of_saas_ultimate_tier","comment":null,"description":"Flags if namespace of group owner is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_ultimate_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_TRIAL":{"type":"BOOLEAN","index":29,"name":"responsible_for_group_saas_trial","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_trial"},"RESPONSIBLE_FOR_GROUP_SAAS_FREE_TIER":{"type":"BOOLEAN","index":30,"name":"responsible_for_group_saas_free_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_free_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":31,"name":"responsible_for_group_saas_bronze_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_bronze_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":32,"name":"responsible_for_group_saas_premium_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_premium_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":33,"name":"responsible_for_group_saas_ultimate_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_ultimate_tier"},"IS_SELF_MANAGED_STARTER_TIER":{"type":"BOOLEAN","index":34,"name":"is_self_managed_starter_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on starter tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_starter_tier"},"IS_SELF_MANAGED_PREMIUM_TIER":{"type":"BOOLEAN","index":35,"name":"is_self_managed_premium_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on premium tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_premium_tier"},"IS_SELF_MANAGED_ULTIMATE_TIER":{"type":"BOOLEAN","index":36,"name":"is_self_managed_ultimate_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on ultimate tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_ultimate_tier"},"HAS_NAMESPACE_SETUP_FOR_COMPANY_USE":{"type":"BOOLEAN","index":37,"name":"has_namespace_setup_for_company_use","comment":null,"description":"If True, the marketing contact is a member of a namespace that has been checked for company use","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_namespace_setup_for_company_use"},"HAS_NAMESPACE_WITH_PUBLIC_PROJECT":{"type":"BOOLEAN","index":38,"name":"has_namespace_with_public_project","comment":null,"description":"If True, the marketing contact is a member of a namespace that has at least one public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_namespace_with_public_project"},"HAS_FREE_NAMESPACE_WITH_PUBLIC_PROJECT":{"type":"BOOLEAN","index":39,"name":"has_free_namespace_with_public_project","comment":null,"description":"If True, the marketing contact is a member of a Free namespace that has at least one public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_free_namespace_with_public_project"},"IS_MEMBER_OF_PUBLIC_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":40,"name":"is_member_of_public_ultimate_parent_namespace","comment":null,"description":"If True, the marketing contact is a member of an ultimate parent namespace that is public.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_member_of_public_ultimate_parent_namespace"},"IS_MEMBER_OF_PRIVATE_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":41,"name":"is_member_of_private_ultimate_parent_namespace","comment":null,"description":"If True, the marketing contact is a member of an ultimate parent namespace that is private.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_member_of_private_ultimate_parent_namespace"},"PUBLIC_ULTIMATE_PARENT_NAMESPACES":{"type":"ARRAY","index":42,"name":"public_ultimate_parent_namespaces","comment":null,"description":"Array containing all the public ultimate parent namespaces the marketing contact is a member of.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"public_ultimate_parent_namespaces"},"PRIVATE_ULTIMATE_PARENT_NAMESPACES":{"type":"ARRAY","index":43,"name":"private_ultimate_parent_namespaces","comment":null,"description":"Array containing all the private ultimate parent namespaces the marketing contact is a member of.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"private_ultimate_parent_namespaces"},"ROLE_TIER_ULTIMATE_NAMESPACE_TEXT":{"type":"ARRAY","index":44,"name":"ROLE_TIER_ULTIMATE_NAMESPACE_TEXT","comment":null,"display_name":"role_tier_ultimate_namespace_text"},"IS_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":45,"name":"IS_SAAS_BRONZE_TIER","comment":null,"display_name":"is_saas_bronze_tier"},"IS_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":46,"name":"IS_SAAS_PREMIUM_TIER","comment":null,"display_name":"is_saas_premium_tier"},"IS_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":47,"name":"IS_SAAS_ULTIMATE_TIER","comment":null,"display_name":"is_saas_ultimate_tier"},"IS_BRONZE_STARTER_TIER":{"type":"BOOLEAN","index":48,"name":"IS_BRONZE_STARTER_TIER","comment":null,"display_name":"is_bronze_starter_tier"},"IS_PREMIUM_TIER":{"type":"BOOLEAN","index":49,"name":"IS_PREMIUM_TIER","comment":null,"display_name":"is_premium_tier"},"IS_ULTIMATE_TIER":{"type":"BOOLEAN","index":50,"name":"IS_ULTIMATE_TIER","comment":null,"display_name":"is_ultimate_tier"},"IS_SAAS_DELIVERY":{"type":"BOOLEAN","index":51,"name":"IS_SAAS_DELIVERY","comment":null,"display_name":"is_saas_delivery"},"IS_SELF_MANAGED_DELIVERY":{"type":"BOOLEAN","index":52,"name":"IS_SELF_MANAGED_DELIVERY","comment":null,"display_name":"is_self_managed_delivery"},"IS_SAAS_FREE_TIER":{"type":"BOOLEAN","index":53,"name":"IS_SAAS_FREE_TIER","comment":null,"display_name":"is_saas_free_tier"},"IS_PAID_TIER":{"type":"BOOLEAN","index":54,"name":"IS_PAID_TIER","comment":null,"display_name":"is_paid_tier"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":55,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PAID_TIER_CHANGE":{"type":"BOOLEAN","index":56,"name":"is_paid_tier_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_paid_tier flag is set to True OR the is_paid_tier flag is set to False and the is_paid_tier_marketo set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_tier_change"},"MIN_SUBSCRIPTION_START_DATE":{"type":"DATE","index":57,"name":"min_subscription_start_date","comment":null,"description":"Earliest subscription start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"min_subscription_start_date"},"MAX_SUBSCRIPTION_END_DATE":{"type":"DATE","index":58,"name":"max_subscription_end_date","comment":null,"description":"Latest subscription end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_subscription_end_date"},"NBR_OF_PAID_SUBSCRIPTIONS":{"type":"NUMBER","index":59,"name":"nbr_of_paid_subscriptions","comment":null,"description":"Number of paid subscriptions the user is on","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"nbr_of_paid_subscriptions"},"RESPONSIBLE_FOR_FREE_TIER_ONLY":{"type":"BOOLEAN","index":60,"name":"responsible_for_free_tier_only","comment":null,"description":"Flags if responsible for or individual namespace of only free tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_free_tier_only"},"EMAIL_ADDRESS":{"type":"TEXT","index":61,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":62,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":63,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":64,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":65,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"SFDC_RECORD_ID":{"type":"TEXT","index":66,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":67,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"JOB_TITLE":{"type":"TEXT","index":68,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":69,"name":"it_job_title_hierarchy","comment":null,"description":"$15","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":70,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"MOBILE_PHONE":{"type":"TEXT","index":71,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":72,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":73,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":74,"name":"marketo_lead_id","comment":null,"description":"Marketo id assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":75,"name":"is_marketo_lead","comment":null,"description":"Flags if marketo lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":76,"name":"is_marketo_email_hard_bounced","comment":null,"description":"Flags if marketing contact email has hard bounced","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":77,"name":"marketo_email_hard_bounced_date","comment":null,"description":"Date when the marketing contact email hard bounced","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":78,"name":"is_marketo_unsubscribed","comment":null,"description":"A flag indicating if a lead is unsubscribed in Marketo","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":79,"name":"is_marketo_opted_in","comment":null,"description":"Flag if a lead in marketo is opted in. This can be false and `has_marketo_unsubscribed` can be false as a lead could have started unsubscribed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":80,"name":"has_marketo_unsubscribed","comment":null,"description":"A flag to indicate if a lead in Marketo has been unsubscribed either the preference center or other method","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":81,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":82,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":83,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":84,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":85,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":86,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":87,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":88,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":89,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":90,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":91,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":92,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":93,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":94,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":95,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":96,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":97,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":98,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"IS_PQL":{"type":"BOOLEAN","index":99,"name":"IS_PQL","comment":null,"display_name":"is_pql"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":100,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PQL_CHANGE":{"type":"BOOLEAN","index":101,"name":"is_pql_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_pql flag is set to True OR the is_pql flag is set to False and the is_pql_marketo flag set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_pql_change"},"PQL_NAMESPACE_ID":{"type":"NUMBER","index":102,"name":"pql_namespace_id","comment":null,"description":"Namespace id of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_id"},"PQL_NAMESPACE_NAME":{"type":"TEXT","index":103,"name":"pql_namespace_name","comment":null,"description":"Namespace name of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_name"},"PQL_NAMESPACE_NAME_MASKED":{"type":"TEXT","index":104,"name":"pql_namespace_name_masked","comment":null,"description":"Masked version of PQL namespace_name. Field created to be used in mart_marketing_contact_no_pii.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_name_masked"},"PQL_PRODUCT_INTERACTION":{"type":"TEXT","index":105,"name":"pql_product_interaction","comment":null,"description":"Type of product interaction that the PQL had. As of now, it can either be SaaS Trial or Hand Raise PQL.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_product_interaction"},"PQL_LIST_STAGES":{"type":"ARRAY","index":106,"name":"pql_list_stages","comment":null,"description":"List of product stages adopted by the PQL namespace. It only counts the events done before any conversion was done (if any), SMAU events and events done in the first year of the creation of the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_list_stages"},"PQL_NBR_STAGES":{"type":"NUMBER","index":107,"name":"pql_nbr_stages","comment":null,"description":"Number of product stages adopted by the PQL namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_stages"},"PQL_NBR_NAMESPACE_USERS":{"type":"NUMBER","index":108,"name":"pql_nbr_namespace_users","comment":null,"description":"Current member count of the PQL namespace. This is calculated using the data in the Gitlab.com members table based on the number of accepted invites. If this number is zero, this is replaced to be 1 as all namespaces have at least one member, the creator.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_namespace_users"},"PQL_TRIAL_START_DATE":{"type":"DATE","index":109,"name":"pql_trial_start_date","comment":null,"description":"Trial start date of the PQL namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_trial_start_date"},"PQL_MIN_SUBSCRIPTION_START_DATE":{"type":"DATE","index":110,"name":"PQL_MIN_SUBSCRIPTION_START_DATE","comment":null,"display_name":"pql_min_subscription_start_date"},"PQL_EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":111,"name":"pql_event_created_at","comment":null,"description":"Date that the PQL lead was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_event_created_at"},"PQL_NBR_INTEGRATIONS_INSTALLED":{"type":"NUMBER","index":112,"name":"pql_nbr_integrations_installed","comment":null,"description":"Number of integrations services installed in the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_integrations_installed"},"PQL_INTEGRATIONS_INSTALLED":{"type":"ARRAY","index":113,"name":"pql_integrations_installed","comment":null,"description":"List of all the integrations services installed in the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_integrations_installed"},"PQL_NAMESPACE_CREATOR_JOB_DESCRIPTION":{"type":"TEXT","index":114,"name":"pql_namespace_creator_job_description","comment":null,"description":"Namespace creator job description of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_creator_job_description"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":115,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":116,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":117,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":118,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":119,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":120,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":121,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"IS_PTPT_CONTACT":{"type":"BOOLEAN","index":122,"name":"is_ptpt_contact","comment":null,"description":"Flag if marketing contact has a ptpt score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptpt_contact"},"IS_PTPT_CONTACT_CHANGE":{"type":"BOOLEAN","index":123,"name":"IS_PTPT_CONTACT_CHANGE","comment":null,"display_name":"is_ptpt_contact_change"},"PTPT_NAMESPACE_ID":{"type":"TEXT","index":124,"name":"ptpt_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase Trial score. More information on the propensity to purchase project can be seen [HERE](https://docs.google.com/presentation/d/1EyS9Wq6F0qlQwt5sj7x8VnSSGD1vIy3AcSpMGddZdbk/edit#slide=id.g13222807856_0_0)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_namespace_id"},"PTPT_SCORE_GROUP":{"type":"NUMBER","index":125,"name":"ptpt_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptpt_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_score_group"},"PTPT_INSIGHTS":{"type":"TEXT","index":126,"name":"ptpt_insights","comment":null,"description":"Top explanatory insights for the ptpt_namespace_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_insights"},"PTPT_SCORE_DATE":{"type":"DATE","index":127,"name":"ptpt_score_date","comment":null,"description":"Date the ptpt_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_score_date"},"PTPT_PAST_SCORE_GROUP":{"type":"NUMBER","index":128,"name":"ptpt_past_score_group","comment":null,"description":"Past ptpt_score_group given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_past_score_group"},"PTPT_PAST_SCORE_DATE":{"type":"DATE","index":129,"name":"ptpt_past_score_date","comment":null,"description":"Past ptpt_score_date given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_past_score_date"},"IS_PTPF_CONTACT":{"type":"BOOLEAN","index":130,"name":"is_ptpf_contact","comment":null,"description":"Flag if marketing contact has a ptpf score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptpf_contact"},"PTPF_NAMESPACE_ID":{"type":"TEXT","index":131,"name":"ptpf_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase Free score.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_namespace_id"},"PTPF_SCORE_GROUP":{"type":"NUMBER","index":132,"name":"ptpf_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptpf_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_score_group"},"PTPF_SCORE_DATE":{"type":"DATE","index":133,"name":"ptpf_score_date","comment":null,"description":"Date the ptpf_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_score_date"},"PTPF_PAST_SCORE_GROUP":{"type":"NUMBER","index":134,"name":"ptpf_past_score_group","comment":null,"description":"Past ptpf_score_group given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_past_score_group"},"PTPF_PAST_SCORE_DATE":{"type":"DATE","index":135,"name":"ptpf_past_score_date","comment":null,"description":"Past ptpf_score_date givene to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_past_score_date"},"IS_PTP_CONTACT":{"type":"BOOLEAN","index":136,"name":"is_ptp_contact","comment":null,"description":"Flag if marketing contact has a ptp score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptp_contact"},"IS_PTP_CONTACT_CHANGE":{"type":"BOOLEAN","index":137,"name":"is_ptp_contact_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_ptp_contact flag is set to True OR the is_ptp_contact flag is set to False and the is_ptp_contact_marketo flag set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptp_contact_change"},"PTP_NAMESPACE_ID":{"type":"TEXT","index":138,"name":"ptp_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase score. This is in turn a combination of the ptpt and ptpf scores and is the score that will be ultimately shown in SFDC. More information on how the scores where combined can be found in the documentation of the prep_ptp_scores_by_user dbt model.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_namespace_id"},"PTP_SCORE_GROUP":{"type":"NUMBER","index":139,"name":"ptp_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptp_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_score_group"},"PTP_SCORE_DATE":{"type":"DATE","index":140,"name":"ptp_score_date","comment":null,"description":"Date the ptp_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_score_date"},"PTP_INSIGHTS":{"type":"TEXT","index":141,"name":"ptp_insights","comment":null,"description":"Top explanatory insights for the ptp_namespace_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_insights"},"PTP_PAST_INSIGHTS":{"type":"TEXT","index":142,"name":"ptp_past_insights","comment":null,"description":"Top explanatory insights for the past score given to the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_insights"},"PTP_PAST_SCORE_GROUP":{"type":"NUMBER","index":143,"name":"ptp_past_score_group","comment":null,"description":"Past ptp_score_group assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_score_group"},"PTP_PAST_SCORE_DATE":{"type":"DATE","index":144,"name":"ptp_past_score_date","comment":null,"description":"Past ptp_score_date assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_score_date"},"PTP_DAYS_SINCE_TRIAL_START":{"type":"TEXT","index":145,"name":"ptp_days_since_trial_start","comment":null,"description":"Days since last trial started. Currently, only filled for marketing contacts with `ptp_source = Free`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_days_since_trial_start"},"PTP_SOURCE":{"type":"TEXT","index":146,"name":"ptp_source","comment":null,"description":"The source of the score. Currently, only two values are possible, Free (PtPF model) or Trial (PtPT model)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_source"},"USER_LIMIT_NAMESPACE_ID":{"type":"NUMBER","index":147,"name":"user_limit_namespace_id","comment":null,"description":"Namespace id corresponding to the user limit campaign","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_namespace_id"},"USER_LIMIT_NOTIFICATION_AT":{"type":"TIMESTAMP_NTZ","index":148,"name":"user_limit_notification_at","comment":null,"description":"Date time indicating when the marketing contact user_limit_namespace_id entered the user limit notification state. More information about this field can be seen [HERE](https://gitlab.com/gitlab-org/gitlab/-/issues/375748)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_notification_at"},"USER_LIMIT_ENFORCEMENT_AT":{"type":"TIMESTAMP_NTZ","index":149,"name":"user_limit_enforcement_at","comment":null,"description":"Date time indicating when the marketing contact user_limit_namespace_id entered the user limit enforcement state. More information about this field can be seen [HERE](https://gitlab.com/gitlab-org/gitlab/-/issues/375748)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_enforcement_at"},"IS_IMPACTED_BY_USER_LIMIT":{"type":"BOOLEAN","index":150,"name":"is_impacted_by_user_limit","comment":null,"description":"Flag that indicates if marketing contact is affected by namespace user limit campaign","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_impacted_by_user_limit"},"IS_IMPACTED_BY_USER_LIMIT_CHANGE":{"type":"BOOLEAN","index":151,"name":"IS_IMPACTED_BY_USER_LIMIT_CHANGE","comment":null,"display_name":"is_impacted_by_user_limit_change"},"USAGE_UMAU_28_DAYS_USER":{"type":"NUMBER","index":152,"name":"USAGE_UMAU_28_DAYS_USER","comment":null,"display_name":"usage_umau_28_days_user"},"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":153,"name":"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"usage_action_monthly_active_users_project_repo_28_days_user"},"USAGE_MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":154,"name":"USAGE_MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"usage_merge_requests_28_days_user"},"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":155,"name":"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"usage_commit_comment_all_time_event"},"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":156,"name":"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"usage_source_code_pushes_all_time_event"},"USAGE_CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"USAGE_CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipelines_28_days_user"},"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":158,"name":"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_internal_pipelines_28_days_user"},"USAGE_CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":159,"name":"USAGE_CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"usage_ci_builds_28_days_user"},"USAGE_CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":160,"name":"USAGE_CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"usage_ci_builds_all_time_user"},"USAGE_CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"USAGE_CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_builds_all_time_event"},"USAGE_CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"USAGE_CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_runners_all_time_event"},"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":163,"name":"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"usage_auto_devops_enabled_all_time_event"},"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":164,"name":"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"usage_template_repositories_all_time_event"},"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":165,"name":"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipeline_config_repository_28_days_user"},"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":166,"name":"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"usage_user_unique_users_all_secure_scanners_28_days_user"},"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":167,"name":"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_container_scanning_jobs_28_days_user"},"USAGE_USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":168,"name":"USAGE_USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_sast_jobs_28_days_user"},"USAGE_USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":169,"name":"USAGE_USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dast_jobs_28_days_user"},"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":170,"name":"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dependency_scanning_jobs_28_days_user"},"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":171,"name":"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_license_management_jobs_28_days_user"},"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":172,"name":"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_secret_detection_jobs_28_days_user"},"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":173,"name":"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"usage_projects_with_packages_all_time_event"},"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":174,"name":"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"usage_projects_with_packages_28_days_event"},"USAGE_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":175,"name":"USAGE_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"usage_deployments_28_days_user"},"USAGE_RELEASES_28_DAYS_USER":{"type":"NUMBER","index":176,"name":"USAGE_RELEASES_28_DAYS_USER","comment":null,"display_name":"usage_releases_28_days_user"},"USAGE_EPICS_28_DAYS_USER":{"type":"NUMBER","index":177,"name":"USAGE_EPICS_28_DAYS_USER","comment":null,"display_name":"usage_epics_28_days_user"},"USAGE_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":178,"name":"USAGE_ISSUES_28_DAYS_USER","comment":null,"display_name":"usage_issues_28_days_user"},"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED":{"type":"NUMBER","index":179,"name":"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED","comment":null,"display_name":"usage_instance_user_count_not_aligned"},"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED":{"type":"NUMBER","index":180,"name":"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED","comment":null,"display_name":"usage_historical_max_users_not_aligned"},"LEAD_STATUS":{"type":"TEXT","index":181,"name":"LEAD_STATUS","comment":null,"display_name":"lead_status"},"LEAD_SOURCE":{"type":"TEXT","index":182,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"PREV_HASH":{"type":"TEXT","index":183,"name":"PREV_HASH","comment":null,"display_name":"prev_hash"},"LAST_CHANGED":{"type":"TIMESTAMP_LTZ","index":184,"name":"LAST_CHANGED","comment":null,"display_name":"last_changed"},"CREATED_BY":{"type":"TEXT","index":185,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":186,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":187,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":188,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":189,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":190,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"role_tier_text":{"name":"role_tier_text","description":"Json array of the person's roles and product tiers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role_tier_text"},"role_tier_namespace_text":{"name":"role_tier_namespace_text","description":"Json array of the person's roles and namespaces and product tiers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role_tier_namespace_text"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2033378816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_marketing_contact","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.hash_diff","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.bdg_marketing_contact_order","model.gitlab_snowflake.bdg_marketing_contact_order","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_ptpt_scores_by_user","model.gitlab_snowflake.prep_ptpt_scores_by_user","model.gitlab_snowflake.prep_ptpf_scores_by_user","model.gitlab_snowflake.prep_ptpf_scores_by_user","model.gitlab_snowflake.prep_ptp_scores_by_user","model.gitlab_snowflake.prep_ptp_scores_by_user","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","mart_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/mart_marketing_contact.sql","original_file_path":"models/common/sensitive/mart_marketing_contact.sql","name":"mart_marketing_contact","alias":"mart_marketing_contact","checksum":{"name":"sha256","checksum":"82f4387b0d23609d1e098201843c1ab45ea28ba701ac9a5eab34193c76ed905d"},"tags":["product"],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["bdg_marketing_contact_order"],["bdg_marketing_contact_order"],["dim_namespace"],["dim_namespace"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["customers_db_charges_xf"],["customers_db_charges_xf"],["customers_db_trials"],["customers_db_trials"],["customers_db_leads_source"],["customers_db_leads_source"],["fct_event_user_daily"],["fct_event_user_daily"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"],["prep_project"],["prep_project"],["prep_ptpt_scores_by_user"],["prep_ptpt_scores_by_user"],["prep_ptpf_scores_by_user"],["prep_ptpf_scores_by_user"],["prep_ptp_scores_by_user"],["prep_ptp_scores_by_user"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_namespace_details_source"]],"sources":[],"metrics":[],"description":"This table aggregates data from namespaces, orders, and subscriptions to the level of a marketing contact. Therefore a marketing contact can fall into multiple plan types. An individual could be a Free Individual namespace owner, a member of an Ultimate Group Namespace, and an Owner of a Premium Group Namespace. Each column aggregates data to answers a specific question at the contact level.\n\nAll the usage metrics, fields prefixed by `usage_` come from the latest month of data from the Self-Managed Usage Ping data. This data is related to marketing contact by the user that makes the order in the customers portal or the billing account related to the subscription_id  of the self-managed instance. In case there are multiple self-managed instances per user, then these are summed.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/mart_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["product"]},"created_at":1689033756.29843,"compiled_sql":"$17","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.mart_marketing_contact","label":"mart_marketing_contact"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"POC_PUMP_MARKETING_CONTACT_NAMESPACE_DETAIL","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"EMAIL_ADDRESS","comment":null,"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"COUNTRY":{"type":"TEXT","index":5,"name":"COUNTRY","comment":null,"display_name":"country"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"COMPANY_NAME","comment":null,"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"JOB_TITLE","comment":null,"display_name":"job_title"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":8,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_USER_NAME":{"type":"TEXT","index":9,"name":"GITLAB_USER_NAME","comment":null,"display_name":"gitlab_user_name"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":10,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":11,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":12,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":13,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":14,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"IS_PQL":{"type":"BOOLEAN","index":15,"name":"IS_PQL","comment":null,"display_name":"is_pql"},"MAX_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":16,"name":"max_trial_start_date","comment":null,"description":"The most recent trial start date across all the namespaces associated with the marketing_contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_trial_start_date"},"NAMESPACES_ARRAY":{"type":"ARRAY","index":17,"name":"namespaces_array","comment":null,"description":"$18","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespaces_array"},"PREV_HASH":{"type":"TEXT","index":18,"name":"PREV_HASH","comment":null,"display_name":"prev_hash"},"LAST_CHANGED":{"type":"TIMESTAMP_LTZ","index":19,"name":"LAST_CHANGED","comment":null,"display_name":"last_changed"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:50UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":318652416,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.poc_pump_marketing_contact_namespace_detail","raw_sql":"$19","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.hash_diff","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.ptpt_scores","model.gitlab_snowflake.ptpt_scores","model.gitlab_snowflake.ptpf_scores","model.gitlab_snowflake.ptpf_scores","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","poc_pump_marketing_contact_namespace_detail"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","original_file_path":"models/common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","name":"poc_pump_marketing_contact_namespace_detail","alias":"poc_pump_marketing_contact_namespace_detail","checksum":{"name":"sha256","checksum":"b4c6a11217caa9a515d07b42f1e6819823a5b4717d2314ade4e35276553606fd"},"tags":[],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["dim_namespace"],["dim_namespace"],["ptpt_scores"],["ptpt_scores"],["ptpf_scores"],["ptpf_scores"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["customers_db_trials"],["customers_db_trials"],["customers_db_charges_xf"],["customers_db_charges_xf"],["customers_db_leads_source"],["customers_db_leads_source"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"],["prep_project"],["prep_project"],["fct_event_user_daily"],["fct_event_user_daily"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table contains information of the marketing contact (email address) and namespace information for Gitlab.com users. The grain of the table is one row per email address, the namespace details are then stored in an array of JSON objects.  Only the ultimate parent namespaces are being synced into the namespace details array. If an user has access only to a subgroup of a ultimate parent namespace, the ultimate namespace is not linked to the ultimate namespace. For example, user A is a member of the sub group namespace 2. The ultimate parent namespace of namespace 2 is namespace 1. Since user A is only a direct member of namespace 2 and namespace 2 is not an ultimate namespace, user A has no namespaces listed in the namespace array list.  ","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.3011067,"compiled_sql":"$1a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.poc_pump_marketing_contact_namespace_detail","label":"poc_pump_marketing_contact_namespace_detail"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"CUSTOMERS_DB_ORDERS_WITH_INCOMPLETE_CHARGES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":1,"name":"RATE_PLAN_CHARGE_ID","comment":null,"display_name":"rate_plan_charge_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"RATE_PLAN_ID":{"type":"TEXT","index":3,"name":"RATE_PLAN_ID","comment":null,"display_name":"rate_plan_id"},"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL":{"type":"BOOLEAN","index":4,"name":"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL","comment":null,"display_name":"is_purchased_through_subscription_portal"},"CURRENT_CUSTOMER_ID":{"type":"NUMBER","index":5,"name":"CURRENT_CUSTOMER_ID","comment":null,"display_name":"current_customer_id"},"CURRENT_GITLAB_NAMESPACE_ID":{"type":"TEXT","index":6,"name":"CURRENT_GITLAB_NAMESPACE_ID","comment":null,"display_name":"current_gitlab_namespace_id"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":7,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"IS_STARTED_WITH_TRIAL":{"type":"BOOLEAN","index":8,"name":"IS_STARTED_WITH_TRIAL","comment":null,"display_name":"is_started_with_trial"},"TRIAL_START_DATE":{"type":"DATE","index":9,"name":"TRIAL_START_DATE","comment":null,"display_name":"trial_start_date"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":10,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"GITLAB_NAMESPACE_ID_LIST":{"type":"ARRAY","index":11,"name":"GITLAB_NAMESPACE_ID_LIST","comment":null,"display_name":"gitlab_namespace_id_list"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:12UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":0,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_orders_with_incomplete_charges","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_with_valid_charges","model.gitlab_snowflake.customers_db_orders_with_valid_charges","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_subscription_xf","model.gitlab_snowflake.zuora_subscription_xf"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","customers","restricted_safe","customers_db_orders_with_incomplete_charges"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/restricted_safe/customers_db_orders_with_incomplete_charges.sql","original_file_path":"models/legacy/customers/restricted_safe/customers_db_orders_with_incomplete_charges.sql","name":"customers_db_orders_with_incomplete_charges","alias":"customers_db_orders_with_incomplete_charges","checksum":{"name":"sha256","checksum":"c016a633e890604b500edcf30fab1d837a85d90c5b9a1cff1c8fb79fe72272f4"},"tags":["safe"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_orders_snapshots_base"],["customers_db_orders_snapshots_base"],["customers_db_orders_with_valid_charges"],["customers_db_orders_with_valid_charges"],["customers_db_trials"],["customers_db_trials"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_rate_plan_charge"],["zuora_rate_plan_charge"],["zuora_subscription_xf"],["zuora_subscription_xf"]],"sources":[],"metrics":[],"description":"$1c","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/restricted_safe/customers_db_orders_with_incomplete_charges.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.0257335,"compiled_sql":"$1d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.customers_db_orders_with_incomplete_charges","label":"customers_db_orders_with_incomplete_charges"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"CUSTOMERS_DB_ORDERS_WITH_VALID_CHARGES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":1,"name":"RATE_PLAN_CHARGE_ID","comment":null,"display_name":"rate_plan_charge_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"RATE_PLAN_ID":{"type":"TEXT","index":3,"name":"RATE_PLAN_ID","comment":null,"display_name":"rate_plan_id"},"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL":{"type":"BOOLEAN","index":4,"name":"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL","comment":null,"display_name":"is_purchased_through_subscription_portal"},"CURRENT_CUSTOMER_ID":{"type":"NUMBER","index":5,"name":"CURRENT_CUSTOMER_ID","comment":null,"display_name":"current_customer_id"},"CURRENT_GITLAB_NAMESPACE_ID":{"type":"TEXT","index":6,"name":"CURRENT_GITLAB_NAMESPACE_ID","comment":null,"display_name":"current_gitlab_namespace_id"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":7,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"IS_STARTED_WITH_TRIAL":{"type":"BOOLEAN","index":8,"name":"IS_STARTED_WITH_TRIAL","comment":null,"display_name":"is_started_with_trial"},"TRIAL_START_DATE":{"type":"DATE","index":9,"name":"TRIAL_START_DATE","comment":null,"display_name":"trial_start_date"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":10,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"GITLAB_NAMESPACE_ID_LIST":{"type":"ARRAY","index":11,"name":"GITLAB_NAMESPACE_ID_LIST","comment":null,"display_name":"gitlab_namespace_id_list"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":16239104,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_orders_with_valid_charges","raw_sql":"$1e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_subscription_xf","model.gitlab_snowflake.zuora_subscription_xf"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","customers","restricted_safe","customers_db_orders_with_valid_charges"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/restricted_safe/customers_db_orders_with_valid_charges.sql","original_file_path":"models/legacy/customers/restricted_safe/customers_db_orders_with_valid_charges.sql","name":"customers_db_orders_with_valid_charges","alias":"customers_db_orders_with_valid_charges","checksum":{"name":"sha256","checksum":"c6e9ecc281bf3bf54b58d7c3e2778052e23b3cf1f8ccd867ab76cca65cc30886"},"tags":["safe"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_orders_snapshots_base"],["customers_db_orders_snapshots_base"],["customers_db_trials"],["customers_db_trials"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_rate_plan_charge"],["zuora_rate_plan_charge"],["zuora_subscription_xf"],["zuora_subscription_xf"]],"sources":[],"metrics":[],"description":"$1f","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/restricted_safe/customers_db_orders_with_valid_charges.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.0268075,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.customers_db_orders_with_valid_charges","label":"customers_db_orders_with_valid_charges"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USERS_BLOCKED_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"ROLE_ID","comment":null,"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"ROLE","comment":null,"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":68,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"USER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":69,"name":"USER_UPDATED_AT","comment":null,"display_name":"user_updated_at"},"DAYS_ACTIVE":{"type":"NUMBER","index":70,"name":"days_active","comment":null,"description":"days between user creation and last activity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_active"},"ACCOUNT_AGE":{"type":"NUMBER","index":71,"name":"ACCOUNT_AGE","comment":null,"display_name":"account_age"},"ACCOUNT_AGE_COHORT":{"type":"TEXT","index":72,"name":"account_age_cohort","comment":null,"description":"cohorting of time between last dbt run and user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_age_cohort"},"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID":{"type":"NUMBER","index":73,"name":"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID","comment":null,"display_name":"highest_paid_subscription_plan_id"},"IS_PAID_USER":{"type":"BOOLEAN","index":74,"name":"IS_PAID_USER","comment":null,"display_name":"is_paid_user"},"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID":{"type":"NUMBER","index":75,"name":"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID","comment":null,"display_name":"highest_paid_subscription_namespace_id"},"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":76,"name":"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID","comment":null,"display_name":"highest_paid_subscription_ultimate_parent_id"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE":{"type":"TEXT","index":77,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE","comment":null,"display_name":"highest_paid_subscription_inheritance_source_type"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID":{"type":"NUMBER","index":78,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID","comment":null,"display_name":"highest_paid_subscription_inheritance_source_id"},"HAS_CUSTOMER_ACCOUNT":{"type":"BOOLEAN","index":79,"name":"HAS_CUSTOMER_ACCOUNT","comment":null,"display_name":"has_customer_account"},"FIRST_CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":80,"name":"FIRST_CUSTOMER_CREATED_AT","comment":null,"display_name":"first_customer_created_at"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":81,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":82,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"HAS_STARTED_TRIAL":{"type":"BOOLEAN","index":83,"name":"HAS_STARTED_TRIAL","comment":null,"display_name":"has_started_trial"},"HAS_STARTED_TRIAL_AT":{"type":"DATE","index":84,"name":"HAS_STARTED_TRIAL_AT","comment":null,"display_name":"has_started_trial_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":219677184,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","raw_sql":"$21","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.filter_out_active_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_users_blocked_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_users_blocked_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_blocked_xf.sql","name":"gitlab_dotcom_users_blocked_xf","alias":"gitlab_dotcom_users_blocked_xf","checksum":{"name":"sha256","checksum":"40410bca8a2bfc73a5dda13495faf297edc3d2c375876bca10af3105a24d02ff"},"tags":["product","mnpi_exception"],"refs":[["customers_db_customers"],["customers_db_customers"],["customers_db_trials"],["customers_db_trials"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"$22","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_blocked_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033759.4374166,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[{"id":"model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","sql":"$24"}],"relation_name":"\"PROD\".legacy.gitlab_dotcom_users_blocked_xf","label":"gitlab_dotcom_users_blocked_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USERS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"ROLE_ID","comment":null,"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"ROLE","comment":null,"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":68,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"USER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":69,"name":"USER_UPDATED_AT","comment":null,"display_name":"user_updated_at"},"DAYS_ACTIVE":{"type":"NUMBER","index":70,"name":"days_active","comment":null,"description":"days between user creation and last activity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_active"},"ACCOUNT_AGE":{"type":"NUMBER","index":71,"name":"ACCOUNT_AGE","comment":null,"display_name":"account_age"},"ACCOUNT_AGE_COHORT":{"type":"TEXT","index":72,"name":"account_age_cohort","comment":null,"description":"cohorting of time between last dbt run and user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_age_cohort"},"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID":{"type":"NUMBER","index":73,"name":"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID","comment":null,"display_name":"highest_paid_subscription_plan_id"},"IS_PAID_USER":{"type":"BOOLEAN","index":74,"name":"IS_PAID_USER","comment":null,"display_name":"is_paid_user"},"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID":{"type":"NUMBER","index":75,"name":"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID","comment":null,"display_name":"highest_paid_subscription_namespace_id"},"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":76,"name":"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID","comment":null,"display_name":"highest_paid_subscription_ultimate_parent_id"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE":{"type":"TEXT","index":77,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE","comment":null,"display_name":"highest_paid_subscription_inheritance_source_type"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID":{"type":"NUMBER","index":78,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID","comment":null,"display_name":"highest_paid_subscription_inheritance_source_id"},"HAS_CUSTOMER_ACCOUNT":{"type":"BOOLEAN","index":79,"name":"HAS_CUSTOMER_ACCOUNT","comment":null,"display_name":"has_customer_account"},"FIRST_CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":80,"name":"FIRST_CUSTOMER_CREATED_AT","comment":null,"display_name":"first_customer_created_at"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":81,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":82,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"HAS_STARTED_TRIAL":{"type":"BOOLEAN","index":83,"name":"HAS_STARTED_TRIAL","comment":null,"display_name":"has_started_trial"},"HAS_STARTED_TRIAL_AT":{"type":"DATE","index":84,"name":"HAS_STARTED_TRIAL_AT","comment":null,"display_name":"has_started_trial_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1711788544,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_xf","raw_sql":"$25","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_users_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_users_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_xf.sql","name":"gitlab_dotcom_users_xf","alias":"gitlab_dotcom_users_xf","checksum":{"name":"sha256","checksum":"d362accc9899b1c964f4c7ab946596fb30b3ebb6db3eae295b1781de483d6694"},"tags":["product","mnpi_exception"],"refs":[["customers_db_customers"],["customers_db_customers"],["customers_db_trials"],["customers_db_trials"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"$26","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033759.4348238,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[{"id":"model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","sql":"$28"}],"relation_name":"\"PROD\".legacy.gitlab_dotcom_users_xf","label":"gitlab_dotcom_users_xf"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('customers_db_trials')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_trials"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","customers","xf","not_null_customers_db_trials_order_id"],"unique_id":"test.gitlab_snowflake.not_null_customers_db_trials_order_id.b4b199c8b5","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_customers_db_trials_order_id.sql","original_file_path":"models/legacy/customers/xf/schema.yml","name":"not_null_customers_db_trials_order_id","alias":"not_null_customers_db_trials_order_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["customers_db_trials"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/xf/schema.yml/not_null_customers_db_trials_order_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033763.0006585,"compiled_sql":"\n    \n    \n\n\n\nselect order_id\nfrom \"PROD\".legacy.customers_db_trials\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"order_id","file_key_name":"models.customers_db_trials","label":"not_null_customers_db_trials_order_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"order_id","model":"{{ get_where_subquery(ref('customers_db_trials')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_trials"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","customers","xf","unique_customers_db_trials_order_id"],"unique_id":"test.gitlab_snowflake.unique_customers_db_trials_order_id.f271410c56","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_customers_db_trials_order_id.sql","original_file_path":"models/legacy/customers/xf/schema.yml","name":"unique_customers_db_trials_order_id","alias":"unique_customers_db_trials_order_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["customers_db_trials"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/xf/schema.yml/unique_customers_db_trials_order_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033763.0052304,"compiled_sql":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".legacy.customers_db_trials\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"order_id","file_key_name":"models.customers_db_trials","label":"unique_customers_db_trials_order_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('customers_db_trials')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_trials"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","customers","xf","not_null_customers_db_trials_customer_id"],"unique_id":"test.gitlab_snowflake.not_null_customers_db_trials_customer_id.85bbb9b231","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_customers_db_trials_customer_id.sql","original_file_path":"models/legacy/customers/xf/schema.yml","name":"not_null_customers_db_trials_customer_id","alias":"not_null_customers_db_trials_customer_id","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["customers_db_trials"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/xf/schema.yml/not_null_customers_db_trials_customer_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033763.00978,"compiled_sql":"\n    \n    \n\n\n\nselect customer_id\nfrom \"PROD\".legacy.customers_db_trials\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"customer_id","file_key_name":"models.customers_db_trials","label":"not_null_customers_db_trials_customer_id"}]},"node":{"resource_type":"model","name":"customers_db_trials","unique_id":"model.gitlab_snowflake.customers_db_trials"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"CUSTOMERS","name":"CUSTOMERS_DB_CUSTOMERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CUSTOMER_ID":{"type":"NUMBER","index":1,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"customer_id"},"CUSTOMER_FIRST_NAME":{"type":"TEXT","index":2,"name":"customer_first_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_first_name"},"CUSTOMER_LAST_NAME":{"type":"TEXT","index":3,"name":"customer_last_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_last_name"},"CUSTOMER_EMAIL":{"type":"TEXT","index":4,"name":"customer_email","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_email"},"CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"customer_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_created_at"},"CUSTOMER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"customer_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_updated_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":7,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"current_sign_in_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"last_sign_in_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_sign_in_at"},"CUSTOMER_PROVIDER":{"type":"TEXT","index":10,"name":"CUSTOMER_PROVIDER","comment":null,"display_name":"customer_provider"},"CUSTOMER_PROVIDER_USER_ID":{"type":"TEXT","index":11,"name":"CUSTOMER_PROVIDER_USER_ID","comment":null,"display_name":"customer_provider_user_id"},"ZUORA_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"zuora_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_account_id"},"COUNTRY":{"type":"TEXT","index":13,"name":"COUNTRY","comment":null,"display_name":"country"},"STATE":{"type":"TEXT","index":14,"name":"STATE","comment":null,"display_name":"state"},"CITY":{"type":"TEXT","index":15,"name":"CITY","comment":null,"display_name":"city"},"VAT_CODE":{"type":"TEXT","index":16,"name":"VAT_CODE","comment":null,"display_name":"vat_code"},"COMPANY":{"type":"TEXT","index":17,"name":"COMPANY","comment":null,"display_name":"company"},"COMPANY_SIZE":{"type":"TEXT","index":18,"name":"COMPANY_SIZE","comment":null,"display_name":"company_size"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":19,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"CUSTOMER_IS_BILLABLE":{"type":"BOOLEAN","index":20,"name":"CUSTOMER_IS_BILLABLE","comment":null,"display_name":"customer_is_billable"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"salesforce_account_id":{"name":"salesforce_account_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"salesforce_account_id"},"billable":{"name":"billable","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billable"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_customers_source","raw_sql":"$29","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.customers.customers_db_customers"]},"config":{"enabled":true,"alias":null,"schema":"customers","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"customers","fqn":["gitlab_snowflake","sources","customers","customers_db_customers_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/customers/customers_db_customers_source.sql","original_file_path":"models/sources/customers/customers_db_customers_source.sql","name":"customers_db_customers_source","alias":"customers_db_customers_source","checksum":{"name":"sha256","checksum":"c86673f73b373e1ab6a8dcfaa2a29493006dd689c0fca6757037ba2b22256e24"},"tags":["sources"],"refs":[],"sources":[["customers","customers_db_customers"]],"metrics":[],"description":"This model is the data from tap-postgres for the customers table from customers.gitlab.com. The schema of the database is defined in [this ruby code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/master/db/schema.rb).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/customers/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/customers_db_customers_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"customers","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033748.403538,"compiled_sql":"$2a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".customers.customers_db_customers_source","label":"customers_db_customers_source"},{"metadata":{"type":"VIEW","schema":"SENSITIVE","name":"GITLAB_DOTCOM_USERS","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"USER_ID","comment":null,"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"ROLE_ID","comment":null,"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"ROLE","comment":null,"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_users_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","sensitive","gitlab_dotcom_users"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/sensitive/gitlab_dotcom_users.sql","original_file_path":"models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_users.sql","name":"gitlab_dotcom_users","alias":"gitlab_dotcom_users","checksum":{"name":"sha256","checksum":"22558de65430f94f48b3b102ab609868605c6838cc12f380b5f2ddc27c43ed16"},"tags":["product"],"refs":[["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_users.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033715.2434313,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.gitlab_dotcom_users","label":"gitlab_dotcom_users"},{"metadata":{"type":"VIEW","schema":"SENSITIVE","name":"GITLAB_DOTCOM_NAMESPACES","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":2,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":3,"name":"NAMESPACE_PATH","comment":null,"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":4,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":5,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":6,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":9,"name":"IS_MEMBERSHIP_LOCKED","comment":null,"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":10,"name":"HAS_REQUEST_ACCESS_ENABLED","comment":null,"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":11,"name":"HAS_SHARE_WITH_GROUP_LOCKED","comment":null,"display_name":"has_share_with_group_locked"},"VISIBILITY_LEVEL":{"type":"TEXT","index":12,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":13,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":14,"name":"LDAP_SYNC_ERROR","comment":null,"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LDAP_SYNC_LAST_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"LDAP_SYNC_LAST_SYNC_AT","comment":null,"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":18,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":19,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":20,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":21,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":22,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":23,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION","comment":null,"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":24,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":25,"name":"PROJECT_CREATION_LEVEL","comment":null,"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":26,"name":"PUSH_RULE_ID","comment":null,"display_name":"push_rule_id"},"SHARED_RUNNERS_ENABLED":{"type":"VARIANT","index":27,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"PLAN_ID":{"type":"NUMBER","index":28,"name":"PLAN_ID","comment":null,"display_name":"plan_id"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespaces","raw_sql":"WITH namespaces AS (\n\n  SELECT *\n  FROM {{ ref('gitlab_dotcom_namespaces_source') }}\n\n), gitlab_subscriptions AS (\n\n    SELECT *\n    FROM {{ref('gitlab_dotcom_gitlab_subscriptions')}}\n    WHERE is_currently_valid = TRUE\n\n), joined AS (\n\n  SELECT\n    namespaces.*,\n    COALESCE(gitlab_subscriptions.plan_id, 34) AS plan_id\n  FROM namespaces\n    LEFT JOIN gitlab_subscriptions\n      ON namespaces.namespace_id = gitlab_subscriptions.namespace_id\n\n)\n\nSELECT *\nFROM joined","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","sensitive","gitlab_dotcom_namespaces"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/sensitive/gitlab_dotcom_namespaces.sql","original_file_path":"models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_namespaces.sql","name":"gitlab_dotcom_namespaces","alias":"gitlab_dotcom_namespaces","checksum":{"name":"sha256","checksum":"d0581b91b7c4f66c32ed2463841cbd217eed31877654c13d34e85d420c2bc7fc"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_gitlab_subscriptions"],["gitlab_dotcom_gitlab_subscriptions"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_namespaces.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033715.2562325,"compiled_sql":"WITH namespaces AS (\n\n  SELECT *\n  FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_namespaces_source\n\n), gitlab_subscriptions AS (\n\n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_gitlab_subscriptions\n    WHERE is_currently_valid = TRUE\n\n), joined AS (\n\n  SELECT\n    namespaces.*,\n    COALESCE(gitlab_subscriptions.plan_id, 34) AS plan_id\n  FROM namespaces\n    LEFT JOIN gitlab_subscriptions\n      ON namespaces.namespace_id = gitlab_subscriptions.namespace_id\n\n)\n\nSELECT *\nFROM joined","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.gitlab_dotcom_namespaces","label":"gitlab_dotcom_namespaces"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"ZUORA_RATE_PLAN","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_ID":{"type":"TEXT","index":1,"name":"rate_plan_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"rate_plan_id"},"RATE_PLAN_NAME":{"type":"TEXT","index":2,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"SUBSCRIPTION_ID":{"type":"TEXT","index":3,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"PRODUCT_ID":{"type":"TEXT","index":4,"name":"product_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_id"},"PRODUCT_RATE_PLAN_ID":{"type":"TEXT","index":5,"name":"PRODUCT_RATE_PLAN_ID","comment":null,"display_name":"product_rate_plan_id"},"AMENDEMENT_ID":{"type":"TEXT","index":6,"name":"AMENDEMENT_ID","comment":null,"display_name":"amendement_id"},"AMENDEMENT_TYPE":{"type":"TEXT","index":7,"name":"AMENDEMENT_TYPE","comment":null,"display_name":"amendement_type"},"UPDATED_BY_ID":{"type":"TEXT","index":8,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":9,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"CREATED_BY_ID":{"type":"TEXT","index":10,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":11,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":12,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"PRODUCT_CATEGORY":{"type":"TEXT","index":13,"name":"product_category","comment":null,"description":"Product category is based on the rate plan name.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: GitHost, Other, SaaS - Ultimate, Basic, SaaS - Bronze, Self-Managed - Premium, Self-Managed - Starter, Self-Managed - Ultimate, Support, Plus, SaaS - Premium, Standard, Trueup, Storage, SaaS - Other, Dedicated - Ultimate"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":14,"name":"DELIVERY","comment":null,"display_name":"delivery"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:57UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":41891840,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_rate_plan","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('zuora_rate_plan_source') }}\n\n), with_product_category AS (\n\n    SELECT *,\n      {{ product_category('rate_plan_name') }},\n      {{ delivery('product_category') }}\n    FROM source\n\n)\n\nSELECT *\nFROM with_product_category","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.delivery","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","zuora","intermediate","zuora_rate_plan"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/intermediate/zuora_rate_plan.sql","original_file_path":"models/legacy/zuora/intermediate/zuora_rate_plan.sql","name":"zuora_rate_plan","alias":"zuora_rate_plan","checksum":{"name":"sha256","checksum":"b1a5c0b1c40ccb7292cfef8e99248cbc581a83086528c06584778711ec66a9d6"},"tags":[],"refs":[["zuora_rate_plan_source"],["zuora_rate_plan_source"]],"sources":[],"metrics":[],"description":"Base model for Zuora Rate Plans","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/intermediate/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/intermediate/zuora_rate_plan.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033763.0553646,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.zuora_rate_plan","label":"zuora_rate_plan"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_BASE_MRR","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":1,"name":"rate_plan_charge_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"rate_plan_charge_id"},"ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"COUNTRY":{"type":"TEXT","index":4,"name":"COUNTRY","comment":null,"display_name":"country"},"CURRENCY":{"type":"TEXT","index":5,"name":"CURRENCY","comment":null,"display_name":"currency"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":6,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":8,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"EXCLUDE_FROM_RENEWAL_REPORT":{"type":"TEXT","index":9,"name":"EXCLUDE_FROM_RENEWAL_REPORT","comment":null,"display_name":"exclude_from_renewal_report"},"LINEAGE":{"type":"TEXT","index":10,"name":"lineage","comment":null,"description":"All the subscriptions subsquent to the primary subscription, separated by commas.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lineage"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":11,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"DELIVERY":{"type":"TEXT","index":13,"name":"DELIVERY","comment":null,"display_name":"delivery"},"PRODUCT_CATEGORY":{"type":"TEXT","index":14,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"RATE_PLAN_NAME":{"type":"TEXT","index":15,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"MRR":{"type":"FLOAT","index":16,"name":"mrr","comment":null,"description":"Monthly recurring revenue","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mrr"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":18,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"TCV":{"type":"FLOAT","index":19,"name":"TCV","comment":null,"display_name":"tcv"},"UNIT_OF_MEASURE":{"type":"TEXT","index":20,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"QUANTITY":{"type":"FLOAT","index":21,"name":"QUANTITY","comment":null,"display_name":"quantity"},"SUB_START_MONTH":{"type":"DATE","index":22,"name":"SUB_START_MONTH","comment":null,"display_name":"sub_start_month"},"SUB_END_MONTH":{"type":"DATE","index":23,"name":"SUB_END_MONTH","comment":null,"display_name":"sub_end_month"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":24,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":25,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"MONTH_INTERVAL":{"type":"NUMBER","index":26,"name":"MONTH_INTERVAL","comment":null,"display_name":"month_interval"},"EFFECTIVE_START_DATE":{"type":"TIMESTAMP_TZ","index":27,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"TIMESTAMP_TZ","index":28,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"SUBSCRIPTION_VERSION_TERM_START_DATE":{"type":"DATE","index":29,"name":"subscription_version_term_start_date","comment":null,"description":"The term start date of the subscription period that the charge belongs to. This column shouldn't be null except for 5 specific charges. This behavior is captured in a specific test `zuora_base_mrr_not_null_term_dates`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version_term_start_date"},"SUBSCRIPTION_VERSION_TERM_END_DATE":{"type":"DATE","index":30,"name":"subscription_version_term_end_date","comment":null,"description":"The term end date of the subscription period that the charge belongs to. This column shouldn't be null except for 5 specific charges. This behavior is captured in a specific test `zuora_base_mrr_not_null_term_dates`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version_term_end_date"},"COHORT_MONTH":{"type":"DATE","index":31,"name":"COHORT_MONTH","comment":null,"display_name":"cohort_month"},"COHORT_QUARTER":{"type":"DATE","index":32,"name":"COHORT_QUARTER","comment":null,"display_name":"cohort_quarter"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":14470144,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_base_mrr","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_account","model.gitlab_snowflake.zuora_account","model.gitlab_snowflake.zuora_subscription_xf","model.gitlab_snowflake.zuora_subscription_xf","model.gitlab_snowflake.zuora_subscription_periods","model.gitlab_snowflake.zuora_subscription_periods","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_contact","model.gitlab_snowflake.zuora_contact","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_rate_plan_charge"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_base_mrr"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_base_mrr.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_base_mrr.sql","name":"zuora_base_mrr","alias":"zuora_base_mrr","checksum":{"name":"sha256","checksum":"00e7b668452448c398bfb8c2cb09cbcd24be26ad123b2b8e079c05e5938f0e13"},"tags":["safe"],"refs":[["zuora_account"],["zuora_account"],["zuora_subscription_xf"],["zuora_subscription_xf"],["zuora_subscription_periods"],["zuora_subscription_periods"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_contact"],["zuora_contact"],["zuora_rate_plan_charge"],["zuora_rate_plan_charge"]],"sources":[],"metrics":[],"description":"$2d","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_base_mrr.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2212007,"compiled_sql":"$2e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_base_mrr","label":"zuora_base_mrr"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CUSTOMERS_DB_ORDERS_SNAPSHOTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ORDER_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"order_snapshot_id","comment":null,"description":"Auto-generated primary key when building the snapshot with dbt","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"order_snapshot_id"},"ORDER_ID":{"type":"NUMBER","index":2,"name":"order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"order_id"},"CUSTOMER_ID":{"type":"NUMBER","index":3,"name":"CUSTOMER_ID","comment":null,"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID":{"type":"TEXT","index":4,"name":"PRODUCT_RATE_PLAN_ID","comment":null,"display_name":"product_rate_plan_id"},"SUBSCRIPTION_ID":{"type":"TEXT","index":5,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":6,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"ORDER_START_DATE":{"type":"TIMESTAMP_NTZ","index":8,"name":"ORDER_START_DATE","comment":null,"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"TIMESTAMP_NTZ","index":9,"name":"ORDER_END_DATE","comment":null,"display_name":"order_end_date"},"ORDER_QUANTITY":{"type":"NUMBER","index":10,"name":"ORDER_QUANTITY","comment":null,"display_name":"order_quantity"},"ORDER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"ORDER_CREATED_AT","comment":null,"display_name":"order_created_at"},"ORDER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"ORDER_UPDATED_AT","comment":null,"display_name":"order_updated_at"},"GITLAB_NAMESPACE_ID":{"type":"TEXT","index":13,"name":"GITLAB_NAMESPACE_ID","comment":null,"display_name":"gitlab_namespace_id"},"GITLAB_NAMESPACE_NAME":{"type":"TEXT","index":14,"name":"GITLAB_NAMESPACE_NAME","comment":null,"display_name":"gitlab_namespace_name"},"AMENDMENT_TYPE":{"type":"TEXT","index":15,"name":"AMENDMENT_TYPE","comment":null,"display_name":"amendment_type"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":16,"name":"ORDER_IS_TRIAL","comment":null,"display_name":"order_is_trial"},"LAST_EXTRA_CI_MINUTES_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"LAST_EXTRA_CI_MINUTES_SYNC_AT","comment":null,"display_name":"last_extra_ci_minutes_sync_at"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":18,"name":"valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":19,"name":"valid_to","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"valid_to"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 07:25UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":77668864,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_orders_snapshots_base","raw_sql":"$2f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.zuora_slugify","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.snapshots.customers_db_orders_snapshots"]},"config":{"enabled":true,"alias":"customers_db_orders_snapshots","schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","snapshots","base","customers_db_orders_snapshots_base"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/snapshots/base/customers_db_orders_snapshots_base.sql","original_file_path":"models/legacy/snapshots/base/customers_db_orders_snapshots_base.sql","name":"customers_db_orders_snapshots_base","alias":"customers_db_orders_snapshots","checksum":{"name":"sha256","checksum":"5b0314e6489d3126f9ac523c3de735f77bdf02bced2d3d979fd9967e067e409c"},"tags":[],"refs":[],"sources":[["snapshots","customers_db_orders_snapshots"]],"metrics":[],"description":"This is the base model for snapshotted orders data from the customers.gitlab.com database.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/snapshots/base/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/snapshots/base/customers_db_orders_snapshots_base.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"customers_db_orders_snapshots"},"created_at":1689033761.4335032,"compiled_sql":"$30","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.customers_db_orders_snapshots","label":"customers_db_orders_snapshots_base"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527},{"unique_id":"macro.dbt_utils.group_by","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","name":"group_by","macro_sql":"{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__group_by"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033675.9973366}]},"node":{"resource_type":"model","name":"customers_db_trials","unique_id":"model.gitlab_snowflake.customers_db_trials"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L31",null,{"versions":{"Source":"$32","Compiled":"$33"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
