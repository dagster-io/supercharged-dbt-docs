1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.customers_db_customers_source","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.customers_db_customers_source\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.customers_db_customers_source","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.customers_db_customers_source\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.customers_db_customers_source","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
25:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T62c,WITH source AS (

    SELECT *
    FROM {{ source('customers', 'customers_db_customers') }}
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed11:T622,WITH source AS (

    SELECT *
    FROM "RAW".tap_postgres.customers_db_customers
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed13:T1783,{{ simple_cte ([
  ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_members', 'gitlab_dotcom_members_source'),
  ('gitlab_users', 'gitlab_dotcom_users_source'),
  ('customer_db_source', 'customers_db_customers_source'),
  ('zuora_account', 'zuora_account_source'),
  ('zuora_contact', 'zuora_contact_source'),
  ('dim_marketing_contact', 'dim_marketing_contact'),
  ('prep_namespace', 'prep_namespace')
]) }}

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2022-10-03"
) }}14:T19aa,

WITH gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_members AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_users AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_customers_source

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

)

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2022-10-03'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final15:T5510,WITH sfdc_lead AS (

    SELECT *
    FROM {{ref('sfdc_lead_source') }}

), sfdc_contact AS (

    SELECT *
    FROM {{ref('sfdc_contact_source') }}

), sfdc_account AS (

    SELECT *
    FROM {{ref('sfdc_account_source') }}

), marketo AS (

    SELECT *
    FROM {{ref('marketo_lead_source') }}
    
), crm_account AS (

    SELECT *
    FROM {{ref('dim_crm_account') }}

), sales_segment AS (

    SELECT *
    FROM {{ref('prep_sales_segment') }}

), crm_person AS (

    SELECT *
    FROM {{ref('prep_crm_person') }}

), gitlab_users AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_users_source') }}

), customer_db_source AS (

    SELECT *
    FROM {{ref('customers_db_customers_source') }}

), zuora_contact_source AS (

    SELECT *
    FROM {{ref('zuora_contact_source') }}

), zuora_account_source AS (

    SELECT *
    FROM {{ref('zuora_account_source') }}

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM {{ref('driveload_marketing_dnc_list_source')}}
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['emails.email_address']) }}                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      {{ days_buckets('days_since_saas_signup') }}                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      {{ days_buckets('days_since_self_managed_owner_signup') }}                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2023-06-19"
) }}16:T5da8,WITH sfdc_lead AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_lead_source

), sfdc_contact AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_contact_source

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source

), marketo AS (

    SELECT *
    FROM "PREP".marketo.marketo_lead_source
    
), crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), sales_segment AS (

    SELECT *
    FROM "PROD".common_prep.prep_sales_segment

), crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), gitlab_users AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT *
    FROM "PREP".customers.customers_db_customers_source

), zuora_contact_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_account_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM "PREP".driveload.driveload_marketing_dnc_list_source
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      md5(cast(coalesce(cast(emails.email_address as 
    varchar
), '') as 
    varchar
))                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      CASE 
  WHEN days_since_saas_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_signup > 1095
    THEN '[12] 3+ Years'
END                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      CASE 
  WHEN days_since_self_managed_owner_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_self_managed_owner_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_self_managed_owner_signup > 1095
    THEN '[12] 3+ Years'
END                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final17:T113b,WITH customers AS (
  
    SELECT * 
    FROM {{ ref('customers_db_customers_source') }}
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM {{ ref('customers_db_orders_snapshots_base') }}
  
)

, orders_with_valid_charges AS (
  
    SELECT * 
    FROM {{ ref('customers_db_orders_with_valid_charges') }}
  
)

, trials AS (
  
    SELECT * 
    FROM {{ ref('customers_db_trials') }}
  
)

, zuora_rp AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan')}}
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan_charge')}}
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM {{ ref('zuora_subscription_xf')}}
  
)

, orders_with_subscriptions_without_product_plan_rate AS (
  
  SELECT DISTINCT
    order_id,
    subscription_id,
    subscription_name_slugify,
    customer_id,
    gitlab_namespace_id,
    product_rate_plan_id,
    FIRST_VALUE(order_created_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_from ASC) AS order_created_at,
    FIRST_VALUE(order_updated_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_to ASC)   AS order_updated_at
  FROM orders_snapshots
  WHERE orders_snapshots.product_rate_plan_id IS NULL 
    AND orders_snapshots.order_is_trial = FALSE
    AND orders_snapshots.subscription_id IS NOT NULL

)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      opr.customer_id,
      opr.gitlab_namespace_id,
      opr.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
       
      -- Orders metadata
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(opr.gitlab_namespace_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.gitlab_namespace_id IS NOT NULL DESC,
                        opr.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS trial_start_date
    
    FROM orders_with_subscriptions_without_product_plan_rate AS opr 
    INNER JOIN customers ON opr.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON opr.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND opr.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON opr.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    {{ dbt_utils.group_by(n=9) }}
    
)

, filtered_out_charges_with_valid_data AS (
  
  SELECT joined_with_customer_and_namespace_list.* 
  FROM joined_with_customer_and_namespace_list
  LEFT JOIN orders_with_valid_charges
    ON joined_with_customer_and_namespace_list.rate_plan_charge_id = orders_with_valid_charges.rate_plan_charge_id
  WHERE orders_with_valid_charges.rate_plan_charge_id IS NULL
)

SELECT * 
FROM filtered_out_charges_with_valid_data18:Ta27,This is an intermediate ephemeral model used in the `customers_db_charges_xf`. Each row is a different zuora rate_plan_charge with a unique `rate_plan_charge_id` key.

As described in the `customers_db_orders` documentation, this base table has some weird overriding logics. When a subscription expires, the orders associated to this subscription lose some key important metadata: `product_rate_plan_id`.

Example:

| ORDER_ID | CUSTOMER_ID | SUBSCRIPTION_NAME_SLUGIFY | ORDER_IS_TRIAL | GITLAB_NAMESPACE_ID | ORDER_START_DATE        | ORDER_END_DATE          | PRODUCT_RATE_PLAN_ID             |
|----------|-------------|---------------------------|----------------|---------------------|-------------------------|-------------------------|----------------------------------|
| 5336     | 9010        | a-s00007947               | FALSE          | 2542496             | 2018-03-02 00:00:00.000 | 2019-03-02 00:00:00.000 |   

That means that all these expired subscriptions can't be captured and joined in a clean way to zuora models (we both join on `subscription_name_slugify` and `product_rate_plan_id`). 

This model isolates these subscriptions and will join them to zuora tables only through the `subscription_name_slugify` key.

Weird behavior of the `customers_db_orders` tables are that a subscription (unique `subscription_name_slugify`) can be linked to several customer accounts (`customer_id`) and therefore we can find several `customer_id` for the same `subscription_name_slugify`. We then capture the following metadata: 

* `current_customer_id` which is the `customer_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_customer_id` which is the `customer_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `customer_id_list`: all customers that are linked to a specific subscription.  


During the life of an order, the customer can change the namespace attached to the subscription. Using snapshots helps us record these changes. We capture the following 2 fields: 

* `current_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `gitlab_namespace_id_list`: all gitlab_namespace that are linked to a specific subscription.

We finally join with the `customers_db_orders_with_valid_charges` in order to exclude the `rate_plan_charge_id` that are already in this model.19:T1160,WITH customers AS (
  
    SELECT * 
    FROM "PREP".customers.customers_db_customers_source
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, orders_with_valid_charges AS (
  
    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_orders_with_valid_charges
  
)

, trials AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_trials
  
)

, zuora_rp AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_rate_plan
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_rate_plan_charge
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_subscription_xf
  
)

, orders_with_subscriptions_without_product_plan_rate AS (
  
  SELECT DISTINCT
    order_id,
    subscription_id,
    subscription_name_slugify,
    customer_id,
    gitlab_namespace_id,
    product_rate_plan_id,
    FIRST_VALUE(order_created_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_from ASC) AS order_created_at,
    FIRST_VALUE(order_updated_at) 
      OVER (PARTITION BY order_id
            ORDER BY valid_to ASC)   AS order_updated_at
  FROM orders_snapshots
  WHERE orders_snapshots.product_rate_plan_id IS NULL 
    AND orders_snapshots.order_is_trial = FALSE
    AND orders_snapshots.subscription_id IS NOT NULL

)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      opr.customer_id,
      opr.gitlab_namespace_id,
      opr.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
       
      -- Orders metadata
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(opr.gitlab_namespace_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.gitlab_namespace_id IS NOT NULL DESC,
                        opr.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(opr.customer_id) 
        OVER (PARTITION BY opr.subscription_name_slugify 
              ORDER BY opr.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY opr.subscription_name_slugify
              ORDER BY trial_start_date ASC)        AS trial_start_date
    
    FROM orders_with_subscriptions_without_product_plan_rate AS opr 
    INNER JOIN customers ON opr.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON opr.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND opr.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON opr.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    group by 1,2,3,4,5,6,7,8,9
    
)

, filtered_out_charges_with_valid_data AS (
  
  SELECT joined_with_customer_and_namespace_list.* 
  FROM joined_with_customer_and_namespace_list
  LEFT JOIN orders_with_valid_charges
    ON joined_with_customer_and_namespace_list.rate_plan_charge_id = orders_with_valid_charges.rate_plan_charge_id
  WHERE orders_with_valid_charges.rate_plan_charge_id IS NULL
)

SELECT * 
FROM filtered_out_charges_with_valid_data1a:T65c,WITH source AS (

    SELECT 
    ---Other attributes
    {{ hash_sensitive_columns('customers_db_customers_source') }}
    FROM {{ ref('customers_db_customers_source') }}

)

, final AS (
    
    SELECT 
      --Surrogate Key
      {{ dbt_utils.surrogate_key(['customer_id'])}}  AS dim_user_sk,
      
      --Natural Key
      customer_id                                    AS dim_user_id, 

      --Other attributes                                  
      customer_first_name_hash                       AS user_first_name,
      customer_last_name_hash                        AS user_last_name,
      customer_email_hash                            AS user_email,
      customer_created_at                            AS user_created_at,
      customer_updated_at                            AS user_updated_at,
      sign_in_count,
      current_sign_in_at,
      last_sign_in_at,
      customer_provider                              AS user_provider,
      customer_provider_user_id                      AS user_provider_user_id,

      ---Join key to Zuora data, this field would be deprecated soon from CDot
      zuora_account_id,

      country,
      state,                                             
      city,
      vat_code,
      company,
      company_size,

      --Join key to CRM data
      sfdc_account_id,

      customer_is_billable                           AS user_is_billable,
      confirmed_at,
      confirmation_sent_at

    FROM source

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@snalamaru",
    created_date="2023-05-25",
    updated_date="2023-05-25"
) }}1b:Tda6,WITH source AS (

    SELECT 
    ---Other attributes
    

    

    sha2(
        TRIM(
            LOWER(
                customer_first_name || 
                ENCRYPT_RAW(
                  to_binary('SALT_NAME8', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS customer_first_name_hash,



        
    
    

    sha2(
        TRIM(
            LOWER(
                customer_last_name || 
                ENCRYPT_RAW(
                  to_binary('SALT_NAME8', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS customer_last_name_hash,



        
    
    

    sha2(
        TRIM(
            LOWER(
                customer_email || 
                ENCRYPT_RAW(
                  to_binary('SALT_EMAIL6', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS customer_email_hash,



        
    
    

    "CUSTOMER_ID",
  "CUSTOMER_CREATED_AT",
  "CUSTOMER_UPDATED_AT",
  "SIGN_IN_COUNT",
  "CURRENT_SIGN_IN_AT",
  "LAST_SIGN_IN_AT",
  "CUSTOMER_PROVIDER",
  "CUSTOMER_PROVIDER_USER_ID",
  "ZUORA_ACCOUNT_ID",
  "COUNTRY",
  "STATE",
  "CITY",
  "VAT_CODE",
  "COMPANY",
  "COMPANY_SIZE",
  "SFDC_ACCOUNT_ID",
  "CUSTOMER_IS_BILLABLE",
  "CONFIRMED_AT",
  "CONFIRMATION_SENT_AT"


    FROM "PREP".customers.customers_db_customers_source

)

, final AS (
    
    SELECT 
      --Surrogate Key
      md5(cast(coalesce(cast(customer_id as 
    varchar
), '') as 
    varchar
))  AS dim_user_sk,
      
      --Natural Key
      customer_id                                    AS dim_user_id, 

      --Other attributes                                  
      customer_first_name_hash                       AS user_first_name,
      customer_last_name_hash                        AS user_last_name,
      customer_email_hash                            AS user_email,
      customer_created_at                            AS user_created_at,
      customer_updated_at                            AS user_updated_at,
      sign_in_count,
      current_sign_in_at,
      last_sign_in_at,
      customer_provider                              AS user_provider,
      customer_provider_user_id                      AS user_provider_user_id,

      ---Join key to Zuora data, this field would be deprecated soon from CDot
      zuora_account_id,

      country,
      state,                                             
      city,
      vat_code,
      company,
      company_size,

      --Join key to CRM data
      sfdc_account_id,

      customer_is_billable                           AS user_is_billable,
      confirmed_at,
      confirmation_sent_at

    FROM source

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@snalamaru'::VARCHAR       AS updated_by,
      '2023-05-25'::DATE        AS model_created_date,
      '2023-05-25'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1c:T1126,WITH customers AS (
  
    SELECT * 
    FROM {{ ref('customers_db_customers_source') }}
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM {{ ref('customers_db_orders_snapshots_base') }}
  
)

, trials AS (
  
    SELECT * 
    FROM {{ ref('customers_db_trials') }}
  
)

, zuora_rp AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan')}}
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM {{ ref('zuora_rate_plan_charge')}}
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM {{ ref('zuora_subscription_xf')}}
  
)

, orders_with_subscription AS (
  
    SELECT DISTINCT
      order_id,
      subscription_id,
      subscription_name_slugify,
      customer_id,
      gitlab_namespace_id,
      product_rate_plan_id,
      FIRST_VALUE(order_created_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_created_at,
      LAST_VALUE(order_updated_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_updated_at
    FROM orders_snapshots
    WHERE orders_snapshots.product_rate_plan_id IS NOT NULL 
      AND orders_snapshots.order_is_trial = FALSE
      AND orders_snapshots.subscription_id IS NOT NULL
)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      orders_with_subscription.customer_id,
      orders_with_subscription.gitlab_namespace_id,
      orders_with_subscription.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
      
      -- Orders metadata
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(orders_with_subscription.gitlab_namespace_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.gitlab_namespace_id IS NOT NULL DESC,
                        orders_with_subscription.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS trial_start_date
    
    FROM orders_with_subscription 
    INNER JOIN customers ON orders_with_subscription.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON orders_with_subscription.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND orders_with_subscription.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON orders_with_subscription.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    {{ dbt_utils.group_by(n=9) }}
    
)

SELECT * 
FROM joined_with_customer_and_namespace_list1d:T75d,This is an intermediate ephemeral model used in the `customers_db_charges_xf`. Each row is a different zuora rate_plan_charge with a unique `rate_plan_charge_id` key.

We isolate from the `customers_db_orders_snapshots` table the orders with the following criteria:

* `subscription_name_slugify` is not NULL
* `product_rate_plan_id` is not NULL
* `order_is_trial` is FALSE 

This will help us identify paid orders that were active when we started recording snapshots (Sept. 2019). From this, we will join them to zuora tables with the following keys:

* `subscription_name_slugify` joins to `zuora_subscription_xf`
* `product_rate_plan_id` joins to `zuora_rate_plan`

Weird behavior of the `customers_db_orders` tables are that a subscription (unique `subscription_name_slugify`) can be linked to several customer accounts (`customer_id`) and therefore we can find several `customer_id` for the same `subscription_name_slugify`. We then capture the following metadata: 

* `current_customer_id` which is the `customer_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_customer_id` which is the `customer_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `customer_id_list`: all customers that are linked to a specific subscription.  


During the life of an order, the customer can change the namespace attached to the subscription. Using snapshots helps us record these changes. We capture the following 2 fields: 

* `current_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the latest updated order in the `customers_db_orders` table 
* `first_gitlab_namespace_id` which is the `gitlab_namespace_id` linked to the oldest (oldest `order_created_at`) order in the `customers_db_orders` table
* `gitlab_namespace_id_list`: all gitlab_namespace that are linked to a specific subscription.1e:T113a,WITH customers AS (
  
    SELECT * 
    FROM "PREP".customers.customers_db_customers_source
  
)

, orders_snapshots AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, trials AS (
  
    SELECT * 
    FROM "PROD".legacy.customers_db_trials
  
)

, zuora_rp AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_rate_plan
  
)

, zuora_rpc AS (
  
    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_rate_plan_charge
  
)

, zuora_subscription_xf AS (
  
    SELECT *
    FROM "PROD".legacy.zuora_subscription_xf
  
)

, orders_with_subscription AS (
  
    SELECT DISTINCT
      order_id,
      subscription_id,
      subscription_name_slugify,
      customer_id,
      gitlab_namespace_id,
      product_rate_plan_id,
      FIRST_VALUE(order_created_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_created_at,
      LAST_VALUE(order_updated_at) 
        OVER (PARTITION BY order_id, gitlab_namespace_id
              ORDER BY valid_from ASC) AS order_updated_at
    FROM orders_snapshots
    WHERE orders_snapshots.product_rate_plan_id IS NOT NULL 
      AND orders_snapshots.order_is_trial = FALSE
      AND orders_snapshots.subscription_id IS NOT NULL
)

, joined AS (
  
    SELECT DISTINCT
      zuora_rpc.rate_plan_charge_id,
      
      -- Foreign Keys
      orders_with_subscription.customer_id,
      orders_with_subscription.gitlab_namespace_id,
      orders_with_subscription.subscription_name_slugify,
      zuora_rp.rate_plan_id,
      
      -- Financial Info
      IFF(zuora_rpc.created_by_id IN ('2c92a0fd55822b4d015593ac264767f2','2c92a0107bde3653017bf00cd8a86d5a'),
           TRUE, FALSE)                                                 AS is_purchased_through_subscription_portal,
      
      -- Orders metadata
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_updated_at DESC)   AS current_customer_id,
      FIRST_VALUE(orders_with_subscription.gitlab_namespace_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.gitlab_namespace_id IS NOT NULL DESC,
                        orders_with_subscription.order_updated_at DESC)  AS current_gitlab_namespace_id,
      FIRST_VALUE(orders_with_subscription.customer_id) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify 
              ORDER BY orders_with_subscription.order_created_at ASC)    AS first_customer_id,
      
      -- Trial Info                  
      MAX(IFF(trials.order_id IS NOT NULL, TRUE, FALSE)) 
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS is_started_with_trial,
      FIRST_VALUE(trials.trial_start_date)
        OVER (PARTITION BY orders_with_subscription.subscription_name_slugify
              ORDER BY trial_start_date ASC)                             AS trial_start_date
    
    FROM orders_with_subscription 
    INNER JOIN customers ON orders_with_subscription.customer_id = customers.customer_id
    INNER JOIN zuora_subscription_xf
      ON orders_with_subscription.subscription_name_slugify = zuora_subscription_xf.subscription_name_slugify
    LEFT JOIN zuora_rp 
      ON zuora_rp.subscription_id = zuora_subscription_xf.subscription_id
      AND orders_with_subscription.product_rate_plan_id = zuora_rp.product_rate_plan_id
    INNER JOIN zuora_rpc 
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN trials ON orders_with_subscription.order_id = trials.order_id

)

, joined_with_customer_and_namespace_list AS (
  
    SELECT DISTINCT
      rate_plan_charge_id,
      subscription_name_slugify,
      rate_plan_id,
      is_purchased_through_subscription_portal,
      current_customer_id,
      current_gitlab_namespace_id,
      first_customer_id,
      is_started_with_trial,
      trial_start_date,
      ARRAY_AGG(customer_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS customer_id_list,
      ARRAY_AGG(gitlab_namespace_id) 
        WITHIN GROUP (ORDER  BY customer_id ASC) AS gitlab_namespace_id_list
    FROM joined
    group by 1,2,3,4,5,6,7,8,9
    
)

SELECT * 
FROM joined_with_customer_and_namespace_list1f:Te41,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (
  
  SELECT * 
  FROM {{ ref('customers_db_customers_source')}}
  
)

, namespaces AS (
  
  SELECT * 
  FROM {{ ref('gitlab_dotcom_namespaces')}}
  
)
 
, orders_snapshots AS (
  
  SELECT * 
  FROM {{ ref('customers_db_orders_snapshots_base')}}
  
)

, users AS (
 
 SELECT * 
 FROM {{ ref('gitlab_dotcom_users')}}
 
)

, zuora_rate_plan AS (
 
 SELECT * 
 FROM {{ ref('zuora_rate_plan')}}
 
)

, zuora_base_mrr AS (
 
 SELECT * 
 FROM {{ ref('zuora_base_mrr')}}
 
)

, zuora_subscription_with_positive_mrr_tcv AS (
  
  SELECT DISTINCT
    subscription_name_slugify,
    subscription_start_date
  FROM zuora_base_mrr 
  
)

, ci_minutes_charges AS (
  
  SELECT *
  FROM zuora_rate_plan
  WHERE rate_plan_name = '1,000 CI Minutes'
  
)

,  orders_shapshots_excluding_ci_minutes AS (

  SELECT orders_snapshots.*,
     FIRST_VALUE(subscription_name_slugify) IGNORE NULLS
      OVER (PARTITION BY order_id ORDER BY order_updated_at ASC) AS first_subscription_name_slugify
  FROM orders_snapshots
  LEFT JOIN ci_minutes_charges
    ON orders_snapshots.subscription_id = ci_minutes_charges.subscription_id
    AND orders_snapshots.product_rate_plan_id = ci_minutes_charges.product_rate_plan_id
  WHERE ci_minutes_charges.subscription_id IS NULL

)
  , trials AS (

  SELECT
    *,
    FIRST_VALUE(customer_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_customer_id,
    FIRST_VALUE(gitlab_namespace_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_namespace_id
  FROM orders_snapshots
  WHERE order_is_trial = TRUE

), converted_trials AS (

  SELECT DISTINCT
    trials.order_id,
    orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify AS subscription_name_slugify
  FROM trials
  INNER JOIN orders_shapshots_excluding_ci_minutes
    ON trials.order_id = orders_shapshots_excluding_ci_minutes.order_id
  INNER JOIN zuora_subscription_with_positive_mrr_tcv AS subscription
    ON orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify = subscription.subscription_name_slugify
      AND trials.order_start_date <= subscription.subscription_start_date
  WHERE orders_shapshots_excluding_ci_minutes.subscription_name_slugify IS NOT NULL

)
, joined AS (
  
  SELECT
    trials.order_id, 
    trials.latest_namespace_id                              AS gitlab_namespace_id,
    customers.customer_id,
    
      
    users.user_id                                           AS gitlab_user_id,
    IFF(users.user_id IS NOT NULL, TRUE, FALSE)             AS is_gitlab_user,
    users.created_at                                        AS user_created_at,
    
    
    namespaces.created_at                                   AS namespace_created_at,
    namespaces.namespace_type,
    
    IFF(converted_trials.order_id IS NOT NULL, TRUE, FALSE) AS is_converted,
    converted_trials.subscription_name_slugify,
    
    MIN(order_created_at)                                   AS order_created_at,
    MIN(trials.order_start_date)::DATE                      AS trial_start_date, 
    MAX(trials.order_end_date)::DATE                        AS trial_end_date
    
    
  FROM trials
    INNER JOIN customers ON trials.latest_customer_id = customers.customer_id
    LEFT JOIN namespaces ON trials.latest_namespace_id = namespaces.namespace_id
    LEFT JOIN users ON customers.customer_provider_user_id = users.user_id
    LEFT JOIN converted_trials ON trials.order_id = converted_trials.order_id
  WHERE trials.order_start_date >= '2019-09-01'
  {{dbt_utils.group_by(10)}}
  
)

SELECT * 
FROM joined20:Tac1,This model collects all trials started from the subscription portal. For this we use the `customers_db_orders_snapshots_base` model in order to isolate them. This model does the following thing:

* It isolates the orders that are flagged with the column `is_trial=TRUE`
* It deduplicates by taking the first row created
* It joins with customers, users and namespaces. 

Finally, this model identifies if a trial has been converted or not. To achieve that, we join the selected trials to the order_snapshots selecting only orders converted to subscription after the trial starting date  (look at example below). We exclude ci_minutes orders from the order_snapshots.   

There is one trick here to identify which subscriptions are actually valid and not refunded. In order to do so, we join on `zuora_rate_plan` and `zuora_rate_plan_charge` in order to filter out subscriptions that have (mrr <= 0 and tcv <=0). One of the case we filter out are those subscriptions that are cancelled instantly or fully refunded after a certain period.

The `customers_db_orders_snapshots_base` model has reliable data from the 1st of September, therefore we select only orders that have a `start_date` after this date.

Examples:

| ORDER_ID | ORDER_UPDATED_AT        | ORDER_START_DATE  | ORDER_END_DATE | ORDER_IS_TRIAL | SUBSCRIPTION_NAME_SLUGIFY |
|----------|-------------------------|-------------------|----------------|----------------|---------------------------|
| 32177    | 2019-09-06 23:09:21.858 | 2019-08-17        | 2019-09-15     | TRUE           |                           |
| 32177    | 2019-09-13 22:39:18.916 | 2019-08-17        | 2019-09-27     | TRUE           |                           |
| 32177    | 2019-09-26 21:26:23.227 | 2019-08-17        | 2019-10-02     | TRUE           |                           |
| 32177    | 2019-10-02 16:32:45.664 | 2019-10-02        | 2019-10-04     | TRUE           |                           |
| 32177    | 2019-10-02 00:00:00.075 | 2019-10-02        |                | FALSE          |                           |
| 32177    | 2019-10-03 20:11:31.497 | 2019-10-02        | 2020-10-02     | FALSE          | order-1-name-gold         |

NB: subscription_name_slugify has been anonymised

This order examplifies perfectly what is happening in the table `customers_db_orders`. When the order starts, 17th Aug, 2019, it is a trial. That means that the flag `order_is_trial` is set to TRUE. But it doesn't have either a subscription_id or a subscription_name (`subscription_name_slugify` is null). When it converts, 2nd Nov, 2019, the `order_is_trial` flag is set to `FALSE`, the order_start_date (and order_end_date) is changed and a `subscription_name` and `subscription_id` are set! (last row of the table)21:Te39,

WITH customers AS (
  
  SELECT * 
  FROM "PREP".customers.customers_db_customers_source
  
)

, namespaces AS (
  
  SELECT * 
  FROM "PREP".sensitive.gitlab_dotcom_namespaces
  
)
 
, orders_snapshots AS (
  
  SELECT * 
  FROM "PROD".legacy.customers_db_orders_snapshots
  
)

, users AS (
 
 SELECT * 
 FROM "PREP".sensitive.gitlab_dotcom_users
 
)

, zuora_rate_plan AS (
 
 SELECT * 
 FROM "PROD".legacy.zuora_rate_plan
 
)

, zuora_base_mrr AS (
 
 SELECT * 
 FROM "PROD".restricted_safe_legacy.zuora_base_mrr
 
)

, zuora_subscription_with_positive_mrr_tcv AS (
  
  SELECT DISTINCT
    subscription_name_slugify,
    subscription_start_date
  FROM zuora_base_mrr 
  
)

, ci_minutes_charges AS (
  
  SELECT *
  FROM zuora_rate_plan
  WHERE rate_plan_name = '1,000 CI Minutes'
  
)

,  orders_shapshots_excluding_ci_minutes AS (

  SELECT orders_snapshots.*,
     FIRST_VALUE(subscription_name_slugify) IGNORE NULLS
      OVER (PARTITION BY order_id ORDER BY order_updated_at ASC) AS first_subscription_name_slugify
  FROM orders_snapshots
  LEFT JOIN ci_minutes_charges
    ON orders_snapshots.subscription_id = ci_minutes_charges.subscription_id
    AND orders_snapshots.product_rate_plan_id = ci_minutes_charges.product_rate_plan_id
  WHERE ci_minutes_charges.subscription_id IS NULL

)
  , trials AS (

  SELECT
    *,
    FIRST_VALUE(customer_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_customer_id,
    FIRST_VALUE(gitlab_namespace_id)
      OVER (PARTITION BY order_id ORDER BY order_updated_at DESC) AS latest_namespace_id
  FROM orders_snapshots
  WHERE order_is_trial = TRUE

), converted_trials AS (

  SELECT DISTINCT
    trials.order_id,
    orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify AS subscription_name_slugify
  FROM trials
  INNER JOIN orders_shapshots_excluding_ci_minutes
    ON trials.order_id = orders_shapshots_excluding_ci_minutes.order_id
  INNER JOIN zuora_subscription_with_positive_mrr_tcv AS subscription
    ON orders_shapshots_excluding_ci_minutes.first_subscription_name_slugify = subscription.subscription_name_slugify
      AND trials.order_start_date <= subscription.subscription_start_date
  WHERE orders_shapshots_excluding_ci_minutes.subscription_name_slugify IS NOT NULL

)
, joined AS (
  
  SELECT
    trials.order_id, 
    trials.latest_namespace_id                              AS gitlab_namespace_id,
    customers.customer_id,
    
      
    users.user_id                                           AS gitlab_user_id,
    IFF(users.user_id IS NOT NULL, TRUE, FALSE)             AS is_gitlab_user,
    users.created_at                                        AS user_created_at,
    
    
    namespaces.created_at                                   AS namespace_created_at,
    namespaces.namespace_type,
    
    IFF(converted_trials.order_id IS NOT NULL, TRUE, FALSE) AS is_converted,
    converted_trials.subscription_name_slugify,
    
    MIN(order_created_at)                                   AS order_created_at,
    MIN(trials.order_start_date)::DATE                      AS trial_start_date, 
    MAX(trials.order_end_date)::DATE                        AS trial_end_date
    
    
  FROM trials
    INNER JOIN customers ON trials.latest_customer_id = customers.customer_id
    LEFT JOIN namespaces ON trials.latest_namespace_id = namespaces.namespace_id
    LEFT JOIN users ON customers.customer_provider_user_id = users.user_id
    LEFT JOIN converted_trials ON trials.order_id = converted_trials.order_id
  WHERE trials.order_start_date >= '2019-09-01'
  group by 1,2,3,4,5,6,7,8,9,10
  
)

SELECT * 
FROM joined22:T6e1,WITH source AS (

    SELECT 

    

    sha2(
        TRIM(
            LOWER(
                customer_first_name || 
                ENCRYPT_RAW(
                  to_binary('SALT_NAME8', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS customer_first_name_hash,



        
    
    

    sha2(
        TRIM(
            LOWER(
                customer_last_name || 
                ENCRYPT_RAW(
                  to_binary('SALT_NAME8', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS customer_last_name_hash,



        
    
    

    sha2(
        TRIM(
            LOWER(
                customer_email || 
                ENCRYPT_RAW(
                  to_binary('SALT_EMAIL6', 'utf-8'), 
                  to_binary('FEDCBAA123456785365637265EEEEEEA', 'HEX'), 
                  to_binary('416C736F4E637265FFFFFFAB', 'HEX')
                )['ciphertext']::VARCHAR 
            )
        )
    ) AS customer_email_hash,



        
    
    

    "CUSTOMER_ID",
  "CUSTOMER_CREATED_AT",
  "CUSTOMER_UPDATED_AT",
  "SIGN_IN_COUNT",
  "CURRENT_SIGN_IN_AT",
  "LAST_SIGN_IN_AT",
  "CUSTOMER_PROVIDER",
  "CUSTOMER_PROVIDER_USER_ID",
  "ZUORA_ACCOUNT_ID",
  "COUNTRY",
  "STATE",
  "CITY",
  "VAT_CODE",
  "COMPANY",
  "COMPANY_SIZE",
  "SFDC_ACCOUNT_ID",
  "CUSTOMER_IS_BILLABLE",
  "CONFIRMED_AT",
  "CONFIRMATION_SENT_AT"


    FROM "PREP".customers.customers_db_customers_source

)

SELECT *
FROM source23:T5e3,{{ config(
    materialized='table',
    tags=["mnpi_exception"]
) }}

WITH 
customer_orders AS (
  SELECT *
  FROM {{ ref('customers_db_orders_source') }}
),
namespace_lineage AS (
  SELECT *
  FROM {{ ref('gitlab_dotcom_namespace_lineage_scd') }}
),

customers AS (
  SELECT *
  FROM {{ ref('customers_db_customers_source') }}
),

crm_account AS (
  SELECT *
  FROM {{ ref('dim_crm_account') }}
),

customer_account_company AS (
  SELECT DISTINCT
    --customer_orders.customer_id,
    --customer_orders.gitlab_namespace_id,
    namespace_lineage.ultimate_parent_id,
    customers.sfdc_account_id,
    crm_account.crm_account_zoom_info_dozisf_zi_id AS company_id,
    IFF(customers.sfdc_account_id IS NOT NULL,1,0) +
      IFF(crm_account.crm_account_zoom_info_dozisf_zi_id IS NOT NULL,1,0) AS completeness_score
  FROM customer_orders
  LEFT JOIN namespace_lineage
    ON customer_orders.gitlab_namespace_id = namespace_lineage.namespace_id
    AND customer_orders.order_updated_at::DATE
      BETWEEN namespace_lineage.lineage_valid_from::DATE AND namespace_lineage.lineage_valid_to::DATE
  LEFT JOIN customers
    ON customer_orders.customer_id = customers.customer_id
  LEFT JOIN crm_account
    ON customers.sfdc_account_id = crm_account.dim_crm_account_id
  WHERE customer_orders.gitlab_namespace_id IS NOT NULL
  AND completeness_score !=0
  QUALIFY ROW_NUMBER() OVER (PARTITION BY namespace_lineage.ultimate_parent_id ORDER BY completeness_score DESC) = 1
)

SELECT *
FROM customer_account_company24:T5bd,

WITH 
customer_orders AS (
  SELECT *
  FROM "PREP".customers.customers_db_orders_source
),
namespace_lineage AS (
  SELECT *
  FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_scd
),

customers AS (
  SELECT *
  FROM "PREP".customers.customers_db_customers_source
),

crm_account AS (
  SELECT *
  FROM "PROD".restricted_safe_common.dim_crm_account
),

customer_account_company AS (
  SELECT DISTINCT
    --customer_orders.customer_id,
    --customer_orders.gitlab_namespace_id,
    namespace_lineage.ultimate_parent_id,
    customers.sfdc_account_id,
    crm_account.crm_account_zoom_info_dozisf_zi_id AS company_id,
    IFF(customers.sfdc_account_id IS NOT NULL,1,0) +
      IFF(crm_account.crm_account_zoom_info_dozisf_zi_id IS NOT NULL,1,0) AS completeness_score
  FROM customer_orders
  LEFT JOIN namespace_lineage
    ON customer_orders.gitlab_namespace_id = namespace_lineage.namespace_id
    AND customer_orders.order_updated_at::DATE
      BETWEEN namespace_lineage.lineage_valid_from::DATE AND namespace_lineage.lineage_valid_to::DATE
  LEFT JOIN customers
    ON customer_orders.customer_id = customers.customer_id
  LEFT JOIN crm_account
    ON customers.sfdc_account_id = crm_account.dim_crm_account_id
  WHERE customer_orders.gitlab_namespace_id IS NOT NULL
  AND completeness_score !=0
  QUALIFY ROW_NUMBER() OVER (PARTITION BY namespace_lineage.ultimate_parent_id ORDER BY completeness_score DESC) = 1
)

SELECT *
FROM customer_account_company26:T62c,WITH source AS (

    SELECT *
    FROM {{ source('customers', 'customers_db_customers') }}
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamed27:T622,WITH source AS (

    SELECT *
    FROM "RAW".tap_postgres.customers_db_customers
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY UPDATED_AT DESC) = 1

), renamed AS (

    SELECT DISTINCT
      id::NUMBER                      AS customer_id,
      first_name::VARCHAR              AS customer_first_name,
      last_name::VARCHAR               AS customer_last_name,
      email::VARCHAR                   AS customer_email,
      created_at::TIMESTAMP            AS customer_created_at,
      updated_at::TIMESTAMP            AS customer_updated_at,
      sign_in_count::NUMBER           AS sign_in_count,
      current_sign_in_at::TIMESTAMP    AS current_sign_in_at,
      last_sign_in_at::TIMESTAMP       AS last_sign_in_at,
      --current_sign_in_ip,
      --last_sign_in_ip,
      provider::VARCHAR                AS customer_provider,
      NULLIF(uid, '')::VARCHAR         AS customer_provider_user_id,
      zuora_account_id::VARCHAR        AS zuora_account_id,
      country::VARCHAR                 AS country,
      state::VARCHAR                   AS state,
      city::VARCHAR                    AS city,
      vat_code::VARCHAR                AS vat_code,
      company::VARCHAR                 AS company,
      company_size::VARCHAR            AS company_size,
      salesforce_account_id::VARCHAR   AS sfdc_account_id,
      billable::BOOLEAN                AS customer_is_billable,
      confirmed_at::TIMESTAMP          AS confirmed_at,
      confirmation_sent_at::TIMESTAMP  AS confirmation_sent_at
    FROM source

)

SELECT *
FROM renamedc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.customers_db_customers_source"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"customers_db_customers_source"}],["$","small",null,{"children":"view"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","sources",{"children":[["$","code",null,{"children":["$","a",null,{"children":"sources"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"view"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PREP.customers.customers_db_customers_source"}]]}]]]}]}],null]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"This model is the data from tap-postgres for the customers table from customers.gitlab.com. The schema of the database is defined in [this ruby code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/master/db/schema.rb)."}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"VIEW","schema":"CUSTOMERS","name":"CUSTOMERS_DB_CUSTOMERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CUSTOMER_ID":{"type":"NUMBER","index":1,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"customer_id"},"CUSTOMER_FIRST_NAME":{"type":"TEXT","index":2,"name":"customer_first_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_first_name"},"CUSTOMER_LAST_NAME":{"type":"TEXT","index":3,"name":"customer_last_name","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_last_name"},"CUSTOMER_EMAIL":{"type":"TEXT","index":4,"name":"customer_email","comment":null,"description":"","meta":{"sensitive":true},"data_type":null,"quote":null,"tags":[],"display_name":"customer_email"},"CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"customer_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_created_at"},"CUSTOMER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"customer_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","customers_db"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_updated_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":7,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"current_sign_in_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"last_sign_in_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_sign_in_at"},"CUSTOMER_PROVIDER":{"type":"TEXT","index":10,"name":"CUSTOMER_PROVIDER","comment":null,"display_name":"customer_provider"},"CUSTOMER_PROVIDER_USER_ID":{"type":"TEXT","index":11,"name":"CUSTOMER_PROVIDER_USER_ID","comment":null,"display_name":"customer_provider_user_id"},"ZUORA_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"zuora_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_account_id"},"COUNTRY":{"type":"TEXT","index":13,"name":"COUNTRY","comment":null,"display_name":"country"},"STATE":{"type":"TEXT","index":14,"name":"STATE","comment":null,"display_name":"state"},"CITY":{"type":"TEXT","index":15,"name":"CITY","comment":null,"display_name":"city"},"VAT_CODE":{"type":"TEXT","index":16,"name":"VAT_CODE","comment":null,"display_name":"vat_code"},"COMPANY":{"type":"TEXT","index":17,"name":"COMPANY","comment":null,"display_name":"company"},"COMPANY_SIZE":{"type":"TEXT","index":18,"name":"COMPANY_SIZE","comment":null,"display_name":"company_size"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":19,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"CUSTOMER_IS_BILLABLE":{"type":"BOOLEAN","index":20,"name":"CUSTOMER_IS_BILLABLE","comment":null,"display_name":"customer_is_billable"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"salesforce_account_id":{"name":"salesforce_account_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"salesforce_account_id"},"billable":{"name":"billable","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billable"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_customers_source","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.customers.customers_db_customers"]},"config":{"enabled":true,"alias":null,"schema":"customers","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"customers","fqn":["gitlab_snowflake","sources","customers","customers_db_customers_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/customers/customers_db_customers_source.sql","original_file_path":"models/sources/customers/customers_db_customers_source.sql","name":"customers_db_customers_source","alias":"customers_db_customers_source","checksum":{"name":"sha256","checksum":"c86673f73b373e1ab6a8dcfaa2a29493006dd689c0fca6757037ba2b22256e24"},"tags":["sources"],"refs":[],"sources":[["customers","customers_db_customers"]],"metrics":[],"description":"This model is the data from tap-postgres for the customers table from customers.gitlab.com. The schema of the database is defined in [this ruby code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/master/db/schema.rb).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/customers/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/customers_db_customers_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"customers","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033748.403538,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".customers.customers_db_customers_source","label":"customers_db_customers_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ROLE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"USER_ID":{"type":"NUMBER","index":3,"name":"user_id","comment":null,"description":"GitLab.com user id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_id"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"customer_db_customer_id","comment":null,"description":"Customer DB customer id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"namespace_id","comment":null,"description":"Gitlab.com namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"ZUORA_BILLING_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"zuora_billing_account_id","comment":null,"description":"Zuora billing account id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_billing_account_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":7,"name":"marketing_contact_role","comment":null,"description":"Role of the marketing contact. A marketing contact can have many roles. Could be 'Personal Namespace Owner', Group Namespace Owner', 'Group Namespace Member', 'Group Namespace Maintainer', 'Customer DB Owner', 'Zuora Billing Contact'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketing_contact_role"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:33UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":814894080,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_role","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_role"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_role.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_role.sql","name":"bdg_marketing_contact_role","alias":"bdg_marketing_contact_role","checksum":{"name":"sha256","checksum":"e555905c1956abb5024b7a48afbad97f4bc0ee59f3e012af876674204fed8088"},"tags":[],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["dim_marketing_contact"],["dim_marketing_contact"],["prep_namespace"],["prep_namespace"]],"sources":[],"metrics":[],"description":"A bridge table that lists all roles for the marketing contacts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_role.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.216212,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_role","label":"bdg_marketing_contact_role"},{"metadata":{"type":"VIEW","schema":"SENSITIVE","name":"CUSTOMERS_DB_CUSTOMERS_PII","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CUSTOMER_ID":{"type":"NUMBER","index":1,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"customer_id"},"CUSTOMER_EMAIL_HASH":{"type":"TEXT","index":2,"name":"CUSTOMER_EMAIL_HASH","comment":null,"display_name":"customer_email_hash"},"CUSTOMER_FIRST_NAME":{"type":"TEXT","index":3,"name":"CUSTOMER_FIRST_NAME","comment":null,"display_name":"customer_first_name"},"CUSTOMER_LAST_NAME":{"type":"TEXT","index":4,"name":"CUSTOMER_LAST_NAME","comment":null,"display_name":"customer_last_name"},"CUSTOMER_EMAIL":{"type":"TEXT","index":5,"name":"CUSTOMER_EMAIL","comment":null,"display_name":"customer_email"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_customers_pii","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('customers_db_customers_source') }}\n\n), customers_db_customers_pii AS (\n\n    SELECT\n      customer_id,\n      {{ nohash_sensitive_columns('customers_db_customers_source', 'customer_email') }}\n    FROM source\n\n)\n\nSELECT *\nFROM customers_db_customers_pii","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.nohash_sensitive_columns","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","sources","customers","sensitive","customers_db_customers_pii"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/customers/sensitive/customers_db_customers_pii.sql","original_file_path":"models/sources/customers/sensitive/customers_db_customers_pii.sql","name":"customers_db_customers_pii","alias":"customers_db_customers_pii","checksum":{"name":"sha256","checksum":"0a73ac47904720f1edff85ef3ca8036b1837d2d44cf4454b7a7b991f1ab1f2be"},"tags":["sources"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"Model for Customers sensitive data","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/customers/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/sensitive/customers_db_customers_pii.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"],"secure":true},"created_at":1689033748.648366,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PREP\".customers.customers_db_customers_source\n\n), customers_db_customers_pii AS (\n\n    SELECT\n      customer_id,\n      \n\n    \n\n    \n\n    \n\n    sha2(\n        TRIM(\n            LOWER(\n                customer_email ||  '73DE64FB05810744BA15EE'\n            )\n        )\n    ) AS customer_email_hash,\n\n\n    \n    \n    \n    customer_first_name   , \n    \n    \n    \n    customer_last_name   , \n    \n    \n    \n    customer_email  \n    \n    \n\n\n    FROM source\n\n)\n\nSELECT *\nFROM customers_db_customers_pii","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.customers_db_customers_pii","label":"customers_db_customers_pii"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"DIM_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":5,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":8,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":9,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":10,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":11,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":12,"name":"MARKETO_LEAD_ID","comment":null,"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":13,"name":"IS_MARKETO_LEAD","comment":null,"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":14,"name":"IS_MARKETO_EMAIL_HARD_BOUNCED","comment":null,"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":15,"name":"MARKETO_EMAIL_HARD_BOUNCED_DATE","comment":null,"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":16,"name":"IS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":17,"name":"IS_MARKETO_OPTED_IN","comment":null,"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":18,"name":"HAS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":19,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":20,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":21,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PTPT_CONTACT_MARKETO":{"type":"BOOLEAN","index":22,"name":"IS_PTPT_CONTACT_MARKETO","comment":null,"display_name":"is_ptpt_contact_marketo"},"IS_PTP_CONTACT_MARKETO":{"type":"BOOLEAN","index":23,"name":"IS_PTP_CONTACT_MARKETO","comment":null,"display_name":"is_ptp_contact_marketo"},"IS_IMPACTED_BY_USER_LIMIT_MARKETO":{"type":"BOOLEAN","index":24,"name":"IS_IMPACTED_BY_USER_LIMIT_MARKETO","comment":null,"display_name":"is_impacted_by_user_limit_marketo"},"IS_CURRENTLY_IN_TRIAL_MARKETO":{"type":"BOOLEAN","index":25,"name":"IS_CURRENTLY_IN_TRIAL_MARKETO","comment":null,"display_name":"is_currently_in_trial_marketo"},"TRIAL_START_DATE_MARKETO":{"type":"DATE","index":26,"name":"TRIAL_START_DATE_MARKETO","comment":null,"display_name":"trial_start_date_marketo"},"TRIAL_END_DATE_MARKETO":{"type":"DATE","index":27,"name":"TRIAL_END_DATE_MARKETO","comment":null,"display_name":"trial_end_date_marketo"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":28,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_RECORD_ID":{"type":"TEXT","index":29,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":30,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":31,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"MOBILE_PHONE":{"type":"TEXT","index":32,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":33,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":34,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":35,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":36,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":37,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":38,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":39,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":40,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":41,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":42,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":43,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":44,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":45,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":46,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":47,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":48,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":49,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":50,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":51,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":52,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":53,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"DNC_LIST_RESULT":{"type":"TEXT","index":54,"name":"DNC_LIST_RESULT","comment":null,"display_name":"dnc_list_result"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":55,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":56,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"CREATED_BY":{"type":"TEXT","index":57,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1261721088,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_marketing_contact","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.days_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","dim_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/dim_marketing_contact.sql","original_file_path":"models/common/sensitive/dim_marketing_contact.sql","name":"dim_marketing_contact","alias":"dim_marketing_contact","checksum":{"name":"sha256","checksum":"2cf8e313c4a64673b3780dac0bcffd6f46d21244d42c4263aba32674d460b42c"},"tags":[],"refs":[["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_account_source"],["sfdc_account_source"],["marketo_lead_source"],["marketo_lead_source"],["dim_crm_account"],["dim_crm_account"],["prep_sales_segment"],["prep_sales_segment"],["prep_crm_person"],["prep_crm_person"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_account_source"],["zuora_account_source"],["driveload_marketing_dnc_list_source"],["driveload_marketing_dnc_list_source"]],"sources":[],"metrics":[],"description":"A dimension table for marketing contacts, combining contacts from GitLab.com, Salesforce, CustomerDB, and Zuora Sources.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/dim_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.211765,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.dim_marketing_contact","label":"dim_marketing_contact"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"CUSTOMERS_DB_ORDERS_WITH_INCOMPLETE_CHARGES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":1,"name":"RATE_PLAN_CHARGE_ID","comment":null,"display_name":"rate_plan_charge_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"RATE_PLAN_ID":{"type":"TEXT","index":3,"name":"RATE_PLAN_ID","comment":null,"display_name":"rate_plan_id"},"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL":{"type":"BOOLEAN","index":4,"name":"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL","comment":null,"display_name":"is_purchased_through_subscription_portal"},"CURRENT_CUSTOMER_ID":{"type":"NUMBER","index":5,"name":"CURRENT_CUSTOMER_ID","comment":null,"display_name":"current_customer_id"},"CURRENT_GITLAB_NAMESPACE_ID":{"type":"TEXT","index":6,"name":"CURRENT_GITLAB_NAMESPACE_ID","comment":null,"display_name":"current_gitlab_namespace_id"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":7,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"IS_STARTED_WITH_TRIAL":{"type":"BOOLEAN","index":8,"name":"IS_STARTED_WITH_TRIAL","comment":null,"display_name":"is_started_with_trial"},"TRIAL_START_DATE":{"type":"DATE","index":9,"name":"TRIAL_START_DATE","comment":null,"display_name":"trial_start_date"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":10,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"GITLAB_NAMESPACE_ID_LIST":{"type":"ARRAY","index":11,"name":"GITLAB_NAMESPACE_ID_LIST","comment":null,"display_name":"gitlab_namespace_id_list"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:12UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":0,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_orders_with_incomplete_charges","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_with_valid_charges","model.gitlab_snowflake.customers_db_orders_with_valid_charges","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_subscription_xf","model.gitlab_snowflake.zuora_subscription_xf"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","customers","restricted_safe","customers_db_orders_with_incomplete_charges"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/restricted_safe/customers_db_orders_with_incomplete_charges.sql","original_file_path":"models/legacy/customers/restricted_safe/customers_db_orders_with_incomplete_charges.sql","name":"customers_db_orders_with_incomplete_charges","alias":"customers_db_orders_with_incomplete_charges","checksum":{"name":"sha256","checksum":"c016a633e890604b500edcf30fab1d837a85d90c5b9a1cff1c8fb79fe72272f4"},"tags":["safe"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_orders_snapshots_base"],["customers_db_orders_snapshots_base"],["customers_db_orders_with_valid_charges"],["customers_db_orders_with_valid_charges"],["customers_db_trials"],["customers_db_trials"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_rate_plan_charge"],["zuora_rate_plan_charge"],["zuora_subscription_xf"],["zuora_subscription_xf"]],"sources":[],"metrics":[],"description":"$18","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/restricted_safe/customers_db_orders_with_incomplete_charges.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.0257335,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.customers_db_orders_with_incomplete_charges","label":"customers_db_orders_with_incomplete_charges"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_USER_TRIAL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_USER_SK":{"type":"TEXT","index":1,"name":"dim_user_sk","comment":null,"description":"A surrogate key that uniquely identifes each row of the User table.  This is built as a conceptual [dimension](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/dimension-table-structure/) and can be used to build a dimension table to limit the number of columns on a fact table.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_user_sk"},"DIM_USER_ID":{"type":"NUMBER","index":2,"name":"dim_user_id","comment":null,"description":"The unique User ID in GitLab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_user_id"},"USER_FIRST_NAME":{"type":"TEXT","index":3,"name":"user_first_name","comment":null,"description":"Masked. The first name of the User as entered by the user during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_first_name"},"USER_LAST_NAME":{"type":"TEXT","index":4,"name":"user_last_name","comment":null,"description":"Masked. The last name of the User as entered by the user during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_last_name"},"USER_EMAIL":{"type":"TEXT","index":5,"name":"user_email","comment":null,"description":"Masked. The email address of the user, usually a business email address","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_email"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"user_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_created_at"},"USER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"user_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_updated_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":8,"name":"sign_in_count","comment":null,"description":"Tracks the number of times a user logged in.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"current_sign_in_at","comment":null,"description":"Last time current user was active.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"last_sign_in_at","comment":null,"description":"Last time the user logged in.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_sign_in_at"},"USER_PROVIDER":{"type":"TEXT","index":11,"name":"user_provider","comment":null,"description":"OAuth provider. Used for GL.com authentication.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_provider"},"USER_PROVIDER_USER_ID":{"type":"TEXT","index":12,"name":"user_provider_user_id","comment":null,"description":"The User ID provided by the User to log in to  GitLab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_provider_user_id"},"ZUORA_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"zuora_account_id","comment":null,"description":"A unique Zuora account number associated with the User","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_account_id"},"COUNTRY":{"type":"TEXT","index":14,"name":"country","comment":null,"description":"User Country selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"STATE":{"type":"TEXT","index":15,"name":"state","comment":null,"description":"A state that is part of the given country selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"state"},"CITY":{"type":"TEXT","index":16,"name":"city","comment":null,"description":"The city the user provided during the registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"city"},"VAT_CODE":{"type":"TEXT","index":17,"name":"vat_code","comment":null,"description":"Tax identification number. Used mostly in Europe.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"vat_code"},"COMPANY":{"type":"TEXT","index":18,"name":"company","comment":null,"description":"The company name as entered by the User","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company"},"COMPANY_SIZE":{"type":"TEXT","index":19,"name":"company_size","comment":null,"description":"The size of the company the user works for","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_size"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":20,"name":"sfdc_account_id","comment":null,"description":"Salesforce/CRM account ID associated with the user account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_account_id"},"USER_IS_BILLABLE":{"type":"BOOLEAN","index":21,"name":"user_is_billable","comment":null,"description":"An indicator field with `True` or `false`, where `false means a purchase through a reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_is_billable"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"confirmed_at","comment":null,"description":"Date when customer confirmed their account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":23,"name":"confirmation_sent_at","comment":null,"description":"Date used to expire the confirmation links","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"confirmation_sent_at"},"CREATED_BY":{"type":"TEXT","index":24,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":25,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":26,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":27,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":28,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":29,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:58UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":147918336,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_user_trial","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.hash_sensitive_columns","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_user_trial"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_user_trial.sql","original_file_path":"models/common_prep/prep_user_trial.sql","name":"prep_user_trial","alias":"prep_user_trial","checksum":{"name":"sha256","checksum":"9f897555cbd053a44cb2d98a49b8a5f40094fb16ca0a289b2a287eb39db837fd"},"tags":[],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"Prep table to store information about our users, trial users are also included. The data is sourced from an underlying tap-postgres customers table from customers.gitlab.com.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_user_trial.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.8968697,"compiled_sql":"$1b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_user_trial","label":"prep_user_trial"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"CUSTOMERS_DB_ORDERS_WITH_VALID_CHARGES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":1,"name":"RATE_PLAN_CHARGE_ID","comment":null,"display_name":"rate_plan_charge_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"RATE_PLAN_ID":{"type":"TEXT","index":3,"name":"RATE_PLAN_ID","comment":null,"display_name":"rate_plan_id"},"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL":{"type":"BOOLEAN","index":4,"name":"IS_PURCHASED_THROUGH_SUBSCRIPTION_PORTAL","comment":null,"display_name":"is_purchased_through_subscription_portal"},"CURRENT_CUSTOMER_ID":{"type":"NUMBER","index":5,"name":"CURRENT_CUSTOMER_ID","comment":null,"display_name":"current_customer_id"},"CURRENT_GITLAB_NAMESPACE_ID":{"type":"TEXT","index":6,"name":"CURRENT_GITLAB_NAMESPACE_ID","comment":null,"display_name":"current_gitlab_namespace_id"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":7,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"IS_STARTED_WITH_TRIAL":{"type":"BOOLEAN","index":8,"name":"IS_STARTED_WITH_TRIAL","comment":null,"display_name":"is_started_with_trial"},"TRIAL_START_DATE":{"type":"DATE","index":9,"name":"TRIAL_START_DATE","comment":null,"display_name":"trial_start_date"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":10,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"GITLAB_NAMESPACE_ID_LIST":{"type":"ARRAY","index":11,"name":"GITLAB_NAMESPACE_ID_LIST","comment":null,"display_name":"gitlab_namespace_id_list"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":16239104,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_orders_with_valid_charges","raw_sql":"$1c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_rate_plan_charge","model.gitlab_snowflake.zuora_subscription_xf","model.gitlab_snowflake.zuora_subscription_xf"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","customers","restricted_safe","customers_db_orders_with_valid_charges"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/restricted_safe/customers_db_orders_with_valid_charges.sql","original_file_path":"models/legacy/customers/restricted_safe/customers_db_orders_with_valid_charges.sql","name":"customers_db_orders_with_valid_charges","alias":"customers_db_orders_with_valid_charges","checksum":{"name":"sha256","checksum":"c6e9ecc281bf3bf54b58d7c3e2778052e23b3cf1f8ccd867ab76cca65cc30886"},"tags":["safe"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_orders_snapshots_base"],["customers_db_orders_snapshots_base"],["customers_db_trials"],["customers_db_trials"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_rate_plan_charge"],["zuora_rate_plan_charge"],["zuora_subscription_xf"],["zuora_subscription_xf"]],"sources":[],"metrics":[],"description":"$1d","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/restricted_safe/customers_db_orders_with_valid_charges.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.0268075,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.customers_db_orders_with_valid_charges","label":"customers_db_orders_with_valid_charges"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CUSTOMERS_DB_TRIALS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ORDER_ID":{"type":"NUMBER","index":1,"name":"order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"order_id"},"GITLAB_NAMESPACE_ID":{"type":"TEXT","index":2,"name":"GITLAB_NAMESPACE_ID","comment":null,"display_name":"gitlab_namespace_id"},"CUSTOMER_ID":{"type":"NUMBER","index":3,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_id"},"GITLAB_USER_ID":{"type":"NUMBER","index":4,"name":"GITLAB_USER_ID","comment":null,"display_name":"gitlab_user_id"},"IS_GITLAB_USER":{"type":"BOOLEAN","index":5,"name":"IS_GITLAB_USER","comment":null,"display_name":"is_gitlab_user"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"IS_CONVERTED":{"type":"BOOLEAN","index":9,"name":"IS_CONVERTED","comment":null,"display_name":"is_converted"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":10,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"ORDER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"ORDER_CREATED_AT","comment":null,"display_name":"order_created_at"},"TRIAL_START_DATE":{"type":"DATE","index":12,"name":"TRIAL_START_DATE","comment":null,"display_name":"trial_start_date"},"TRIAL_END_DATE":{"type":"DATE","index":13,"name":"TRIAL_END_DATE","comment":null,"display_name":"trial_end_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":14724608,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_trials","raw_sql":"$1f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.customers_db_orders_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_rate_plan","model.gitlab_snowflake.zuora_base_mrr","model.gitlab_snowflake.zuora_base_mrr"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","customers","xf","customers_db_trials"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/xf/customers_db_trials.sql","original_file_path":"models/legacy/customers/xf/customers_db_trials.sql","name":"customers_db_trials","alias":"customers_db_trials","checksum":{"name":"sha256","checksum":"c77bef8135b36d587e86a3054aa39d9e3770f6360969969abf6f077c7b1dbea4"},"tags":["mnpi_exception"],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["customers_db_orders_snapshots_base"],["customers_db_orders_snapshots_base"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["zuora_rate_plan"],["zuora_rate_plan"],["zuora_base_mrr"],["zuora_base_mrr"]],"sources":[],"metrics":[],"description":"$20","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/xf/customers_db_trials.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033762.9913282,"compiled_sql":"$21","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.customers_db_trials","label":"customers_db_trials"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"CUSTOMERS_DB_CUSTOMERS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"CUSTOMER_FIRST_NAME_HASH":{"type":"TEXT","index":1,"name":"CUSTOMER_FIRST_NAME_HASH","comment":null,"display_name":"customer_first_name_hash"},"CUSTOMER_LAST_NAME_HASH":{"type":"TEXT","index":2,"name":"CUSTOMER_LAST_NAME_HASH","comment":null,"display_name":"customer_last_name_hash"},"CUSTOMER_EMAIL_HASH":{"type":"TEXT","index":3,"name":"CUSTOMER_EMAIL_HASH","comment":null,"display_name":"customer_email_hash"},"CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"CUSTOMER_ID","comment":null,"display_name":"customer_id"},"CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"CUSTOMER_CREATED_AT","comment":null,"display_name":"customer_created_at"},"CUSTOMER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CUSTOMER_UPDATED_AT","comment":null,"display_name":"customer_updated_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":7,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CUSTOMER_PROVIDER":{"type":"TEXT","index":10,"name":"CUSTOMER_PROVIDER","comment":null,"display_name":"customer_provider"},"CUSTOMER_PROVIDER_USER_ID":{"type":"TEXT","index":11,"name":"CUSTOMER_PROVIDER_USER_ID","comment":null,"display_name":"customer_provider_user_id"},"ZUORA_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"ZUORA_ACCOUNT_ID","comment":null,"display_name":"zuora_account_id"},"COUNTRY":{"type":"TEXT","index":13,"name":"COUNTRY","comment":null,"display_name":"country"},"STATE":{"type":"TEXT","index":14,"name":"STATE","comment":null,"display_name":"state"},"CITY":{"type":"TEXT","index":15,"name":"CITY","comment":null,"display_name":"city"},"VAT_CODE":{"type":"TEXT","index":16,"name":"VAT_CODE","comment":null,"display_name":"vat_code"},"COMPANY":{"type":"TEXT","index":17,"name":"COMPANY","comment":null,"display_name":"company"},"COMPANY_SIZE":{"type":"TEXT","index":18,"name":"COMPANY_SIZE","comment":null,"display_name":"company_size"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":19,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"CUSTOMER_IS_BILLABLE":{"type":"BOOLEAN","index":20,"name":"CUSTOMER_IS_BILLABLE","comment":null,"display_name":"customer_is_billable"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:58UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":130050560,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customers_db_customers","raw_sql":"WITH source AS (\n\n    SELECT {{ hash_sensitive_columns('customers_db_customers_source') }}\n    FROM {{ ref('customers_db_customers_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.hash_sensitive_columns","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","customers","intermediate","customers_db_customers"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/customers/intermediate/customers_db_customers.sql","original_file_path":"models/legacy/customers/intermediate/customers_db_customers.sql","name":"customers_db_customers","alias":"customers_db_customers","checksum":{"name":"sha256","checksum":"4ed4b180f2a4c0b1682ac326392015248787c3445195f1bc027ec81e735651a1"},"tags":[],"refs":[["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_customers_source"],["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"This model is the data from tap-postgres for the customers table from customers.gitlab.com. The schema of the database is defined in [this ruby code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/master/db/schema.rb).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/customers/intermediate/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/customers/intermediate/customers_db_customers.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033762.9837232,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.customers_db_customers","label":"customers_db_customers"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_MARKETING","name":"CUSTOMER_ACCOUNT_COMPANY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":1,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"COMPANY_ID":{"type":"TEXT","index":3,"name":"COMPANY_ID","comment":null,"display_name":"company_id"},"COMPLETENESS_SCORE":{"type":"NUMBER","index":4,"name":"COMPLETENESS_SCORE","comment":null,"display_name":"completeness_score"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1251840,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.customer_account_company","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"workspace_marketing","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_marketing","fqn":["gitlab_snowflake","workspaces","workspace_marketing","namespace_account_matching","customer_account_company"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_marketing/namespace_account_matching/customer_account_company.sql","original_file_path":"models/workspaces/workspace_marketing/namespace_account_matching/customer_account_company.sql","name":"customer_account_company","alias":"customer_account_company","checksum":{"name":"sha256","checksum":"42ff8f57da456366eed35a68a80aa4b5b703ffde94c3e49c323cdbc5bdcacdcc"},"tags":["workspace","mnpi_exception"],"refs":[["customers_db_orders_source"],["customers_db_orders_source"],["gitlab_dotcom_namespace_lineage_scd"],["gitlab_dotcom_namespace_lineage_scd"],["customers_db_customers_source"],["customers_db_customers_source"],["dim_crm_account"],["dim_crm_account"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_marketing/namespace_account_matching/customer_account_company.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_marketing","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033684.2018366,"compiled_sql":"$24","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_marketing.customer_account_company","label":"customer_account_company"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('customers_db_customers_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","customers","not_null_customers_db_customers_source_customer_id"],"unique_id":"test.gitlab_snowflake.not_null_customers_db_customers_source_customer_id.11da9d894b","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_customers_db_customers_source_customer_id.sql","original_file_path":"models/sources/customers/schema.yml","name":"not_null_customers_db_customers_source_customer_id","alias":"not_null_customers_db_customers_source_customer_id","checksum":{"name":"none","checksum":""},"tags":["customers_db","tdf"],"refs":[["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/schema.yml/not_null_customers_db_customers_source_customer_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033748.4720275,"compiled_sql":"\n    \n    \n\n\n\nselect customer_id\nfrom \"PREP\".customers.customers_db_customers_source\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"customer_id","file_key_name":"models.customers_db_customers_source","label":"not_null_customers_db_customers_source_customer_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"customer_id","model":"{{ get_where_subquery(ref('customers_db_customers_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","customers","unique_customers_db_customers_source_customer_id"],"unique_id":"test.gitlab_snowflake.unique_customers_db_customers_source_customer_id.9ba28b2a83","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_customers_db_customers_source_customer_id.sql","original_file_path":"models/sources/customers/schema.yml","name":"unique_customers_db_customers_source_customer_id","alias":"unique_customers_db_customers_source_customer_id","checksum":{"name":"none","checksum":""},"tags":["customers_db","tdf"],"refs":[["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/schema.yml/unique_customers_db_customers_source_customer_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033748.4783523,"compiled_sql":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"PREP\".customers.customers_db_customers_source\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"customer_id","file_key_name":"models.customers_db_customers_source","label":"unique_customers_db_customers_source_customer_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_created_at","model":"{{ get_where_subquery(ref('customers_db_customers_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","customers","not_null_customers_db_customers_source_customer_created_at"],"unique_id":"test.gitlab_snowflake.not_null_customers_db_customers_source_customer_created_at.ccd650331f","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_customers_db_customers_source_customer_created_at.sql","original_file_path":"models/sources/customers/schema.yml","name":"not_null_customers_db_customers_source_customer_created_at","alias":"not_null_customers_db_customers_source_customer_created_at","checksum":{"name":"none","checksum":""},"tags":["customers_db","tdf"],"refs":[["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/schema.yml/not_null_customers_db_customers_source_customer_created_at.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033748.4823265,"compiled_sql":"\n    \n    \n\n\n\nselect customer_created_at\nfrom \"PREP\".customers.customers_db_customers_source\nwhere customer_created_at is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"customer_created_at","file_key_name":"models.customers_db_customers_source","label":"not_null_customers_db_customers_source_customer_created_at"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"customer_updated_at","model":"{{ get_where_subquery(ref('customers_db_customers_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.customers_db_customers_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","customers","not_null_customers_db_customers_source_customer_updated_at"],"unique_id":"test.gitlab_snowflake.not_null_customers_db_customers_source_customer_updated_at.4d828b29b8","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_customers_db_customers_source_customer_updated_at.sql","original_file_path":"models/sources/customers/schema.yml","name":"not_null_customers_db_customers_source_customer_updated_at","alias":"not_null_customers_db_customers_source_customer_updated_at","checksum":{"name":"none","checksum":""},"tags":["customers_db","tdf"],"refs":[["customers_db_customers_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/customers/schema.yml/not_null_customers_db_customers_source_customer_updated_at.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033748.4862034,"compiled_sql":"\n    \n    \n\n\n\nselect customer_updated_at\nfrom \"PREP\".customers.customers_db_customers_source\nwhere customer_updated_at is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"customer_updated_at","file_key_name":"models.customers_db_customers_source","label":"not_null_customers_db_customers_source_customer_updated_at"}]},"node":{"resource_type":"model","name":"customers_db_customers_source","unique_id":"model.gitlab_snowflake.customers_db_customers_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"source":[{"metadata":{"type":"BASE TABLE","schema":"TAP_POSTGRES","name":"CUSTOMERS_DB_CUSTOMERS","database":"RAW","comment":null,"owner":"LOADER"},"columns":{"ID":{"type":"NUMBER","index":1,"name":"id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":4,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"PROVIDER":{"type":"TEXT","index":7,"name":"PROVIDER","comment":null,"display_name":"provider"},"UID":{"type":"TEXT","index":8,"name":"UID","comment":null,"display_name":"uid"},"ZUORA_ACCOUNT_ID":{"type":"TEXT","index":9,"name":"ZUORA_ACCOUNT_ID","comment":null,"display_name":"zuora_account_id"},"COUNTRY":{"type":"TEXT","index":10,"name":"COUNTRY","comment":null,"display_name":"country"},"STATE":{"type":"TEXT","index":11,"name":"STATE","comment":null,"display_name":"state"},"CITY":{"type":"TEXT","index":12,"name":"CITY","comment":null,"display_name":"city"},"VAT_CODE":{"type":"TEXT","index":13,"name":"VAT_CODE","comment":null,"display_name":"vat_code"},"COMPANY":{"type":"TEXT","index":14,"name":"COMPANY","comment":null,"display_name":"company"},"COMPANY_SIZE":{"type":"TEXT","index":15,"name":"COMPANY_SIZE","comment":null,"display_name":"company_size"},"SALESFORCE_ACCOUNT_ID":{"type":"TEXT","index":16,"name":"SALESFORCE_ACCOUNT_ID","comment":null,"display_name":"salesforce_account_id"},"BILLABLE":{"type":"BOOLEAN","index":17,"name":"BILLABLE","comment":null,"display_name":"billable"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"FIRST_NAME":{"type":"TEXT","index":20,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":21,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"EMAIL":{"type":"TEXT","index":22,"name":"EMAIL","comment":null,"display_name":"email"},"PHONE_NUMBER":{"type":"TEXT","index":23,"name":"PHONE_NUMBER","comment":null,"display_name":"phone_number"},"_UPLOADED_AT":{"type":"FLOAT","index":24,"name":"_UPLOADED_AT","comment":null,"display_name":"_uploaded_at"},"_TASK_INSTANCE":{"type":"TEXT","index":25,"name":"_TASK_INSTANCE","comment":null,"display_name":"_task_instance"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:39UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4795500544,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"source.gitlab_snowflake.customers.customers_db_customers","fqn":["gitlab_snowflake","sources","customers","customers","customers_db_customers"],"database":"RAW","schema":"tap_postgres","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"models/sources/customers/sources.yml","original_file_path":"models/sources/customers/sources.yml","name":"customers_db_customers","source_name":"customers","source_description":"","loader":"Airflow","identifier":"customers_db_customers","resource_type":"source","quoting":{"database":true,"schema":false,"identifier":false,"column":null},"loaded_at_field":"DATEADD(sec, _uploaded_at, '1970-01-01')","freshness":{"warn_after":{"count":36,"period":"hour"},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","meta":{},"source_meta":{},"tags":["customers_db","tdf"],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"\"RAW\".tap_postgres.customers_db_customers","created_at":1689033767.1445541,"label":"customers.customers_db_customers"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544}]},"node":{"resource_type":"model","name":"customers_db_customers_source","unique_id":"model.gitlab_snowflake.customers_db_customers_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L25",null,{"versions":{"Source":"$26","Compiled":"$27"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
