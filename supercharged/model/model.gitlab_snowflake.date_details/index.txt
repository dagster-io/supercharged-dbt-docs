1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.date_details","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.date_details\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.date_details","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.date_details\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.date_details","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
10:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
4c:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
11:T49e,WITH date_details AS (
  
    SELECT *
    FROM {{ ref("date_details") }}
    WHERE last_day_of_month = date_actual
     
), project_snapshots AS (

   SELECT
     *,
     IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
   FROM {{ ref('gitlab_dotcom_project_statistics_snapshots_base') }}

), project_snapshots_monthly AS (
  
    SELECT
      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,
      project_snapshots.project_statistics_id,
      project_snapshots.project_id,
      project_snapshots.namespace_id,
      project_snapshots.commit_count,
      project_snapshots.storage_size,
      project_snapshots.repository_size,
      project_snapshots.container_registry_size,
      project_snapshots.lfs_objects_size,
      project_snapshots.build_artifacts_size,
      project_snapshots.shared_runners_seconds,
      project_snapshots.last_update_started_at
    FROM project_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN project_snapshots.valid_from AND project_snapshots.valid_to_
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, project_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM project_snapshots_monthly12:T49a,WITH date_details AS (
  
    SELECT *
    FROM "PROD".legacy.date_details
    WHERE last_day_of_month = date_actual
     
), project_snapshots AS (

   SELECT
     *,
     IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
   FROM "PROD".legacy.gitlab_dotcom_project_statistics_snapshot

), project_snapshots_monthly AS (
  
    SELECT
      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,
      project_snapshots.project_statistics_id,
      project_snapshots.project_id,
      project_snapshots.namespace_id,
      project_snapshots.commit_count,
      project_snapshots.storage_size,
      project_snapshots.repository_size,
      project_snapshots.container_registry_size,
      project_snapshots.lfs_objects_size,
      project_snapshots.build_artifacts_size,
      project_snapshots.shared_runners_seconds,
      project_snapshots.last_update_started_at
    FROM project_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN project_snapshots.valid_from AND project_snapshots.valid_to_
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, project_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM project_snapshots_monthly13:T4fc,{{ config(materialized='view') }}

WITH date_details AS (
  
    SELECT *
    FROM {{ ref("date_details") }}
    WHERE last_day_of_month = date_actual
    
), namespace_statistics_snapshots AS (

    SELECT
      *,
      IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
    FROM {{ ref('gitlab_dotcom_namespace_root_storage_statistics_snapshots_base') }}

), namespace_statistics_snapshots_monthly AS (
  
    SELECT
      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,
      namespace_statistics_snapshots.namespace_id,
      namespace_statistics_snapshots.repository_size,
      namespace_statistics_snapshots.container_registry_size,
      namespace_statistics_snapshots.lfs_objects_size,
      namespace_statistics_snapshots.wiki_size,
      namespace_statistics_snapshots.build_artifacts_size,
      namespace_statistics_snapshots.storage_size,
      namespace_statistics_snapshots.packages_size
    FROM namespace_statistics_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN namespace_statistics_snapshots.valid_from AND namespace_statistics_snapshots.valid_to_
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, namespace_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM namespace_statistics_snapshots_monthly14:T4d8,

WITH date_details AS (
  
    SELECT *
    FROM "PROD".legacy.date_details
    WHERE last_day_of_month = date_actual
    
), namespace_statistics_snapshots AS (

    SELECT
      *,
      IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
    FROM "PROD".legacy.gitlab_dotcom_namespace_root_storage_statistics_snapshots

), namespace_statistics_snapshots_monthly AS (
  
    SELECT
      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,
      namespace_statistics_snapshots.namespace_id,
      namespace_statistics_snapshots.repository_size,
      namespace_statistics_snapshots.container_registry_size,
      namespace_statistics_snapshots.lfs_objects_size,
      namespace_statistics_snapshots.wiki_size,
      namespace_statistics_snapshots.build_artifacts_size,
      namespace_statistics_snapshots.storage_size,
      namespace_statistics_snapshots.packages_size
    FROM namespace_statistics_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN namespace_statistics_snapshots.valid_from AND namespace_statistics_snapshots.valid_to_
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, namespace_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM namespace_statistics_snapshots_monthly15:T4244,{{ config({
    "materialized":"table",
    })
}}

{% set repeated_metric_columns = 
      "SUM(headcount_start)                                                         AS headcount_start,
      SUM(headcount_start_excluding_sdr)                                            AS headcount_start_excluding_sdr,
      SUM(headcount_end)                                                            AS headcount_end,
      SUM(headcount_end_excluding_sdr)                                              AS headcount_end_excluding_sdr,
      (SUM(headcount_start) + SUM(headcount_end))/2                                 AS headcount_average,
      (SUM(headcount_start_excluding_sdr) + SUM(headcount_end_excluding_sdr))/2     AS headcount_average_excluding_sdr,
      SUM(hire_count)                                                               AS hire_count,
      SUM(separation_count)                                                         AS separation_count,
      SUM(voluntary_separation)                                                     AS voluntary_separation,
      SUM(involuntary_separation)                                                   AS involuntary_separation,

      SUM(headcount_start_leader)                                                   AS headcount_start_leader,
      SUM(headcount_end_leader)                                                     AS headcount_end_leader,
      (SUM(headcount_start_leader) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_leader,
      SUM(hired_leaders)                                                            AS hired_leaders,
      SUM(separated_leaders)                                                        AS separated_leaders,

      SUM(headcount_start_manager)                                                  AS headcount_start_manager,
      SUM(headcount_end_manager)                                                    AS headcount_end_manager,
      (SUM(headcount_start_manager) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_manager,
      SUM(hired_manager)                                                            AS hired_manager,
      SUM(separated_manager)                                                        AS separated_manager,

      SUM(headcount_start_management)                                               AS headcount_start_management,
      SUM(headcount_end_management)                                                 AS headcount_end_management,
      (SUM(headcount_start_management) 
        + SUM(headcount_end_management))/2                                          AS headcount_average_management,
      SUM(hired_management)                                                         AS hired_management,
      SUM(separated_management)                                                     AS separated_management,
            
      SUM(headcount_start_contributor)                                              AS headcount_start_contributor,
      SUM(headcount_end_contributor)                                                AS headcount_end_individual_contributor,
      (SUM(headcount_start_contributor) 
        + SUM(headcount_end_contributor))/2                                         AS headcount_average_contributor,
      SUM(hired_contributor)                                                        AS hired_contributor,
      SUM(separated_contributor)                                                    AS separated_contributor,

      SUM(IFF(is_promotion = TRUE,1,0))                                             AS promotion,
      SUM(IFF(is_promotion_excluding_sdr = TRUE,1,0))                               AS promotion_excluding_sdr,
      
      SUM(percent_change_in_comp)                                                   AS percent_change_in_comp,
      SUM(percent_change_in_comp_excluding_sdr)                                     AS percent_change_in_comp_excluding_sdr,

      AVG(location_factor)                                                          AS location_factor,
      AVG(new_hire_location_factor)                                                 AS new_hire_location_factor,
      SUM(discretionary_bonus)                                                      AS discretionary_bonus, 
      AVG(tenure_months)                                                            AS tenure_months,
      SUM(tenure_zero_to_six_months)                                                AS tenure_zero_to_six_months,
      SUM(tenure_six_to_twelve_months)                                              AS tenure_six_to_twelve_months,
      SUM(tenure_one_to_two_years)                                                  AS tenure_one_to_two_years,
      SUM(tenure_two_to_four_years)                                                 AS tenure_two_to_four_years,
      SUM(tenure_four_plus_years)                                                   AS tenure_four_plus_years
      "%}



WITH dates AS (

    SELECT
      date_actual                                 AS start_date,
      LAST_DAY(date_actual)                       AS end_date
    FROM {{ ref ('date_details') }}
    WHERE date_day <= LAST_DAY(current_date)
       AND day_of_month = 1
       AND date_actual >= '2013-07-01' -- min employment_status_date in bamboohr_employment_status model

), mapping AS (

    {{ dbt_utils.unpivot(relation=ref('bamboohr_id_employee_number_mapping'), cast_to='varchar', 
       exclude=['employee_number', 'employee_id','first_name', 'last_name', 'hire_date', 'termination_date', 'greenhouse_candidate_id','region','country','nationality', 'last_updated_date', 'first_inactive_date']) }}

), mapping_enhanced AS (

    SELECT 
      employee_id,
      LOWER(field_name)                  AS eeoc_field_name, 
      COALESCE(value, 'Not Identified')  AS eeoc_value
    FROM mapping

    UNION ALL

    SELECT 
      DISTINCT employee_id,
      'no_eeoc'                         AS eeoc_field_name,
      'no_eeoc'                         AS eeoc_value
    FROM mapping
 
), separation_reason AS(

    SELECT * 
    FROM {{ ref ('bamboohr_employment_status_xf') }}
    WHERE employment_status = 'Terminated'

), employees AS (

    SELECT *
    FROM {{ ref ('employee_directory_intermediate') }}

), bamboohr_promotion AS (

    SELECT *
    FROM {{ ref ('bamboohr_promotions_xf') }}

), intermediate AS (

    SELECT
      employees.date_actual,
      employees.department_modified                                                 AS department,
      division_mapped_current                                                       AS division,
      --using the current division - department mapping for reporting
      job_role_modified                                                             AS job_role,
      COALESCE(job_grade,'NA')                                                      AS job_grade,
      mapping_enhanced.eeoc_field_name,
      CASE
        WHEN mapping_enhanced.eeoc_field_name like '%_region'
          THEN SPLIT_PART(mapping_enhanced.eeoc_value,'_',1)|| '_' || 
            IFF(employees.country in ('United States of America', 'United States'),'United States of America', 'Non-US')
        WHEN mapping_enhanced.eeoc_field_name = 'region_modified'
          THEN employees.region_modified
        ELSE mapping_enhanced.eeoc_value END                                        AS eeoc_value,   
      IFF(dates.start_date = date_actual,1,0)                                       AS headcount_start,
      IFF(dates.start_date = date_actual 
        AND employees.department_modified != 'Sales Development', 1,0)              AS headcount_start_excluding_sdr,
      IFF(dates.end_date = date_actual,1,0)                                         AS headcount_end,
      IFF(dates.end_date = date_actual 
        AND employees.department_modified != 'Sales Development', 1,0)              AS headcount_end_excluding_sdr,
      IFF(is_hire_date = True, 1,0)                                                 AS hire_count,
      IFF(termination_type = 'Resignation (Voluntary)',1,0)                         AS voluntary_separation,
      IFF(termination_type = 'Termination (Involuntary)',1,0)                       AS involuntary_separation,
      voluntary_separation + involuntary_separation                                 AS separation_count,

      IFF(dates.start_date = date_actual 
          AND job_role_modified = 'Director+',1,0)                          AS headcount_start_leader,
      IFF(dates.end_date = date_actual
          AND job_role_modified = 'Director+',1,0)                          AS headcount_end_leader,
      IFF(is_hire_date = True 
          AND job_role_modified = 'Director+',1,0)                          AS hired_leaders,
      IFF(is_termination_date = True
          AND job_role_modified = 'Director+',1,0)                          AS separated_leaders,
      
      IFF(dates.start_date = date_actual 
          AND job_role_modified = 'Manager',1,0)                                    AS headcount_start_manager,
      IFF(dates.end_date = date_actual
          AND job_role_modified = 'Manager',1,0)                                    AS headcount_end_manager,
      IFF(is_hire_date = True 
          AND job_role_modified = 'Manager',1,0)                                    AS hired_manager,
      IFF(is_termination_date = True
          AND job_role_modified = 'Manager',1,0)                                    AS separated_manager,

      IFF(dates.start_date = date_actual 
          AND job_role_modified != 'Individual Contributor',1,0)                    AS headcount_start_management,
      IFF(dates.end_date = date_actual
          AND job_role_modified != 'Individual Contributor',1,0)                    AS headcount_end_management,
      IFF(is_hire_date = True 
          AND job_role_modified != 'Individual Contributor',1,0)                    AS hired_management,
      IFF(is_termination_date = True
          AND job_role_modified != 'Individual Contributor',1,0)                    AS separated_management,   

       IFF(dates.start_date = date_actual 
          AND job_role_modified = 'Individual Contributor',1,0)                     AS headcount_start_contributor,
      IFF(dates.end_date = date_actual
          AND job_role_modified = 'Individual Contributor',1,0)                     AS headcount_end_contributor,
      IFF(is_hire_date = True 
          AND job_role_modified = 'Individual Contributor',1,0)                     AS hired_contributor,
      IFF(is_termination_date = True
          AND job_role_modified = 'Individual Contributor',1,0)                     AS separated_contributor, 


      IFF(employees.job_title LIKE '%VP%', 'Exclude', is_promotion)                 AS is_promotion,  
      IFF(employees.job_title LIKE '%VP%' 
        OR employees.department_modified = 'Sales Development',
        'Exclude',is_promotion)                                                     AS is_promotion_excluding_sdr,
      IFF(is_promotion = TRUE AND employees.job_title NOT LIKE '%VP%',
        percent_change_in_comp, NULL)                                               AS percent_change_in_comp,      
      IFF(employees.job_title LIKE '%VP%' 
        OR employees.department_modified = 'Sales Development',
        NULL,percent_change_in_comp)                                                AS percent_change_in_comp_excluding_sdr,

      IFF(dates.end_date = date_actual 
            AND COALESCE(sales_geo_differential,'n/a - Comp Calc') = 'n/a - Comp Calc',
            location_factor, NULL)                                                  AS location_factor,
      IFF(is_hire_date = TRUE
            AND COALESCE(sales_geo_differential,'n/a - Comp Calc') = 'n/a - Comp Calc',
            location_factor, NULL)                                                  AS new_hire_location_factor,      
      discretionary_bonus,      
      ROUND((tenure_days/30),2)                                                     AS tenure_months,
      IFF(tenure_months BETWEEN 0 AND 6 AND dates.end_date = date_actual, 1, 0)     AS tenure_zero_to_six_months,
      IFF(tenure_months BETWEEN 6 AND 12 AND dates.end_date = date_actual, 1, 0)    AS tenure_six_to_twelve_months,
      IFF(tenure_months BETWEEN 12 AND 24 AND dates.end_date = date_actual, 1, 0)   AS tenure_one_to_two_years,
      IFF(tenure_months BETWEEN 24 AND 48 AND dates.end_date = date_actual, 1, 0)   AS tenure_two_to_four_years,
      IFF(tenure_months >= 48 AND dates.end_date = date_actual, 1, 0)               AS tenure_four_plus_years
    FROM dates
    LEFT JOIN employees
      ON DATE_TRUNC(month,dates.start_date) = DATE_TRUNC(month, employees.date_actual)
    LEFT JOIN mapping_enhanced
      ON employees.employee_id = mapping_enhanced.employee_id
    LEFT JOIN separation_reason
      ON separation_reason.employee_id = employees.employee_id
      AND employees.date_actual = separation_reason.valid_from_date
    LEFT JOIN bamboohr_promotion
      ON employees.employee_id = bamboohr_promotion.employee_id
      AND employees.date_actual = bamboohr_promotion.promotion_date  
   WHERE date_actual IS NOT NULL


), aggregated AS (

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'all_attributes_breakout'         AS breakout_type,
      department,
      division,
      job_role,
      job_grade,
      eeoc_field_name,                                                       
      eeoc_value,    
     {{repeated_metric_columns}}
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    {{ dbt_utils.group_by(n=8) }}  


    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'department_breakout'             AS breakout_type,
      department,
      division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,    
     {{repeated_metric_columns}}
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    {{ dbt_utils.group_by(n=8) }}  

    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'eeoc_breakout'                   AS breakout_type, 
      'eeoc_breakout'                   AS department,
      'eeoc_breakout'                   AS division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,  
      {{repeated_metric_columns}}
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    {{ dbt_utils.group_by(n=8) }} 

    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'division_breakout'               AS breakout_type, 
      'division_breakout'               AS department,
      division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,
      {{repeated_metric_columns}}
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    WHERE department IS NOT NULL
    {{ dbt_utils.group_by(n=8) }} 

    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'division_group_breakout'         AS breakout_type, 
      'division_group_breakout'         AS department,
      CASE
        WHEN division = 'Sales' 
          THEN 'Sales'
        WHEN division in ('Product', 'Engineering', 'Security')
          THEN 'Tech'
        ELSE 'Non-Tech' END             AS division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,
      {{repeated_metric_columns}}
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    WHERE department IS NOT NULL
    {{ dbt_utils.group_by(n=8) }} 

), breakout_modified AS (

    SELECT 
      aggregated.*,
      IFF(breakout_type = 'eeoc_breakout'
          AND eeoc_field_name = 'no_eeoc', 'kpi_breakout', breakout_type)                   AS breakout_type_modified
    FROM aggregated

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['month_date', 'breakout_type_modified','department','division',
                                'job_role','job_grade', 'eeoc_field_name', 'eeoc_value']) }} AS unique_key,
      breakout_modified.*                           
    FROM breakout_modified

)

SELECT *
FROM final16:T9fff,





WITH dates AS (

    SELECT
      date_actual                                 AS start_date,
      LAST_DAY(date_actual)                       AS end_date
    FROM "PROD".legacy.date_details
    WHERE date_day <= LAST_DAY(current_date)
       AND day_of_month = 1
       AND date_actual >= '2013-07-01' -- min employment_status_date in bamboohr_employment_status model

), mapping AS (

    

    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('AGE_COHORT' as 
    varchar
) as field_name,
      cast(  
           AGE_COHORT
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('GENDER' as 
    varchar
) as field_name,
      cast(  
           GENDER
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('GENDER_IDENTITY' as 
    varchar
) as field_name,
      cast(  
           GENDER_IDENTITY
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('ETHNICITY' as 
    varchar
) as field_name,
      cast(  
           ETHNICITY
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('REGION_MODIFIED' as 
    varchar
) as field_name,
      cast(  
           REGION_MODIFIED
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('GENDER_REGION' as 
    varchar
) as field_name,
      cast(  
           GENDER_REGION
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('ETHNICITY_REGION' as 
    varchar
) as field_name,
      cast(  
           ETHNICITY_REGION
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('URG_GROUP' as 
    varchar
) as field_name,
      cast(  
           URG_GROUP
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    union all
    select
        employee_number,
        employee_id,
        first_name,
        last_name,
        hire_date,
        termination_date,
        greenhouse_candidate_id,
        region,
        country,
        nationality,
        last_updated_date,
        first_inactive_date,

      cast('URG_REGION' as 
    varchar
) as field_name,
      cast(  
           URG_REGION
             
           as varchar) as value

    from "PREP".sensitive.bamboohr_id_employee_number_mapping

    

), mapping_enhanced AS (

    SELECT 
      employee_id,
      LOWER(field_name)                  AS eeoc_field_name, 
      COALESCE(value, 'Not Identified')  AS eeoc_value
    FROM mapping

    UNION ALL

    SELECT 
      DISTINCT employee_id,
      'no_eeoc'                         AS eeoc_field_name,
      'no_eeoc'                         AS eeoc_value
    FROM mapping
 
), separation_reason AS(

    SELECT * 
    FROM "PREP".sensitive.bamboohr_employment_status_xf
    WHERE employment_status = 'Terminated'

), employees AS (

    SELECT *
    FROM "PREP".sensitive.employee_directory_intermediate

), bamboohr_promotion AS (

    SELECT *
    FROM "PREP".sensitive.bamboohr_promotions_xf

), intermediate AS (

    SELECT
      employees.date_actual,
      employees.department_modified                                                 AS department,
      division_mapped_current                                                       AS division,
      --using the current division - department mapping for reporting
      job_role_modified                                                             AS job_role,
      COALESCE(job_grade,'NA')                                                      AS job_grade,
      mapping_enhanced.eeoc_field_name,
      CASE
        WHEN mapping_enhanced.eeoc_field_name like '%_region'
          THEN SPLIT_PART(mapping_enhanced.eeoc_value,'_',1)|| '_' || 
            IFF(employees.country in ('United States of America', 'United States'),'United States of America', 'Non-US')
        WHEN mapping_enhanced.eeoc_field_name = 'region_modified'
          THEN employees.region_modified
        ELSE mapping_enhanced.eeoc_value END                                        AS eeoc_value,   
      IFF(dates.start_date = date_actual,1,0)                                       AS headcount_start,
      IFF(dates.start_date = date_actual 
        AND employees.department_modified != 'Sales Development', 1,0)              AS headcount_start_excluding_sdr,
      IFF(dates.end_date = date_actual,1,0)                                         AS headcount_end,
      IFF(dates.end_date = date_actual 
        AND employees.department_modified != 'Sales Development', 1,0)              AS headcount_end_excluding_sdr,
      IFF(is_hire_date = True, 1,0)                                                 AS hire_count,
      IFF(termination_type = 'Resignation (Voluntary)',1,0)                         AS voluntary_separation,
      IFF(termination_type = 'Termination (Involuntary)',1,0)                       AS involuntary_separation,
      voluntary_separation + involuntary_separation                                 AS separation_count,

      IFF(dates.start_date = date_actual 
          AND job_role_modified = 'Director+',1,0)                          AS headcount_start_leader,
      IFF(dates.end_date = date_actual
          AND job_role_modified = 'Director+',1,0)                          AS headcount_end_leader,
      IFF(is_hire_date = True 
          AND job_role_modified = 'Director+',1,0)                          AS hired_leaders,
      IFF(is_termination_date = True
          AND job_role_modified = 'Director+',1,0)                          AS separated_leaders,
      
      IFF(dates.start_date = date_actual 
          AND job_role_modified = 'Manager',1,0)                                    AS headcount_start_manager,
      IFF(dates.end_date = date_actual
          AND job_role_modified = 'Manager',1,0)                                    AS headcount_end_manager,
      IFF(is_hire_date = True 
          AND job_role_modified = 'Manager',1,0)                                    AS hired_manager,
      IFF(is_termination_date = True
          AND job_role_modified = 'Manager',1,0)                                    AS separated_manager,

      IFF(dates.start_date = date_actual 
          AND job_role_modified != 'Individual Contributor',1,0)                    AS headcount_start_management,
      IFF(dates.end_date = date_actual
          AND job_role_modified != 'Individual Contributor',1,0)                    AS headcount_end_management,
      IFF(is_hire_date = True 
          AND job_role_modified != 'Individual Contributor',1,0)                    AS hired_management,
      IFF(is_termination_date = True
          AND job_role_modified != 'Individual Contributor',1,0)                    AS separated_management,   

       IFF(dates.start_date = date_actual 
          AND job_role_modified = 'Individual Contributor',1,0)                     AS headcount_start_contributor,
      IFF(dates.end_date = date_actual
          AND job_role_modified = 'Individual Contributor',1,0)                     AS headcount_end_contributor,
      IFF(is_hire_date = True 
          AND job_role_modified = 'Individual Contributor',1,0)                     AS hired_contributor,
      IFF(is_termination_date = True
          AND job_role_modified = 'Individual Contributor',1,0)                     AS separated_contributor, 


      IFF(employees.job_title LIKE '%VP%', 'Exclude', is_promotion)                 AS is_promotion,  
      IFF(employees.job_title LIKE '%VP%' 
        OR employees.department_modified = 'Sales Development',
        'Exclude',is_promotion)                                                     AS is_promotion_excluding_sdr,
      IFF(is_promotion = TRUE AND employees.job_title NOT LIKE '%VP%',
        percent_change_in_comp, NULL)                                               AS percent_change_in_comp,      
      IFF(employees.job_title LIKE '%VP%' 
        OR employees.department_modified = 'Sales Development',
        NULL,percent_change_in_comp)                                                AS percent_change_in_comp_excluding_sdr,

      IFF(dates.end_date = date_actual 
            AND COALESCE(sales_geo_differential,'n/a - Comp Calc') = 'n/a - Comp Calc',
            location_factor, NULL)                                                  AS location_factor,
      IFF(is_hire_date = TRUE
            AND COALESCE(sales_geo_differential,'n/a - Comp Calc') = 'n/a - Comp Calc',
            location_factor, NULL)                                                  AS new_hire_location_factor,      
      discretionary_bonus,      
      ROUND((tenure_days/30),2)                                                     AS tenure_months,
      IFF(tenure_months BETWEEN 0 AND 6 AND dates.end_date = date_actual, 1, 0)     AS tenure_zero_to_six_months,
      IFF(tenure_months BETWEEN 6 AND 12 AND dates.end_date = date_actual, 1, 0)    AS tenure_six_to_twelve_months,
      IFF(tenure_months BETWEEN 12 AND 24 AND dates.end_date = date_actual, 1, 0)   AS tenure_one_to_two_years,
      IFF(tenure_months BETWEEN 24 AND 48 AND dates.end_date = date_actual, 1, 0)   AS tenure_two_to_four_years,
      IFF(tenure_months >= 48 AND dates.end_date = date_actual, 1, 0)               AS tenure_four_plus_years
    FROM dates
    LEFT JOIN employees
      ON DATE_TRUNC(month,dates.start_date) = DATE_TRUNC(month, employees.date_actual)
    LEFT JOIN mapping_enhanced
      ON employees.employee_id = mapping_enhanced.employee_id
    LEFT JOIN separation_reason
      ON separation_reason.employee_id = employees.employee_id
      AND employees.date_actual = separation_reason.valid_from_date
    LEFT JOIN bamboohr_promotion
      ON employees.employee_id = bamboohr_promotion.employee_id
      AND employees.date_actual = bamboohr_promotion.promotion_date  
   WHERE date_actual IS NOT NULL


), aggregated AS (

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'all_attributes_breakout'         AS breakout_type,
      department,
      division,
      job_role,
      job_grade,
      eeoc_field_name,                                                       
      eeoc_value,    
     SUM(headcount_start)                                                         AS headcount_start,
      SUM(headcount_start_excluding_sdr)                                            AS headcount_start_excluding_sdr,
      SUM(headcount_end)                                                            AS headcount_end,
      SUM(headcount_end_excluding_sdr)                                              AS headcount_end_excluding_sdr,
      (SUM(headcount_start) + SUM(headcount_end))/2                                 AS headcount_average,
      (SUM(headcount_start_excluding_sdr) + SUM(headcount_end_excluding_sdr))/2     AS headcount_average_excluding_sdr,
      SUM(hire_count)                                                               AS hire_count,
      SUM(separation_count)                                                         AS separation_count,
      SUM(voluntary_separation)                                                     AS voluntary_separation,
      SUM(involuntary_separation)                                                   AS involuntary_separation,

      SUM(headcount_start_leader)                                                   AS headcount_start_leader,
      SUM(headcount_end_leader)                                                     AS headcount_end_leader,
      (SUM(headcount_start_leader) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_leader,
      SUM(hired_leaders)                                                            AS hired_leaders,
      SUM(separated_leaders)                                                        AS separated_leaders,

      SUM(headcount_start_manager)                                                  AS headcount_start_manager,
      SUM(headcount_end_manager)                                                    AS headcount_end_manager,
      (SUM(headcount_start_manager) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_manager,
      SUM(hired_manager)                                                            AS hired_manager,
      SUM(separated_manager)                                                        AS separated_manager,

      SUM(headcount_start_management)                                               AS headcount_start_management,
      SUM(headcount_end_management)                                                 AS headcount_end_management,
      (SUM(headcount_start_management) 
        + SUM(headcount_end_management))/2                                          AS headcount_average_management,
      SUM(hired_management)                                                         AS hired_management,
      SUM(separated_management)                                                     AS separated_management,
            
      SUM(headcount_start_contributor)                                              AS headcount_start_contributor,
      SUM(headcount_end_contributor)                                                AS headcount_end_individual_contributor,
      (SUM(headcount_start_contributor) 
        + SUM(headcount_end_contributor))/2                                         AS headcount_average_contributor,
      SUM(hired_contributor)                                                        AS hired_contributor,
      SUM(separated_contributor)                                                    AS separated_contributor,

      SUM(IFF(is_promotion = TRUE,1,0))                                             AS promotion,
      SUM(IFF(is_promotion_excluding_sdr = TRUE,1,0))                               AS promotion_excluding_sdr,
      
      SUM(percent_change_in_comp)                                                   AS percent_change_in_comp,
      SUM(percent_change_in_comp_excluding_sdr)                                     AS percent_change_in_comp_excluding_sdr,

      AVG(location_factor)                                                          AS location_factor,
      AVG(new_hire_location_factor)                                                 AS new_hire_location_factor,
      SUM(discretionary_bonus)                                                      AS discretionary_bonus, 
      AVG(tenure_months)                                                            AS tenure_months,
      SUM(tenure_zero_to_six_months)                                                AS tenure_zero_to_six_months,
      SUM(tenure_six_to_twelve_months)                                              AS tenure_six_to_twelve_months,
      SUM(tenure_one_to_two_years)                                                  AS tenure_one_to_two_years,
      SUM(tenure_two_to_four_years)                                                 AS tenure_two_to_four_years,
      SUM(tenure_four_plus_years)                                                   AS tenure_four_plus_years
      
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    group by 1,2,3,4,5,6,7,8  


    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'department_breakout'             AS breakout_type,
      department,
      division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,    
     SUM(headcount_start)                                                         AS headcount_start,
      SUM(headcount_start_excluding_sdr)                                            AS headcount_start_excluding_sdr,
      SUM(headcount_end)                                                            AS headcount_end,
      SUM(headcount_end_excluding_sdr)                                              AS headcount_end_excluding_sdr,
      (SUM(headcount_start) + SUM(headcount_end))/2                                 AS headcount_average,
      (SUM(headcount_start_excluding_sdr) + SUM(headcount_end_excluding_sdr))/2     AS headcount_average_excluding_sdr,
      SUM(hire_count)                                                               AS hire_count,
      SUM(separation_count)                                                         AS separation_count,
      SUM(voluntary_separation)                                                     AS voluntary_separation,
      SUM(involuntary_separation)                                                   AS involuntary_separation,

      SUM(headcount_start_leader)                                                   AS headcount_start_leader,
      SUM(headcount_end_leader)                                                     AS headcount_end_leader,
      (SUM(headcount_start_leader) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_leader,
      SUM(hired_leaders)                                                            AS hired_leaders,
      SUM(separated_leaders)                                                        AS separated_leaders,

      SUM(headcount_start_manager)                                                  AS headcount_start_manager,
      SUM(headcount_end_manager)                                                    AS headcount_end_manager,
      (SUM(headcount_start_manager) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_manager,
      SUM(hired_manager)                                                            AS hired_manager,
      SUM(separated_manager)                                                        AS separated_manager,

      SUM(headcount_start_management)                                               AS headcount_start_management,
      SUM(headcount_end_management)                                                 AS headcount_end_management,
      (SUM(headcount_start_management) 
        + SUM(headcount_end_management))/2                                          AS headcount_average_management,
      SUM(hired_management)                                                         AS hired_management,
      SUM(separated_management)                                                     AS separated_management,
            
      SUM(headcount_start_contributor)                                              AS headcount_start_contributor,
      SUM(headcount_end_contributor)                                                AS headcount_end_individual_contributor,
      (SUM(headcount_start_contributor) 
        + SUM(headcount_end_contributor))/2                                         AS headcount_average_contributor,
      SUM(hired_contributor)                                                        AS hired_contributor,
      SUM(separated_contributor)                                                    AS separated_contributor,

      SUM(IFF(is_promotion = TRUE,1,0))                                             AS promotion,
      SUM(IFF(is_promotion_excluding_sdr = TRUE,1,0))                               AS promotion_excluding_sdr,
      
      SUM(percent_change_in_comp)                                                   AS percent_change_in_comp,
      SUM(percent_change_in_comp_excluding_sdr)                                     AS percent_change_in_comp_excluding_sdr,

      AVG(location_factor)                                                          AS location_factor,
      AVG(new_hire_location_factor)                                                 AS new_hire_location_factor,
      SUM(discretionary_bonus)                                                      AS discretionary_bonus, 
      AVG(tenure_months)                                                            AS tenure_months,
      SUM(tenure_zero_to_six_months)                                                AS tenure_zero_to_six_months,
      SUM(tenure_six_to_twelve_months)                                              AS tenure_six_to_twelve_months,
      SUM(tenure_one_to_two_years)                                                  AS tenure_one_to_two_years,
      SUM(tenure_two_to_four_years)                                                 AS tenure_two_to_four_years,
      SUM(tenure_four_plus_years)                                                   AS tenure_four_plus_years
      
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    group by 1,2,3,4,5,6,7,8  

    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'eeoc_breakout'                   AS breakout_type, 
      'eeoc_breakout'                   AS department,
      'eeoc_breakout'                   AS division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,  
      SUM(headcount_start)                                                         AS headcount_start,
      SUM(headcount_start_excluding_sdr)                                            AS headcount_start_excluding_sdr,
      SUM(headcount_end)                                                            AS headcount_end,
      SUM(headcount_end_excluding_sdr)                                              AS headcount_end_excluding_sdr,
      (SUM(headcount_start) + SUM(headcount_end))/2                                 AS headcount_average,
      (SUM(headcount_start_excluding_sdr) + SUM(headcount_end_excluding_sdr))/2     AS headcount_average_excluding_sdr,
      SUM(hire_count)                                                               AS hire_count,
      SUM(separation_count)                                                         AS separation_count,
      SUM(voluntary_separation)                                                     AS voluntary_separation,
      SUM(involuntary_separation)                                                   AS involuntary_separation,

      SUM(headcount_start_leader)                                                   AS headcount_start_leader,
      SUM(headcount_end_leader)                                                     AS headcount_end_leader,
      (SUM(headcount_start_leader) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_leader,
      SUM(hired_leaders)                                                            AS hired_leaders,
      SUM(separated_leaders)                                                        AS separated_leaders,

      SUM(headcount_start_manager)                                                  AS headcount_start_manager,
      SUM(headcount_end_manager)                                                    AS headcount_end_manager,
      (SUM(headcount_start_manager) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_manager,
      SUM(hired_manager)                                                            AS hired_manager,
      SUM(separated_manager)                                                        AS separated_manager,

      SUM(headcount_start_management)                                               AS headcount_start_management,
      SUM(headcount_end_management)                                                 AS headcount_end_management,
      (SUM(headcount_start_management) 
        + SUM(headcount_end_management))/2                                          AS headcount_average_management,
      SUM(hired_management)                                                         AS hired_management,
      SUM(separated_management)                                                     AS separated_management,
            
      SUM(headcount_start_contributor)                                              AS headcount_start_contributor,
      SUM(headcount_end_contributor)                                                AS headcount_end_individual_contributor,
      (SUM(headcount_start_contributor) 
        + SUM(headcount_end_contributor))/2                                         AS headcount_average_contributor,
      SUM(hired_contributor)                                                        AS hired_contributor,
      SUM(separated_contributor)                                                    AS separated_contributor,

      SUM(IFF(is_promotion = TRUE,1,0))                                             AS promotion,
      SUM(IFF(is_promotion_excluding_sdr = TRUE,1,0))                               AS promotion_excluding_sdr,
      
      SUM(percent_change_in_comp)                                                   AS percent_change_in_comp,
      SUM(percent_change_in_comp_excluding_sdr)                                     AS percent_change_in_comp_excluding_sdr,

      AVG(location_factor)                                                          AS location_factor,
      AVG(new_hire_location_factor)                                                 AS new_hire_location_factor,
      SUM(discretionary_bonus)                                                      AS discretionary_bonus, 
      AVG(tenure_months)                                                            AS tenure_months,
      SUM(tenure_zero_to_six_months)                                                AS tenure_zero_to_six_months,
      SUM(tenure_six_to_twelve_months)                                              AS tenure_six_to_twelve_months,
      SUM(tenure_one_to_two_years)                                                  AS tenure_one_to_two_years,
      SUM(tenure_two_to_four_years)                                                 AS tenure_two_to_four_years,
      SUM(tenure_four_plus_years)                                                   AS tenure_four_plus_years
      
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    group by 1,2,3,4,5,6,7,8 

    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'division_breakout'               AS breakout_type, 
      'division_breakout'               AS department,
      division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,
      SUM(headcount_start)                                                         AS headcount_start,
      SUM(headcount_start_excluding_sdr)                                            AS headcount_start_excluding_sdr,
      SUM(headcount_end)                                                            AS headcount_end,
      SUM(headcount_end_excluding_sdr)                                              AS headcount_end_excluding_sdr,
      (SUM(headcount_start) + SUM(headcount_end))/2                                 AS headcount_average,
      (SUM(headcount_start_excluding_sdr) + SUM(headcount_end_excluding_sdr))/2     AS headcount_average_excluding_sdr,
      SUM(hire_count)                                                               AS hire_count,
      SUM(separation_count)                                                         AS separation_count,
      SUM(voluntary_separation)                                                     AS voluntary_separation,
      SUM(involuntary_separation)                                                   AS involuntary_separation,

      SUM(headcount_start_leader)                                                   AS headcount_start_leader,
      SUM(headcount_end_leader)                                                     AS headcount_end_leader,
      (SUM(headcount_start_leader) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_leader,
      SUM(hired_leaders)                                                            AS hired_leaders,
      SUM(separated_leaders)                                                        AS separated_leaders,

      SUM(headcount_start_manager)                                                  AS headcount_start_manager,
      SUM(headcount_end_manager)                                                    AS headcount_end_manager,
      (SUM(headcount_start_manager) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_manager,
      SUM(hired_manager)                                                            AS hired_manager,
      SUM(separated_manager)                                                        AS separated_manager,

      SUM(headcount_start_management)                                               AS headcount_start_management,
      SUM(headcount_end_management)                                                 AS headcount_end_management,
      (SUM(headcount_start_management) 
        + SUM(headcount_end_management))/2                                          AS headcount_average_management,
      SUM(hired_management)                                                         AS hired_management,
      SUM(separated_management)                                                     AS separated_management,
            
      SUM(headcount_start_contributor)                                              AS headcount_start_contributor,
      SUM(headcount_end_contributor)                                                AS headcount_end_individual_contributor,
      (SUM(headcount_start_contributor) 
        + SUM(headcount_end_contributor))/2                                         AS headcount_average_contributor,
      SUM(hired_contributor)                                                        AS hired_contributor,
      SUM(separated_contributor)                                                    AS separated_contributor,

      SUM(IFF(is_promotion = TRUE,1,0))                                             AS promotion,
      SUM(IFF(is_promotion_excluding_sdr = TRUE,1,0))                               AS promotion_excluding_sdr,
      
      SUM(percent_change_in_comp)                                                   AS percent_change_in_comp,
      SUM(percent_change_in_comp_excluding_sdr)                                     AS percent_change_in_comp_excluding_sdr,

      AVG(location_factor)                                                          AS location_factor,
      AVG(new_hire_location_factor)                                                 AS new_hire_location_factor,
      SUM(discretionary_bonus)                                                      AS discretionary_bonus, 
      AVG(tenure_months)                                                            AS tenure_months,
      SUM(tenure_zero_to_six_months)                                                AS tenure_zero_to_six_months,
      SUM(tenure_six_to_twelve_months)                                              AS tenure_six_to_twelve_months,
      SUM(tenure_one_to_two_years)                                                  AS tenure_one_to_two_years,
      SUM(tenure_two_to_four_years)                                                 AS tenure_two_to_four_years,
      SUM(tenure_four_plus_years)                                                   AS tenure_four_plus_years
      
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    WHERE department IS NOT NULL
    group by 1,2,3,4,5,6,7,8 

    UNION ALL

    SELECT
      DATE_TRUNC(month,start_date)      AS month_date,
      'division_group_breakout'         AS breakout_type, 
      'division_group_breakout'         AS department,
      CASE
        WHEN division = 'Sales' 
          THEN 'Sales'
        WHEN division in ('Product', 'Engineering', 'Security')
          THEN 'Tech'
        ELSE 'Non-Tech' END             AS division,
      NULL                              AS job_role,
      NULL                              AS job_grade,
      eeoc_field_name,                                                       
      eeoc_value,
      SUM(headcount_start)                                                         AS headcount_start,
      SUM(headcount_start_excluding_sdr)                                            AS headcount_start_excluding_sdr,
      SUM(headcount_end)                                                            AS headcount_end,
      SUM(headcount_end_excluding_sdr)                                              AS headcount_end_excluding_sdr,
      (SUM(headcount_start) + SUM(headcount_end))/2                                 AS headcount_average,
      (SUM(headcount_start_excluding_sdr) + SUM(headcount_end_excluding_sdr))/2     AS headcount_average_excluding_sdr,
      SUM(hire_count)                                                               AS hire_count,
      SUM(separation_count)                                                         AS separation_count,
      SUM(voluntary_separation)                                                     AS voluntary_separation,
      SUM(involuntary_separation)                                                   AS involuntary_separation,

      SUM(headcount_start_leader)                                                   AS headcount_start_leader,
      SUM(headcount_end_leader)                                                     AS headcount_end_leader,
      (SUM(headcount_start_leader) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_leader,
      SUM(hired_leaders)                                                            AS hired_leaders,
      SUM(separated_leaders)                                                        AS separated_leaders,

      SUM(headcount_start_manager)                                                  AS headcount_start_manager,
      SUM(headcount_end_manager)                                                    AS headcount_end_manager,
      (SUM(headcount_start_manager) 
        + SUM(headcount_end_leader))/2                                              AS headcount_average_manager,
      SUM(hired_manager)                                                            AS hired_manager,
      SUM(separated_manager)                                                        AS separated_manager,

      SUM(headcount_start_management)                                               AS headcount_start_management,
      SUM(headcount_end_management)                                                 AS headcount_end_management,
      (SUM(headcount_start_management) 
        + SUM(headcount_end_management))/2                                          AS headcount_average_management,
      SUM(hired_management)                                                         AS hired_management,
      SUM(separated_management)                                                     AS separated_management,
            
      SUM(headcount_start_contributor)                                              AS headcount_start_contributor,
      SUM(headcount_end_contributor)                                                AS headcount_end_individual_contributor,
      (SUM(headcount_start_contributor) 
        + SUM(headcount_end_contributor))/2                                         AS headcount_average_contributor,
      SUM(hired_contributor)                                                        AS hired_contributor,
      SUM(separated_contributor)                                                    AS separated_contributor,

      SUM(IFF(is_promotion = TRUE,1,0))                                             AS promotion,
      SUM(IFF(is_promotion_excluding_sdr = TRUE,1,0))                               AS promotion_excluding_sdr,
      
      SUM(percent_change_in_comp)                                                   AS percent_change_in_comp,
      SUM(percent_change_in_comp_excluding_sdr)                                     AS percent_change_in_comp_excluding_sdr,

      AVG(location_factor)                                                          AS location_factor,
      AVG(new_hire_location_factor)                                                 AS new_hire_location_factor,
      SUM(discretionary_bonus)                                                      AS discretionary_bonus, 
      AVG(tenure_months)                                                            AS tenure_months,
      SUM(tenure_zero_to_six_months)                                                AS tenure_zero_to_six_months,
      SUM(tenure_six_to_twelve_months)                                              AS tenure_six_to_twelve_months,
      SUM(tenure_one_to_two_years)                                                  AS tenure_one_to_two_years,
      SUM(tenure_two_to_four_years)                                                 AS tenure_two_to_four_years,
      SUM(tenure_four_plus_years)                                                   AS tenure_four_plus_years
      
    FROM dates 
    LEFT JOIN intermediate 
      ON DATE_TRUNC(month, start_date) = DATE_TRUNC(month, date_actual)
    WHERE department IS NOT NULL
    group by 1,2,3,4,5,6,7,8 

), breakout_modified AS (

    SELECT 
      aggregated.*,
      IFF(breakout_type = 'eeoc_breakout'
          AND eeoc_field_name = 'no_eeoc', 'kpi_breakout', breakout_type)                   AS breakout_type_modified
    FROM aggregated

), final AS (

    SELECT
      md5(cast(coalesce(cast(month_date as 
    varchar
), '') || '-' || coalesce(cast(breakout_type_modified as 
    varchar
), '') || '-' || coalesce(cast(department as 
    varchar
), '') || '-' || coalesce(cast(division as 
    varchar
), '') || '-' || coalesce(cast(job_role as 
    varchar
), '') || '-' || coalesce(cast(job_grade as 
    varchar
), '') || '-' || coalesce(cast(eeoc_field_name as 
    varchar
), '') || '-' || coalesce(cast(eeoc_value as 
    varchar
), '') as 
    varchar
)) AS unique_key,
      breakout_modified.*                           
    FROM breakout_modified

)

SELECT *
FROM final17:T400,{{ config(materialized='view') }}

WITH date_details AS (
  
    SELECT *
    FROM {{ ref("date_details") }}
    WHERE last_day_of_month = date_actual
     
), namespace_statistics_snapshots AS (

   SELECT
     *,
     IFNULL(valid_to, CURRENT_TIMESTAMP)             AS valid_to_
   FROM {{ ref('gitlab_dotcom_namespace_statistics_snapshots_base') }}

), namespace_statistics_snapshots_monthly AS (
  
    SELECT
      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,
      namespace_statistics_snapshots.namespace_id,
      namespace_statistics_snapshots.shared_runners_seconds,
      namespace_statistics_snapshots.shared_runners_seconds_last_reset
    FROM namespace_statistics_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN namespace_statistics_snapshots.valid_from AND namespace_statistics_snapshots.valid_to_
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, namespace_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM namespace_statistics_snapshots_monthly18:T657,{{ config({
    "materialized": "incremental",
    "unique_key": "snapshot_day_namespace_id"
    })
}}

WITH date_details AS (
  
    SELECT *
    FROM {{ ref('date_details') }}
    WHERE date_actual <= CURRENT_DATE
    {% if is_incremental() %}
      AND date_actual >= (SELECT MAX(snapshot_day) FROM {{ this }})
    {% endif %}
     
), namespace_snapshots AS (

    SELECT
      *,
      IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
    FROM {{ ref('gitlab_dotcom_namespaces_snapshots_base') }}
    {% if is_incremental() %}
    WHERE (SELECT MAX(snapshot_day) FROM {{ this }}) BETWEEN valid_from AND valid_to_
    {% endif %}
  
), namespace_snapshots_daily AS (
  
    SELECT
      {{ dbt_utils.surrogate_key(['date_actual', 'namespace_id']) }}           AS snapshot_day_namespace_id,
      date_details.date_actual                                                 AS snapshot_day,
      namespace_snapshots.namespace_id,
      namespace_snapshots.parent_id,
      namespace_snapshots.owner_id,
      namespace_snapshots.namespace_type,
      namespace_snapshots.visibility_level,
      namespace_snapshots.shared_runners_minutes_limit,
      namespace_snapshots.extra_shared_runners_minutes_limit,
      namespace_snapshots.repository_size_limit,
      namespace_snapshots.namespace_created_at
    FROM namespace_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN namespace_snapshots.valid_from::DATE AND namespace_snapshots.valid_to_::DATE
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_day, namespace_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM namespace_snapshots_daily19:T652,

WITH date_details AS (
  
    SELECT *
    FROM "PROD".legacy.date_details
    WHERE date_actual <= CURRENT_DATE
    
      AND date_actual >= (SELECT MAX(snapshot_day) FROM "PREP".preparation.gitlab_dotcom_namespace_historical_daily)
    
     
), namespace_snapshots AS (

    SELECT
      *,
      IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
    FROM "PROD".legacy.gitlab_dotcom_namespaces_snapshots
    
    WHERE (SELECT MAX(snapshot_day) FROM "PREP".preparation.gitlab_dotcom_namespace_historical_daily) BETWEEN valid_from AND valid_to_
    
  
), namespace_snapshots_daily AS (
  
    SELECT
      md5(cast(coalesce(cast(date_actual as 
    varchar
), '') || '-' || coalesce(cast(namespace_id as 
    varchar
), '') as 
    varchar
))           AS snapshot_day_namespace_id,
      date_details.date_actual                                                 AS snapshot_day,
      namespace_snapshots.namespace_id,
      namespace_snapshots.parent_id,
      namespace_snapshots.owner_id,
      namespace_snapshots.namespace_type,
      namespace_snapshots.visibility_level,
      namespace_snapshots.shared_runners_minutes_limit,
      namespace_snapshots.extra_shared_runners_minutes_limit,
      namespace_snapshots.repository_size_limit,
      namespace_snapshots.namespace_created_at
    FROM namespace_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN namespace_snapshots.valid_from::DATE AND namespace_snapshots.valid_to_::DATE
    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_day, namespace_id ORDER BY valid_to_ DESC) = 1
  
)

SELECT *
FROM namespace_snapshots_daily1a:T312a,{{ config({
    "materialized":"table",
    })
}}

WITH RECURSIVE employee_directory AS (

  SELECT
    employee_id,
    employee_number,
    first_name,
    last_name,
    hire_date,
    rehire_date,
    region_modified,
    country,
    termination_date,
    first_inactive_date,
    hire_location_factor,
    last_work_email,
    (COALESCE(first_name,'') || ' ' || COALESCE(last_name,'')) AS full_name
  FROM {{ ref('employee_directory') }}

),

date_details AS (

  SELECT *
  FROM {{ ref('date_details') }}

),

department_info AS (

  SELECT *
  FROM {{ ref('bamboohr_job_info_current_division_base') }}

),

job_role AS (

  SELECT *
  FROM {{ ref('bamboohr_job_role') }}

),

location_factor AS (

  SELECT *
  FROM {{ ref('employee_location_factor_snapshots') }}

),

employment_status AS (

  SELECT *
  FROM {{ ref('bamboohr_employment_status_xf') }}

),

promotion AS (

  SELECT
    employee_id,
    effective_date,
    compensation_change_reason
  FROM {{ ref('blended_compensation_source') }}
  WHERE compensation_change_reason = 'Promotion'
  GROUP BY 1, 2, 3

),

direct_reports AS (

  SELECT
    date_actual,
    reports_to,
    COUNT(employee_id) AS total_direct_reports
  FROM (
      SELECT
        date_details.date_actual,
        employee_directory.employee_id,
        department_info.reports_to
      FROM date_details
      LEFT JOIN employee_directory
        ON employee_directory.hire_date::DATE <= date_details.date_actual
          AND COALESCE(
            employee_directory.first_inactive_date::DATE, {{ max_date_in_bamboo_analyses() }}
          ) >= date_details.date_actual
      LEFT JOIN department_info
        ON employee_directory.employee_id = department_info.employee_id
          AND date_details.date_actual BETWEEN department_info.effective_date
          AND COALESCE(department_info.effective_end_date, {{ max_date_in_bamboo_analyses() }})
    )
  GROUP BY 1, 2
  HAVING total_direct_reports > 0

),

job_info_mapping_historical AS (

  SELECT
    department_info.employee_id,
    department_info.job_title,
    IFF(
      department_info.job_title = 'Manager, Field Marketing',
      'Leader',
      COALESCE(job_role.job_role, department_info.job_role)
    ) AS job_role,
    CASE WHEN department_info.job_title = 'Group Manager, Product'
      THEN '9.5'
      WHEN department_info.job_title = 'Manager, Field Marketing'
        THEN '8'
      ELSE job_role.job_grade END AS job_grade,
    ROW_NUMBER() OVER (
      PARTITION BY department_info.employee_id ORDER BY date_details.date_actual
    ) AS job_grade_event_rank
  FROM date_details
  LEFT JOIN department_info
    ON
      date_details.date_actual BETWEEN department_info.effective_date AND COALESCE(
        department_info.effective_end_date, {{ max_date_in_bamboo_analyses() }}
      )
  LEFT JOIN job_role
    ON job_role.employee_id = department_info.employee_id
      AND date_details.date_actual BETWEEN job_role.effective_date AND COALESCE(
        job_role.next_effective_date, {{ max_date_in_bamboo_analyses() }}
      )
  WHERE job_role.job_grade IS NOT NULL
    -- Using the 1st time we captured job_role and grade
    -- to identify classification for historical records

),

employment_status_records_check AS (

  SELECT
    employee_id,
    MIN(valid_from_date) AS employment_status_first_value
  FROM {{ ref('bamboohr_employment_status_xf') }}
  GROUP BY 1

),

cost_center_prior_to_bamboo AS (

  SELECT *
  FROM {{ ref('cost_center_division_department_mapping') }}

),

sheetload_engineering_speciality AS (

  SELECT *
  FROM {{ ref('sheetload_engineering_speciality_prior_to_capture') }}

),

bamboohr_discretionary_bonuses_xf AS (

  SELECT *
  FROM {{ ref('bamboohr_directionary_bonuses_xf') }}

),

fct_work_email AS (

  SELECT *
  FROM {{ ref('bamboohr_work_email') }}

),

enriched AS (

  SELECT
    employee_directory.*,
    date_details.date_actual,
    department_info.job_title,
    department_info.department,
    department_info.department_modified,
    department_info.department_grouping,
    department_info.division,
    department_info.division_mapped_current,
    department_info.division_grouping,
    department_info.reports_to,
    department_info.reports_to_id,
    location_factor.location_factor AS location_factor,
    location_factor.locality,
    job_role.gitlab_username,
    job_role.region,
    job_role.sales_geo_differential,
    -- to capture speciality for engineering prior to 2020.09.30 
    -- we are using sheetload, and capturing from bamboohr afterwards
    direct_reports.total_direct_reports,
    bamboohr_discretionary_bonuses_xf.total_discretionary_bonuses AS discretionary_bonus,
    COALESCE(fct_work_email.work_email, employee_directory.last_work_email) AS work_email,
    COALESCE(job_role.cost_center,
      cost_center_prior_to_bamboo.cost_center) AS cost_center,
    IFF(date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27'
      AND job_info_mapping_historical.job_role IS NOT NULL,
      job_info_mapping_historical.job_role,
      COALESCE(job_role.job_role, department_info.job_role)) AS job_role,
    IFF(date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27',
      job_info_mapping_historical.job_grade,
      job_role.job_grade) AS job_grade,
    COALESCE(
      sheetload_engineering_speciality.speciality, job_role.jobtitle_speciality
    ) AS jobtitle_speciality,
    IFF(employee_directory.hire_date = date_details.date_actual
      OR employee_directory.rehire_date = date_details.date_actual, TRUE, FALSE) AS is_hire_date,
    IFF(
      employment_status.employment_status = 'Terminated', TRUE, FALSE
    ) AS is_termination_date,
    IFF(employee_directory.rehire_date = date_details.date_actual, TRUE, FALSE) AS is_rehire_date,
    -- for the diversity KPIs we are looking to understand senior leadership
    -- representation and do so by job grade instead of role        
    IFF(
      employee_directory.hire_date < employment_status_records_check.employment_status_first_value,
      'Active', employment_status.employment_status) AS employment_status,
    CASE IFF(
           date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27'
           AND job_info_mapping_historical.job_role IS NOT NULL,
           job_info_mapping_historical.job_role,
           COALESCE(job_role.job_role, department_info.job_role))
      WHEN 'Intern'
        THEN 'Individual Contributor'
      WHEN 'Individual Contributor'
        THEN 'Individual Contributor'
      WHEN 'Manager'
        THEN 'Manager'
      WHEN 'Director'
        THEN 'Director+'
      WHEN 'Vice President'
        THEN 'Director+'
      WHEN 'Leader'
        THEN 'Director+'
      WHEN 'Chief Executive Officer'
        THEN 'Director+'
      ELSE IFF(date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27'
             AND job_info_mapping_historical.job_role IS NOT NULL,
             job_info_mapping_historical.job_role,
             COALESCE(job_role.job_role, department_info.job_role)) END AS job_role_modified,
    IFF(promotion.compensation_change_reason IS NOT NULL, TRUE, FALSE) AS is_promotion,
    ROW_NUMBER() OVER
    (PARTITION BY employee_directory.employee_id ORDER BY date_details.date_actual) AS tenure_days
  FROM date_details
  LEFT JOIN employee_directory
    ON employee_directory.hire_date::DATE <= date_details.date_actual
      AND COALESCE(
        employee_directory.termination_date::DATE, {{ max_date_in_bamboo_analyses() }}
      ) >= date_details.date_actual
      -- active employees that have been rehired will have a termination date less than 
      -- the rehire date and they need to be included while excluding those terminated after
      -- the rehire date
      OR (employee_directory.rehire_date::DATE <= date_details.date_actual
      AND IFF(employee_directory.first_inactive_date > employee_directory.rehire_date, employee_directory.first_inactive_date,
            {{ max_date_in_bamboo_analyses() }}) >= date_details.date_actual)
  LEFT JOIN department_info
    ON employee_directory.employee_id = department_info.employee_id
      AND date_details.date_actual BETWEEN department_info.effective_date
      AND COALESCE(department_info.effective_end_date::DATE, {{ max_date_in_bamboo_analyses() }})
  LEFT JOIN direct_reports
    ON direct_reports.date_actual = date_details.date_actual
      AND direct_reports.reports_to = employee_directory.full_name
  LEFT JOIN location_factor
    ON employee_directory.employee_number::VARCHAR = location_factor.bamboo_employee_number::VARCHAR
      AND location_factor.valid_from <= date_details.date_actual
      AND COALESCE(
        location_factor.valid_to::DATE, {{ max_date_in_bamboo_analyses() }}
      ) >= date_details.date_actual
  LEFT JOIN employment_status
    ON employee_directory.employee_id = employment_status.employee_id
      AND (
        date_details.date_actual = employment_status.valid_from_date
        AND employment_status.employment_status = 'Terminated'
        OR date_details.date_actual
        BETWEEN employment_status.valid_from_date AND employment_status.valid_to_date
      )
  LEFT JOIN employment_status_records_check
    ON employee_directory.employee_id = employment_status_records_check.employee_id
  LEFT JOIN cost_center_prior_to_bamboo
    ON department_info.department = cost_center_prior_to_bamboo.department
      AND department_info.division = cost_center_prior_to_bamboo.division
      AND date_details.date_actual BETWEEN cost_center_prior_to_bamboo.effective_start_date
      AND COALESCE(cost_center_prior_to_bamboo.effective_end_date, '2020-05-07')
  ---Starting 2020.05.08 we start capturing cost_center in bamboohr
  LEFT JOIN job_role
    ON employee_directory.employee_id = job_role.employee_id
      AND date_details.date_actual BETWEEN job_role.effective_date AND COALESCE(
        job_role.next_effective_date, {{ max_date_in_bamboo_analyses() }}
      )
  LEFT JOIN job_info_mapping_historical
    ON employee_directory.employee_id = job_info_mapping_historical.employee_id
      AND job_info_mapping_historical.job_title = department_info.job_title
      AND job_info_mapping_historical.job_grade_event_rank = 1
  ---tying data based on 2020-02-27 date to historical data --
  LEFT JOIN promotion
    ON promotion.employee_id = employee_directory.employee_id
      AND date_details.date_actual = promotion.effective_date
  LEFT JOIN sheetload_engineering_speciality
    ON employee_directory.employee_id = sheetload_engineering_speciality.employee_id
      AND date_details.date_actual BETWEEN sheetload_engineering_speciality.speciality_start_date
      AND COALESCE(sheetload_engineering_speciality.speciality_end_date, '2020-09-30')
  ---Post 2020.09.30 we will capture engineering speciality from bamboohr
  LEFT JOIN bamboohr_discretionary_bonuses_xf
    ON employee_directory.employee_id = bamboohr_discretionary_bonuses_xf.employee_id
      AND date_details.date_actual = bamboohr_discretionary_bonuses_xf.bonus_date
  LEFT JOIN fct_work_email
    ON employee_directory.employee_id = fct_work_email.employee_id
      AND date_details.date_actual
      BETWEEN fct_work_email.valid_from_date AND fct_work_email.valid_to_date
  WHERE employee_directory.employee_id IS NOT NULL

),

base_layers AS (

  SELECT
    date_actual,
    reports_to,
    full_name,
    ARRAY_CONSTRUCT(reports_to, full_name) AS lineage
  FROM enriched
  WHERE NULLIF(reports_to, '') IS NOT NULL
  AND full_name != reports_to -- Sid is reported as reporting to himself

),

layers (date_actual, employee, manager, lineage, layers_count
)

AS (

  SELECT
    date_actual,
    full_name AS employee,
    reports_to AS manager,
    lineage AS lineage,
    1 AS layers_count
  FROM base_layers
  WHERE manager IS NOT NULL

  UNION ALL

  SELECT
    layers.date_actual,
    base_layers.full_name AS employee,
    base_layers.reports_to AS manager,
    ARRAY_PREPEND(layers.lineage, base_layers.reports_to) AS lineage,
    (layers.layers_count + 1) AS layers_count
  FROM layers
  INNER JOIN base_layers
    ON layers.date_actual = base_layers.date_actual
      AND base_layers.reports_to = layers.employee

),

calculated_layers AS (

  SELECT
    date_actual,
    employee,
    MAX(layers_count) AS layers
  FROM layers
  GROUP BY 1, 2

)

SELECT
  enriched.*,
  COALESCE(calculated_layers.layers, 1) AS layers
FROM enriched
LEFT JOIN calculated_layers
  ON enriched.date_actual = calculated_layers.date_actual
    AND enriched.full_name = calculated_layers.employee
    AND enriched.employment_status IS NOT NULL
WHERE enriched.employment_status IS NOT NULL1b:T319f,

WITH RECURSIVE employee_directory AS (

  SELECT
    employee_id,
    employee_number,
    first_name,
    last_name,
    hire_date,
    rehire_date,
    region_modified,
    country,
    termination_date,
    first_inactive_date,
    hire_location_factor,
    last_work_email,
    (COALESCE(first_name,'') || ' ' || COALESCE(last_name,'')) AS full_name
  FROM "PREP".sensitive.employee_directory

),

date_details AS (

  SELECT *
  FROM "PROD".legacy.date_details

),

department_info AS (

  SELECT *
  FROM "PROD".legacy.bamboohr_job_info_current_division_base

),

job_role AS (

  SELECT *
  FROM "PREP".sensitive.bamboohr_job_role

),

location_factor AS (

  SELECT *
  FROM "PREP".sensitive.employee_location_factor_snapshots

),

employment_status AS (

  SELECT *
  FROM "PREP".sensitive.bamboohr_employment_status_xf

),

promotion AS (

  SELECT
    employee_id,
    effective_date,
    compensation_change_reason
  FROM "PREP".workday.blended_compensation_source
  WHERE compensation_change_reason = 'Promotion'
  GROUP BY 1, 2, 3

),

direct_reports AS (

  SELECT
    date_actual,
    reports_to,
    COUNT(employee_id) AS total_direct_reports
  FROM (
      SELECT
        date_details.date_actual,
        employee_directory.employee_id,
        department_info.reports_to
      FROM date_details
      LEFT JOIN employee_directory
        ON employee_directory.hire_date::DATE <= date_details.date_actual
          AND COALESCE(
            employee_directory.first_inactive_date::DATE, date_trunc('week', dateadd(week, 3, CURRENT_DATE))
          ) >= date_details.date_actual
      LEFT JOIN department_info
        ON employee_directory.employee_id = department_info.employee_id
          AND date_details.date_actual BETWEEN department_info.effective_date
          AND COALESCE(department_info.effective_end_date, date_trunc('week', dateadd(week, 3, CURRENT_DATE)))
    )
  GROUP BY 1, 2
  HAVING total_direct_reports > 0

),

job_info_mapping_historical AS (

  SELECT
    department_info.employee_id,
    department_info.job_title,
    IFF(
      department_info.job_title = 'Manager, Field Marketing',
      'Leader',
      COALESCE(job_role.job_role, department_info.job_role)
    ) AS job_role,
    CASE WHEN department_info.job_title = 'Group Manager, Product'
      THEN '9.5'
      WHEN department_info.job_title = 'Manager, Field Marketing'
        THEN '8'
      ELSE job_role.job_grade END AS job_grade,
    ROW_NUMBER() OVER (
      PARTITION BY department_info.employee_id ORDER BY date_details.date_actual
    ) AS job_grade_event_rank
  FROM date_details
  LEFT JOIN department_info
    ON
      date_details.date_actual BETWEEN department_info.effective_date AND COALESCE(
        department_info.effective_end_date, date_trunc('week', dateadd(week, 3, CURRENT_DATE))
      )
  LEFT JOIN job_role
    ON job_role.employee_id = department_info.employee_id
      AND date_details.date_actual BETWEEN job_role.effective_date AND COALESCE(
        job_role.next_effective_date, date_trunc('week', dateadd(week, 3, CURRENT_DATE))
      )
  WHERE job_role.job_grade IS NOT NULL
    -- Using the 1st time we captured job_role and grade
    -- to identify classification for historical records

),

employment_status_records_check AS (

  SELECT
    employee_id,
    MIN(valid_from_date) AS employment_status_first_value
  FROM "PREP".sensitive.bamboohr_employment_status_xf
  GROUP BY 1

),

cost_center_prior_to_bamboo AS (

  SELECT *
  FROM "PROD".legacy.cost_center_division_department_mapping

),

sheetload_engineering_speciality AS (

  SELECT *
  FROM "PROD".legacy.sheetload_engineering_speciality_prior_to_capture

),

bamboohr_discretionary_bonuses_xf AS (

  SELECT *
  FROM "PREP".sensitive.bamboohr_directionary_bonuses_xf

),

fct_work_email AS (

  SELECT *
  FROM "PROD".legacy.bamboohr_work_email

),

enriched AS (

  SELECT
    employee_directory.*,
    date_details.date_actual,
    department_info.job_title,
    department_info.department,
    department_info.department_modified,
    department_info.department_grouping,
    department_info.division,
    department_info.division_mapped_current,
    department_info.division_grouping,
    department_info.reports_to,
    department_info.reports_to_id,
    location_factor.location_factor AS location_factor,
    location_factor.locality,
    job_role.gitlab_username,
    job_role.region,
    job_role.sales_geo_differential,
    -- to capture speciality for engineering prior to 2020.09.30 
    -- we are using sheetload, and capturing from bamboohr afterwards
    direct_reports.total_direct_reports,
    bamboohr_discretionary_bonuses_xf.total_discretionary_bonuses AS discretionary_bonus,
    COALESCE(fct_work_email.work_email, employee_directory.last_work_email) AS work_email,
    COALESCE(job_role.cost_center,
      cost_center_prior_to_bamboo.cost_center) AS cost_center,
    IFF(date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27'
      AND job_info_mapping_historical.job_role IS NOT NULL,
      job_info_mapping_historical.job_role,
      COALESCE(job_role.job_role, department_info.job_role)) AS job_role,
    IFF(date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27',
      job_info_mapping_historical.job_grade,
      job_role.job_grade) AS job_grade,
    COALESCE(
      sheetload_engineering_speciality.speciality, job_role.jobtitle_speciality
    ) AS jobtitle_speciality,
    IFF(employee_directory.hire_date = date_details.date_actual
      OR employee_directory.rehire_date = date_details.date_actual, TRUE, FALSE) AS is_hire_date,
    IFF(
      employment_status.employment_status = 'Terminated', TRUE, FALSE
    ) AS is_termination_date,
    IFF(employee_directory.rehire_date = date_details.date_actual, TRUE, FALSE) AS is_rehire_date,
    -- for the diversity KPIs we are looking to understand senior leadership
    -- representation and do so by job grade instead of role        
    IFF(
      employee_directory.hire_date < employment_status_records_check.employment_status_first_value,
      'Active', employment_status.employment_status) AS employment_status,
    CASE IFF(
           date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27'
           AND job_info_mapping_historical.job_role IS NOT NULL,
           job_info_mapping_historical.job_role,
           COALESCE(job_role.job_role, department_info.job_role))
      WHEN 'Intern'
        THEN 'Individual Contributor'
      WHEN 'Individual Contributor'
        THEN 'Individual Contributor'
      WHEN 'Manager'
        THEN 'Manager'
      WHEN 'Director'
        THEN 'Director+'
      WHEN 'Vice President'
        THEN 'Director+'
      WHEN 'Leader'
        THEN 'Director+'
      WHEN 'Chief Executive Officer'
        THEN 'Director+'
      ELSE IFF(date_details.date_actual BETWEEN '2019-11-01' AND '2020-02-27'
             AND job_info_mapping_historical.job_role IS NOT NULL,
             job_info_mapping_historical.job_role,
             COALESCE(job_role.job_role, department_info.job_role)) END AS job_role_modified,
    IFF(promotion.compensation_change_reason IS NOT NULL, TRUE, FALSE) AS is_promotion,
    ROW_NUMBER() OVER
    (PARTITION BY employee_directory.employee_id ORDER BY date_details.date_actual) AS tenure_days
  FROM date_details
  LEFT JOIN employee_directory
    ON employee_directory.hire_date::DATE <= date_details.date_actual
      AND COALESCE(
        employee_directory.termination_date::DATE, date_trunc('week', dateadd(week, 3, CURRENT_DATE))
      ) >= date_details.date_actual
      -- active employees that have been rehired will have a termination date less than 
      -- the rehire date and they need to be included while excluding those terminated after
      -- the rehire date
      OR (employee_directory.rehire_date::DATE <= date_details.date_actual
      AND IFF(employee_directory.first_inactive_date > employee_directory.rehire_date, employee_directory.first_inactive_date,
            date_trunc('week', dateadd(week, 3, CURRENT_DATE))) >= date_details.date_actual)
  LEFT JOIN department_info
    ON employee_directory.employee_id = department_info.employee_id
      AND date_details.date_actual BETWEEN department_info.effective_date
      AND COALESCE(department_info.effective_end_date::DATE, date_trunc('week', dateadd(week, 3, CURRENT_DATE)))
  LEFT JOIN direct_reports
    ON direct_reports.date_actual = date_details.date_actual
      AND direct_reports.reports_to = employee_directory.full_name
  LEFT JOIN location_factor
    ON employee_directory.employee_number::VARCHAR = location_factor.bamboo_employee_number::VARCHAR
      AND location_factor.valid_from <= date_details.date_actual
      AND COALESCE(
        location_factor.valid_to::DATE, date_trunc('week', dateadd(week, 3, CURRENT_DATE))
      ) >= date_details.date_actual
  LEFT JOIN employment_status
    ON employee_directory.employee_id = employment_status.employee_id
      AND (
        date_details.date_actual = employment_status.valid_from_date
        AND employment_status.employment_status = 'Terminated'
        OR date_details.date_actual
        BETWEEN employment_status.valid_from_date AND employment_status.valid_to_date
      )
  LEFT JOIN employment_status_records_check
    ON employee_directory.employee_id = employment_status_records_check.employee_id
  LEFT JOIN cost_center_prior_to_bamboo
    ON department_info.department = cost_center_prior_to_bamboo.department
      AND department_info.division = cost_center_prior_to_bamboo.division
      AND date_details.date_actual BETWEEN cost_center_prior_to_bamboo.effective_start_date
      AND COALESCE(cost_center_prior_to_bamboo.effective_end_date, '2020-05-07')
  ---Starting 2020.05.08 we start capturing cost_center in bamboohr
  LEFT JOIN job_role
    ON employee_directory.employee_id = job_role.employee_id
      AND date_details.date_actual BETWEEN job_role.effective_date AND COALESCE(
        job_role.next_effective_date, date_trunc('week', dateadd(week, 3, CURRENT_DATE))
      )
  LEFT JOIN job_info_mapping_historical
    ON employee_directory.employee_id = job_info_mapping_historical.employee_id
      AND job_info_mapping_historical.job_title = department_info.job_title
      AND job_info_mapping_historical.job_grade_event_rank = 1
  ---tying data based on 2020-02-27 date to historical data --
  LEFT JOIN promotion
    ON promotion.employee_id = employee_directory.employee_id
      AND date_details.date_actual = promotion.effective_date
  LEFT JOIN sheetload_engineering_speciality
    ON employee_directory.employee_id = sheetload_engineering_speciality.employee_id
      AND date_details.date_actual BETWEEN sheetload_engineering_speciality.speciality_start_date
      AND COALESCE(sheetload_engineering_speciality.speciality_end_date, '2020-09-30')
  ---Post 2020.09.30 we will capture engineering speciality from bamboohr
  LEFT JOIN bamboohr_discretionary_bonuses_xf
    ON employee_directory.employee_id = bamboohr_discretionary_bonuses_xf.employee_id
      AND date_details.date_actual = bamboohr_discretionary_bonuses_xf.bonus_date
  LEFT JOIN fct_work_email
    ON employee_directory.employee_id = fct_work_email.employee_id
      AND date_details.date_actual
      BETWEEN fct_work_email.valid_from_date AND fct_work_email.valid_to_date
  WHERE employee_directory.employee_id IS NOT NULL

),

base_layers AS (

  SELECT
    date_actual,
    reports_to,
    full_name,
    ARRAY_CONSTRUCT(reports_to, full_name) AS lineage
  FROM enriched
  WHERE NULLIF(reports_to, '') IS NOT NULL
  AND full_name != reports_to -- Sid is reported as reporting to himself

),

layers (date_actual, employee, manager, lineage, layers_count
)

AS (

  SELECT
    date_actual,
    full_name AS employee,
    reports_to AS manager,
    lineage AS lineage,
    1 AS layers_count
  FROM base_layers
  WHERE manager IS NOT NULL

  UNION ALL

  SELECT
    layers.date_actual,
    base_layers.full_name AS employee,
    base_layers.reports_to AS manager,
    ARRAY_PREPEND(layers.lineage, base_layers.reports_to) AS lineage,
    (layers.layers_count + 1) AS layers_count
  FROM layers
  INNER JOIN base_layers
    ON layers.date_actual = base_layers.date_actual
      AND base_layers.reports_to = layers.employee

),

calculated_layers AS (

  SELECT
    date_actual,
    employee,
    MAX(layers_count) AS layers
  FROM layers
  GROUP BY 1, 2

)

SELECT
  enriched.*,
  COALESCE(calculated_layers.layers, 1) AS layers
FROM enriched
LEFT JOIN calculated_layers
  ON enriched.date_actual = calculated_layers.date_actual
    AND enriched.full_name = calculated_layers.employee
    AND enriched.employment_status IS NOT NULL
WHERE enriched.employment_status IS NOT NULL1c:T1438,{% set repeated_column_names = 
    "greenhouse_recruiting_xf.application_id,
      department_name::VARCHAR(100)                                                 AS department_name,
      division::VARCHAR(100)                                                        AS division,
      division_modified::VARCHAR(100)                                               AS division_modified,
      source_type::VARCHAR(100)                                                     AS source_type,
      CASE WHEN eeoc_values in ('I don''t wish to answer','Decline To Self Identify') 
            THEN 'did not identify'
           WHEN eeoc_values = 'No, I don''t have a disability' 
            THEN 'No' 
            ELSE COALESCE(lower(eeoc_values), 'did not identify') end                AS eeoc_values
" %}

WITH date_details AS (
  
    SELECT 
      date_actual                                                          AS month_date,                               
      'join'                                                               AS join_field  
    FROM {{ ref ('date_details') }}
    WHERE date_actual <= {{max_date_in_bamboo_analyses()}}
      AND day_of_month = 1 
      AND date_actual >= '2018-08-12' -- 1st date we started capturing eeoc data

), greenhouse_recruiting_xf AS (

    SELECT *
    FROM  {{ ref ('greenhouse_recruiting_xf') }}

), eeoc AS (

      {{ dbt_utils.unpivot(
      relation=ref('greenhouse_eeoc_responses_source'),
      cast_to='varchar',
      exclude=['application_id'],
      remove=['eeoc_response_submitted_at'],
      field_name='eeoc_field_name',
      value_name='eeoc_values'
      ) }}

), eeoc_fields AS (

    SELECT DISTINCT 
      LOWER(eeoc_field_name)::VARCHAR(100)             AS eeoc_field_name,
      'join'                                           AS join_field
    FROM eeoc

), base AS (

    SELECT
      month_date,
      eeoc_field_name
    FROM date_details
    LEFT JOIN eeoc_fields 
      ON eeoc_fields.join_field = date_details.join_field  
  
    UNION ALL

    SELECT
      month_date,
      'no_eeoc' AS eeoc_field_name
    FROM date_details
    

), applications AS (

    SELECT 
      base.*,
      'application_month'                                                               AS capture_month,
      {{repeated_column_names}},
      IFF(offer_status = 'accepted',1,0)                                                AS accepted_offer,
      null                                                                              AS time_to_offer,
      IFF(sourced_candidate = TRUE, 1,0)                                                AS sourced_candidate,
      IFF(sourced_candidate = TRUE AND offer_status = 'accepted', 1,0)                  AS hired_sourced_candidate
    FROM base
    LEFT JOIN greenhouse_recruiting_xf
      ON DATE_TRUNC('month',greenhouse_recruiting_xf.application_date) = base.month_date
    LEFT JOIN eeoc            
      ON greenhouse_recruiting_xf.application_id = eeoc.application_id
      AND LOWER(eeoc.eeoc_field_name) = base.eeoc_field_name  


), offers AS (

    SELECT 
      base.*,
      'offer_sent_month'                                                               AS capture_month,
      {{repeated_column_names}},
      IFF(offer_status = 'accepted',1,0)                                                AS accepted_offer,
      null                                                                              AS time_to_offer,
      IFF(sourced_candidate = TRUE, 1,0)                                                AS sourced_candidate,
      IFF(sourced_candidate = TRUE AND offer_status = 'accepted', 1,0)                  AS hired_sourced_candidate
    FROM base
    LEFT JOIN greenhouse_recruiting_xf
      ON DATE_TRUNC('month',greenhouse_recruiting_xf.offer_sent_date) = base.month_date
    LEFT JOIN eeoc            
      ON greenhouse_recruiting_xf.application_id = eeoc.application_id
      AND LOWER(eeoc.eeoc_field_name) = base.eeoc_field_name 
    WHERE offer_status IS NOT NULL
 
), accepted AS (

    SELECT 
      base.*,
      'accepted_month'                                                                  AS capture_month,
      {{repeated_column_names}},
      IFF(offer_status = 'accepted',1,0)                                                AS accepted_offer,
      time_to_offer,
      IFF(sourced_candidate = TRUE, 1,0)                                                AS sourced_candidate,
      IFF(sourced_candidate = TRUE AND offer_status = 'accepted', 1,0)                  AS hired_sourced_candidate                           
    FROM base
    LEFT JOIN greenhouse_recruiting_xf
      ON DATE_TRUNC('month',greenhouse_recruiting_xf.offer_resolved_date) = base.month_date
    LEFT JOIN eeoc            
      ON greenhouse_recruiting_xf.application_id = eeoc.application_id
      AND LOWER(eeoc.eeoc_field_name) = base.eeoc_field_name 
    WHERE base.month_date >= '2018-09-01' -- 1st date we started capturing eeoc data
      AND offer_status ='accepted'

), final AS (

    SELECT * 
    FROM applications

    UNION ALL

    SELECT * 
    FROM offers

    UNION ALL

    SELECT *
    FROM accepted 

) 

SELECT * 
FROM final1d:T1e35,

WITH date_details AS (
  
    SELECT 
      date_actual                                                          AS month_date,                               
      'join'                                                               AS join_field  
    FROM "PROD".legacy.date_details
    WHERE date_actual <= date_trunc('week', dateadd(week, 3, CURRENT_DATE))
      AND day_of_month = 1 
      AND date_actual >= '2018-08-12' -- 1st date we started capturing eeoc data

), greenhouse_recruiting_xf AS (

    SELECT *
    FROM  "PREP".sensitive.greenhouse_recruiting_xf

), eeoc AS (

      

    select
        application_id,

      cast('CANDIDATE_STATUS' as 
    varchar
) as eeoc_field_name,
      cast(  
           CANDIDATE_STATUS
             
           as varchar) as eeoc_values

    from "PREP".greenhouse.greenhouse_eeoc_responses_source

    union all
    select
        application_id,

      cast('CANDIDATE_RACE' as 
    varchar
) as eeoc_field_name,
      cast(  
           CANDIDATE_RACE
             
           as varchar) as eeoc_values

    from "PREP".greenhouse.greenhouse_eeoc_responses_source

    union all
    select
        application_id,

      cast('CANDIDATE_GENDER' as 
    varchar
) as eeoc_field_name,
      cast(  
           CANDIDATE_GENDER
             
           as varchar) as eeoc_values

    from "PREP".greenhouse.greenhouse_eeoc_responses_source

    union all
    select
        application_id,

      cast('CANDIDATE_DISABILITY_STATUS' as 
    varchar
) as eeoc_field_name,
      cast(  
           CANDIDATE_DISABILITY_STATUS
             
           as varchar) as eeoc_values

    from "PREP".greenhouse.greenhouse_eeoc_responses_source

    union all
    select
        application_id,

      cast('CANDIDATE_VETERAN_STATUS' as 
    varchar
) as eeoc_field_name,
      cast(  
           CANDIDATE_VETERAN_STATUS
             
           as varchar) as eeoc_values

    from "PREP".greenhouse.greenhouse_eeoc_responses_source

    

), eeoc_fields AS (

    SELECT DISTINCT 
      LOWER(eeoc_field_name)::VARCHAR(100)             AS eeoc_field_name,
      'join'                                           AS join_field
    FROM eeoc

), base AS (

    SELECT
      month_date,
      eeoc_field_name
    FROM date_details
    LEFT JOIN eeoc_fields 
      ON eeoc_fields.join_field = date_details.join_field  
  
    UNION ALL

    SELECT
      month_date,
      'no_eeoc' AS eeoc_field_name
    FROM date_details
    

), applications AS (

    SELECT 
      base.*,
      'application_month'                                                               AS capture_month,
      greenhouse_recruiting_xf.application_id,
      department_name::VARCHAR(100)                                                 AS department_name,
      division::VARCHAR(100)                                                        AS division,
      division_modified::VARCHAR(100)                                               AS division_modified,
      source_type::VARCHAR(100)                                                     AS source_type,
      CASE WHEN eeoc_values in ('I don''t wish to answer','Decline To Self Identify') 
            THEN 'did not identify'
           WHEN eeoc_values = 'No, I don''t have a disability' 
            THEN 'No' 
            ELSE COALESCE(lower(eeoc_values), 'did not identify') end                AS eeoc_values
,
      IFF(offer_status = 'accepted',1,0)                                                AS accepted_offer,
      null                                                                              AS time_to_offer,
      IFF(sourced_candidate = TRUE, 1,0)                                                AS sourced_candidate,
      IFF(sourced_candidate = TRUE AND offer_status = 'accepted', 1,0)                  AS hired_sourced_candidate
    FROM base
    LEFT JOIN greenhouse_recruiting_xf
      ON DATE_TRUNC('month',greenhouse_recruiting_xf.application_date) = base.month_date
    LEFT JOIN eeoc            
      ON greenhouse_recruiting_xf.application_id = eeoc.application_id
      AND LOWER(eeoc.eeoc_field_name) = base.eeoc_field_name  


), offers AS (

    SELECT 
      base.*,
      'offer_sent_month'                                                               AS capture_month,
      greenhouse_recruiting_xf.application_id,
      department_name::VARCHAR(100)                                                 AS department_name,
      division::VARCHAR(100)                                                        AS division,
      division_modified::VARCHAR(100)                                               AS division_modified,
      source_type::VARCHAR(100)                                                     AS source_type,
      CASE WHEN eeoc_values in ('I don''t wish to answer','Decline To Self Identify') 
            THEN 'did not identify'
           WHEN eeoc_values = 'No, I don''t have a disability' 
            THEN 'No' 
            ELSE COALESCE(lower(eeoc_values), 'did not identify') end                AS eeoc_values
,
      IFF(offer_status = 'accepted',1,0)                                                AS accepted_offer,
      null                                                                              AS time_to_offer,
      IFF(sourced_candidate = TRUE, 1,0)                                                AS sourced_candidate,
      IFF(sourced_candidate = TRUE AND offer_status = 'accepted', 1,0)                  AS hired_sourced_candidate
    FROM base
    LEFT JOIN greenhouse_recruiting_xf
      ON DATE_TRUNC('month',greenhouse_recruiting_xf.offer_sent_date) = base.month_date
    LEFT JOIN eeoc            
      ON greenhouse_recruiting_xf.application_id = eeoc.application_id
      AND LOWER(eeoc.eeoc_field_name) = base.eeoc_field_name 
    WHERE offer_status IS NOT NULL
 
), accepted AS (

    SELECT 
      base.*,
      'accepted_month'                                                                  AS capture_month,
      greenhouse_recruiting_xf.application_id,
      department_name::VARCHAR(100)                                                 AS department_name,
      division::VARCHAR(100)                                                        AS division,
      division_modified::VARCHAR(100)                                               AS division_modified,
      source_type::VARCHAR(100)                                                     AS source_type,
      CASE WHEN eeoc_values in ('I don''t wish to answer','Decline To Self Identify') 
            THEN 'did not identify'
           WHEN eeoc_values = 'No, I don''t have a disability' 
            THEN 'No' 
            ELSE COALESCE(lower(eeoc_values), 'did not identify') end                AS eeoc_values
,
      IFF(offer_status = 'accepted',1,0)                                                AS accepted_offer,
      time_to_offer,
      IFF(sourced_candidate = TRUE, 1,0)                                                AS sourced_candidate,
      IFF(sourced_candidate = TRUE AND offer_status = 'accepted', 1,0)                  AS hired_sourced_candidate                           
    FROM base
    LEFT JOIN greenhouse_recruiting_xf
      ON DATE_TRUNC('month',greenhouse_recruiting_xf.offer_resolved_date) = base.month_date
    LEFT JOIN eeoc            
      ON greenhouse_recruiting_xf.application_id = eeoc.application_id
      AND LOWER(eeoc.eeoc_field_name) = base.eeoc_field_name 
    WHERE base.month_date >= '2018-09-01' -- 1st date we started capturing eeoc data
      AND offer_status ='accepted'

), final AS (

    SELECT * 
    FROM applications

    UNION ALL

    SELECT * 
    FROM offers

    UNION ALL

    SELECT *
    FROM accepted 

) 

SELECT * 
FROM final1e:T4c6,WITH sourcer_metrics AS (

    SELECT 
      month_date,                                  
      sourcer_name,
      prospected,
      prospect_to_review,
      prospect_to_screen,
      app_reviewed,
      review_to_screen,
      screen,
      screen_to_interview,
      screen_to_hire,
      candidate_dropout
    FROM {{ ref ('greenhouse_sourcer_metrics') }} sourcer_metrics 
    WHERE part_of_recruiting_team = 1

), time_period AS (

    SELECT DISTINCT
      date_actual                                   AS reporting_month,
      DATEADD(month,-3,date_actual)                 AS start_period,    
      DATEADD(month,-1,date_actual)                 AS end_period          
    FROM {{ ref('date_details') }}
    WHERE day_of_month = 1
      AND date_actual BETWEEN DATE_TRUNC(month,DATEADD(month,-15,CURRENT_DATE())) AND DATE_TRUNC(month,CURRENT_DATE())
  
), three_month_rolling AS (

    SELECT 
      time_period.reporting_month,
      time_period.start_period,
      time_period.end_period,
      sourcer_metrics.*
    FROM time_period
    LEFT JOIN sourcer_metrics       
        ON sourcer_metrics.month_date BETWEEN time_period.start_period AND time_period.end_period
   
)

SELECT *
FROM three_month_rolling1f:T4ca,WITH sourcer_metrics AS (

    SELECT 
      month_date,                                  
      sourcer_name,
      prospected,
      prospect_to_review,
      prospect_to_screen,
      app_reviewed,
      review_to_screen,
      screen,
      screen_to_interview,
      screen_to_hire,
      candidate_dropout
    FROM "PREP".sensitive.greenhouse_sourcer_metrics sourcer_metrics 
    WHERE part_of_recruiting_team = 1

), time_period AS (

    SELECT DISTINCT
      date_actual                                   AS reporting_month,
      DATEADD(month,-3,date_actual)                 AS start_period,    
      DATEADD(month,-1,date_actual)                 AS end_period          
    FROM "PROD".legacy.date_details
    WHERE day_of_month = 1
      AND date_actual BETWEEN DATE_TRUNC(month,DATEADD(month,-15,CURRENT_DATE())) AND DATE_TRUNC(month,CURRENT_DATE())
  
), three_month_rolling AS (

    SELECT 
      time_period.reporting_month,
      time_period.start_period,
      time_period.end_period,
      sourcer_metrics.*
    FROM time_period
    LEFT JOIN sourcer_metrics       
        ON sourcer_metrics.month_date BETWEEN time_period.start_period AND time_period.end_period
   
)

SELECT *
FROM three_month_rolling20:T1378,WITH date_details AS (

    SELECT 
      date_actual   AS month_date,                             
      1             AS join_field  
    FROM {{ ref ('date_details') }}
    WHERE date_actual BETWEEN DATE_TRUNC(month, DATEADD(month,-5,CURRENT_DATE())) AND CURRENT_DATE()
      AND day_of_month = 1 

), recruiting_team AS (

    SELECT DISTINCT 
      DATE_TRUNC(month, date_actual)            AS month_date,
      full_name,
      department
    FROM {{ ref ('employee_directory_analysis') }}
    WHERE department LIKE '%Recruiting%'
      AND date_actual BETWEEN DATE_TRUNC(month, DATEADD(month, -12,CURRENT_DATE())) AND DATE_TRUNC(month, CURRENT_DATE())

), recruiting_data AS (
    
    SELECT *,
      1 AS join_field
    FROM {{ ref ('greenhouse_stage_analysis') }}
    WHERE sourcer_name IS NOT NULL
      AND source_type = 'Prospecting'

), base AS (

    SELECT 
      date_details.month_date,
      recruiting_data.sourcer_name,
      IFF(recruiting_team.full_name IS NOT NULL, 1,0)       AS part_of_recruiting_team
    FROM date_details
    LEFT JOIN recruiting_data
      ON date_details.join_field = recruiting_data.join_field
    LEFT JOIN recruiting_team
      ON date_details.month_date = recruiting_team.month_date
      AND recruiting_data.sourcer_name = recruiting_team.full_name
    GROUP BY 1,2,3

), metrics AS (

    SELECT 
      month_date,
      base.sourcer_name,
      base.part_of_recruiting_team,
      SUM(IFF(application_stage = 'Application Submitted',1,0))                                                             AS prospected,
      IFF(prospected = 0, NULL, 
            (SUM(IFF(application_stage = 'Application Submitted',hit_application_review,0))/ prospected))                   AS prospect_to_review,
      IFF(prospected = 0, NULL, (SUM(IFF(application_stage = 'Application Submitted', hit_screening,0))/prospected))        AS prospect_to_screen,
      
      IFF(prospected = 0, NULL, SUM(IFF(application_stage = 'Application Submitted',hit_hired,0))/prospected)               AS prospect_to_hire,
      IFF(prospected = 0, NULL,  SUM(IFF(application_stage = 'Application Submitted', candidate_dropout,0))/prospected)     AS prospect_to_dropout,

      SUM(IFF(application_stage = 'Application Review',1,0))                                                                AS app_reviewed,
      IFF(app_reviewed = 0, NULL, (SUM(IFF(application_stage = 'Application Review', hit_screening,0))/app_reviewed))       AS review_to_screen,
      IFF(app_reviewed = 0, NULL, SUM(IFF(application_stage = 'Application Review', hit_hired,0))/app_reviewed)             AS review_to_hire,
  

      SUM(IFF(application_stage = 'Screen',1,0))                                                                            AS screen,
      IFF(screen = 0, NULL, SUM(IFF(application_stage = 'Screen', hit_team_interview,0))/screen)                            AS screen_to_interview,
      IFF(screen = 0, NULL, SUM(IFF(application_stage = 'Screen', hit_hired,0))/screen)                                     AS screen_to_hire,
  

      SUM(IFF(application_stage = 'Team Interview - Face to Face',1,0))                                                     AS team_interview,
      IFF(team_interview = 0, NULL, 
            SUM(IFF(application_stage = 'Team Interview - Face to Face', hit_hired,0))/team_interview)                      AS interview_to_hire,
      IFF(team_interview = 0, NULL, 
            SUM(IFF(application_stage = 'Team Interview - Face to Face', hit_rejected,0))/team_interview)                   AS interview_to_reject,

      SUM(IFF(application_stage = 'Executive Interview',1,0))                                                               AS executive_interview,
      IFF(executive_interview = 0, NULL, 
            SUM(IFF(application_stage = 'Executive Interview', hit_hired,0))/executive_interview)                           AS exec_interview_to_hire,
    
      SUM(IFF(application_stage = 'Reference Check',1,0))                                                                   AS reference_check,

      SUM(IFF(application_stage = 'Rejected', candidate_dropout,0))                                                         AS candidate_dropout,

      SUM(IFF(application_stage = 'Offer',1,0))                                                                             AS offer,
      IFF(offer = 0, NULL, SUM(IFF(application_stage  ='Offer',hit_hired,0))/offer)                                         AS ofer_to_hire,

      SUM(IFF(application_stage = 'Hired',1,0))                                                                             AS hired, 

      MEDIAN(IFF(application_stage = 'Hired', time_to_offer, NULL))                                                         AS time_to_offer_median
    FROM base
    LEFT JOIN recruiting_data
      ON base.month_date = recruiting_data.month_stage_entered_on
      AND base.sourcer_name = recruiting_data.sourcer_name
    GROUP BY 1,2,3
  
)

SELECT *
FROM metrics21:T1378,WITH date_details AS (

    SELECT 
      date_actual   AS month_date,                             
      1             AS join_field  
    FROM "PROD".legacy.date_details
    WHERE date_actual BETWEEN DATE_TRUNC(month, DATEADD(month,-5,CURRENT_DATE())) AND CURRENT_DATE()
      AND day_of_month = 1 

), recruiting_team AS (

    SELECT DISTINCT 
      DATE_TRUNC(month, date_actual)            AS month_date,
      full_name,
      department
    FROM "PROD".legacy.employee_directory_analysis
    WHERE department LIKE '%Recruiting%'
      AND date_actual BETWEEN DATE_TRUNC(month, DATEADD(month, -12,CURRENT_DATE())) AND DATE_TRUNC(month, CURRENT_DATE())

), recruiting_data AS (
    
    SELECT *,
      1 AS join_field
    FROM "PROD".legacy.greenhouse_stage_analysis
    WHERE sourcer_name IS NOT NULL
      AND source_type = 'Prospecting'

), base AS (

    SELECT 
      date_details.month_date,
      recruiting_data.sourcer_name,
      IFF(recruiting_team.full_name IS NOT NULL, 1,0)       AS part_of_recruiting_team
    FROM date_details
    LEFT JOIN recruiting_data
      ON date_details.join_field = recruiting_data.join_field
    LEFT JOIN recruiting_team
      ON date_details.month_date = recruiting_team.month_date
      AND recruiting_data.sourcer_name = recruiting_team.full_name
    GROUP BY 1,2,3

), metrics AS (

    SELECT 
      month_date,
      base.sourcer_name,
      base.part_of_recruiting_team,
      SUM(IFF(application_stage = 'Application Submitted',1,0))                                                             AS prospected,
      IFF(prospected = 0, NULL, 
            (SUM(IFF(application_stage = 'Application Submitted',hit_application_review,0))/ prospected))                   AS prospect_to_review,
      IFF(prospected = 0, NULL, (SUM(IFF(application_stage = 'Application Submitted', hit_screening,0))/prospected))        AS prospect_to_screen,
      
      IFF(prospected = 0, NULL, SUM(IFF(application_stage = 'Application Submitted',hit_hired,0))/prospected)               AS prospect_to_hire,
      IFF(prospected = 0, NULL,  SUM(IFF(application_stage = 'Application Submitted', candidate_dropout,0))/prospected)     AS prospect_to_dropout,

      SUM(IFF(application_stage = 'Application Review',1,0))                                                                AS app_reviewed,
      IFF(app_reviewed = 0, NULL, (SUM(IFF(application_stage = 'Application Review', hit_screening,0))/app_reviewed))       AS review_to_screen,
      IFF(app_reviewed = 0, NULL, SUM(IFF(application_stage = 'Application Review', hit_hired,0))/app_reviewed)             AS review_to_hire,
  

      SUM(IFF(application_stage = 'Screen',1,0))                                                                            AS screen,
      IFF(screen = 0, NULL, SUM(IFF(application_stage = 'Screen', hit_team_interview,0))/screen)                            AS screen_to_interview,
      IFF(screen = 0, NULL, SUM(IFF(application_stage = 'Screen', hit_hired,0))/screen)                                     AS screen_to_hire,
  

      SUM(IFF(application_stage = 'Team Interview - Face to Face',1,0))                                                     AS team_interview,
      IFF(team_interview = 0, NULL, 
            SUM(IFF(application_stage = 'Team Interview - Face to Face', hit_hired,0))/team_interview)                      AS interview_to_hire,
      IFF(team_interview = 0, NULL, 
            SUM(IFF(application_stage = 'Team Interview - Face to Face', hit_rejected,0))/team_interview)                   AS interview_to_reject,

      SUM(IFF(application_stage = 'Executive Interview',1,0))                                                               AS executive_interview,
      IFF(executive_interview = 0, NULL, 
            SUM(IFF(application_stage = 'Executive Interview', hit_hired,0))/executive_interview)                           AS exec_interview_to_hire,
    
      SUM(IFF(application_stage = 'Reference Check',1,0))                                                                   AS reference_check,

      SUM(IFF(application_stage = 'Rejected', candidate_dropout,0))                                                         AS candidate_dropout,

      SUM(IFF(application_stage = 'Offer',1,0))                                                                             AS offer,
      IFF(offer = 0, NULL, SUM(IFF(application_stage  ='Offer',hit_hired,0))/offer)                                         AS ofer_to_hire,

      SUM(IFF(application_stage = 'Hired',1,0))                                                                             AS hired, 

      MEDIAN(IFF(application_stage = 'Hired', time_to_offer, NULL))                                                         AS time_to_offer_median
    FROM base
    LEFT JOIN recruiting_data
      ON base.month_date = recruiting_data.month_stage_entered_on
      AND base.sourcer_name = recruiting_data.sourcer_name
    GROUP BY 1,2,3
  
)

SELECT *
FROM metrics22:T16cb,WITH date_table AS (

    SELECT *
    FROM {{ ref('date_details') }}
    WHERE day_of_month = 1

), zuora_accts AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE

), zuora_acct_period AS (

    SELECT *
    FROM {{ ref('zuora_accounting_period_source') }}

), zuora_contact AS (

    SELECT *
    FROM {{ ref('zuora_contact_source') }}
    WHERE is_deleted = FALSE

), zuora_product AS (

    SELECT *
    FROM {{ ref('zuora_product_source') }}
    WHERE is_deleted = FALSE

), zuora_rp AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}
    WHERE is_deleted = FALSE

), zuora_rpc AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), base_mrr AS (

    SELECT
      --primary key
      zuora_rpc.rate_plan_charge_id,

      --account info
      zuora_accts.account_id,
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --subscription info
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,

      --rate_plan info
      zuora_rpc.product_rate_plan_charge_id,
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      zuora_rpc.rate_plan_charge_number,
      zuora_rpc.unit_of_measure,
      zuora_rpc.quantity,
      zuora_rpc.mrr,
      zuora_rpc.charge_type,

      --date info
      date_trunc('month', zuora_subscription.subscription_start_date::DATE)     AS sub_start_month,
      date_trunc('month', zuora_subscription.subscription_end_date::DATE)       AS sub_end_month,
      subscription_start_date::DATE                                             AS subscription_start_date,
      subscription_end_date::DATE                                               AS subscription_end_date,
      zuora_rpc.effective_start_month,
      zuora_rpc.effective_end_month,
      zuora_rpc.effective_start_date::DATE                                      AS effective_start_date,
      zuora_rpc.effective_end_date::DATE                                        AS effective_end_date
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rpc.product_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND zuora_rpc.charge_type = 'Recurring'
      AND mrr != 0

), month_base_mrr AS (

    SELECT
      date_actual                               AS mrr_month,
      account_number,
      crm_id,
      account_name,
      account_id,
      subscription_id,
      subscription_name_slugify,
      sub_start_month,
      sub_end_month,
      subscription_start_date,
      subscription_end_date,
      effective_start_month,
      effective_end_month,
      effective_start_date,
      effective_end_date,
      country,
      {{product_category('rate_plan_name')}},
      {{ delivery('product_category')}},
      CASE
        WHEN lower(rate_plan_name) like '%support%'
          THEN 'Support Only'
        ELSE 'Full Service'
      END                                       AS service_type,
      product_rate_plan_charge_id,
      rate_plan_name,
      rate_plan_charge_name,
      charge_type,
      unit_of_measure,
      SUM(mrr)                                  AS mrr,
      SUM(quantity)                             AS quantity
    FROM base_mrr
    INNER JOIN date_table
      ON base_mrr.effective_start_month <= date_table.date_actual
      AND (base_mrr.effective_end_month > date_table.date_actual OR base_mrr.effective_end_month IS NULL)
    {{ dbt_utils.group_by(n=24) }}

), current_mrr AS (

    SELECT
      zuora_accts.account_id,
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,
      SUM(zuora_rpc.mrr)    AS total_current_mrr
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND effective_start_date <= current_date
      AND (effective_end_date > current_date OR effective_end_date IS NULL)
    {{ dbt_utils.group_by(n=3) }}

)

SELECT
  mrr_month,
  month_base_mrr.account_id,
  account_number,
  account_name,
  crm_id,
  month_base_mrr.subscription_id,
  month_base_mrr.subscription_name_slugify,
  sub_start_month,
  sub_end_month,
  effective_start_month,
  effective_end_month,
  country,
  product_category,
  delivery,
  service_type,
  product_rate_plan_charge_id,
  rate_plan_name,
  rate_plan_charge_name,
  charge_type,
  unit_of_measure,
  SUM(mrr)                                                              AS mrr,
  SUM(mrr*12)                                                           AS arr,
  SUM(quantity)                                                         AS quantity,
  MAX(total_current_mrr)                                                AS total_current_mrr
FROM month_base_mrr
LEFT JOIN current_mrr
  ON month_base_mrr.subscription_id = current_mrr.subscription_id
{{ dbt_utils.group_by(n=20) }}23:T2b31,WITH date_table AS (

    SELECT *
    FROM "PROD".legacy.date_details
    WHERE day_of_month = 1

), zuora_accts AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE

), zuora_acct_period AS (

    SELECT *
    FROM "PREP".zuora.zuora_accounting_period_source

), zuora_contact AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source
    WHERE is_deleted = FALSE

), zuora_product AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_source
    WHERE is_deleted = FALSE

), zuora_rp AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source
    WHERE is_deleted = FALSE

), zuora_rpc AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), base_mrr AS (

    SELECT
      --primary key
      zuora_rpc.rate_plan_charge_id,

      --account info
      zuora_accts.account_id,
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --subscription info
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,

      --rate_plan info
      zuora_rpc.product_rate_plan_charge_id,
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      zuora_rpc.rate_plan_charge_number,
      zuora_rpc.unit_of_measure,
      zuora_rpc.quantity,
      zuora_rpc.mrr,
      zuora_rpc.charge_type,

      --date info
      date_trunc('month', zuora_subscription.subscription_start_date::DATE)     AS sub_start_month,
      date_trunc('month', zuora_subscription.subscription_end_date::DATE)       AS sub_end_month,
      subscription_start_date::DATE                                             AS subscription_start_date,
      subscription_end_date::DATE                                               AS subscription_end_date,
      zuora_rpc.effective_start_month,
      zuora_rpc.effective_end_month,
      zuora_rpc.effective_start_date::DATE                                      AS effective_start_date,
      zuora_rpc.effective_end_date::DATE                                        AS effective_end_date
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rpc.product_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND zuora_rpc.charge_type = 'Recurring'
      AND mrr != 0

), month_base_mrr AS (

    SELECT
      date_actual                               AS mrr_month,
      account_number,
      crm_id,
      account_name,
      account_id,
      subscription_id,
      subscription_name_slugify,
      sub_start_month,
      sub_end_month,
      subscription_start_date,
      subscription_end_date,
      effective_start_month,
      effective_end_month,
      effective_start_date,
      effective_end_date,
      country,
      CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
      CASE 
  WHEN LOWER(product_category) LIKE ANY ('%saas%', 'storage', 'standard', 'basic', 'plus', 'githost', '%dedicated - ultimate%')
    THEN 'SaaS'
  WHEN LOWER(product_category) LIKE '%self-managed%'
    THEN 'Self-Managed'
  WHEN product_category IN (
                                        'Other'
                                      , 'Support'
                                      , 'Trueup'
                                      )
    THEN 'Others'
  ELSE NULL
END AS delivery,
      CASE
        WHEN lower(rate_plan_name) like '%support%'
          THEN 'Support Only'
        ELSE 'Full Service'
      END                                       AS service_type,
      product_rate_plan_charge_id,
      rate_plan_name,
      rate_plan_charge_name,
      charge_type,
      unit_of_measure,
      SUM(mrr)                                  AS mrr,
      SUM(quantity)                             AS quantity
    FROM base_mrr
    INNER JOIN date_table
      ON base_mrr.effective_start_month <= date_table.date_actual
      AND (base_mrr.effective_end_month > date_table.date_actual OR base_mrr.effective_end_month IS NULL)
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24

), current_mrr AS (

    SELECT
      zuora_accts.account_id,
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,
      SUM(zuora_rpc.mrr)    AS total_current_mrr
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND effective_start_date <= current_date
      AND (effective_end_date > current_date OR effective_end_date IS NULL)
    group by 1,2,3

)

SELECT
  mrr_month,
  month_base_mrr.account_id,
  account_number,
  account_name,
  crm_id,
  month_base_mrr.subscription_id,
  month_base_mrr.subscription_name_slugify,
  sub_start_month,
  sub_end_month,
  effective_start_month,
  effective_end_month,
  country,
  product_category,
  delivery,
  service_type,
  product_rate_plan_charge_id,
  rate_plan_name,
  rate_plan_charge_name,
  charge_type,
  unit_of_measure,
  SUM(mrr)                                                              AS mrr,
  SUM(mrr*12)                                                           AS arr,
  SUM(quantity)                                                         AS quantity,
  MAX(total_current_mrr)                                                AS total_current_mrr
FROM month_base_mrr
LEFT JOIN current_mrr
  ON month_base_mrr.subscription_id = current_mrr.subscription_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,2024:T781,WITH accounts AS (

     SELECT *
     FROM {{ ref('netsuite_accounts_xf') }}

), cost_category AS (

     SELECT *
     FROM {{ ref('netsuite_expense_cost_category') }}

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM {{ ref('date_details') }}

), departments AS (

     SELECT *
     FROM {{ ref('netsuite_departments_xf') }}

), accts_depts AS (

     SELECT DISTINCT
       accts.account_number || ' - ' || accts.account_name  AS unique_account_name,
       accts.account_number,
       accts.account_name,
       depts.parent_department_name,
       depts.department_name
     FROM accounts accts
     CROSS JOIN departments depts
     WHERE accts.is_account_inactive = false
     ORDER BY 2,3,4

), accts_depts_periods AS (

     SELECT DISTINCT
       accts_depts.unique_account_name,
       accts_depts.account_number,
       accts_depts.account_name,
       accts_depts.parent_department_name,
       accts_depts.department_name,
       dd.first_day_of_month                                 AS accounting_period,
       dd.fiscal_year
     FROM accts_depts
     CROSS JOIN date_details dd
     WHERE DATE_TRUNC('year',first_day_of_month)
       BETWEEN DATEADD('year',-2,DATE_TRUNC('year',CURRENT_DATE))
         AND DATEADD('year',2,DATE_TRUNC('year',CURRENT_DATE))

), accts_depts_periods_cost AS (

     SELECT DISTINCT
       adp.fiscal_year,
       adp.unique_account_name,
       adp.account_number,
       adp.parent_department_name,
       adp.department_name,
       cc.cost_category_level_1,
       adp.accounting_period
     FROM accts_depts_periods adp
     LEFT JOIN cost_category cc
       ON adp.unique_account_name = cc.unique_account_name

)

SELECT *
FROM accts_depts_periods_cost
ORDER BY
  fiscal_year DESC,
  accounting_period,
  account_number,
  parent_department_name,
  department_name25:T785,WITH accounts AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounts_xf

), cost_category AS (

     SELECT *
     FROM "PROD".legacy.netsuite_expense_cost_category

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM "PROD".legacy.date_details

), departments AS (

     SELECT *
     FROM "PROD".legacy.netsuite_departments_xf

), accts_depts AS (

     SELECT DISTINCT
       accts.account_number || ' - ' || accts.account_name  AS unique_account_name,
       accts.account_number,
       accts.account_name,
       depts.parent_department_name,
       depts.department_name
     FROM accounts accts
     CROSS JOIN departments depts
     WHERE accts.is_account_inactive = false
     ORDER BY 2,3,4

), accts_depts_periods AS (

     SELECT DISTINCT
       accts_depts.unique_account_name,
       accts_depts.account_number,
       accts_depts.account_name,
       accts_depts.parent_department_name,
       accts_depts.department_name,
       dd.first_day_of_month                                 AS accounting_period,
       dd.fiscal_year
     FROM accts_depts
     CROSS JOIN date_details dd
     WHERE DATE_TRUNC('year',first_day_of_month)
       BETWEEN DATEADD('year',-2,DATE_TRUNC('year',CURRENT_DATE))
         AND DATEADD('year',2,DATE_TRUNC('year',CURRENT_DATE))

), accts_depts_periods_cost AS (

     SELECT DISTINCT
       adp.fiscal_year,
       adp.unique_account_name,
       adp.account_number,
       adp.parent_department_name,
       adp.department_name,
       cc.cost_category_level_1,
       adp.accounting_period
     FROM accts_depts_periods adp
     LEFT JOIN cost_category cc
       ON adp.unique_account_name = cc.unique_account_name

)

SELECT *
FROM accts_depts_periods_cost
ORDER BY
  fiscal_year DESC,
  accounting_period,
  account_number,
  parent_department_name,
  department_name26:T520e,WITH sfdc_opportunity AS (

    SELECT * FROM {{ref('sfdc_opportunity')}}

), sfdc_opportunity_stage AS (

    SELECT * FROM {{ref('sfdc_opportunity_stage')}}

), sfdc_lead_source AS (

    SELECT * FROM {{ref('sfdc_lead_sources')}}

), sfdc_users_xf AS (

    SELECT * FROM {{ref('sfdc_users_xf')}}

), sfdc_record_type AS (

    SELECT *
    FROM {{ ref('sfdc_record_type') }}

), sfdc_account AS (

    SELECT * FROM {{ref('sfdc_account')}}

), date_details AS (

    SELECT
      *,
      DENSE_RANK() OVER (ORDER BY first_day_of_fiscal_quarter) AS quarter_number
    FROM {{ ref('date_details') }}
    ORDER BY 1 DESC

), sales_admin_hierarchy AS (

    SELECT
      sfdc_opportunity.opportunity_id,
      sfdc_opportunity.owner_id,
      'CRO'                                                           AS level_1,
      CASE account_owner_team_stamped
        WHEN 'APAC'                 THEN 'VP Ent'
        WHEN 'Commercial'           THEN 'VP Comm SMB'
        WHEN 'Commercial - MM'      THEN 'VP Comm MM'
        WHEN 'Commercial - SMB'     THEN 'VP Comm SMB'
        WHEN 'EMEA'                 THEN 'VP Ent'
        WHEN 'MM - APAC'            THEN 'VP Comm MM'
        WHEN 'MM - East'            THEN 'VP Comm MM'
        WHEN 'MM - EMEA'            THEN 'VP Comm MM'
        WHEN 'MM - West'            THEN 'VP Comm MM'
        WHEN 'MM-EMEA'              THEN 'VP Comm MM'
        WHEN 'Public Sector'        THEN 'VP Ent'
        WHEN 'SMB'                  THEN 'VP Comm SMB'
        WHEN 'SMB - International'  THEN 'VP Comm SMB'
        WHEN 'SMB - US'             THEN 'VP Comm SMB'
        WHEN 'US East'              THEN 'VP Ent'
        WHEN 'US West'              THEN 'VP Ent'
        ELSE NULL
      END                                                             AS level_2,
      CASE account_owner_team_stamped
        WHEN 'APAC'                 THEN 'RD APAC'
        WHEN 'EMEA'                 THEN 'RD EMEA'
        WHEN 'MM - APAC'            THEN 'ASM - MM - APAC'
        WHEN 'MM - East'            THEN 'ASM - MM - East'
        WHEN 'MM - EMEA'            THEN 'ASM - MM - EMEA'
        WHEN 'MM - West'            THEN 'ASM - MM - West'
        WHEN 'MM-EMEA'              THEN 'ASM - MM - EMEA'
        WHEN 'Public Sector'        THEN 'RD PubSec'
        WHEN 'US East'              THEN 'RD US East'
        WHEN 'US West'              THEN 'RD US West'
        ELSE NULL
      END                                                             AS level_3
    FROM sfdc_opportunity
    -- sfdc Sales Admin user
    WHERE owner_id = '00561000000mpHTAAY'

), layered AS (

    SELECT
      -- keys
      sfdc_opportunity.account_id,
      sfdc_opportunity.opportunity_id,
      sfdc_opportunity.opportunity_name,
      sfdc_opportunity.owner_id,

      -- logistical information
      sfdc_opportunity.close_date,
      sfdc_opportunity.created_date,
      sfdc_opportunity.days_in_stage,
      sfdc_opportunity.deployment_preference,
      sfdc_opportunity.generated_source,
      sfdc_opportunity.lead_source,
      sfdc_lead_source.lead_source_id                                                             AS lead_source_id,
      COALESCE(sfdc_lead_source.initial_source, 'Unknown')                                        AS lead_source_name,
      COALESCE(sfdc_lead_source.initial_source_type, 'Unknown')                                   AS lead_source_type,
      sfdc_opportunity.merged_opportunity_id,
      sfdc_opportunity.net_new_source_categories,
      sfdc_opportunity.opportunity_business_development_representative,
      sfdc_opportunity.opportunity_owner                                                          AS opportunity_owner,
      sfdc_opportunity.opportunity_owner_department                                               AS opportunity_owner_department,
      sfdc_opportunity.opportunity_owner_manager                                                  AS opportunity_owner_manager,
      opportunity_owner.role_name                                                                 AS opportunity_owner_role,
      opportunity_owner.title                                                                     AS opportunity_owner_title,
      sfdc_opportunity.opportunity_sales_development_representative,
      sfdc_opportunity.opportunity_development_representative,
      sfdc_opportunity.account_owner_team_stamped,
      sfdc_opportunity.opportunity_term,
      sfdc_opportunity.primary_campaign_source_id                                                 AS primary_campaign_source_id,
      sfdc_opportunity.sales_accepted_date,
      sfdc_opportunity.sales_path,
      sfdc_opportunity.sales_qualified_date,
      sfdc_opportunity.sales_type,
      sfdc_opportunity.sdr_pipeline_contribution,
      sfdc_opportunity.source_buckets,
      sfdc_opportunity.stage_name,
      sfdc_opportunity_stage.is_active                                                             AS stage_is_active,
      sfdc_opportunity_stage.is_closed                                                             AS stage_is_closed,
      sfdc_opportunity.technical_evaluation_date,
      sfdc_opportunity.order_type,
      sfdc_opportunity.deal_path,
      sfdc_opportunity.opportunity_category,

      -- opportunity information
      sfdc_opportunity.acv,
      sfdc_opportunity.amount,
      sfdc_opportunity.closed_deals,
      sfdc_opportunity.competitors,
      sfdc_opportunity.critical_deal_flag,
      sfdc_opportunity.deal_size,
      sfdc_opportunity.forecast_category_name,
      sfdc_opportunity.forecasted_iacv,
      sfdc_opportunity.iacv_created_date,
      sfdc_opportunity.incremental_acv,
      sfdc_opportunity.pre_covid_iacv,
      sfdc_opportunity.invoice_number,
      sfdc_opportunity.is_refund,
      sfdc_opportunity.is_downgrade,
      CASE
        WHEN (sfdc_opportunity.days_in_stage > 30
          OR sfdc_opportunity.incremental_acv > 100000
          OR sfdc_opportunity.pushed_count > 0)
            THEN TRUE
        ELSE FALSE
      END                                                                                         AS is_risky,
      sfdc_opportunity.is_swing_deal,
      sfdc_opportunity.is_edu_oss,
      sfdc_opportunity_stage.is_won                                                               AS is_won,
      sfdc_opportunity.net_incremental_acv,
      sfdc_opportunity.probability,
      sfdc_opportunity.professional_services_value,
      sfdc_opportunity.pushed_count,
      sfdc_opportunity.reason_for_loss,
      sfdc_opportunity.reason_for_loss_details,
      sfdc_opportunity.downgrade_reason,
      sfdc_opportunity.refund_iacv,
      sfdc_opportunity.downgrade_iacv,
      sfdc_opportunity.renewal_acv,
      sfdc_opportunity.renewal_amount,
      sfdc_opportunity.sales_qualified_source,
      sfdc_opportunity.solutions_to_be_replaced,
      sfdc_opportunity.total_contract_value,
      sfdc_opportunity.upside_iacv,
      sfdc_opportunity.upside_swing_deal_iacv,
      sfdc_opportunity.incremental_acv * (probability /100)                                       AS weighted_iacv,
      sfdc_opportunity.is_web_portal_purchase,
      sfdc_opportunity.partner_initiated_opportunity,
      sfdc_opportunity.user_segment,
      sfdc_opportunity.subscription_start_date,
      sfdc_opportunity.subscription_end_date,
      sfdc_opportunity.true_up_value,
      sfdc_opportunity.order_type_live,
      sfdc_opportunity.order_type_stamped,
      sfdc_opportunity.net_arr,
      sfdc_opportunity.recurring_amount,
      sfdc_opportunity.true_up_amount,
      sfdc_opportunity.proserv_amount,
      sfdc_opportunity.other_non_recurring_amount,
      sfdc_opportunity.arr_basis,
      sfdc_opportunity.arr,
      sfdc_opportunity.opportunity_health,
      sfdc_opportunity.risk_type,
      sfdc_opportunity.risk_reasons,
      sfdc_opportunity.tam_notes,
      sfdc_opportunity.primary_solution_architect,
      sfdc_opportunity.product_details,
      sfdc_opportunity.product_category,
      sfdc_opportunity.products_purchased,

      -- days and dates per stage
      sfdc_opportunity.days_in_1_discovery,
      sfdc_opportunity.days_in_2_scoping,
      sfdc_opportunity.days_in_3_technical_evaluation,
      sfdc_opportunity.days_in_4_proposal,
      sfdc_opportunity.days_in_5_negotiating,
      sfdc_opportunity.stage_0_pending_acceptance_date,
      sfdc_opportunity.stage_1_discovery_date,
      sfdc_opportunity.stage_2_scoping_date,
      sfdc_opportunity.stage_3_technical_evaluation_date,
      sfdc_opportunity.stage_4_proposal_date,
      sfdc_opportunity.stage_5_negotiating_date,
      sfdc_opportunity.stage_6_awaiting_signature_date,
      sfdc_opportunity.stage_6_closed_won_date,
      sfdc_opportunity.stage_6_closed_lost_date,

      -- helper flag, tracks won deals & renewals + not jihu
      sfdc_opportunity.fpa_master_bookings_flag,

      -- command plan fields
      sfdc_opportunity.cp_champion,
      sfdc_opportunity.cp_close_plan,
      sfdc_opportunity.cp_competition,
      sfdc_opportunity.cp_decision_criteria,
      sfdc_opportunity.cp_decision_process,
      sfdc_opportunity.cp_economic_buyer,
      sfdc_opportunity.cp_identify_pain,
      sfdc_opportunity.cp_metrics,
      sfdc_opportunity.cp_risks,
      sfdc_opportunity.cp_use_cases,
      sfdc_opportunity.cp_value_driver,
      sfdc_opportunity.cp_why_do_anything_at_all,
      sfdc_opportunity.cp_why_gitlab,
      sfdc_opportunity.cp_why_now,
      sfdc_opportunity.cp_score,

      -- User Segment Hierarchy fields
      sfdc_opportunity.user_segment_stamped,
      sfdc_opportunity.user_geo_stamped,
      sfdc_opportunity.user_region_stamped,
      sfdc_opportunity.user_area_stamped,

      -- sales segment refactor
      sfdc_opportunity.division_sales_segment_stamped,
      sfdc_account.account_sales_segment                           AS parent_crm_account_sales_segment,
      sfdc_account.division_sales_segment,
      sfdc_account.ultimate_parent_sales_segment,
      sfdc_account.is_jihu_account,
      sfdc_account.gitlab_partner_program,

      -- ************************************
      -- sales segmentation deprecated fields - 2020-09-03
      -- left temporary for the sake of MVC and avoid breaking SiSense existing charts
      -- issue: https://gitlab.com/gitlab-data/analytics/-/issues/5709
      sfdc_opportunity.sales_segment                                                                    AS sales_segment,
      sfdc_opportunity.parent_segment                                                                   AS parent_segment,

      -- ************************************
      -- channel reporting
      -- issue: https://gitlab.com/gitlab-data/analytics/-/issues/6072

      sfdc_opportunity.dr_partner_deal_type,
      sfdc_opportunity.dr_partner_engagement,
      sfdc_opportunity.partner_account,
      sfdc_opportunity.dr_status,
      sfdc_opportunity.distributor,
      sfdc_opportunity.influence_partner,
      sfdc_opportunity.fulfillment_partner,
      sfdc_opportunity.platform_partner,
      sfdc_opportunity.partner_track,
      sfdc_opportunity.is_public_sector_opp,
      sfdc_opportunity.is_registration_from_portal,
      sfdc_opportunity.calculated_discount,
      sfdc_opportunity.partner_discount,
      sfdc_opportunity.partner_discount_calc,
      sfdc_opportunity.comp_channel_neutral,

      -- account owner hierarchies levels
      account_owner.sales_team_level_2                                                                    AS account_owner_team_level_2,
      account_owner.sales_team_level_3                                                                    AS account_owner_team_level_3,
      account_owner.sales_team_level_4                                                                    AS account_owner_team_level_4,
      account_owner.sales_team_vp_level                                                                   AS account_owner_team_vp_level,
      account_owner.sales_team_rd_level                                                                   AS account_owner_team_rd_level,
      account_owner.sales_team_asm_level                                                                  AS account_owner_team_asm_level,
      account_owner.sales_min_hierarchy_level                                                             AS account_owner_min_team_level,
      account_owner.sales_region                                                                          AS account_owner_sales_region,

      -- opportunity owner hierarchies levels
      CASE
        WHEN sales_admin_hierarchy.level_2 IS NOT NULL
          THEN sales_admin_hierarchy.level_2
        ELSE opportunity_owner.sales_team_level_2
      END                                                                                                AS opportunity_owner_team_level_2,
      CASE
        WHEN sales_admin_hierarchy.level_3 IS NOT NULL
          THEN sales_admin_hierarchy.level_3
        ELSE opportunity_owner.sales_team_level_3
      END                                                                                                AS opportunity_owner_team_level_3,

      -- reporting helper flags
      CASE
        WHEN sfdc_opportunity.stage_name
          IN ('0-Pending Acceptance','0-Qualifying','Developing', '1-Discovery', '2-Developing', '2-Scoping')
            THEN 'Pipeline'
        WHEN sfdc_opportunity.stage_name
          IN ('3-Technical Evaluation', '4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')
            THEN '3+ Pipeline'
        WHEN sfdc_opportunity.stage_name
          IN ('8-Closed Lost', 'Closed Lost')
            THEN 'Lost'
        WHEN sfdc_opportunity.stage_name IN ('Closed Won')
            THEN 'Closed Won'
        ELSE 'Other'
      END                                                                                                AS stage_name_3plus,

      CASE
        WHEN sfdc_opportunity.stage_name
          IN ('0-Pending Acceptance','0-Qualifying','Developing','1-Discovery', '2-Developing', '2-Scoping', '3-Technical Evaluation')
            THEN 'Pipeline'
        WHEN sfdc_opportunity.stage_name
          IN ('4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')
            THEN '4+ Pipeline'
        WHEN sfdc_opportunity.stage_name IN ('8-Closed Lost', 'Closed Lost')
            THEN 'Lost'
        WHEN sfdc_opportunity.stage_name IN ('Closed Won')
            THEN 'Closed Won'
        ELSE 'Other'
      END                                                                                                AS stage_name_4plus,

      CASE
        WHEN sfdc_opportunity.stage_name
          IN ('3-Technical Evaluation', '4-Proposal', 'Closed Won','5-Negotiating', '6-Awaiting Signature', '7-Closing')
            THEN 1
        ELSE 0
      END                                                                                               AS is_stage_3_plus,

      CASE
        WHEN sfdc_opportunity.stage_name = '8-Closed Lost'
          THEN 1 ELSE 0
      END                                                                                               AS is_lost,
      CASE
        WHEN sfdc_opportunity.stage_name IN ('8-Closed Lost', '9-Unqualified', 'Closed Won', '10-Duplicate') 
            THEN 0
        ELSE 1
      END                                                                                               AS is_open,

      CASE
        WHEN is_open = 0
          THEN 1
        ELSE 0
      END                                                                                               AS is_closed,

      CASE
        WHEN sfdc_opportunity_stage.is_won = 1 THEN '1.Won'
        WHEN is_lost = 1 THEN '2.Lost'
        WHEN is_open = 1 THEN '0. Open'
        ELSE 'N/A'
      END                                                                                               AS stage_category,

      CASE
        WHEN LOWER(sfdc_opportunity.sales_type) like '%renewal%'
          THEN 1
        ELSE 0
      END                                                                                               AS is_renewal,

      -- date fields helpers
      close_date_detail.fiscal_quarter_name_fy                             AS close_fiscal_quarter_name,
      close_date_detail.first_day_of_fiscal_quarter                        AS close_fiscal_quarter_date,
      close_date_detail.fiscal_year                                        AS close_fiscal_year,
      close_date_detail.first_day_of_month                                 AS close_date_month,

      created_date_detail.fiscal_quarter_name_fy                           AS created_fiscal_quarter_name,
      created_date_detail.first_day_of_fiscal_quarter                      AS created_fiscal_quarter_date,
      created_date_detail.fiscal_year                                      AS created_fiscal_year,
      created_date_detail.first_day_of_month                               AS created_date_month,

      start_date.fiscal_quarter_name_fy                                    AS subscription_start_date_fiscal_quarter_name,
      start_date.first_day_of_fiscal_quarter                               AS subscription_start_date_fiscal_quarter_date,
      start_date.fiscal_year                                               AS subscription_start_date_fiscal_year,
      start_date.first_day_of_month                                        AS subscription_start_date_month,

      sales_accepted_date.fiscal_quarter_name_fy                           AS sales_accepted_fiscal_quarter_name,
      sales_accepted_date.first_day_of_fiscal_quarter                      AS sales_accepted_fiscal_quarter_date,
      sales_accepted_date.fiscal_year                                      AS sales_accepted_fiscal_year,
      sales_accepted_date.first_day_of_month                               AS sales_accepted_date_month,

      sales_qualified_date.fiscal_quarter_name_fy                          AS sales_qualified_fiscal_quarter_name,
      sales_qualified_date.first_day_of_fiscal_quarter                     AS sales_qualified_fiscal_quarter_date,
      sales_qualified_date.fiscal_year                                     AS sales_qualified_fiscal_year,
      sales_qualified_date.first_day_of_month                              AS sales_qualified_date_month,

      iacv_created_date.fiscal_quarter_name_fy                             AS iacv_created_fiscal_quarter_name,
      iacv_created_date.first_day_of_fiscal_quarter                        AS iacv_created_fiscal_quarter_date,
      iacv_created_date.fiscal_year                                        AS iacv_created_fiscal_year,
      iacv_created_date.first_day_of_month                                 AS iacv_created_date_month,

      -- metadata
      sfdc_opportunity._last_dbt_run,
      sfdc_record_type.business_process_id,
      sfdc_opportunity.days_since_last_activity,
      sfdc_opportunity.is_deleted,
      sfdc_opportunity.last_activity_date,
      sfdc_record_type.record_type_description,
      sfdc_opportunity.record_type_id,
      sfdc_record_type.record_type_label,
      sfdc_record_type.record_type_modifying_object_type,
      sfdc_record_type.record_type_name,
      MD5((DATE_TRUNC('month', sfdc_opportunity.close_date)::DATE)||UPPER(opportunity_owner.team))      AS region_quota_id,
      MD5((DATE_TRUNC('month', sfdc_opportunity.close_date)::DATE)||UPPER(opportunity_owner.name))      AS sales_quota_id

    FROM sfdc_opportunity
    INNER JOIN sfdc_opportunity_stage
      ON sfdc_opportunity.stage_name = sfdc_opportunity_stage.primary_label
    INNER JOIN date_details close_date_detail
      ON close_date_detail.date_actual = sfdc_opportunity.close_date::DATE
    INNER JOIN date_details created_date_detail
      ON created_date_detail.date_actual = sfdc_opportunity.created_date::DATE
    LEFT JOIN sfdc_lead_source
      ON sfdc_opportunity.lead_source = sfdc_lead_source.initial_source
    LEFT JOIN sfdc_users_xf opportunity_owner
      ON sfdc_opportunity.owner_id = opportunity_owner.user_id
    LEFT JOIN sfdc_record_type
      ON sfdc_opportunity.record_type_id = sfdc_record_type.record_type_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_opportunity.account_id
    LEFT JOIN date_details sales_accepted_date
      ON sfdc_opportunity.sales_accepted_date::DATE = sales_accepted_date.date_actual
    LEFT JOIN date_details start_date
      ON sfdc_opportunity.subscription_start_date::DATE = start_date.date_actual
    LEFT JOIN date_details sales_qualified_date
      ON sfdc_opportunity.sales_qualified_date::DATE = sales_qualified_date.date_actual
    LEFT JOIN date_details iacv_created_date
      ON iacv_created_date.date_actual = sfdc_opportunity.iacv_created_date::DATE
    LEFT JOIN sfdc_users_xf account_owner
      ON account_owner.user_id = sfdc_account.owner_id
    LEFT JOIN sales_admin_hierarchy
      ON sfdc_opportunity.opportunity_id = sales_admin_hierarchy.opportunity_id
)

SELECT *
FROM layered27:T524f,WITH sfdc_opportunity AS (

    SELECT * FROM "PROD".restricted_safe_legacy.sfdc_opportunity

), sfdc_opportunity_stage AS (

    SELECT * FROM "PROD".restricted_safe_legacy.sfdc_opportunity_stage

), sfdc_lead_source AS (

    SELECT * FROM "PROD".legacy.sfdc_lead_sources

), sfdc_users_xf AS (

    SELECT * FROM "PROD".legacy.sfdc_users_xf

), sfdc_record_type AS (

    SELECT *
    FROM "PROD".legacy.sfdc_record_type

), sfdc_account AS (

    SELECT * FROM "PROD".restricted_safe_legacy.sfdc_account

), date_details AS (

    SELECT
      *,
      DENSE_RANK() OVER (ORDER BY first_day_of_fiscal_quarter) AS quarter_number
    FROM "PROD".legacy.date_details
    ORDER BY 1 DESC

), sales_admin_hierarchy AS (

    SELECT
      sfdc_opportunity.opportunity_id,
      sfdc_opportunity.owner_id,
      'CRO'                                                           AS level_1,
      CASE account_owner_team_stamped
        WHEN 'APAC'                 THEN 'VP Ent'
        WHEN 'Commercial'           THEN 'VP Comm SMB'
        WHEN 'Commercial - MM'      THEN 'VP Comm MM'
        WHEN 'Commercial - SMB'     THEN 'VP Comm SMB'
        WHEN 'EMEA'                 THEN 'VP Ent'
        WHEN 'MM - APAC'            THEN 'VP Comm MM'
        WHEN 'MM - East'            THEN 'VP Comm MM'
        WHEN 'MM - EMEA'            THEN 'VP Comm MM'
        WHEN 'MM - West'            THEN 'VP Comm MM'
        WHEN 'MM-EMEA'              THEN 'VP Comm MM'
        WHEN 'Public Sector'        THEN 'VP Ent'
        WHEN 'SMB'                  THEN 'VP Comm SMB'
        WHEN 'SMB - International'  THEN 'VP Comm SMB'
        WHEN 'SMB - US'             THEN 'VP Comm SMB'
        WHEN 'US East'              THEN 'VP Ent'
        WHEN 'US West'              THEN 'VP Ent'
        ELSE NULL
      END                                                             AS level_2,
      CASE account_owner_team_stamped
        WHEN 'APAC'                 THEN 'RD APAC'
        WHEN 'EMEA'                 THEN 'RD EMEA'
        WHEN 'MM - APAC'            THEN 'ASM - MM - APAC'
        WHEN 'MM - East'            THEN 'ASM - MM - East'
        WHEN 'MM - EMEA'            THEN 'ASM - MM - EMEA'
        WHEN 'MM - West'            THEN 'ASM - MM - West'
        WHEN 'MM-EMEA'              THEN 'ASM - MM - EMEA'
        WHEN 'Public Sector'        THEN 'RD PubSec'
        WHEN 'US East'              THEN 'RD US East'
        WHEN 'US West'              THEN 'RD US West'
        ELSE NULL
      END                                                             AS level_3
    FROM sfdc_opportunity
    -- sfdc Sales Admin user
    WHERE owner_id = '00561000000mpHTAAY'

), layered AS (

    SELECT
      -- keys
      sfdc_opportunity.account_id,
      sfdc_opportunity.opportunity_id,
      sfdc_opportunity.opportunity_name,
      sfdc_opportunity.owner_id,

      -- logistical information
      sfdc_opportunity.close_date,
      sfdc_opportunity.created_date,
      sfdc_opportunity.days_in_stage,
      sfdc_opportunity.deployment_preference,
      sfdc_opportunity.generated_source,
      sfdc_opportunity.lead_source,
      sfdc_lead_source.lead_source_id                                                             AS lead_source_id,
      COALESCE(sfdc_lead_source.initial_source, 'Unknown')                                        AS lead_source_name,
      COALESCE(sfdc_lead_source.initial_source_type, 'Unknown')                                   AS lead_source_type,
      sfdc_opportunity.merged_opportunity_id,
      sfdc_opportunity.net_new_source_categories,
      sfdc_opportunity.opportunity_business_development_representative,
      sfdc_opportunity.opportunity_owner                                                          AS opportunity_owner,
      sfdc_opportunity.opportunity_owner_department                                               AS opportunity_owner_department,
      sfdc_opportunity.opportunity_owner_manager                                                  AS opportunity_owner_manager,
      opportunity_owner.role_name                                                                 AS opportunity_owner_role,
      opportunity_owner.title                                                                     AS opportunity_owner_title,
      sfdc_opportunity.opportunity_sales_development_representative,
      sfdc_opportunity.opportunity_development_representative,
      sfdc_opportunity.account_owner_team_stamped,
      sfdc_opportunity.opportunity_term,
      sfdc_opportunity.primary_campaign_source_id                                                 AS primary_campaign_source_id,
      sfdc_opportunity.sales_accepted_date,
      sfdc_opportunity.sales_path,
      sfdc_opportunity.sales_qualified_date,
      sfdc_opportunity.sales_type,
      sfdc_opportunity.sdr_pipeline_contribution,
      sfdc_opportunity.source_buckets,
      sfdc_opportunity.stage_name,
      sfdc_opportunity_stage.is_active                                                             AS stage_is_active,
      sfdc_opportunity_stage.is_closed                                                             AS stage_is_closed,
      sfdc_opportunity.technical_evaluation_date,
      sfdc_opportunity.order_type,
      sfdc_opportunity.deal_path,
      sfdc_opportunity.opportunity_category,

      -- opportunity information
      sfdc_opportunity.acv,
      sfdc_opportunity.amount,
      sfdc_opportunity.closed_deals,
      sfdc_opportunity.competitors,
      sfdc_opportunity.critical_deal_flag,
      sfdc_opportunity.deal_size,
      sfdc_opportunity.forecast_category_name,
      sfdc_opportunity.forecasted_iacv,
      sfdc_opportunity.iacv_created_date,
      sfdc_opportunity.incremental_acv,
      sfdc_opportunity.pre_covid_iacv,
      sfdc_opportunity.invoice_number,
      sfdc_opportunity.is_refund,
      sfdc_opportunity.is_downgrade,
      CASE
        WHEN (sfdc_opportunity.days_in_stage > 30
          OR sfdc_opportunity.incremental_acv > 100000
          OR sfdc_opportunity.pushed_count > 0)
            THEN TRUE
        ELSE FALSE
      END                                                                                         AS is_risky,
      sfdc_opportunity.is_swing_deal,
      sfdc_opportunity.is_edu_oss,
      sfdc_opportunity_stage.is_won                                                               AS is_won,
      sfdc_opportunity.net_incremental_acv,
      sfdc_opportunity.probability,
      sfdc_opportunity.professional_services_value,
      sfdc_opportunity.pushed_count,
      sfdc_opportunity.reason_for_loss,
      sfdc_opportunity.reason_for_loss_details,
      sfdc_opportunity.downgrade_reason,
      sfdc_opportunity.refund_iacv,
      sfdc_opportunity.downgrade_iacv,
      sfdc_opportunity.renewal_acv,
      sfdc_opportunity.renewal_amount,
      sfdc_opportunity.sales_qualified_source,
      sfdc_opportunity.solutions_to_be_replaced,
      sfdc_opportunity.total_contract_value,
      sfdc_opportunity.upside_iacv,
      sfdc_opportunity.upside_swing_deal_iacv,
      sfdc_opportunity.incremental_acv * (probability /100)                                       AS weighted_iacv,
      sfdc_opportunity.is_web_portal_purchase,
      sfdc_opportunity.partner_initiated_opportunity,
      sfdc_opportunity.user_segment,
      sfdc_opportunity.subscription_start_date,
      sfdc_opportunity.subscription_end_date,
      sfdc_opportunity.true_up_value,
      sfdc_opportunity.order_type_live,
      sfdc_opportunity.order_type_stamped,
      sfdc_opportunity.net_arr,
      sfdc_opportunity.recurring_amount,
      sfdc_opportunity.true_up_amount,
      sfdc_opportunity.proserv_amount,
      sfdc_opportunity.other_non_recurring_amount,
      sfdc_opportunity.arr_basis,
      sfdc_opportunity.arr,
      sfdc_opportunity.opportunity_health,
      sfdc_opportunity.risk_type,
      sfdc_opportunity.risk_reasons,
      sfdc_opportunity.tam_notes,
      sfdc_opportunity.primary_solution_architect,
      sfdc_opportunity.product_details,
      sfdc_opportunity.product_category,
      sfdc_opportunity.products_purchased,

      -- days and dates per stage
      sfdc_opportunity.days_in_1_discovery,
      sfdc_opportunity.days_in_2_scoping,
      sfdc_opportunity.days_in_3_technical_evaluation,
      sfdc_opportunity.days_in_4_proposal,
      sfdc_opportunity.days_in_5_negotiating,
      sfdc_opportunity.stage_0_pending_acceptance_date,
      sfdc_opportunity.stage_1_discovery_date,
      sfdc_opportunity.stage_2_scoping_date,
      sfdc_opportunity.stage_3_technical_evaluation_date,
      sfdc_opportunity.stage_4_proposal_date,
      sfdc_opportunity.stage_5_negotiating_date,
      sfdc_opportunity.stage_6_awaiting_signature_date,
      sfdc_opportunity.stage_6_closed_won_date,
      sfdc_opportunity.stage_6_closed_lost_date,

      -- helper flag, tracks won deals & renewals + not jihu
      sfdc_opportunity.fpa_master_bookings_flag,

      -- command plan fields
      sfdc_opportunity.cp_champion,
      sfdc_opportunity.cp_close_plan,
      sfdc_opportunity.cp_competition,
      sfdc_opportunity.cp_decision_criteria,
      sfdc_opportunity.cp_decision_process,
      sfdc_opportunity.cp_economic_buyer,
      sfdc_opportunity.cp_identify_pain,
      sfdc_opportunity.cp_metrics,
      sfdc_opportunity.cp_risks,
      sfdc_opportunity.cp_use_cases,
      sfdc_opportunity.cp_value_driver,
      sfdc_opportunity.cp_why_do_anything_at_all,
      sfdc_opportunity.cp_why_gitlab,
      sfdc_opportunity.cp_why_now,
      sfdc_opportunity.cp_score,

      -- User Segment Hierarchy fields
      sfdc_opportunity.user_segment_stamped,
      sfdc_opportunity.user_geo_stamped,
      sfdc_opportunity.user_region_stamped,
      sfdc_opportunity.user_area_stamped,

      -- sales segment refactor
      sfdc_opportunity.division_sales_segment_stamped,
      sfdc_account.account_sales_segment                           AS parent_crm_account_sales_segment,
      sfdc_account.division_sales_segment,
      sfdc_account.ultimate_parent_sales_segment,
      sfdc_account.is_jihu_account,
      sfdc_account.gitlab_partner_program,

      -- ************************************
      -- sales segmentation deprecated fields - 2020-09-03
      -- left temporary for the sake of MVC and avoid breaking SiSense existing charts
      -- issue: https://gitlab.com/gitlab-data/analytics/-/issues/5709
      sfdc_opportunity.sales_segment                                                                    AS sales_segment,
      sfdc_opportunity.parent_segment                                                                   AS parent_segment,

      -- ************************************
      -- channel reporting
      -- issue: https://gitlab.com/gitlab-data/analytics/-/issues/6072

      sfdc_opportunity.dr_partner_deal_type,
      sfdc_opportunity.dr_partner_engagement,
      sfdc_opportunity.partner_account,
      sfdc_opportunity.dr_status,
      sfdc_opportunity.distributor,
      sfdc_opportunity.influence_partner,
      sfdc_opportunity.fulfillment_partner,
      sfdc_opportunity.platform_partner,
      sfdc_opportunity.partner_track,
      sfdc_opportunity.is_public_sector_opp,
      sfdc_opportunity.is_registration_from_portal,
      sfdc_opportunity.calculated_discount,
      sfdc_opportunity.partner_discount,
      sfdc_opportunity.partner_discount_calc,
      sfdc_opportunity.comp_channel_neutral,

      -- account owner hierarchies levels
      account_owner.sales_team_level_2                                                                    AS account_owner_team_level_2,
      account_owner.sales_team_level_3                                                                    AS account_owner_team_level_3,
      account_owner.sales_team_level_4                                                                    AS account_owner_team_level_4,
      account_owner.sales_team_vp_level                                                                   AS account_owner_team_vp_level,
      account_owner.sales_team_rd_level                                                                   AS account_owner_team_rd_level,
      account_owner.sales_team_asm_level                                                                  AS account_owner_team_asm_level,
      account_owner.sales_min_hierarchy_level                                                             AS account_owner_min_team_level,
      account_owner.sales_region                                                                          AS account_owner_sales_region,

      -- opportunity owner hierarchies levels
      CASE
        WHEN sales_admin_hierarchy.level_2 IS NOT NULL
          THEN sales_admin_hierarchy.level_2
        ELSE opportunity_owner.sales_team_level_2
      END                                                                                                AS opportunity_owner_team_level_2,
      CASE
        WHEN sales_admin_hierarchy.level_3 IS NOT NULL
          THEN sales_admin_hierarchy.level_3
        ELSE opportunity_owner.sales_team_level_3
      END                                                                                                AS opportunity_owner_team_level_3,

      -- reporting helper flags
      CASE
        WHEN sfdc_opportunity.stage_name
          IN ('0-Pending Acceptance','0-Qualifying','Developing', '1-Discovery', '2-Developing', '2-Scoping')
            THEN 'Pipeline'
        WHEN sfdc_opportunity.stage_name
          IN ('3-Technical Evaluation', '4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')
            THEN '3+ Pipeline'
        WHEN sfdc_opportunity.stage_name
          IN ('8-Closed Lost', 'Closed Lost')
            THEN 'Lost'
        WHEN sfdc_opportunity.stage_name IN ('Closed Won')
            THEN 'Closed Won'
        ELSE 'Other'
      END                                                                                                AS stage_name_3plus,

      CASE
        WHEN sfdc_opportunity.stage_name
          IN ('0-Pending Acceptance','0-Qualifying','Developing','1-Discovery', '2-Developing', '2-Scoping', '3-Technical Evaluation')
            THEN 'Pipeline'
        WHEN sfdc_opportunity.stage_name
          IN ('4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')
            THEN '4+ Pipeline'
        WHEN sfdc_opportunity.stage_name IN ('8-Closed Lost', 'Closed Lost')
            THEN 'Lost'
        WHEN sfdc_opportunity.stage_name IN ('Closed Won')
            THEN 'Closed Won'
        ELSE 'Other'
      END                                                                                                AS stage_name_4plus,

      CASE
        WHEN sfdc_opportunity.stage_name
          IN ('3-Technical Evaluation', '4-Proposal', 'Closed Won','5-Negotiating', '6-Awaiting Signature', '7-Closing')
            THEN 1
        ELSE 0
      END                                                                                               AS is_stage_3_plus,

      CASE
        WHEN sfdc_opportunity.stage_name = '8-Closed Lost'
          THEN 1 ELSE 0
      END                                                                                               AS is_lost,
      CASE
        WHEN sfdc_opportunity.stage_name IN ('8-Closed Lost', '9-Unqualified', 'Closed Won', '10-Duplicate') 
            THEN 0
        ELSE 1
      END                                                                                               AS is_open,

      CASE
        WHEN is_open = 0
          THEN 1
        ELSE 0
      END                                                                                               AS is_closed,

      CASE
        WHEN sfdc_opportunity_stage.is_won = 1 THEN '1.Won'
        WHEN is_lost = 1 THEN '2.Lost'
        WHEN is_open = 1 THEN '0. Open'
        ELSE 'N/A'
      END                                                                                               AS stage_category,

      CASE
        WHEN LOWER(sfdc_opportunity.sales_type) like '%renewal%'
          THEN 1
        ELSE 0
      END                                                                                               AS is_renewal,

      -- date fields helpers
      close_date_detail.fiscal_quarter_name_fy                             AS close_fiscal_quarter_name,
      close_date_detail.first_day_of_fiscal_quarter                        AS close_fiscal_quarter_date,
      close_date_detail.fiscal_year                                        AS close_fiscal_year,
      close_date_detail.first_day_of_month                                 AS close_date_month,

      created_date_detail.fiscal_quarter_name_fy                           AS created_fiscal_quarter_name,
      created_date_detail.first_day_of_fiscal_quarter                      AS created_fiscal_quarter_date,
      created_date_detail.fiscal_year                                      AS created_fiscal_year,
      created_date_detail.first_day_of_month                               AS created_date_month,

      start_date.fiscal_quarter_name_fy                                    AS subscription_start_date_fiscal_quarter_name,
      start_date.first_day_of_fiscal_quarter                               AS subscription_start_date_fiscal_quarter_date,
      start_date.fiscal_year                                               AS subscription_start_date_fiscal_year,
      start_date.first_day_of_month                                        AS subscription_start_date_month,

      sales_accepted_date.fiscal_quarter_name_fy                           AS sales_accepted_fiscal_quarter_name,
      sales_accepted_date.first_day_of_fiscal_quarter                      AS sales_accepted_fiscal_quarter_date,
      sales_accepted_date.fiscal_year                                      AS sales_accepted_fiscal_year,
      sales_accepted_date.first_day_of_month                               AS sales_accepted_date_month,

      sales_qualified_date.fiscal_quarter_name_fy                          AS sales_qualified_fiscal_quarter_name,
      sales_qualified_date.first_day_of_fiscal_quarter                     AS sales_qualified_fiscal_quarter_date,
      sales_qualified_date.fiscal_year                                     AS sales_qualified_fiscal_year,
      sales_qualified_date.first_day_of_month                              AS sales_qualified_date_month,

      iacv_created_date.fiscal_quarter_name_fy                             AS iacv_created_fiscal_quarter_name,
      iacv_created_date.first_day_of_fiscal_quarter                        AS iacv_created_fiscal_quarter_date,
      iacv_created_date.fiscal_year                                        AS iacv_created_fiscal_year,
      iacv_created_date.first_day_of_month                                 AS iacv_created_date_month,

      -- metadata
      sfdc_opportunity._last_dbt_run,
      sfdc_record_type.business_process_id,
      sfdc_opportunity.days_since_last_activity,
      sfdc_opportunity.is_deleted,
      sfdc_opportunity.last_activity_date,
      sfdc_record_type.record_type_description,
      sfdc_opportunity.record_type_id,
      sfdc_record_type.record_type_label,
      sfdc_record_type.record_type_modifying_object_type,
      sfdc_record_type.record_type_name,
      MD5((DATE_TRUNC('month', sfdc_opportunity.close_date)::DATE)||UPPER(opportunity_owner.team))      AS region_quota_id,
      MD5((DATE_TRUNC('month', sfdc_opportunity.close_date)::DATE)||UPPER(opportunity_owner.name))      AS sales_quota_id

    FROM sfdc_opportunity
    INNER JOIN sfdc_opportunity_stage
      ON sfdc_opportunity.stage_name = sfdc_opportunity_stage.primary_label
    INNER JOIN date_details close_date_detail
      ON close_date_detail.date_actual = sfdc_opportunity.close_date::DATE
    INNER JOIN date_details created_date_detail
      ON created_date_detail.date_actual = sfdc_opportunity.created_date::DATE
    LEFT JOIN sfdc_lead_source
      ON sfdc_opportunity.lead_source = sfdc_lead_source.initial_source
    LEFT JOIN sfdc_users_xf opportunity_owner
      ON sfdc_opportunity.owner_id = opportunity_owner.user_id
    LEFT JOIN sfdc_record_type
      ON sfdc_opportunity.record_type_id = sfdc_record_type.record_type_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_opportunity.account_id
    LEFT JOIN date_details sales_accepted_date
      ON sfdc_opportunity.sales_accepted_date::DATE = sales_accepted_date.date_actual
    LEFT JOIN date_details start_date
      ON sfdc_opportunity.subscription_start_date::DATE = start_date.date_actual
    LEFT JOIN date_details sales_qualified_date
      ON sfdc_opportunity.sales_qualified_date::DATE = sales_qualified_date.date_actual
    LEFT JOIN date_details iacv_created_date
      ON iacv_created_date.date_actual = sfdc_opportunity.iacv_created_date::DATE
    LEFT JOIN sfdc_users_xf account_owner
      ON account_owner.user_id = sfdc_account.owner_id
    LEFT JOIN sales_admin_hierarchy
      ON sfdc_opportunity.opportunity_id = sales_admin_hierarchy.opportunity_id
)

SELECT *
FROM layered28:Tae2,WITH budget AS (

     SELECT *
     FROM {{ ref('netsuite_budget') }}

), budget_category AS (

     SELECT *
     FROM {{ ref('netsuite_budget_category') }}

), accounts AS (

     SELECT *
     FROM {{ ref('netsuite_accounts_xf') }}

), accounting_periods AS (

     SELECT *
     FROM {{ ref('netsuite_accounting_periods') }}

), departments AS (

     SELECT *
     FROM {{ ref('netsuite_departments_xf') }}

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM {{ref('date_details')}}

), cost_category AS (

     SELECT *
     FROM {{ref('netsuite_expense_cost_category')}}

), budget_forecast_cogs_opex AS (

    SELECT
      a.account_id,
      a.account_number || ' - ' || a.account_name                                 AS unique_account_name,
      a.account_name,
      a.account_full_name,
      a.account_number,
      a.parent_account_number,
      a.unique_account_number,
      ap.accounting_period_id,
      ap.accounting_period_starting_date::DATE                                    AS accounting_period,
      ap.accounting_period_name,
      ap.accounting_period_full_name,
      d.department_id,
      d.department_name,
      COALESCE(d.parent_department_name, 'zNeed Accounting Reclass')              AS parent_department_name,
      bc.budget_category,
      CASE WHEN account_number BETWEEN '5000' AND '5999' THEN '2-cost of sales'
           WHEN account_number BETWEEN '6000' AND '6999' THEN '3-expense'
      END                                                                         AS income_statement_grouping,
      SUM(CASE WHEN b.budget_amount IS NULL THEN 0
               ELSE b.budget_amount
          END)                                                                    AS budget_amount
    FROM budget b
    LEFT JOIN budget_category bc
      ON b.category_id = bc.budget_category_id
    LEFT JOIN accounts a
      ON b.account_id = a.account_id
    LEFT JOIN accounting_periods ap
      ON b.accounting_period_id = ap.accounting_period_id
    LEFT JOIN departments d
      ON b.department_id = d.department_id
    WHERE ap.fiscal_calendar_id = 2
      AND a.account_number between '5000' and '6999'
    {{ dbt_utils.group_by(n=16) }}

), cost_category_grouping AS (

    SELECT b.*,
           dd.fiscal_year,
           dd.fiscal_quarter,
           dd.fiscal_quarter_name,
           cc.cost_category_level_1,
           cc.cost_category_level_2
    FROM budget_forecast_cogs_opex b
    LEFT JOIN date_details dd
      ON dd.first_day_of_month = b.accounting_period
    LEFT JOIN cost_category cc
      ON b.unique_account_name = cc.unique_account_name

)

SELECT *
FROM cost_category_grouping
ORDER BY accounting_period_id, account_full_name29:Tafe,WITH budget AS (

     SELECT *
     FROM "PROD".legacy.netsuite_budget

), budget_category AS (

     SELECT *
     FROM "PROD".legacy.netsuite_budget_category

), accounts AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounts_xf

), accounting_periods AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounting_periods

), departments AS (

     SELECT *
     FROM "PROD".legacy.netsuite_departments_xf

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM "PROD".legacy.date_details

), cost_category AS (

     SELECT *
     FROM "PROD".legacy.netsuite_expense_cost_category

), budget_forecast_cogs_opex AS (

    SELECT
      a.account_id,
      a.account_number || ' - ' || a.account_name                                 AS unique_account_name,
      a.account_name,
      a.account_full_name,
      a.account_number,
      a.parent_account_number,
      a.unique_account_number,
      ap.accounting_period_id,
      ap.accounting_period_starting_date::DATE                                    AS accounting_period,
      ap.accounting_period_name,
      ap.accounting_period_full_name,
      d.department_id,
      d.department_name,
      COALESCE(d.parent_department_name, 'zNeed Accounting Reclass')              AS parent_department_name,
      bc.budget_category,
      CASE WHEN account_number BETWEEN '5000' AND '5999' THEN '2-cost of sales'
           WHEN account_number BETWEEN '6000' AND '6999' THEN '3-expense'
      END                                                                         AS income_statement_grouping,
      SUM(CASE WHEN b.budget_amount IS NULL THEN 0
               ELSE b.budget_amount
          END)                                                                    AS budget_amount
    FROM budget b
    LEFT JOIN budget_category bc
      ON b.category_id = bc.budget_category_id
    LEFT JOIN accounts a
      ON b.account_id = a.account_id
    LEFT JOIN accounting_periods ap
      ON b.accounting_period_id = ap.accounting_period_id
    LEFT JOIN departments d
      ON b.department_id = d.department_id
    WHERE ap.fiscal_calendar_id = 2
      AND a.account_number between '5000' and '6999'
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16

), cost_category_grouping AS (

    SELECT b.*,
           dd.fiscal_year,
           dd.fiscal_quarter,
           dd.fiscal_quarter_name,
           cc.cost_category_level_1,
           cc.cost_category_level_2
    FROM budget_forecast_cogs_opex b
    LEFT JOIN date_details dd
      ON dd.first_day_of_month = b.accounting_period
    LEFT JOIN cost_category cc
      ON b.unique_account_name = cc.unique_account_name

)

SELECT *
FROM cost_category_grouping
ORDER BY accounting_period_id, account_full_name2a:T166a,{{ config(
    tags=["mnpi_exception"]
) }}

WITH date_details AS (

    SELECT *
    FROM {{ ref('date_details') }}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_api_sandbox_subscription AS (

    SELECT *
    FROM {{ ref('zuora_api_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_api_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM {{ ref('zuora_api_sandbox_account_source') }}

), joined AS (

    SELECT
      zuora_api_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                             AS dim_crm_account_id,
      zuora_api_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_api_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_api_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_api_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_api_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_api_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_api_sandbox_subscription.created_by_id,
      zuora_api_sandbox_subscription.updated_by_id,
      zuora_api_sandbox_subscription.subscription_name,
      zuora_api_sandbox_subscription.subscription_name_slugify,
      zuora_api_sandbox_subscription.subscription_status,
      zuora_api_sandbox_subscription.version                                                AS subscription_version,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_api_sandbox_subscription.current_term,
      zuora_api_sandbox_subscription.renewal_term,
      zuora_api_sandbox_subscription.renewal_term_period_type,
      zuora_api_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_api_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                 AS subscription_sales_type,

      --Date Information
      zuora_api_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_api_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                              AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                   AS subscription_end_fiscal_quarter_name_fy,
      zuora_api_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_api_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_api_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_api_sandbox_subscription.current_term, zuora_api_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                   AS second_active_renewal_month,
      zuora_api_sandbox_subscription.auto_renew_native_hist,
      zuora_api_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_api_sandbox_subscription.turn_on_cloud_licensing,
      -- zuora_api_sandbox_subscription.turn_on_operational_metrics,
      -- zuora_api_sandbox_subscription.contract_operational_metrics,
      zuora_api_sandbox_subscription.turn_on_usage_ping_required_metrics,
      zuora_api_sandbox_subscription.contract_auto_renewal,
      zuora_api_sandbox_subscription.turn_on_auto_renewal,
      zuora_api_sandbox_subscription.contract_seat_reconciliation,
      zuora_api_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_api_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_api_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_api_sandbox_subscription
    INNER JOIN zuora_api_sandbox_account
      ON zuora_api_sandbox_subscription.account_id = zuora_api_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_api_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ken_aguilar",
    updated_by="@ken_aguilar",
    created_date="2021-08-31",
    updated_date="2021-08-31"
) }}2b:T1762,

WITH date_details AS (

    SELECT *
    FROM "PROD".legacy.date_details

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_api_sandbox_subscription AS (

    SELECT *
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_api_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM "PREP".zuora_api_sandbox.zuora_api_sandbox_account_source

), joined AS (

    SELECT
      zuora_api_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                             AS dim_crm_account_id,
      zuora_api_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_api_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_api_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_api_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_api_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_api_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_api_sandbox_subscription.created_by_id,
      zuora_api_sandbox_subscription.updated_by_id,
      zuora_api_sandbox_subscription.subscription_name,
      zuora_api_sandbox_subscription.subscription_name_slugify,
      zuora_api_sandbox_subscription.subscription_status,
      zuora_api_sandbox_subscription.version                                                AS subscription_version,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_api_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_api_sandbox_subscription.current_term,
      zuora_api_sandbox_subscription.renewal_term,
      zuora_api_sandbox_subscription.renewal_term_period_type,
      zuora_api_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_api_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                 AS subscription_sales_type,

      --Date Information
      zuora_api_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_api_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                              AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                   AS subscription_end_fiscal_quarter_name_fy,
      zuora_api_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_api_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_api_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_api_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_api_sandbox_subscription.current_term, zuora_api_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                   AS second_active_renewal_month,
      zuora_api_sandbox_subscription.auto_renew_native_hist,
      zuora_api_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_api_sandbox_subscription.turn_on_cloud_licensing,
      -- zuora_api_sandbox_subscription.turn_on_operational_metrics,
      -- zuora_api_sandbox_subscription.contract_operational_metrics,
      zuora_api_sandbox_subscription.turn_on_usage_ping_required_metrics,
      zuora_api_sandbox_subscription.contract_auto_renewal,
      zuora_api_sandbox_subscription.turn_on_auto_renewal,
      zuora_api_sandbox_subscription.contract_seat_reconciliation,
      zuora_api_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_api_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_api_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_api_sandbox_subscription
    INNER JOIN zuora_api_sandbox_account
      ON zuora_api_sandbox_subscription.account_id = zuora_api_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_api_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_api_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

SELECT
      *,
      '@ken_aguilar'::VARCHAR       AS created_by,
      '@ken_aguilar'::VARCHAR       AS updated_by,
      '2021-08-31'::DATE        AS model_created_date,
      '2021-08-31'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined2c:Ta3e,{{ config({
    "materialized": "table"
    })
}}


WITH licenses AS (
 
  SELECT *
  FROM {{ ref('customers_db_licenses_source') }}
  WHERE (license_md5 IS NOT NULL OR
         license_sha256 IS NOT NULL)
    AND is_trial = False
    -- Remove internal test licenses
    AND NOT (email LIKE '%@gitlab.com' AND LOWER(company) LIKE '%gitlab%')
    
), usage_data AS (

  SELECT id,
         license_md5,
         license_sha256,
         created_at
  FROM {{ ref('version_usage_data_unpacked') }}
  WHERE license_md5 IS NOT NULL OR
        license_sha256 IS NOT NULL

), usage_data_md5 AS (

  SELECT id,
         license_md5,
         created_at
  FROM usage_data
  WHERE license_md5 IS NOT NULL

), usage_data_sha256 AS (

  SELECT id,
         license_sha256,
         created_at
  FROM usage_data
  WHERE license_sha256 IS NOT NULL

),week_spine AS (

  SELECT DISTINCT
    DATE_TRUNC('week', date_actual) AS week
  FROM {{ ref('date_details') }}
  WHERE date_details.date_actual BETWEEN '2017-04-01' AND CURRENT_DATE

), grouped AS (

  SELECT
    week_spine.week,
    licenses.license_id,
    licenses.license_md5,
    licenses.license_sha256,
    licenses.zuora_subscription_id,
    licenses.plan_code                                           AS product_category,
    MAX(IFF(COALESCE(usage_data_md5.id, usage_data_sha256.id) IS NOT NULL, 1, 0)) AS did_send_usage_data,
    COUNT(DISTINCT COALESCE(usage_data_md5.id, usage_data_sha256.id))             AS count_usage_data_pings,
    MIN(COALESCE(usage_data_md5.created_at, usage_data_sha256.created_at))        AS min_usage_data_created_at,
    MAX(COALESCE(usage_data_md5.created_at, usage_data_sha256.created_at))        AS max_usage_data_created_at
  FROM week_spine
    LEFT JOIN licenses
      ON week_spine.week BETWEEN licenses.license_start_date AND {{ coalesce_to_infinity("licenses.license_expire_date") }}
    LEFT JOIN usage_data_md5
      ON licenses.license_md5 = usage_data_md5.license_md5
      AND week_spine.week = DATE_TRUNC('week', usage_data_md5.created_at)
    LEFT JOIN usage_data_sha256
      ON licenses.license_sha256 = usage_data_sha256.license_sha256
      AND week_spine.week = DATE_TRUNC('week', usage_data_sha256.created_at)
  {{ dbt_utils.group_by(n=6) }}

), alphabetized AS (

    SELECT
      week,
      license_id,
      license_md5,
      license_sha256,
      product_category,
      zuora_subscription_id,

      --metadata
      count_usage_data_pings,
      did_send_usage_data::BOOLEAN AS did_send_usage_data,
      min_usage_data_created_at,
      max_usage_data_created_at
    FROM grouped

)

SELECT *
FROM alphabetized2d:Ta10,


WITH licenses AS (
 
  SELECT *
  FROM "PREP".customers.customers_db_licenses_source
  WHERE (license_md5 IS NOT NULL OR
         license_sha256 IS NOT NULL)
    AND is_trial = False
    -- Remove internal test licenses
    AND NOT (email LIKE '%@gitlab.com' AND LOWER(company) LIKE '%gitlab%')
    
), usage_data AS (

  SELECT id,
         license_md5,
         license_sha256,
         created_at
  FROM "PROD".legacy.version_usage_data_unpacked
  WHERE license_md5 IS NOT NULL OR
        license_sha256 IS NOT NULL

), usage_data_md5 AS (

  SELECT id,
         license_md5,
         created_at
  FROM usage_data
  WHERE license_md5 IS NOT NULL

), usage_data_sha256 AS (

  SELECT id,
         license_sha256,
         created_at
  FROM usage_data
  WHERE license_sha256 IS NOT NULL

),week_spine AS (

  SELECT DISTINCT
    DATE_TRUNC('week', date_actual) AS week
  FROM "PROD".legacy.date_details
  WHERE date_details.date_actual BETWEEN '2017-04-01' AND CURRENT_DATE

), grouped AS (

  SELECT
    week_spine.week,
    licenses.license_id,
    licenses.license_md5,
    licenses.license_sha256,
    licenses.zuora_subscription_id,
    licenses.plan_code                                           AS product_category,
    MAX(IFF(COALESCE(usage_data_md5.id, usage_data_sha256.id) IS NOT NULL, 1, 0)) AS did_send_usage_data,
    COUNT(DISTINCT COALESCE(usage_data_md5.id, usage_data_sha256.id))             AS count_usage_data_pings,
    MIN(COALESCE(usage_data_md5.created_at, usage_data_sha256.created_at))        AS min_usage_data_created_at,
    MAX(COALESCE(usage_data_md5.created_at, usage_data_sha256.created_at))        AS max_usage_data_created_at
  FROM week_spine
    LEFT JOIN licenses
      ON week_spine.week BETWEEN licenses.license_start_date AND COALESCE( licenses.license_expire_date, '9999-12-31'::TIMESTAMP)
    LEFT JOIN usage_data_md5
      ON licenses.license_md5 = usage_data_md5.license_md5
      AND week_spine.week = DATE_TRUNC('week', usage_data_md5.created_at)
    LEFT JOIN usage_data_sha256
      ON licenses.license_sha256 = usage_data_sha256.license_sha256
      AND week_spine.week = DATE_TRUNC('week', usage_data_sha256.created_at)
  group by 1,2,3,4,5,6

), alphabetized AS (

    SELECT
      week,
      license_id,
      license_md5,
      license_sha256,
      product_category,
      zuora_subscription_id,

      --metadata
      count_usage_data_pings,
      did_send_usage_data::BOOLEAN AS did_send_usage_data,
      min_usage_data_created_at,
      max_usage_data_created_at
    FROM grouped

)

SELECT *
FROM alphabetized2e:Tb69,{{ config(
    tags=["mnpi_exception"],
    materialized="incremental",
    unique_key="mau_id"
) }}


WITH date_details AS (
  
    SELECT *
    FROM {{ ref('date_details') }}
  
)

, gitlab_dotcom_usage_data_events AS (
  
    SELECT *
    FROM {{ ref('gitlab_dotcom_usage_data_events') }}
    {% if is_incremental() %}

      WHERE DATE_TRUNC('month', event_created_at) >= (SELECT DATEADD('days', -1, MAX(smau_month)) FROM {{this}})

    {% endif %}
      
)

, gitlab_subscriptions AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base') }}
)

, plans AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_plans') }}

)

SELECT 
  -- primary key
  {{ dbt_utils.surrogate_key(['gitlab_dotcom_usage_data_events.namespace_id', 
                              'user_id', 
                              'event_name', 
                              'DATEADD(month, -1, date_day)']) }}                      AS mau_id,
  DATEADD('month', -1, date_day)                                                         AS smau_month,
  
  -- ids 
  gitlab_dotcom_usage_data_events.user_id,
  gitlab_dotcom_usage_data_events.namespace_id,
  
  
  -- user dimensions
  CASE
    WHEN gitlab_subscriptions.is_trial
      THEN 'trial'
    ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
  END                                                                                    AS plan_id_at_smau_month_end,
  CASE
    WHEN gitlab_subscriptions.is_trial
      THEN 'trial'
    ELSE COALESCE(plans.plan_name, 'free')
  END                                                                                    AS plan_name_at_smau_month_end,
  
  -- event data
  event_name,
  stage_name,
  is_representative_of_stage,
  
  --metadata
  -- aggregating because user_created_at and namespace_created_at can be impacted by late arriving dimensions
  MAX(DATEDIFF('day', user_created_at, date_day))                                        AS days_since_user_creation,
  MAX(DATEDIFF('day', namespace_created_at, date_day))                                   AS days_since_namespace_creation,
  
  COUNT(*)                                                                               AS event_count,
  COUNT(DISTINCT TO_DATE(event_created_at))                                              AS event_day_count
FROM date_details
INNER JOIN gitlab_dotcom_usage_data_events 
  ON gitlab_dotcom_usage_data_events.event_created_at BETWEEN DATEADD('day', -28, date_details.date_day) AND date_day 
LEFT JOIN gitlab_subscriptions
  ON gitlab_dotcom_usage_data_events.namespace_id = gitlab_subscriptions.namespace_id
  -- taking the last day of the month
  AND DATEADD('day', -1, date_day) BETWEEN gitlab_subscriptions.valid_from
    AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
LEFT JOIN plans
  ON gitlab_subscriptions.plan_id = plans.plan_id
WHERE day_of_month = 1
{{ dbt_utils.group_by(n=9) }}2f:Tb56,


WITH date_details AS (
  
    SELECT *
    FROM "PROD".legacy.date_details
  
)

, gitlab_dotcom_usage_data_events AS (
  
    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_usage_data_events
    

      WHERE DATE_TRUNC('month', event_created_at) >= (SELECT DATEADD('days', -1, MAX(smau_month)) FROM "PROD".legacy.gitlab_dotcom_monthly_stage_active_users)

    
      
)

, gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id
)

, plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

)

SELECT 
  -- primary key
  md5(cast(coalesce(cast(gitlab_dotcom_usage_data_events.namespace_id as 
    varchar
), '') || '-' || coalesce(cast(user_id as 
    varchar
), '') || '-' || coalesce(cast(event_name as 
    varchar
), '') || '-' || coalesce(cast(DATEADD(month, -1, date_day) as 
    varchar
), '') as 
    varchar
))                      AS mau_id,
  DATEADD('month', -1, date_day)                                                         AS smau_month,
  
  -- ids 
  gitlab_dotcom_usage_data_events.user_id,
  gitlab_dotcom_usage_data_events.namespace_id,
  
  
  -- user dimensions
  CASE
    WHEN gitlab_subscriptions.is_trial
      THEN 'trial'
    ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
  END                                                                                    AS plan_id_at_smau_month_end,
  CASE
    WHEN gitlab_subscriptions.is_trial
      THEN 'trial'
    ELSE COALESCE(plans.plan_name, 'free')
  END                                                                                    AS plan_name_at_smau_month_end,
  
  -- event data
  event_name,
  stage_name,
  is_representative_of_stage,
  
  --metadata
  -- aggregating because user_created_at and namespace_created_at can be impacted by late arriving dimensions
  MAX(DATEDIFF('day', user_created_at, date_day))                                        AS days_since_user_creation,
  MAX(DATEDIFF('day', namespace_created_at, date_day))                                   AS days_since_namespace_creation,
  
  COUNT(*)                                                                               AS event_count,
  COUNT(DISTINCT TO_DATE(event_created_at))                                              AS event_day_count
FROM date_details
INNER JOIN gitlab_dotcom_usage_data_events 
  ON gitlab_dotcom_usage_data_events.event_created_at BETWEEN DATEADD('day', -28, date_details.date_day) AND date_day 
LEFT JOIN gitlab_subscriptions
  ON gitlab_dotcom_usage_data_events.namespace_id = gitlab_subscriptions.namespace_id
  -- taking the last day of the month
  AND DATEADD('day', -1, date_day) BETWEEN gitlab_subscriptions.valid_from
    AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
LEFT JOIN plans
  ON gitlab_subscriptions.plan_id = plans.plan_id
WHERE day_of_month = 1
group by 1,2,3,4,5,6,7,8,930:T1a0a,-- fields with corresponding columns in sfdc_opportunity_xf
{% set fields_to_use = [
    'amount','closedate','forecastcategoryname','incremental_acv_2__c',
    'leadsource','renewal_acv__c','renewal_amount__c','sales_accepted_date__c',
    'sales_qualified_date__c','sales_segmentation_employees_o__c','sql_source__c','stagename','swing_deal__c',
    'type','ultimate_parent_sales_segment_emp_o__c','ultimate_parent_sales_segment_o__c',
    'upside_iacv__c', 'recurring_amount__c', 'true_up_amount__c', 'proserv_amount__c',
    'other_non_recurring_amount__c', 'arr_net__c', 'arr_basis__c', 'arr__c', 'start_date__c',
    'end_date__c'
] %}

WITH date_spine AS (

    SELECT DISTINCT
      DATE_TRUNC('day', date_day) AS date_actual
    FROM {{ref("date_details")}}
    WHERE date_day >= '2019-02-01'::DATE
      AND date_day <= '2019-10-01'::DATE

), net_arr_net_iacv_conversion_factors AS (

    SELECT *
    FROM {{ref('sheetload_net_arr_net_iacv_conversion_factors_source')}}

), first_snapshot AS (

    SELECT
      id                   AS opportunity_id,
      valid_to,
      {% for field in fields_to_use %}
        {{field}}::VARCHAR AS {{field}},
      {% endfor %}
      createddate          AS created_at,
      valid_from
    FROM {{ref('sfdc_opportunity_snapshots_base')}}
    WHERE date_actual = '2019-10-01'::DATE
      AND isdeleted = FALSE

), base AS (

    SELECT
      field_history.opportunity_id,
      field_modified_at                AS valid_to,
      opportunity_field,
      COALESCE(old_value, 'true null') AS old_value --retain record of fields that transitioned from NULL to another state
    FROM {{ref('sfdc_opportunity_field_history')}} field_history
    INNER JOIN first_snapshot
      ON field_history.field_modified_at <= first_snapshot.valid_from
     AND field_history.opportunity_id = first_snapshot.opportunity_id
    WHERE opportunity_field IN ('{{ fields_to_use | join ("', '") }}')

), unioned AS (

    SELECT *
    FROM first_snapshot

    UNION

    SELECT
      *,
      NULL::TIMESTAMP_TZ AS created_at,
      NULL::TIMESTAMP_TZ AS valid_from
    FROM base
      PIVOT(MAX(old_value) FOR opportunity_field IN ('{{ fields_to_use | join ("', '") }}'))

), filled AS (

    SELECT
      opportunity_id,
      {% for field in fields_to_use %}
        FIRST_VALUE({{field}}) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS {{field}},
      {% endfor %}
      FIRST_VALUE(created_at) IGNORE NULLS
        OVER (PARTITION BY opportunity_id ORDER BY valid_to) AS created_date,
      COALESCE(
        LAG(valid_to) OVER (PARTITION BY opportunity_id ORDER BY valid_to),
        created_date
        )                                                    AS valid_from,
      valid_to
    FROM unioned

), cleaned AS (

    SELECT
      opportunity_id,
      {% for field in fields_to_use %}
        IFF({{field}} = 'true null', NULL, {{field}}) AS {{field}},
      {% endfor %}
      created_date,
      valid_from,
      COALESCE(
        LEAD(valid_from) OVER (PARTITION BY opportunity_id ORDER BY valid_from),
        valid_to
        )                                             AS valid_to
    FROM filled
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY opportunity_id, DATE_TRUNC('day', valid_from)
        ORDER BY valid_from DESC
      ) = 1

), joined AS (

    SELECT
      date_actual,
      valid_from,
      valid_to,
      IFF(valid_to IS NULL, TRUE, FALSE) AS is_currently_valid,
      cleaned.opportunity_id,
      closedate::DATE                    AS close_date,
      created_date::DATE                 AS created_date,
      sql_source__c                      AS generated_source,
      leadsource                         AS lead_source,
      COALESCE({{ sales_segment_cleaning('ultimate_parent_sales_segment_emp_o__c') }},
               {{ sales_segment_cleaning('ultimate_parent_sales_segment_o__c') }})
                                         AS parent_segment,
      sales_accepted_date__c::DATE       AS sales_accepted_date,
      sales_qualified_date__c::DATE      AS sales_qualified_date,
      start_date__c::DATE                AS subscription_start_date,
      end_date__c::DATE                  AS subscription_end_date,
      COALESCE({{ sales_segment_cleaning('sales_segmentation_employees_o__c') }},
                'Unknown')
                                         AS sales_segment,
      type                               AS sales_type,
      {{  sfdc_source_buckets('leadsource') }}
      stagename                          AS stage_name,
      {{sfdc_deal_size('incremental_acv_2__c::FLOAT', 'deal_size')}},
      forecastcategoryname               AS forecast_category_name,
      incremental_acv_2__c::FLOAT        AS forecasted_iacv,
      swing_deal__c                      AS is_swing_deal,
      renewal_acv__c::FLOAT              AS renewal_acv,
      renewal_amount__c::FLOAT           AS renewal_amount,
      amount::FLOAT                      AS total_contract_value,
      amount::FLOAT                      AS amount,
      upside_iacv__c::FLOAT              AS upside_iacv,
      CASE
        WHEN stagename IN ('8-Closed Lost', 'Closed Lost') AND type = 'Renewal' THEN renewal_acv * -1
        WHEN stagename IN ('Closed Won')                                        THEN forecasted_iacv
        ELSE 0
      END							     AS net_iacv,
      arr_net__c                         AS net_arr,
      CASE
        WHEN closedate::DATE >= '2018-02-01' THEN COALESCE((net_iacv * ratio_net_iacv_to_net_arr), net_iacv)
        ELSE NULL
      END                                AS net_arr_converted,
      CASE
        WHEN closedate::DATE <= '2021-01-31' THEN net_arr_converted
        ELSE net_arr
      END                                AS net_arr_final,
      arr_basis__c                       AS arr_basis,
      arr__c                             AS arr,
      recurring_amount__c                AS recurring_amount,
      true_up_amount__c                  AS true_up_amount,
      proserv_amount__c                  AS proserv_amount,
      other_non_recurring_amount__c      AS other_non_recurring_amount
    FROM cleaned
    INNER JOIN date_spine
      ON cleaned.valid_from::DATE <= date_spine.date_actual
      AND (cleaned.valid_to::DATE > date_spine.date_actual OR cleaned.valid_to IS NULL)
    LEFT JOIN net_arr_net_iacv_conversion_factors
      ON cleaned.opportunity_id = net_arr_net_iacv_conversion_factors.opportunity_id

)

SELECT *
FROM joined
ORDER BY 1,231:T5e3a,-- fields with corresponding columns in sfdc_opportunity_xf


WITH date_spine AS (

    SELECT DISTINCT
      DATE_TRUNC('day', date_day) AS date_actual
    FROM "PROD".legacy.date_details
    WHERE date_day >= '2019-02-01'::DATE
      AND date_day <= '2019-10-01'::DATE

), net_arr_net_iacv_conversion_factors AS (

    SELECT *
    FROM "PREP".sheetload.sheetload_net_arr_net_iacv_conversion_factors_source

), first_snapshot AS (

    SELECT
      id                   AS opportunity_id,
      valid_to,
      
        amount::VARCHAR AS amount,
      
        closedate::VARCHAR AS closedate,
      
        forecastcategoryname::VARCHAR AS forecastcategoryname,
      
        incremental_acv_2__c::VARCHAR AS incremental_acv_2__c,
      
        leadsource::VARCHAR AS leadsource,
      
        renewal_acv__c::VARCHAR AS renewal_acv__c,
      
        renewal_amount__c::VARCHAR AS renewal_amount__c,
      
        sales_accepted_date__c::VARCHAR AS sales_accepted_date__c,
      
        sales_qualified_date__c::VARCHAR AS sales_qualified_date__c,
      
        sales_segmentation_employees_o__c::VARCHAR AS sales_segmentation_employees_o__c,
      
        sql_source__c::VARCHAR AS sql_source__c,
      
        stagename::VARCHAR AS stagename,
      
        swing_deal__c::VARCHAR AS swing_deal__c,
      
        type::VARCHAR AS type,
      
        ultimate_parent_sales_segment_emp_o__c::VARCHAR AS ultimate_parent_sales_segment_emp_o__c,
      
        ultimate_parent_sales_segment_o__c::VARCHAR AS ultimate_parent_sales_segment_o__c,
      
        upside_iacv__c::VARCHAR AS upside_iacv__c,
      
        recurring_amount__c::VARCHAR AS recurring_amount__c,
      
        true_up_amount__c::VARCHAR AS true_up_amount__c,
      
        proserv_amount__c::VARCHAR AS proserv_amount__c,
      
        other_non_recurring_amount__c::VARCHAR AS other_non_recurring_amount__c,
      
        arr_net__c::VARCHAR AS arr_net__c,
      
        arr_basis__c::VARCHAR AS arr_basis__c,
      
        arr__c::VARCHAR AS arr__c,
      
        start_date__c::VARCHAR AS start_date__c,
      
        end_date__c::VARCHAR AS end_date__c,
      
      createddate          AS created_at,
      valid_from
    FROM "PROD".restricted_safe_legacy.sfdc_opportunity_snapshots
    WHERE date_actual = '2019-10-01'::DATE
      AND isdeleted = FALSE

), base AS (

    SELECT
      field_history.opportunity_id,
      field_modified_at                AS valid_to,
      opportunity_field,
      COALESCE(old_value, 'true null') AS old_value --retain record of fields that transitioned from NULL to another state
    FROM "PROD".restricted_safe_legacy.sfdc_opportunity_field_history field_history
    INNER JOIN first_snapshot
      ON field_history.field_modified_at <= first_snapshot.valid_from
     AND field_history.opportunity_id = first_snapshot.opportunity_id
    WHERE opportunity_field IN ('amount', 'closedate', 'forecastcategoryname', 'incremental_acv_2__c', 'leadsource', 'renewal_acv__c', 'renewal_amount__c', 'sales_accepted_date__c', 'sales_qualified_date__c', 'sales_segmentation_employees_o__c', 'sql_source__c', 'stagename', 'swing_deal__c', 'type', 'ultimate_parent_sales_segment_emp_o__c', 'ultimate_parent_sales_segment_o__c', 'upside_iacv__c', 'recurring_amount__c', 'true_up_amount__c', 'proserv_amount__c', 'other_non_recurring_amount__c', 'arr_net__c', 'arr_basis__c', 'arr__c', 'start_date__c', 'end_date__c')

), unioned AS (

    SELECT *
    FROM first_snapshot

    UNION

    SELECT
      *,
      NULL::TIMESTAMP_TZ AS created_at,
      NULL::TIMESTAMP_TZ AS valid_from
    FROM base
      PIVOT(MAX(old_value) FOR opportunity_field IN ('amount', 'closedate', 'forecastcategoryname', 'incremental_acv_2__c', 'leadsource', 'renewal_acv__c', 'renewal_amount__c', 'sales_accepted_date__c', 'sales_qualified_date__c', 'sales_segmentation_employees_o__c', 'sql_source__c', 'stagename', 'swing_deal__c', 'type', 'ultimate_parent_sales_segment_emp_o__c', 'ultimate_parent_sales_segment_o__c', 'upside_iacv__c', 'recurring_amount__c', 'true_up_amount__c', 'proserv_amount__c', 'other_non_recurring_amount__c', 'arr_net__c', 'arr_basis__c', 'arr__c', 'start_date__c', 'end_date__c'))

), filled AS (

    SELECT
      opportunity_id,
      
        FIRST_VALUE(amount) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS amount,
      
        FIRST_VALUE(closedate) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS closedate,
      
        FIRST_VALUE(forecastcategoryname) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS forecastcategoryname,
      
        FIRST_VALUE(incremental_acv_2__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS incremental_acv_2__c,
      
        FIRST_VALUE(leadsource) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS leadsource,
      
        FIRST_VALUE(renewal_acv__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS renewal_acv__c,
      
        FIRST_VALUE(renewal_amount__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS renewal_amount__c,
      
        FIRST_VALUE(sales_accepted_date__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS sales_accepted_date__c,
      
        FIRST_VALUE(sales_qualified_date__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS sales_qualified_date__c,
      
        FIRST_VALUE(sales_segmentation_employees_o__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS sales_segmentation_employees_o__c,
      
        FIRST_VALUE(sql_source__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS sql_source__c,
      
        FIRST_VALUE(stagename) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS stagename,
      
        FIRST_VALUE(swing_deal__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS swing_deal__c,
      
        FIRST_VALUE(type) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS type,
      
        FIRST_VALUE(ultimate_parent_sales_segment_emp_o__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS ultimate_parent_sales_segment_emp_o__c,
      
        FIRST_VALUE(ultimate_parent_sales_segment_o__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS ultimate_parent_sales_segment_o__c,
      
        FIRST_VALUE(upside_iacv__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS upside_iacv__c,
      
        FIRST_VALUE(recurring_amount__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS recurring_amount__c,
      
        FIRST_VALUE(true_up_amount__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS true_up_amount__c,
      
        FIRST_VALUE(proserv_amount__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS proserv_amount__c,
      
        FIRST_VALUE(other_non_recurring_amount__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS other_non_recurring_amount__c,
      
        FIRST_VALUE(arr_net__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS arr_net__c,
      
        FIRST_VALUE(arr_basis__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS arr_basis__c,
      
        FIRST_VALUE(arr__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS arr__c,
      
        FIRST_VALUE(start_date__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS start_date__c,
      
        FIRST_VALUE(end_date__c) IGNORE NULLS
          OVER (
                 PARTITION BY opportunity_id
                 ORDER BY valid_to
                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
               )                                             AS end_date__c,
      
      FIRST_VALUE(created_at) IGNORE NULLS
        OVER (PARTITION BY opportunity_id ORDER BY valid_to) AS created_date,
      COALESCE(
        LAG(valid_to) OVER (PARTITION BY opportunity_id ORDER BY valid_to),
        created_date
        )                                                    AS valid_from,
      valid_to
    FROM unioned

), cleaned AS (

    SELECT
      opportunity_id,
      
        IFF(amount = 'true null', NULL, amount) AS amount,
      
        IFF(closedate = 'true null', NULL, closedate) AS closedate,
      
        IFF(forecastcategoryname = 'true null', NULL, forecastcategoryname) AS forecastcategoryname,
      
        IFF(incremental_acv_2__c = 'true null', NULL, incremental_acv_2__c) AS incremental_acv_2__c,
      
        IFF(leadsource = 'true null', NULL, leadsource) AS leadsource,
      
        IFF(renewal_acv__c = 'true null', NULL, renewal_acv__c) AS renewal_acv__c,
      
        IFF(renewal_amount__c = 'true null', NULL, renewal_amount__c) AS renewal_amount__c,
      
        IFF(sales_accepted_date__c = 'true null', NULL, sales_accepted_date__c) AS sales_accepted_date__c,
      
        IFF(sales_qualified_date__c = 'true null', NULL, sales_qualified_date__c) AS sales_qualified_date__c,
      
        IFF(sales_segmentation_employees_o__c = 'true null', NULL, sales_segmentation_employees_o__c) AS sales_segmentation_employees_o__c,
      
        IFF(sql_source__c = 'true null', NULL, sql_source__c) AS sql_source__c,
      
        IFF(stagename = 'true null', NULL, stagename) AS stagename,
      
        IFF(swing_deal__c = 'true null', NULL, swing_deal__c) AS swing_deal__c,
      
        IFF(type = 'true null', NULL, type) AS type,
      
        IFF(ultimate_parent_sales_segment_emp_o__c = 'true null', NULL, ultimate_parent_sales_segment_emp_o__c) AS ultimate_parent_sales_segment_emp_o__c,
      
        IFF(ultimate_parent_sales_segment_o__c = 'true null', NULL, ultimate_parent_sales_segment_o__c) AS ultimate_parent_sales_segment_o__c,
      
        IFF(upside_iacv__c = 'true null', NULL, upside_iacv__c) AS upside_iacv__c,
      
        IFF(recurring_amount__c = 'true null', NULL, recurring_amount__c) AS recurring_amount__c,
      
        IFF(true_up_amount__c = 'true null', NULL, true_up_amount__c) AS true_up_amount__c,
      
        IFF(proserv_amount__c = 'true null', NULL, proserv_amount__c) AS proserv_amount__c,
      
        IFF(other_non_recurring_amount__c = 'true null', NULL, other_non_recurring_amount__c) AS other_non_recurring_amount__c,
      
        IFF(arr_net__c = 'true null', NULL, arr_net__c) AS arr_net__c,
      
        IFF(arr_basis__c = 'true null', NULL, arr_basis__c) AS arr_basis__c,
      
        IFF(arr__c = 'true null', NULL, arr__c) AS arr__c,
      
        IFF(start_date__c = 'true null', NULL, start_date__c) AS start_date__c,
      
        IFF(end_date__c = 'true null', NULL, end_date__c) AS end_date__c,
      
      created_date,
      valid_from,
      COALESCE(
        LEAD(valid_from) OVER (PARTITION BY opportunity_id ORDER BY valid_from),
        valid_to
        )                                             AS valid_to
    FROM filled
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY opportunity_id, DATE_TRUNC('day', valid_from)
        ORDER BY valid_from DESC
      ) = 1

), joined AS (

    SELECT
      date_actual,
      valid_from,
      valid_to,
      IFF(valid_to IS NULL, TRUE, FALSE) AS is_currently_valid,
      cleaned.opportunity_id,
      closedate::DATE                    AS close_date,
      created_date::DATE                 AS created_date,
      sql_source__c                      AS generated_source,
      leadsource                         AS lead_source,
      COALESCE(CASE WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) = 'smb' THEN 'SMB'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) IS NULL THEN 'SMB'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) = 'lrg' THEN 'Large'
     WHEN LOWER(ultimate_parent_sales_segment_emp_o__c) = 'jihu' THEN 'JiHu'
     WHEN ultimate_parent_sales_segment_emp_o__c IS NOT NULL THEN initcap(ultimate_parent_sales_segment_emp_o__c)
END,
               CASE WHEN LOWER(ultimate_parent_sales_segment_o__c) = 'smb' THEN 'SMB'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) IS NULL THEN 'SMB'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) = 'lrg' THEN 'Large'
     WHEN LOWER(ultimate_parent_sales_segment_o__c) = 'jihu' THEN 'JiHu'
     WHEN ultimate_parent_sales_segment_o__c IS NOT NULL THEN initcap(ultimate_parent_sales_segment_o__c)
END)
                                         AS parent_segment,
      sales_accepted_date__c::DATE       AS sales_accepted_date,
      sales_qualified_date__c::DATE      AS sales_qualified_date,
      start_date__c::DATE                AS subscription_start_date,
      end_date__c::DATE                  AS subscription_end_date,
      COALESCE(CASE WHEN LOWER(sales_segmentation_employees_o__c) = 'smb' THEN 'SMB'
     WHEN LOWER(sales_segmentation_employees_o__c) LIKE ('mid%market') THEN 'Mid-Market'
     WHEN LOWER(sales_segmentation_employees_o__c) = 'unknown' THEN 'SMB'
     WHEN LOWER(sales_segmentation_employees_o__c) IS NULL THEN 'SMB'
     WHEN LOWER(sales_segmentation_employees_o__c) = 'pubsec' THEN 'PubSec'
     WHEN LOWER(sales_segmentation_employees_o__c) = 'mm' THEN 'Mid-Market'
     WHEN LOWER(sales_segmentation_employees_o__c) = 'lrg' THEN 'Large'
     WHEN LOWER(sales_segmentation_employees_o__c) = 'jihu' THEN 'JiHu'
     WHEN sales_segmentation_employees_o__c IS NOT NULL THEN initcap(sales_segmentation_employees_o__c)
END,
                'Unknown')
                                         AS sales_segment,
      type                               AS sales_type,
      CASE
      WHEN leadsource in ('CORE Check-Up','Free Registration')
        THEN 'Core'
      WHEN leadsource in ('GitLab Subscription Portal', 'Gitlab.com', 'GitLab.com', 'Trial - Gitlab.com', 'Trial - GitLab.com')
        THEN 'GitLab.com'
      WHEN leadsource in ('Education', 'OSS')
        THEN 'Marketing/Community'
      WHEN leadsource in ('CE Download', 'Demo', 'Drift', 'Email Request', 'Email Subscription', 'Gated Content - General', 'Gated Content - Report', 'Gated Content - Video'
                           , 'Gated Content - Whitepaper', 'Live Event', 'Newsletter', 'Request - Contact', 'Request - Professional Services', 'Request - Public Sector'
                           , 'Security Newsletter', 'Trial - Enterprise', 'Virtual Sponsorship', 'Web Chat', 'Web Direct', 'Web', 'Webcast')
        THEN 'Marketing/Inbound'
      WHEN leadsource in ('Advertisement', 'Conference', 'Field Event', 'Owned Event')
        THEN 'Marketing/Outbound'
      WHEN leadsource in ('Clearbit', 'Datanyze','GovWin IQ', 'Leadware', 'LinkedIn', 'Prospecting - LeadIQ', 'Prospecting - General', 'Prospecting', 'SDR Generated')
        THEN 'Prospecting'
      WHEN leadsource in ('Employee Referral', 'External Referral', 'Partner', 'Word of mouth')
        THEN 'Referral'
      WHEN leadsource in ('AE Generated')
        THEN 'Sales'
      WHEN leadsource in ('DiscoverOrg')
        THEN 'DiscoverOrg'
      ELSE 'Other'
    END                               AS net_new_source_categories,
   CASE
      WHEN leadsource in ('CORE Check-Up', 'CE Download', 'CE Usage Ping','CE Version Check')
        THEN 'core'
      WHEN leadsource in ('Consultancy Request','Contact Request','Content','Demo','Drift','Education','EE Version Check','Email Request','Email Subscription','Enterprise Trial','Gated Content - eBook','Gated Content - General','Gated Content - Report','Gated Content - Video','Gated Content - Whitepaper','GitLab.com','MovingtoGitLab','Newsletter','OSS','Request - Community','Request - Contact','Request - Professional Services','Request - Public Sector','Security Newsletter','Startup Application','Web','Web Chat','White Paper')
        THEN 'inbound'
      WHEN leadsource in ('AE Generated', 'Clearbit','Datanyze','DiscoverOrg','Gemnasium','GitLab Hosted','Gitorious','gmail','GovWin IQ','Leadware','LinkedIn','Live Event','Prospecting','Prospecting - General','Prospecting - LeadIQ','SDR Generated','seamless.ai','Zoominfo')
        THEN 'outbound'
      WHEN leadsource in ('Advertisement', 'Conference', 'Executive Roundtable', 'Field Event', 'Owned Event','Promotion','Virtual Sponsorship')
        THEN 'paid demand gen'
      WHEN leadsource in ('Purchased List')
        THEN 'purchased list'
      WHEN leadsource in ('Employee Referral', 'Event Partner', 'Existing Client', 'External Referral','Partner','Seminar - Partner','Word of mouth')
        THEN 'referral'
      WHEN leadsource in('Trial - Enterprise','Trial - GitLab.com')
        THEN 'trial'
      WHEN leadsource in ('Webcast','Webinar', 'CSM Webinar')
        THEN 'virtual event'
      WHEN leadsource in ('GitLab Subscription Portal','Web Direct')
        THEN 'web direct'
      ELSE 'Other'
    END                               AS source_buckets,
      stagename                          AS stage_name,
      CASE WHEN incremental_acv_2__c::FLOAT < 5000 THEN '1 - Small (<5k)'
		WHEN incremental_acv_2__c::FLOAT < 25000 THEN '2 - Medium (5k - 25k)'
		WHEN incremental_acv_2__c::FLOAT < 100000 THEN '3 - Big (25k - 100k)'
		WHEN incremental_acv_2__c::FLOAT >= 100000 THEN '4 - Jumbo (>100k)'
	ELSE '5 - Unknown' END AS deal_size,
      forecastcategoryname               AS forecast_category_name,
      incremental_acv_2__c::FLOAT        AS forecasted_iacv,
      swing_deal__c                      AS is_swing_deal,
      renewal_acv__c::FLOAT              AS renewal_acv,
      renewal_amount__c::FLOAT           AS renewal_amount,
      amount::FLOAT                      AS total_contract_value,
      amount::FLOAT                      AS amount,
      upside_iacv__c::FLOAT              AS upside_iacv,
      CASE
        WHEN stagename IN ('8-Closed Lost', 'Closed Lost') AND type = 'Renewal' THEN renewal_acv * -1
        WHEN stagename IN ('Closed Won')                                        THEN forecasted_iacv
        ELSE 0
      END							     AS net_iacv,
      arr_net__c                         AS net_arr,
      CASE
        WHEN closedate::DATE >= '2018-02-01' THEN COALESCE((net_iacv * ratio_net_iacv_to_net_arr), net_iacv)
        ELSE NULL
      END                                AS net_arr_converted,
      CASE
        WHEN closedate::DATE <= '2021-01-31' THEN net_arr_converted
        ELSE net_arr
      END                                AS net_arr_final,
      arr_basis__c                       AS arr_basis,
      arr__c                             AS arr,
      recurring_amount__c                AS recurring_amount,
      true_up_amount__c                  AS true_up_amount,
      proserv_amount__c                  AS proserv_amount,
      other_non_recurring_amount__c      AS other_non_recurring_amount
    FROM cleaned
    INNER JOIN date_spine
      ON cleaned.valid_from::DATE <= date_spine.date_actual
      AND (cleaned.valid_to::DATE > date_spine.date_actual OR cleaned.valid_to IS NULL)
    LEFT JOIN net_arr_net_iacv_conversion_factors
      ON cleaned.opportunity_id = net_arr_net_iacv_conversion_factors.opportunity_id

)

SELECT *
FROM joined
ORDER BY 1,232:T1704,{{ config(
    tags=["mnpi_exception"]
) }}

WITH date_details AS (

    SELECT *
    FROM {{ ref('date_details') }}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_central_sandbox_subscription AS (

    SELECT *
    FROM {{ ref('zuora_central_sandbox_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_central_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM {{ ref('zuora_central_sandbox_account_source') }}

), joined AS (

    SELECT
      zuora_central_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                                 AS dim_crm_account_id,
      zuora_central_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_central_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_central_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_central_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_central_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_central_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_central_sandbox_subscription.created_by_id,
      zuora_central_sandbox_subscription.updated_by_id,
      zuora_central_sandbox_subscription.subscription_name,
      zuora_central_sandbox_subscription.subscription_name_slugify,
      zuora_central_sandbox_subscription.subscription_status,
      zuora_central_sandbox_subscription.version                                                AS subscription_version,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_central_sandbox_subscription.current_term,
      zuora_central_sandbox_subscription.renewal_term,
      zuora_central_sandbox_subscription.renewal_term_period_type,
      zuora_central_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_central_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                     AS subscription_sales_type,

      --Date Information
      zuora_central_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_central_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_central_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_central_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_central_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_central_sandbox_subscription.current_term, zuora_central_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                       AS second_active_renewal_month,
      zuora_central_sandbox_subscription.auto_renew_native_hist,
      zuora_central_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_central_sandbox_subscription.turn_on_cloud_licensing,
      zuora_central_sandbox_subscription.contract_auto_renewal,
      zuora_central_sandbox_subscription.turn_on_auto_renewal,
      zuora_central_sandbox_subscription.contract_seat_reconciliation,
      zuora_central_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_central_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_central_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date,
      zuora_central_sandbox_subscription.turn_on_operational_metrics,
      zuora_central_sandbox_subscription.contract_operational_metrics
    FROM zuora_central_sandbox_subscription
    INNER JOIN zuora_central_sandbox_account
      ON zuora_central_sandbox_subscription.account_id = zuora_central_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_central_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2022-03-31",
    updated_date="2022-04-13"
) }}33:T1804,

WITH date_details AS (

    SELECT *
    FROM "PROD".legacy.date_details

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_central_sandbox_subscription AS (

    SELECT *
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_central_sandbox_account AS (

    SELECT
      account_id,
      crm_id
    FROM "PREP".zuora_central_sandbox.zuora_central_sandbox_account_source

), joined AS (

    SELECT
      zuora_central_sandbox_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                                 AS dim_crm_account_id,
      zuora_central_sandbox_account.account_id                                                  AS dim_billing_account_id,
      zuora_central_sandbox_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner,
      zuora_central_sandbox_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      zuora_central_sandbox_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_central_sandbox_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_central_sandbox_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_central_sandbox_subscription.created_by_id,
      zuora_central_sandbox_subscription.updated_by_id,
      zuora_central_sandbox_subscription.subscription_name,
      zuora_central_sandbox_subscription.subscription_name_slugify,
      zuora_central_sandbox_subscription.subscription_status,
      zuora_central_sandbox_subscription.version                                                AS subscription_version,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name,
      zuora_central_sandbox_subscription.zuora_renewal_subscription_name_slugify,
      zuora_central_sandbox_subscription.current_term,
      zuora_central_sandbox_subscription.renewal_term,
      zuora_central_sandbox_subscription.renewal_term_period_type,
      zuora_central_sandbox_subscription.eoa_starter_bronze_offer_accepted,
      IFF(zuora_central_sandbox_subscription.created_by_id = '2c92a0fd55822b4d015593ac264767f2', -- All Self-Service / Web direct subscriptions are identified by that created_by_id
          'Self-Service', 'Sales-Assisted')                                                     AS subscription_sales_type,

      --Date Information
      zuora_central_sandbox_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_central_sandbox_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_central_sandbox_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_central_sandbox_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_central_sandbox_subscription.term_end_date::DATE)               AS term_end_month,
      CASE
        WHEN LOWER(zuora_central_sandbox_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_central_sandbox_subscription.current_term, zuora_central_sandbox_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                                       AS second_active_renewal_month,
      zuora_central_sandbox_subscription.auto_renew_native_hist,
      zuora_central_sandbox_subscription.auto_renew_customerdot_hist,
      zuora_central_sandbox_subscription.turn_on_cloud_licensing,
      zuora_central_sandbox_subscription.contract_auto_renewal,
      zuora_central_sandbox_subscription.turn_on_auto_renewal,
      zuora_central_sandbox_subscription.contract_seat_reconciliation,
      zuora_central_sandbox_subscription.turn_on_seat_reconciliation,
      zuora_central_sandbox_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_central_sandbox_subscription.updated_date::DATE                                     AS subscription_updated_date,
      zuora_central_sandbox_subscription.turn_on_operational_metrics,
      zuora_central_sandbox_subscription.contract_operational_metrics
    FROM zuora_central_sandbox_subscription
    INNER JOIN zuora_central_sandbox_account
      ON zuora_central_sandbox_subscription.account_id = zuora_central_sandbox_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_central_sandbox_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_central_sandbox_subscription.subscription_end_date::DATE = date_details.date_day

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-03-31'::DATE        AS model_created_date,
      '2022-04-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined34:T4d7,



WITH date_spine AS (

    SELECT DISTINCT
      DATE_TRUNC(day, date_day) AS date_actual
    FROM "PROD".legacy.date_details
    WHERE date_day >= '2019-10-01'::DATE
      AND date_day <= CURRENT_DATE   

), base AS (

    SELECT *
    FROM "RAW".snapshots.sfdc_opportunity_snapshots
    QUALIFY ROW_NUMBER() OVER (PARTITION BY id, DATE_TRUNC(day, dbt_valid_from)
                               ORDER BY dbt_valid_from DESC) = 1

), final AS (

    SELECT
      md5(cast(coalesce(cast(id as 
    varchar
), '') || '-' || coalesce(cast(date_actual as 
    varchar
), '') as 
    varchar
))       AS unique_key,
      dbt_scd_id                                                        AS opportunity_snapshot_id,
      date_actual,
      dbt_valid_from                                                    AS valid_from,
      dbt_valid_to                                                      AS valid_to,
      IFF(dbt_valid_to IS NULL, TRUE, FALSE)                            AS is_currently_valid,
      base.*
    FROM base
    INNER JOIN date_spine
      ON base.dbt_valid_from::DATE <= date_spine.date_actual
      AND (base.dbt_valid_to::DATE > date_spine.date_actual OR base.dbt_valid_to IS NULL)     
      

)

SELECT *
FROM final35:T55b,{{ config(materialized='view') }}

WITH date_details AS (

    SELECT *
    FROM {{ ref("date_details") }}
    -- reduce size of results significantly
    WHERE date_actual > '2020-03-01'
      AND date_actual <  {{ dbt_utils.current_timestamp() }}::DATE

), project_snapshots AS (

   SELECT
     *,
     IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
   FROM {{ ref('gitlab_dotcom_project_statistics_snapshots_base') }}

), project_snapshots_daily AS (

    SELECT
      date_details.date_actual AS snapshot_day,
      project_snapshots.project_statistics_id,
      project_snapshots.project_id,
      project_snapshots.namespace_id,
      project_snapshots.commit_count,
      project_snapshots.storage_size,
      project_snapshots.repository_size,
      project_snapshots.container_registry_size,
      project_snapshots.lfs_objects_size,
      project_snapshots.build_artifacts_size,
      project_snapshots.packages_size,
      project_snapshots.wiki_size,
      project_snapshots.shared_runners_seconds,
      project_snapshots.last_update_started_at
    FROM project_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN project_snapshots.valid_from::DATE AND project_snapshots.valid_to_::DATE
      QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_day, project_id ORDER BY valid_to_ DESC) = 1

)

SELECT *
FROM project_snapshots_daily36:T53f,

WITH date_details AS (

    SELECT *
    FROM "PROD".legacy.date_details
    -- reduce size of results significantly
    WHERE date_actual > '2020-03-01'
      AND date_actual <  
    current_timestamp::
    timestamp_ntz

::DATE

), project_snapshots AS (

   SELECT
     *,
     IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_
   FROM "PROD".legacy.gitlab_dotcom_project_statistics_snapshot

), project_snapshots_daily AS (

    SELECT
      date_details.date_actual AS snapshot_day,
      project_snapshots.project_statistics_id,
      project_snapshots.project_id,
      project_snapshots.namespace_id,
      project_snapshots.commit_count,
      project_snapshots.storage_size,
      project_snapshots.repository_size,
      project_snapshots.container_registry_size,
      project_snapshots.lfs_objects_size,
      project_snapshots.build_artifacts_size,
      project_snapshots.packages_size,
      project_snapshots.wiki_size,
      project_snapshots.shared_runners_seconds,
      project_snapshots.last_update_started_at
    FROM project_snapshots
    INNER JOIN date_details
      ON date_details.date_actual BETWEEN project_snapshots.valid_from::DATE AND project_snapshots.valid_to_::DATE
      QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_day, project_id ORDER BY valid_to_ DESC) = 1

)

SELECT *
FROM project_snapshots_daily37:T1d7a,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
      ('map_merged_crm_account', 'map_merged_crm_account'),
      ('date_details', 'date_details'),
      ('zuora_account_source', 'zuora_account_source'),
      ('prep_billing_account_user', 'prep_billing_account_user'),
      ('sfdc_customer_subscription_source', 'sfdc_customer_subscription_source')

])}}

, zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@michellecooper",
    created_date="2021-01-07",
    updated_date="2023-04-12"
) }}38:T1f00,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), date_details AS (

    SELECT * 
    FROM "PROD".legacy.date_details

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

), sfdc_customer_subscription_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_customer_subscription_source

)

, zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-07'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined39:T4683,{% set net_income_retained_earnings = ('income','other income','expense','other expense','other income','cost of goods sold') %}

WITH accounts AS (

     SELECT *
     FROM {{ ref('netsuite_accounts_xf') }}

), accounting_books AS (

     SELECT *
     FROM {{ ref('netsuite_accounting_books') }}

), accounting_periods AS (

     SELECT *
     FROM {{ ref('netsuite_accounting_periods') }}

), classes AS (

     SELECT *
     FROM {{ref('netsuite_classes')}}

), consolidated_exchange_rates AS (

     SELECT *
     FROM {{ ref('netsuite_consolidated_exchange_rates') }}

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM {{ ref('date_details') }}

), departments AS (

     SELECT *
     FROM {{ref('netsuite_departments_xf')}}

), subsidiaries AS (

     SELECT *
     FROM {{ ref('netsuite_subsidiaries_source') }}

), transactions AS (

     SELECT *
     FROM {{ ref('netsuite_transactions_source') }}

), transaction_lines AS (

     SELECT *
     FROM {{ ref('netsuite_transaction_lines_xf') }}

), period_exchange_rate_map AS ( -- exchange rates used, by accounting period, to convert to parent subsidiary

     SELECT
       consolidated_exchange_rates.accounting_period_id,
       consolidated_exchange_rates.average_rate,
       consolidated_exchange_rates.current_rate,
       consolidated_exchange_rates.historical_rate,
       consolidated_exchange_rates.from_subsidiary_id,
       consolidated_exchange_rates.to_subsidiary_id
     FROM consolidated_exchange_rates
     WHERE consolidated_exchange_rates.to_subsidiary_id IN (
       SELECT
        subsidiary_id
       FROM subsidiaries
       WHERE parent_id IS NULL  -- constrait - only the primary subsidiary has no parent
       )
       AND consolidated_exchange_rates.accounting_book_id IN (
         SELECT
           accounting_book_id
         FROM accounting_books
         WHERE is_primary = true
         )

), account_period_exchange_rate_map AS ( -- account table with exchange rate details by accounting period

     SELECT
       period_exchange_rate_map.accounting_period_id,
       period_exchange_rate_map.from_subsidiary_id,
       period_exchange_rate_map.to_subsidiary_id,
       accounts.account_id,
       CASE
         WHEN LOWER(accounts.general_rate_type) = 'historical'
           THEN period_exchange_rate_map.historical_rate
         WHEN LOWER(accounts.general_rate_type) = 'current'
           THEN period_exchange_rate_map.current_rate
         WHEN LOWER(accounts.general_rate_type) = 'average'
           THEN period_exchange_rate_map.average_rate
         ELSE NULL
       END                AS exchange_rate
     FROM accounts
     CROSS JOIN period_exchange_rate_map

), transaction_lines_w_accounting_period AS ( -- transaction line totals, by accounts, accounting period and subsidiary

     SELECT
       transaction_lines.transaction_id,
       transaction_lines.transaction_line_id,
       transaction_lines.memo,
       transaction_lines.entity_name,
       transactions.document_id,
       transactions.transaction_type,
       transaction_lines.subsidiary_id,
       transaction_lines.account_id,
       transaction_lines.class_id,
       transaction_lines.department_id,
       transactions.accounting_period_id                AS transaction_accounting_period_id,
       COALESCE(transaction_lines.amount, 0)            AS unconverted_amount
     FROM transaction_lines
     INNER JOIN transactions
       ON transaction_lines.transaction_id = transactions.transaction_id
     WHERE LOWER(transactions.transaction_type) != 'revenue arrangement'

), period_id_list_to_current_period AS ( -- period ids with all future period ids.  this is needed to calculate cumulative totals by correct exchange rates.

    SELECT
      base.accounting_period_id,
      array_agg(multiplier.accounting_period_id) WITHIN GROUP (ORDER BY multiplier.accounting_period_id) AS accounting_periods_to_include_for
    FROM accounting_periods AS base
    INNER JOIN accounting_periods AS multiplier
      ON base.accounting_period_starting_date <= multiplier.accounting_period_starting_date
      AND base.is_quarter = multiplier.is_quarter
      AND base.is_year = multiplier.is_year
      AND base.fiscal_calendar_id = multiplier.fiscal_calendar_id
      AND multiplier.accounting_period_starting_date <= CURRENT_TIMESTAMP()
    WHERE base.is_quarter = false
      AND base.is_year = false
      AND base.fiscal_calendar_id = (SELECT
                                       fiscal_calendar_id
                                     FROM subsidiaries
                                     WHERE parent_id IS NULL) -- fiscal calendar will align with parent subsidiary's default calendar
    {{ dbt_utils.group_by(n=1) }}

), flatten_period_id_array AS (

     SELECT
       accounting_period_id,
       reporting_accounting_period_id.value AS reporting_accounting_period_id
     FROM period_id_list_to_current_period,
     lateral flatten (input => accounting_periods_to_include_for) reporting_accounting_period_id
     WHERE array_size(accounting_periods_to_include_for) > 1

), transactions_in_every_calculation_period AS (

     SELECT
       transaction_lines_w_accounting_period.*,
       reporting_accounting_period_id
     FROM transaction_lines_w_accounting_period
     INNER JOIN flatten_period_id_array
       ON flatten_period_id_array.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id

), transactions_in_every_calculation_period_w_exchange_rates AS (

     SELECT
       transactions_in_every_calculation_period.*,
       exchange_reporting_period.exchange_rate    AS exchange_reporting_period,
       exchange_transaction_period.exchange_rate  AS exchange_transaction_period
     FROM transactions_in_every_calculation_period
     LEFT JOIN account_period_exchange_rate_map AS exchange_reporting_period
       ON transactions_in_every_calculation_period.account_id = exchange_reporting_period.account_id
       AND transactions_in_every_calculation_period.reporting_accounting_period_id = exchange_reporting_period.accounting_period_id
       AND transactions_in_every_calculation_period.subsidiary_id = exchange_reporting_period.from_subsidiary_id
     LEFT JOIN account_period_exchange_rate_map AS exchange_transaction_period
       ON transactions_in_every_calculation_period.account_id = exchange_transaction_period.account_id
       AND transactions_in_every_calculation_period.transaction_accounting_period_id = exchange_transaction_period.accounting_period_id
       AND transactions_in_every_calculation_period.subsidiary_id = exchange_transaction_period.from_subsidiary_id

), transactions_with_converted_amounts AS (

     SELECT
       transactions_in_every_calculation_period_w_exchange_rates.*,
       unconverted_amount * exchange_transaction_period   AS converted_amount_using_transaction_accounting_period,
       unconverted_amount * exchange_reporting_period     AS converted_amount_using_reporting_month
     FROM transactions_in_every_calculation_period_w_exchange_rates

), balance_sheet AS (

     SELECT
       transactions_with_converted_amounts.document_id,
       transactions_with_converted_amounts.memo,
       transactions_with_converted_amounts.entity_name,
       departments.parent_department_name,
       departments.department_name,
       classes.class_name,
       transactions_with_converted_amounts.transaction_type,
       reporting_accounting_periods.accounting_period_id,
       reporting_accounting_periods.accounting_period_starting_date::DATE   AS accounting_period,
       reporting_accounting_periods.accounting_period_name,
       accounts.is_account_inactive,
       CASE
         WHEN (LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           AND reporting_accounting_periods.year_id = transaction_accounting_periods.year_id)
             THEN 'net income'
         WHEN LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           THEN 'retained earnings'
         WHEN accounts.account_number = '3000'
           THEN 'retained earnings'
         ELSE LOWER(accounts.account_name)
       END                                                                  AS account_name,
       CASE
         WHEN (LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           AND reporting_accounting_periods.year_id = transaction_accounting_periods.year_id)
           THEN 'net income'
         WHEN LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           THEN 'retained earnings'
         WHEN accounts.account_number = '3000'
           THEN 'retained earnings'
         WHEN accounts.account_number = '1351'
           THEN 'other current asset'
         ELSE LOWER(accounts.account_type)
       END                                                                  AS account_type,
       CASE
         WHEN LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           THEN NULL
         WHEN accounts.account_number = '3000'
           THEN NULL
         ELSE accounts.account_id
       END                                                                  AS account_id,
       CASE
         WHEN LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           THEN ''
         WHEN accounts.account_number = '3000'
           THEN ''
         ELSE accounts.account_number
       END                                                                  AS account_number,
       CASE
         WHEN LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
           THEN ''
         WHEN accounts.account_number = '3000'
           THEN ''
         ELSE accounts.unique_account_number
       END                                                                  AS unique_account_number,
       SUM(CASE
             WHEN LOWER(accounts.account_type) IN {{net_income_retained_earnings}}
               THEN -converted_amount_using_transaction_accounting_period
             WHEN accounts.account_number IN ('3000','3014.1')
               THEN -converted_amount_using_transaction_accounting_period
             WHEN (LOWER(accounts.general_rate_type) = 'historical' AND accounts.is_leftside_account = false)
               THEN -converted_amount_using_transaction_accounting_period
             WHEN (LOWER(accounts.general_rate_type) = 'historical' AND accounts.is_leftside_account = true)
               THEN converted_amount_using_transaction_accounting_period
             WHEN (accounts.is_balancesheet_account = true AND accounts.is_leftside_account = false)
               THEN -converted_amount_using_reporting_month
             WHEN (accounts.is_balancesheet_account = true AND accounts.is_leftside_account = true)
               THEN converted_amount_using_reporting_month
             ELSE 0
           END)                                                             AS actual_amount
       FROM  transactions_with_converted_amounts
       LEFT JOIN accounts
         ON transactions_with_converted_amounts.account_id = accounts.account_id
       LEFT JOIN classes
         ON transactions_with_converted_amounts.class_id = classes.class_id
       LEFT JOIN departments
         ON transactions_with_converted_amounts.department_id = departments.department_id
       LEFT JOIN accounting_periods AS reporting_accounting_periods
         ON transactions_with_converted_amounts.reporting_accounting_period_id = reporting_accounting_periods.accounting_period_id
       LEFT JOIN accounting_periods AS transaction_accounting_periods
         ON transactions_with_converted_amounts.transaction_accounting_period_id = transaction_accounting_periods.accounting_period_id
       WHERE reporting_accounting_periods.fiscal_calendar_id    = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND transaction_accounting_periods.fiscal_calendar_id  = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND LOWER(accounts.account_type) != 'statistical'
         AND accounts.account_number != '3035'
        {{ dbt_utils.group_by(n=16) }}

       UNION ALL

       SELECT
         transactions_with_converted_amounts.document_id,
         transactions_with_converted_amounts.memo,
         transactions_with_converted_amounts.entity_name,
         departments.parent_department_name,
         departments.department_name,
         classes.class_name,
         transactions_with_converted_amounts.transaction_type,
         reporting_accounting_periods.accounting_period_id,
         reporting_accounting_periods.accounting_period_starting_date::DATE   AS accounting_period,
         reporting_accounting_periods.accounting_period_name,
         accounts.is_account_inactive,
         'Cumulative Translation Adjustment'                                  AS account_name,
         'Cumulative Translation Adjustment'                                  AS account_type,
         NULL                                                                 AS account_id,
         ''                                                                   AS account_number,
         NULL                                                                 AS unique_account_number,
         SUM(CASE
               WHEN LOWER(account_type) IN {{net_income_retained_earnings}}
                 THEN converted_amount_using_transaction_accounting_period
               WHEN LOWER(account_type) IN ('equity', 'retained earnings', 'net income')
                 THEN converted_amount_using_transaction_accounting_period
               ELSE converted_amount_using_reporting_month
             END)                                                             AS actual_amount
       FROM  transactions_with_converted_amounts
       LEFT JOIN accounts
         ON transactions_with_converted_amounts.account_id = accounts.account_id
       LEFT JOIN classes
         ON transactions_with_converted_amounts.class_id = classes.class_id
       LEFT JOIN departments
         ON transactions_with_converted_amounts.department_id = departments.department_id
       LEFT JOIN accounting_periods AS reporting_accounting_periods
         ON transactions_with_converted_amounts.reporting_accounting_period_id = reporting_accounting_periods.accounting_period_id
       LEFT JOIN accounting_periods AS transaction_accounting_periods
         ON transactions_with_converted_amounts.transaction_accounting_period_id = transaction_accounting_periods.accounting_period_id
       WHERE reporting_accounting_periods.fiscal_calendar_id    = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND transaction_accounting_periods.fiscal_calendar_id  = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND LOWER(accounts.account_type) != 'statistical'
         AND accounts.account_number != '3035'
         {{ dbt_utils.group_by(n=11) }}

), balance_sheet_grouping AS (

      SELECT
        document_id,
        memo,
        entity_name,
        transaction_type,
        account_id,
        account_name,
        account_number,
        unique_account_number,
        account_number || ' - ' || account_name   AS unique_account_name,
        account_type,
        parent_department_name,
        department_name,
        class_name,
        CASE
          WHEN account_type IN ('accounts receivable','bank','other current asset','unbilled receivable','deferred expense')
            THEN '1-current assets'
          WHEN account_type IN ('accounts payable','credit card','deferred revenue','other current liability')
            THEN '1-current liabilities'
          WHEN account_type IN ('fixed asset')
            THEN '3-fixed assets'
          WHEN account_type IN ('long term liability')
            THEN '2-long term liabilities'
          WHEN account_type IN ('other asset')
            THEN '2-other assets'
          WHEN account_type IN ('net income','retained earnings','equity','Cumulative Translation Adjustment')
            THEN '3-equity'
          ELSE 'need classification'
        END                                       AS balance_sheet_grouping_level_2,
        CASE
          WHEN account_type IN ('accounts receivable','bank','other current asset','unbilled receivable','fixed asset','other asset','deferred expense')
            THEN '1-assets'
          WHEN account_type IN ('accounts payable','credit card','deferred revenue','other current liability',
                                'equity','long term liability','net income','retained earnings','Cumulative Translation Adjustment')
            THEN '2-liabilities & equity'
          ELSE 'need classification'
        END                                       AS balance_sheet_grouping_level_3,
        is_account_inactive,
        actual_amount,
        accounting_period_id,
        accounting_period,
        accounting_period_name,
        fiscal_year,
        fiscal_quarter,
        fiscal_quarter_name

      FROM balance_sheet b
      LEFT JOIN date_details d
        ON b.accounting_period = d.first_day_of_month

)

SELECT *
FROM balance_sheet_grouping
ORDER BY accounting_period, account_name3a:T4841,

WITH accounts AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounts_xf

), accounting_books AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounting_books

), accounting_periods AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounting_periods

), classes AS (

     SELECT *
     FROM "PROD".legacy.netsuite_classes

), consolidated_exchange_rates AS (

     SELECT *
     FROM "PROD".legacy.netsuite_consolidated_exchange_rates

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM "PROD".legacy.date_details

), departments AS (

     SELECT *
     FROM "PROD".legacy.netsuite_departments_xf

), subsidiaries AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_subsidiaries_source

), transactions AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_transactions_source

), transaction_lines AS (

     SELECT *
     FROM "PROD".restricted_safe_legacy.netsuite_transaction_lines_xf

), period_exchange_rate_map AS ( -- exchange rates used, by accounting period, to convert to parent subsidiary

     SELECT
       consolidated_exchange_rates.accounting_period_id,
       consolidated_exchange_rates.average_rate,
       consolidated_exchange_rates.current_rate,
       consolidated_exchange_rates.historical_rate,
       consolidated_exchange_rates.from_subsidiary_id,
       consolidated_exchange_rates.to_subsidiary_id
     FROM consolidated_exchange_rates
     WHERE consolidated_exchange_rates.to_subsidiary_id IN (
       SELECT
        subsidiary_id
       FROM subsidiaries
       WHERE parent_id IS NULL  -- constrait - only the primary subsidiary has no parent
       )
       AND consolidated_exchange_rates.accounting_book_id IN (
         SELECT
           accounting_book_id
         FROM accounting_books
         WHERE is_primary = true
         )

), account_period_exchange_rate_map AS ( -- account table with exchange rate details by accounting period

     SELECT
       period_exchange_rate_map.accounting_period_id,
       period_exchange_rate_map.from_subsidiary_id,
       period_exchange_rate_map.to_subsidiary_id,
       accounts.account_id,
       CASE
         WHEN LOWER(accounts.general_rate_type) = 'historical'
           THEN period_exchange_rate_map.historical_rate
         WHEN LOWER(accounts.general_rate_type) = 'current'
           THEN period_exchange_rate_map.current_rate
         WHEN LOWER(accounts.general_rate_type) = 'average'
           THEN period_exchange_rate_map.average_rate
         ELSE NULL
       END                AS exchange_rate
     FROM accounts
     CROSS JOIN period_exchange_rate_map

), transaction_lines_w_accounting_period AS ( -- transaction line totals, by accounts, accounting period and subsidiary

     SELECT
       transaction_lines.transaction_id,
       transaction_lines.transaction_line_id,
       transaction_lines.memo,
       transaction_lines.entity_name,
       transactions.document_id,
       transactions.transaction_type,
       transaction_lines.subsidiary_id,
       transaction_lines.account_id,
       transaction_lines.class_id,
       transaction_lines.department_id,
       transactions.accounting_period_id                AS transaction_accounting_period_id,
       COALESCE(transaction_lines.amount, 0)            AS unconverted_amount
     FROM transaction_lines
     INNER JOIN transactions
       ON transaction_lines.transaction_id = transactions.transaction_id
     WHERE LOWER(transactions.transaction_type) != 'revenue arrangement'

), period_id_list_to_current_period AS ( -- period ids with all future period ids.  this is needed to calculate cumulative totals by correct exchange rates.

    SELECT
      base.accounting_period_id,
      array_agg(multiplier.accounting_period_id) WITHIN GROUP (ORDER BY multiplier.accounting_period_id) AS accounting_periods_to_include_for
    FROM accounting_periods AS base
    INNER JOIN accounting_periods AS multiplier
      ON base.accounting_period_starting_date <= multiplier.accounting_period_starting_date
      AND base.is_quarter = multiplier.is_quarter
      AND base.is_year = multiplier.is_year
      AND base.fiscal_calendar_id = multiplier.fiscal_calendar_id
      AND multiplier.accounting_period_starting_date <= CURRENT_TIMESTAMP()
    WHERE base.is_quarter = false
      AND base.is_year = false
      AND base.fiscal_calendar_id = (SELECT
                                       fiscal_calendar_id
                                     FROM subsidiaries
                                     WHERE parent_id IS NULL) -- fiscal calendar will align with parent subsidiary's default calendar
    group by 1

), flatten_period_id_array AS (

     SELECT
       accounting_period_id,
       reporting_accounting_period_id.value AS reporting_accounting_period_id
     FROM period_id_list_to_current_period,
     lateral flatten (input => accounting_periods_to_include_for) reporting_accounting_period_id
     WHERE array_size(accounting_periods_to_include_for) > 1

), transactions_in_every_calculation_period AS (

     SELECT
       transaction_lines_w_accounting_period.*,
       reporting_accounting_period_id
     FROM transaction_lines_w_accounting_period
     INNER JOIN flatten_period_id_array
       ON flatten_period_id_array.accounting_period_id = transaction_lines_w_accounting_period.transaction_accounting_period_id

), transactions_in_every_calculation_period_w_exchange_rates AS (

     SELECT
       transactions_in_every_calculation_period.*,
       exchange_reporting_period.exchange_rate    AS exchange_reporting_period,
       exchange_transaction_period.exchange_rate  AS exchange_transaction_period
     FROM transactions_in_every_calculation_period
     LEFT JOIN account_period_exchange_rate_map AS exchange_reporting_period
       ON transactions_in_every_calculation_period.account_id = exchange_reporting_period.account_id
       AND transactions_in_every_calculation_period.reporting_accounting_period_id = exchange_reporting_period.accounting_period_id
       AND transactions_in_every_calculation_period.subsidiary_id = exchange_reporting_period.from_subsidiary_id
     LEFT JOIN account_period_exchange_rate_map AS exchange_transaction_period
       ON transactions_in_every_calculation_period.account_id = exchange_transaction_period.account_id
       AND transactions_in_every_calculation_period.transaction_accounting_period_id = exchange_transaction_period.accounting_period_id
       AND transactions_in_every_calculation_period.subsidiary_id = exchange_transaction_period.from_subsidiary_id

), transactions_with_converted_amounts AS (

     SELECT
       transactions_in_every_calculation_period_w_exchange_rates.*,
       unconverted_amount * exchange_transaction_period   AS converted_amount_using_transaction_accounting_period,
       unconverted_amount * exchange_reporting_period     AS converted_amount_using_reporting_month
     FROM transactions_in_every_calculation_period_w_exchange_rates

), balance_sheet AS (

     SELECT
       transactions_with_converted_amounts.document_id,
       transactions_with_converted_amounts.memo,
       transactions_with_converted_amounts.entity_name,
       departments.parent_department_name,
       departments.department_name,
       classes.class_name,
       transactions_with_converted_amounts.transaction_type,
       reporting_accounting_periods.accounting_period_id,
       reporting_accounting_periods.accounting_period_starting_date::DATE   AS accounting_period,
       reporting_accounting_periods.accounting_period_name,
       accounts.is_account_inactive,
       CASE
         WHEN (LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           AND reporting_accounting_periods.year_id = transaction_accounting_periods.year_id)
             THEN 'net income'
         WHEN LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           THEN 'retained earnings'
         WHEN accounts.account_number = '3000'
           THEN 'retained earnings'
         ELSE LOWER(accounts.account_name)
       END                                                                  AS account_name,
       CASE
         WHEN (LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           AND reporting_accounting_periods.year_id = transaction_accounting_periods.year_id)
           THEN 'net income'
         WHEN LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           THEN 'retained earnings'
         WHEN accounts.account_number = '3000'
           THEN 'retained earnings'
         WHEN accounts.account_number = '1351'
           THEN 'other current asset'
         ELSE LOWER(accounts.account_type)
       END                                                                  AS account_type,
       CASE
         WHEN LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           THEN NULL
         WHEN accounts.account_number = '3000'
           THEN NULL
         ELSE accounts.account_id
       END                                                                  AS account_id,
       CASE
         WHEN LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           THEN ''
         WHEN accounts.account_number = '3000'
           THEN ''
         ELSE accounts.account_number
       END                                                                  AS account_number,
       CASE
         WHEN LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
           THEN ''
         WHEN accounts.account_number = '3000'
           THEN ''
         ELSE accounts.unique_account_number
       END                                                                  AS unique_account_number,
       SUM(CASE
             WHEN LOWER(accounts.account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
               THEN -converted_amount_using_transaction_accounting_period
             WHEN accounts.account_number IN ('3000','3014.1')
               THEN -converted_amount_using_transaction_accounting_period
             WHEN (LOWER(accounts.general_rate_type) = 'historical' AND accounts.is_leftside_account = false)
               THEN -converted_amount_using_transaction_accounting_period
             WHEN (LOWER(accounts.general_rate_type) = 'historical' AND accounts.is_leftside_account = true)
               THEN converted_amount_using_transaction_accounting_period
             WHEN (accounts.is_balancesheet_account = true AND accounts.is_leftside_account = false)
               THEN -converted_amount_using_reporting_month
             WHEN (accounts.is_balancesheet_account = true AND accounts.is_leftside_account = true)
               THEN converted_amount_using_reporting_month
             ELSE 0
           END)                                                             AS actual_amount
       FROM  transactions_with_converted_amounts
       LEFT JOIN accounts
         ON transactions_with_converted_amounts.account_id = accounts.account_id
       LEFT JOIN classes
         ON transactions_with_converted_amounts.class_id = classes.class_id
       LEFT JOIN departments
         ON transactions_with_converted_amounts.department_id = departments.department_id
       LEFT JOIN accounting_periods AS reporting_accounting_periods
         ON transactions_with_converted_amounts.reporting_accounting_period_id = reporting_accounting_periods.accounting_period_id
       LEFT JOIN accounting_periods AS transaction_accounting_periods
         ON transactions_with_converted_amounts.transaction_accounting_period_id = transaction_accounting_periods.accounting_period_id
       WHERE reporting_accounting_periods.fiscal_calendar_id    = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND transaction_accounting_periods.fiscal_calendar_id  = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND LOWER(accounts.account_type) != 'statistical'
         AND accounts.account_number != '3035'
        group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16

       UNION ALL

       SELECT
         transactions_with_converted_amounts.document_id,
         transactions_with_converted_amounts.memo,
         transactions_with_converted_amounts.entity_name,
         departments.parent_department_name,
         departments.department_name,
         classes.class_name,
         transactions_with_converted_amounts.transaction_type,
         reporting_accounting_periods.accounting_period_id,
         reporting_accounting_periods.accounting_period_starting_date::DATE   AS accounting_period,
         reporting_accounting_periods.accounting_period_name,
         accounts.is_account_inactive,
         'Cumulative Translation Adjustment'                                  AS account_name,
         'Cumulative Translation Adjustment'                                  AS account_type,
         NULL                                                                 AS account_id,
         ''                                                                   AS account_number,
         NULL                                                                 AS unique_account_number,
         SUM(CASE
               WHEN LOWER(account_type) IN ('income', 'other income', 'expense', 'other expense', 'other income', 'cost of goods sold')
                 THEN converted_amount_using_transaction_accounting_period
               WHEN LOWER(account_type) IN ('equity', 'retained earnings', 'net income')
                 THEN converted_amount_using_transaction_accounting_period
               ELSE converted_amount_using_reporting_month
             END)                                                             AS actual_amount
       FROM  transactions_with_converted_amounts
       LEFT JOIN accounts
         ON transactions_with_converted_amounts.account_id = accounts.account_id
       LEFT JOIN classes
         ON transactions_with_converted_amounts.class_id = classes.class_id
       LEFT JOIN departments
         ON transactions_with_converted_amounts.department_id = departments.department_id
       LEFT JOIN accounting_periods AS reporting_accounting_periods
         ON transactions_with_converted_amounts.reporting_accounting_period_id = reporting_accounting_periods.accounting_period_id
       LEFT JOIN accounting_periods AS transaction_accounting_periods
         ON transactions_with_converted_amounts.transaction_accounting_period_id = transaction_accounting_periods.accounting_period_id
       WHERE reporting_accounting_periods.fiscal_calendar_id    = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND transaction_accounting_periods.fiscal_calendar_id  = (SELECT
                                                                     fiscal_calendar_id
                                                                   FROM subsidiaries
                                                                   WHERE parent_id IS NULL)
         AND LOWER(accounts.account_type) != 'statistical'
         AND accounts.account_number != '3035'
         group by 1,2,3,4,5,6,7,8,9,10,11

), balance_sheet_grouping AS (

      SELECT
        document_id,
        memo,
        entity_name,
        transaction_type,
        account_id,
        account_name,
        account_number,
        unique_account_number,
        account_number || ' - ' || account_name   AS unique_account_name,
        account_type,
        parent_department_name,
        department_name,
        class_name,
        CASE
          WHEN account_type IN ('accounts receivable','bank','other current asset','unbilled receivable','deferred expense')
            THEN '1-current assets'
          WHEN account_type IN ('accounts payable','credit card','deferred revenue','other current liability')
            THEN '1-current liabilities'
          WHEN account_type IN ('fixed asset')
            THEN '3-fixed assets'
          WHEN account_type IN ('long term liability')
            THEN '2-long term liabilities'
          WHEN account_type IN ('other asset')
            THEN '2-other assets'
          WHEN account_type IN ('net income','retained earnings','equity','Cumulative Translation Adjustment')
            THEN '3-equity'
          ELSE 'need classification'
        END                                       AS balance_sheet_grouping_level_2,
        CASE
          WHEN account_type IN ('accounts receivable','bank','other current asset','unbilled receivable','fixed asset','other asset','deferred expense')
            THEN '1-assets'
          WHEN account_type IN ('accounts payable','credit card','deferred revenue','other current liability',
                                'equity','long term liability','net income','retained earnings','Cumulative Translation Adjustment')
            THEN '2-liabilities & equity'
          ELSE 'need classification'
        END                                       AS balance_sheet_grouping_level_3,
        is_account_inactive,
        actual_amount,
        accounting_period_id,
        accounting_period,
        accounting_period_name,
        fiscal_year,
        fiscal_quarter,
        fiscal_quarter_name

      FROM balance_sheet b
      LEFT JOIN date_details d
        ON b.accounting_period = d.first_day_of_month

)

SELECT *
FROM balance_sheet_grouping
ORDER BY accounting_period, account_name3b:T5be,WITH zuora_mrr AS (

    SELECT *
    FROM {{ ref('zuora_base_mrr') }}

), date_table AS (

     SELECT *
     FROM {{ ref('date_details') }}
     WHERE day_of_month = 1

), amortized_mrr AS (

    SELECT country,
           account_number,
           subscription_name,
           subscription_name_slugify,
           oldest_subscription_in_cohort,
           lineage,
           rate_plan_name,
           product_category,
           delivery,
           rate_plan_charge_name,
           mrr,
           date_actual AS mrr_month,
           sub_start_month,
           sub_end_month,
           effective_start_month,
           effective_end_month,
           effective_start_date,
           effective_end_date,
           cohort_month,
           cohort_quarter,
           unit_of_measure,
           quantity
  FROM zuora_mrr b
  LEFT JOIN date_table d
  ON d.date_actual >= b.effective_start_month
  AND d.date_actual <= b.effective_end_month


), final as (

SELECT country,
       account_number,
       subscription_name,
       subscription_name_slugify,
       oldest_subscription_in_cohort,
       lineage,
       rate_plan_name,
       product_category,
       delivery,
       rate_plan_charge_name,
       mrr_month,
       cohort_month,
       cohort_quarter,
       unit_of_measure,
       sum(mrr)       AS mrr,
       sum(quantity)  AS quantity
FROM amortized_mrr
WHERE mrr_month IS NOT NULL
{{ dbt_utils.group_by(n=14) }}

)

SELECT *
FROM final3c:T5db,WITH zuora_mrr AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_base_mrr

), date_table AS (

     SELECT *
     FROM "PROD".legacy.date_details
     WHERE day_of_month = 1

), amortized_mrr AS (

    SELECT country,
           account_number,
           subscription_name,
           subscription_name_slugify,
           oldest_subscription_in_cohort,
           lineage,
           rate_plan_name,
           product_category,
           delivery,
           rate_plan_charge_name,
           mrr,
           date_actual AS mrr_month,
           sub_start_month,
           sub_end_month,
           effective_start_month,
           effective_end_month,
           effective_start_date,
           effective_end_date,
           cohort_month,
           cohort_quarter,
           unit_of_measure,
           quantity
  FROM zuora_mrr b
  LEFT JOIN date_table d
  ON d.date_actual >= b.effective_start_month
  AND d.date_actual <= b.effective_end_month


), final as (

SELECT country,
       account_number,
       subscription_name,
       subscription_name_slugify,
       oldest_subscription_in_cohort,
       lineage,
       rate_plan_name,
       product_category,
       delivery,
       rate_plan_charge_name,
       mrr_month,
       cohort_month,
       cohort_quarter,
       unit_of_measure,
       sum(mrr)       AS mrr,
       sum(quantity)  AS quantity
FROM amortized_mrr
WHERE mrr_month IS NOT NULL
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14

)

SELECT *
FROM final3d:Taf4,WITH days AS (

    SELECT DISTINCT
      date_day                       AS day,
      (date_day = last_day_of_month) AS is_last_day_of_month
    FROM {{ ref('date_details') }}
    WHERE date_day < CURRENT_DATE

), audit_events AS (

    SELECT DISTINCT
      author_id,
      TO_DATE(created_at) AS audit_event_day
    FROM {{ ref('gitlab_dotcom_audit_events') }}
    WHERE TRUE

), events AS (

    SELECT DISTINCT
      author_id,
      ultimate_parent_id,
      plan_id_at_event_date,
      plan_was_paid_at_event_date,
      TO_DATE(created_at) AS event_day
    FROM {{ ref('gitlab_dotcom_events') }} dotcom_events
    WHERE {{ filter_out_blocked_users('dotcom_events', 'author_id') }}

), audit_events_active_user AS (

    SELECT
      days.day,
      days.is_last_day_of_month,
      COUNT(DISTINCT author_id)   AS count_audit_events_active_users_last_28_days
    FROM days
      INNER JOIN audit_events
        ON audit_event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    GROUP BY
      days.day,
      days.is_last_day_of_month
    ORDER BY
      days.day

), events_active_user AS (

    SELECT DISTINCT
      days.day,
      days.is_last_day_of_month,
      events.plan_id_at_event_date,
      events.plan_was_paid_at_event_date,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day)                                              AS count_events_active_users_last_28_days,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)                AS count_events_active_users_last_28_days_by_plan_id,
      COUNT(DISTINCT ultimate_parent_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)       AS count_events_active_namespaces_last_28_days_by_plan_id,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_was_paid_at_event_date)          AS count_events_active_users_last_28_days_by_plan_was_paid
    FROM days
      INNER JOIN events
        ON events.event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    ORDER BY
      days.day

), joined AS (

    SELECT DISTINCT
      audit_events_active_user.day,
      audit_events_active_user.is_last_day_of_month,
      audit_events_active_user.count_audit_events_active_users_last_28_days,
      events_active_user.plan_id_at_event_date,
      events_active_user.plan_was_paid_at_event_date,
      events_active_user.count_events_active_users_last_28_days,
      events_active_user.count_events_active_users_last_28_days_by_plan_id,
      events_active_user.count_events_active_namespaces_last_28_days_by_plan_id,
      events_active_user.count_events_active_users_last_28_days_by_plan_was_paid
    FROM audit_events_active_user
      LEFT JOIN events_active_user
        ON audit_events_active_user.day = events_active_user.day
)

SELECT *
FROM joined3e:Tb95,WITH days AS (

    SELECT DISTINCT
      date_day                       AS day,
      (date_day = last_day_of_month) AS is_last_day_of_month
    FROM "PROD".legacy.date_details
    WHERE date_day < CURRENT_DATE

), audit_events AS (

    SELECT DISTINCT
      author_id,
      TO_DATE(created_at) AS audit_event_day
    FROM "PROD".legacy.gitlab_dotcom_audit_events
    WHERE TRUE

), events AS (

    SELECT DISTINCT
      author_id,
      ultimate_parent_id,
      plan_id_at_event_date,
      plan_was_paid_at_event_date,
      TO_DATE(created_at) AS event_day
    FROM "PROD".legacy.gitlab_dotcom_events dotcom_events
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = dotcom_events.author_id

    )

), audit_events_active_user AS (

    SELECT
      days.day,
      days.is_last_day_of_month,
      COUNT(DISTINCT author_id)   AS count_audit_events_active_users_last_28_days
    FROM days
      INNER JOIN audit_events
        ON audit_event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    GROUP BY
      days.day,
      days.is_last_day_of_month
    ORDER BY
      days.day

), events_active_user AS (

    SELECT DISTINCT
      days.day,
      days.is_last_day_of_month,
      events.plan_id_at_event_date,
      events.plan_was_paid_at_event_date,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day)                                              AS count_events_active_users_last_28_days,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)                AS count_events_active_users_last_28_days_by_plan_id,
      COUNT(DISTINCT ultimate_parent_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)       AS count_events_active_namespaces_last_28_days_by_plan_id,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_was_paid_at_event_date)          AS count_events_active_users_last_28_days_by_plan_was_paid
    FROM days
      INNER JOIN events
        ON events.event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    ORDER BY
      days.day

), joined AS (

    SELECT DISTINCT
      audit_events_active_user.day,
      audit_events_active_user.is_last_day_of_month,
      audit_events_active_user.count_audit_events_active_users_last_28_days,
      events_active_user.plan_id_at_event_date,
      events_active_user.plan_was_paid_at_event_date,
      events_active_user.count_events_active_users_last_28_days,
      events_active_user.count_events_active_users_last_28_days_by_plan_id,
      events_active_user.count_events_active_namespaces_last_28_days_by_plan_id,
      events_active_user.count_events_active_users_last_28_days_by_plan_was_paid
    FROM audit_events_active_user
      LEFT JOIN events_active_user
        ON audit_events_active_user.day = events_active_user.day
)

SELECT *
FROM joined3f:T3f1b,WITH date_details AS (

    SELECT
      *,
      DENSE_RANK() OVER (ORDER BY first_day_of_fiscal_quarter) AS quarter_number
    FROM {{ ref('date_details') }}
    ORDER BY 1 DESC

), sfdc_accounts_xf AS (

    SELECT *
    FROM {{ ref('sfdc_accounts_xf') }}

), sfdc_opportunity_snapshot_history AS (

    SELECT *
    FROM {{ ref('sfdc_opportunity_snapshot_history') }}

), sfdc_opportunity_xf AS (

    SELECT *
    FROM {{ ref('sfdc_opportunity_xf') }}

), beginning AS(

    SELECT
      d.fiscal_quarter_name_fy              AS close_qtr,
      d.fiscal_year                         AS fiscal_close_year,
      d.first_day_of_fiscal_quarter,
      COALESCE (o.order_type, '3. Growth')  AS order_type,
      CASE
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'SMB'                                                           THEN 'SMB'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'Mid-Market'                                                    THEN 'Mid-Market'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment IN ('Large', 'US West', 'US East', 'Public Sector''EMEA', 'APAC') THEN 'Large'
        ELSE a.ultimate_parent_account_segment
      END                                   AS sales_segment,
      h.stage_name,
      CASE
        WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing', '1-Discovery', '2-Developing', '2-Scoping')  THEN 'Pipeline'
        WHEN h.stage_name IN ('3-Technical Evaluation', '4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                         THEN '3+ Pipeline'
        WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                       THEN 'Lost'
        WHEN h.stage_name IN ('Closed Won')                                                                                                         THEN 'Closed Won'
        ELSE 'Other'
      END                                   AS stage_name_3plus,
      CASE
         WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing','1-Discovery', '2-Developing', '2-Scoping', '3-Technical Evaluation')     THEN 'Pipeline'
         WHEN h.stage_name IN ('4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                                                                               THEN '4+ Pipeline'
         WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                                                   THEN 'Lost'
         WHEN h.stage_name IN ('Closed Won')                                                                                                                                     THEN 'Closed Won'
         ELSE 'Other'
         END                                  AS stage_name_4plus,
         h.opportunity_id,
       CASE
         WHEN o.account_owner_team_stamped = 'US East'                                                                                       THEN 'US East'
         WHEN o.account_owner_team_stamped = 'US West'                                                                                       THEN 'US West'
         WHEN o.account_owner_team_stamped = 'EMEA'                                                                                          THEN 'EMEA'
         WHEN o.account_owner_team_stamped = 'APAC'                                                                                          THEN 'APAC'
         WHEN o.account_owner_team_stamped = 'Public Sector'                                                                                 THEN 'Public Sector'
         WHEN o.account_owner_team_stamped IN ('Commercial', 'Commercial - MM', 'MM - East', 'MM - West', 'MM-EMEA', 'MM - EMEA', 'MM-APAC') THEN 'MM'
         WHEN o.account_owner_team_stamped IN ('SMB', 'SMB - US', 'SMB - International', 'Commercial - SMB')                                 THEN 'SMB'
         ELSE 'Other'
       END                                  AS account_owner_team_stamped,
       DATE(h.created_date)                 AS created_date,
       DATE(h.close_date)                   AS close_date,
       COUNT(DISTINCT h.opportunity_id)     AS opps,
       SUM(CASE
             WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost') AND h.sales_type = 'Renewal' THEN h.renewal_acv*-1
             WHEN h.stage_name IN ('Closed Won')                                                THEN h.forecasted_iacv
             ELSE 0
           END)                             AS net_iacv,
       SUM(h.forecasted_IACV)               AS forecasted_iacv,
       SUM(o.pre_covid_iacv)                AS pre_covid_iacv
     FROM sfdc_opportunity_snapshot_history h
     LEFT JOIN sfdc_opportunity_xf o
       ON h.opportunity_id = o.opportunity_id
     LEFT JOIN sfdc_accounts_xf a
       ON h.account_id = a.account_id
     INNER JOIN date_details d
       ON h.close_date = d.date_actual
     INNER JOIN date_details dd2
       ON h.date_actual = dd2.date_actual
     WHERE dd2.day_of_fiscal_quarter = 1
       AND d.quarter_number - dd2.quarter_number = 0
     {{ dbt_utils.group_by(n=12) }}

), ENDING AS (

    SELECT
      d.fiscal_quarter_name_fy                  AS close_qtr,
      d.fiscal_year                             AS fiscal_close_year,
      d.first_day_of_fiscal_quarter,
      COALESCE (o.order_type, '3. Growth')      AS order_type,
      CASE
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'SMB'                                                            THEN 'SMB'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'Mid-Market'                                                     THEN 'Mid-Market'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment IN ('Large', 'US West', 'US East', 'Public Sector''EMEA', 'APAC')  THEN 'Large'
        ELSE a.ultimate_parent_account_segment
      END                                       AS sales_segment,
      h.stage_name,
      CASE
        WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing', '1-Discovery', '2-Developing', '2-Scoping')  THEN 'Pipeline'
        WHEN h.stage_name IN ('3-Technical Evaluation', '4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                         THEN '3+ Pipeline'
        WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                       THEN 'Lost'
        WHEN h.stage_name IN ('Closed Won')                                                                                                         THEN 'Closed Won'
        ELSE 'Other'
      END                                       AS stage_name_3plus,
      CASE
        WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing','1-Discovery', '2-Developing', '2-Scoping', '3-Technical Evaluation')     THEN 'Pipeline'
        WHEN h.stage_name IN ('4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                                                                               THEN '4+ Pipeline'
        WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                                                   THEN 'Lost'
        WHEN h.stage_name IN ('Closed Won')                                                                                                                                     THEN 'Closed Won'
        ELSE 'Other'
      END                                       AS stage_name_4plus,
      h.opportunity_id,
      CASE
        WHEN o.account_owner_team_stamped = 'US East'                                                                                       THEN 'US East'
        WHEN o.account_owner_team_stamped = 'US West'                                                                                       THEN 'US West'
        WHEN o.account_owner_team_stamped = 'EMEA'                                                                                          THEN 'EMEA'
        WHEN o.account_owner_team_stamped = 'APAC'                                                                                          THEN 'APAC'
        WHEN o.account_owner_team_stamped = 'Public Sector'                                                                                 THEN 'Public Sector'
        WHEN o.account_owner_team_stamped IN ('Commercial', 'Commercial - MM', 'MM - East', 'MM - West', 'MM-EMEA', 'MM - EMEA', 'MM-APAC') THEN 'MM'
        WHEN o.account_owner_team_stamped IN ('SMB', 'SMB - US', 'SMB - International', 'Commercial - SMB')                                 THEN 'SMB'
        ELSE 'Other'
      END                                       AS account_owner_team_stamped,
      DATE(h.created_date)                      AS created_date,
      DATE(h.close_date)                        AS close_date,
      COUNT(DISTINCT h.opportunity_id)          AS opps,
      SUM(CASE
            WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost') AND h.sales_type = 'Renewal'      THEN h.renewal_acv*-1
            WHEN h.stage_name IN ('Closed Won')                                                     THEN h.forecasted_iacv
            ELSE 0
          END)                                  AS net_iacv,
      SUM(h.forecasted_iacv)                    AS forecasted_iacv,
      SUM(o.pre_covid_iacv)                     AS pre_covid_iacv
    FROM sfdc_opportunity_snapshot_history h
    LEFT JOIN sfdc_opportunity_xf o
      ON h.opportunity_id = o.opportunity_id
    LEFT JOIN sfdc_accounts_xf a
      ON h.account_id = a.account_id
    INNER JOIN date_details d
      ON h.close_date = d.date_actual
    INNER JOIN date_details dd2
      ON h.date_actual = dd2.date_actual
    WHERE dd2.day_of_fiscal_quarter = 1
      AND d.quarter_number - dd2.quarter_number = -1
    {{ dbt_utils.group_by(n=12) }}

), combined AS (

    SELECT
      COALESCE (b.opportunity_id, e.opportunity_id)                             AS opportunity_id,
      COALESCE (b.close_qtr, e.close_qtr)                                       AS close_qtr,
      COALESCE (b.fiscal_close_year, e.fiscal_close_year)                       AS fiscal_close_year,
      COALESCE (b.first_day_of_fiscal_quarter, e.first_day_of_fiscal_quarter)   AS first_day_of_fiscal_quarter,
      b.order_type,
      e.order_type                                                              AS order_type_ending,
      b.sales_segment,
      e.sales_segment                                                           AS sales_segment_ending,
      b.account_owner_team_stamped,
      e.account_owner_team_stamped                                              AS account_owner_team_ending,
      b.stage_name,
      e.stage_name                                                              AS stage_name_ending,
      b.stage_name_3plus,
      e.stage_name_3plus                                                        AS stage_name_3plus_ending,
      b.stage_name_4plus,
      e.stage_name_4plus                                                        AS stage_name_4plus_ending,
      b.created_date,
      e.created_date                                                            AS created_date_ending,
      b.close_date,
      e.close_date                                                              AS close_date_ending,
      SUM(b.opps)                                                               AS opps,
      SUM(e.opps)                                                               AS opps_ending,
      SUM(b.pre_covid_iacv)                                                     AS c19,
      SUM(e.pre_covid_iacv)                                                     AS c19_ending,
      SUM(b.net_iacv)                                                           AS net_iacv,
      SUM(e.net_iacv)                                                           AS net_iacv_ending,
      SUM(b.forecasted_iacv)                                                    AS forecasted_iacv,
      SUM(e.forecasted_iacv)                                                    AS forecasted_iacv_ending
    FROM beginning b
    FULL OUTER JOIN ending e
      ON b.opportunity_id || b.close_qtr = e.opportunity_id || e.close_qtr
    {{ dbt_utils.group_by(n=20) }}

), waterfall AS (

    SELECT
      combined.*,
      CASE WHEN close_date IS NOT NULL THEN forecasted_iacv ELSE 0 END                                                                      AS starting_pipeline,
      CASE WHEN created_date_ending >= first_day_of_fiscal_quarter AND close_date_ending IS NOT NULL THEN forecasted_iacv_ending ELSE 0 END AS created_in_qtr,
      CASE WHEN created_date_ending < first_day_of_fiscal_quarter AND close_date IS NULL THEN forecasted_iacv_ending ELSE 0 END             AS pulled_in_from_other_qtr,
      CASE WHEN stage_name_ending = '8-Closed Lost' AND net_iacv_ending = 0 THEN -forecasted_iacv_ending ELSE 0 END                         AS closed_lost,
      CASE WHEN close_date_ending IS NULL THEN -forecasted_iacv ELSE 0 END                                                                  AS slipped_deals,
      ZEROIFNULL(-net_iacv_ending)                                                                                                          AS net_iacv_waterfall,
      CASE
        WHEN stage_name_ending = 'Closed Won' THEN 0
        WHEN stage_name_ending = '9-Unqualified' THEN 0
        WHEN stage_name_ending = '10-Duplicate' THEN 0
        WHEN stage_name_ending = '8-Closed Lost' THEN 0
        ELSE forecasted_iacv_ending
      END                                                                                                                                   AS ending_pipeline,
      CASE
        WHEN (stage_name_ending = '9-Unqualified' OR stage_name_ending = '10-Duplicate') AND close_date_ending IS NOT NULL
        THEN -forecasted_iacv_ending ELSE 0
      END                                                                                                                                   AS duplicate_unqualified


    FROM combined

), net_change_in_pipeline_iacv AS (

    SELECT
      waterfall.*,
      (ending_pipeline - (starting_pipeline + created_in_qtr + pulled_in_from_other_qtr + closed_lost + duplicate_unqualified + slipped_deals)) - net_iacv_waterfall
                                                                                                                                             AS  net_change_in_pipeline_iacv
    FROM waterfall

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['opportunity_id', 'close_qtr']) }} AS primary_key,
      opportunity_id,
      close_qtr,
      fiscal_close_year,
      first_day_of_fiscal_quarter,
      order_type,
      order_type_ending,
      sales_segment,
      sales_segment_ending,
      account_owner_team_stamped,
      account_owner_team_ending,
      stage_name,
      stage_name_ending,
      stage_name_3plus,
      stage_name_3plus_ending,
      stage_name_4plus,
      stage_name_4plus_ending,
      created_date,
      created_date_ending,
      close_date,
      close_date_ending,
      opps,
      opps_ending,
      c19,
      c19_ending,
      net_iacv,
      net_iacv_ending,
      forecasted_iacv,
      forecasted_iacv_ending,
      starting_pipeline,
      net_change_in_pipeline_iacv,
      created_in_qtr,
      pulled_in_from_other_qtr,
      net_iacv_waterfall,
      closed_lost,
      duplicate_unqualified,
      slipped_deals,
      ending_pipeline
    FROM net_change_in_pipeline_iacv

)

SELECT *
FROM final
WHERE close_date_ending >= '2019-11-01'
  OR close_date >= '2019-11-01'40:T3fc0,WITH date_details AS (

    SELECT
      *,
      DENSE_RANK() OVER (ORDER BY first_day_of_fiscal_quarter) AS quarter_number
    FROM "PROD".legacy.date_details
    ORDER BY 1 DESC

), sfdc_accounts_xf AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.sfdc_accounts_xf

), sfdc_opportunity_snapshot_history AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.sfdc_opportunity_snapshot_history

), sfdc_opportunity_xf AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.sfdc_opportunity_xf

), beginning AS(

    SELECT
      d.fiscal_quarter_name_fy              AS close_qtr,
      d.fiscal_year                         AS fiscal_close_year,
      d.first_day_of_fiscal_quarter,
      COALESCE (o.order_type, '3. Growth')  AS order_type,
      CASE
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'SMB'                                                           THEN 'SMB'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'Mid-Market'                                                    THEN 'Mid-Market'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment IN ('Large', 'US West', 'US East', 'Public Sector''EMEA', 'APAC') THEN 'Large'
        ELSE a.ultimate_parent_account_segment
      END                                   AS sales_segment,
      h.stage_name,
      CASE
        WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing', '1-Discovery', '2-Developing', '2-Scoping')  THEN 'Pipeline'
        WHEN h.stage_name IN ('3-Technical Evaluation', '4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                         THEN '3+ Pipeline'
        WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                       THEN 'Lost'
        WHEN h.stage_name IN ('Closed Won')                                                                                                         THEN 'Closed Won'
        ELSE 'Other'
      END                                   AS stage_name_3plus,
      CASE
         WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing','1-Discovery', '2-Developing', '2-Scoping', '3-Technical Evaluation')     THEN 'Pipeline'
         WHEN h.stage_name IN ('4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                                                                               THEN '4+ Pipeline'
         WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                                                   THEN 'Lost'
         WHEN h.stage_name IN ('Closed Won')                                                                                                                                     THEN 'Closed Won'
         ELSE 'Other'
         END                                  AS stage_name_4plus,
         h.opportunity_id,
       CASE
         WHEN o.account_owner_team_stamped = 'US East'                                                                                       THEN 'US East'
         WHEN o.account_owner_team_stamped = 'US West'                                                                                       THEN 'US West'
         WHEN o.account_owner_team_stamped = 'EMEA'                                                                                          THEN 'EMEA'
         WHEN o.account_owner_team_stamped = 'APAC'                                                                                          THEN 'APAC'
         WHEN o.account_owner_team_stamped = 'Public Sector'                                                                                 THEN 'Public Sector'
         WHEN o.account_owner_team_stamped IN ('Commercial', 'Commercial - MM', 'MM - East', 'MM - West', 'MM-EMEA', 'MM - EMEA', 'MM-APAC') THEN 'MM'
         WHEN o.account_owner_team_stamped IN ('SMB', 'SMB - US', 'SMB - International', 'Commercial - SMB')                                 THEN 'SMB'
         ELSE 'Other'
       END                                  AS account_owner_team_stamped,
       DATE(h.created_date)                 AS created_date,
       DATE(h.close_date)                   AS close_date,
       COUNT(DISTINCT h.opportunity_id)     AS opps,
       SUM(CASE
             WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost') AND h.sales_type = 'Renewal' THEN h.renewal_acv*-1
             WHEN h.stage_name IN ('Closed Won')                                                THEN h.forecasted_iacv
             ELSE 0
           END)                             AS net_iacv,
       SUM(h.forecasted_IACV)               AS forecasted_iacv,
       SUM(o.pre_covid_iacv)                AS pre_covid_iacv
     FROM sfdc_opportunity_snapshot_history h
     LEFT JOIN sfdc_opportunity_xf o
       ON h.opportunity_id = o.opportunity_id
     LEFT JOIN sfdc_accounts_xf a
       ON h.account_id = a.account_id
     INNER JOIN date_details d
       ON h.close_date = d.date_actual
     INNER JOIN date_details dd2
       ON h.date_actual = dd2.date_actual
     WHERE dd2.day_of_fiscal_quarter = 1
       AND d.quarter_number - dd2.quarter_number = 0
     group by 1,2,3,4,5,6,7,8,9,10,11,12

), ENDING AS (

    SELECT
      d.fiscal_quarter_name_fy                  AS close_qtr,
      d.fiscal_year                             AS fiscal_close_year,
      d.first_day_of_fiscal_quarter,
      COALESCE (o.order_type, '3. Growth')      AS order_type,
      CASE
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'SMB'                                                            THEN 'SMB'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment = 'Mid-Market'                                                     THEN 'Mid-Market'
        WHEN (a.ultimate_parent_account_segment = 'Unknown' OR a.ultimate_parent_account_segment IS NULL) AND o.user_segment IN ('Large', 'US West', 'US East', 'Public Sector''EMEA', 'APAC')  THEN 'Large'
        ELSE a.ultimate_parent_account_segment
      END                                       AS sales_segment,
      h.stage_name,
      CASE
        WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing', '1-Discovery', '2-Developing', '2-Scoping')  THEN 'Pipeline'
        WHEN h.stage_name IN ('3-Technical Evaluation', '4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                         THEN '3+ Pipeline'
        WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                       THEN 'Lost'
        WHEN h.stage_name IN ('Closed Won')                                                                                                         THEN 'Closed Won'
        ELSE 'Other'
      END                                       AS stage_name_3plus,
      CASE
        WHEN h.stage_name IN ('00-Pre Opportunity','0-Pending Acceptance','0-Qualifying','Developing','1-Discovery', '2-Developing', '2-Scoping', '3-Technical Evaluation')     THEN 'Pipeline'
        WHEN h.stage_name IN ('4-Proposal', '5-Negotiating', '6-Awaiting Signature', '7-Closing')                                                                               THEN '4+ Pipeline'
        WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost')                                                                                                                   THEN 'Lost'
        WHEN h.stage_name IN ('Closed Won')                                                                                                                                     THEN 'Closed Won'
        ELSE 'Other'
      END                                       AS stage_name_4plus,
      h.opportunity_id,
      CASE
        WHEN o.account_owner_team_stamped = 'US East'                                                                                       THEN 'US East'
        WHEN o.account_owner_team_stamped = 'US West'                                                                                       THEN 'US West'
        WHEN o.account_owner_team_stamped = 'EMEA'                                                                                          THEN 'EMEA'
        WHEN o.account_owner_team_stamped = 'APAC'                                                                                          THEN 'APAC'
        WHEN o.account_owner_team_stamped = 'Public Sector'                                                                                 THEN 'Public Sector'
        WHEN o.account_owner_team_stamped IN ('Commercial', 'Commercial - MM', 'MM - East', 'MM - West', 'MM-EMEA', 'MM - EMEA', 'MM-APAC') THEN 'MM'
        WHEN o.account_owner_team_stamped IN ('SMB', 'SMB - US', 'SMB - International', 'Commercial - SMB')                                 THEN 'SMB'
        ELSE 'Other'
      END                                       AS account_owner_team_stamped,
      DATE(h.created_date)                      AS created_date,
      DATE(h.close_date)                        AS close_date,
      COUNT(DISTINCT h.opportunity_id)          AS opps,
      SUM(CASE
            WHEN h.stage_name IN ('8-Closed Lost', 'Closed Lost') AND h.sales_type = 'Renewal'      THEN h.renewal_acv*-1
            WHEN h.stage_name IN ('Closed Won')                                                     THEN h.forecasted_iacv
            ELSE 0
          END)                                  AS net_iacv,
      SUM(h.forecasted_iacv)                    AS forecasted_iacv,
      SUM(o.pre_covid_iacv)                     AS pre_covid_iacv
    FROM sfdc_opportunity_snapshot_history h
    LEFT JOIN sfdc_opportunity_xf o
      ON h.opportunity_id = o.opportunity_id
    LEFT JOIN sfdc_accounts_xf a
      ON h.account_id = a.account_id
    INNER JOIN date_details d
      ON h.close_date = d.date_actual
    INNER JOIN date_details dd2
      ON h.date_actual = dd2.date_actual
    WHERE dd2.day_of_fiscal_quarter = 1
      AND d.quarter_number - dd2.quarter_number = -1
    group by 1,2,3,4,5,6,7,8,9,10,11,12

), combined AS (

    SELECT
      COALESCE (b.opportunity_id, e.opportunity_id)                             AS opportunity_id,
      COALESCE (b.close_qtr, e.close_qtr)                                       AS close_qtr,
      COALESCE (b.fiscal_close_year, e.fiscal_close_year)                       AS fiscal_close_year,
      COALESCE (b.first_day_of_fiscal_quarter, e.first_day_of_fiscal_quarter)   AS first_day_of_fiscal_quarter,
      b.order_type,
      e.order_type                                                              AS order_type_ending,
      b.sales_segment,
      e.sales_segment                                                           AS sales_segment_ending,
      b.account_owner_team_stamped,
      e.account_owner_team_stamped                                              AS account_owner_team_ending,
      b.stage_name,
      e.stage_name                                                              AS stage_name_ending,
      b.stage_name_3plus,
      e.stage_name_3plus                                                        AS stage_name_3plus_ending,
      b.stage_name_4plus,
      e.stage_name_4plus                                                        AS stage_name_4plus_ending,
      b.created_date,
      e.created_date                                                            AS created_date_ending,
      b.close_date,
      e.close_date                                                              AS close_date_ending,
      SUM(b.opps)                                                               AS opps,
      SUM(e.opps)                                                               AS opps_ending,
      SUM(b.pre_covid_iacv)                                                     AS c19,
      SUM(e.pre_covid_iacv)                                                     AS c19_ending,
      SUM(b.net_iacv)                                                           AS net_iacv,
      SUM(e.net_iacv)                                                           AS net_iacv_ending,
      SUM(b.forecasted_iacv)                                                    AS forecasted_iacv,
      SUM(e.forecasted_iacv)                                                    AS forecasted_iacv_ending
    FROM beginning b
    FULL OUTER JOIN ending e
      ON b.opportunity_id || b.close_qtr = e.opportunity_id || e.close_qtr
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20

), waterfall AS (

    SELECT
      combined.*,
      CASE WHEN close_date IS NOT NULL THEN forecasted_iacv ELSE 0 END                                                                      AS starting_pipeline,
      CASE WHEN created_date_ending >= first_day_of_fiscal_quarter AND close_date_ending IS NOT NULL THEN forecasted_iacv_ending ELSE 0 END AS created_in_qtr,
      CASE WHEN created_date_ending < first_day_of_fiscal_quarter AND close_date IS NULL THEN forecasted_iacv_ending ELSE 0 END             AS pulled_in_from_other_qtr,
      CASE WHEN stage_name_ending = '8-Closed Lost' AND net_iacv_ending = 0 THEN -forecasted_iacv_ending ELSE 0 END                         AS closed_lost,
      CASE WHEN close_date_ending IS NULL THEN -forecasted_iacv ELSE 0 END                                                                  AS slipped_deals,
      ZEROIFNULL(-net_iacv_ending)                                                                                                          AS net_iacv_waterfall,
      CASE
        WHEN stage_name_ending = 'Closed Won' THEN 0
        WHEN stage_name_ending = '9-Unqualified' THEN 0
        WHEN stage_name_ending = '10-Duplicate' THEN 0
        WHEN stage_name_ending = '8-Closed Lost' THEN 0
        ELSE forecasted_iacv_ending
      END                                                                                                                                   AS ending_pipeline,
      CASE
        WHEN (stage_name_ending = '9-Unqualified' OR stage_name_ending = '10-Duplicate') AND close_date_ending IS NOT NULL
        THEN -forecasted_iacv_ending ELSE 0
      END                                                                                                                                   AS duplicate_unqualified


    FROM combined

), net_change_in_pipeline_iacv AS (

    SELECT
      waterfall.*,
      (ending_pipeline - (starting_pipeline + created_in_qtr + pulled_in_from_other_qtr + closed_lost + duplicate_unqualified + slipped_deals)) - net_iacv_waterfall
                                                                                                                                             AS  net_change_in_pipeline_iacv
    FROM waterfall

), final AS (

    SELECT
      md5(cast(coalesce(cast(opportunity_id as 
    varchar
), '') || '-' || coalesce(cast(close_qtr as 
    varchar
), '') as 
    varchar
)) AS primary_key,
      opportunity_id,
      close_qtr,
      fiscal_close_year,
      first_day_of_fiscal_quarter,
      order_type,
      order_type_ending,
      sales_segment,
      sales_segment_ending,
      account_owner_team_stamped,
      account_owner_team_ending,
      stage_name,
      stage_name_ending,
      stage_name_3plus,
      stage_name_3plus_ending,
      stage_name_4plus,
      stage_name_4plus_ending,
      created_date,
      created_date_ending,
      close_date,
      close_date_ending,
      opps,
      opps_ending,
      c19,
      c19_ending,
      net_iacv,
      net_iacv_ending,
      forecasted_iacv,
      forecasted_iacv_ending,
      starting_pipeline,
      net_change_in_pipeline_iacv,
      created_in_qtr,
      pulled_in_from_other_qtr,
      net_iacv_waterfall,
      closed_lost,
      duplicate_unqualified,
      slipped_deals,
      ending_pipeline
    FROM net_change_in_pipeline_iacv

)

SELECT *
FROM final
WHERE close_date_ending >= '2019-11-01'
  OR close_date >= '2019-11-01'41:T199d,WITH date_table AS (

    SELECT *
    FROM {{ ref('date_details') }}
    WHERE day_of_month = 1

), sfdc_accounts AS (

    SELECT *
    FROM {{ ref('sfdc_accounts_xf') }}

), sfdc_deleted_accounts AS (

    SELECT *
    FROM {{ ref('sfdc_deleted_accounts') }}

), zuora_accounts AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE

), zuora_invoices AS (

    SELECT *
    FROM {{ ref('zuora_invoice_charges') }}

), zuora_product AS (

    SELECT *
    FROM {{ ref('zuora_product_source') }}
    WHERE is_deleted = FALSE

), zuora_product_rp AS (

    SELECT *
    FROM {{ ref('zuora_product_rate_plan_source') }}
    WHERE is_deleted = FALSE

), zuora_product_rpc AS (

    SELECT *
    FROM {{ ref('zuora_product_rate_plan_charge_source') }}

), zuora_product_rpct AS (

    SELECT *
    FROM {{ ref('zuora_product_rate_plan_charge_tier_source') }}

), initial_join_to_sfdc AS (

  SELECT
    invoice_number,
    invoice_item_id,
    zuora_accounts.crm_id                                AS invoice_crm_id,
    sfdc_accounts.account_id                             AS sfdc_account_id_int,
    zuora_accounts.account_name,
    invoice_date,
    DATE_TRUNC('month',invoice_date)                     AS invoice_month,
    product_name,
    product_rate_plan_charge_id,
    {{ product_category('rate_plan_name') }},
    rate_plan_name,
    charge_type,
    invoice_item_unit_price,
    quantity                                             AS quantity,
    invoice_item_charge_amount                           AS invoice_item_charge_amount
  FROM zuora_invoices
  LEFT JOIN zuora_accounts
    ON zuora_invoices.invoice_account_id = zuora_accounts.account_id
  LEFT JOIN sfdc_accounts
    ON zuora_accounts.crm_id = sfdc_accounts.account_id
  WHERE invoice_item_charge_amount != 0

), replace_sfdc_account_id_with_master_record_id AS (

    SELECT
      COALESCE(initial_join_to_sfdc.sfdc_account_id_int, sfdc_master_record_id) AS sfdc_account_id,
      initial_join_to_sfdc.*
    FROM initial_join_to_sfdc
    LEFT JOIN sfdc_deleted_accounts
      ON initial_join_to_sfdc.invoice_crm_id = sfdc_deleted_accounts.sfdc_account_id

), joined AS (

    SELECT
      invoice_number,
      invoice_item_id,
      sfdc_account_id,
      CASE
        WHEN ultimate_parent_account_segment = 'Unknown' THEN 'SMB'
        WHEN ultimate_parent_account_segment = '' THEN 'SMB'
        ELSE ultimate_parent_account_segment
      END                                     AS ultimate_parent_segment,
      replace_account_id.account_name,
      invoice_date,
      invoice_month,
      product_name,
      product_rate_plan_charge_id,
      product_category,
      account_type,
      rate_plan_name,
      charge_type,
      invoice_item_unit_price,
      quantity                                AS quantity,
      invoice_item_charge_amount              AS invoice_item_charge_amount
    FROM replace_sfdc_account_id_with_master_record_id replace_account_id
    LEFT JOIN sfdc_accounts
      ON replace_account_id.sfdc_account_id = sfdc_accounts.account_id

), list_price AS (

  SELECT
    zuora_product_rp.product_rate_plan_name,
    zuora_product_rpc.product_rate_plan_charge_name,
    zuora_product_rpc.product_rate_plan_charge_id,
    MIN(zuora_product_rpct.price)             AS billing_list_price
  FROM zuora_product
  INNER JOIN zuora_product_rp
    ON zuora_product.product_id = zuora_product_rp.product_id
  INNER JOIN zuora_product_rpc
    ON zuora_product_rp.product_rate_plan_id = zuora_product_rpc.product_rate_plan_id
  INNER JOIN zuora_product_rpct
    ON zuora_product_rpc.product_rate_plan_charge_id = zuora_product_rpct.product_rate_plan_charge_id
  WHERE zuora_product.effective_start_date <= CURRENT_DATE
    AND zuora_product_rpct.currency = 'USD'
  GROUP BY 1,2,3
  ORDER BY 1,2

)

SELECT
  joined.invoice_number,
  joined.invoice_item_id,
  sfdc_account_id,
  account_name,
  account_type,
  invoice_date,
  joined.product_name,
  joined.rate_plan_name,
  quantity,
  invoice_item_unit_price,
  invoice_item_charge_amount,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (invoice_item_unit_price * 12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (invoice_item_unit_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (invoice_item_unit_price/5)
    ELSE invoice_item_unit_price
  END                                           AS annual_price,
  quantity * annual_price                       AS quantity_times_annual,
  ultimate_parent_segment,
  product_category,
  invoice_month,
  fiscal_quarter_name_fy                        AS fiscal_period,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (billing_list_price*12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (billing_list_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (billing_list_price/5)
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE billing_list_price
  END                                           AS list_price,
  CASE
    WHEN annual_price = list_price THEN 0
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE ((annual_price - list_price)/NULLIF(list_price,0)) * -1
  END                                           AS discount,
  CASE
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE quantity * list_price
  END                                           AS list_price_times_quantity
FROM joined
LEFT JOIN list_price
  ON joined.product_rate_plan_charge_id = list_price.product_rate_plan_charge_id
LEFT JOIN date_table
  ON joined.invoice_month = date_table.date_actual
ORDER BY invoice_date, invoice_number42:T2c26,WITH date_table AS (

    SELECT *
    FROM "PROD".legacy.date_details
    WHERE day_of_month = 1

), sfdc_accounts AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.sfdc_accounts_xf

), sfdc_deleted_accounts AS (

    SELECT *
    FROM "PROD".legacy.sfdc_deleted_accounts

), zuora_accounts AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE

), zuora_invoices AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_invoice_charges

), zuora_product AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_source
    WHERE is_deleted = FALSE

), zuora_product_rp AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_rate_plan_source
    WHERE is_deleted = FALSE

), zuora_product_rpc AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_rate_plan_charge_source

), zuora_product_rpct AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_rate_plan_charge_tier_source

), initial_join_to_sfdc AS (

  SELECT
    invoice_number,
    invoice_item_id,
    zuora_accounts.crm_id                                AS invoice_crm_id,
    sfdc_accounts.account_id                             AS sfdc_account_id_int,
    zuora_accounts.account_name,
    invoice_date,
    DATE_TRUNC('month',invoice_date)                     AS invoice_month,
    product_name,
    product_rate_plan_charge_id,
    CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
    rate_plan_name,
    charge_type,
    invoice_item_unit_price,
    quantity                                             AS quantity,
    invoice_item_charge_amount                           AS invoice_item_charge_amount
  FROM zuora_invoices
  LEFT JOIN zuora_accounts
    ON zuora_invoices.invoice_account_id = zuora_accounts.account_id
  LEFT JOIN sfdc_accounts
    ON zuora_accounts.crm_id = sfdc_accounts.account_id
  WHERE invoice_item_charge_amount != 0

), replace_sfdc_account_id_with_master_record_id AS (

    SELECT
      COALESCE(initial_join_to_sfdc.sfdc_account_id_int, sfdc_master_record_id) AS sfdc_account_id,
      initial_join_to_sfdc.*
    FROM initial_join_to_sfdc
    LEFT JOIN sfdc_deleted_accounts
      ON initial_join_to_sfdc.invoice_crm_id = sfdc_deleted_accounts.sfdc_account_id

), joined AS (

    SELECT
      invoice_number,
      invoice_item_id,
      sfdc_account_id,
      CASE
        WHEN ultimate_parent_account_segment = 'Unknown' THEN 'SMB'
        WHEN ultimate_parent_account_segment = '' THEN 'SMB'
        ELSE ultimate_parent_account_segment
      END                                     AS ultimate_parent_segment,
      replace_account_id.account_name,
      invoice_date,
      invoice_month,
      product_name,
      product_rate_plan_charge_id,
      product_category,
      account_type,
      rate_plan_name,
      charge_type,
      invoice_item_unit_price,
      quantity                                AS quantity,
      invoice_item_charge_amount              AS invoice_item_charge_amount
    FROM replace_sfdc_account_id_with_master_record_id replace_account_id
    LEFT JOIN sfdc_accounts
      ON replace_account_id.sfdc_account_id = sfdc_accounts.account_id

), list_price AS (

  SELECT
    zuora_product_rp.product_rate_plan_name,
    zuora_product_rpc.product_rate_plan_charge_name,
    zuora_product_rpc.product_rate_plan_charge_id,
    MIN(zuora_product_rpct.price)             AS billing_list_price
  FROM zuora_product
  INNER JOIN zuora_product_rp
    ON zuora_product.product_id = zuora_product_rp.product_id
  INNER JOIN zuora_product_rpc
    ON zuora_product_rp.product_rate_plan_id = zuora_product_rpc.product_rate_plan_id
  INNER JOIN zuora_product_rpct
    ON zuora_product_rpc.product_rate_plan_charge_id = zuora_product_rpct.product_rate_plan_charge_id
  WHERE zuora_product.effective_start_date <= CURRENT_DATE
    AND zuora_product_rpct.currency = 'USD'
  GROUP BY 1,2,3
  ORDER BY 1,2

)

SELECT
  joined.invoice_number,
  joined.invoice_item_id,
  sfdc_account_id,
  account_name,
  account_type,
  invoice_date,
  joined.product_name,
  joined.rate_plan_name,
  quantity,
  invoice_item_unit_price,
  invoice_item_charge_amount,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (invoice_item_unit_price * 12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (invoice_item_unit_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (invoice_item_unit_price/5)
    ELSE invoice_item_unit_price
  END                                           AS annual_price,
  quantity * annual_price                       AS quantity_times_annual,
  ultimate_parent_segment,
  product_category,
  invoice_month,
  fiscal_quarter_name_fy                        AS fiscal_period,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (billing_list_price*12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (billing_list_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (billing_list_price/5)
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE billing_list_price
  END                                           AS list_price,
  CASE
    WHEN annual_price = list_price THEN 0
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE ((annual_price - list_price)/NULLIF(list_price,0)) * -1
  END                                           AS discount,
  CASE
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE quantity * list_price
  END                                           AS list_price_times_quantity
FROM joined
LEFT JOIN list_price
  ON joined.product_rate_plan_charge_id = list_price.product_rate_plan_charge_id
LEFT JOIN date_table
  ON joined.invoice_month = date_table.date_actual
ORDER BY invoice_date, invoice_number43:T5b2,WITH date_details AS (
  
    SELECT *
    FROM {{ ref('date_details') }}
    WHERE last_day_of_month = date_actual
    
), namespace AS (

  SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_historical_daily') }}
  
), lineage AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }}

), statistics AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_statistics_historical_monthly') }}

), storage AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_storage_statistics_historical_monthly') }}

)

SELECT
  date_details.date_actual AS snapshot_month,
  namespace.*,
  lineage.ultimate_parent_id,
  lineage.ultimate_parent_plan_id,
  lineage.namespace_is_internal,
  statistics.shared_runners_seconds,
  statistics.shared_runners_seconds_last_reset,
  storage.repository_size,
  storage.container_registry_size,
  storage.lfs_objects_size,
  storage.wiki_size,
  storage.build_artifacts_size,
  storage.storage_size,
  storage.packages_size
FROM namespace
LEFT JOIN lineage
  ON namespace.namespace_id = lineage.namespace_id
  AND namespace.snapshot_day = lineage.snapshot_day
LEFT JOIN statistics
  ON namespace.namespace_id = statistics.namespace_id
  AND namespace.snapshot_day = statistics.snapshot_month
LEFT JOIN storage
  ON namespace.namespace_id = storage.namespace_id
  AND namespace.snapshot_day = storage.snapshot_month
INNER JOIN date_details
  ON date_details.date_actual = namespace.snapshot_day44:T5cb,WITH date_details AS (
  
    SELECT *
    FROM "PROD".legacy.date_details
    WHERE last_day_of_month = date_actual
    
), namespace AS (

  SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_historical_daily
  
), lineage AS (

    SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), statistics AS (

    SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_statistics_historical_monthly

), storage AS (

    SELECT *
    FROM "PREP".preparation.gitlab_dotcom_namespace_storage_statistics_historical_monthly

)

SELECT
  date_details.date_actual AS snapshot_month,
  namespace.*,
  lineage.ultimate_parent_id,
  lineage.ultimate_parent_plan_id,
  lineage.namespace_is_internal,
  statistics.shared_runners_seconds,
  statistics.shared_runners_seconds_last_reset,
  storage.repository_size,
  storage.container_registry_size,
  storage.lfs_objects_size,
  storage.wiki_size,
  storage.build_artifacts_size,
  storage.storage_size,
  storage.packages_size
FROM namespace
LEFT JOIN lineage
  ON namespace.namespace_id = lineage.namespace_id
  AND namespace.snapshot_day = lineage.snapshot_day
LEFT JOIN statistics
  ON namespace.namespace_id = statistics.namespace_id
  AND namespace.snapshot_day = statistics.snapshot_month
LEFT JOIN storage
  ON namespace.namespace_id = storage.namespace_id
  AND namespace.snapshot_day = storage.snapshot_month
INNER JOIN date_details
  ON date_details.date_actual = namespace.snapshot_day45:Tfd3,WITH transactions AS (

     SELECT *
     FROM {{ref('netsuite_transactions_source')}}

), transaction_lines AS (

     SELECT *
     FROM {{ref('netsuite_transaction_lines_xf')}}

), accounting_periods AS (

     SELECT *
     FROM {{ref('netsuite_accounting_periods_source')}}

), accounts AS (

     SELECT *
     FROM {{ref('netsuite_accounts_xf')}}

), classes AS (

     SELECT *
     FROM {{ref('netsuite_classes')}}

), subsidiaries AS (

     SELECT *
     FROM {{ref('netsuite_subsidiaries_source')}}

), departments AS (

     SELECT *
     FROM {{ref('netsuite_departments_xf')}}

), consolidated_exchange_rates AS (

     SELECT *
     FROM {{ref('netsuite_consolidated_exchange_rates')}}

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM {{ref('date_details')}}

), cost_category AS (

     SELECT *
     FROM {{ref('netsuite_expense_cost_category')}}

), income AS (

     SELECT
       t.transaction_id,
       t.external_ref_number,
       t.transaction_ext_id,
       t.document_id,
       tl.memo                                          AS transaction_lines_memo,
       tl.entity_name,
       tl.receipt_url,
       t.status,
       t.transaction_type,
       a.account_id,
       a.account_name,
       a.account_full_name,
       a.account_number,
       a.unique_account_number,
       a.parent_account_number,
       cl.class_id,
       cl.class_name,
       d.department_id,
       d.department_name,
       d.parent_department_name,
       ap.accounting_period_id,
       ap.accounting_period_starting_date::DATE         AS accounting_period,
       ap.accounting_period_name,
       SUM(CASE WHEN tl.subsidiary_id = 1 THEN amount
                ELSE (tl.amount * e.average_rate) END)  AS actual_amount
    FROM transaction_lines tl
    LEFT JOIN transactions t
      ON tl.transaction_id = t.transaction_id
    LEFT JOIN accounts a
      ON a.account_id = tl.account_id
    LEFT JOIN classes cl
      ON tl.class_id = cl.class_id
    LEFT JOIN departments d
      ON d.department_id = tl.department_id
    LEFT JOIN accounting_periods ap
      ON ap.accounting_period_id = t.accounting_period_id
    LEFT JOIN subsidiaries s
      ON tl.subsidiary_id = s.subsidiary_id
    LEFT JOIN consolidated_exchange_rates e
      ON ap.accounting_period_id = e.accounting_period_id
      AND e.from_subsidiary_id = s.subsidiary_id
    WHERE a.account_number between '4000' and '4999'
      AND ap.fiscal_calendar_id = 2
      AND e.to_subsidiary_id = 1
    {{ dbt_utils.group_by(n=23) }}

), income_statement_grouping AS (

    SELECT
      i.transaction_id,
      i.external_ref_number,
      i.transaction_ext_id,
      i.document_id,
      i.account_id,
      i.account_name,
      i.account_full_name,
      i.account_number || ' - ' || i.account_name          AS unique_account_name,
      i.account_number,
      i.parent_account_number,
      i.unique_account_number,
      -(i.actual_amount)                                   AS actual_amount,
      CASE
        WHEN i.account_number BETWEEN '4000' AND '4999'
          THEN '1-income'
      END                                                  AS income_statement_grouping,
      i.transaction_lines_memo,
      i.entity_name,
      i.receipt_url,
      i.status,
      i.transaction_type,
      i.class_id,
      i.class_name,
      i.department_id,
      i.department_name,
      i.parent_department_name,
      i.accounting_period_id,
      i.accounting_period,
      i.accounting_period_name,
      dd.fiscal_year,
      dd.fiscal_quarter,
      dd.fiscal_quarter_name
    FROM income i
    LEFT JOIN date_details dd
      ON dd.first_day_of_month = i.accounting_period

), cost_category_grouping AS (

    SELECT
      isg.*,
      'N/A'                                            AS cost_category_level_1,
      'N/A'                                            AS cost_category_level_2
    FROM income_statement_grouping isg

)

SELECT *
FROM cost_category_grouping46:T102d,WITH transactions AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_transactions_source

), transaction_lines AS (

     SELECT *
     FROM "PROD".restricted_safe_legacy.netsuite_transaction_lines_xf

), accounting_periods AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_accounting_periods_source

), accounts AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounts_xf

), classes AS (

     SELECT *
     FROM "PROD".legacy.netsuite_classes

), subsidiaries AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_subsidiaries_source

), departments AS (

     SELECT *
     FROM "PROD".legacy.netsuite_departments_xf

), consolidated_exchange_rates AS (

     SELECT *
     FROM "PROD".legacy.netsuite_consolidated_exchange_rates

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM "PROD".legacy.date_details

), cost_category AS (

     SELECT *
     FROM "PROD".legacy.netsuite_expense_cost_category

), income AS (

     SELECT
       t.transaction_id,
       t.external_ref_number,
       t.transaction_ext_id,
       t.document_id,
       tl.memo                                          AS transaction_lines_memo,
       tl.entity_name,
       tl.receipt_url,
       t.status,
       t.transaction_type,
       a.account_id,
       a.account_name,
       a.account_full_name,
       a.account_number,
       a.unique_account_number,
       a.parent_account_number,
       cl.class_id,
       cl.class_name,
       d.department_id,
       d.department_name,
       d.parent_department_name,
       ap.accounting_period_id,
       ap.accounting_period_starting_date::DATE         AS accounting_period,
       ap.accounting_period_name,
       SUM(CASE WHEN tl.subsidiary_id = 1 THEN amount
                ELSE (tl.amount * e.average_rate) END)  AS actual_amount
    FROM transaction_lines tl
    LEFT JOIN transactions t
      ON tl.transaction_id = t.transaction_id
    LEFT JOIN accounts a
      ON a.account_id = tl.account_id
    LEFT JOIN classes cl
      ON tl.class_id = cl.class_id
    LEFT JOIN departments d
      ON d.department_id = tl.department_id
    LEFT JOIN accounting_periods ap
      ON ap.accounting_period_id = t.accounting_period_id
    LEFT JOIN subsidiaries s
      ON tl.subsidiary_id = s.subsidiary_id
    LEFT JOIN consolidated_exchange_rates e
      ON ap.accounting_period_id = e.accounting_period_id
      AND e.from_subsidiary_id = s.subsidiary_id
    WHERE a.account_number between '4000' and '4999'
      AND ap.fiscal_calendar_id = 2
      AND e.to_subsidiary_id = 1
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), income_statement_grouping AS (

    SELECT
      i.transaction_id,
      i.external_ref_number,
      i.transaction_ext_id,
      i.document_id,
      i.account_id,
      i.account_name,
      i.account_full_name,
      i.account_number || ' - ' || i.account_name          AS unique_account_name,
      i.account_number,
      i.parent_account_number,
      i.unique_account_number,
      -(i.actual_amount)                                   AS actual_amount,
      CASE
        WHEN i.account_number BETWEEN '4000' AND '4999'
          THEN '1-income'
      END                                                  AS income_statement_grouping,
      i.transaction_lines_memo,
      i.entity_name,
      i.receipt_url,
      i.status,
      i.transaction_type,
      i.class_id,
      i.class_name,
      i.department_id,
      i.department_name,
      i.parent_department_name,
      i.accounting_period_id,
      i.accounting_period,
      i.accounting_period_name,
      dd.fiscal_year,
      dd.fiscal_quarter,
      dd.fiscal_quarter_name
    FROM income i
    LEFT JOIN date_details dd
      ON dd.first_day_of_month = i.accounting_period

), cost_category_grouping AS (

    SELECT
      isg.*,
      'N/A'                                            AS cost_category_level_1,
      'N/A'                                            AS cost_category_level_2
    FROM income_statement_grouping isg

)

SELECT *
FROM cost_category_grouping47:T79c,WITH date_table AS (

    SELECT *
    FROM {{ ref('date_details') }}

), zuora_accts AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}

), zuora_acct_period AS (

    SELECT *
    FROM {{ ref('zuora_accounting_period_source') }}

), zuora_contact AS (

    SELECT *
    FROM {{ ref('zuora_contact_source') }}

), zuora_product AS (

    SELECT *
    FROM {{ ref('zuora_product_source') }}

), zuora_rev_sch AS (

    SELECT *
    FROM {{ ref('zuora_revenue_schedule_item_source') }}

), zuora_rp AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}

), zuora_rpc AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}

), non_gaap_revenue AS (

    SELECT
      zuora_acct_period.accounting_period_start_date::DATE    AS accounting_period,

      -- account info
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --rate_plan info
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      {{ product_category('rate_plan_name') }},
      {{ delivery('product_category')}},
      zuora_product.product_name,
      SUM(zuora_rev_sch.revenue_schedule_item_amount)         AS revenue_amt
    FROM zuora_rev_sch
    INNER JOIN zuora_accts
      ON zuora_rev_sch.account_id = zuora_accts.account_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    INNER JOIN zuora_rpc
      ON zuora_rev_sch.rate_plan_charge_id = zuora_rpc.rate_plan_charge_id
    INNER JOIN zuora_rp
      ON zuora_rp.rate_plan_id = zuora_rpc.rate_plan_id
    INNER JOIN zuora_acct_period
      ON zuora_acct_period.accounting_period_id = zuora_rev_sch.accounting_period_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rev_sch.product_id
    {{ dbt_utils.group_by(n=11) }}

)

SELECT *
FROM non_gaap_revenue48:T1bcb,WITH date_table AS (

    SELECT *
    FROM "PROD".legacy.date_details

), zuora_accts AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), zuora_acct_period AS (

    SELECT *
    FROM "PREP".zuora.zuora_accounting_period_source

), zuora_contact AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_product AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_source

), zuora_rev_sch AS (

    SELECT *
    FROM "PREP".zuora.zuora_revenue_schedule_item_source

), zuora_rp AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source

), zuora_rpc AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source

), non_gaap_revenue AS (

    SELECT
      zuora_acct_period.accounting_period_start_date::DATE    AS accounting_period,

      -- account info
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --rate_plan info
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
      CASE 
  WHEN LOWER(product_category) LIKE ANY ('%saas%', 'storage', 'standard', 'basic', 'plus', 'githost', '%dedicated - ultimate%')
    THEN 'SaaS'
  WHEN LOWER(product_category) LIKE '%self-managed%'
    THEN 'Self-Managed'
  WHEN product_category IN (
                                        'Other'
                                      , 'Support'
                                      , 'Trueup'
                                      )
    THEN 'Others'
  ELSE NULL
END AS delivery,
      zuora_product.product_name,
      SUM(zuora_rev_sch.revenue_schedule_item_amount)         AS revenue_amt
    FROM zuora_rev_sch
    INNER JOIN zuora_accts
      ON zuora_rev_sch.account_id = zuora_accts.account_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    INNER JOIN zuora_rpc
      ON zuora_rev_sch.rate_plan_charge_id = zuora_rpc.rate_plan_charge_id
    INNER JOIN zuora_rp
      ON zuora_rp.rate_plan_id = zuora_rpc.rate_plan_id
    INNER JOIN zuora_acct_period
      ON zuora_acct_period.accounting_period_id = zuora_rev_sch.accounting_period_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rev_sch.product_id
    group by 1,2,3,4,5,6,7,8,9,10,11

)

SELECT *
FROM non_gaap_revenue49:T100d,WITH transactions AS (

     SELECT *
     FROM {{ref('netsuite_transactions_source')}}

), transaction_lines AS (

     SELECT *
     FROM {{ref('netsuite_transaction_lines_xf')}}

), accounting_periods AS (

     SELECT *
     FROM {{ref('netsuite_accounting_periods')}}

), accounts AS (

     SELECT *
     FROM {{ref('netsuite_accounts_xf')}}

), classes AS (

     SELECT *
     FROM {{ref('netsuite_classes')}}

), subsidiaries AS (

     SELECT *
     FROM {{ref('netsuite_subsidiaries_source')}}

), departments AS (

     SELECT *
     FROM {{ref('netsuite_departments_xf')}}

), consolidated_exchange_rates AS (

     SELECT *
     FROM {{ref('netsuite_consolidated_exchange_rates')}}

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM {{ref('date_details')}}

), cost_category AS (

     SELECT *
     FROM {{ref('netsuite_expense_cost_category')}}

), opex_cogs AS (

     SELECT
       t.transaction_id,
       t.external_ref_number,
       t.transaction_ext_id,
       t.document_id,
       tl.memo                                          AS transaction_lines_memo,
       tl.entity_name,
       tl.receipt_url,
       t.status,
       t.transaction_type,
       a.account_id,
       a.account_name,
       a.account_full_name,
       a.account_number,
       a.unique_account_number,
       a.parent_account_number,
       cl.class_id,
       cl.class_name,
       d.department_id,
       d.department_name,
       d.parent_department_name,
       ap.accounting_period_id,
       ap.accounting_period_starting_date::DATE         AS accounting_period,
       ap.accounting_period_name,
       SUM(CASE WHEN tl.subsidiary_id = 1 THEN amount
                ELSE (tl.amount * e.average_rate) END)  AS actual_amount
    FROM transaction_lines tl
    LEFT JOIN transactions t
      ON tl.transaction_id = t.transaction_id
    LEFT JOIN accounts a
      ON a.account_id = tl.account_id
    LEFT JOIN classes cl
      ON tl.class_id = cl.class_id
    LEFT JOIN departments d
      ON d.department_id = tl.department_id
    LEFT JOIN accounting_periods ap
      ON ap.accounting_period_id = t.accounting_period_id
    LEFT JOIN subsidiaries s
      ON tl.subsidiary_id = s.subsidiary_id
    LEFT JOIN consolidated_exchange_rates e
      ON ap.accounting_period_id = e.accounting_period_id
      AND e.from_subsidiary_id = s.subsidiary_id
    WHERE a.account_number between '5000' and '6999'
      AND ap.fiscal_calendar_id = 2
      AND e.to_subsidiary_id = 1
    {{ dbt_utils.group_by(n=23) }}

), income_statement_grouping AS (

    SELECT
      oc.transaction_id,
      oc.external_ref_number,
      oc.transaction_ext_id,
      oc.document_id,
      oc.account_id,
      oc.account_name,
      oc.account_full_name,
      oc.account_number || ' - ' || oc.account_name          AS unique_account_name,
      oc.account_number,
      oc.parent_account_number,
      oc.unique_account_number,
      oc.actual_amount,
      CASE
        WHEN oc.account_number BETWEEN '5000' AND '5999'
          THEN '2-cost of sales'
        WHEN oc.account_number BETWEEN '6000' AND '6999'
          THEN '3-expense'
      END                                                    AS income_statement_grouping,
      oc.transaction_lines_memo,
      oc.entity_name,
      oc.receipt_url,
      oc.status,
      oc.transaction_type,
      oc.class_id,
      oc.class_name,
      oc.department_id,
      oc.department_name,
      oc.parent_department_name,
      oc.accounting_period_id,
      oc.accounting_period,
      oc.accounting_period_name,
      dd.fiscal_year,
      dd.fiscal_quarter,
      dd.fiscal_quarter_name
    FROM opex_cogs oc
    LEFT JOIN date_details dd
      ON dd.first_day_of_month = oc.accounting_period

), cost_category_grouping AS (

    SELECT
      isg.*,
      cc.cost_category_level_1,
      cc.cost_category_level_2
    FROM income_statement_grouping isg
    LEFT JOIN cost_category cc
      ON isg.unique_account_name = cc.unique_account_name

)

SELECT *
FROM cost_category_grouping4a:T1065,WITH transactions AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_transactions_source

), transaction_lines AS (

     SELECT *
     FROM "PROD".restricted_safe_legacy.netsuite_transaction_lines_xf

), accounting_periods AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounting_periods

), accounts AS (

     SELECT *
     FROM "PROD".legacy.netsuite_accounts_xf

), classes AS (

     SELECT *
     FROM "PROD".legacy.netsuite_classes

), subsidiaries AS (

     SELECT *
     FROM "PREP".netsuite.netsuite_subsidiaries_source

), departments AS (

     SELECT *
     FROM "PROD".legacy.netsuite_departments_xf

), consolidated_exchange_rates AS (

     SELECT *
     FROM "PROD".legacy.netsuite_consolidated_exchange_rates

), date_details AS (

     SELECT DISTINCT
       first_day_of_month,
       fiscal_year,
       fiscal_quarter,
       fiscal_quarter_name
     FROM "PROD".legacy.date_details

), cost_category AS (

     SELECT *
     FROM "PROD".legacy.netsuite_expense_cost_category

), opex_cogs AS (

     SELECT
       t.transaction_id,
       t.external_ref_number,
       t.transaction_ext_id,
       t.document_id,
       tl.memo                                          AS transaction_lines_memo,
       tl.entity_name,
       tl.receipt_url,
       t.status,
       t.transaction_type,
       a.account_id,
       a.account_name,
       a.account_full_name,
       a.account_number,
       a.unique_account_number,
       a.parent_account_number,
       cl.class_id,
       cl.class_name,
       d.department_id,
       d.department_name,
       d.parent_department_name,
       ap.accounting_period_id,
       ap.accounting_period_starting_date::DATE         AS accounting_period,
       ap.accounting_period_name,
       SUM(CASE WHEN tl.subsidiary_id = 1 THEN amount
                ELSE (tl.amount * e.average_rate) END)  AS actual_amount
    FROM transaction_lines tl
    LEFT JOIN transactions t
      ON tl.transaction_id = t.transaction_id
    LEFT JOIN accounts a
      ON a.account_id = tl.account_id
    LEFT JOIN classes cl
      ON tl.class_id = cl.class_id
    LEFT JOIN departments d
      ON d.department_id = tl.department_id
    LEFT JOIN accounting_periods ap
      ON ap.accounting_period_id = t.accounting_period_id
    LEFT JOIN subsidiaries s
      ON tl.subsidiary_id = s.subsidiary_id
    LEFT JOIN consolidated_exchange_rates e
      ON ap.accounting_period_id = e.accounting_period_id
      AND e.from_subsidiary_id = s.subsidiary_id
    WHERE a.account_number between '5000' and '6999'
      AND ap.fiscal_calendar_id = 2
      AND e.to_subsidiary_id = 1
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23

), income_statement_grouping AS (

    SELECT
      oc.transaction_id,
      oc.external_ref_number,
      oc.transaction_ext_id,
      oc.document_id,
      oc.account_id,
      oc.account_name,
      oc.account_full_name,
      oc.account_number || ' - ' || oc.account_name          AS unique_account_name,
      oc.account_number,
      oc.parent_account_number,
      oc.unique_account_number,
      oc.actual_amount,
      CASE
        WHEN oc.account_number BETWEEN '5000' AND '5999'
          THEN '2-cost of sales'
        WHEN oc.account_number BETWEEN '6000' AND '6999'
          THEN '3-expense'
      END                                                    AS income_statement_grouping,
      oc.transaction_lines_memo,
      oc.entity_name,
      oc.receipt_url,
      oc.status,
      oc.transaction_type,
      oc.class_id,
      oc.class_name,
      oc.department_id,
      oc.department_name,
      oc.parent_department_name,
      oc.accounting_period_id,
      oc.accounting_period,
      oc.accounting_period_name,
      dd.fiscal_year,
      dd.fiscal_quarter,
      dd.fiscal_quarter_name
    FROM opex_cogs oc
    LEFT JOIN date_details dd
      ON dd.first_day_of_month = oc.accounting_period

), cost_category_grouping AS (

    SELECT
      isg.*,
      cc.cost_category_level_1,
      cc.cost_category_level_2
    FROM income_statement_grouping isg
    LEFT JOIN cost_category cc
      ON isg.unique_account_name = cc.unique_account_name

)

SELECT *
FROM cost_category_grouping4b:T81e,

WITH dates AS (

  SELECT
    "DATE_DAY",
  "DATE_ACTUAL",
  "DAY_NAME",
  "MONTH_ACTUAL",
  "YEAR_ACTUAL",
  "QUARTER_ACTUAL",
  "DAY_OF_WEEK",
  "FIRST_DAY_OF_WEEK",
  "WEEK_OF_YEAR",
  "DAY_OF_MONTH",
  "DAY_OF_QUARTER",
  "DAY_OF_YEAR",
  "FISCAL_YEAR",
  "FISCAL_QUARTER",
  "DAY_OF_FISCAL_QUARTER",
  "DAY_OF_FISCAL_YEAR",
  "MONTH_NAME",
  "FIRST_DAY_OF_MONTH",
  "LAST_DAY_OF_MONTH",
  "FIRST_DAY_OF_YEAR",
  "LAST_DAY_OF_YEAR",
  "FIRST_DAY_OF_QUARTER",
  "LAST_DAY_OF_QUARTER",
  "FIRST_DAY_OF_FISCAL_QUARTER",
  "LAST_DAY_OF_FISCAL_QUARTER",
  "FIRST_DAY_OF_FISCAL_YEAR",
  "LAST_DAY_OF_FISCAL_YEAR",
  "WEEK_OF_FISCAL_YEAR",
  "MONTH_OF_FISCAL_YEAR",
  "LAST_DAY_OF_WEEK",
  "QUARTER_NAME",
  "FISCAL_QUARTER_NAME",
  "FISCAL_QUARTER_NAME_FY",
  "FISCAL_QUARTER_NUMBER_ABSOLUTE",
  "FISCAL_MONTH_NAME",
  "FISCAL_MONTH_NAME_FY",
  "HOLIDAY_DESC",
  "IS_HOLIDAY",
  "LAST_MONTH_OF_FISCAL_QUARTER",
  "IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER",
  "LAST_MONTH_OF_FISCAL_YEAR",
  "IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR",
  "SNAPSHOT_DATE_FPA",
  "SNAPSHOT_DATE_BILLINGS",
  "DAYS_IN_MONTH_COUNT",
  "WEEK_OF_MONTH_NORMALISED",
  "DAY_OF_FISCAL_QUARTER_NORMALISED",
  "WEEK_OF_FISCAL_QUARTER_NORMALISED",
  "DAY_OF_FISCAL_YEAR_NORMALISED",
  "IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK",
  "DAYS_UNTIL_LAST_DAY_OF_MONTH",
  "CURRENT_DATE_ACTUAL",
  "CURRENT_FISCAL_YEAR",
  "CURRENT_FIRST_DAY_OF_FISCAL_YEAR",
  "CURRENT_FISCAL_QUARTER_NAME_FY",
  "CURRENT_FIRST_DAY_OF_MONTH"
  FROM "PROD".common_prep.prep_date

), final AS (

  SELECT
    

  TO_NUMBER(TO_CHAR(date_actual::DATE,'YYYYMMDD'),'99999999')

                                AS date_id,
    *
  FROM dates

)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2020-06-01'::DATE        AS model_created_date,
      '2023-01-09'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM finalc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.date_details"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"date_details"}],["$","small",null,{"children":"view"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],null,["$","dd",null,{"className":"detail-value","children":"untagged"}]]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"view"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.legacy.date_details"}]]}]]]}]}],null]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Join on this table to add additional date complexity"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"VIEW","schema":"LEGACY","name":"DATE_DETAILS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_ID":{"type":"NUMBER","index":1,"name":"DATE_ID","comment":null,"display_name":"date_id"},"DATE_DAY":{"type":"DATE","index":2,"name":"date_day","comment":null,"description":"Calendar date, e.g. '2019-02-02'","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_day"},"DATE_ACTUAL":{"type":"DATE","index":3,"name":"date_actual","comment":null,"description":"Matches `date_day`, duplicated for ease of use","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_actual"},"DAY_NAME":{"type":"TEXT","index":4,"name":"day_name","comment":null,"description":"Abbreviated name of the day of the week, e.g. 'Sat' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_name"},"MONTH_ACTUAL":{"type":"NUMBER","index":5,"name":"month_actual","comment":null,"description":"Number for the calendar month of the year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"month_actual"},"YEAR_ACTUAL":{"type":"NUMBER","index":6,"name":"year_actual","comment":null,"description":"Calendar year, e.g. '2019' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"year_actual"},"QUARTER_ACTUAL":{"type":"NUMBER","index":7,"name":"quarter_actual","comment":null,"description":"Calendar quarter, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"quarter_actual"},"DAY_OF_WEEK":{"type":"NUMBER","index":8,"name":"day_of_week","comment":null,"description":"Number of the day of the week, with Sunday = 1 and Saturday = 7","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_week"},"FIRST_DAY_OF_WEEK":{"type":"DATE","index":9,"name":"first_day_of_week","comment":null,"description":"Calendar date of the first Sunday of that week, e.g. '2019-01-27' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_week"},"WEEK_OF_YEAR":{"type":"NUMBER","index":10,"name":"week_of_year","comment":null,"description":"Calendar week of year, e.g. '5' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"week_of_year"},"DAY_OF_MONTH":{"type":"NUMBER","index":11,"name":"day_of_month","comment":null,"description":"Day Number of the month, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_month"},"DAY_OF_QUARTER":{"type":"NUMBER","index":12,"name":"day_of_quarter","comment":null,"description":"Day Number from the start of the calendar quarter, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_quarter"},"DAY_OF_YEAR":{"type":"NUMBER","index":13,"name":"day_of_year","comment":null,"description":"Day Number from the start of the calendar year, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_year"},"FISCAL_YEAR":{"type":"NUMBER","index":14,"name":"fiscal_year","comment":null,"description":"Fiscal year for the date, e.g. '2020' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":15,"name":"fiscal_quarter","comment":null,"description":"Fiscal quarter for the date, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_quarter"},"DAY_OF_FISCAL_QUARTER":{"type":"NUMBER","index":16,"name":"day_of_fiscal_quarter","comment":null,"description":"Day Number from the start of the fiscal quarter, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_fiscal_quarter"},"DAY_OF_FISCAL_YEAR":{"type":"NUMBER","index":17,"name":"day_of_fiscal_year","comment":null,"description":"Day Number from the start of the fiscal year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_fiscal_year"},"MONTH_NAME":{"type":"TEXT","index":18,"name":"month_name","comment":null,"description":"The full month name for any calendar month, e.g. 'February' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"month_name"},"FIRST_DAY_OF_MONTH":{"type":"DATE","index":19,"name":"first_day_of_month","comment":null,"description":"The first day of a calendar month, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_month"},"LAST_DAY_OF_MONTH":{"type":"DATE","index":20,"name":"last_day_of_month","comment":null,"description":"The last day of a calendar month, e.g. '2019-02-28' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_month"},"FIRST_DAY_OF_YEAR":{"type":"DATE","index":21,"name":"first_day_of_year","comment":null,"description":"The first day of a calendar year, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_year"},"LAST_DAY_OF_YEAR":{"type":"DATE","index":22,"name":"last_day_of_year","comment":null,"description":"The last day of a calendar year, e.g. '2019-12-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_year"},"FIRST_DAY_OF_QUARTER":{"type":"DATE","index":23,"name":"first_day_of_quarter","comment":null,"description":"The first day of a calendar quarter, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_quarter"},"LAST_DAY_OF_QUARTER":{"type":"DATE","index":24,"name":"last_day_of_quarter","comment":null,"description":"The last day of a calendar quarter, e.g. '2019-03-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_quarter"},"FIRST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":25,"name":"first_day_of_fiscal_quarter","comment":null,"description":"The first day of the fiscal quarter, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_fiscal_quarter"},"LAST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":26,"name":"last_day_of_fiscal_quarter","comment":null,"description":"The last day of the fiscal quarter, e.g. '2019-04-30' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_fiscal_quarter"},"FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":27,"name":"first_day_of_fiscal_year","comment":null,"description":"The first day of the fiscal year, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_fiscal_year"},"LAST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":28,"name":"last_day_of_fiscal_year","comment":null,"description":"The last day of the fiscal year, e.g. '2020-01-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_fiscal_year"},"WEEK_OF_FISCAL_YEAR":{"type":"NUMBER","index":29,"name":"week_of_fiscal_year","comment":null,"description":"The week number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"week_of_fiscal_year"},"MONTH_OF_FISCAL_YEAR":{"type":"NUMBER","index":30,"name":"month_of_fiscal_year","comment":null,"description":"The month number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"month_of_fiscal_year"},"LAST_DAY_OF_WEEK":{"type":"DATE","index":31,"name":"last_day_of_week","comment":null,"description":"The Saturday of the week, e.g. '2019-02-02' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_week"},"QUARTER_NAME":{"type":"TEXT","index":32,"name":"quarter_name","comment":null,"description":"The name of the calendar quarter, e.g. '2019-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"quarter_name"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":33,"name":"fiscal_quarter_name","comment":null,"description":"The name of the fiscal quarter, e.g '2020-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_quarter_name"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":34,"name":"fiscal_quarter_name_fy","comment":null,"description":"The name of the fiscal quarter, e.g 'FY20-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_quarter_name_fy"},"FISCAL_QUARTER_NUMBER_ABSOLUTE":{"type":"NUMBER","index":35,"name":"FISCAL_QUARTER_NUMBER_ABSOLUTE","comment":null,"display_name":"fiscal_quarter_number_absolute"},"FISCAL_MONTH_NAME":{"type":"TEXT","index":36,"name":"FISCAL_MONTH_NAME","comment":null,"display_name":"fiscal_month_name"},"FISCAL_MONTH_NAME_FY":{"type":"TEXT","index":37,"name":"FISCAL_MONTH_NAME_FY","comment":null,"display_name":"fiscal_month_name_fy"},"HOLIDAY_DESC":{"type":"TEXT","index":38,"name":"holiday_desc","comment":null,"description":"The name of the holiday, if applicable","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"holiday_desc"},"IS_HOLIDAY":{"type":"BOOLEAN","index":39,"name":"is_holiday","comment":null,"description":"Whether or not it is a holiday","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_holiday"},"LAST_MONTH_OF_FISCAL_QUARTER":{"type":"DATE","index":40,"name":"LAST_MONTH_OF_FISCAL_QUARTER","comment":null,"display_name":"last_month_of_fiscal_quarter"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER":{"type":"BOOLEAN","index":41,"name":"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER","comment":null,"display_name":"is_first_day_of_last_month_of_fiscal_quarter"},"LAST_MONTH_OF_FISCAL_YEAR":{"type":"DATE","index":42,"name":"LAST_MONTH_OF_FISCAL_YEAR","comment":null,"display_name":"last_month_of_fiscal_year"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR":{"type":"BOOLEAN","index":43,"name":"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR","comment":null,"display_name":"is_first_day_of_last_month_of_fiscal_year"},"SNAPSHOT_DATE_FPA":{"type":"DATE","index":44,"name":"SNAPSHOT_DATE_FPA","comment":null,"display_name":"snapshot_date_fpa"},"SNAPSHOT_DATE_BILLINGS":{"type":"DATE","index":45,"name":"SNAPSHOT_DATE_BILLINGS","comment":null,"display_name":"snapshot_date_billings"},"DAYS_IN_MONTH_COUNT":{"type":"NUMBER","index":46,"name":"DAYS_IN_MONTH_COUNT","comment":null,"display_name":"days_in_month_count"},"WEEK_OF_MONTH_NORMALISED":{"type":"NUMBER","index":47,"name":"WEEK_OF_MONTH_NORMALISED","comment":null,"display_name":"week_of_month_normalised"},"DAY_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":48,"name":"DAY_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"day_of_fiscal_quarter_normalised"},"WEEK_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":49,"name":"WEEK_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"week_of_fiscal_quarter_normalised"},"DAY_OF_FISCAL_YEAR_NORMALISED":{"type":"NUMBER","index":50,"name":"DAY_OF_FISCAL_YEAR_NORMALISED","comment":null,"display_name":"day_of_fiscal_year_normalised"},"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK":{"type":"NUMBER","index":51,"name":"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK","comment":null,"display_name":"is_first_day_of_fiscal_quarter_week"},"DAYS_UNTIL_LAST_DAY_OF_MONTH":{"type":"NUMBER","index":52,"name":"DAYS_UNTIL_LAST_DAY_OF_MONTH","comment":null,"display_name":"days_until_last_day_of_month"},"CURRENT_DATE_ACTUAL":{"type":"DATE","index":53,"name":"CURRENT_DATE_ACTUAL","comment":null,"display_name":"current_date_actual"},"CURRENT_FISCAL_YEAR":{"type":"NUMBER","index":54,"name":"CURRENT_FISCAL_YEAR","comment":null,"display_name":"current_fiscal_year"},"CURRENT_FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":55,"name":"CURRENT_FIRST_DAY_OF_FISCAL_YEAR","comment":null,"display_name":"current_first_day_of_fiscal_year"},"CURRENT_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":56,"name":"CURRENT_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"current_fiscal_quarter_name_fy"},"CURRENT_FIRST_DAY_OF_MONTH":{"type":"DATE","index":57,"name":"CURRENT_FIRST_DAY_OF_MONTH","comment":null,"display_name":"current_first_day_of_month"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.date_details","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('dim_date')}}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","date","date_details"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/date/date_details.sql","original_file_path":"models/legacy/date/date_details.sql","name":"date_details","alias":"date_details","checksum":{"name":"sha256","checksum":"4401b2363ba59daa347afc2beadfc88e103306b56dc93c1bdbb20e979b17e371"},"tags":[],"refs":[["dim_date"],["dim_date"]],"sources":[],"metrics":[],"description":"Join on this table to add additional date complexity","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/date/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/date_details.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view"},"created_at":1689033764.424968,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PROD\".common.dim_date\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.date_details","label":"date_details"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L10",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_PROJECT_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"PROJECT_ID":{"type":"NUMBER","index":2,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"VISIBILITY_LEVEL":{"type":"TEXT","index":4,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":5,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_project_historical_monthly","raw_sql":"WITH date_details AS (\n  \n    SELECT *\n    FROM {{ ref(\"date_details\") }}\n    WHERE last_day_of_month = date_actual\n     \n), project_snapshots AS (\n   SELECT\n     *,\n     IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_\n   FROM {{ ref('gitlab_dotcom_projects_snapshots_base') }}\n   \n), project_snapshots_monthly AS (\n  \n    SELECT\n      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,\n      project_snapshots.project_id,\n      project_snapshots.namespace_id,\n      project_snapshots.visibility_level,\n      project_snapshots.shared_runners_enabled\n    FROM project_snapshots\n    INNER JOIN date_details\n      ON date_details.date_actual BETWEEN project_snapshots.valid_from AND project_snapshots.valid_to_\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, project_id ORDER BY valid_to_ DESC) = 1\n  \n)\n\nSELECT *\nFROM project_snapshots_monthly","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_projects_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_projects_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_project_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_project_historical_monthly.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_project_historical_monthly.sql","name":"gitlab_dotcom_project_historical_monthly","alias":"gitlab_dotcom_project_historical_monthly","checksum":{"name":"sha256","checksum":"fce8c08e805d4ef2761f582e2a1792f1eb50658c355a754362015154fc8ab0f0"},"tags":["sources"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_projects_snapshots_base"],["gitlab_dotcom_projects_snapshots_base"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_project_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033694.644989,"compiled_sql":"WITH date_details AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.date_details\n    WHERE last_day_of_month = date_actual\n     \n), project_snapshots AS (\n   SELECT\n     *,\n     IFNULL(valid_to, CURRENT_TIMESTAMP) AS valid_to_\n   FROM \"PROD\".legacy.gitlab_dotcom_projects_snapshots\n   \n), project_snapshots_monthly AS (\n  \n    SELECT\n      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,\n      project_snapshots.project_id,\n      project_snapshots.namespace_id,\n      project_snapshots.visibility_level,\n      project_snapshots.shared_runners_enabled\n    FROM project_snapshots\n    INNER JOIN date_details\n      ON date_details.date_actual BETWEEN project_snapshots.valid_from AND project_snapshots.valid_to_\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, project_id ORDER BY valid_to_ DESC) = 1\n  \n)\n\nSELECT *\nFROM project_snapshots_monthly","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_project_historical_monthly","label":"gitlab_dotcom_project_historical_monthly"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_PROJECT_STATISTIC_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"PROJECT_STATISTICS_ID":{"type":"NUMBER","index":2,"name":"PROJECT_STATISTICS_ID","comment":null,"display_name":"project_statistics_id"},"PROJECT_ID":{"type":"NUMBER","index":3,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"COMMIT_COUNT":{"type":"NUMBER","index":5,"name":"COMMIT_COUNT","comment":null,"display_name":"commit_count"},"STORAGE_SIZE":{"type":"NUMBER","index":6,"name":"STORAGE_SIZE","comment":null,"display_name":"storage_size"},"REPOSITORY_SIZE":{"type":"NUMBER","index":7,"name":"REPOSITORY_SIZE","comment":null,"display_name":"repository_size"},"CONTAINER_REGISTRY_SIZE":{"type":"NUMBER","index":8,"name":"CONTAINER_REGISTRY_SIZE","comment":null,"display_name":"container_registry_size"},"LFS_OBJECTS_SIZE":{"type":"NUMBER","index":9,"name":"LFS_OBJECTS_SIZE","comment":null,"display_name":"lfs_objects_size"},"BUILD_ARTIFACTS_SIZE":{"type":"NUMBER","index":10,"name":"BUILD_ARTIFACTS_SIZE","comment":null,"display_name":"build_artifacts_size"},"SHARED_RUNNERS_SECONDS":{"type":"NUMBER","index":11,"name":"SHARED_RUNNERS_SECONDS","comment":null,"display_name":"shared_runners_seconds"},"LAST_UPDATE_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"LAST_UPDATE_STARTED_AT","comment":null,"display_name":"last_update_started_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_project_statistic_historical_monthly","raw_sql":"$11","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_project_statistics_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_project_statistics_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_project_statistic_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_project_statistic_historical_monthly.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_project_statistic_historical_monthly.sql","name":"gitlab_dotcom_project_statistic_historical_monthly","alias":"gitlab_dotcom_project_statistic_historical_monthly","checksum":{"name":"sha256","checksum":"b015523c5c372288868d110ce2f1bbe9b908f38f429b3c0b877e7678e9c61957"},"tags":["sources"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_project_statistics_snapshots_base"],["gitlab_dotcom_project_statistics_snapshots_base"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_project_statistic_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033693.7163649,"compiled_sql":"$12","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_project_statistic_historical_monthly","label":"gitlab_dotcom_project_statistic_historical_monthly"},{"metadata":{"type":"VIEW","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_STORAGE_STATISTICS_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"REPOSITORY_SIZE":{"type":"NUMBER","index":3,"name":"REPOSITORY_SIZE","comment":null,"display_name":"repository_size"},"CONTAINER_REGISTRY_SIZE":{"type":"NUMBER","index":4,"name":"CONTAINER_REGISTRY_SIZE","comment":null,"display_name":"container_registry_size"},"LFS_OBJECTS_SIZE":{"type":"NUMBER","index":5,"name":"LFS_OBJECTS_SIZE","comment":null,"display_name":"lfs_objects_size"},"WIKI_SIZE":{"type":"NUMBER","index":6,"name":"WIKI_SIZE","comment":null,"display_name":"wiki_size"},"BUILD_ARTIFACTS_SIZE":{"type":"NUMBER","index":7,"name":"BUILD_ARTIFACTS_SIZE","comment":null,"display_name":"build_artifacts_size"},"STORAGE_SIZE":{"type":"NUMBER","index":8,"name":"STORAGE_SIZE","comment":null,"display_name":"storage_size"},"PACKAGES_SIZE":{"type":"NUMBER","index":9,"name":"PACKAGES_SIZE","comment":null,"display_name":"packages_size"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_root_storage_statistics_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_namespace_root_storage_statistics_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_storage_statistics_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_storage_statistics_historical_monthly.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_storage_statistics_historical_monthly.sql","name":"gitlab_dotcom_namespace_storage_statistics_historical_monthly","alias":"gitlab_dotcom_namespace_storage_statistics_historical_monthly","checksum":{"name":"sha256","checksum":"84aab587b77e62d2ea0b168c5c5642fda82ff82bfe8bdc7268a5d16eba5edf53"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_root_storage_statistics_snapshots_base"],["gitlab_dotcom_namespace_root_storage_statistics_snapshots_base"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_storage_statistics_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033760.1845205,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_storage_statistics_historical_monthly","label":"gitlab_dotcom_namespace_storage_statistics_historical_monthly"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BAMBOOHR_HEADCOUNT_INTERMEDIATE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"UNIQUE_KEY":{"type":"TEXT","index":1,"name":"unique_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"unique_key"},"MONTH_DATE":{"type":"DATE","index":2,"name":"month_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_date"},"BREAKOUT_TYPE":{"type":"TEXT","index":3,"name":"breakout_type","comment":null,"description":"Explains the breakout of the data in the columns associated to this field.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"breakout_type"},"DEPARTMENT":{"type":"TEXT","index":4,"name":"department","comment":null,"description":"This is using current department, and maps out historical department/divisions to the current mapping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"department"},"DIVISION":{"type":"TEXT","index":5,"name":"division","comment":null,"description":"This is using current division, and maps out historical department/divisions to the current mapping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division"},"JOB_ROLE":{"type":"TEXT","index":6,"name":"JOB_ROLE","comment":null,"display_name":"job_role"},"JOB_GRADE":{"type":"TEXT","index":7,"name":"JOB_GRADE","comment":null,"display_name":"job_grade"},"EEOC_FIELD_NAME":{"type":"TEXT","index":8,"name":"eeoc_field_name","comment":null,"description":"Identifies what eeoc field the data is associated to.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eeoc_field_name"},"EEOC_VALUE":{"type":"TEXT","index":9,"name":"eeoc_value","comment":null,"description":"This is the answer to the eeoc questions. For example, for the eeoc gender field we could have female, male, choose not to identify.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eeoc_value"},"HEADCOUNT_START":{"type":"NUMBER","index":10,"name":"headcount_start","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_start"},"HEADCOUNT_START_EXCLUDING_SDR":{"type":"NUMBER","index":11,"name":"HEADCOUNT_START_EXCLUDING_SDR","comment":null,"display_name":"headcount_start_excluding_sdr"},"HEADCOUNT_END":{"type":"NUMBER","index":12,"name":"headcount_end","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_end"},"HEADCOUNT_END_EXCLUDING_SDR":{"type":"NUMBER","index":13,"name":"HEADCOUNT_END_EXCLUDING_SDR","comment":null,"display_name":"headcount_end_excluding_sdr"},"HEADCOUNT_AVERAGE":{"type":"NUMBER","index":14,"name":"headcount_average","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_average"},"HEADCOUNT_AVERAGE_EXCLUDING_SDR":{"type":"NUMBER","index":15,"name":"HEADCOUNT_AVERAGE_EXCLUDING_SDR","comment":null,"display_name":"headcount_average_excluding_sdr"},"HIRE_COUNT":{"type":"NUMBER","index":16,"name":"hire_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hire_count"},"SEPARATION_COUNT":{"type":"NUMBER","index":17,"name":"separation_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"separation_count"},"VOLUNTARY_SEPARATION":{"type":"NUMBER","index":18,"name":"voluntary_separation","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"voluntary_separation"},"INVOLUNTARY_SEPARATION":{"type":"NUMBER","index":19,"name":"involuntary_separation","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"involuntary_separation"},"HEADCOUNT_START_LEADER":{"type":"NUMBER","index":20,"name":"headcount_start_leader","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_start_leader"},"HEADCOUNT_END_LEADER":{"type":"NUMBER","index":21,"name":"headcount_end_leader","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_end_leader"},"HEADCOUNT_AVERAGE_LEADER":{"type":"NUMBER","index":22,"name":"headcount_average_leader","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_average_leader"},"HIRED_LEADERS":{"type":"NUMBER","index":23,"name":"hired_leaders","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired_leaders"},"SEPARATED_LEADERS":{"type":"NUMBER","index":24,"name":"separated_leaders","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"separated_leaders"},"HEADCOUNT_START_MANAGER":{"type":"NUMBER","index":25,"name":"headcount_start_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_start_manager"},"HEADCOUNT_END_MANAGER":{"type":"NUMBER","index":26,"name":"headcount_end_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_end_manager"},"HEADCOUNT_AVERAGE_MANAGER":{"type":"NUMBER","index":27,"name":"headcount_average_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_average_manager"},"HIRED_MANAGER":{"type":"NUMBER","index":28,"name":"hired_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired_manager"},"SEPARATED_MANAGER":{"type":"NUMBER","index":29,"name":"separated_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"separated_manager"},"HEADCOUNT_START_MANAGEMENT":{"type":"NUMBER","index":30,"name":"headcount_start_management","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_start_management"},"HEADCOUNT_END_MANAGEMENT":{"type":"NUMBER","index":31,"name":"headcount_end_management","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_end_management"},"HEADCOUNT_AVERAGE_MANAGEMENT":{"type":"NUMBER","index":32,"name":"headcount_average_management","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_average_management"},"HIRED_MANAGEMENT":{"type":"NUMBER","index":33,"name":"hired_management","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired_management"},"SEPARATED_MANAGEMENT":{"type":"NUMBER","index":34,"name":"SEPARATED_MANAGEMENT","comment":null,"display_name":"separated_management"},"HEADCOUNT_START_CONTRIBUTOR":{"type":"NUMBER","index":35,"name":"headcount_start_contributor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_start_contributor"},"HEADCOUNT_END_INDIVIDUAL_CONTRIBUTOR":{"type":"NUMBER","index":36,"name":"headcount_end_individual_contributor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_end_individual_contributor"},"HEADCOUNT_AVERAGE_CONTRIBUTOR":{"type":"NUMBER","index":37,"name":"headcount_average_contributor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_average_contributor"},"HIRED_CONTRIBUTOR":{"type":"NUMBER","index":38,"name":"hired_contributor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired_contributor"},"SEPARATED_CONTRIBUTOR":{"type":"NUMBER","index":39,"name":"separated_contributor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"separated_contributor"},"PROMOTION":{"type":"NUMBER","index":40,"name":"promotion","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"promotion"},"PROMOTION_EXCLUDING_SDR":{"type":"NUMBER","index":41,"name":"PROMOTION_EXCLUDING_SDR","comment":null,"display_name":"promotion_excluding_sdr"},"PERCENT_CHANGE_IN_COMP":{"type":"FLOAT","index":42,"name":"PERCENT_CHANGE_IN_COMP","comment":null,"display_name":"percent_change_in_comp"},"PERCENT_CHANGE_IN_COMP_EXCLUDING_SDR":{"type":"FLOAT","index":43,"name":"PERCENT_CHANGE_IN_COMP_EXCLUDING_SDR","comment":null,"display_name":"percent_change_in_comp_excluding_sdr"},"LOCATION_FACTOR":{"type":"FLOAT","index":44,"name":"location_factor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"location_factor"},"NEW_HIRE_LOCATION_FACTOR":{"type":"FLOAT","index":45,"name":"NEW_HIRE_LOCATION_FACTOR","comment":null,"display_name":"new_hire_location_factor"},"DISCRETIONARY_BONUS":{"type":"NUMBER","index":46,"name":"discretionary_bonus","comment":null,"description":"Identifies the total team members for the breakout and month that received a discretionary bonus_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"discretionary_bonus"},"TENURE_MONTHS":{"type":"NUMBER","index":47,"name":"tenure_months","comment":null,"description":"Average tenure in months for team members based on end of month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tenure_months"},"TENURE_ZERO_TO_SIX_MONTHS":{"type":"NUMBER","index":48,"name":"tenure_zero_to_six_months","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tenure_zero_to_six_months"},"TENURE_SIX_TO_TWELVE_MONTHS":{"type":"NUMBER","index":49,"name":"tenure_six_to_twelve_months","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tenure_six_to_twelve_months"},"TENURE_ONE_TO_TWO_YEARS":{"type":"NUMBER","index":50,"name":"tenure_one_to_two_years","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tenure_one_to_two_years"},"TENURE_TWO_TO_FOUR_YEARS":{"type":"NUMBER","index":51,"name":"tenure_two_to_four_years","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tenure_two_to_four_years"},"TENURE_FOUR_PLUS_YEARS":{"type":"NUMBER","index":52,"name":"tenure_four_plus_years","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tenure_four_plus_years"},"BREAKOUT_TYPE_MODIFIED":{"type":"TEXT","index":53,"name":"breakout_type_modified","comment":null,"description":"This takes the current breakouts and adds in a company overall.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"breakout_type_modified"},"headcount_start_staff":{"name":"headcount_start_staff","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_start_staff"},"headcount_end_staff":{"name":"headcount_end_staff","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_end_staff"},"headcount_average_staff":{"name":"headcount_average_staff","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"headcount_average_staff"},"hired_staff":{"name":"hired_staff","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired_staff"},"separated_staff":{"name":"separated_staff","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"separated_staff"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:12UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":32218624,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bamboohr_headcount_intermediate","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.unpivot","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.bamboohr_id_employee_number_mapping","model.gitlab_snowflake.bamboohr_id_employee_number_mapping","model.gitlab_snowflake.bamboohr_employment_status_xf","model.gitlab_snowflake.bamboohr_employment_status_xf","model.gitlab_snowflake.employee_directory_intermediate","model.gitlab_snowflake.employee_directory_intermediate","model.gitlab_snowflake.bamboohr_promotions_xf","model.gitlab_snowflake.bamboohr_promotions_xf"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","bamboohr","sensitive","bamboohr_headcount_intermediate"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/bamboohr/sensitive/bamboohr_headcount_intermediate.sql","original_file_path":"models/legacy/bamboohr/sensitive/bamboohr_headcount_intermediate.sql","name":"bamboohr_headcount_intermediate","alias":"bamboohr_headcount_intermediate","checksum":{"name":"sha256","checksum":"eb0038c90f1b1b838badc76805693d9847adeb2c47eac8341b795bd418b4cf9a"},"tags":[],"refs":[["date_details"],["date_details"],["bamboohr_id_employee_number_mapping"],["bamboohr_id_employee_number_mapping"],["bamboohr_employment_status_xf"],["bamboohr_employment_status_xf"],["employee_directory_intermediate"],["employee_directory_intermediate"],["bamboohr_promotions_xf"],["bamboohr_promotions_xf"]],"sources":[],"metrics":[],"description":"This is the intermediate model to creating out the headcount report. This report provides headcounts, hires, separations by diversity fields, department, and division. Note - division is mapped to the last month in the report to account for 12 month calculations.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/bamboohr/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/bamboohr/sensitive/bamboohr_headcount_intermediate.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033758.8180118,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bamboohr_headcount_intermediate","label":"bamboohr_headcount_intermediate"},{"metadata":{"type":"VIEW","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_STATISTICS_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"SHARED_RUNNERS_SECONDS":{"type":"NUMBER","index":3,"name":"SHARED_RUNNERS_SECONDS","comment":null,"display_name":"shared_runners_seconds"},"SHARED_RUNNERS_SECONDS_LAST_RESET":{"type":"TIMESTAMP_NTZ","index":4,"name":"SHARED_RUNNERS_SECONDS_LAST_RESET","comment":null,"display_name":"shared_runners_seconds_last_reset"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_statistics_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_statistics_historical_monthly.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_statistics_historical_monthly.sql","name":"gitlab_dotcom_namespace_statistics_historical_monthly","alias":"gitlab_dotcom_namespace_statistics_historical_monthly","checksum":{"name":"sha256","checksum":"18cb312a265f6b0a2f93146db44cd94777e3ee445bc161d453c28381627cf332"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_statistics_snapshots_base"],["gitlab_dotcom_namespace_statistics_snapshots_base"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_statistics_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033760.1838205,"compiled_sql":"\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.date_details\n    WHERE last_day_of_month = date_actual\n     \n), namespace_statistics_snapshots AS (\n\n   SELECT\n     *,\n     IFNULL(valid_to, CURRENT_TIMESTAMP)             AS valid_to_\n   FROM \"PROD\".legacy.gitlab_dotcom_namespace_statistics_snapshots\n\n), namespace_statistics_snapshots_monthly AS (\n  \n    SELECT\n      DATE_TRUNC('month', date_details.date_actual) AS snapshot_month,\n      namespace_statistics_snapshots.namespace_id,\n      namespace_statistics_snapshots.shared_runners_seconds,\n      namespace_statistics_snapshots.shared_runners_seconds_last_reset\n    FROM namespace_statistics_snapshots\n    INNER JOIN date_details\n      ON date_details.date_actual BETWEEN namespace_statistics_snapshots.valid_from AND namespace_statistics_snapshots.valid_to_\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY snapshot_month, namespace_id ORDER BY valid_to_ DESC) = 1\n  \n)\n\nSELECT *\nFROM namespace_statistics_snapshots_monthly","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_statistics_historical_monthly","label":"gitlab_dotcom_namespace_statistics_historical_monthly"},{"metadata":{"type":"BASE TABLE","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_HISTORICAL_DAILY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_DAY_NAMESPACE_ID":{"type":"TEXT","index":1,"name":"snapshot_day_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_day_namespace_id"},"SNAPSHOT_DAY":{"type":"DATE","index":2,"name":"SNAPSHOT_DAY","comment":null,"display_name":"snapshot_day"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":4,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"OWNER_ID":{"type":"NUMBER","index":5,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":6,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"VISIBILITY_LEVEL":{"type":"TEXT","index":7,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":8,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":9,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":10,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1115840773632,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily","raw_sql":"$18","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespaces_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_namespaces_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"snapshot_day_namespace_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_historical_daily"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_historical_daily.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_historical_daily.sql","name":"gitlab_dotcom_namespace_historical_daily","alias":"gitlab_dotcom_namespace_historical_daily","checksum":{"name":"sha256","checksum":"6f4120fc0ebd2e80c23755893bfd41393f1cdd4ddad914aa68498846e52ede5d"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespaces_snapshots_base"],["gitlab_dotcom_namespaces_snapshots_base"]],"sources":[],"metrics":[],"description":"ultimate_parent_plan_id column: \n\nAssumes if ultimate_parent_plan_id is null that it is a free plan, plan id 34. Also, accounts for gold/ultimate plans in the past that did not have a trial plan id or trial name. The logic checks for plan names that are ultimate/gold AND have trial set to true and conforms them to plan id 102 which is the ultimate trial plan. After a trial expires, it is moved to a free plan, plan id 34. Therefore, after accounting for the gold/ultimate plans that had trial = TRUE, we can rely on the plan id and plan name out of the subscription and plan source tables to identify trials. The ultimate_trial plan name is plan id 102 and the premium_trial plan name is plan id 103. In a future iteration, this plan information should be conformed with the dim_product_tier dimension to have a single source of truth for plan information at GitLab.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_historical_daily.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"snapshot_day_namespace_id"},"created_at":1689033760.1701214,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_historical_daily","label":"gitlab_dotcom_namespace_historical_daily"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"EMPLOYEE_DIRECTORY_INTERMEDIATE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"EMPLOYEE_ID":{"type":"NUMBER","index":1,"name":"employee_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"employee_id"},"EMPLOYEE_NUMBER":{"type":"NUMBER","index":2,"name":"employee_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"employee_number"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"first_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"last_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"HIRE_DATE":{"type":"DATE","index":5,"name":"hire_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"hire_date"},"REHIRE_DATE":{"type":"DATE","index":6,"name":"REHIRE_DATE","comment":null,"display_name":"rehire_date"},"REGION_MODIFIED":{"type":"TEXT","index":7,"name":"REGION_MODIFIED","comment":null,"display_name":"region_modified"},"COUNTRY":{"type":"TEXT","index":8,"name":"COUNTRY","comment":null,"display_name":"country"},"TERMINATION_DATE":{"type":"DATE","index":9,"name":"termination_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"termination_date"},"FIRST_INACTIVE_DATE":{"type":"DATE","index":10,"name":"FIRST_INACTIVE_DATE","comment":null,"display_name":"first_inactive_date"},"HIRE_LOCATION_FACTOR":{"type":"FLOAT","index":11,"name":"HIRE_LOCATION_FACTOR","comment":null,"display_name":"hire_location_factor"},"LAST_WORK_EMAIL":{"type":"TEXT","index":12,"name":"LAST_WORK_EMAIL","comment":null,"display_name":"last_work_email"},"FULL_NAME":{"type":"TEXT","index":13,"name":"FULL_NAME","comment":null,"display_name":"full_name"},"DATE_ACTUAL":{"type":"DATE","index":14,"name":"DATE_ACTUAL","comment":null,"display_name":"date_actual"},"JOB_TITLE":{"type":"TEXT","index":15,"name":"job_title","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"DEPARTMENT":{"type":"TEXT","index":16,"name":"department","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"department"},"DEPARTMENT_MODIFIED":{"type":"TEXT","index":17,"name":"DEPARTMENT_MODIFIED","comment":null,"display_name":"department_modified"},"DEPARTMENT_GROUPING":{"type":"TEXT","index":18,"name":"DEPARTMENT_GROUPING","comment":null,"display_name":"department_grouping"},"DIVISION":{"type":"TEXT","index":19,"name":"division","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division"},"DIVISION_MAPPED_CURRENT":{"type":"TEXT","index":20,"name":"division_mapped_current","comment":null,"description":"This is the division as used for the current month. We map back historically based on identifying the current division deparmtment mapping and then updating for months prior what the department would be mapped to currently.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division_mapped_current"},"DIVISION_GROUPING":{"type":"TEXT","index":21,"name":"DIVISION_GROUPING","comment":null,"display_name":"division_grouping"},"REPORTS_TO":{"type":"TEXT","index":22,"name":"REPORTS_TO","comment":null,"display_name":"reports_to"},"REPORTS_TO_ID":{"type":"NUMBER","index":23,"name":"REPORTS_TO_ID","comment":null,"display_name":"reports_to_id"},"LOCATION_FACTOR":{"type":"FLOAT","index":24,"name":"location_factor","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"location_factor"},"LOCALITY":{"type":"TEXT","index":25,"name":"LOCALITY","comment":null,"display_name":"locality"},"GITLAB_USERNAME":{"type":"TEXT","index":26,"name":"GITLAB_USERNAME","comment":null,"display_name":"gitlab_username"},"REGION":{"type":"TEXT","index":27,"name":"REGION","comment":null,"display_name":"region"},"SALES_GEO_DIFFERENTIAL":{"type":"TEXT","index":28,"name":"SALES_GEO_DIFFERENTIAL","comment":null,"display_name":"sales_geo_differential"},"TOTAL_DIRECT_REPORTS":{"type":"NUMBER","index":29,"name":"total_direct_reports","comment":null,"description":"Identifies the number of team members that roll up to an individual for a given day.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_direct_reports"},"DISCRETIONARY_BONUS":{"type":"NUMBER","index":30,"name":"DISCRETIONARY_BONUS","comment":null,"display_name":"discretionary_bonus"},"WORK_EMAIL":{"type":"TEXT","index":31,"name":"work_email","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"work_email"},"COST_CENTER":{"type":"TEXT","index":32,"name":"cost_center","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cost_center"},"JOB_ROLE":{"type":"TEXT","index":33,"name":"JOB_ROLE","comment":null,"display_name":"job_role"},"JOB_GRADE":{"type":"TEXT","index":34,"name":"JOB_GRADE","comment":null,"display_name":"job_grade"},"JOBTITLE_SPECIALITY":{"type":"TEXT","index":35,"name":"JOBTITLE_SPECIALITY","comment":null,"display_name":"jobtitle_speciality"},"IS_HIRE_DATE":{"type":"BOOLEAN","index":36,"name":"IS_HIRE_DATE","comment":null,"display_name":"is_hire_date"},"IS_TERMINATION_DATE":{"type":"BOOLEAN","index":37,"name":"IS_TERMINATION_DATE","comment":null,"display_name":"is_termination_date"},"IS_REHIRE_DATE":{"type":"BOOLEAN","index":38,"name":"IS_REHIRE_DATE","comment":null,"display_name":"is_rehire_date"},"EMPLOYMENT_STATUS":{"type":"TEXT","index":39,"name":"EMPLOYMENT_STATUS","comment":null,"display_name":"employment_status"},"JOB_ROLE_MODIFIED":{"type":"TEXT","index":40,"name":"job_role_modified","comment":null,"description":"Introduces values of ['Senior Leadership', 'Manager', 'Individual Contributor'] for roles. There is no accepted values test since this field was not religiously populated prior to 2020-02. This classifies `Senior Leadership` as anyone with a job grade of 11, 12, or CXO with direct reports, anyone with a job grade of 10 or job role of `Manager` with direct reports as a `Manager`, and everyone else as an `Individual Contributor`. The one exception is for when an employee is on leave in which case we don't factor in the total_direct_reports field.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_role_modified"},"IS_PROMOTION":{"type":"BOOLEAN","index":41,"name":"IS_PROMOTION","comment":null,"display_name":"is_promotion"},"TENURE_DAYS":{"type":"NUMBER","index":42,"name":"TENURE_DAYS","comment":null,"display_name":"tenure_days"},"LAYERS":{"type":"NUMBER","index":43,"name":"layers","comment":null,"description":"The number of [layers](https://about.gitlab.com/company/team/structure/#layers) to the CEO","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"layers"},"supervisor":{"name":"supervisor","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"supervisor"},"job_title_speciality":{"name":"job_title_speciality","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title_speciality"},"exclude_from_location_factor":{"name":"exclude_from_location_factor","description":"This identifies sales team members for which the comp calculator location factor does not apply.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"exclude_from_location_factor"},"promotion_flag":{"name":"promotion_flag","description":"Identifies team members that were promoted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"promotion_flag"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":82513920,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.employee_directory_intermediate","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.max_date_in_bamboo_analyses","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.employee_directory","model.gitlab_snowflake.employee_directory","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.bamboohr_job_info_current_division_base","model.gitlab_snowflake.bamboohr_job_info_current_division_base","model.gitlab_snowflake.bamboohr_job_role","model.gitlab_snowflake.bamboohr_job_role","model.gitlab_snowflake.employee_location_factor_snapshots","model.gitlab_snowflake.employee_location_factor_snapshots","model.gitlab_snowflake.bamboohr_employment_status_xf","model.gitlab_snowflake.bamboohr_employment_status_xf","model.gitlab_snowflake.blended_compensation_source","model.gitlab_snowflake.blended_compensation_source","model.gitlab_snowflake.bamboohr_employment_status_xf","model.gitlab_snowflake.bamboohr_employment_status_xf","seed.gitlab_snowflake.cost_center_division_department_mapping","seed.gitlab_snowflake.cost_center_division_department_mapping","model.gitlab_snowflake.sheetload_engineering_speciality_prior_to_capture","model.gitlab_snowflake.sheetload_engineering_speciality_prior_to_capture","model.gitlab_snowflake.bamboohr_directionary_bonuses_xf","model.gitlab_snowflake.bamboohr_directionary_bonuses_xf","model.gitlab_snowflake.bamboohr_work_email","model.gitlab_snowflake.bamboohr_work_email"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","bamboohr","sensitive","employee_directory_intermediate"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/bamboohr/sensitive/employee_directory_intermediate.sql","original_file_path":"models/legacy/bamboohr/sensitive/employee_directory_intermediate.sql","name":"employee_directory_intermediate","alias":"employee_directory_intermediate","checksum":{"name":"sha256","checksum":"a7049c65c8a3e9bf4442c85b5f077235e693765e17cde6b2afc644ec59120e65"},"tags":[],"refs":[["employee_directory"],["employee_directory"],["date_details"],["date_details"],["bamboohr_job_info_current_division_base"],["bamboohr_job_info_current_division_base"],["bamboohr_job_role"],["bamboohr_job_role"],["employee_location_factor_snapshots"],["employee_location_factor_snapshots"],["bamboohr_employment_status_xf"],["bamboohr_employment_status_xf"],["blended_compensation_source"],["blended_compensation_source"],["bamboohr_employment_status_xf"],["bamboohr_employment_status_xf"],["cost_center_division_department_mapping"],["cost_center_division_department_mapping"],["sheetload_engineering_speciality_prior_to_capture"],["sheetload_engineering_speciality_prior_to_capture"],["bamboohr_directionary_bonuses_xf"],["bamboohr_directionary_bonuses_xf"],["bamboohr_work_email"],["bamboohr_work_email"]],"sources":[],"metrics":[],"description":"INCLUDES SENSITIVE INFORMATION. The master collection of all info about GitLab employees for their latest position.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/bamboohr/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/bamboohr/sensitive/employee_directory_intermediate.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033758.9195175,"compiled_sql":"$1b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.employee_directory_intermediate","label":"employee_directory_intermediate"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"GREENHOUSE_DIVERSITY_INTERMEDIATE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"MONTH_DATE":{"type":"DATE","index":1,"name":"month_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_date"},"EEOC_FIELD_NAME":{"type":"TEXT","index":2,"name":"eeoc_field_name","comment":null,"description":"This column lists the eeoc_fields and ties it to each application. As a result, an applicant will have a response for gender, race, etc if it is null.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eeoc_field_name"},"CAPTURE_MONTH":{"type":"TEXT","index":3,"name":"capture_month","comment":null,"description":"This identifies if the data is captured for the application month, the offer sent month, or offer_accepted. The metrics associated to these are grouped up in the greenhouse_diversity rpt.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"capture_month"},"APPLICATION_ID":{"type":"NUMBER","index":4,"name":"application_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"application_id"},"DEPARTMENT_NAME":{"type":"TEXT","index":5,"name":"department_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"department_name"},"DIVISION":{"type":"TEXT","index":6,"name":"division","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division"},"DIVISION_MODIFIED":{"type":"TEXT","index":7,"name":"division_modified","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division_modified"},"SOURCE_TYPE":{"type":"TEXT","index":8,"name":"source_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"source_type"},"EEOC_VALUES":{"type":"TEXT","index":9,"name":"eeoc_values","comment":null,"description":"This field indicates the diversity for a candidate. For example, tying this to eeoc_field_name = 'Candidate_Gender' we can see the gender of the candidate if they choose to respond.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eeoc_values"},"ACCEPTED_OFFER":{"type":"NUMBER","index":10,"name":"accepted_offer","comment":null,"description":"If the offer_status = 'accepted' then this will be a 1, otherwise 0. This is used later to aggregate offers in the greenhouse_diversity model.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"accepted_offer"},"TIME_TO_OFFER":{"type":"NUMBER","index":11,"name":"time_to_offer","comment":null,"description":"Shows how long an applicant to go from applying to accepting an offer. This is based on offer accept month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_to_offer"},"SOURCED_CANDIDATE":{"type":"NUMBER","index":12,"name":"sourced_candidate","comment":null,"description":"Candidates sourced through LinkedIn.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sourced_candidate"},"HIRED_SOURCED_CANDIDATE":{"type":"NUMBER","index":13,"name":"HIRED_SOURCED_CANDIDATE","comment":null,"display_name":"hired_sourced_candidate"},"hired_sourced_candidates":{"name":"hired_sourced_candidates","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired_sourced_candidates"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:13UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":43076608,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.greenhouse_diversity_intermediate","raw_sql":"$1c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.max_date_in_bamboo_analyses","macro.dbt_utils.unpivot","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.greenhouse_recruiting_xf","model.gitlab_snowflake.greenhouse_recruiting_xf","model.gitlab_snowflake.greenhouse_eeoc_responses_source","model.gitlab_snowflake.greenhouse_eeoc_responses_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","greenhouse","xf","greenhouse_diversity_intermediate"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/greenhouse/xf/greenhouse_diversity_intermediate.sql","original_file_path":"models/legacy/greenhouse/xf/greenhouse_diversity_intermediate.sql","name":"greenhouse_diversity_intermediate","alias":"greenhouse_diversity_intermediate","checksum":{"name":"sha256","checksum":"52aeded1ff295e4ef5dbb56cfcb2b25154614a272b102fdfcd4f52c7129a719b"},"tags":[],"refs":[["date_details"],["date_details"],["greenhouse_recruiting_xf"],["greenhouse_recruiting_xf"],["greenhouse_eeoc_responses_source"],["greenhouse_eeoc_responses_source"]],"sources":[],"metrics":[],"description":"This is the intermediate model used for greenhouse_diversity. It builds out a base that includes month_date, a column for all the various eeoc_field_names, and joins greenhouse_recruiting_xf to ensure each candidate is tied to an eeoc_field. In the event the candidate did not answer, the response is 'Did not identify'. This is later used in the greenhouse_diversity rpt to aggregate metrics.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/greenhouse/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/greenhouse/xf/greenhouse_diversity_intermediate.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033761.8523526,"compiled_sql":"$1d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.greenhouse_diversity_intermediate","label":"greenhouse_diversity_intermediate"},{"metadata":{"type":"VIEW","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":3,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"OWNER_ID":{"type":"NUMBER","index":4,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":5,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"VISIBILITY_LEVEL":{"type":"TEXT","index":6,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":7,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":8,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":9,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_historical_monthly","raw_sql":"{{ config(materialized='view') }}\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM {{ ref('date_details') }}\n    WHERE last_day_of_month = date_actual\n     \n), namespace_snapshots_daily AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_namespace_historical_daily') }}\n  \n), namespace_snapshots_monthly AS (\n  \n    SELECT\n      date_details.first_day_of_month AS snapshot_month,\n      namespace_snapshots_daily.namespace_id,\n      namespace_snapshots_daily.parent_id,\n      namespace_snapshots_daily.owner_id,\n      namespace_snapshots_daily.namespace_type,\n      namespace_snapshots_daily.visibility_level,\n      namespace_snapshots_daily.shared_runners_minutes_limit,\n      namespace_snapshots_daily.extra_shared_runners_minutes_limit,\n      namespace_snapshots_daily.repository_size_limit\n    FROM namespace_snapshots_daily\n    INNER JOIN date_details\n      ON date_details.date_actual = namespace_snapshots_daily.snapshot_day\n  \n)\n\nSELECT *\nFROM namespace_snapshots_monthly","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_historical_monthly.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_historical_monthly.sql","name":"gitlab_dotcom_namespace_historical_monthly","alias":"gitlab_dotcom_namespace_historical_monthly","checksum":{"name":"sha256","checksum":"0aab869ef427fa4d69cc047f918d964d42d7bfca48dd3f146d63c38ff05e7ed6"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_historical_daily"],["gitlab_dotcom_namespace_historical_daily"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033760.1708336,"compiled_sql":"\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.date_details\n    WHERE last_day_of_month = date_actual\n     \n), namespace_snapshots_daily AS (\n\n    SELECT *\n    FROM \"PREP\".preparation.gitlab_dotcom_namespace_historical_daily\n  \n), namespace_snapshots_monthly AS (\n  \n    SELECT\n      date_details.first_day_of_month AS snapshot_month,\n      namespace_snapshots_daily.namespace_id,\n      namespace_snapshots_daily.parent_id,\n      namespace_snapshots_daily.owner_id,\n      namespace_snapshots_daily.namespace_type,\n      namespace_snapshots_daily.visibility_level,\n      namespace_snapshots_daily.shared_runners_minutes_limit,\n      namespace_snapshots_daily.extra_shared_runners_minutes_limit,\n      namespace_snapshots_daily.repository_size_limit\n    FROM namespace_snapshots_daily\n    INNER JOIN date_details\n      ON date_details.date_actual = namespace_snapshots_daily.snapshot_day\n  \n)\n\nSELECT *\nFROM namespace_snapshots_monthly","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_historical_monthly","label":"gitlab_dotcom_namespace_historical_monthly"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"GREENHOUSE_SOURCER_BASE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"REPORTING_MONTH":{"type":"DATE","index":1,"name":"REPORTING_MONTH","comment":null,"display_name":"reporting_month"},"START_PERIOD":{"type":"DATE","index":2,"name":"START_PERIOD","comment":null,"display_name":"start_period"},"END_PERIOD":{"type":"DATE","index":3,"name":"END_PERIOD","comment":null,"display_name":"end_period"},"MONTH_DATE":{"type":"DATE","index":4,"name":"MONTH_DATE","comment":null,"display_name":"month_date"},"SOURCER_NAME":{"type":"TEXT","index":5,"name":"SOURCER_NAME","comment":null,"display_name":"sourcer_name"},"PROSPECTED":{"type":"NUMBER","index":6,"name":"PROSPECTED","comment":null,"display_name":"prospected"},"PROSPECT_TO_REVIEW":{"type":"NUMBER","index":7,"name":"PROSPECT_TO_REVIEW","comment":null,"display_name":"prospect_to_review"},"PROSPECT_TO_SCREEN":{"type":"NUMBER","index":8,"name":"PROSPECT_TO_SCREEN","comment":null,"display_name":"prospect_to_screen"},"APP_REVIEWED":{"type":"NUMBER","index":9,"name":"APP_REVIEWED","comment":null,"display_name":"app_reviewed"},"REVIEW_TO_SCREEN":{"type":"NUMBER","index":10,"name":"REVIEW_TO_SCREEN","comment":null,"display_name":"review_to_screen"},"SCREEN":{"type":"NUMBER","index":11,"name":"SCREEN","comment":null,"display_name":"screen"},"SCREEN_TO_INTERVIEW":{"type":"NUMBER","index":12,"name":"SCREEN_TO_INTERVIEW","comment":null,"display_name":"screen_to_interview"},"SCREEN_TO_HIRE":{"type":"NUMBER","index":13,"name":"SCREEN_TO_HIRE","comment":null,"display_name":"screen_to_hire"},"CANDIDATE_DROPOUT":{"type":"NUMBER","index":14,"name":"CANDIDATE_DROPOUT","comment":null,"display_name":"candidate_dropout"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:14UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":27648,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.greenhouse_sourcer_base","raw_sql":"$1e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.greenhouse_sourcer_metrics","model.gitlab_snowflake.greenhouse_sourcer_metrics","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","greenhouse","xf","greenhouse_sourcer_base"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/greenhouse/xf/greenhouse_sourcer_base.sql","original_file_path":"models/legacy/greenhouse/xf/greenhouse_sourcer_base.sql","name":"greenhouse_sourcer_base","alias":"greenhouse_sourcer_base","checksum":{"name":"sha256","checksum":"c236b63c644a80a93f145663a401c0ee5c6aeb96e9442f3adb7347c795795ad5"},"tags":[],"refs":[["greenhouse_sourcer_metrics"],["greenhouse_sourcer_metrics"],["date_details"],["date_details"]],"sources":[],"metrics":[],"description":"This is the base model used to create out greenhouse_sourcer_scorecard. This creates a rolling 3 month dataset for 3 months prior to the reporting period, which allows us to average out performance metrics.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/greenhouse/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/greenhouse/xf/greenhouse_sourcer_base.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033761.9019694,"compiled_sql":"$1f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.greenhouse_sourcer_base","label":"greenhouse_sourcer_base"},{"metadata":{"type":"VIEW","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_LINEAGE_HISTORICAL_MONTHLY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":3,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"UPSTREAM_LINEAGE":{"type":"ARRAY","index":4,"name":"UPSTREAM_LINEAGE","comment":null,"display_name":"upstream_lineage"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":5,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":6,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":7,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","raw_sql":"{{ config(materialized='view') }}\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM {{ ref('date_details') }}\n    WHERE last_day_of_month = date_actual\n     \n), namespace_lineage_snapshots_daily AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }}\n  \n), namespace_lineage_snapshots_monthly AS (\n  \n    SELECT\n      date_details.first_day_of_month AS snapshot_month,\n      namespace_lineage_snapshots_daily.namespace_id,\n      namespace_lineage_snapshots_daily.parent_id,\n      namespace_lineage_snapshots_daily.upstream_lineage,\n      namespace_lineage_snapshots_daily.ultimate_parent_id,\n      namespace_lineage_snapshots_daily.namespace_is_internal,\n      namespace_lineage_snapshots_daily.ultimate_parent_plan_id\n    FROM namespace_lineage_snapshots_daily\n    INNER JOIN date_details\n      ON date_details.date_actual = namespace_lineage_snapshots_daily.snapshot_day\n  \n)\n\nSELECT *\nFROM namespace_lineage_snapshots_monthly","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_lineage_historical_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_monthly.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_monthly.sql","name":"gitlab_dotcom_namespace_lineage_historical_monthly","alias":"gitlab_dotcom_namespace_lineage_historical_monthly","checksum":{"name":"sha256","checksum":"13f220668c315344c25075522598a754d4a1e84fb28b7c613ea706841569a197"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033760.1831427,"compiled_sql":"\n\nWITH date_details AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.date_details\n    WHERE last_day_of_month = date_actual\n     \n), namespace_lineage_snapshots_daily AS (\n\n    SELECT *\n    FROM \"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_daily\n  \n), namespace_lineage_snapshots_monthly AS (\n  \n    SELECT\n      date_details.first_day_of_month AS snapshot_month,\n      namespace_lineage_snapshots_daily.namespace_id,\n      namespace_lineage_snapshots_daily.parent_id,\n      namespace_lineage_snapshots_daily.upstream_lineage,\n      namespace_lineage_snapshots_daily.ultimate_parent_id,\n      namespace_lineage_snapshots_daily.namespace_is_internal,\n      namespace_lineage_snapshots_daily.ultimate_parent_plan_id\n    FROM namespace_lineage_snapshots_daily\n    INNER JOIN date_details\n      ON date_details.date_actual = namespace_lineage_snapshots_daily.snapshot_day\n  \n)\n\nSELECT *\nFROM namespace_lineage_snapshots_monthly","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_monthly","label":"gitlab_dotcom_namespace_lineage_historical_monthly"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"GREENHOUSE_SOURCER_METRICS","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"MONTH_DATE":{"type":"DATE","index":1,"name":"month_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_date"},"SOURCER_NAME":{"type":"TEXT","index":2,"name":"sourcer_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sourcer_name"},"PART_OF_RECRUITING_TEAM":{"type":"NUMBER","index":3,"name":"part_of_recruiting_team","comment":null,"description":"This uses bamboohr data to identify if the sourcer was on the recruiting team for that month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"part_of_recruiting_team"},"PROSPECTED":{"type":"NUMBER","index":4,"name":"PROSPECTED","comment":null,"display_name":"prospected"},"PROSPECT_TO_REVIEW":{"type":"NUMBER","index":5,"name":"prospect_to_review","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"prospect_to_review"},"PROSPECT_TO_SCREEN":{"type":"NUMBER","index":6,"name":"prospect_to_screen","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"prospect_to_screen"},"PROSPECT_TO_HIRE":{"type":"NUMBER","index":7,"name":"PROSPECT_TO_HIRE","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"prospect_to_hire"},"PROSPECT_TO_DROPOUT":{"type":"NUMBER","index":8,"name":"prospect_to_dropout","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"prospect_to_dropout"},"APP_REVIEWED":{"type":"NUMBER","index":9,"name":"app_reviewed","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"app_reviewed"},"REVIEW_TO_SCREEN":{"type":"NUMBER","index":10,"name":"review_to_screen","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"review_to_screen"},"REVIEW_TO_HIRE":{"type":"NUMBER","index":11,"name":"review_to_hire","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"review_to_hire"},"SCREEN":{"type":"NUMBER","index":12,"name":"screen","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"screen"},"SCREEN_TO_INTERVIEW":{"type":"NUMBER","index":13,"name":"screen_to_interview","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"screen_to_interview"},"SCREEN_TO_HIRE":{"type":"NUMBER","index":14,"name":"screen_to_hire","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"screen_to_hire"},"TEAM_INTERVIEW":{"type":"NUMBER","index":15,"name":"team_interview","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"team_interview"},"INTERVIEW_TO_HIRE":{"type":"NUMBER","index":16,"name":"interview_to_hire","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"interview_to_hire"},"INTERVIEW_TO_REJECT":{"type":"NUMBER","index":17,"name":"interview_to_reject","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"interview_to_reject"},"EXECUTIVE_INTERVIEW":{"type":"NUMBER","index":18,"name":"executive_interview","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"executive_interview"},"EXEC_INTERVIEW_TO_HIRE":{"type":"NUMBER","index":19,"name":"exec_interview_to_hire","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"exec_interview_to_hire"},"REFERENCE_CHECK":{"type":"NUMBER","index":20,"name":"reference_check","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"reference_check"},"CANDIDATE_DROPOUT":{"type":"NUMBER","index":21,"name":"candidate_dropout","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"candidate_dropout"},"OFFER":{"type":"NUMBER","index":22,"name":"offer","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"offer"},"OFER_TO_HIRE":{"type":"NUMBER","index":23,"name":"OFER_TO_HIRE","comment":null,"display_name":"ofer_to_hire"},"HIRED":{"type":"NUMBER","index":24,"name":"hired","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hired"},"TIME_TO_OFFER_MEDIAN":{"type":"NUMBER","index":25,"name":"time_to_offer_median","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_to_offer_median"},"propspected":{"name":"propspected","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"propspected"},"offer_to_hire":{"name":"offer_to_hire","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"offer_to_hire"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:14UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":529408,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.greenhouse_sourcer_metrics","raw_sql":"$20","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.employee_directory_analysis","model.gitlab_snowflake.employee_directory_analysis","model.gitlab_snowflake.greenhouse_stage_analysis","model.gitlab_snowflake.greenhouse_stage_analysis"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","greenhouse","xf","greenhouse_sourcer_metrics"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/greenhouse/xf/greenhouse_sourcer_metrics.sql","original_file_path":"models/legacy/greenhouse/xf/greenhouse_sourcer_metrics.sql","name":"greenhouse_sourcer_metrics","alias":"greenhouse_sourcer_metrics","checksum":{"name":"sha256","checksum":"df95bf77e50102dd51a4a6781a613b044f64e5502bbeae619d76dc2b42e1e6f6"},"tags":[],"refs":[["date_details"],["date_details"],["employee_directory_analysis"],["employee_directory_analysis"],["greenhouse_stage_analysis"],["greenhouse_stage_analysis"]],"sources":[],"metrics":[],"description":"This provides recruiting metrics by sourcer and month.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/greenhouse/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/greenhouse/xf/greenhouse_sourcer_metrics.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033761.9011567,"compiled_sql":"$21","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.greenhouse_sourcer_metrics","label":"greenhouse_sourcer_metrics"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_MONTHLY_RECURRING_REVENUE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MRR_MONTH":{"type":"DATE","index":1,"name":"MRR_MONTH","comment":null,"display_name":"mrr_month"},"ACCOUNT_ID":{"type":"TEXT","index":2,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_number"},"ACCOUNT_NAME":{"type":"TEXT","index":4,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"CRM_ID":{"type":"TEXT","index":5,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"SUBSCRIPTION_ID":{"type":"TEXT","index":6,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUB_START_MONTH":{"type":"DATE","index":8,"name":"SUB_START_MONTH","comment":null,"display_name":"sub_start_month"},"SUB_END_MONTH":{"type":"DATE","index":9,"name":"SUB_END_MONTH","comment":null,"display_name":"sub_end_month"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":10,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":11,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"COUNTRY":{"type":"TEXT","index":12,"name":"COUNTRY","comment":null,"display_name":"country"},"PRODUCT_CATEGORY":{"type":"TEXT","index":13,"name":"product_category","comment":null,"description":"Product category is based on the rate plan name.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: GitHost, Other, SaaS - Ultimate, Basic, SaaS - Bronze, Self-Managed - Premium, Self-Managed - Starter, Self-Managed - Ultimate, Support, Plus, SaaS - Premium, Standard, Trueup, Storage, SaaS - Other, Dedicated - Ultimate"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":14,"name":"DELIVERY","comment":null,"display_name":"delivery"},"SERVICE_TYPE":{"type":"TEXT","index":15,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":16,"name":"PRODUCT_RATE_PLAN_CHARGE_ID","comment":null,"display_name":"product_rate_plan_charge_id"},"RATE_PLAN_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":18,"name":"rate_plan_charge_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"rate_plan_charge_name"},"CHARGE_TYPE":{"type":"TEXT","index":19,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":20,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"MRR":{"type":"FLOAT","index":21,"name":"MRR","comment":null,"display_name":"mrr"},"ARR":{"type":"FLOAT","index":22,"name":"ARR","comment":null,"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":23,"name":"QUANTITY","comment":null,"display_name":"quantity"},"TOTAL_CURRENT_MRR":{"type":"FLOAT","index":24,"name":"TOTAL_CURRENT_MRR","comment":null,"display_name":"total_current_mrr"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":139689984,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_monthly_recurring_revenue","raw_sql":"$22","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.delivery","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_monthly_recurring_revenue"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_monthly_recurring_revenue.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_monthly_recurring_revenue.sql","name":"zuora_monthly_recurring_revenue","alias":"zuora_monthly_recurring_revenue","checksum":{"name":"sha256","checksum":"511a34832eab66d75551a0579a24ac595524f87d0b2a5c3bef64abc56e997077"},"tags":["safe"],"refs":[["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["zuora_accounting_period_source"],["zuora_accounting_period_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_product_source"],["zuora_product_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"This model is built using the same logic as the Zuora UI out of the box MRR Trend Report. The report looks at the charges associated with subscriptions, along with their effective dates and subscription statuses, and calculates MRR. \n\nThe below query will pull MRR by month. You can add additional dimensions to the query to build out your analysis.\n\nSELECT\n  mrr_month,\n  SUM(mrr)  AS mrr\nFROM \"PROD\".\"LEGACY\".\"ZUORA_MONTHLY_RECURRING_REVENUE\"\nWHERE mrr_month < DATE_TRUNC('month',CURRENT_DATE)\nGROUP BY 1\nORDER BY 1 DESC","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_monthly_recurring_revenue.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2408473,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_monthly_recurring_revenue","label":"zuora_monthly_recurring_revenue"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"NETSUITE_ACCOUNTS_DEPARTMENTS_ACCOUNTING_PERIODS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"FISCAL_YEAR":{"type":"NUMBER","index":1,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"UNIQUE_ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"UNIQUE_ACCOUNT_NAME","comment":null,"display_name":"unique_account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"PARENT_DEPARTMENT_NAME":{"type":"TEXT","index":4,"name":"PARENT_DEPARTMENT_NAME","comment":null,"display_name":"parent_department_name"},"DEPARTMENT_NAME":{"type":"TEXT","index":5,"name":"DEPARTMENT_NAME","comment":null,"display_name":"department_name"},"COST_CATEGORY_LEVEL_1":{"type":"TEXT","index":6,"name":"COST_CATEGORY_LEVEL_1","comment":null,"display_name":"cost_category_level_1"},"ACCOUNTING_PERIOD":{"type":"DATE","index":7,"name":"ACCOUNTING_PERIOD","comment":null,"display_name":"accounting_period"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:05UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":17643008,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.netsuite_accounts_departments_accounting_periods","raw_sql":"$24","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounts_xf","seed.gitlab_snowflake.netsuite_expense_cost_category","seed.gitlab_snowflake.netsuite_expense_cost_category","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_departments_xf"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","netsuite","xf","netsuite_accounts_departments_accounting_periods"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/netsuite/xf/netsuite_accounts_departments_accounting_periods.sql","original_file_path":"models/legacy/netsuite/xf/netsuite_accounts_departments_accounting_periods.sql","name":"netsuite_accounts_departments_accounting_periods","alias":"netsuite_accounts_departments_accounting_periods","checksum":{"name":"sha256","checksum":"329c904a29e0e2b200100547ff03a4102e0ff8627c54a3a4893143d73edc4a04"},"tags":[],"refs":[["netsuite_accounts_xf"],["netsuite_accounts_xf"],["netsuite_expense_cost_category"],["netsuite_expense_cost_category"],["date_details"],["date_details"],["netsuite_departments_xf"],["netsuite_departments_xf"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/netsuite/xf/netsuite_accounts_departments_accounting_periods.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033720.295358,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.netsuite_accounts_departments_accounting_periods","label":"netsuite_accounts_departments_accounting_periods"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"SFDC_OPPORTUNITY_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"OPPORTUNITY_ID":{"type":"TEXT","index":2,"name":"opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"opportunity_id"},"OPPORTUNITY_NAME":{"type":"TEXT","index":3,"name":"OPPORTUNITY_NAME","comment":null,"display_name":"opportunity_name"},"OWNER_ID":{"type":"TEXT","index":4,"name":"owner_id","comment":null,"description":"The SFDC ID of opportunity owner.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"owner_id"},"CLOSE_DATE":{"type":"TIMESTAMP_TZ","index":5,"name":"CLOSE_DATE","comment":null,"display_name":"close_date"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":6,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"DAYS_IN_STAGE":{"type":"NUMBER","index":7,"name":"DAYS_IN_STAGE","comment":null,"display_name":"days_in_stage"},"DEPLOYMENT_PREFERENCE":{"type":"TEXT","index":8,"name":"DEPLOYMENT_PREFERENCE","comment":null,"display_name":"deployment_preference"},"GENERATED_SOURCE":{"type":"TEXT","index":9,"name":"GENERATED_SOURCE","comment":null,"display_name":"generated_source"},"LEAD_SOURCE":{"type":"TEXT","index":10,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"LEAD_SOURCE_ID":{"type":"NUMBER","index":11,"name":"LEAD_SOURCE_ID","comment":null,"display_name":"lead_source_id"},"LEAD_SOURCE_NAME":{"type":"TEXT","index":12,"name":"LEAD_SOURCE_NAME","comment":null,"display_name":"lead_source_name"},"LEAD_SOURCE_TYPE":{"type":"TEXT","index":13,"name":"LEAD_SOURCE_TYPE","comment":null,"display_name":"lead_source_type"},"MERGED_OPPORTUNITY_ID":{"type":"TEXT","index":14,"name":"MERGED_OPPORTUNITY_ID","comment":null,"display_name":"merged_opportunity_id"},"NET_NEW_SOURCE_CATEGORIES":{"type":"TEXT","index":15,"name":"NET_NEW_SOURCE_CATEGORIES","comment":null,"display_name":"net_new_source_categories"},"OPPORTUNITY_BUSINESS_DEVELOPMENT_REPRESENTATIVE":{"type":"TEXT","index":16,"name":"OPPORTUNITY_BUSINESS_DEVELOPMENT_REPRESENTATIVE","comment":null,"display_name":"opportunity_business_development_representative"},"OPPORTUNITY_OWNER":{"type":"TEXT","index":17,"name":"OPPORTUNITY_OWNER","comment":null,"display_name":"opportunity_owner"},"OPPORTUNITY_OWNER_DEPARTMENT":{"type":"TEXT","index":18,"name":"OPPORTUNITY_OWNER_DEPARTMENT","comment":null,"display_name":"opportunity_owner_department"},"OPPORTUNITY_OWNER_MANAGER":{"type":"TEXT","index":19,"name":"OPPORTUNITY_OWNER_MANAGER","comment":null,"display_name":"opportunity_owner_manager"},"OPPORTUNITY_OWNER_ROLE":{"type":"TEXT","index":20,"name":"OPPORTUNITY_OWNER_ROLE","comment":null,"display_name":"opportunity_owner_role"},"OPPORTUNITY_OWNER_TITLE":{"type":"TEXT","index":21,"name":"OPPORTUNITY_OWNER_TITLE","comment":null,"display_name":"opportunity_owner_title"},"OPPORTUNITY_SALES_DEVELOPMENT_REPRESENTATIVE":{"type":"TEXT","index":22,"name":"OPPORTUNITY_SALES_DEVELOPMENT_REPRESENTATIVE","comment":null,"display_name":"opportunity_sales_development_representative"},"OPPORTUNITY_DEVELOPMENT_REPRESENTATIVE":{"type":"TEXT","index":23,"name":"OPPORTUNITY_DEVELOPMENT_REPRESENTATIVE","comment":null,"display_name":"opportunity_development_representative"},"ACCOUNT_OWNER_TEAM_STAMPED":{"type":"TEXT","index":24,"name":"ACCOUNT_OWNER_TEAM_STAMPED","comment":null,"display_name":"account_owner_team_stamped"},"OPPORTUNITY_TERM":{"type":"FLOAT","index":25,"name":"OPPORTUNITY_TERM","comment":null,"display_name":"opportunity_term"},"PRIMARY_CAMPAIGN_SOURCE_ID":{"type":"TEXT","index":26,"name":"PRIMARY_CAMPAIGN_SOURCE_ID","comment":null,"display_name":"primary_campaign_source_id"},"SALES_ACCEPTED_DATE":{"type":"TIMESTAMP_TZ","index":27,"name":"SALES_ACCEPTED_DATE","comment":null,"display_name":"sales_accepted_date"},"SALES_PATH":{"type":"TEXT","index":28,"name":"SALES_PATH","comment":null,"display_name":"sales_path"},"SALES_QUALIFIED_DATE":{"type":"TIMESTAMP_TZ","index":29,"name":"SALES_QUALIFIED_DATE","comment":null,"display_name":"sales_qualified_date"},"SALES_TYPE":{"type":"TEXT","index":30,"name":"SALES_TYPE","comment":null,"display_name":"sales_type"},"SDR_PIPELINE_CONTRIBUTION":{"type":"FLOAT","index":31,"name":"SDR_PIPELINE_CONTRIBUTION","comment":null,"display_name":"sdr_pipeline_contribution"},"SOURCE_BUCKETS":{"type":"TEXT","index":32,"name":"SOURCE_BUCKETS","comment":null,"display_name":"source_buckets"},"STAGE_NAME":{"type":"TEXT","index":33,"name":"STAGE_NAME","comment":null,"display_name":"stage_name"},"STAGE_IS_ACTIVE":{"type":"BOOLEAN","index":34,"name":"STAGE_IS_ACTIVE","comment":null,"display_name":"stage_is_active"},"STAGE_IS_CLOSED":{"type":"BOOLEAN","index":35,"name":"STAGE_IS_CLOSED","comment":null,"display_name":"stage_is_closed"},"TECHNICAL_EVALUATION_DATE":{"type":"TIMESTAMP_TZ","index":36,"name":"TECHNICAL_EVALUATION_DATE","comment":null,"display_name":"technical_evaluation_date"},"ORDER_TYPE":{"type":"TEXT","index":37,"name":"ORDER_TYPE","comment":null,"display_name":"order_type"},"DEAL_PATH":{"type":"TEXT","index":38,"name":"DEAL_PATH","comment":null,"display_name":"deal_path"},"OPPORTUNITY_CATEGORY":{"type":"TEXT","index":39,"name":"OPPORTUNITY_CATEGORY","comment":null,"display_name":"opportunity_category"},"ACV":{"type":"FLOAT","index":40,"name":"ACV","comment":null,"display_name":"acv"},"AMOUNT":{"type":"FLOAT","index":41,"name":"AMOUNT","comment":null,"display_name":"amount"},"CLOSED_DEALS":{"type":"NUMBER","index":42,"name":"CLOSED_DEALS","comment":null,"display_name":"closed_deals"},"COMPETITORS":{"type":"TEXT","index":43,"name":"COMPETITORS","comment":null,"display_name":"competitors"},"CRITICAL_DEAL_FLAG":{"type":"TEXT","index":44,"name":"CRITICAL_DEAL_FLAG","comment":null,"display_name":"critical_deal_flag"},"DEAL_SIZE":{"type":"TEXT","index":45,"name":"DEAL_SIZE","comment":null,"display_name":"deal_size"},"FORECAST_CATEGORY_NAME":{"type":"TEXT","index":46,"name":"FORECAST_CATEGORY_NAME","comment":null,"display_name":"forecast_category_name"},"FORECASTED_IACV":{"type":"FLOAT","index":47,"name":"FORECASTED_IACV","comment":null,"display_name":"forecasted_iacv"},"IACV_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":48,"name":"IACV_CREATED_DATE","comment":null,"display_name":"iacv_created_date"},"INCREMENTAL_ACV":{"type":"FLOAT","index":49,"name":"INCREMENTAL_ACV","comment":null,"display_name":"incremental_acv"},"PRE_COVID_IACV":{"type":"FLOAT","index":50,"name":"PRE_COVID_IACV","comment":null,"display_name":"pre_covid_iacv"},"INVOICE_NUMBER":{"type":"TEXT","index":51,"name":"INVOICE_NUMBER","comment":null,"display_name":"invoice_number"},"IS_REFUND":{"type":"FLOAT","index":52,"name":"IS_REFUND","comment":null,"display_name":"is_refund"},"IS_DOWNGRADE":{"type":"FLOAT","index":53,"name":"IS_DOWNGRADE","comment":null,"display_name":"is_downgrade"},"IS_RISKY":{"type":"BOOLEAN","index":54,"name":"IS_RISKY","comment":null,"display_name":"is_risky"},"IS_SWING_DEAL":{"type":"BOOLEAN","index":55,"name":"IS_SWING_DEAL","comment":null,"display_name":"is_swing_deal"},"IS_EDU_OSS":{"type":"FLOAT","index":56,"name":"IS_EDU_OSS","comment":null,"display_name":"is_edu_oss"},"IS_WON":{"type":"BOOLEAN","index":57,"name":"IS_WON","comment":null,"display_name":"is_won"},"NET_INCREMENTAL_ACV":{"type":"FLOAT","index":58,"name":"NET_INCREMENTAL_ACV","comment":null,"display_name":"net_incremental_acv"},"PROBABILITY":{"type":"FLOAT","index":59,"name":"PROBABILITY","comment":null,"display_name":"probability"},"PROFESSIONAL_SERVICES_VALUE":{"type":"FLOAT","index":60,"name":"PROFESSIONAL_SERVICES_VALUE","comment":null,"display_name":"professional_services_value"},"PUSHED_COUNT":{"type":"FLOAT","index":61,"name":"PUSHED_COUNT","comment":null,"display_name":"pushed_count"},"REASON_FOR_LOSS":{"type":"TEXT","index":62,"name":"REASON_FOR_LOSS","comment":null,"display_name":"reason_for_loss"},"REASON_FOR_LOSS_DETAILS":{"type":"TEXT","index":63,"name":"REASON_FOR_LOSS_DETAILS","comment":null,"display_name":"reason_for_loss_details"},"DOWNGRADE_REASON":{"type":"TEXT","index":64,"name":"DOWNGRADE_REASON","comment":null,"display_name":"downgrade_reason"},"REFUND_IACV":{"type":"FLOAT","index":65,"name":"REFUND_IACV","comment":null,"display_name":"refund_iacv"},"DOWNGRADE_IACV":{"type":"FLOAT","index":66,"name":"DOWNGRADE_IACV","comment":null,"display_name":"downgrade_iacv"},"RENEWAL_ACV":{"type":"FLOAT","index":67,"name":"RENEWAL_ACV","comment":null,"display_name":"renewal_acv"},"RENEWAL_AMOUNT":{"type":"FLOAT","index":68,"name":"RENEWAL_AMOUNT","comment":null,"display_name":"renewal_amount"},"SALES_QUALIFIED_SOURCE":{"type":"TEXT","index":69,"name":"SALES_QUALIFIED_SOURCE","comment":null,"display_name":"sales_qualified_source"},"SOLUTIONS_TO_BE_REPLACED":{"type":"TEXT","index":70,"name":"SOLUTIONS_TO_BE_REPLACED","comment":null,"display_name":"solutions_to_be_replaced"},"TOTAL_CONTRACT_VALUE":{"type":"FLOAT","index":71,"name":"TOTAL_CONTRACT_VALUE","comment":null,"display_name":"total_contract_value"},"UPSIDE_IACV":{"type":"FLOAT","index":72,"name":"UPSIDE_IACV","comment":null,"display_name":"upside_iacv"},"UPSIDE_SWING_DEAL_IACV":{"type":"FLOAT","index":73,"name":"UPSIDE_SWING_DEAL_IACV","comment":null,"display_name":"upside_swing_deal_iacv"},"WEIGHTED_IACV":{"type":"FLOAT","index":74,"name":"WEIGHTED_IACV","comment":null,"display_name":"weighted_iacv"},"IS_WEB_PORTAL_PURCHASE":{"type":"BOOLEAN","index":75,"name":"IS_WEB_PORTAL_PURCHASE","comment":null,"display_name":"is_web_portal_purchase"},"PARTNER_INITIATED_OPPORTUNITY":{"type":"BOOLEAN","index":76,"name":"PARTNER_INITIATED_OPPORTUNITY","comment":null,"display_name":"partner_initiated_opportunity"},"USER_SEGMENT":{"type":"TEXT","index":77,"name":"USER_SEGMENT","comment":null,"display_name":"user_segment"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":78,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":79,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"TRUE_UP_VALUE":{"type":"FLOAT","index":80,"name":"TRUE_UP_VALUE","comment":null,"display_name":"true_up_value"},"ORDER_TYPE_LIVE":{"type":"TEXT","index":81,"name":"order_type_live","comment":null,"description":"The most current state of the order type formula in SFDC.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_type_live"},"ORDER_TYPE_STAMPED":{"type":"TEXT","index":82,"name":"ORDER_TYPE_STAMPED","comment":null,"display_name":"order_type_stamped"},"NET_ARR":{"type":"FLOAT","index":83,"name":"NET_ARR","comment":null,"display_name":"net_arr"},"RECURRING_AMOUNT":{"type":"FLOAT","index":84,"name":"RECURRING_AMOUNT","comment":null,"display_name":"recurring_amount"},"TRUE_UP_AMOUNT":{"type":"FLOAT","index":85,"name":"TRUE_UP_AMOUNT","comment":null,"display_name":"true_up_amount"},"PROSERV_AMOUNT":{"type":"FLOAT","index":86,"name":"PROSERV_AMOUNT","comment":null,"display_name":"proserv_amount"},"OTHER_NON_RECURRING_AMOUNT":{"type":"FLOAT","index":87,"name":"OTHER_NON_RECURRING_AMOUNT","comment":null,"display_name":"other_non_recurring_amount"},"ARR_BASIS":{"type":"FLOAT","index":88,"name":"ARR_BASIS","comment":null,"display_name":"arr_basis"},"ARR":{"type":"FLOAT","index":89,"name":"ARR","comment":null,"display_name":"arr"},"OPPORTUNITY_HEALTH":{"type":"TEXT","index":90,"name":"OPPORTUNITY_HEALTH","comment":null,"display_name":"opportunity_health"},"RISK_TYPE":{"type":"TEXT","index":91,"name":"RISK_TYPE","comment":null,"display_name":"risk_type"},"RISK_REASONS":{"type":"TEXT","index":92,"name":"RISK_REASONS","comment":null,"display_name":"risk_reasons"},"TAM_NOTES":{"type":"TEXT","index":93,"name":"TAM_NOTES","comment":null,"display_name":"tam_notes"},"PRIMARY_SOLUTION_ARCHITECT":{"type":"TEXT","index":94,"name":"PRIMARY_SOLUTION_ARCHITECT","comment":null,"display_name":"primary_solution_architect"},"PRODUCT_DETAILS":{"type":"TEXT","index":95,"name":"PRODUCT_DETAILS","comment":null,"display_name":"product_details"},"PRODUCT_CATEGORY":{"type":"TEXT","index":96,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"PRODUCTS_PURCHASED":{"type":"TEXT","index":97,"name":"PRODUCTS_PURCHASED","comment":null,"display_name":"products_purchased"},"DAYS_IN_1_DISCOVERY":{"type":"FLOAT","index":98,"name":"DAYS_IN_1_DISCOVERY","comment":null,"display_name":"days_in_1_discovery"},"DAYS_IN_2_SCOPING":{"type":"FLOAT","index":99,"name":"DAYS_IN_2_SCOPING","comment":null,"display_name":"days_in_2_scoping"},"DAYS_IN_3_TECHNICAL_EVALUATION":{"type":"FLOAT","index":100,"name":"DAYS_IN_3_TECHNICAL_EVALUATION","comment":null,"display_name":"days_in_3_technical_evaluation"},"DAYS_IN_4_PROPOSAL":{"type":"FLOAT","index":101,"name":"DAYS_IN_4_PROPOSAL","comment":null,"display_name":"days_in_4_proposal"},"DAYS_IN_5_NEGOTIATING":{"type":"FLOAT","index":102,"name":"DAYS_IN_5_NEGOTIATING","comment":null,"display_name":"days_in_5_negotiating"},"STAGE_0_PENDING_ACCEPTANCE_DATE":{"type":"TIMESTAMP_TZ","index":103,"name":"STAGE_0_PENDING_ACCEPTANCE_DATE","comment":null,"display_name":"stage_0_pending_acceptance_date"},"STAGE_1_DISCOVERY_DATE":{"type":"TIMESTAMP_TZ","index":104,"name":"STAGE_1_DISCOVERY_DATE","comment":null,"display_name":"stage_1_discovery_date"},"STAGE_2_SCOPING_DATE":{"type":"TIMESTAMP_TZ","index":105,"name":"STAGE_2_SCOPING_DATE","comment":null,"display_name":"stage_2_scoping_date"},"STAGE_3_TECHNICAL_EVALUATION_DATE":{"type":"TIMESTAMP_TZ","index":106,"name":"STAGE_3_TECHNICAL_EVALUATION_DATE","comment":null,"display_name":"stage_3_technical_evaluation_date"},"STAGE_4_PROPOSAL_DATE":{"type":"TIMESTAMP_TZ","index":107,"name":"STAGE_4_PROPOSAL_DATE","comment":null,"display_name":"stage_4_proposal_date"},"STAGE_5_NEGOTIATING_DATE":{"type":"TIMESTAMP_TZ","index":108,"name":"STAGE_5_NEGOTIATING_DATE","comment":null,"display_name":"stage_5_negotiating_date"},"STAGE_6_AWAITING_SIGNATURE_DATE":{"type":"TIMESTAMP_TZ","index":109,"name":"STAGE_6_AWAITING_SIGNATURE_DATE","comment":null,"display_name":"stage_6_awaiting_signature_date"},"STAGE_6_CLOSED_WON_DATE":{"type":"TIMESTAMP_TZ","index":110,"name":"STAGE_6_CLOSED_WON_DATE","comment":null,"display_name":"stage_6_closed_won_date"},"STAGE_6_CLOSED_LOST_DATE":{"type":"TIMESTAMP_TZ","index":111,"name":"STAGE_6_CLOSED_LOST_DATE","comment":null,"display_name":"stage_6_closed_lost_date"},"FPA_MASTER_BOOKINGS_FLAG":{"type":"BOOLEAN","index":112,"name":"FPA_MASTER_BOOKINGS_FLAG","comment":null,"display_name":"fpa_master_bookings_flag"},"CP_CHAMPION":{"type":"TEXT","index":113,"name":"CP_CHAMPION","comment":null,"display_name":"cp_champion"},"CP_CLOSE_PLAN":{"type":"TEXT","index":114,"name":"CP_CLOSE_PLAN","comment":null,"display_name":"cp_close_plan"},"CP_COMPETITION":{"type":"TEXT","index":115,"name":"CP_COMPETITION","comment":null,"display_name":"cp_competition"},"CP_DECISION_CRITERIA":{"type":"TEXT","index":116,"name":"CP_DECISION_CRITERIA","comment":null,"display_name":"cp_decision_criteria"},"CP_DECISION_PROCESS":{"type":"TEXT","index":117,"name":"CP_DECISION_PROCESS","comment":null,"display_name":"cp_decision_process"},"CP_ECONOMIC_BUYER":{"type":"TEXT","index":118,"name":"CP_ECONOMIC_BUYER","comment":null,"display_name":"cp_economic_buyer"},"CP_IDENTIFY_PAIN":{"type":"TEXT","index":119,"name":"CP_IDENTIFY_PAIN","comment":null,"display_name":"cp_identify_pain"},"CP_METRICS":{"type":"TEXT","index":120,"name":"CP_METRICS","comment":null,"display_name":"cp_metrics"},"CP_RISKS":{"type":"TEXT","index":121,"name":"CP_RISKS","comment":null,"display_name":"cp_risks"},"CP_USE_CASES":{"type":"TEXT","index":122,"name":"CP_USE_CASES","comment":null,"display_name":"cp_use_cases"},"CP_VALUE_DRIVER":{"type":"TEXT","index":123,"name":"CP_VALUE_DRIVER","comment":null,"display_name":"cp_value_driver"},"CP_WHY_DO_ANYTHING_AT_ALL":{"type":"TEXT","index":124,"name":"CP_WHY_DO_ANYTHING_AT_ALL","comment":null,"display_name":"cp_why_do_anything_at_all"},"CP_WHY_GITLAB":{"type":"TEXT","index":125,"name":"CP_WHY_GITLAB","comment":null,"display_name":"cp_why_gitlab"},"CP_WHY_NOW":{"type":"TEXT","index":126,"name":"CP_WHY_NOW","comment":null,"display_name":"cp_why_now"},"CP_SCORE":{"type":"FLOAT","index":127,"name":"CP_SCORE","comment":null,"display_name":"cp_score"},"USER_SEGMENT_STAMPED":{"type":"TEXT","index":128,"name":"USER_SEGMENT_STAMPED","comment":null,"display_name":"user_segment_stamped"},"USER_GEO_STAMPED":{"type":"TEXT","index":129,"name":"USER_GEO_STAMPED","comment":null,"display_name":"user_geo_stamped"},"USER_REGION_STAMPED":{"type":"TEXT","index":130,"name":"USER_REGION_STAMPED","comment":null,"display_name":"user_region_stamped"},"USER_AREA_STAMPED":{"type":"TEXT","index":131,"name":"USER_AREA_STAMPED","comment":null,"display_name":"user_area_stamped"},"DIVISION_SALES_SEGMENT_STAMPED":{"type":"TEXT","index":132,"name":"division_sales_segment_stamped","comment":null,"description":"Stamped version of the account division sales segment.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division_sales_segment_stamped"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":133,"name":"parent_crm_account_sales_segment","comment":null,"description":"Maximum account sales segment within the account hierarchy.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: SMB, Mid-Market, Large, Unknown, PubSec, "}],"display_name":"parent_crm_account_sales_segment"},"DIVISION_SALES_SEGMENT":{"type":"TEXT","index":134,"name":"division_sales_segment","comment":null,"description":"Sales segment of the specific account.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"division_sales_segment"},"ULTIMATE_PARENT_SALES_SEGMENT":{"type":"TEXT","index":135,"name":"ultimate_parent_sales_segment","comment":null,"description":"Sales segment of the parent of the account hierarchy.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_sales_segment"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":136,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":137,"name":"GITLAB_PARTNER_PROGRAM","comment":null,"display_name":"gitlab_partner_program"},"SALES_SEGMENT":{"type":"TEXT","index":138,"name":"sales_segment","comment":null,"description":"Deprecated, please use division_sales_segment or tsp_max_hierarchy_sales_segment instead.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_segment"},"PARENT_SEGMENT":{"type":"TEXT","index":139,"name":"parent_segment","comment":null,"description":"Deprecated, please use ultimate_parent_sales_segment instead.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_segment"},"DR_PARTNER_DEAL_TYPE":{"type":"TEXT","index":140,"name":"dr_partner_deal_type","comment":null,"description":"Map field from Lead object during conversion. Lead Field Name = [Partners] Deal Registration Type.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dr_partner_deal_type"},"DR_PARTNER_ENGAGEMENT":{"type":"TEXT","index":141,"name":"dr_partner_engagement","comment":null,"description":"This field Identified the engagement of the partner who registered the deal.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dr_partner_engagement"},"PARTNER_ACCOUNT":{"type":"TEXT","index":142,"name":"PARTNER_ACCOUNT","comment":null,"display_name":"partner_account"},"DR_STATUS":{"type":"TEXT","index":143,"name":"DR_STATUS","comment":null,"display_name":"dr_status"},"DISTRIBUTOR":{"type":"TEXT","index":144,"name":"DISTRIBUTOR","comment":null,"display_name":"distributor"},"INFLUENCE_PARTNER":{"type":"TEXT","index":145,"name":"INFLUENCE_PARTNER","comment":null,"display_name":"influence_partner"},"FULFILLMENT_PARTNER":{"type":"TEXT","index":146,"name":"FULFILLMENT_PARTNER","comment":null,"display_name":"fulfillment_partner"},"PLATFORM_PARTNER":{"type":"TEXT","index":147,"name":"PLATFORM_PARTNER","comment":null,"display_name":"platform_partner"},"PARTNER_TRACK":{"type":"TEXT","index":148,"name":"PARTNER_TRACK","comment":null,"display_name":"partner_track"},"IS_PUBLIC_SECTOR_OPP":{"type":"BOOLEAN","index":149,"name":"IS_PUBLIC_SECTOR_OPP","comment":null,"display_name":"is_public_sector_opp"},"IS_REGISTRATION_FROM_PORTAL":{"type":"BOOLEAN","index":150,"name":"IS_REGISTRATION_FROM_PORTAL","comment":null,"display_name":"is_registration_from_portal"},"CALCULATED_DISCOUNT":{"type":"FLOAT","index":151,"name":"CALCULATED_DISCOUNT","comment":null,"display_name":"calculated_discount"},"PARTNER_DISCOUNT":{"type":"FLOAT","index":152,"name":"PARTNER_DISCOUNT","comment":null,"display_name":"partner_discount"},"PARTNER_DISCOUNT_CALC":{"type":"FLOAT","index":153,"name":"PARTNER_DISCOUNT_CALC","comment":null,"display_name":"partner_discount_calc"},"COMP_CHANNEL_NEUTRAL":{"type":"FLOAT","index":154,"name":"COMP_CHANNEL_NEUTRAL","comment":null,"display_name":"comp_channel_neutral"},"ACCOUNT_OWNER_TEAM_LEVEL_2":{"type":"TEXT","index":155,"name":"ACCOUNT_OWNER_TEAM_LEVEL_2","comment":null,"display_name":"account_owner_team_level_2"},"ACCOUNT_OWNER_TEAM_LEVEL_3":{"type":"TEXT","index":156,"name":"ACCOUNT_OWNER_TEAM_LEVEL_3","comment":null,"display_name":"account_owner_team_level_3"},"ACCOUNT_OWNER_TEAM_LEVEL_4":{"type":"TEXT","index":157,"name":"ACCOUNT_OWNER_TEAM_LEVEL_4","comment":null,"display_name":"account_owner_team_level_4"},"ACCOUNT_OWNER_TEAM_VP_LEVEL":{"type":"TEXT","index":158,"name":"ACCOUNT_OWNER_TEAM_VP_LEVEL","comment":null,"display_name":"account_owner_team_vp_level"},"ACCOUNT_OWNER_TEAM_RD_LEVEL":{"type":"TEXT","index":159,"name":"ACCOUNT_OWNER_TEAM_RD_LEVEL","comment":null,"display_name":"account_owner_team_rd_level"},"ACCOUNT_OWNER_TEAM_ASM_LEVEL":{"type":"TEXT","index":160,"name":"ACCOUNT_OWNER_TEAM_ASM_LEVEL","comment":null,"display_name":"account_owner_team_asm_level"},"ACCOUNT_OWNER_MIN_TEAM_LEVEL":{"type":"TEXT","index":161,"name":"ACCOUNT_OWNER_MIN_TEAM_LEVEL","comment":null,"display_name":"account_owner_min_team_level"},"ACCOUNT_OWNER_SALES_REGION":{"type":"TEXT","index":162,"name":"ACCOUNT_OWNER_SALES_REGION","comment":null,"display_name":"account_owner_sales_region"},"OPPORTUNITY_OWNER_TEAM_LEVEL_2":{"type":"TEXT","index":163,"name":"OPPORTUNITY_OWNER_TEAM_LEVEL_2","comment":null,"display_name":"opportunity_owner_team_level_2"},"OPPORTUNITY_OWNER_TEAM_LEVEL_3":{"type":"TEXT","index":164,"name":"OPPORTUNITY_OWNER_TEAM_LEVEL_3","comment":null,"display_name":"opportunity_owner_team_level_3"},"STAGE_NAME_3PLUS":{"type":"TEXT","index":165,"name":"STAGE_NAME_3PLUS","comment":null,"display_name":"stage_name_3plus"},"STAGE_NAME_4PLUS":{"type":"TEXT","index":166,"name":"STAGE_NAME_4PLUS","comment":null,"display_name":"stage_name_4plus"},"IS_STAGE_3_PLUS":{"type":"NUMBER","index":167,"name":"IS_STAGE_3_PLUS","comment":null,"display_name":"is_stage_3_plus"},"IS_LOST":{"type":"NUMBER","index":168,"name":"IS_LOST","comment":null,"display_name":"is_lost"},"IS_OPEN":{"type":"NUMBER","index":169,"name":"IS_OPEN","comment":null,"display_name":"is_open"},"IS_CLOSED":{"type":"NUMBER","index":170,"name":"IS_CLOSED","comment":null,"display_name":"is_closed"},"STAGE_CATEGORY":{"type":"TEXT","index":171,"name":"STAGE_CATEGORY","comment":null,"display_name":"stage_category"},"IS_RENEWAL":{"type":"NUMBER","index":172,"name":"IS_RENEWAL","comment":null,"display_name":"is_renewal"},"CLOSE_FISCAL_QUARTER_NAME":{"type":"TEXT","index":173,"name":"CLOSE_FISCAL_QUARTER_NAME","comment":null,"display_name":"close_fiscal_quarter_name"},"CLOSE_FISCAL_QUARTER_DATE":{"type":"DATE","index":174,"name":"CLOSE_FISCAL_QUARTER_DATE","comment":null,"display_name":"close_fiscal_quarter_date"},"CLOSE_FISCAL_YEAR":{"type":"NUMBER","index":175,"name":"CLOSE_FISCAL_YEAR","comment":null,"display_name":"close_fiscal_year"},"CLOSE_DATE_MONTH":{"type":"DATE","index":176,"name":"CLOSE_DATE_MONTH","comment":null,"display_name":"close_date_month"},"CREATED_FISCAL_QUARTER_NAME":{"type":"TEXT","index":177,"name":"CREATED_FISCAL_QUARTER_NAME","comment":null,"display_name":"created_fiscal_quarter_name"},"CREATED_FISCAL_QUARTER_DATE":{"type":"DATE","index":178,"name":"CREATED_FISCAL_QUARTER_DATE","comment":null,"display_name":"created_fiscal_quarter_date"},"CREATED_FISCAL_YEAR":{"type":"NUMBER","index":179,"name":"CREATED_FISCAL_YEAR","comment":null,"display_name":"created_fiscal_year"},"CREATED_DATE_MONTH":{"type":"DATE","index":180,"name":"CREATED_DATE_MONTH","comment":null,"display_name":"created_date_month"},"SUBSCRIPTION_START_DATE_FISCAL_QUARTER_NAME":{"type":"TEXT","index":181,"name":"SUBSCRIPTION_START_DATE_FISCAL_QUARTER_NAME","comment":null,"display_name":"subscription_start_date_fiscal_quarter_name"},"SUBSCRIPTION_START_DATE_FISCAL_QUARTER_DATE":{"type":"DATE","index":182,"name":"SUBSCRIPTION_START_DATE_FISCAL_QUARTER_DATE","comment":null,"display_name":"subscription_start_date_fiscal_quarter_date"},"SUBSCRIPTION_START_DATE_FISCAL_YEAR":{"type":"NUMBER","index":183,"name":"SUBSCRIPTION_START_DATE_FISCAL_YEAR","comment":null,"display_name":"subscription_start_date_fiscal_year"},"SUBSCRIPTION_START_DATE_MONTH":{"type":"DATE","index":184,"name":"SUBSCRIPTION_START_DATE_MONTH","comment":null,"display_name":"subscription_start_date_month"},"SALES_ACCEPTED_FISCAL_QUARTER_NAME":{"type":"TEXT","index":185,"name":"SALES_ACCEPTED_FISCAL_QUARTER_NAME","comment":null,"display_name":"sales_accepted_fiscal_quarter_name"},"SALES_ACCEPTED_FISCAL_QUARTER_DATE":{"type":"DATE","index":186,"name":"SALES_ACCEPTED_FISCAL_QUARTER_DATE","comment":null,"display_name":"sales_accepted_fiscal_quarter_date"},"SALES_ACCEPTED_FISCAL_YEAR":{"type":"NUMBER","index":187,"name":"SALES_ACCEPTED_FISCAL_YEAR","comment":null,"display_name":"sales_accepted_fiscal_year"},"SALES_ACCEPTED_DATE_MONTH":{"type":"DATE","index":188,"name":"SALES_ACCEPTED_DATE_MONTH","comment":null,"display_name":"sales_accepted_date_month"},"SALES_QUALIFIED_FISCAL_QUARTER_NAME":{"type":"TEXT","index":189,"name":"SALES_QUALIFIED_FISCAL_QUARTER_NAME","comment":null,"display_name":"sales_qualified_fiscal_quarter_name"},"SALES_QUALIFIED_FISCAL_QUARTER_DATE":{"type":"DATE","index":190,"name":"SALES_QUALIFIED_FISCAL_QUARTER_DATE","comment":null,"display_name":"sales_qualified_fiscal_quarter_date"},"SALES_QUALIFIED_FISCAL_YEAR":{"type":"NUMBER","index":191,"name":"SALES_QUALIFIED_FISCAL_YEAR","comment":null,"display_name":"sales_qualified_fiscal_year"},"SALES_QUALIFIED_DATE_MONTH":{"type":"DATE","index":192,"name":"SALES_QUALIFIED_DATE_MONTH","comment":null,"display_name":"sales_qualified_date_month"},"IACV_CREATED_FISCAL_QUARTER_NAME":{"type":"TEXT","index":193,"name":"IACV_CREATED_FISCAL_QUARTER_NAME","comment":null,"display_name":"iacv_created_fiscal_quarter_name"},"IACV_CREATED_FISCAL_QUARTER_DATE":{"type":"DATE","index":194,"name":"IACV_CREATED_FISCAL_QUARTER_DATE","comment":null,"display_name":"iacv_created_fiscal_quarter_date"},"IACV_CREATED_FISCAL_YEAR":{"type":"NUMBER","index":195,"name":"IACV_CREATED_FISCAL_YEAR","comment":null,"display_name":"iacv_created_fiscal_year"},"IACV_CREATED_DATE_MONTH":{"type":"DATE","index":196,"name":"IACV_CREATED_DATE_MONTH","comment":null,"display_name":"iacv_created_date_month"},"_LAST_DBT_RUN":{"type":"TIMESTAMP_TZ","index":197,"name":"_LAST_DBT_RUN","comment":null,"display_name":"_last_dbt_run"},"BUSINESS_PROCESS_ID":{"type":"TEXT","index":198,"name":"BUSINESS_PROCESS_ID","comment":null,"display_name":"business_process_id"},"DAYS_SINCE_LAST_ACTIVITY":{"type":"NUMBER","index":199,"name":"DAYS_SINCE_LAST_ACTIVITY","comment":null,"display_name":"days_since_last_activity"},"IS_DELETED":{"type":"BOOLEAN","index":200,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":201,"name":"LAST_ACTIVITY_DATE","comment":null,"display_name":"last_activity_date"},"RECORD_TYPE_DESCRIPTION":{"type":"TEXT","index":202,"name":"RECORD_TYPE_DESCRIPTION","comment":null,"display_name":"record_type_description"},"RECORD_TYPE_ID":{"type":"TEXT","index":203,"name":"RECORD_TYPE_ID","comment":null,"display_name":"record_type_id"},"RECORD_TYPE_LABEL":{"type":"TEXT","index":204,"name":"RECORD_TYPE_LABEL","comment":null,"display_name":"record_type_label"},"RECORD_TYPE_MODIFYING_OBJECT_TYPE":{"type":"TEXT","index":205,"name":"RECORD_TYPE_MODIFYING_OBJECT_TYPE","comment":null,"display_name":"record_type_modifying_object_type"},"RECORD_TYPE_NAME":{"type":"TEXT","index":206,"name":"RECORD_TYPE_NAME","comment":null,"display_name":"record_type_name"},"REGION_QUOTA_ID":{"type":"TEXT","index":207,"name":"REGION_QUOTA_ID","comment":null,"display_name":"region_quota_id"},"SALES_QUOTA_ID":{"type":"TEXT","index":208,"name":"SALES_QUOTA_ID","comment":null,"display_name":"sales_quota_id"},"segment":{"name":"segment","description":"Deprecated, please use division_sales_segment or tsp_max_hierarchy_sales_segment instead.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"segment"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":71296000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_opportunity_xf","raw_sql":"$26","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_opportunity","model.gitlab_snowflake.sfdc_opportunity","model.gitlab_snowflake.sfdc_opportunity_stage","model.gitlab_snowflake.sfdc_opportunity_stage","model.gitlab_snowflake.sfdc_lead_sources","model.gitlab_snowflake.sfdc_lead_sources","model.gitlab_snowflake.sfdc_users_xf","model.gitlab_snowflake.sfdc_users_xf","model.gitlab_snowflake.sfdc_record_type","model.gitlab_snowflake.sfdc_record_type","model.gitlab_snowflake.sfdc_account","model.gitlab_snowflake.sfdc_account","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","sfdc","restricted_safe","sfdc_opportunity_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/sfdc/restricted_safe/sfdc_opportunity_xf.sql","original_file_path":"models/legacy/sfdc/restricted_safe/sfdc_opportunity_xf.sql","name":"sfdc_opportunity_xf","alias":"sfdc_opportunity_xf","checksum":{"name":"sha256","checksum":"3f0fa38fd6e6546ee1cb2e3f266fe0b857a9df9eed4a8553b4c2b0a69b969708"},"tags":["safe"],"refs":[["sfdc_opportunity"],["sfdc_opportunity"],["sfdc_opportunity_stage"],["sfdc_opportunity_stage"],["sfdc_lead_sources"],["sfdc_lead_sources"],["sfdc_users_xf"],["sfdc_users_xf"],["sfdc_record_type"],["sfdc_record_type"],["sfdc_account"],["sfdc_account"],["date_details"],["date_details"]],"sources":[],"metrics":[],"description":"This model contains meta information on each Salesforce opportunity enriched with stage, source, and user information. Note that `sales_segment` and `parent_segment` are derived from the Stamped Sales Segment for an opportunity and do not change over time. The current segmentation of an opportunity's account is available in `sfdc_accounts_xf`.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/sfdc/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/sfdc/restricted_safe/sfdc_opportunity_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033764.9012296,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.sfdc_opportunity_xf","label":"sfdc_opportunity_xf"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"NETSUITE_BUDGET_COGS_OPEX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"FLOAT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"UNIQUE_ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"UNIQUE_ACCOUNT_NAME","comment":null,"display_name":"unique_account_name"},"ACCOUNT_NAME":{"type":"TEXT","index":3,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_FULL_NAME":{"type":"TEXT","index":4,"name":"ACCOUNT_FULL_NAME","comment":null,"display_name":"account_full_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":5,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"PARENT_ACCOUNT_NUMBER":{"type":"TEXT","index":6,"name":"PARENT_ACCOUNT_NUMBER","comment":null,"display_name":"parent_account_number"},"UNIQUE_ACCOUNT_NUMBER":{"type":"TEXT","index":7,"name":"UNIQUE_ACCOUNT_NUMBER","comment":null,"display_name":"unique_account_number"},"ACCOUNTING_PERIOD_ID":{"type":"FLOAT","index":8,"name":"ACCOUNTING_PERIOD_ID","comment":null,"display_name":"accounting_period_id"},"ACCOUNTING_PERIOD":{"type":"DATE","index":9,"name":"ACCOUNTING_PERIOD","comment":null,"display_name":"accounting_period"},"ACCOUNTING_PERIOD_NAME":{"type":"TEXT","index":10,"name":"ACCOUNTING_PERIOD_NAME","comment":null,"display_name":"accounting_period_name"},"ACCOUNTING_PERIOD_FULL_NAME":{"type":"TEXT","index":11,"name":"ACCOUNTING_PERIOD_FULL_NAME","comment":null,"display_name":"accounting_period_full_name"},"DEPARTMENT_ID":{"type":"FLOAT","index":12,"name":"DEPARTMENT_ID","comment":null,"display_name":"department_id"},"DEPARTMENT_NAME":{"type":"TEXT","index":13,"name":"DEPARTMENT_NAME","comment":null,"display_name":"department_name"},"PARENT_DEPARTMENT_NAME":{"type":"TEXT","index":14,"name":"PARENT_DEPARTMENT_NAME","comment":null,"display_name":"parent_department_name"},"BUDGET_CATEGORY":{"type":"TEXT","index":15,"name":"BUDGET_CATEGORY","comment":null,"display_name":"budget_category"},"INCOME_STATEMENT_GROUPING":{"type":"TEXT","index":16,"name":"INCOME_STATEMENT_GROUPING","comment":null,"display_name":"income_statement_grouping"},"BUDGET_AMOUNT":{"type":"FLOAT","index":17,"name":"BUDGET_AMOUNT","comment":null,"display_name":"budget_amount"},"FISCAL_YEAR":{"type":"NUMBER","index":18,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":19,"name":"FISCAL_QUARTER","comment":null,"display_name":"fiscal_quarter"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":20,"name":"FISCAL_QUARTER_NAME","comment":null,"display_name":"fiscal_quarter_name"},"COST_CATEGORY_LEVEL_1":{"type":"TEXT","index":21,"name":"COST_CATEGORY_LEVEL_1","comment":null,"display_name":"cost_category_level_1"},"COST_CATEGORY_LEVEL_2":{"type":"TEXT","index":22,"name":"COST_CATEGORY_LEVEL_2","comment":null,"display_name":"cost_category_level_2"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":19147264,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.netsuite_budget_cogs_opex","raw_sql":"$28","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.netsuite_budget","model.gitlab_snowflake.netsuite_budget","model.gitlab_snowflake.netsuite_budget_category","model.gitlab_snowflake.netsuite_budget_category","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounting_periods","model.gitlab_snowflake.netsuite_accounting_periods","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","seed.gitlab_snowflake.netsuite_expense_cost_category","seed.gitlab_snowflake.netsuite_expense_cost_category"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","netsuite","restricted_safe","netsuite_budget_cogs_opex"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/netsuite/restricted_safe/netsuite_budget_cogs_opex.sql","original_file_path":"models/legacy/netsuite/restricted_safe/netsuite_budget_cogs_opex.sql","name":"netsuite_budget_cogs_opex","alias":"netsuite_budget_cogs_opex","checksum":{"name":"sha256","checksum":"3d1486ce7903b331d202069beb6e054ddbabb3c52187564411be235a6ae67528"},"tags":["safe"],"refs":[["netsuite_budget"],["netsuite_budget"],["netsuite_budget_category"],["netsuite_budget_category"],["netsuite_accounts_xf"],["netsuite_accounts_xf"],["netsuite_accounting_periods"],["netsuite_accounting_periods"],["netsuite_departments_xf"],["netsuite_departments_xf"],["date_details"],["date_details"],["netsuite_expense_cost_category"],["netsuite_expense_cost_category"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/netsuite/restricted_safe/netsuite_budget_cogs_opex.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033720.4029503,"compiled_sql":"$29","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.netsuite_budget_cogs_opex","label":"netsuite_budget_cogs_opex"},{"metadata":{"type":"VIEW","schema":"WORKSPACE_FINANCE","name":"PREP_SUBSCRIPTION_API_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER","comment":null,"display_name":"dim_billing_account_id_invoice_owner"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":5,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":6,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":7,"name":"DIM_SUBSCRIPTION_ID_PREVIOUS","comment":null,"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":8,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":9,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":10,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":11,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":14,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":15,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":16,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":17,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":18,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":19,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":20,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":22,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":24,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":25,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":26,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":27,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":28,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":29,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":30,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":31,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":32,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":33,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":34,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":35,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":36,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":37,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":38,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":39,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":40,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":41,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":42,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":43,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":44,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":45,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":46,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":47,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":48,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription_api_sandbox","raw_sql":"$2a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_api_sandbox_subscription_source","model.gitlab_snowflake.zuora_api_sandbox_account_source","model.gitlab_snowflake.zuora_api_sandbox_account_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_finance","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","prep_subscription_api_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/prep_subscription_api_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/prep_subscription_api_sandbox.sql","name":"prep_subscription_api_sandbox","alias":"prep_subscription_api_sandbox","checksum":{"name":"sha256","checksum":"64e3ed49b9e60cf350904e9648c5d4bfaf93fa9c1362deba4cc15bdbe1bb499a"},"tags":["workspace","mnpi_exception"],"refs":[["date_details"],["date_details"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_api_sandbox_subscription_source"],["zuora_api_sandbox_subscription_source"],["zuora_api_sandbox_account_source"],["zuora_api_sandbox_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/prep_subscription_api_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033734.0692322,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_finance.prep_subscription_api_sandbox","label":"prep_subscription_api_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"VERSION_USAGE_DATA_WEEKLY_OPT_IN_SUMMARY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"WEEK":{"type":"DATE","index":1,"name":"week","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"week"},"LICENSE_ID":{"type":"NUMBER","index":2,"name":"license_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"license_id"},"LICENSE_MD5":{"type":"TEXT","index":3,"name":"license_md5","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":4,"name":"license_sha256","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"PRODUCT_CATEGORY":{"type":"TEXT","index":5,"name":"product_category","comment":null,"description":"This is the plan (Starter, Premium, Ultimate) associated with the usage data. This is generally consistent with the License app, but has NULL values for many records that have plans in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category"},"ZUORA_SUBSCRIPTION_ID":{"type":"TEXT","index":6,"name":"ZUORA_SUBSCRIPTION_ID","comment":null,"display_name":"zuora_subscription_id"},"COUNT_USAGE_DATA_PINGS":{"type":"NUMBER","index":7,"name":"COUNT_USAGE_DATA_PINGS","comment":null,"display_name":"count_usage_data_pings"},"DID_SEND_USAGE_DATA":{"type":"BOOLEAN","index":8,"name":"DID_SEND_USAGE_DATA","comment":null,"display_name":"did_send_usage_data"},"MIN_USAGE_DATA_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"MIN_USAGE_DATA_CREATED_AT","comment":null,"display_name":"min_usage_data_created_at"},"MAX_USAGE_DATA_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"MAX_USAGE_DATA_CREATED_AT","comment":null,"display_name":"max_usage_data_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1569876480,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.version_usage_data_weekly_opt_in_summary","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_licenses_source","model.gitlab_snowflake.customers_db_licenses_source","model.gitlab_snowflake.version_usage_data_unpacked","model.gitlab_snowflake.version_usage_data_unpacked","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","version","xf","version_usage_data_weekly_opt_in_summary"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/version/xf/version_usage_data_weekly_opt_in_summary.sql","original_file_path":"models/legacy/version/xf/version_usage_data_weekly_opt_in_summary.sql","name":"version_usage_data_weekly_opt_in_summary","alias":"version_usage_data_weekly_opt_in_summary","checksum":{"name":"sha256","checksum":"5cfd425f4b68278bc7b2fc307cf03074efc598ce7ba4f9958c5fc4e2d789abff"},"tags":["product"],"refs":[["customers_db_licenses_source"],["customers_db_licenses_source"],["version_usage_data_unpacked"],["version_usage_data_unpacked"],["date_details"],["date_details"]],"sources":[],"metrics":[],"description":"This model summarizes which instances from the customers db successfully send a usage ping at a weekly granularity.  \nOnly self-managaged instances that have a listed license file in the customers db are included in this model. Trials are excluded entirely.  \nInstances are included in this analysis for any week where the Monday falls between their \"license start date\" and \"license expires date\".  \n\nExample query usage:\n```sql\nSELECT\n  week,\n  AVG(did_send_usage_data::NUMBER)\nFROM legacy.version_usage_data_weekly_opt_in_summary\nGROUP BY 1\nORDER BY 1 DESC\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/version/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/version/xf/version_usage_data_weekly_opt_in_summary.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033758.5886478,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.version_usage_data_weekly_opt_in_summary","label":"version_usage_data_weekly_opt_in_summary"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_MONTHLY_STAGE_ACTIVE_USERS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MAU_ID":{"type":"TEXT","index":1,"name":"MAU_ID","comment":null,"display_name":"mau_id"},"SMAU_MONTH":{"type":"DATE","index":2,"name":"SMAU_MONTH","comment":null,"display_name":"smau_month"},"USER_ID":{"type":"NUMBER","index":3,"name":"USER_ID","comment":null,"display_name":"user_id"},"NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PLAN_ID_AT_SMAU_MONTH_END":{"type":"TEXT","index":5,"name":"PLAN_ID_AT_SMAU_MONTH_END","comment":null,"display_name":"plan_id_at_smau_month_end"},"PLAN_NAME_AT_SMAU_MONTH_END":{"type":"TEXT","index":6,"name":"PLAN_NAME_AT_SMAU_MONTH_END","comment":null,"display_name":"plan_name_at_smau_month_end"},"EVENT_NAME":{"type":"TEXT","index":7,"name":"event_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_name"},"STAGE_NAME":{"type":"TEXT","index":8,"name":"stage_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"IS_REPRESENTATIVE_OF_STAGE":{"type":"BOOLEAN","index":9,"name":"IS_REPRESENTATIVE_OF_STAGE","comment":null,"display_name":"is_representative_of_stage"},"DAYS_SINCE_USER_CREATION":{"type":"NUMBER","index":10,"name":"DAYS_SINCE_USER_CREATION","comment":null,"display_name":"days_since_user_creation"},"DAYS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":11,"name":"DAYS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"days_since_namespace_creation"},"EVENT_COUNT":{"type":"NUMBER","index":12,"name":"EVENT_COUNT","comment":null,"display_name":"event_count"},"EVENT_DAY_COUNT":{"type":"NUMBER","index":13,"name":"EVENT_DAY_COUNT","comment":null,"display_name":"event_day_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:41UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":5265557504,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_monthly_stage_active_users","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_usage_data_events","model.gitlab_snowflake.gitlab_dotcom_usage_data_events","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_plans"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"mau_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_monthly_stage_active_users"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_monthly_stage_active_users.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_monthly_stage_active_users.sql","name":"gitlab_dotcom_monthly_stage_active_users","alias":"gitlab_dotcom_monthly_stage_active_users","checksum":{"name":"sha256","checksum":"998d691ff884b13f24d5dea405d605a48172435335fd0173dd2a35efad2c983c"},"tags":["product","mnpi_exception"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_usage_data_events"],["gitlab_dotcom_usage_data_events"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_plans"],["gitlab_dotcom_plans"]],"sources":[],"metrics":[],"description":"For each month, this model shows for each event, the users and namespaces who perform this specific event, with 2 additional measures: the number of times this event is performed by a specific user in a specific namespace, and the number of days this event is performed (for example a specific user A has opened in a namespace 1, 15 issues in 10 days)\n\nWe don't use calendar month for this calculation but the last 28 days of the month as explained in [the KPI Definition here](https://about.gitlab.com/handbook/product/metrics/#stage-monthly-active-users-smau)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_monthly_stage_active_users.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"mau_id"},"created_at":1689033759.3713527,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_monthly_stage_active_users","label":"gitlab_dotcom_monthly_stage_active_users"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"SFDC_OPPORTUNITY_FIELD_HISTORICAL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_ACTUAL":{"type":"DATE","index":1,"name":"DATE_ACTUAL","comment":null,"display_name":"date_actual"},"VALID_FROM":{"type":"TIMESTAMP_TZ","index":2,"name":"valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_TZ","index":3,"name":"VALID_TO","comment":null,"display_name":"valid_to"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":4,"name":"IS_CURRENTLY_VALID","comment":null,"display_name":"is_currently_valid"},"OPPORTUNITY_ID":{"type":"TEXT","index":5,"name":"opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"opportunity_id"},"CLOSE_DATE":{"type":"DATE","index":6,"name":"CLOSE_DATE","comment":null,"display_name":"close_date"},"CREATED_DATE":{"type":"DATE","index":7,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"GENERATED_SOURCE":{"type":"TEXT","index":8,"name":"GENERATED_SOURCE","comment":null,"display_name":"generated_source"},"LEAD_SOURCE":{"type":"TEXT","index":9,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"PARENT_SEGMENT":{"type":"TEXT","index":10,"name":"PARENT_SEGMENT","comment":null,"display_name":"parent_segment"},"SALES_ACCEPTED_DATE":{"type":"DATE","index":11,"name":"SALES_ACCEPTED_DATE","comment":null,"display_name":"sales_accepted_date"},"SALES_QUALIFIED_DATE":{"type":"DATE","index":12,"name":"SALES_QUALIFIED_DATE","comment":null,"display_name":"sales_qualified_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":13,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":14,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SALES_SEGMENT":{"type":"TEXT","index":15,"name":"SALES_SEGMENT","comment":null,"display_name":"sales_segment"},"SALES_TYPE":{"type":"TEXT","index":16,"name":"SALES_TYPE","comment":null,"display_name":"sales_type"},"NET_NEW_SOURCE_CATEGORIES":{"type":"TEXT","index":17,"name":"NET_NEW_SOURCE_CATEGORIES","comment":null,"display_name":"net_new_source_categories"},"SOURCE_BUCKETS":{"type":"TEXT","index":18,"name":"SOURCE_BUCKETS","comment":null,"display_name":"source_buckets"},"STAGE_NAME":{"type":"TEXT","index":19,"name":"STAGE_NAME","comment":null,"display_name":"stage_name"},"DEAL_SIZE":{"type":"TEXT","index":20,"name":"DEAL_SIZE","comment":null,"display_name":"deal_size"},"FORECAST_CATEGORY_NAME":{"type":"TEXT","index":21,"name":"FORECAST_CATEGORY_NAME","comment":null,"display_name":"forecast_category_name"},"FORECASTED_IACV":{"type":"FLOAT","index":22,"name":"FORECASTED_IACV","comment":null,"display_name":"forecasted_iacv"},"IS_SWING_DEAL":{"type":"TEXT","index":23,"name":"IS_SWING_DEAL","comment":null,"display_name":"is_swing_deal"},"RENEWAL_ACV":{"type":"FLOAT","index":24,"name":"RENEWAL_ACV","comment":null,"display_name":"renewal_acv"},"RENEWAL_AMOUNT":{"type":"FLOAT","index":25,"name":"RENEWAL_AMOUNT","comment":null,"display_name":"renewal_amount"},"TOTAL_CONTRACT_VALUE":{"type":"FLOAT","index":26,"name":"TOTAL_CONTRACT_VALUE","comment":null,"display_name":"total_contract_value"},"AMOUNT":{"type":"FLOAT","index":27,"name":"AMOUNT","comment":null,"display_name":"amount"},"UPSIDE_IACV":{"type":"FLOAT","index":28,"name":"UPSIDE_IACV","comment":null,"display_name":"upside_iacv"},"NET_IACV":{"type":"FLOAT","index":29,"name":"NET_IACV","comment":null,"display_name":"net_iacv"},"NET_ARR":{"type":"TEXT","index":30,"name":"NET_ARR","comment":null,"display_name":"net_arr"},"NET_ARR_CONVERTED":{"type":"NUMBER","index":31,"name":"NET_ARR_CONVERTED","comment":null,"display_name":"net_arr_converted"},"NET_ARR_FINAL":{"type":"NUMBER","index":32,"name":"NET_ARR_FINAL","comment":null,"display_name":"net_arr_final"},"ARR_BASIS":{"type":"TEXT","index":33,"name":"ARR_BASIS","comment":null,"display_name":"arr_basis"},"ARR":{"type":"TEXT","index":34,"name":"ARR","comment":null,"display_name":"arr"},"RECURRING_AMOUNT":{"type":"TEXT","index":35,"name":"RECURRING_AMOUNT","comment":null,"display_name":"recurring_amount"},"TRUE_UP_AMOUNT":{"type":"TEXT","index":36,"name":"TRUE_UP_AMOUNT","comment":null,"display_name":"true_up_amount"},"PROSERV_AMOUNT":{"type":"TEXT","index":37,"name":"PROSERV_AMOUNT","comment":null,"display_name":"proserv_amount"},"OTHER_NON_RECURRING_AMOUNT":{"type":"TEXT","index":38,"name":"OTHER_NON_RECURRING_AMOUNT","comment":null,"display_name":"other_non_recurring_amount"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":384242688,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_opportunity_field_historical","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.sales_segment_cleaning","macro.gitlab_snowflake.sfdc_source_buckets","macro.gitlab_snowflake.sfdc_deal_size","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.sheetload_net_arr_net_iacv_conversion_factors_source","model.gitlab_snowflake.sheetload_net_arr_net_iacv_conversion_factors_source","model.gitlab_snowflake.sfdc_opportunity_snapshots_base","model.gitlab_snowflake.sfdc_opportunity_snapshots_base","model.gitlab_snowflake.sfdc_opportunity_field_history","model.gitlab_snowflake.sfdc_opportunity_field_history"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","sfdc","restricted_safe","sfdc_opportunity_field_historical"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/sfdc/restricted_safe/sfdc_opportunity_field_historical.sql","original_file_path":"models/legacy/sfdc/restricted_safe/sfdc_opportunity_field_historical.sql","name":"sfdc_opportunity_field_historical","alias":"sfdc_opportunity_field_historical","checksum":{"name":"sha256","checksum":"e57f52832192c00b6fe65b4b70bd77cd4ea38d38699768612279f65cd6613569"},"tags":["safe"],"refs":[["date_details"],["date_details"],["sheetload_net_arr_net_iacv_conversion_factors_source"],["sheetload_net_arr_net_iacv_conversion_factors_source"],["sfdc_opportunity_snapshots_base"],["sfdc_opportunity_snapshots_base"],["sfdc_opportunity_field_history"],["sfdc_opportunity_field_history"]],"sources":[],"metrics":[],"description":"This model transforms sfdc_opportunity_field_history to construct the history of changes to opportunities prior to 2019-10-01 in the same structure as sfdc_opportunity_snapshot_history.\n\nFor each opportunity_id, the state of each field is taken from sfdc_opportunity_snapshot_history at 2019-10-01. The value for each field is backfilled until a corresponding change in sfdc_opportunity_field_history is found, or until the created date of the opportunity in the event of no changes to the field history.\n\nNOTE: Only opportunities that were not deleted (see [Salesforce Documentation](https://help.salesforce.com/articleView?id=home_delete.htm&type=5)) as of 2019-10-01 are included in this model. Hard deleted opportunities are not present in current extracts of opportunity and opportunityfieldhistory, so there is no mechanism for constructing historical records for these opportunities.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/sfdc/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/sfdc/restricted_safe/sfdc_opportunity_field_historical.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033764.888102,"compiled_sql":"$31","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.sfdc_opportunity_field_historical","label":"sfdc_opportunity_field_historical"},{"metadata":{"type":"VIEW","schema":"WORKSPACE_FINANCE","name":"PREP_SUBSCRIPTION_CENTRAL_SANDBOX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER","comment":null,"display_name":"dim_billing_account_id_invoice_owner"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":5,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":6,"name":"DIM_SUBSCRIPTION_ID_ORIGINAL","comment":null,"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":7,"name":"DIM_SUBSCRIPTION_ID_PREVIOUS","comment":null,"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":8,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":9,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":10,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":11,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":12,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":13,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":14,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":15,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":16,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":17,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":18,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":19,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":20,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":22,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":24,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":25,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":26,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":27,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":28,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":29,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":30,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":31,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":32,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":33,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":34,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":35,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":36,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":37,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":38,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":39,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":40,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":41,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":42,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":43,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CREATED_BY":{"type":"TEXT","index":44,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":45,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":46,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":47,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":48,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":49,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription_central_sandbox","raw_sql":"$32","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_central_sandbox_subscription_source","model.gitlab_snowflake.zuora_central_sandbox_account_source","model.gitlab_snowflake.zuora_central_sandbox_account_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_finance","database":"PROD","tags":["workspace","mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","prep_subscription_central_sandbox"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/prep_subscription_central_sandbox.sql","original_file_path":"models/workspaces/workspace_finance/prep_subscription_central_sandbox.sql","name":"prep_subscription_central_sandbox","alias":"prep_subscription_central_sandbox","checksum":{"name":"sha256","checksum":"8d1d66e6f6d85e59e7c216d25d2e91ac2861210de00a36e6833189fcb381f2cf"},"tags":["workspace","mnpi_exception"],"refs":[["date_details"],["date_details"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_central_sandbox_subscription_source"],["zuora_central_sandbox_subscription_source"],["zuora_central_sandbox_account_source"],["zuora_central_sandbox_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/prep_subscription_central_sandbox.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033734.1797192,"compiled_sql":"$33","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_finance.prep_subscription_central_sandbox","label":"prep_subscription_central_sandbox"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"SFDC_OPPORTUNITY_SNAPSHOTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"UNIQUE_KEY":{"type":"TEXT","index":1,"name":"unique_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"unique_key"},"OPPORTUNITY_SNAPSHOT_ID":{"type":"TEXT","index":2,"name":"opportunity_snapshot_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"opportunity_snapshot_id"},"DATE_ACTUAL":{"type":"DATE","index":3,"name":"DATE_ACTUAL","comment":null,"display_name":"date_actual"},"VALID_FROM":{"type":"TIMESTAMP_TZ","index":4,"name":"VALID_FROM","comment":null,"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_TZ","index":5,"name":"VALID_TO","comment":null,"display_name":"valid_to"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":6,"name":"IS_CURRENTLY_VALID","comment":null,"display_name":"is_currently_valid"},"ACCOUNTID":{"type":"TEXT","index":7,"name":"ACCOUNTID","comment":null,"display_name":"accountid"},"ACCOUNT_ID_18__C":{"type":"TEXT","index":8,"name":"ACCOUNT_ID_18__C","comment":null,"display_name":"account_id_18__c"},"ACCOUNT_ID__C":{"type":"TEXT","index":9,"name":"ACCOUNT_ID__C","comment":null,"display_name":"account_id__c"},"ACCOUNT_OWNER__C":{"type":"TEXT","index":10,"name":"ACCOUNT_OWNER__C","comment":null,"display_name":"account_owner__c"},"ACTIVE_USER__C":{"type":"BOOLEAN","index":11,"name":"ACTIVE_USER__C","comment":null,"display_name":"active_user__c"},"ACV_2__C":{"type":"FLOAT","index":12,"name":"ACV_2__C","comment":null,"display_name":"acv_2__c"},"ACV_ACV_TEST__C":{"type":"FLOAT","index":13,"name":"ACV_ACV_TEST__C","comment":null,"display_name":"acv_acv_test__c"},"ACV_MATCH__C":{"type":"BOOLEAN","index":14,"name":"ACV_MATCH__C","comment":null,"display_name":"acv_match__c"},"ACV_OVERRIDE__C":{"type":"FLOAT","index":15,"name":"ACV_OVERRIDE__C","comment":null,"display_name":"acv_override__c"},"ACV_TEST_3__C":{"type":"FLOAT","index":16,"name":"ACV_TEST_3__C","comment":null,"display_name":"acv_test_3__c"},"ACV_TEST__C":{"type":"FLOAT","index":17,"name":"ACV_TEST__C","comment":null,"display_name":"acv_test__c"},"ACV__C":{"type":"FLOAT","index":18,"name":"ACV__C","comment":null,"display_name":"acv__c"},"AE_QUALIFICATION_STATUS__C":{"type":"TEXT","index":19,"name":"AE_QUALIFICATION_STATUS__C","comment":null,"display_name":"ae_qualification_status__c"},"AFFECTLAYER__AFFECTLAYER_NOTES__C":{"type":"TEXT","index":20,"name":"AFFECTLAYER__AFFECTLAYER_NOTES__C","comment":null,"display_name":"affectlayer__affectlayer_notes__c"},"AMOUNT":{"type":"FLOAT","index":21,"name":"AMOUNT","comment":null,"display_name":"amount"},"AMOUNT_TEST__C":{"type":"FLOAT","index":22,"name":"AMOUNT_TEST__C","comment":null,"display_name":"amount_test__c"},"APPROVAL_STATUS__C":{"type":"TEXT","index":23,"name":"APPROVAL_STATUS__C","comment":null,"display_name":"approval_status__c"},"ARR__C":{"type":"FLOAT","index":24,"name":"ARR__C","comment":null,"display_name":"arr__c"},"AUTHORIZED_RESELLER_OPPORTUNITY__C":{"type":"BOOLEAN","index":25,"name":"AUTHORIZED_RESELLER_OPPORTUNITY__C","comment":null,"display_name":"authorized_reseller_opportunity__c"},"AUTO_RENEWAL__C":{"type":"BOOLEAN","index":26,"name":"AUTO_RENEWAL__C","comment":null,"display_name":"auto_renewal__c"},"AUTO_RENEW__C":{"type":"BOOLEAN","index":27,"name":"AUTO_RENEW__C","comment":null,"display_name":"auto_renew__c"},"BDR_LU__C":{"type":"TEXT","index":28,"name":"BDR_LU__C","comment":null,"display_name":"bdr_lu__c"},"BDR_QUALIFIED_STAGE__C":{"type":"FLOAT","index":29,"name":"BDR_QUALIFIED_STAGE__C","comment":null,"display_name":"bdr_qualified_stage__c"},"BDR_SDR__C":{"type":"TEXT","index":30,"name":"BDR_SDR__C","comment":null,"display_name":"bdr_sdr__c"},"BEST_CASE_TYPE__C":{"type":"TEXT","index":31,"name":"BEST_CASE_TYPE__C","comment":null,"display_name":"best_case_type__c"},"BIZIBLE2__BIZIBLE_OPPORTUNITY_AMOUNT__C":{"type":"FLOAT","index":32,"name":"BIZIBLE2__BIZIBLE_OPPORTUNITY_AMOUNT__C","comment":null,"display_name":"bizible2__bizible_opportunity_amount__c"},"BOOKING_CATEGORY__C":{"type":"TEXT","index":33,"name":"BOOKING_CATEGORY__C","comment":null,"display_name":"booking_category__c"},"BUSINESS_DEVELOPMENT_REP__C":{"type":"TEXT","index":34,"name":"BUSINESS_DEVELOPMENT_REP__C","comment":null,"display_name":"business_development_rep__c"},"BUSINESS_PROBLEMS_TO_SOLVE__C":{"type":"TEXT","index":35,"name":"BUSINESS_PROBLEMS_TO_SOLVE__C","comment":null,"display_name":"business_problems_to_solve__c"},"BUSINESS_VALUE_ASSESSMENT__C":{"type":"TEXT","index":36,"name":"BUSINESS_VALUE_ASSESSMENT__C","comment":null,"display_name":"business_value_assessment__c"},"BUYING_PROCESS_FOR_PROCURING_GITLAB__C":{"type":"TEXT","index":37,"name":"BUYING_PROCESS_FOR_PROCURING_GITLAB__C","comment":null,"display_name":"buying_process_for_procuring_gitlab__c"},"CAMPAIGNID":{"type":"TEXT","index":38,"name":"CAMPAIGNID","comment":null,"display_name":"campaignid"},"CHAMPION_SELLING_ON_YOUR_BEHALF__C":{"type":"TEXT","index":39,"name":"CHAMPION_SELLING_ON_YOUR_BEHALF__C","comment":null,"display_name":"champion_selling_on_your_behalf__c"},"CHANNEL_MANAGER_CALC__C":{"type":"TEXT","index":40,"name":"CHANNEL_MANAGER_CALC__C","comment":null,"display_name":"channel_manager_calc__c"},"CHANNEL_MANAGER__C":{"type":"TEXT","index":41,"name":"CHANNEL_MANAGER__C","comment":null,"display_name":"channel_manager__c"},"CHURN_ACV__C":{"type":"FLOAT","index":42,"name":"CHURN_ACV__C","comment":null,"display_name":"churn_acv__c"},"CHURN_MONTH__C":{"type":"TIMESTAMP_TZ","index":43,"name":"CHURN_MONTH__C","comment":null,"display_name":"churn_month__c"},"CHURN_NOTES__C":{"type":"TEXT","index":44,"name":"CHURN_NOTES__C","comment":null,"display_name":"churn_notes__c"},"CHURN_TYPE__C":{"type":"TEXT","index":45,"name":"CHURN_TYPE__C","comment":null,"display_name":"churn_type__c"},"CLOSEDATE":{"type":"TIMESTAMP_TZ","index":46,"name":"CLOSEDATE","comment":null,"display_name":"closedate"},"COMPETITIVE_AWARENESS__C":{"type":"TEXT","index":47,"name":"COMPETITIVE_AWARENESS__C","comment":null,"display_name":"competitive_awareness__c"},"COMPETITORS__C":{"type":"TEXT","index":48,"name":"COMPETITORS__C","comment":null,"display_name":"competitors__c"},"CONVERTED_FROM_CE__C":{"type":"BOOLEAN","index":49,"name":"CONVERTED_FROM_CE__C","comment":null,"display_name":"converted_from_ce__c"},"COUNT_OF_ACTIVE_EE_SUBSCRIPTIONS__C":{"type":"FLOAT","index":50,"name":"COUNT_OF_ACTIVE_EE_SUBSCRIPTIONS__C","comment":null,"display_name":"count_of_active_ee_subscriptions__c"},"COUNT_OF_PRIMARY_CONTACTS__C":{"type":"FLOAT","index":51,"name":"COUNT_OF_PRIMARY_CONTACTS__C","comment":null,"display_name":"count_of_primary_contacts__c"},"COUNT_OF_PRODUCTS__C":{"type":"FLOAT","index":52,"name":"COUNT_OF_PRODUCTS__C","comment":null,"display_name":"count_of_products__c"},"COUNT_OF_PROFESSIONAL_SERVICES_OPPORTUNI__C":{"type":"FLOAT","index":53,"name":"COUNT_OF_PROFESSIONAL_SERVICES_OPPORTUNI__C","comment":null,"display_name":"count_of_professional_services_opportuni__c"},"COUNT_OF_QUOTES_TO_Z_BILLING__C":{"type":"FLOAT","index":54,"name":"COUNT_OF_QUOTES_TO_Z_BILLING__C","comment":null,"display_name":"count_of_quotes_to_z_billing__c"},"COUNT_OF_QUOTES__C":{"type":"FLOAT","index":55,"name":"COUNT_OF_QUOTES__C","comment":null,"display_name":"count_of_quotes__c"},"COUNT_OF_SIGNED_AGREEMENTS__C":{"type":"FLOAT","index":56,"name":"COUNT_OF_SIGNED_AGREEMENTS__C","comment":null,"display_name":"count_of_signed_agreements__c"},"COUNT_OF_ULTIMATE_OR_PREMIUM_PRODUCTS__C":{"type":"FLOAT","index":57,"name":"COUNT_OF_ULTIMATE_OR_PREMIUM_PRODUCTS__C","comment":null,"display_name":"count_of_ultimate_or_premium_products__c"},"CREATEDBYID":{"type":"TEXT","index":58,"name":"CREATEDBYID","comment":null,"display_name":"createdbyid"},"CREATEDDATE":{"type":"TIMESTAMP_TZ","index":59,"name":"CREATEDDATE","comment":null,"display_name":"createddate"},"CREATED_CLOSED_IN_QUARTER__C":{"type":"BOOLEAN","index":60,"name":"CREATED_CLOSED_IN_QUARTER__C","comment":null,"display_name":"created_closed_in_quarter__c"},"CREATED_MONTH__C":{"type":"TIMESTAMP_TZ","index":61,"name":"CREATED_MONTH__C","comment":null,"display_name":"created_month__c"},"CREATED_QUARTER__C":{"type":"TEXT","index":62,"name":"CREATED_QUARTER__C","comment":null,"display_name":"created_quarter__c"},"CREATE_RENEWAL_OPPORTUNITY__C":{"type":"BOOLEAN","index":63,"name":"CREATE_RENEWAL_OPPORTUNITY__C","comment":null,"display_name":"create_renewal_opportunity__c"},"CURRENTLY_USING_CE__C":{"type":"BOOLEAN","index":64,"name":"CURRENTLY_USING_CE__C","comment":null,"display_name":"currently_using_ce__c"},"DAYS_IN_0_PENDING_ACCEPTANCE__C":{"type":"FLOAT","index":65,"name":"DAYS_IN_0_PENDING_ACCEPTANCE__C","comment":null,"display_name":"days_in_0_pending_acceptance__c"},"DAYS_IN_1_DISCOVERY__C":{"type":"FLOAT","index":66,"name":"DAYS_IN_1_DISCOVERY__C","comment":null,"display_name":"days_in_1_discovery__c"},"DAYS_IN_2_SCOPING__C":{"type":"FLOAT","index":67,"name":"DAYS_IN_2_SCOPING__C","comment":null,"display_name":"days_in_2_scoping__c"},"DAYS_IN_3_TECHNICAL_EVALUATION__C":{"type":"FLOAT","index":68,"name":"DAYS_IN_3_TECHNICAL_EVALUATION__C","comment":null,"display_name":"days_in_3_technical_evaluation__c"},"DAYS_IN_4_PROPOSAL__C":{"type":"FLOAT","index":69,"name":"DAYS_IN_4_PROPOSAL__C","comment":null,"display_name":"days_in_4_proposal__c"},"DAYS_IN_5_NEGOTIATING__C":{"type":"FLOAT","index":70,"name":"DAYS_IN_5_NEGOTIATING__C","comment":null,"display_name":"days_in_5_negotiating__c"},"DAYS_SINCE_CUSTOMER__C":{"type":"FLOAT","index":71,"name":"DAYS_SINCE_CUSTOMER__C","comment":null,"display_name":"days_since_customer__c"},"DEAL_REGISTRAR__C":{"type":"TEXT","index":72,"name":"DEAL_REGISTRAR__C","comment":null,"display_name":"deal_registrar__c"},"DECISION_CRITERIA__C":{"type":"TEXT","index":73,"name":"DECISION_CRITERIA__C","comment":null,"display_name":"decision_criteria__c"},"DECISION_MAKING_PROCESS__C":{"type":"TEXT","index":74,"name":"DECISION_MAKING_PROCESS__C","comment":null,"display_name":"decision_making_process__c"},"DEC_CRITERIA_TECH_VENDOR_FINANCIAL__C":{"type":"TEXT","index":75,"name":"DEC_CRITERIA_TECH_VENDOR_FINANCIAL__C","comment":null,"display_name":"dec_criteria_tech_vendor_financial__c"},"DEC_PROCESS_DEFINE_VALIDATION_APPROVAL__C":{"type":"TEXT","index":76,"name":"DEC_PROCESS_DEFINE_VALIDATION_APPROVAL__C","comment":null,"display_name":"dec_process_define_validation_approval__c"},"DELTA_AMOUNT__C":{"type":"FLOAT","index":77,"name":"DELTA_AMOUNT__C","comment":null,"display_name":"delta_amount__c"},"DEPLOYMENT_PREFERENCE__C":{"type":"TEXT","index":78,"name":"DEPLOYMENT_PREFERENCE__C","comment":null,"display_name":"deployment_preference__c"},"DESCRIPTION":{"type":"TEXT","index":79,"name":"DESCRIPTION","comment":null,"display_name":"description"},"DEVELOPING_STAGE__C":{"type":"FLOAT","index":80,"name":"DEVELOPING_STAGE__C","comment":null,"display_name":"developing_stage__c"},"DISCOVERY_STAGE__C":{"type":"FLOAT","index":81,"name":"DISCOVERY_STAGE__C","comment":null,"display_name":"discovery_stage__c"},"DOES_NOT_REQUIRE_APPROVAL__C":{"type":"BOOLEAN","index":82,"name":"DOES_NOT_REQUIRE_APPROVAL__C","comment":null,"display_name":"does_not_require_approval__c"},"DON_T_SEND_SLACK_NOTIFICATION__C":{"type":"BOOLEAN","index":83,"name":"DON_T_SEND_SLACK_NOTIFICATION__C","comment":null,"display_name":"don_t_send_slack_notification__c"},"ECONOMIC_BUYER_WHO_HAS_PROFIT_LOSS__C":{"type":"TEXT","index":84,"name":"ECONOMIC_BUYER_WHO_HAS_PROFIT_LOSS__C","comment":null,"display_name":"economic_buyer_who_has_profit_loss__c"},"ECUSTOMS__RPS_RISKCOUNTRY_STATUS__C":{"type":"TEXT","index":85,"name":"ECUSTOMS__RPS_RISKCOUNTRY_STATUS__C","comment":null,"display_name":"ecustoms__rps_riskcountry_status__c"},"ECUSTOMS__RPS_STATUS__C":{"type":"TEXT","index":86,"name":"ECUSTOMS__RPS_STATUS__C","comment":null,"display_name":"ecustoms__rps_status__c"},"EE_TRIAL_START_DATE__C":{"type":"TIMESTAMP_TZ","index":87,"name":"EE_TRIAL_START_DATE__C","comment":null,"display_name":"ee_trial_start_date__c"},"END_DATE__C":{"type":"TIMESTAMP_TZ","index":88,"name":"END_DATE__C","comment":null,"display_name":"end_date__c"},"ENGAGEMENT_TYPE__C":{"type":"TEXT","index":89,"name":"ENGAGEMENT_TYPE__C","comment":null,"display_name":"engagement_type__c"},"EULA_LINK__C":{"type":"TEXT","index":90,"name":"EULA_LINK__C","comment":null,"display_name":"eula_link__c"},"EULA_REQUIRED__C":{"type":"BOOLEAN","index":91,"name":"EULA_REQUIRED__C","comment":null,"display_name":"eula_required__c"},"EXCLUDE_NUMBER_OF_OPPS_IS__C":{"type":"BOOLEAN","index":92,"name":"EXCLUDE_NUMBER_OF_OPPS_IS__C","comment":null,"display_name":"exclude_number_of_opps_is__c"},"EXCLUDE_SALES_CYCLE_ANALYSIS_IS__C":{"type":"BOOLEAN","index":93,"name":"EXCLUDE_SALES_CYCLE_ANALYSIS_IS__C","comment":null,"display_name":"exclude_sales_cycle_analysis_is__c"},"EXCLUDE_SALES_CYCLE_ANALYSIS__C":{"type":"BOOLEAN","index":94,"name":"EXCLUDE_SALES_CYCLE_ANALYSIS__C","comment":null,"display_name":"exclude_sales_cycle_analysis__c"},"EXCLUDE_WON_LOSS_ANALYSIS_IS__C":{"type":"BOOLEAN","index":95,"name":"EXCLUDE_WON_LOSS_ANALYSIS_IS__C","comment":null,"display_name":"exclude_won_loss_analysis_is__c"},"EXPECTED_AMOUNT__C":{"type":"FLOAT","index":96,"name":"EXPECTED_AMOUNT__C","comment":null,"display_name":"expected_amount__c"},"EXPECTED_CLOSE_DATE__C":{"type":"TIMESTAMP_TZ","index":97,"name":"EXPECTED_CLOSE_DATE__C","comment":null,"display_name":"expected_close_date__c"},"EXPECTED_NUMBER_OF_USERS__C":{"type":"FLOAT","index":98,"name":"EXPECTED_NUMBER_OF_USERS__C","comment":null,"display_name":"expected_number_of_users__c"},"EXPECTED_PRODUCT__C":{"type":"TEXT","index":99,"name":"EXPECTED_PRODUCT__C","comment":null,"display_name":"expected_product__c"},"FINANCE_NOTES__C":{"type":"TEXT","index":100,"name":"FINANCE_NOTES__C","comment":null,"display_name":"finance_notes__c"},"FIRST_12_MONTHS__C":{"type":"BOOLEAN","index":101,"name":"FIRST_12_MONTHS__C","comment":null,"display_name":"first_12_months__c"},"FISCAL":{"type":"TEXT","index":102,"name":"FISCAL","comment":null,"display_name":"fiscal"},"FISCALQUARTER":{"type":"NUMBER","index":103,"name":"FISCALQUARTER","comment":null,"display_name":"fiscalquarter"},"FISCALYEAR":{"type":"NUMBER","index":104,"name":"FISCALYEAR","comment":null,"display_name":"fiscalyear"},"FISCAL_PERIOD_FORMULA__C":{"type":"TEXT","index":105,"name":"FISCAL_PERIOD_FORMULA__C","comment":null,"display_name":"fiscal_period_formula__c"},"FORECASTCATEGORY":{"type":"TEXT","index":106,"name":"FORECASTCATEGORY","comment":null,"display_name":"forecastcategory"},"FORECASTCATEGORYNAME":{"type":"TEXT","index":107,"name":"FORECASTCATEGORYNAME","comment":null,"display_name":"forecastcategoryname"},"FUNDING__C":{"type":"TEXT","index":108,"name":"FUNDING__C","comment":null,"display_name":"funding__c"},"HASOPENACTIVITY":{"type":"BOOLEAN","index":109,"name":"HASOPENACTIVITY","comment":null,"display_name":"hasopenactivity"},"HASOPPORTUNITYLINEITEM":{"type":"BOOLEAN","index":110,"name":"HASOPPORTUNITYLINEITEM","comment":null,"display_name":"hasopportunitylineitem"},"HASOVERDUETASK":{"type":"BOOLEAN","index":111,"name":"HASOVERDUETASK","comment":null,"display_name":"hasoverduetask"},"HEALTH_SCORE__C":{"type":"TEXT","index":112,"name":"HEALTH_SCORE__C","comment":null,"display_name":"health_score__c"},"HIDDEN_LEAD_SOURCE__C":{"type":"TEXT","index":113,"name":"HIDDEN_LEAD_SOURCE__C","comment":null,"display_name":"hidden_lead_source__c"},"HIGH_LEVEL_BUSINESS_NEED_IMPACT_ON_BIZ__C":{"type":"TEXT","index":114,"name":"HIGH_LEVEL_BUSINESS_NEED_IMPACT_ON_BIZ__C","comment":null,"display_name":"high_level_business_need_impact_on_biz__c"},"HOW_ARE_YOU_SOLVING_THESE_PROBLEMS_TODAY__C":{"type":"TEXT","index":115,"name":"HOW_ARE_YOU_SOLVING_THESE_PROBLEMS_TODAY__C","comment":null,"display_name":"how_are_you_solving_these_problems_today__c"},"HOW_ARE_YOU_USING_GITLAB__C":{"type":"TEXT","index":116,"name":"HOW_ARE_YOU_USING_GITLAB__C","comment":null,"display_name":"how_are_you_using_gitlab__c"},"HOW_LARGE_IS_YOUR_GROUP__C":{"type":"FLOAT","index":117,"name":"HOW_LARGE_IS_YOUR_GROUP__C","comment":null,"display_name":"how_large_is_your_group__c"},"HOW_MANY_SEATS_ARE_THEY_INTERESTED_IN__C":{"type":"FLOAT","index":118,"name":"HOW_MANY_SEATS_ARE_THEY_INTERESTED_IN__C","comment":null,"display_name":"how_many_seats_are_they_interested_in__c"},"IACV_IACV_TEST__C":{"type":"FLOAT","index":119,"name":"IACV_IACV_TEST__C","comment":null,"display_name":"iacv_iacv_test__c"},"IACV_TEST__C":{"type":"FLOAT","index":120,"name":"IACV_TEST__C","comment":null,"display_name":"iacv_test__c"},"ID":{"type":"TEXT","index":121,"name":"ID","comment":null,"display_name":"id"},"IDENTIFY_PAIN__C":{"type":"TEXT","index":122,"name":"IDENTIFY_PAIN__C","comment":null,"display_name":"identify_pain__c"},"IF_SVN_WHY_LOOKING_TO_MOVE_TO_GIT__C":{"type":"TEXT","index":123,"name":"IF_SVN_WHY_LOOKING_TO_MOVE_TO_GIT__C","comment":null,"display_name":"if_svn_why_looking_to_move_to_git__c"},"IMPACT_DUE_TO_BUSINESS_PROBLEMS__C":{"type":"TEXT","index":124,"name":"IMPACT_DUE_TO_BUSINESS_PROBLEMS__C","comment":null,"display_name":"impact_due_to_business_problems__c"},"INCREMENTAL_ACV_2__C":{"type":"FLOAT","index":125,"name":"INCREMENTAL_ACV_2__C","comment":null,"display_name":"incremental_acv_2__c"},"INCREMENTAL_ACV_OVERRIDE_TEST__C":{"type":"FLOAT","index":126,"name":"INCREMENTAL_ACV_OVERRIDE_TEST__C","comment":null,"display_name":"incremental_acv_override_test__c"},"INCREMENTAL_ACV_OVERRIDE__C":{"type":"FLOAT","index":127,"name":"INCREMENTAL_ACV_OVERRIDE__C","comment":null,"display_name":"incremental_acv_override__c"},"INCREMENTAL_ACV_TEST__C":{"type":"FLOAT","index":128,"name":"INCREMENTAL_ACV_TEST__C","comment":null,"display_name":"incremental_acv_test__c"},"INCREMENTAL_ACV__C":{"type":"FLOAT","index":129,"name":"INCREMENTAL_ACV__C","comment":null,"display_name":"incremental_acv__c"},"INCREMENTAL_AMOUNT_OVERRIDE__C":{"type":"FLOAT","index":130,"name":"INCREMENTAL_AMOUNT_OVERRIDE__C","comment":null,"display_name":"incremental_amount_override__c"},"INCREMENTAL_AMOUNT_TEST__C":{"type":"FLOAT","index":131,"name":"INCREMENTAL_AMOUNT_TEST__C","comment":null,"display_name":"incremental_amount_test__c"},"INCREMENTAL_AMOUNT__C":{"type":"FLOAT","index":132,"name":"INCREMENTAL_AMOUNT__C","comment":null,"display_name":"incremental_amount__c"},"INCREMENTAL_ARR__C":{"type":"FLOAT","index":133,"name":"INCREMENTAL_ARR__C","comment":null,"display_name":"incremental_arr__c"},"INITIAL_BDR__C":{"type":"TEXT","index":134,"name":"INITIAL_BDR__C","comment":null,"display_name":"initial_bdr__c"},"INITIAL_DEAL_SIZE__C":{"type":"TEXT","index":135,"name":"INITIAL_DEAL_SIZE__C","comment":null,"display_name":"initial_deal_size__c"},"INITIAL_IACV__C":{"type":"FLOAT","index":136,"name":"INITIAL_IACV__C","comment":null,"display_name":"initial_iacv__c"},"INITIAL_SALES_ACCEPTED_DATE__C":{"type":"TIMESTAMP_TZ","index":137,"name":"INITIAL_SALES_ACCEPTED_DATE__C","comment":null,"display_name":"initial_sales_accepted_date__c"},"INITIAL_SALES_QUALIFIED_DATE__C":{"type":"TIMESTAMP_TZ","index":138,"name":"INITIAL_SALES_QUALIFIED_DATE__C","comment":null,"display_name":"initial_sales_qualified_date__c"},"INITIAL_SDR__C":{"type":"TEXT","index":139,"name":"INITIAL_SDR__C","comment":null,"display_name":"initial_sdr__c"},"INITIAL_TERM__C":{"type":"FLOAT","index":140,"name":"INITIAL_TERM__C","comment":null,"display_name":"initial_term__c"},"INTERESTED_IN_GITLAB_EE__C":{"type":"TEXT","index":141,"name":"INTERESTED_IN_GITLAB_EE__C","comment":null,"display_name":"interested_in_gitlab_ee__c"},"INTERESTED_IN_HOSTED_SOLUTION__C":{"type":"BOOLEAN","index":142,"name":"INTERESTED_IN_HOSTED_SOLUTION__C","comment":null,"display_name":"interested_in_hosted_solution__c"},"INTERNAL_CHAMPION__C":{"type":"TEXT","index":143,"name":"INTERNAL_CHAMPION__C","comment":null,"display_name":"internal_champion__c"},"INVOICE_AMOUNT__C":{"type":"FLOAT","index":144,"name":"INVOICE_AMOUNT__C","comment":null,"display_name":"invoice_amount__c"},"INVOICE_DATE__C":{"type":"TIMESTAMP_TZ","index":145,"name":"INVOICE_DATE__C","comment":null,"display_name":"invoice_date__c"},"INVOICE_NOTIFICATIONS__C":{"type":"TEXT","index":146,"name":"INVOICE_NOTIFICATIONS__C","comment":null,"display_name":"invoice_notifications__c"},"INVOICE_NUMBER__C":{"type":"TEXT","index":147,"name":"INVOICE_NUMBER__C","comment":null,"display_name":"invoice_number__c"},"INVOICE_PAID_DATE__C":{"type":"TIMESTAMP_TZ","index":148,"name":"INVOICE_PAID_DATE__C","comment":null,"display_name":"invoice_paid_date__c"},"INVOICE_PAID__C":{"type":"BOOLEAN","index":149,"name":"INVOICE_PAID__C","comment":null,"display_name":"invoice_paid__c"},"INVOICE_STATUS__C":{"type":"TEXT","index":150,"name":"INVOICE_STATUS__C","comment":null,"display_name":"invoice_status__c"},"ISCLOSED":{"type":"BOOLEAN","index":151,"name":"ISCLOSED","comment":null,"display_name":"isclosed"},"ISDELETED":{"type":"BOOLEAN","index":152,"name":"ISDELETED","comment":null,"display_name":"isdeleted"},"ISLOST__C":{"type":"BOOLEAN","index":153,"name":"ISLOST__C","comment":null,"display_name":"islost__c"},"ISOPEN__C":{"type":"BOOLEAN","index":154,"name":"ISOPEN__C","comment":null,"display_name":"isopen__c"},"ISSPLIT":{"type":"BOOLEAN","index":155,"name":"ISSPLIT","comment":null,"display_name":"issplit"},"ISUNQUALIFIED__C":{"type":"BOOLEAN","index":156,"name":"ISUNQUALIFIED__C","comment":null,"display_name":"isunqualified__c"},"ISWON":{"type":"BOOLEAN","index":157,"name":"ISWON","comment":null,"display_name":"iswon"},"IS_0_PENDING_ACCEPTANCE__C":{"type":"BOOLEAN","index":158,"name":"IS_0_PENDING_ACCEPTANCE__C","comment":null,"display_name":"is_0_pending_acceptance__c"},"IS_1_DISCOVERY__C":{"type":"BOOLEAN","index":159,"name":"IS_1_DISCOVERY__C","comment":null,"display_name":"is_1_discovery__c"},"IS_2_SCOPING__C":{"type":"BOOLEAN","index":160,"name":"IS_2_SCOPING__C","comment":null,"display_name":"is_2_scoping__c"},"IS_3_TECHNICAL_EVALUATION__C":{"type":"BOOLEAN","index":161,"name":"IS_3_TECHNICAL_EVALUATION__C","comment":null,"display_name":"is_3_technical_evaluation__c"},"IS_4_PROPOSAL__C":{"type":"BOOLEAN","index":162,"name":"IS_4_PROPOSAL__C","comment":null,"display_name":"is_4_proposal__c"},"IS_5_NEGOTIATING__C":{"type":"BOOLEAN","index":163,"name":"IS_5_NEGOTIATING__C","comment":null,"display_name":"is_5_negotiating__c"},"IS_6_AWAITING_SIGNATURE__C":{"type":"BOOLEAN","index":164,"name":"IS_6_AWAITING_SIGNATURE__C","comment":null,"display_name":"is_6_awaiting_signature__c"},"IS_6_CLOSED_WON__C":{"type":"BOOLEAN","index":165,"name":"IS_6_CLOSED_WON__C","comment":null,"display_name":"is_6_closed_won__c"},"IS_7_CLOSED_LOST__C":{"type":"BOOLEAN","index":166,"name":"IS_7_CLOSED_LOST__C","comment":null,"display_name":"is_7_closed_lost__c"},"IS_8_UNQUALIFIED__C":{"type":"BOOLEAN","index":167,"name":"IS_8_UNQUALIFIED__C","comment":null,"display_name":"is_8_unqualified__c"},"IS_9_DUPLICATE__C":{"type":"BOOLEAN","index":168,"name":"IS_9_DUPLICATE__C","comment":null,"display_name":"is_9_duplicate__c"},"IS_A_CHILD_PS_OPPORTUNITY__C":{"type":"BOOLEAN","index":169,"name":"IS_A_CHILD_PS_OPPORTUNITY__C","comment":null,"display_name":"is_a_child_ps_opportunity__c"},"IS_EDU_OSS_OPP__C":{"type":"BOOLEAN","index":170,"name":"IS_EDU_OSS_OPP__C","comment":null,"display_name":"is_edu_oss_opp__c"},"IS_OSS_EDU_OPP__C":{"type":"BOOLEAN","index":171,"name":"IS_OSS_EDU_OPP__C","comment":null,"display_name":"is_oss_edu_opp__c"},"IS_THERE_A_MEETING_SET_WITH_AN_AE_TO_DIS__C":{"type":"TEXT","index":172,"name":"IS_THERE_A_MEETING_SET_WITH_AN_AE_TO_DIS__C","comment":null,"display_name":"is_there_a_meeting_set_with_an_ae_to_dis__c"},"IS_ULTIMATE_OR_PREMIUM_OPPORTUNITY__C":{"type":"FLOAT","index":173,"name":"IS_ULTIMATE_OR_PREMIUM_OPPORTUNITY__C","comment":null,"display_name":"is_ultimate_or_premium_opportunity__c"},"KEY_ASSUMPTIONS__C":{"type":"TEXT","index":174,"name":"KEY_ASSUMPTIONS__C","comment":null,"display_name":"key_assumptions__c"},"LASTACTIVITYDATE":{"type":"TIMESTAMP_TZ","index":175,"name":"LASTACTIVITYDATE","comment":null,"display_name":"lastactivitydate"},"LASTMODIFIEDBYID":{"type":"TEXT","index":176,"name":"LASTMODIFIEDBYID","comment":null,"display_name":"lastmodifiedbyid"},"LASTMODIFIEDDATE":{"type":"TIMESTAMP_TZ","index":177,"name":"LASTMODIFIEDDATE","comment":null,"display_name":"lastmodifieddate"},"LASTREFERENCEDDATE":{"type":"TIMESTAMP_TZ","index":178,"name":"LASTREFERENCEDDATE","comment":null,"display_name":"lastreferenceddate"},"LASTVIEWEDDATE":{"type":"TIMESTAMP_TZ","index":179,"name":"LASTVIEWEDDATE","comment":null,"display_name":"lastvieweddate"},"LEADSOURCE":{"type":"TEXT","index":180,"name":"LEADSOURCE","comment":null,"display_name":"leadsource"},"LEANDATA__DAYS_TO_CLOSE__C":{"type":"FLOAT","index":181,"name":"LEANDATA__DAYS_TO_CLOSE__C","comment":null,"display_name":"leandata__days_to_close__c"},"LEGACY_SQL_NEW_BIZ__C":{"type":"BOOLEAN","index":182,"name":"LEGACY_SQL_NEW_BIZ__C","comment":null,"display_name":"legacy_sql_new_biz__c"},"LID__IS_INFLUENCED__C":{"type":"BOOLEAN","index":183,"name":"LID__IS_INFLUENCED__C","comment":null,"display_name":"lid__is_influenced__c"},"LINK_TO_POC_GITLAB_ISSUE__C":{"type":"TEXT","index":184,"name":"LINK_TO_POC_GITLAB_ISSUE__C","comment":null,"display_name":"link_to_poc_gitlab_issue__c"},"LOST_AMOUNT__C":{"type":"FLOAT","index":185,"name":"LOST_AMOUNT__C","comment":null,"display_name":"lost_amount__c"},"MANAGER_FORECAST__C":{"type":"TEXT","index":186,"name":"MANAGER_FORECAST__C","comment":null,"display_name":"manager_forecast__c"},"MAX_TICKET_GROUP_FROM_PRODUCTS_NUMERIC__C":{"type":"FLOAT","index":187,"name":"MAX_TICKET_GROUP_FROM_PRODUCTS_NUMERIC__C","comment":null,"display_name":"max_ticket_group_from_products_numeric__c"},"MERGED_OPPORTUNITY__C":{"type":"TEXT","index":188,"name":"MERGED_OPPORTUNITY__C","comment":null,"display_name":"merged_opportunity__c"},"METRICS__C":{"type":"TEXT","index":189,"name":"METRICS__C","comment":null,"display_name":"metrics__c"},"MKTO_SI__MARKETOANALYZER__C":{"type":"TEXT","index":190,"name":"MKTO_SI__MARKETOANALYZER__C","comment":null,"display_name":"mkto_si__marketoanalyzer__c"},"MRR1__C":{"type":"FLOAT","index":191,"name":"MRR1__C","comment":null,"display_name":"mrr1__c"},"MRR2__C":{"type":"FLOAT","index":192,"name":"MRR2__C","comment":null,"display_name":"mrr2__c"},"MRR_OVERRIDE__C":{"type":"FLOAT","index":193,"name":"MRR_OVERRIDE__C","comment":null,"display_name":"mrr_override__c"},"MRR__C":{"type":"FLOAT","index":194,"name":"MRR__C","comment":null,"display_name":"mrr__c"},"MULTIYEAR_RENEWAL__C":{"type":"BOOLEAN","index":195,"name":"MULTIYEAR_RENEWAL__C","comment":null,"display_name":"multiyear_renewal__c"},"NAME":{"type":"TEXT","index":196,"name":"NAME","comment":null,"display_name":"name"},"NEED_TO_BUY__C":{"type":"TEXT","index":197,"name":"NEED_TO_BUY__C","comment":null,"display_name":"need_to_buy__c"},"NEGOTIATING_STAGE__C":{"type":"FLOAT","index":198,"name":"NEGOTIATING_STAGE__C","comment":null,"display_name":"negotiating_stage__c"},"NEXTSTEP":{"type":"TEXT","index":199,"name":"NEXTSTEP","comment":null,"display_name":"nextstep"},"NON_RECURRING_VALUE__C":{"type":"FLOAT","index":200,"name":"NON_RECURRING_VALUE__C","comment":null,"display_name":"non_recurring_value__c"},"NON_RECURRING__C":{"type":"FLOAT","index":201,"name":"NON_RECURRING__C","comment":null,"display_name":"non_recurring__c"},"NRV__C":{"type":"FLOAT","index":202,"name":"NRV__C","comment":null,"display_name":"nrv__c"},"NUMBER_OF_POC_S__C":{"type":"FLOAT","index":203,"name":"NUMBER_OF_POC_S__C","comment":null,"display_name":"number_of_poc_s__c"},"OF_USERS_ON_CE__C":{"type":"FLOAT","index":204,"name":"OF_USERS_ON_CE__C","comment":null,"display_name":"of_users_on_ce__c"},"ONE__C":{"type":"FLOAT","index":205,"name":"ONE__C","comment":null,"display_name":"one__c"},"ONLINE_PURCHASE__C":{"type":"BOOLEAN","index":206,"name":"ONLINE_PURCHASE__C","comment":null,"display_name":"online_purchase__c"},"OPEN_AMOUNT__C":{"type":"FLOAT","index":207,"name":"OPEN_AMOUNT__C","comment":null,"display_name":"open_amount__c"},"OPPORTUNITY_AGE__C":{"type":"FLOAT","index":208,"name":"OPPORTUNITY_AGE__C","comment":null,"display_name":"opportunity_age__c"},"OPPORTUNITY_CLOSED__C":{"type":"BOOLEAN","index":209,"name":"OPPORTUNITY_CLOSED__C","comment":null,"display_name":"opportunity_closed__c"},"OPPORTUNITY_HISTORY__C":{"type":"TEXT","index":210,"name":"OPPORTUNITY_HISTORY__C","comment":null,"display_name":"opportunity_history__c"},"OPPORTUNITY_ID_18__C":{"type":"TEXT","index":211,"name":"OPPORTUNITY_ID_18__C","comment":null,"display_name":"opportunity_id_18__c"},"OPPORTUNITY_OWNER__C":{"type":"TEXT","index":212,"name":"OPPORTUNITY_OWNER__C","comment":null,"display_name":"opportunity_owner__c"},"OPPORTUNITY_TEAM__C":{"type":"TEXT","index":213,"name":"OPPORTUNITY_TEAM__C","comment":null,"display_name":"opportunity_team__c"},"OPPORTUNITY_TERM_NEW__C":{"type":"FLOAT","index":214,"name":"OPPORTUNITY_TERM_NEW__C","comment":null,"display_name":"opportunity_term_new__c"},"OPPORTUNITY_TERM_OVERRIDE__C":{"type":"FLOAT","index":215,"name":"OPPORTUNITY_TERM_OVERRIDE__C","comment":null,"display_name":"opportunity_term_override__c"},"OPPORTUNITY_TERM__C":{"type":"FLOAT","index":216,"name":"OPPORTUNITY_TERM__C","comment":null,"display_name":"opportunity_term__c"},"OPPORTUNITY__C":{"type":"FLOAT","index":217,"name":"OPPORTUNITY__C","comment":null,"display_name":"opportunity__c"},"OPP_OWNER_ACTIVE__C":{"type":"BOOLEAN","index":218,"name":"OPP_OWNER_ACTIVE__C","comment":null,"display_name":"opp_owner_active__c"},"ORIGINAL_OPPORTUNITY_OWNER__C":{"type":"TEXT","index":219,"name":"ORIGINAL_OPPORTUNITY_OWNER__C","comment":null,"display_name":"original_opportunity_owner__c"},"OWNERID":{"type":"TEXT","index":220,"name":"OWNERID","comment":null,"display_name":"ownerid"},"OWNER_ACCOUNT_TYPE__C":{"type":"TEXT","index":221,"name":"OWNER_ACCOUNT_TYPE__C","comment":null,"display_name":"owner_account_type__c"},"PARENT_OPPORTUNITY__C":{"type":"TEXT","index":222,"name":"PARENT_OPPORTUNITY__C","comment":null,"display_name":"parent_opportunity__c"},"PARTNERS__C":{"type":"TEXT","index":223,"name":"PARTNERS__C","comment":null,"display_name":"partners__c"},"PAYMENTUPDATEDDATE__C":{"type":"TIMESTAMP_TZ","index":224,"name":"PAYMENTUPDATEDDATE__C","comment":null,"display_name":"paymentupdateddate__c"},"POC_END_DATE__C":{"type":"TIMESTAMP_TZ","index":225,"name":"POC_END_DATE__C","comment":null,"display_name":"poc_end_date__c"},"POC_NOTES__C":{"type":"TEXT","index":226,"name":"POC_NOTES__C","comment":null,"display_name":"poc_notes__c"},"POC_START_DATE__C":{"type":"TIMESTAMP_TZ","index":227,"name":"POC_START_DATE__C","comment":null,"display_name":"poc_start_date__c"},"POC_SUCCESS_CRITERIA__C":{"type":"TEXT","index":228,"name":"POC_SUCCESS_CRITERIA__C","comment":null,"display_name":"poc_success_criteria__c"},"POTENTIAL_AGE__C":{"type":"FLOAT","index":229,"name":"POTENTIAL_AGE__C","comment":null,"display_name":"potential_age__c"},"POTENTIAL_RENEWAL_ACV_LOST__C":{"type":"FLOAT","index":230,"name":"POTENTIAL_RENEWAL_ACV_LOST__C","comment":null,"display_name":"potential_renewal_acv_lost__c"},"PRESENT_SOLUTION_STAGE__C":{"type":"FLOAT","index":231,"name":"PRESENT_SOLUTION_STAGE__C","comment":null,"display_name":"present_solution_stage__c"},"PRICEBOOK2ID":{"type":"TEXT","index":232,"name":"PRICEBOOK2ID","comment":null,"display_name":"pricebook2id"},"PRIMARY_CONTACT_EMAIL__C":{"type":"TEXT","index":233,"name":"PRIMARY_CONTACT_EMAIL__C","comment":null,"display_name":"primary_contact_email__c"},"PRIMARY_CONTACT_FIRST_NAME__C":{"type":"TEXT","index":234,"name":"PRIMARY_CONTACT_FIRST_NAME__C","comment":null,"display_name":"primary_contact_first_name__c"},"PROBABILITY":{"type":"FLOAT","index":235,"name":"PROBABILITY","comment":null,"display_name":"probability"},"PRODUCTS_PURCHASED__C":{"type":"TEXT","index":236,"name":"PRODUCTS_PURCHASED__C","comment":null,"display_name":"products_purchased__c"},"PRODUCT_CATEGORY__C":{"type":"TEXT","index":237,"name":"PRODUCT_CATEGORY__C","comment":null,"display_name":"product_category__c"},"PRODUCT_DETAILS__C":{"type":"TEXT","index":238,"name":"PRODUCT_DETAILS__C","comment":null,"display_name":"product_details__c"},"PROFESSIONAL_SERVICES_DESCRIPTION__C":{"type":"TEXT","index":239,"name":"PROFESSIONAL_SERVICES_DESCRIPTION__C","comment":null,"display_name":"professional_services_description__c"},"PROFESSIONAL_SERVICES_VALUE__C":{"type":"FLOAT","index":240,"name":"PROFESSIONAL_SERVICES_VALUE__C","comment":null,"display_name":"professional_services_value__c"},"PROJECTIONS_TOTAL__C":{"type":"FLOAT","index":241,"name":"PROJECTIONS_TOTAL__C","comment":null,"display_name":"projections_total__c"},"PROJECT_SCOPE__C":{"type":"TEXT","index":242,"name":"PROJECT_SCOPE__C","comment":null,"display_name":"project_scope__c"},"PROOF_OF_CONCEPT_POC_STATUS__C":{"type":"TEXT","index":243,"name":"PROOF_OF_CONCEPT_POC_STATUS__C","comment":null,"display_name":"proof_of_concept_poc_status__c"},"PURCHASING_PLAN__C":{"type":"TEXT","index":244,"name":"PURCHASING_PLAN__C","comment":null,"display_name":"purchasing_plan__c"},"PURCHASING_PROCUREMENT_PROCESS__C":{"type":"TEXT","index":245,"name":"PURCHASING_PROCUREMENT_PROCESS__C","comment":null,"display_name":"purchasing_procurement_process__c"},"PUSH_COUNTER__C":{"type":"FLOAT","index":246,"name":"PUSH_COUNTER__C","comment":null,"display_name":"push_counter__c"},"QUALIFICATION_NOTES__C":{"type":"TEXT","index":247,"name":"QUALIFICATION_NOTES__C","comment":null,"display_name":"qualification_notes__c"},"QUOTE_AMOUNT__C":{"type":"FLOAT","index":248,"name":"QUOTE_AMOUNT__C","comment":null,"display_name":"quote_amount__c"},"RD_NOTIFICATION_50K_IACV__C":{"type":"BOOLEAN","index":249,"name":"RD_NOTIFICATION_50K_IACV__C","comment":null,"display_name":"rd_notification_50k_iacv__c"},"RD_NOTIFICATION_JUMBO__C":{"type":"BOOLEAN","index":250,"name":"RD_NOTIFICATION_JUMBO__C","comment":null,"display_name":"rd_notification_jumbo__c"},"REASON_FOR_LOST_DETAILS__C":{"type":"TEXT","index":251,"name":"REASON_FOR_LOST_DETAILS__C","comment":null,"display_name":"reason_for_lost_details__c"},"REASON_FOR_LOST__C":{"type":"TEXT","index":252,"name":"REASON_FOR_LOST__C","comment":null,"display_name":"reason_for_lost__c"},"REASON_WE_WON__C":{"type":"TEXT","index":253,"name":"REASON_WE_WON__C","comment":null,"display_name":"reason_we_won__c"},"RECORDTYPEID":{"type":"TEXT","index":254,"name":"RECORDTYPEID","comment":null,"display_name":"recordtypeid"},"REFERENCEABLE_CUSTOMER__C":{"type":"TEXT","index":255,"name":"REFERENCEABLE_CUSTOMER__C","comment":null,"display_name":"referenceable_customer__c"},"REGION_O__C":{"type":"TEXT","index":256,"name":"REGION_O__C","comment":null,"display_name":"region_o__c"},"RELATED_QUOTE__C":{"type":"TEXT","index":257,"name":"RELATED_QUOTE__C","comment":null,"display_name":"related_quote__c"},"RENEWAL_ACV__C":{"type":"FLOAT","index":258,"name":"RENEWAL_ACV__C","comment":null,"display_name":"renewal_acv__c"},"RENEWAL_AMOUNT__C":{"type":"FLOAT","index":259,"name":"RENEWAL_AMOUNT__C","comment":null,"display_name":"renewal_amount__c"},"RENEWAL_ARR__C":{"type":"FLOAT","index":260,"name":"RENEWAL_ARR__C","comment":null,"display_name":"renewal_arr__c"},"RENEWAL_NOTIFICATION__C":{"type":"BOOLEAN","index":261,"name":"RENEWAL_NOTIFICATION__C","comment":null,"display_name":"renewal_notification__c"},"RENEWAL_TERM__C":{"type":"FLOAT","index":262,"name":"RENEWAL_TERM__C","comment":null,"display_name":"renewal_term__c"},"RESEND_EMAIL_TO_SLACK__C":{"type":"BOOLEAN","index":263,"name":"RESEND_EMAIL_TO_SLACK__C","comment":null,"display_name":"resend_email_to_slack__c"},"ROLE_PROSPECT_PLAYS_IN_EVALUATION__C":{"type":"TEXT","index":264,"name":"ROLE_PROSPECT_PLAYS_IN_EVALUATION__C","comment":null,"display_name":"role_prospect_plays_in_evaluation__c"},"SALES_ACCEPTED_DATE__C":{"type":"TIMESTAMP_TZ","index":265,"name":"SALES_ACCEPTED_DATE__C","comment":null,"display_name":"sales_accepted_date__c"},"SALES_CYCLE_KEY__C":{"type":"TEXT","index":266,"name":"SALES_CYCLE_KEY__C","comment":null,"display_name":"sales_cycle_key__c"},"SALES_MARKET__C":{"type":"TEXT","index":267,"name":"SALES_MARKET__C","comment":null,"display_name":"sales_market__c"},"SALES_QUALIFIED_AMOUNT_IACV__C":{"type":"FLOAT","index":268,"name":"SALES_QUALIFIED_AMOUNT_IACV__C","comment":null,"display_name":"sales_qualified_amount_iacv__c"},"SALES_QUALIFIED_DATE__C":{"type":"TIMESTAMP_TZ","index":269,"name":"SALES_QUALIFIED_DATE__C","comment":null,"display_name":"sales_qualified_date__c"},"SALES_QUALIFIED_FISCAL_PERIOD__C":{"type":"TEXT","index":270,"name":"SALES_QUALIFIED_FISCAL_PERIOD__C","comment":null,"display_name":"sales_qualified_fiscal_period__c"},"SALES_QUALIFIED__C":{"type":"BOOLEAN","index":271,"name":"SALES_QUALIFIED__C","comment":null,"display_name":"sales_qualified__c"},"SALES_SEGMENTATION_EMPLOYEES_O__C":{"type":"TEXT","index":272,"name":"SALES_SEGMENTATION_EMPLOYEES_O__C","comment":null,"display_name":"sales_segmentation_employees_o__c"},"SALES_SEGMENTATION_O__C":{"type":"TEXT","index":273,"name":"SALES_SEGMENTATION_O__C","comment":null,"display_name":"sales_segmentation_o__c"},"SALES_SEGMENTATION__C":{"type":"TEXT","index":274,"name":"SALES_SEGMENTATION__C","comment":null,"display_name":"sales_segmentation__c"},"SDR_LU__C":{"type":"TEXT","index":275,"name":"SDR_LU__C","comment":null,"display_name":"sdr_lu__c"},"SDR__C":{"type":"TEXT","index":276,"name":"SDR__C","comment":null,"display_name":"sdr__c"},"SECONDARY_OPPORTUNITY_OWNER__C":{"type":"TEXT","index":277,"name":"SECONDARY_OPPORTUNITY_OWNER__C","comment":null,"display_name":"secondary_opportunity_owner__c"},"SECOND_OWNER_INSIGHT_SQUARED__C":{"type":"TEXT","index":278,"name":"SECOND_OWNER_INSIGHT_SQUARED__C","comment":null,"display_name":"second_owner_insight_squared__c"},"SERVICES_COMPLETED__C":{"type":"BOOLEAN","index":279,"name":"SERVICES_COMPLETED__C","comment":null,"display_name":"services_completed__c"},"SOFTWARE_DEVELOPMENT_METHODOLOGY_STATE__C":{"type":"TEXT","index":280,"name":"SOFTWARE_DEVELOPMENT_METHODOLOGY_STATE__C","comment":null,"display_name":"software_development_methodology_state__c"},"SOLUTIONS_FEATURES_OF_INTEREST__C":{"type":"TEXT","index":281,"name":"SOLUTIONS_FEATURES_OF_INTEREST__C","comment":null,"display_name":"solutions_features_of_interest__c"},"SOLUTIONS_TO_BE_REPLACED_NOTES__C":{"type":"TEXT","index":282,"name":"SOLUTIONS_TO_BE_REPLACED_NOTES__C","comment":null,"display_name":"solutions_to_be_replaced_notes__c"},"SOLUTIONS_TO_BE_REPLACED__C":{"type":"TEXT","index":283,"name":"SOLUTIONS_TO_BE_REPLACED__C","comment":null,"display_name":"solutions_to_be_replaced__c"},"SOLUTION_FIT__C":{"type":"TEXT","index":284,"name":"SOLUTION_FIT__C","comment":null,"display_name":"solution_fit__c"},"SQL_AMOUNT__C":{"type":"FLOAT","index":285,"name":"SQL_AMOUNT__C","comment":null,"display_name":"sql_amount__c"},"SQL_SOURCE__C":{"type":"TEXT","index":286,"name":"SQL_SOURCE__C","comment":null,"display_name":"sql_source__c"},"STAGENAME":{"type":"TEXT","index":287,"name":"STAGENAME","comment":null,"display_name":"stagename"},"STAGE_REPORT__C":{"type":"TEXT","index":288,"name":"STAGE_REPORT__C","comment":null,"display_name":"stage_report__c"},"START_DATE__C":{"type":"TIMESTAMP_TZ","index":289,"name":"START_DATE__C","comment":null,"display_name":"start_date__c"},"SUBMIT_FOR_APPROVAL__C":{"type":"BOOLEAN","index":290,"name":"SUBMIT_FOR_APPROVAL__C","comment":null,"display_name":"submit_for_approval__c"},"SUB_REGION_O__C":{"type":"TEXT","index":291,"name":"SUB_REGION_O__C","comment":null,"display_name":"sub_region_o__c"},"SWING_DEAL__C":{"type":"BOOLEAN","index":292,"name":"SWING_DEAL__C","comment":null,"display_name":"swing_deal__c"},"SYSTEMMODSTAMP":{"type":"TIMESTAMP_TZ","index":293,"name":"SYSTEMMODSTAMP","comment":null,"display_name":"systemmodstamp"},"TASK_SCHEDULE__C":{"type":"TEXT","index":294,"name":"TASK_SCHEDULE__C","comment":null,"display_name":"task_schedule__c"},"TEAM_2__C":{"type":"TEXT","index":295,"name":"TEAM_2__C","comment":null,"display_name":"team_2__c"},"TERM_END_DATE__C":{"type":"TIMESTAMP_TZ","index":296,"name":"TERM_END_DATE__C","comment":null,"display_name":"term_end_date__c"},"TERM_START_DATE__C":{"type":"TIMESTAMP_TZ","index":297,"name":"TERM_START_DATE__C","comment":null,"display_name":"term_start_date__c"},"TRIGGER_WORKFLOW__C":{"type":"BOOLEAN","index":298,"name":"TRIGGER_WORKFLOW__C","comment":null,"display_name":"trigger_workflow__c"},"TRUE_UP_AMOUNT__C":{"type":"FLOAT","index":299,"name":"TRUE_UP_AMOUNT__C","comment":null,"display_name":"true_up_amount__c"},"TYPE":{"type":"TEXT","index":300,"name":"TYPE","comment":null,"display_name":"type"},"TYPE_AMOUNT_CLOSE_DATE__C":{"type":"TEXT","index":301,"name":"TYPE_AMOUNT_CLOSE_DATE__C","comment":null,"display_name":"type_amount_close_date__c"},"TZ__LOCAL_TIME_24_SHORT__C":{"type":"TEXT","index":302,"name":"TZ__LOCAL_TIME_24_SHORT__C","comment":null,"display_name":"tz__local_time_24_short__c"},"TZ__LOCAL_TIME_24__C":{"type":"TEXT","index":303,"name":"TZ__LOCAL_TIME_24__C","comment":null,"display_name":"tz__local_time_24__c"},"TZ__LOCAL_TIME_SHORT__C":{"type":"TEXT","index":304,"name":"TZ__LOCAL_TIME_SHORT__C","comment":null,"display_name":"tz__local_time_short__c"},"TZ__LOCAL_TIME__C":{"type":"TEXT","index":305,"name":"TZ__LOCAL_TIME__C","comment":null,"display_name":"tz__local_time__c"},"ULTIMATE_PARENT_SALES_SEGMENT_EMP_O__C":{"type":"TEXT","index":306,"name":"ULTIMATE_PARENT_SALES_SEGMENT_EMP_O__C","comment":null,"display_name":"ultimate_parent_sales_segment_emp_o__c"},"ULTIMATE_PARENT_SALES_SEGMENT_O__C":{"type":"TEXT","index":307,"name":"ULTIMATE_PARENT_SALES_SEGMENT_O__C","comment":null,"display_name":"ultimate_parent_sales_segment_o__c"},"UNQUALIFIED_AMOUNT__C":{"type":"FLOAT","index":308,"name":"UNQUALIFIED_AMOUNT__C","comment":null,"display_name":"unqualified_amount__c"},"UPSIDE_IACV__C":{"type":"FLOAT","index":309,"name":"UPSIDE_IACV__C","comment":null,"display_name":"upside_iacv__c"},"UPSIDE_SWING_DEAL_IACV__C":{"type":"FLOAT","index":310,"name":"UPSIDE_SWING_DEAL_IACV__C","comment":null,"display_name":"upside_swing_deal_iacv__c"},"VERBAL_COMMITMENT_STAGE__C":{"type":"FLOAT","index":311,"name":"VERBAL_COMMITMENT_STAGE__C","comment":null,"display_name":"verbal_commitment_stage__c"},"VERTICAL_MARKET_QUALIFICATION__C":{"type":"TEXT","index":312,"name":"VERTICAL_MARKET_QUALIFICATION__C","comment":null,"display_name":"vertical_market_qualification__c"},"WEB_PORTAL_PURCHASE__C":{"type":"BOOLEAN","index":313,"name":"WEB_PORTAL_PURCHASE__C","comment":null,"display_name":"web_portal_purchase__c"},"WEIGHTED_IACV__C":{"type":"FLOAT","index":314,"name":"WEIGHTED_IACV__C","comment":null,"display_name":"weighted_iacv__c"},"WHAT_IS_PROSPECT_DOING_TO_ADDRESS_NEED__C":{"type":"TEXT","index":315,"name":"WHAT_IS_PROSPECT_DOING_TO_ADDRESS_NEED__C","comment":null,"display_name":"what_is_prospect_doing_to_address_need__c"},"WHAT_IS_THE_TIMING_TO_PURCHASE__C":{"type":"TEXT","index":316,"name":"WHAT_IS_THE_TIMING_TO_PURCHASE__C","comment":null,"display_name":"what_is_the_timing_to_purchase__c"},"WHAT_OTHER_GROUPS_ARE_USING_GIT__C":{"type":"TEXT","index":317,"name":"WHAT_OTHER_GROUPS_ARE_USING_GIT__C","comment":null,"display_name":"what_other_groups_are_using_git__c"},"WHAT_PERFORMANCE_ISSUES_DO_YOU_HAVE__C":{"type":"TEXT","index":318,"name":"WHAT_PERFORMANCE_ISSUES_DO_YOU_HAVE__C","comment":null,"display_name":"what_performance_issues_do_you_have__c"},"WHAT_PROBLEMS_ARE_YOU_LOOKING_TO_SOLVE__C":{"type":"TEXT","index":319,"name":"WHAT_PROBLEMS_ARE_YOU_LOOKING_TO_SOLVE__C","comment":null,"display_name":"what_problems_are_you_looking_to_solve__c"},"WHAT_VCS_ARE_YOU_USING_NOW__C":{"type":"TEXT","index":320,"name":"WHAT_VCS_ARE_YOU_USING_NOW__C","comment":null,"display_name":"what_vcs_are_you_using_now__c"},"WHAT_WOULD_CONSTITUTE_A_SUCCESSFUL_TRIAL__C":{"type":"TEXT","index":321,"name":"WHAT_WOULD_CONSTITUTE_A_SUCCESSFUL_TRIAL__C","comment":null,"display_name":"what_would_constitute_a_successful_trial__c"},"WHERE_IS_THE_BUDGET_FOR_THIS_COMING_FROM__C":{"type":"TEXT","index":322,"name":"WHERE_IS_THE_BUDGET_FOR_THIS_COMING_FROM__C","comment":null,"display_name":"where_is_the_budget_for_this_coming_from__c"},"WHO_IS_THE_DECISION_MAKER_FOR_GITLAB__C":{"type":"TEXT","index":323,"name":"WHO_IS_THE_DECISION_MAKER_FOR_GITLAB__C","comment":null,"display_name":"who_is_the_decision_maker_for_gitlab__c"},"WHY_DID_YOU_CHOOSE_GITLAB__C":{"type":"TEXT","index":324,"name":"WHY_DID_YOU_CHOOSE_GITLAB__C","comment":null,"display_name":"why_did_you_choose_gitlab__c"},"WIN_PROBABILITY_SCORE__C":{"type":"FLOAT","index":325,"name":"WIN_PROBABILITY_SCORE__C","comment":null,"display_name":"win_probability_score__c"},"WON_AMOUNT__C":{"type":"FLOAT","index":326,"name":"WON_AMOUNT__C","comment":null,"display_name":"won_amount__c"},"X0_PENDING_ACCEPTANCE_DATE__C":{"type":"TIMESTAMP_TZ","index":327,"name":"X0_PENDING_ACCEPTANCE_DATE__C","comment":null,"display_name":"x0_pending_acceptance_date__c"},"X1_DISCOVERY_DATE__C":{"type":"TIMESTAMP_TZ","index":328,"name":"X1_DISCOVERY_DATE__C","comment":null,"display_name":"x1_discovery_date__c"},"X2_SCOPING_DATE__C":{"type":"TIMESTAMP_TZ","index":329,"name":"X2_SCOPING_DATE__C","comment":null,"display_name":"x2_scoping_date__c"},"X3_TECHNICAL_EVALUATION_DATE__C":{"type":"TIMESTAMP_TZ","index":330,"name":"X3_TECHNICAL_EVALUATION_DATE__C","comment":null,"display_name":"x3_technical_evaluation_date__c"},"X4_PROPOSAL_DATE__C":{"type":"TIMESTAMP_TZ","index":331,"name":"X4_PROPOSAL_DATE__C","comment":null,"display_name":"x4_proposal_date__c"},"X5_NEGOTIATING_DATE__C":{"type":"TIMESTAMP_TZ","index":332,"name":"X5_NEGOTIATING_DATE__C","comment":null,"display_name":"x5_negotiating_date__c"},"X6_AWAITING_SIGNATURE_DATE__C":{"type":"TIMESTAMP_TZ","index":333,"name":"X6_AWAITING_SIGNATURE_DATE__C","comment":null,"display_name":"x6_awaiting_signature_date__c"},"X7_CLOSED_LOST_DATE__C":{"type":"TIMESTAMP_TZ","index":334,"name":"X7_CLOSED_LOST_DATE__C","comment":null,"display_name":"x7_closed_lost_date__c"},"XACTLY_INCREMENTAL_AMOUNT__C":{"type":"FLOAT","index":335,"name":"XACTLY_INCREMENTAL_AMOUNT__C","comment":null,"display_name":"xactly_incremental_amount__c"},"XACTLY_INVOICE_PAID_DATE__C":{"type":"TIMESTAMP_TZ","index":336,"name":"XACTLY_INVOICE_PAID_DATE__C","comment":null,"display_name":"xactly_invoice_paid_date__c"},"XACTLY_RENEWAL_AMOUNT__C":{"type":"FLOAT","index":337,"name":"XACTLY_RENEWAL_AMOUNT__C","comment":null,"display_name":"xactly_renewal_amount__c"},"ZUORA_INITIAL_TERM__C":{"type":"FLOAT","index":338,"name":"ZUORA_INITIAL_TERM__C","comment":null,"display_name":"zuora_initial_term__c"},"ZUORA_MRR__C":{"type":"FLOAT","index":339,"name":"ZUORA_MRR__C","comment":null,"display_name":"zuora_mrr__c"},"_SDC_BATCHED_AT":{"type":"TIMESTAMP_TZ","index":340,"name":"_SDC_BATCHED_AT","comment":null,"display_name":"_sdc_batched_at"},"_SDC_EXTRACTED_AT":{"type":"TIMESTAMP_TZ","index":341,"name":"_SDC_EXTRACTED_AT","comment":null,"display_name":"_sdc_extracted_at"},"_SDC_RECEIVED_AT":{"type":"TIMESTAMP_TZ","index":342,"name":"_SDC_RECEIVED_AT","comment":null,"display_name":"_sdc_received_at"},"_SDC_SEQUENCE":{"type":"NUMBER","index":343,"name":"_SDC_SEQUENCE","comment":null,"display_name":"_sdc_sequence"},"_SDC_TABLE_VERSION":{"type":"NUMBER","index":344,"name":"_SDC_TABLE_VERSION","comment":null,"display_name":"_sdc_table_version"},"AWAITING_APPROVAL_STAGE__C":{"type":"FLOAT","index":345,"name":"AWAITING_APPROVAL_STAGE__C","comment":null,"display_name":"awaiting_approval_stage__c"},"SUBSCRIPTION_START_DATE__C":{"type":"TIMESTAMP_TZ","index":346,"name":"SUBSCRIPTION_START_DATE__C","comment":null,"display_name":"subscription_start_date__c"},"PREVIOUS_OPPORTUNITY__C":{"type":"TEXT","index":347,"name":"PREVIOUS_OPPORTUNITY__C","comment":null,"display_name":"previous_opportunity__c"},"SYNCEDQUOTEID":{"type":"TEXT","index":348,"name":"SYNCEDQUOTEID","comment":null,"display_name":"syncedquoteid"},"ARR_OVERRIDE__C":{"type":"FLOAT","index":349,"name":"ARR_OVERRIDE__C","comment":null,"display_name":"arr_override__c"},"RENEWAL_FORECAST_CATEGORY__C":{"type":"TEXT","index":350,"name":"RENEWAL_FORECAST_CATEGORY__C","comment":null,"display_name":"renewal_forecast_category__c"},"NET_INCREMENTAL_ANNUAL_CONTRACT_VALUE__C":{"type":"FLOAT","index":351,"name":"NET_INCREMENTAL_ANNUAL_CONTRACT_VALUE__C","comment":null,"display_name":"net_incremental_annual_contract_value__c"},"NET_IACV_BEST_CASE__C":{"type":"FLOAT","index":352,"name":"NET_IACV_BEST_CASE__C","comment":null,"display_name":"net_iacv_best_case__c"},"GROSS_IACV_COMMIT__C":{"type":"FLOAT","index":353,"name":"GROSS_IACV_COMMIT__C","comment":null,"display_name":"gross_iacv_commit__c"},"GROSS_IACV_BEST_CASE__C":{"type":"FLOAT","index":354,"name":"GROSS_IACV_BEST_CASE__C","comment":null,"display_name":"gross_iacv_best_case__c"},"RENEWAL_ACV_LOST_BEST_CASE__C":{"type":"FLOAT","index":355,"name":"RENEWAL_ACV_LOST_BEST_CASE__C","comment":null,"display_name":"renewal_acv_lost_best_case__c"},"RENEWAL_ACV_LOST_COMMIT__C":{"type":"FLOAT","index":356,"name":"RENEWAL_ACV_LOST_COMMIT__C","comment":null,"display_name":"renewal_acv_lost_commit__c"},"RENEWAL_ACV_COMMIT__C":{"type":"FLOAT","index":357,"name":"RENEWAL_ACV_COMMIT__C","comment":null,"display_name":"renewal_acv_commit__c"},"RENEWAL_ACV_BEST_CASE__C":{"type":"FLOAT","index":358,"name":"RENEWAL_ACV_BEST_CASE__C","comment":null,"display_name":"renewal_acv_best_case__c"},"NET_IACV_COMMIT__C":{"type":"FLOAT","index":359,"name":"NET_IACV_COMMIT__C","comment":null,"display_name":"net_iacv_commit__c"},"TRUE_UP_VALUE__C":{"type":"FLOAT","index":360,"name":"TRUE_UP_VALUE__C","comment":null,"display_name":"true_up_value__c"},"EDIT__C":{"type":"TEXT","index":361,"name":"EDIT__C","comment":null,"display_name":"edit__c"},"DEAL_SIZE__C":{"type":"TEXT","index":362,"name":"DEAL_SIZE__C","comment":null,"display_name":"deal_size__c"},"NEXT_STEPS__C":{"type":"TEXT","index":363,"name":"NEXT_STEPS__C","comment":null,"display_name":"next_steps__c"},"BILLING_SPECIALIST__C":{"type":"TEXT","index":364,"name":"BILLING_SPECIALIST__C","comment":null,"display_name":"billing_specialist__c"},"DOWNGRADE_IACV__C":{"type":"FLOAT","index":365,"name":"DOWNGRADE_IACV__C","comment":null,"display_name":"downgrade_iacv__c"},"GROSS_IACV__C":{"type":"FLOAT","index":366,"name":"GROSS_IACV__C","comment":null,"display_name":"gross_iacv__c"},"REFUND_IACV__C":{"type":"FLOAT","index":367,"name":"REFUND_IACV__C","comment":null,"display_name":"refund_iacv__c"},"IS_EDU_OSS_OPP_DEL__C":{"type":"BOOLEAN","index":368,"name":"IS_EDU_OSS_OPP_DEL__C","comment":null,"display_name":"is_edu_oss_opp_del__c"},"IS_PS_OPPORTUNITY__C":{"type":"FLOAT","index":369,"name":"IS_PS_OPPORTUNITY__C","comment":null,"display_name":"is_ps_opportunity__c"},"IS_DOWNGRADE_OPPORTUNITY__C":{"type":"FLOAT","index":370,"name":"IS_DOWNGRADE_OPPORTUNITY__C","comment":null,"display_name":"is_downgrade_opportunity__c"},"WON_RENEWAL_ACV__C":{"type":"FLOAT","index":371,"name":"WON_RENEWAL_ACV__C","comment":null,"display_name":"won_renewal_acv__c"},"WON_IACV__C":{"type":"FLOAT","index":372,"name":"WON_IACV__C","comment":null,"display_name":"won_iacv__c"},"LOST_RENEWAL_ACV__C":{"type":"FLOAT","index":373,"name":"LOST_RENEWAL_ACV__C","comment":null,"display_name":"lost_renewal_acv__c"},"IS_EDU_OSS_OPPORTUNITY__C":{"type":"FLOAT","index":374,"name":"IS_EDU_OSS_OPPORTUNITY__C","comment":null,"display_name":"is_edu_oss_opportunity__c"},"IS_REFUND_OPPORTUNITY__C":{"type":"FLOAT","index":375,"name":"IS_REFUND_OPPORTUNITY__C","comment":null,"display_name":"is_refund_opportunity__c"},"WON_ACV__C":{"type":"FLOAT","index":376,"name":"WON_ACV__C","comment":null,"display_name":"won_acv__c"},"NET_IACV__C":{"type":"FLOAT","index":377,"name":"NET_IACV__C","comment":null,"display_name":"net_iacv__c"},"WON_GROSS_IACV__C":{"type":"FLOAT","index":378,"name":"WON_GROSS_IACV__C","comment":null,"display_name":"won_gross_iacv__c"},"BUSINESS_TYPE__C":{"type":"TEXT","index":379,"name":"BUSINESS_TYPE__C","comment":null,"display_name":"business_type__c"},"IS_WON_OPPORTUNITY__C":{"type":"FLOAT","index":380,"name":"IS_WON_OPPORTUNITY__C","comment":null,"display_name":"is_won_opportunity__c"},"LOST_IACV__C":{"type":"FLOAT","index":381,"name":"LOST_IACV__C","comment":null,"display_name":"lost_iacv__c"},"OWNER_TEAM_O__C":{"type":"TEXT","index":382,"name":"OWNER_TEAM_O__C","comment":null,"display_name":"owner_team_o__c"},"SECURITY_MEETING__C":{"type":"BOOLEAN","index":383,"name":"SECURITY_MEETING__C","comment":null,"display_name":"security_meeting__c"},"SECURITY_CAB__C":{"type":"BOOLEAN","index":384,"name":"SECURITY_CAB__C","comment":null,"display_name":"security_cab__c"},"SECURITY_QUESTIONNAIRE__C":{"type":"BOOLEAN","index":385,"name":"SECURITY_QUESTIONNAIRE__C","comment":null,"display_name":"security_questionnaire__c"},"ACCT_OPP_ROE_CHECK__C":{"type":"TEXT","index":386,"name":"ACCT_OPP_ROE_CHECK__C","comment":null,"display_name":"acct_opp_roe_check__c"},"REASSIGNED_DATE__C":{"type":"TIMESTAMP_TZ","index":387,"name":"REASSIGNED_DATE__C","comment":null,"display_name":"reassigned_date__c"},"INITIAL_LEAD_SOURCE__C":{"type":"TEXT","index":388,"name":"INITIAL_LEAD_SOURCE__C","comment":null,"display_name":"initial_lead_source__c"},"EXPECTEDREVENUE":{"type":"FLOAT","index":389,"name":"EXPECTEDREVENUE","comment":null,"display_name":"expectedrevenue"},"INITIAL_SALES_QUALIFIED_SOURCE__C":{"type":"TEXT","index":390,"name":"INITIAL_SALES_QUALIFIED_SOURCE__C","comment":null,"display_name":"initial_sales_qualified_source__c"},"DSCORGPKG__CONVERTED_FROM_DISCOVERORG_DATA__C":{"type":"BOOLEAN","index":391,"name":"DSCORGPKG__CONVERTED_FROM_DISCOVERORG_DATA__C","comment":null,"display_name":"dscorgpkg__converted_from_discoverorg_data__c"},"WEIGHTED_VALUE__C":{"type":"FLOAT","index":392,"name":"WEIGHTED_VALUE__C","comment":null,"display_name":"weighted_value__c"},"DSCORGPKG__ATTRIBUTED_TO_DISCOVERORG__C":{"type":"BOOLEAN","index":393,"name":"DSCORGPKG__ATTRIBUTED_TO_DISCOVERORG__C","comment":null,"display_name":"dscorgpkg__attributed_to_discoverorg__c"},"ISPRIVATE":{"type":"BOOLEAN","index":394,"name":"ISPRIVATE","comment":null,"display_name":"isprivate"},"PARTNERACCOUNTID":{"type":"TEXT","index":395,"name":"PARTNERACCOUNTID","comment":null,"display_name":"partneraccountid"},"TOTALOPPORTUNITYQUANTITY":{"type":"FLOAT","index":396,"name":"TOTALOPPORTUNITYQUANTITY","comment":null,"display_name":"totalopportunityquantity"},"Y2_INCREMENTAL_ACV__C":{"type":"FLOAT","index":397,"name":"Y2_INCREMENTAL_ACV__C","comment":null,"display_name":"y2_incremental_acv__c"},"PLAN_NAME__C":{"type":"TEXT","index":398,"name":"PLAN_NAME__C","comment":null,"display_name":"plan_name__c"},"RECURLY_LINK__C":{"type":"TEXT","index":399,"name":"RECURLY_LINK__C","comment":null,"display_name":"recurly_link__c"},"ACCOUNT_OWNER_TEAM_O__C":{"type":"TEXT","index":400,"name":"ACCOUNT_OWNER_TEAM_O__C","comment":null,"display_name":"account_owner_team_o__c"},"ACCOUNT_OPPORTUNITY_TEAM_MISMATCH__C":{"type":"BOOLEAN","index":401,"name":"ACCOUNT_OPPORTUNITY_TEAM_MISMATCH__C","comment":null,"display_name":"account_opportunity_team_mismatch__c"},"MANAGER_NOTES__C":{"type":"TEXT","index":402,"name":"MANAGER_NOTES__C","comment":null,"display_name":"manager_notes__c"},"LEAD_ACTIVITY_TYPE__C":{"type":"TEXT","index":403,"name":"LEAD_ACTIVITY_TYPE__C","comment":null,"display_name":"lead_activity_type__c"},"XACTLY_IACV_GROSS__C":{"type":"FLOAT","index":404,"name":"XACTLY_IACV_GROSS__C","comment":null,"display_name":"xactly_iacv_gross__c"},"XACTLY_IACV_NET__C":{"type":"FLOAT","index":405,"name":"XACTLY_IACV_NET__C","comment":null,"display_name":"xactly_iacv_net__c"},"SA_TEAM_XACTLY__C":{"type":"TEXT","index":406,"name":"SA_TEAM_XACTLY__C","comment":null,"display_name":"sa_team_xactly__c"},"WON_INCREMENTAL_AMOUNT__C":{"type":"FLOAT","index":407,"name":"WON_INCREMENTAL_AMOUNT__C","comment":null,"display_name":"won_incremental_amount__c"},"WON_RENEWAL_AMOUNT__C":{"type":"FLOAT","index":408,"name":"WON_RENEWAL_AMOUNT__C","comment":null,"display_name":"won_renewal_amount__c"},"USER_SEGMENT_O__C":{"type":"TEXT","index":409,"name":"USER_SEGMENT_O__C","comment":null,"display_name":"user_segment_o__c"},"NEXT_STEPS_DATE__C":{"type":"TIMESTAMP_TZ","index":410,"name":"NEXT_STEPS_DATE__C","comment":null,"display_name":"next_steps_date__c"},"SECURITY_TEAM_SUPPORT_OTHER__C":{"type":"TEXT","index":411,"name":"SECURITY_TEAM_SUPPORT_OTHER__C","comment":null,"display_name":"security_team_support_other__c"},"ADMINISTRATIVE_CLOSED_OPP__C":{"type":"BOOLEAN","index":412,"name":"ADMINISTRATIVE_CLOSED_OPP__C","comment":null,"display_name":"administrative_closed_opp__c"},"INVOICE_ENTITY__C":{"type":"TEXT","index":413,"name":"INVOICE_ENTITY__C","comment":null,"display_name":"invoice_entity__c"},"X6_CLOSED_WON_DATE__C":{"type":"TIMESTAMP_TZ","index":414,"name":"X6_CLOSED_WON_DATE__C","comment":null,"display_name":"x6_closed_won_date__c"},"IACV_CREATED_DATE__C":{"type":"TIMESTAMP_TZ","index":415,"name":"IACV_CREATED_DATE__C","comment":null,"display_name":"iacv_created_date__c"},"SUB_INDUSTRY_O__C":{"type":"TEXT","index":416,"name":"SUB_INDUSTRY_O__C","comment":null,"display_name":"sub_industry_o__c"},"SOURCE_OPPORTUNITY__C":{"type":"TEXT","index":417,"name":"SOURCE_OPPORTUNITY__C","comment":null,"display_name":"source_opportunity__c"},"RENEWAL_OPPORTUNITY__C":{"type":"TEXT","index":418,"name":"RENEWAL_OPPORTUNITY__C","comment":null,"display_name":"renewal_opportunity__c"},"X_GENERATE_RENEWAL_OPPORTUNITY__C":{"type":"BOOLEAN","index":419,"name":"X_GENERATE_RENEWAL_OPPORTUNITY__C","comment":null,"display_name":"x_generate_renewal_opportunity__c"},"X_SUBSCRIPTIONTERMENDDATE__C":{"type":"TIMESTAMP_TZ","index":420,"name":"X_SUBSCRIPTIONTERMENDDATE__C","comment":null,"display_name":"x_subscriptiontermenddate__c"},"OPPORTUNITY_NUMBER__C":{"type":"TEXT","index":421,"name":"OPPORTUNITY_NUMBER__C","comment":null,"display_name":"opportunity_number__c"},"X50_50__C":{"type":"FLOAT","index":422,"name":"X50_50__C","comment":null,"display_name":"x50_50__c"},"WITHIN_FIRST_YEAR__C":{"type":"BOOLEAN","index":423,"name":"WITHIN_FIRST_YEAR__C","comment":null,"display_name":"within_first_year__c"},"GROWTH_IN_MONTH_X__C":{"type":"FLOAT","index":424,"name":"GROWTH_IN_MONTH_X__C","comment":null,"display_name":"growth_in_month_x__c"},"ADMIN_BEFORE_MAX_RENEWAL__C":{"type":"BOOLEAN","index":425,"name":"ADMIN_BEFORE_MAX_RENEWAL__C","comment":null,"display_name":"admin_before_max_renewal__c"},"RENEWAL_ACV_AMOUNT_CHECKED__C":{"type":"BOOLEAN","index":426,"name":"RENEWAL_ACV_AMOUNT_CHECKED__C","comment":null,"display_name":"renewal_acv_amount_checked__c"},"X_SUB_START_DATE__C":{"type":"BOOLEAN","index":427,"name":"X_SUB_START_DATE__C","comment":null,"display_name":"x_sub_start_date__c"},"JB_OPP_FIRST_SOURCE__C":{"type":"TEXT","index":428,"name":"JB_OPP_FIRST_SOURCE__C","comment":null,"display_name":"jb_opp_first_source__c"},"JB_OPP_FIRST_RECORD__C":{"type":"TEXT","index":429,"name":"JB_OPP_FIRST_RECORD__C","comment":null,"display_name":"jb_opp_first_record__c"},"PUB_SEC_OWNER__C":{"type":"TEXT","index":430,"name":"PUB_SEC_OWNER__C","comment":null,"display_name":"pub_sec_owner__c"},"JB_NEGATIVE_IACV__C":{"type":"FLOAT","index":431,"name":"JB_NEGATIVE_IACV__C","comment":null,"display_name":"jb_negative_iacv__c"},"JB_RENEWAL_MOVEMENT__C":{"type":"TEXT","index":432,"name":"JB_RENEWAL_MOVEMENT__C","comment":null,"display_name":"jb_renewal_movement__c"},"PUBLIC_SECTOR_OPP__C":{"type":"BOOLEAN","index":433,"name":"PUBLIC_SECTOR_OPP__C","comment":null,"display_name":"public_sector_opp__c"},"FM_WHY_NOW__C":{"type":"TEXT","index":434,"name":"FM_WHY_NOW__C","comment":null,"display_name":"fm_why_now__c"},"FM_IDENTIFY_PAIN__C":{"type":"TEXT","index":435,"name":"FM_IDENTIFY_PAIN__C","comment":null,"display_name":"fm_identify_pain__c"},"FM_DECISION_CRITERIA__C":{"type":"TEXT","index":436,"name":"FM_DECISION_CRITERIA__C","comment":null,"display_name":"fm_decision_criteria__c"},"FM_WHY_DO_ANYTHING_AT_ALL__C":{"type":"TEXT","index":437,"name":"FM_WHY_DO_ANYTHING_AT_ALL__C","comment":null,"display_name":"fm_why_do_anything_at_all__c"},"FM_CLOSE_PLAN__C":{"type":"TEXT","index":438,"name":"FM_CLOSE_PLAN__C","comment":null,"display_name":"fm_close_plan__c"},"FM_METRICS__C":{"type":"TEXT","index":439,"name":"FM_METRICS__C","comment":null,"display_name":"fm_metrics__c"},"FM_DECISION_PROCESS__C":{"type":"TEXT","index":440,"name":"FM_DECISION_PROCESS__C","comment":null,"display_name":"fm_decision_process__c"},"FM_RISKS__C":{"type":"TEXT","index":441,"name":"FM_RISKS__C","comment":null,"display_name":"fm_risks__c"},"FM_HELP__C":{"type":"TEXT","index":442,"name":"FM_HELP__C","comment":null,"display_name":"fm_help__c"},"FM_PAPER_PROCESS__C":{"type":"TEXT","index":443,"name":"FM_PAPER_PROCESS__C","comment":null,"display_name":"fm_paper_process__c"},"FM_VALUE_DRIVER__C":{"type":"TEXT","index":444,"name":"FM_VALUE_DRIVER__C","comment":null,"display_name":"fm_value_driver__c"},"FM_COMPETITION__C":{"type":"TEXT","index":445,"name":"FM_COMPETITION__C","comment":null,"display_name":"fm_competition__c"},"FM_USE_CASES__C":{"type":"TEXT","index":446,"name":"FM_USE_CASES__C","comment":null,"display_name":"fm_use_cases__c"},"FM_SCORE__C":{"type":"FLOAT","index":447,"name":"FM_SCORE__C","comment":null,"display_name":"fm_score__c"},"FM_COMPLIANCE__C":{"type":"BOOLEAN","index":448,"name":"FM_COMPLIANCE__C","comment":null,"display_name":"fm_compliance__c"},"FM_THRESHOLD__C":{"type":"BOOLEAN","index":449,"name":"FM_THRESHOLD__C","comment":null,"display_name":"fm_threshold__c"},"FM_MANUAL_THRESHOLD__C":{"type":"BOOLEAN","index":450,"name":"FM_MANUAL_THRESHOLD__C","comment":null,"display_name":"fm_manual_threshold__c"},"ADMIN_POKE__C":{"type":"TEXT","index":451,"name":"ADMIN_POKE__C","comment":null,"display_name":"admin_poke__c"},"FM_WHY_GITLAB__C":{"type":"TEXT","index":452,"name":"FM_WHY_GITLAB__C","comment":null,"display_name":"fm_why_gitlab__c"},"FM_ECONOMIC_BUYER__C":{"type":"TEXT","index":453,"name":"FM_ECONOMIC_BUYER__C","comment":null,"display_name":"fm_economic_buyer__c"},"FM_CHAMPION__C":{"type":"TEXT","index":454,"name":"FM_CHAMPION__C","comment":null,"display_name":"fm_champion__c"},"DBT_SCD_ID":{"type":"TEXT","index":455,"name":"DBT_SCD_ID","comment":null,"display_name":"dbt_scd_id"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_TZ","index":456,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_VALID_FROM":{"type":"TIMESTAMP_TZ","index":457,"name":"DBT_VALID_FROM","comment":null,"display_name":"dbt_valid_from"},"DBT_VALID_TO":{"type":"TIMESTAMP_TZ","index":458,"name":"DBT_VALID_TO","comment":null,"display_name":"dbt_valid_to"},"FM_DO_WE_HAVE_ACCESS_TO_THE_CHAMPION__C":{"type":"BOOLEAN","index":459,"name":"FM_DO_WE_HAVE_ACCESS_TO_THE_CHAMPION__C","comment":null,"display_name":"fm_do_we_have_access_to_the_champion__c"},"CRITICAL_DEAL_FLAG__C":{"type":"TEXT","index":460,"name":"CRITICAL_DEAL_FLAG__C","comment":null,"display_name":"critical_deal_flag__c"},"ADMIN_RENEWAL_ACV_REVIEW_DATE__C":{"type":"TIMESTAMP_TZ","index":461,"name":"ADMIN_RENEWAL_ACV_REVIEW_DATE__C","comment":null,"display_name":"admin_renewal_acv_review_date__c"},"INITIAL_PROBLEM__C":{"type":"TEXT","index":462,"name":"INITIAL_PROBLEM__C","comment":null,"display_name":"initial_problem__c"},"FM_ACCESS_TO_THE_ECONOMIC_BUYER__C":{"type":"BOOLEAN","index":463,"name":"FM_ACCESS_TO_THE_ECONOMIC_BUYER__C","comment":null,"display_name":"fm_access_to_the_economic_buyer__c"},"PRODUCT_MATURITY_PRODUCT_LINE__C":{"type":"TEXT","index":464,"name":"PRODUCT_MATURITY_PRODUCT_LINE__C","comment":null,"display_name":"product_maturity_product_line__c"},"PRIMARY_WON_REASON__C":{"type":"TEXT","index":465,"name":"PRIMARY_WON_REASON__C","comment":null,"display_name":"primary_won_reason__c"},"MATCHING_ACCOUNT_AND_OPPORTUNITY_OWNERS__C":{"type":"BOOLEAN","index":466,"name":"MATCHING_ACCOUNT_AND_OPPORTUNITY_OWNERS__C","comment":null,"display_name":"matching_account_and_opportunity_owners__c"},"ACCOUNT_OWNER_ROLE__C":{"type":"TEXT","index":467,"name":"ACCOUNT_OWNER_ROLE__C","comment":null,"display_name":"account_owner_role__c"},"SPEND_JUSTIFICATION__C":{"type":"TEXT","index":468,"name":"SPEND_JUSTIFICATION__C","comment":null,"display_name":"spend_justification__c"},"ASM_OPP_ALERT_SENT__C":{"type":"BOOLEAN","index":469,"name":"ASM_OPP_ALERT_SENT__C","comment":null,"display_name":"asm_opp_alert_sent__c"},"MANAGER_EMAIL__C":{"type":"TEXT","index":470,"name":"MANAGER_EMAIL__C","comment":null,"display_name":"manager_email__c"},"MANAGER_ROLE__C":{"type":"TEXT","index":471,"name":"MANAGER_ROLE__C","comment":null,"display_name":"manager_role__c"},"INITIAL_SOURCE_VERIFY__C":{"type":"TEXT","index":472,"name":"INITIAL_SOURCE_VERIFY__C","comment":null,"display_name":"initial_source_verify__c"},"MANAGER_CURRENT__C":{"type":"TEXT","index":473,"name":"MANAGER_CURRENT__C","comment":null,"display_name":"manager_current__c"},"OF_USERS_SERVED__C":{"type":"TEXT","index":474,"name":"OF_USERS_SERVED__C","comment":null,"display_name":"of_users_served__c"},"PRIMARY_CONTACT_ENGAGEMENT__C":{"type":"TEXT","index":475,"name":"PRIMARY_CONTACT_ENGAGEMENT__C","comment":null,"display_name":"primary_contact_engagement__c"},"RED_GREEN__C":{"type":"TEXT","index":476,"name":"RED_GREEN__C","comment":null,"display_name":"red_green__c"},"CREATED_CLOSED_SAME_DAY__C":{"type":"BOOLEAN","index":477,"name":"CREATED_CLOSED_SAME_DAY__C","comment":null,"display_name":"created_closed_same_day__c"},"CREATED_BY_TEAM__C":{"type":"TEXT","index":478,"name":"CREATED_BY_TEAM__C","comment":null,"display_name":"created_by_team__c"},"MS_SOURCE_FLAG__C":{"type":"BOOLEAN","index":479,"name":"MS_SOURCE_FLAG__C","comment":null,"display_name":"ms_source_flag__c"},"JB_PRIMARY_QUOTE_AMOUNT__C":{"type":"FLOAT","index":480,"name":"JB_PRIMARY_QUOTE_AMOUNT__C","comment":null,"display_name":"jb_primary_quote_amount__c"},"DUPLICATE_OPPORTUNITY__C":{"type":"TEXT","index":481,"name":"DUPLICATE_OPPORTUNITY__C","comment":null,"display_name":"duplicate_opportunity__c"},"JB_IACV_STORY__C":{"type":"TEXT","index":482,"name":"JB_IACV_STORY__C","comment":null,"display_name":"jb_iacv_story__c"},"JB_AMOUNT_DELTA__C":{"type":"FLOAT","index":483,"name":"JB_AMOUNT_DELTA__C","comment":null,"display_name":"jb_amount_delta__c"},"CP_COUNT_OF_MISSING_FIELDS__C":{"type":"FLOAT","index":484,"name":"CP_COUNT_OF_MISSING_FIELDS__C","comment":null,"display_name":"cp_count_of_missing_fields__c"},"IS_COMMUNITY_ADVOCATE_OPP__C":{"type":"BOOLEAN","index":485,"name":"IS_COMMUNITY_ADVOCATE_OPP__C","comment":null,"display_name":"is_community_advocate_opp__c"},"TEMP_OPPORTUNITY_TYPE_ANALYSIS__C":{"type":"TEXT","index":486,"name":"TEMP_OPPORTUNITY_TYPE_ANALYSIS__C","comment":null,"display_name":"temp_opportunity_type_analysis__c"},"IQM_SUBMITTED_BY_ROLE__C":{"type":"TEXT","index":487,"name":"IQM_SUBMITTED_BY_ROLE__C","comment":null,"display_name":"iqm_submitted_by_role__c"},"IQM_SUBMITTED_BY_TITLE__C":{"type":"TEXT","index":488,"name":"IQM_SUBMITTED_BY_TITLE__C","comment":null,"display_name":"iqm_submitted_by_title__c"},"CREATED_BY_ROLE__C":{"type":"TEXT","index":489,"name":"CREATED_BY_ROLE__C","comment":null,"display_name":"created_by_role__c"},"CREATED_BY_TITLE__C":{"type":"TEXT","index":490,"name":"CREATED_BY_TITLE__C","comment":null,"display_name":"created_by_title__c"},"IQM_SUBMITTED_BY_USER__C":{"type":"TEXT","index":491,"name":"IQM_SUBMITTED_BY_USER__C","comment":null,"display_name":"iqm_submitted_by_user__c"},"IQM_SUBMITTED_BY_USER_NAME__C":{"type":"TEXT","index":492,"name":"IQM_SUBMITTED_BY_USER_NAME__C","comment":null,"display_name":"iqm_submitted_by_user_name__c"},"REVENUE_TYPE__C":{"type":"TEXT","index":493,"name":"REVENUE_TYPE__C","comment":null,"display_name":"revenue_type__c"},"CALCULATED_DISCOUNT__C":{"type":"FLOAT","index":494,"name":"CALCULATED_DISCOUNT__C","comment":null,"display_name":"calculated_discount__c"},"COMP_TOTAL_COMMISSION__C":{"type":"FLOAT","index":495,"name":"COMP_TOTAL_COMMISSION__C","comment":null,"display_name":"comp_total_commission__c"},"PARTNER_DISCOUNT__C":{"type":"FLOAT","index":496,"name":"PARTNER_DISCOUNT__C","comment":null,"display_name":"partner_discount__c"},"PRO_SERV_FROM_QUOTE__C":{"type":"FLOAT","index":497,"name":"PRO_SERV_FROM_QUOTE__C","comment":null,"display_name":"pro_serv_from_quote__c"},"INITIATIVE__C":{"type":"TEXT","index":498,"name":"INITIATIVE__C","comment":null,"display_name":"initiative__c"},"ESTIMATE_TOTAL_SEATS_AVAIL_AT_COMPANY__C":{"type":"FLOAT","index":499,"name":"ESTIMATE_TOTAL_SEATS_AVAIL_AT_COMPANY__C","comment":null,"display_name":"estimate_total_seats_avail_at_company__c"},"SOLUTION_ARCHITECT__C":{"type":"TEXT","index":500,"name":"SOLUTION_ARCHITECT__C","comment":null,"display_name":"solution_architect__c"},"COMP_PRO_SERV_VALUE__C":{"type":"FLOAT","index":501,"name":"COMP_PRO_SERV_VALUE__C","comment":null,"display_name":"comp_pro_serv_value__c"},"COMP_IACV_NET__C":{"type":"FLOAT","index":502,"name":"COMP_IACV_NET__C","comment":null,"display_name":"comp_iacv_net__c"},"COMP_Y2_IACV__C":{"type":"FLOAT","index":503,"name":"COMP_Y2_IACV__C","comment":null,"display_name":"comp_y2_iacv__c"},"COMP_CHANNEL_NEUTRAL__C":{"type":"FLOAT","index":504,"name":"COMP_CHANNEL_NEUTRAL__C","comment":null,"display_name":"comp_channel_neutral__c"},"COMP_IACV_GROSS__C":{"type":"FLOAT","index":505,"name":"COMP_IACV_GROSS__C","comment":null,"display_name":"comp_iacv_gross__c"},"PARTNER_REGISTERED__C":{"type":"TEXT","index":506,"name":"PARTNER_REGISTERED__C","comment":null,"display_name":"partner_registered__c"},"CV_DOC_LINK__C":{"type":"TEXT","index":507,"name":"CV_DOC_LINK__C","comment":null,"display_name":"cv_doc_link__c"},"NEXT_STEPS_OWNER__C":{"type":"TEXT","index":508,"name":"NEXT_STEPS_OWNER__C","comment":null,"display_name":"next_steps_owner__c"},"LAST_PRIMARY_QUOTE_STAMP__C":{"type":"TIMESTAMP_TZ","index":509,"name":"LAST_PRIMARY_QUOTE_STAMP__C","comment":null,"display_name":"last_primary_quote_stamp__c"},"LINK_TO_CUSTOM_PITCH_DECK__C":{"type":"TEXT","index":510,"name":"LINK_TO_CUSTOM_PITCH_DECK__C","comment":null,"display_name":"link_to_custom_pitch_deck__c"},"COVID_19_RISK_SCALE__C":{"type":"TEXT","index":511,"name":"COVID_19_RISK_SCALE__C","comment":null,"display_name":"covid_19_risk_scale__c"},"IMPARTNERPRM__NOTIFYPARTNER__C":{"type":"BOOLEAN","index":512,"name":"IMPARTNERPRM__NOTIFYPARTNER__C","comment":null,"display_name":"impartnerprm__notifypartner__c"},"IMPARTNERPRM__ISDEALREGISTRATION__C":{"type":"BOOLEAN","index":513,"name":"IMPARTNERPRM__ISDEALREGISTRATION__C","comment":null,"display_name":"impartnerprm__isdealregistration__c"},"PRE_COVID_IACV__C":{"type":"FLOAT","index":514,"name":"PRE_COVID_IACV__C","comment":null,"display_name":"pre_covid_iacv__c"},"COVID_COMMENT__C":{"type":"TEXT","index":515,"name":"COVID_COMMENT__C","comment":null,"display_name":"covid_comment__c"},"IMPARTNERPRM__PARTNERCONTACT__C":{"type":"TEXT","index":516,"name":"IMPARTNERPRM__PARTNERCONTACT__C","comment":null,"display_name":"impartnerprm__partnercontact__c"},"IMPARTNERPRM__PARTNERACCOUNT__C":{"type":"TEXT","index":517,"name":"IMPARTNERPRM__PARTNERACCOUNT__C","comment":null,"display_name":"impartnerprm__partneraccount__c"},"OPPORTUNITY_OWNER_TEAM__C":{"type":"TEXT","index":518,"name":"OPPORTUNITY_OWNER_TEAM__C","comment":null,"display_name":"opportunity_owner_team__c"},"PARTNERS_GO_TO_MARKET_ROUTE__C":{"type":"TEXT","index":519,"name":"PARTNERS_GO_TO_MARKET_ROUTE__C","comment":null,"display_name":"partners_go_to_market_route__c"},"DISTRIBUTOR__C":{"type":"TEXT","index":520,"name":"DISTRIBUTOR__C","comment":null,"display_name":"distributor__c"},"PARTNER_FULFILLMENT__C":{"type":"TEXT","index":521,"name":"PARTNER_FULFILLMENT__C","comment":null,"display_name":"partner_fulfillment__c"},"PARTNER_ASSISTED__C":{"type":"TEXT","index":522,"name":"PARTNER_ASSISTED__C","comment":null,"display_name":"partner_assisted__c"},"INCREMENTAL_IACV_3__C":{"type":"FLOAT","index":523,"name":"INCREMENTAL_IACV_3__C","comment":null,"display_name":"incremental_iacv_3__c"},"VISION_OPP__C":{"type":"TEXT","index":524,"name":"VISION_OPP__C","comment":null,"display_name":"vision_opp__c"},"RELATED_QUOTE_TERM__C":{"type":"FLOAT","index":525,"name":"RELATED_QUOTE_TERM__C","comment":null,"display_name":"related_quote_term__c"},"PIO__C":{"type":"BOOLEAN","index":526,"name":"PIO__C","comment":null,"display_name":"pio__c"},"BIZIBLE_LINEAR_COUNT__C":{"type":"FLOAT","index":527,"name":"BIZIBLE_LINEAR_COUNT__C","comment":null,"display_name":"bizible_linear_count__c"},"CLOSE_DATE_FY_QTR__C":{"type":"TEXT","index":528,"name":"CLOSE_DATE_FY_QTR__C","comment":null,"display_name":"close_date_fy_qtr__c"},"ONE_TIME_FEE_TOTAL_FROM_QUOTE__C":{"type":"FLOAT","index":529,"name":"ONE_TIME_FEE_TOTAL_FROM_QUOTE__C","comment":null,"display_name":"one_time_fee_total_from_quote__c"},"CHANNEL_DATA_REVIEW_DATE__C":{"type":"TIMESTAMP_TZ","index":530,"name":"CHANNEL_DATA_REVIEW_DATE__C","comment":null,"display_name":"channel_data_review_date__c"},"ARR_NET__C":{"type":"FLOAT","index":531,"name":"ARR_NET__C","comment":null,"display_name":"arr_net__c"},"ARR_FROM_QUOTE__C":{"type":"FLOAT","index":532,"name":"ARR_FROM_QUOTE__C","comment":null,"display_name":"arr_from_quote__c"},"IMPARTNERPRM__PARTNEROPPORTUNITYACCEPTANCE__C":{"type":"TEXT","index":533,"name":"IMPARTNERPRM__PARTNEROPPORTUNITYACCEPTANCE__C","comment":null,"display_name":"impartnerprm__partneropportunityacceptance__c"},"SDR_PIPELINE_CONTRIBUTION__C":{"type":"FLOAT","index":534,"name":"SDR_PIPELINE_CONTRIBUTION__C","comment":null,"display_name":"sdr_pipeline_contribution__c"},"CLOSE_PLAN_CONVERSATION_COMPLETED__C":{"type":"BOOLEAN","index":535,"name":"CLOSE_PLAN_CONVERSATION_COMPLETED__C","comment":null,"display_name":"close_plan_conversation_completed__c"},"DAYS_TO_SAO__C":{"type":"FLOAT","index":536,"name":"DAYS_TO_SAO__C","comment":null,"display_name":"days_to_sao__c"},"PRIMARY_SA_TEAM__C":{"type":"TEXT","index":537,"name":"PRIMARY_SA_TEAM__C","comment":null,"display_name":"primary_sa_team__c"},"Y2_INCREMENTAL_ACV_OVERRIDE__C":{"type":"FLOAT","index":538,"name":"Y2_INCREMENTAL_ACV_OVERRIDE__C","comment":null,"display_name":"y2_incremental_acv_override__c"},"ORDER_TYPE_LIVE__C":{"type":"TEXT","index":539,"name":"ORDER_TYPE_LIVE__C","comment":null,"display_name":"order_type_live__c"},"ORDER_TYPE_TEST__C":{"type":"TEXT","index":540,"name":"ORDER_TYPE_TEST__C","comment":null,"display_name":"order_type_test__c"},"DAYS_IN_SAO__C":{"type":"FLOAT","index":541,"name":"DAYS_IN_SAO__C","comment":null,"display_name":"days_in_sao__c"},"IS_SAO__C":{"type":"BOOLEAN","index":542,"name":"IS_SAO__C","comment":null,"display_name":"is_sao__c"},"Y2_COMP_CHANNEL_NEUTRAL__C":{"type":"FLOAT","index":543,"name":"Y2_COMP_CHANNEL_NEUTRAL__C","comment":null,"display_name":"y2_comp_channel_neutral__c"},"ADMIN_ESTIMATED_IACV__C":{"type":"FLOAT","index":544,"name":"ADMIN_ESTIMATED_IACV__C","comment":null,"display_name":"admin_estimated_iacv__c"},"ADMIN_MRR_BACKFILL__C":{"type":"FLOAT","index":545,"name":"ADMIN_MRR_BACKFILL__C","comment":null,"display_name":"admin_mrr_backfill__c"},"ADMIN_DEAL_DATA_OK__C":{"type":"BOOLEAN","index":546,"name":"ADMIN_DEAL_DATA_OK__C","comment":null,"display_name":"admin_deal_data_ok__c"},"ADMIN_TRUE_UP_AMOUNT__C":{"type":"FLOAT","index":547,"name":"ADMIN_TRUE_UP_AMOUNT__C","comment":null,"display_name":"admin_true_up_amount__c"},"MKTO_SI__SALES_INSIGHT__C":{"type":"TEXT","index":548,"name":"MKTO_SI__SALES_INSIGHT__C","comment":null,"display_name":"mkto_si__sales_insight__c"},"FM_PARTNER__C":{"type":"TEXT","index":549,"name":"FM_PARTNER__C","comment":null,"display_name":"fm_partner__c"},"REGISTRATION_FROM_PORTAL__C":{"type":"BOOLEAN","index":550,"name":"REGISTRATION_FROM_PORTAL__C","comment":null,"display_name":"registration_from_portal__c"},"DR_PARTNER_DEAL_TYPE__C":{"type":"TEXT","index":551,"name":"DR_PARTNER_DEAL_TYPE__C","comment":null,"display_name":"dr_partner_deal_type__c"},"DR_PARTNER_ENGAGEMENT__C":{"type":"TEXT","index":552,"name":"DR_PARTNER_ENGAGEMENT__C","comment":null,"display_name":"dr_partner_engagement__c"},"DEAL_PATH__C":{"type":"TEXT","index":553,"name":"DEAL_PATH__C","comment":null,"display_name":"deal_path__c"},"COMMISSIONABLE__C":{"type":"BOOLEAN","index":554,"name":"COMMISSIONABLE__C","comment":null,"display_name":"commissionable__c"},"ISR__C":{"type":"TEXT","index":555,"name":"ISR__C","comment":null,"display_name":"isr__c"},"PARTNER_DISCOUNT_OVERRIDE__C":{"type":"FLOAT","index":556,"name":"PARTNER_DISCOUNT_OVERRIDE__C","comment":null,"display_name":"partner_discount_override__c"},"FULFILLMENT_PARTNER__C":{"type":"TEXT","index":557,"name":"FULFILLMENT_PARTNER__C","comment":null,"display_name":"fulfillment_partner__c"},"RENEWAL_RISK_FORECAST__C":{"type":"TEXT","index":558,"name":"RENEWAL_RISK_FORECAST__C","comment":null,"display_name":"renewal_risk_forecast__c"},"INFLUENCE_PARTNER__C":{"type":"TEXT","index":559,"name":"INFLUENCE_PARTNER__C","comment":null,"display_name":"influence_partner__c"},"NEW_LOGO_TARGET_TYPE__C":{"type":"TEXT","index":560,"name":"NEW_LOGO_TARGET_TYPE__C","comment":null,"display_name":"new_logo_target_type__c"},"ARR_NET_OVERRIDE__C":{"type":"FLOAT","index":561,"name":"ARR_NET_OVERRIDE__C","comment":null,"display_name":"arr_net_override__c"},"PLATFORM_PARTNER__C":{"type":"TEXT","index":562,"name":"PLATFORM_PARTNER__C","comment":null,"display_name":"platform_partner__c"},"SEEN_GITLAB_AD__C":{"type":"TEXT","index":563,"name":"SEEN_GITLAB_AD__C","comment":null,"display_name":"seen_gitlab_ad__c"},"START_DATE_FY_QTR__C":{"type":"TEXT","index":564,"name":"START_DATE_FY_QTR__C","comment":null,"display_name":"start_date_fy_qtr__c"},"SA_VALIDATED_TECH_EVALUATION_START_DATE__C":{"type":"TIMESTAMP_TZ","index":565,"name":"SA_VALIDATED_TECH_EVALUATION_START_DATE__C","comment":null,"display_name":"sa_validated_tech_evaluation_start_date__c"},"SA_VALIDATED_TECH_EVALUATION_END_DATE__C":{"type":"TIMESTAMP_TZ","index":566,"name":"SA_VALIDATED_TECH_EVALUATION_END_DATE__C","comment":null,"display_name":"sa_validated_tech_evaluation_end_date__c"},"SA_VALIDATED_TECH_EVALUATION_CLOSE_STATU__C":{"type":"TEXT","index":567,"name":"SA_VALIDATED_TECH_EVALUATION_CLOSE_STATU__C","comment":null,"display_name":"sa_validated_tech_evaluation_close_statu__c"},"TECHNICAL_CLOSE_PLAN__C":{"type":"TEXT","index":568,"name":"TECHNICAL_CLOSE_PLAN__C","comment":null,"display_name":"technical_close_plan__c"},"PARTNER_DISCOUNT_CALC__C":{"type":"FLOAT","index":569,"name":"PARTNER_DISCOUNT_CALC__C","comment":null,"display_name":"partner_discount_calc__c"},"RELATED_QUOTE_CALCULATED_DISCOUNT__C":{"type":"FLOAT","index":570,"name":"RELATED_QUOTE_CALCULATED_DISCOUNT__C","comment":null,"display_name":"related_quote_calculated_discount__c"},"NET_ARR_VS_NET_IACV__C":{"type":"FLOAT","index":571,"name":"NET_ARR_VS_NET_IACV__C","comment":null,"display_name":"net_arr_vs_net_iacv__c"},"OPPORTUNITY_CATEGORY__C":{"type":"TEXT","index":572,"name":"OPPORTUNITY_CATEGORY__C","comment":null,"display_name":"opportunity_category__c"},"PAYMENT_SCHEDULE__C":{"type":"TEXT","index":573,"name":"PAYMENT_SCHEDULE__C","comment":null,"display_name":"payment_schedule__c"},"LOST_TIER_MOVE_NOTES__C":{"type":"TEXT","index":574,"name":"LOST_TIER_MOVE_NOTES__C","comment":null,"display_name":"lost_tier_move_notes__c"},"LOST_TIER_MOVE__C":{"type":"TEXT","index":575,"name":"LOST_TIER_MOVE__C","comment":null,"display_name":"lost_tier_move__c"},"X8_UNQUALIFIED_DATE__C":{"type":"TIMESTAMP_TZ","index":576,"name":"X8_UNQUALIFIED_DATE__C","comment":null,"display_name":"x8_unqualified_date__c"},"RISK_TYPE__C":{"type":"TEXT","index":577,"name":"RISK_TYPE__C","comment":null,"display_name":"risk_type__c"},"TAM_NOTES__C":{"type":"TEXT","index":578,"name":"TAM_NOTES__C","comment":null,"display_name":"tam_notes__c"},"VARTOPIADRS__REGISTRATION_EXTENDED__C":{"type":"BOOLEAN","index":579,"name":"VARTOPIADRS__REGISTRATION_EXTENDED__C","comment":null,"display_name":"vartopiadrs__registration_extended__c"},"OPPORTUNITY_HEALTH__C":{"type":"TEXT","index":580,"name":"OPPORTUNITY_HEALTH__C","comment":null,"display_name":"opportunity_health__c"},"VARTOPIADRS__UPDATES_RECEIVED__C":{"type":"FLOAT","index":581,"name":"VARTOPIADRS__UPDATES_RECEIVED__C","comment":null,"display_name":"vartopiadrs__updates_received__c"},"VARTOPIADRS__SYNC_FROM_REG__C":{"type":"BOOLEAN","index":582,"name":"VARTOPIADRS__SYNC_FROM_REG__C","comment":null,"display_name":"vartopiadrs__sync_from_reg__c"},"VARTOPIADRS__CREATED_FROM_REGISTRATION__C":{"type":"BOOLEAN","index":583,"name":"VARTOPIADRS__CREATED_FROM_REGISTRATION__C","comment":null,"display_name":"vartopiadrs__created_from_registration__c"},"RISK_REASONS__C":{"type":"TEXT","index":584,"name":"RISK_REASONS__C","comment":null,"display_name":"risk_reasons__c"},"LATEST_SOLD_TO_CONTACT_EMAIL__C":{"type":"TEXT","index":585,"name":"LATEST_SOLD_TO_CONTACT_EMAIL__C","comment":null,"display_name":"latest_sold_to_contact_email__c"},"LATEST_SOLD_TO_CONTACT_NAME__C":{"type":"TEXT","index":586,"name":"LATEST_SOLD_TO_CONTACT_NAME__C","comment":null,"display_name":"latest_sold_to_contact_name__c"},"VARTOPIADRS__DR_EXPIRATION_DATE__C":{"type":"TIMESTAMP_TZ","index":587,"name":"VARTOPIADRS__DR_EXPIRATION_DATE__C","comment":null,"display_name":"vartopiadrs__dr_expiration_date__c"},"VARTOPIADRS__PRIMARY_REGISTRATION__C":{"type":"TEXT","index":588,"name":"VARTOPIADRS__PRIMARY_REGISTRATION__C","comment":null,"display_name":"vartopiadrs__primary_registration__c"},"VARTOPIADRS__DR_DEAL_REG_ID__C":{"type":"TEXT","index":589,"name":"VARTOPIADRS__DR_DEAL_REG_ID__C","comment":null,"display_name":"vartopiadrs__dr_deal_reg_id__c"},"VARTOPIADRS__DR_STATUS1__C":{"type":"TEXT","index":590,"name":"VARTOPIADRS__DR_STATUS1__C","comment":null,"display_name":"vartopiadrs__dr_status1__c"},"OPPORTUNITY_TO_DECOMMISSION__C":{"type":"TEXT","index":591,"name":"OPPORTUNITY_TO_DECOMMISSION__C","comment":null,"display_name":"opportunity_to_decommission__c"},"VARTOPIADRS__PARTNER_SALES_STAGE__C":{"type":"TEXT","index":592,"name":"VARTOPIADRS__PARTNER_SALES_STAGE__C","comment":null,"display_name":"vartopiadrs__partner_sales_stage__c"},"VARTOPIADRS__DR_APPROVAL_ID__C":{"type":"TEXT","index":593,"name":"VARTOPIADRS__DR_APPROVAL_ID__C","comment":null,"display_name":"vartopiadrs__dr_approval_id__c"},"VARTOPIADRS__DR_APPROVAL_DATE__C":{"type":"TIMESTAMP_TZ","index":594,"name":"VARTOPIADRS__DR_APPROVAL_DATE__C","comment":null,"display_name":"vartopiadrs__dr_approval_date__c"},"ARR_REVIEW_REQUIRED__C":{"type":"BOOLEAN","index":595,"name":"ARR_REVIEW_REQUIRED__C","comment":null,"display_name":"arr_review_required__c"},"IMPARTNERPRM__PARTNERLASTMODIFIEDDATE__C":{"type":"TIMESTAMP_TZ","index":596,"name":"IMPARTNERPRM__PARTNERLASTMODIFIEDDATE__C","comment":null,"display_name":"impartnerprm__partnerlastmodifieddate__c"},"LINEAR_WEIGHTED_IACV__C":{"type":"FLOAT","index":597,"name":"LINEAR_WEIGHTED_IACV__C","comment":null,"display_name":"linear_weighted_iacv__c"},"INCENTIVE_DATE__C":{"type":"TIMESTAMP_TZ","index":598,"name":"INCENTIVE_DATE__C","comment":null,"display_name":"incentive_date__c"},"FM_MANAGER_NUMBER_OF_REVIEWS__C":{"type":"FLOAT","index":599,"name":"FM_MANAGER_NUMBER_OF_REVIEWS__C","comment":null,"display_name":"fm_manager_number_of_reviews__c"},"FM_FIRST_MANAGER_REVIEW_DATE__C":{"type":"TIMESTAMP_TZ","index":600,"name":"FM_FIRST_MANAGER_REVIEW_DATE__C","comment":null,"display_name":"fm_first_manager_review_date__c"},"FM_LAST_MANAGER_REVIEW_DATE__C":{"type":"TIMESTAMP_TZ","index":601,"name":"FM_LAST_MANAGER_REVIEW_DATE__C","comment":null,"display_name":"fm_last_manager_review_date__c"},"FM_REVIEW_NOTES__C":{"type":"TEXT","index":602,"name":"FM_REVIEW_NOTES__C","comment":null,"display_name":"fm_review_notes__c"},"FM_ARTICULATED_CURRENT_SITUATION__C":{"type":"FLOAT","index":603,"name":"FM_ARTICULATED_CURRENT_SITUATION__C","comment":null,"display_name":"fm_articulated_current_situation__c"},"FM_CAPTURED_WHY_NOW__C":{"type":"FLOAT","index":604,"name":"FM_CAPTURED_WHY_NOW__C","comment":null,"display_name":"fm_captured_why_now__c"},"FM_CAPTURED_METRICS__C":{"type":"FLOAT","index":605,"name":"FM_CAPTURED_METRICS__C","comment":null,"display_name":"fm_captured_metrics__c"},"FM_SALES_OBSERVATION_FEEDBACK__C":{"type":"TEXT","index":606,"name":"FM_SALES_OBSERVATION_FEEDBACK__C","comment":null,"display_name":"fm_sales_observation_feedback__c"},"FM_AGENDA_REVIEWED__C":{"type":"FLOAT","index":607,"name":"FM_AGENDA_REVIEWED__C","comment":null,"display_name":"fm_agenda_reviewed__c"},"FM_CAPTURED_NEXT_STEPS__C":{"type":"FLOAT","index":608,"name":"FM_CAPTURED_NEXT_STEPS__C","comment":null,"display_name":"fm_captured_next_steps__c"},"COMP_IACV_GROWTH__C":{"type":"FLOAT","index":609,"name":"COMP_IACV_GROWTH__C","comment":null,"display_name":"comp_iacv_growth__c"},"VARTOPIADRS__LAST_REQUEST_FOR_UPDATE__C":{"type":"TIMESTAMP_TZ","index":610,"name":"VARTOPIADRS__LAST_REQUEST_FOR_UPDATE__C","comment":null,"display_name":"vartopiadrs__last_request_for_update__c"},"VARTOPIADRS__MOST_RECENT_PARTNER_NOTE__C":{"type":"TEXT","index":611,"name":"VARTOPIADRS__MOST_RECENT_PARTNER_NOTE__C","comment":null,"display_name":"vartopiadrs__most_recent_partner_note__c"},"VARTOPIADRS__LAST_UPDATE_PROVIDED_BY_PARTNER__C":{"type":"TIMESTAMP_TZ","index":612,"name":"VARTOPIADRS__LAST_UPDATE_PROVIDED_BY_PARTNER__C","comment":null,"display_name":"vartopiadrs__last_update_provided_by_partner__c"},"GATRACKID__C":{"type":"TEXT","index":613,"name":"GATRACKID__C","comment":null,"display_name":"gatrackid__c"},"GACLIENTID__C":{"type":"TEXT","index":614,"name":"GACLIENTID__C","comment":null,"display_name":"gaclientid__c"},"VARTOPIADRS__EXTENSION_STATUS__C":{"type":"TEXT","index":615,"name":"VARTOPIADRS__EXTENSION_STATUS__C","comment":null,"display_name":"vartopiadrs__extension_status__c"},"ARR_STATUS__C":{"type":"TEXT","index":616,"name":"ARR_STATUS__C","comment":null,"display_name":"arr_status__c"},"ARR_START_DATE__C":{"type":"TIMESTAMP_TZ","index":617,"name":"ARR_START_DATE__C","comment":null,"display_name":"arr_start_date__c"},"WIP_ARR__C":{"type":"FLOAT","index":618,"name":"WIP_ARR__C","comment":null,"display_name":"wip_arr__c"},"RECURRING_AMOUNT__C":{"type":"FLOAT","index":619,"name":"RECURRING_AMOUNT__C","comment":null,"display_name":"recurring_amount__c"},"ARR_END_DATE__C":{"type":"TIMESTAMP_TZ","index":620,"name":"ARR_END_DATE__C","comment":null,"display_name":"arr_end_date__c"},"OTHER_NON_RECURRING_AMOUNT__C":{"type":"FLOAT","index":621,"name":"OTHER_NON_RECURRING_AMOUNT__C","comment":null,"display_name":"other_non_recurring_amount__c"},"PROSERV_AMOUNT__C":{"type":"FLOAT","index":622,"name":"PROSERV_AMOUNT__C","comment":null,"display_name":"proserv_amount__c"},"WIP_ARR_BASIS__C":{"type":"FLOAT","index":623,"name":"WIP_ARR_BASIS__C","comment":null,"display_name":"wip_arr_basis__c"},"COMP_CHANNEL_NEUTRAL_TEST__C":{"type":"FLOAT","index":624,"name":"COMP_CHANNEL_NEUTRAL_TEST__C","comment":null,"display_name":"comp_channel_neutral_test__c"},"PARTNER_DISCOUNT_CALC_TEST__C":{"type":"FLOAT","index":625,"name":"PARTNER_DISCOUNT_CALC_TEST__C","comment":null,"display_name":"partner_discount_calc_test__c"},"CLOSED_WON_REASON__C":{"type":"TEXT","index":626,"name":"CLOSED_WON_REASON__C","comment":null,"display_name":"closed_won_reason__c"},"SALES_LAST_ACTIVITY_DATE__C":{"type":"TIMESTAMP_TZ","index":627,"name":"SALES_LAST_ACTIVITY_DATE__C","comment":null,"display_name":"sales_last_activity_date__c"},"PROFESSIONAL_SERVICES_OVERRIDE__C":{"type":"FLOAT","index":628,"name":"PROFESSIONAL_SERVICES_OVERRIDE__C","comment":null,"display_name":"professional_services_override__c"},"WIP_ARR_DEAL_LENGTH__C":{"type":"FLOAT","index":629,"name":"WIP_ARR_DEAL_LENGTH__C","comment":null,"display_name":"wip_arr_deal_length__c"},"SA_VALIDATED_TECH_EVAL_CLOSE_DETAILS__C":{"type":"TEXT","index":630,"name":"SA_VALIDATED_TECH_EVAL_CLOSE_DETAILS__C","comment":null,"display_name":"sa_validated_tech_eval_close_details__c"},"PO_REQUIRED_QUOTE_BILLING_ACCOUNT__C":{"type":"TEXT","index":631,"name":"PO_REQUIRED_QUOTE_BILLING_ACCOUNT__C","comment":null,"display_name":"po_required_quote_billing_account__c"},"NET_ARR_2__C":{"type":"FLOAT","index":632,"name":"NET_ARR_2__C","comment":null,"display_name":"net_arr_2__c"},"CUSTOMER_SUBSCRIPTION__C":{"type":"TEXT","index":633,"name":"CUSTOMER_SUBSCRIPTION__C","comment":null,"display_name":"customer_subscription__c"},"STAMPED_ACCOUNT_OWNER__C":{"type":"TEXT","index":634,"name":"STAMPED_ACCOUNT_OWNER__C","comment":null,"display_name":"stamped_account_owner__c"},"STAMPED_USER_AREA__C":{"type":"TEXT","index":635,"name":"STAMPED_USER_AREA__C","comment":null,"display_name":"stamped_user_area__c"},"STAMPED_USER_GEO__C":{"type":"TEXT","index":636,"name":"STAMPED_USER_GEO__C","comment":null,"display_name":"stamped_user_geo__c"},"STAMPED_USER_REGION__C":{"type":"TEXT","index":637,"name":"STAMPED_USER_REGION__C","comment":null,"display_name":"stamped_user_region__c"},"TECHNICAL_ACCOUNT_MANAGER__C":{"type":"TEXT","index":638,"name":"TECHNICAL_ACCOUNT_MANAGER__C","comment":null,"display_name":"technical_account_manager__c"},"ADMIN_ARR_TESTER__C":{"type":"FLOAT","index":639,"name":"ADMIN_ARR_TESTER__C","comment":null,"display_name":"admin_arr_tester__c"},"DEAL_RATIO__C":{"type":"FLOAT","index":640,"name":"DEAL_RATIO__C","comment":null,"display_name":"deal_ratio__c"},"WIP_PRORATION_DELTA__C":{"type":"FLOAT","index":641,"name":"WIP_PRORATION_DELTA__C","comment":null,"display_name":"wip_proration_delta__c"},"PARTNER_TRACK__C":{"type":"TEXT","index":642,"name":"PARTNER_TRACK__C","comment":null,"display_name":"partner_track__c"},"ARR_BASIS__C":{"type":"FLOAT","index":643,"name":"ARR_BASIS__C","comment":null,"display_name":"arr_basis__c"},"PROCESS_BUILDER_BYPASS__C":{"type":"BOOLEAN","index":644,"name":"PROCESS_BUILDER_BYPASS__C","comment":null,"display_name":"process_builder_bypass__c"},"STAMPED_ARR_BASIS__C":{"type":"FLOAT","index":645,"name":"STAMPED_ARR_BASIS__C","comment":null,"display_name":"stamped_arr_basis__c"},"ESTIMATED_NET_ARR__C":{"type":"FLOAT","index":646,"name":"ESTIMATED_NET_ARR__C","comment":null,"display_name":"estimated_net_arr__c"},"HOLD_OVER_EXPIRATION_DATE__C":{"type":"TIMESTAMP_TZ","index":647,"name":"HOLD_OVER_EXPIRATION_DATE__C","comment":null,"display_name":"hold_over_expiration_date__c"},"INCENTIVE_CLOSE_SAME_DATE__C":{"type":"TEXT","index":648,"name":"INCENTIVE_CLOSE_SAME_DATE__C","comment":null,"display_name":"incentive_close_same_date__c"},"SAO_USER_REGION__C":{"type":"TEXT","index":649,"name":"SAO_USER_REGION__C","comment":null,"display_name":"sao_user_region__c"},"SAO_USER_SEGMENT__C":{"type":"TEXT","index":650,"name":"SAO_USER_SEGMENT__C","comment":null,"display_name":"sao_user_segment__c"},"STAMPED_OPPORTUNITY_OWNER__C":{"type":"TEXT","index":651,"name":"STAMPED_OPPORTUNITY_OWNER__C","comment":null,"display_name":"stamped_opportunity_owner__c"},"SAO_USER_GEO__C":{"type":"TEXT","index":652,"name":"SAO_USER_GEO__C","comment":null,"display_name":"sao_user_geo__c"},"SAO_ACCOUNT_OWNER__C":{"type":"TEXT","index":653,"name":"SAO_ACCOUNT_OWNER__C","comment":null,"display_name":"sao_account_owner__c"},"SAO_USER_AREA__C":{"type":"TEXT","index":654,"name":"SAO_USER_AREA__C","comment":null,"display_name":"sao_user_area__c"},"SAO_OPPORTUNITY_OWNER__C":{"type":"TEXT","index":655,"name":"SAO_OPPORTUNITY_OWNER__C","comment":null,"display_name":"sao_opportunity_owner__c"},"ANNUALIZED_CO_TERM_GAIN__C":{"type":"FLOAT","index":656,"name":"ANNUALIZED_CO_TERM_GAIN__C","comment":null,"display_name":"annualized_co_term_gain__c"},"ARR_OUT_YEARS_SUBSCRIPTION_BOOKINGS__C":{"type":"FLOAT","index":657,"name":"ARR_OUT_YEARS_SUBSCRIPTION_BOOKINGS__C","comment":null,"display_name":"arr_out_years_subscription_bookings__c"},"ORDER_TYPE_OVERRIDE__C":{"type":"TEXT","index":658,"name":"ORDER_TYPE_OVERRIDE__C","comment":null,"display_name":"order_type_override__c"},"HOLD_OVER_NEXT_APPROVED_OWNER__C":{"type":"TEXT","index":659,"name":"HOLD_OVER_NEXT_APPROVED_OWNER__C","comment":null,"display_name":"hold_over_next_approved_owner__c"},"NUMOFDAYS_QUOTE_MINUS_CLOSE__C":{"type":"FLOAT","index":660,"name":"NUMOFDAYS_QUOTE_MINUS_CLOSE__C","comment":null,"display_name":"numofdays_quote_minus_close__c"},"OPPORTUNITY_OWNER_EMPLOYEE_NUMBER__C":{"type":"TEXT","index":661,"name":"OPPORTUNITY_OWNER_EMPLOYEE_NUMBER__C","comment":null,"display_name":"opportunity_owner_employee_number__c"},"COMP_CHANNEL_NEUTRAL_ARR__C":{"type":"FLOAT","index":662,"name":"COMP_CHANNEL_NEUTRAL_ARR__C","comment":null,"display_name":"comp_channel_neutral_arr__c"},"COMP_NET_ARR_GROSS__C":{"type":"FLOAT","index":663,"name":"COMP_NET_ARR_GROSS__C","comment":null,"display_name":"comp_net_arr_gross__c"},"COMP_NET_ARR__C":{"type":"FLOAT","index":664,"name":"COMP_NET_ARR__C","comment":null,"display_name":"comp_net_arr__c"},"COMP_OTHER_NON_RECURRING_AMOUNT__C":{"type":"FLOAT","index":665,"name":"COMP_OTHER_NON_RECURRING_AMOUNT__C","comment":null,"display_name":"comp_other_non_recurring_amount__c"},"COMP_RECURRING_AMOUNT__C":{"type":"FLOAT","index":666,"name":"COMP_RECURRING_AMOUNT__C","comment":null,"display_name":"comp_recurring_amount__c"},"COMP_TRUE_UP_AMOUNT__C":{"type":"FLOAT","index":667,"name":"COMP_TRUE_UP_AMOUNT__C","comment":null,"display_name":"comp_true_up_amount__c"},"NEW_LOGO_ELIGIBLE__C":{"type":"BOOLEAN","index":668,"name":"NEW_LOGO_ELIGIBLE__C","comment":null,"display_name":"new_logo_eligible__c"},"ADMIN_ARR_WORKFLOW_CHECK__C":{"type":"BOOLEAN","index":669,"name":"ADMIN_ARR_WORKFLOW_CHECK__C","comment":null,"display_name":"admin_arr_workflow_check__c"},"WON_NET_ARR__C":{"type":"FLOAT","index":670,"name":"WON_NET_ARR__C","comment":null,"display_name":"won_net_arr__c"},"COMP_NET_ARR_GROWTH__C":{"type":"FLOAT","index":671,"name":"COMP_NET_ARR_GROWTH__C","comment":null,"display_name":"comp_net_arr_growth__c"},"ADMIN_ANNUALIZED_CO_TERM_GAIN_OVERRIDE__C":{"type":"FLOAT","index":672,"name":"ADMIN_ANNUALIZED_CO_TERM_GAIN_OVERRIDE__C","comment":null,"display_name":"admin_annualized_co_term_gain_override__c"},"CLOSED_WON_ALERT_SENT__C":{"type":"BOOLEAN","index":673,"name":"CLOSED_WON_ALERT_SENT__C","comment":null,"display_name":"closed_won_alert_sent__c"},"SALES_SEGMENT_CHANGED__C":{"type":"BOOLEAN","index":674,"name":"SALES_SEGMENT_CHANGED__C","comment":null,"display_name":"sales_segment_changed__c"},"LINEAR_WEIGHTED_NET_ARR__C":{"type":"FLOAT","index":675,"name":"LINEAR_WEIGHTED_NET_ARR__C","comment":null,"display_name":"linear_weighted_net_arr__c"},"ISR_OVERRIDE__C":{"type":"BOOLEAN","index":676,"name":"ISR_OVERRIDE__C","comment":null,"display_name":"isr_override__c"},"SQS_OVERRIDE__C":{"type":"TEXT","index":677,"name":"SQS_OVERRIDE__C","comment":null,"display_name":"sqs_override__c"},"GCP_CREDITS_APPROVAL_STATUS__C":{"type":"TEXT","index":678,"name":"GCP_CREDITS_APPROVAL_STATUS__C","comment":null,"display_name":"gcp_credits_approval_status__c"},"GCP_CREDITS__C":{"type":"FLOAT","index":679,"name":"GCP_CREDITS__C","comment":null,"display_name":"gcp_credits__c"},"CUSTOMER_OPEN_TO_BEING_A_REFERENCE__C":{"type":"TEXT","index":680,"name":"CUSTOMER_OPEN_TO_BEING_A_REFERENCE__C","comment":null,"display_name":"customer_open_to_being_a_reference__c"},"ENGAGED_WITH_THE_GCP_TEAM_ALREADY__C":{"type":"TEXT","index":681,"name":"ENGAGED_WITH_THE_GCP_TEAM_ALREADY__C","comment":null,"display_name":"engaged_with_the_gcp_team_already__c"},"LOCK__C":{"type":"BOOLEAN","index":682,"name":"LOCK__C","comment":null,"display_name":"lock__c"},"DEAL_DESK_REJECTION_REASONS__C":{"type":"TEXT","index":683,"name":"DEAL_DESK_REJECTION_REASONS__C","comment":null,"display_name":"deal_desk_rejection_reasons__c"},"BILLING_REJECTION_REASONS__C":{"type":"TEXT","index":684,"name":"BILLING_REJECTION_REASONS__C","comment":null,"display_name":"billing_rejection_reasons__c"},"REFUND_OPP_SOURCE__C":{"type":"TEXT","index":685,"name":"REFUND_OPP_SOURCE__C","comment":null,"display_name":"refund_opp_source__c"},"PROSERV_AMOUNT_OVERRIDE__C":{"type":"FLOAT","index":686,"name":"PROSERV_AMOUNT_OVERRIDE__C","comment":null,"display_name":"proserv_amount_override__c"},"TRUE_UP_AMOUNT_OVERRIDE__C":{"type":"FLOAT","index":687,"name":"TRUE_UP_AMOUNT_OVERRIDE__C","comment":null,"display_name":"true_up_amount_override__c"},"RECURRING_AMOUNT_OVERRIDE__C":{"type":"FLOAT","index":688,"name":"RECURRING_AMOUNT_OVERRIDE__C","comment":null,"display_name":"recurring_amount_override__c"},"OTHER_NON_RECURRING_AMOUNT_OVERRIDE__C":{"type":"FLOAT","index":689,"name":"OTHER_NON_RECURRING_AMOUNT_OVERRIDE__C","comment":null,"display_name":"other_non_recurring_amount_override__c"},"OVERRIDE_SQS__C":{"type":"BOOLEAN","index":690,"name":"OVERRIDE_SQS__C","comment":null,"display_name":"override_sqs__c"},"ARR_BASIS_CLARI_USE__C":{"type":"FLOAT","index":691,"name":"ARR_BASIS_CLARI_USE__C","comment":null,"display_name":"arr_basis_clari_use__c"},"FISCAL_QUARTER_DAY__C":{"type":"FLOAT","index":692,"name":"FISCAL_QUARTER_DAY__C","comment":null,"display_name":"fiscal_quarter_day__c"},"ARR_REVIEW_DATE__C":{"type":"TIMESTAMP_TZ","index":693,"name":"ARR_REVIEW_DATE__C","comment":null,"display_name":"arr_review_date__c"},"PROBABLY_WEB_DIRECT__C":{"type":"BOOLEAN","index":694,"name":"PROBABLY_WEB_DIRECT__C","comment":null,"display_name":"probably_web_direct__c"},"OPPORTUNITY_PREVIOUSLY_REJECTED__C":{"type":"BOOLEAN","index":695,"name":"OPPORTUNITY_PREVIOUSLY_REJECTED__C","comment":null,"display_name":"opportunity_previously_rejected__c"},"NEW_LOGO_COUNT__C":{"type":"FLOAT","index":696,"name":"NEW_LOGO_COUNT__C","comment":null,"display_name":"new_logo_count__c"},"PS_OPPORTUNITY__C":{"type":"TEXT","index":697,"name":"PS_OPPORTUNITY__C","comment":null,"display_name":"ps_opportunity__c"},"ENGAGEMENT_MANAGER__C":{"type":"TEXT","index":698,"name":"ENGAGEMENT_MANAGER__C","comment":null,"display_name":"engagement_manager__c"},"EM_CONFIDENCE__C":{"type":"TEXT","index":699,"name":"EM_CONFIDENCE__C","comment":null,"display_name":"em_confidence__c"},"SCOPING_ISSUE_LINK__C":{"type":"TEXT","index":700,"name":"SCOPING_ISSUE_LINK__C","comment":null,"display_name":"scoping_issue_link__c"},"EM_CONFIDENCE_RATIONALE__C":{"type":"TEXT","index":701,"name":"EM_CONFIDENCE_RATIONALE__C","comment":null,"display_name":"em_confidence_rationale__c"},"ADMIN_TYPE_MISMATCH__C":{"type":"BOOLEAN","index":702,"name":"ADMIN_TYPE_MISMATCH__C","comment":null,"display_name":"admin_type_mismatch__c"},"WEB_DIRECT_TRUE_UP_AMOUNT__C":{"type":"FLOAT","index":703,"name":"WEB_DIRECT_TRUE_UP_AMOUNT__C","comment":null,"display_name":"web_direct_true_up_amount__c"},"WEB_DIRECT_RECURRING_AMOUNT__C":{"type":"FLOAT","index":704,"name":"WEB_DIRECT_RECURRING_AMOUNT__C","comment":null,"display_name":"web_direct_recurring_amount__c"},"WEB_DIRECT_PROSERV_AMOUNT__C":{"type":"FLOAT","index":705,"name":"WEB_DIRECT_PROSERV_AMOUNT__C","comment":null,"display_name":"web_direct_proserv_amount__c"},"WEB_DIRECT_ARR__C":{"type":"FLOAT","index":706,"name":"WEB_DIRECT_ARR__C","comment":null,"display_name":"web_direct_arr__c"},"WEB_DIRECT_DATA_TRANSFER_DATE__C":{"type":"TIMESTAMP_TZ","index":707,"name":"WEB_DIRECT_DATA_TRANSFER_DATE__C","comment":null,"display_name":"web_direct_data_transfer_date__c"},"WEB_DIRECT_START_DATE__C":{"type":"TIMESTAMP_TZ","index":708,"name":"WEB_DIRECT_START_DATE__C","comment":null,"display_name":"web_direct_start_date__c"},"WEB_DIRECT_END_DATE__C":{"type":"TIMESTAMP_TZ","index":709,"name":"WEB_DIRECT_END_DATE__C","comment":null,"display_name":"web_direct_end_date__c"},"WEB_DIRECT_AMOUNT__C":{"type":"FLOAT","index":710,"name":"WEB_DIRECT_AMOUNT__C","comment":null,"display_name":"web_direct_amount__c"},"WEB_DIRECT_OTHER_AMOUNT__C":{"type":"FLOAT","index":711,"name":"WEB_DIRECT_OTHER_AMOUNT__C","comment":null,"display_name":"web_direct_other_amount__c"},"DOWNGRADE_DETAILS__C":{"type":"TEXT","index":712,"name":"DOWNGRADE_DETAILS__C","comment":null,"display_name":"downgrade_details__c"},"DOWNGRADE_REASON__C":{"type":"TEXT","index":713,"name":"DOWNGRADE_REASON__C","comment":null,"display_name":"downgrade_reason__c"},"PS_DELIVERY_LEADER__C":{"type":"TEXT","index":714,"name":"PS_DELIVERY_LEADER__C","comment":null,"display_name":"ps_delivery_leader__c"},"SALES_QUALIFIED_SOURCE_2__C":{"type":"TEXT","index":715,"name":"SALES_QUALIFIED_SOURCE_2__C","comment":null,"display_name":"sales_qualified_source_2__c"},"CREATED_CLOSED_SAME_QUARTER__C":{"type":"BOOLEAN","index":716,"name":"CREATED_CLOSED_SAME_QUARTER__C","comment":null,"display_name":"created_closed_same_quarter__c"},"COMP_NEW_LOGO_OVERRIDE__C":{"type":"TEXT","index":717,"name":"COMP_NEW_LOGO_OVERRIDE__C","comment":null,"display_name":"comp_new_logo_override__c"},"COMP_CHANNEL_NEUTRAL_OVERRIDE__C":{"type":"FLOAT","index":718,"name":"COMP_CHANNEL_NEUTRAL_OVERRIDE__C","comment":null,"display_name":"comp_channel_neutral_override__c"},"ADMIN_SQS_EQUAL__C":{"type":"BOOLEAN","index":719,"name":"ADMIN_SQS_EQUAL__C","comment":null,"display_name":"admin_sqs_equal__c"},"NEXT_STEPS_HISTORY__C":{"type":"TEXT","index":720,"name":"NEXT_STEPS_HISTORY__C","comment":null,"display_name":"next_steps_history__c"},"FP_A_MASTER_BOOKINGS_FLAG__C":{"type":"BOOLEAN","index":721,"name":"FP_A_MASTER_BOOKINGS_FLAG__C","comment":null,"display_name":"fp_a_master_bookings_flag__c"},"RESALE_PARTNER_TRACK__C":{"type":"TEXT","index":722,"name":"RESALE_PARTNER_TRACK__C","comment":null,"display_name":"resale_partner_track__c"},"RESALE_CHANNEL_MANAGER__C":{"type":"TEXT","index":723,"name":"RESALE_CHANNEL_MANAGER__C","comment":null,"display_name":"resale_channel_manager__c"},"CHANNEL_USE_CASE__C":{"type":"TEXT","index":724,"name":"CHANNEL_USE_CASE__C","comment":null,"display_name":"channel_use_case__c"},"FULFILLMENT_DISTRIBUTOR__C":{"type":"TEXT","index":725,"name":"FULFILLMENT_DISTRIBUTOR__C","comment":null,"display_name":"fulfillment_distributor__c"},"AMOUNT_CURRENCY_UNIT_TYPE__C":{"type":"TEXT","index":726,"name":"AMOUNT_CURRENCY_UNIT_TYPE__C","comment":null,"display_name":"amount_currency_unit_type__c"},"OPPTY_QUARTERLY_REVIEW_COMMENTS__C":{"type":"TEXT","index":727,"name":"OPPTY_QUARTERLY_REVIEW_COMMENTS__C","comment":null,"display_name":"oppty_quarterly_review_comments__c"},"ISR_PRIORITY__C":{"type":"TEXT","index":728,"name":"ISR_PRIORITY__C","comment":null,"display_name":"isr_priority__c"},"WEB_DIRECT_AUTOMATION_STORY__C":{"type":"TEXT","index":729,"name":"WEB_DIRECT_AUTOMATION_STORY__C","comment":null,"display_name":"web_direct_automation_story__c"},"DEAL_RATIO_TEST__C":{"type":"FLOAT","index":730,"name":"DEAL_RATIO_TEST__C","comment":null,"display_name":"deal_ratio_test__c"},"LASTCLOSEDATECHANGEDHISTORYID":{"type":"TEXT","index":731,"name":"LASTCLOSEDATECHANGEDHISTORYID","comment":null,"display_name":"lastclosedatechangedhistoryid"},"CONTACTID":{"type":"TEXT","index":732,"name":"CONTACTID","comment":null,"display_name":"contactid"},"LASTSTAGECHANGEDATE":{"type":"TIMESTAMP_TZ","index":733,"name":"LASTSTAGECHANGEDATE","comment":null,"display_name":"laststagechangedate"},"LASTAMOUNTCHANGEDHISTORYID":{"type":"TEXT","index":734,"name":"LASTAMOUNTCHANGEDHISTORYID","comment":null,"display_name":"lastamountchangedhistoryid"},"ORDER_TYPE_2_3_LAST_RUN__C":{"type":"TIMESTAMP_TZ","index":735,"name":"ORDER_TYPE_2_3_LAST_RUN__C","comment":null,"display_name":"order_type_2_3_last_run__c"},"CRITICAL_DEAL_FLAG__C__BO":{"type":"BOOLEAN","index":736,"name":"CRITICAL_DEAL_FLAG__C__BO","comment":null,"display_name":"critical_deal_flag__c__bo"},"ESTIMATOR_ARR_NET_AMOUNT_UNITTYPE__C":{"type":"TEXT","index":737,"name":"ESTIMATOR_ARR_NET_AMOUNT_UNITTYPE__C","comment":null,"display_name":"estimator_arr_net_amount_unittype__c"},"ESTIMATOR_TRUE_UP_AMOUNT_UNITTYPE__C":{"type":"TEXT","index":738,"name":"ESTIMATOR_TRUE_UP_AMOUNT_UNITTYPE__C","comment":null,"display_name":"estimator_true_up_amount_unittype__c"},"ESTIMATOR_ARR_GROSS_AMOUNT_UNITTYPE__C":{"type":"TEXT","index":739,"name":"ESTIMATOR_ARR_GROSS_AMOUNT_UNITTYPE__C","comment":null,"display_name":"estimator_arr_gross_amount_unittype__c"},"ESTIMATOR_CHANNEL_NEUTRAL_AMT_UNITTYPE__C":{"type":"TEXT","index":740,"name":"ESTIMATOR_CHANNEL_NEUTRAL_AMT_UNITTYPE__C","comment":null,"display_name":"estimator_channel_neutral_amt_unittype__c"},"ESTIMATOR_NON_RECURRING_AMT_UNITTYPE__C":{"type":"TEXT","index":741,"name":"ESTIMATOR_NON_RECURRING_AMT_UNITTYPE__C","comment":null,"display_name":"estimator_non_recurring_amt_unittype__c"},"ESTIMATOR_PROF_SERVICES_AMT_UNITTYPE__C":{"type":"TEXT","index":742,"name":"ESTIMATOR_PROF_SERVICES_AMT_UNITTYPE__C","comment":null,"display_name":"estimator_prof_services_amt_unittype__c"},"ESTIMATOR_OPPORTUNITY_TERM_UNITTYPE__C":{"type":"TEXT","index":743,"name":"ESTIMATOR_OPPORTUNITY_TERM_UNITTYPE__C","comment":null,"display_name":"estimator_opportunity_term_unittype__c"},"ESTIMATOR_ARR_GROWTH_AMOUNT_UNITTYPE__C":{"type":"TEXT","index":744,"name":"ESTIMATOR_ARR_GROWTH_AMOUNT_UNITTYPE__C","comment":null,"display_name":"estimator_arr_growth_amount_unittype__c"},"ESTIMATOR_COMP_NET_ARR_GROSS__C":{"type":"FLOAT","index":745,"name":"ESTIMATOR_COMP_NET_ARR_GROSS__C","comment":null,"display_name":"estimator_comp_net_arr_gross__c"},"SSP_ID__C":{"type":"TEXT","index":746,"name":"SSP_ID__C","comment":null,"display_name":"ssp_id__c"},"CREATED_BY_RAMP__C":{"type":"BOOLEAN","index":747,"name":"CREATED_BY_RAMP__C","comment":null,"display_name":"created_by_ramp__c"},"MULTI_YEAR_SUBSCRIPTION_AMOUNT_OVERRIDE__C":{"type":"FLOAT","index":748,"name":"MULTI_YEAR_SUBSCRIPTION_AMOUNT_OVERRIDE__C","comment":null,"display_name":"multi_year_subscription_amount_override__c"},"ESTIMATOR_STUB_IACV_UNIT_TYPE__C":{"type":"TEXT","index":749,"name":"ESTIMATOR_STUB_IACV_UNIT_TYPE__C","comment":null,"display_name":"estimator_stub_iacv_unit_type__c"},"ESTIMATOR_PARTNER_DISCOUNT_UNIT_TYPE__C":{"type":"TEXT","index":750,"name":"ESTIMATOR_PARTNER_DISCOUNT_UNIT_TYPE__C","comment":null,"display_name":"estimator_partner_discount_unit_type__c"},"ESTIMATOR_COMMISSION_ADJ_UNIT_TYPE__C":{"type":"TEXT","index":751,"name":"ESTIMATOR_COMMISSION_ADJ_UNIT_TYPE__C","comment":null,"display_name":"estimator_commission_adj_unit_type__c"},"ESTIMATOR_CHANNEUTRAL_Y2NAMNT_UNITTYPE__C":{"type":"TEXT","index":752,"name":"ESTIMATOR_CHANNEUTRAL_Y2NAMNT_UNITTYPE__C","comment":null,"display_name":"estimator_channeutral_y2namnt_unittype__c"},"ESTIMATOR_INVOICE_AMOUNT_UNIT_TYPE__C":{"type":"TEXT","index":753,"name":"ESTIMATOR_INVOICE_AMOUNT_UNIT_TYPE__C","comment":null,"display_name":"estimator_invoice_amount_unit_type__c"},"ESTIMATOR_RECURRING_AMOUNT_UNIT_TYPE__C":{"type":"TEXT","index":754,"name":"ESTIMATOR_RECURRING_AMOUNT_UNIT_TYPE__C","comment":null,"display_name":"estimator_recurring_amount_unit_type__c"},"ESTIMATOR_CALC_DISCOUNT_UNIT_TYPE__C":{"type":"TEXT","index":755,"name":"ESTIMATOR_CALC_DISCOUNT_UNIT_TYPE__C","comment":null,"display_name":"estimator_calc_discount_unit_type__c"},"ESTIMATOR_PIO_AMOUNT_UNIT_TYPE__C":{"type":"TEXT","index":756,"name":"ESTIMATOR_PIO_AMOUNT_UNIT_TYPE__C","comment":null,"display_name":"estimator_pio_amount_unit_type__c"},"ESTIMATOR_ARR_Y2PLUS_AMOUNT_UNIT_TYPE__C":{"type":"TEXT","index":757,"name":"ESTIMATOR_ARR_Y2PLUS_AMOUNT_UNIT_TYPE__C","comment":null,"display_name":"estimator_arr_y2plus_amount_unit_type__c"},"ESTIMATOR_ACCOUNT_TERRITORY__C":{"type":"TEXT","index":758,"name":"ESTIMATOR_ACCOUNT_TERRITORY__C","comment":null,"display_name":"estimator_account_territory__c"},"ESTIMATOR_DR_PARTNER_NAME__C":{"type":"TEXT","index":759,"name":"ESTIMATOR_DR_PARTNER_NAME__C","comment":null,"display_name":"estimator_dr_partner_name__c"},"ESTIMATOR_TYPE__C":{"type":"TEXT","index":760,"name":"ESTIMATOR_TYPE__C","comment":null,"display_name":"estimator_type__c"},"ESTIMATOR_STUB_IACV__C":{"type":"FLOAT","index":761,"name":"ESTIMATOR_STUB_IACV__C","comment":null,"display_name":"estimator_stub_iacv__c"},"ESTIMATOR_PIO_AMOUNT__C":{"type":"FLOAT","index":762,"name":"ESTIMATOR_PIO_AMOUNT__C","comment":null,"display_name":"estimator_pio_amount__c"},"ESTIMATOR_RESALE_PARTNER_NAME__C":{"type":"TEXT","index":763,"name":"ESTIMATOR_RESALE_PARTNER_NAME__C","comment":null,"display_name":"estimator_resale_partner_name__c"},"ESTIMATOR_TYPE_2__C":{"type":"TEXT","index":764,"name":"ESTIMATOR_TYPE_2__C","comment":null,"display_name":"estimator_type_2__c"},"ESTIMATOR_TODAY__C":{"type":"TIMESTAMP_TZ","index":765,"name":"ESTIMATOR_TODAY__C","comment":null,"display_name":"estimator_today__c"},"POTENTIAL_COMP_NEUTRAL_PAYOUT__C":{"type":"FLOAT","index":766,"name":"POTENTIAL_COMP_NEUTRAL_PAYOUT__C","comment":null,"display_name":"potential_comp_neutral_payout__c"},"FORECASTED_CHURN_FOR_CLARI__C":{"type":"FLOAT","index":767,"name":"FORECASTED_CHURN_FOR_CLARI__C","comment":null,"display_name":"forecasted_churn_for_clari__c"},"ARR_BASIS_FOR_CLARI__C":{"type":"FLOAT","index":768,"name":"ARR_BASIS_FOR_CLARI__C","comment":null,"display_name":"arr_basis_for_clari__c"},"CCN_HAS_ULTIMATE_OR_PREMIUM_PRODUCTS__C":{"type":"BOOLEAN","index":769,"name":"CCN_HAS_ULTIMATE_OR_PREMIUM_PRODUCTS__C","comment":null,"display_name":"ccn_has_ultimate_or_premium_products__c"},"CCN_HAS_PRODUCTS__C":{"type":"BOOLEAN","index":770,"name":"CCN_HAS_PRODUCTS__C","comment":null,"display_name":"ccn_has_products__c"},"WIP_FO_NEW_LOGO_2_3__C":{"type":"FLOAT","index":771,"name":"WIP_FO_NEW_LOGO_2_3__C","comment":null,"display_name":"wip_fo_new_logo_2_3__c"},"IS_SQS_CHANNEL_GENERATED__C":{"type":"BOOLEAN","index":772,"name":"IS_SQS_CHANNEL_GENERATED__C","comment":null,"display_name":"is_sqs_channel_generated__c"},"IS_OSS_EDU__C":{"type":"BOOLEAN","index":773,"name":"IS_OSS_EDU__C","comment":null,"display_name":"is_oss_edu__c"},"ORDER_TYPE_2_3_STAMP__C":{"type":"TEXT","index":774,"name":"ORDER_TYPE_2_3_STAMP__C","comment":null,"display_name":"order_type_2_3_stamp__c"},"WON_ARR_BASIS_FOR_CLARI__C":{"type":"FLOAT","index":775,"name":"WON_ARR_BASIS_FOR_CLARI__C","comment":null,"display_name":"won_arr_basis_for_clari__c"},"OVERRIDE_ARR_BASIS_CLARI__C":{"type":"FLOAT","index":776,"name":"OVERRIDE_ARR_BASIS_CLARI__C","comment":null,"display_name":"override_arr_basis_clari__c"},"RENEWAL_FORECAST_HEALTH_OVERRIDE__C":{"type":"BOOLEAN","index":777,"name":"RENEWAL_FORECAST_HEALTH_OVERRIDE__C","comment":null,"display_name":"renewal_forecast_health_override__c"},"OUTREACH_SEQUENCE_ATTRIBUTED__C":{"type":"TEXT","index":778,"name":"OUTREACH_SEQUENCE_ATTRIBUTED__C","comment":null,"display_name":"outreach_sequence_attributed__c"},"CCN_DISCOUNT_CALCULATION__C":{"type":"FLOAT","index":779,"name":"CCN_DISCOUNT_CALCULATION__C","comment":null,"display_name":"ccn_discount_calculation__c"},"EXCLUDE_FROM_ZOOMINFO_ENRICH__C":{"type":"BOOLEAN","index":780,"name":"EXCLUDE_FROM_ZOOMINFO_ENRICH__C","comment":null,"display_name":"exclude_from_zoominfo_enrich__c"},"ORDER_TYPE_2_3_TEST__C":{"type":"TEXT","index":781,"name":"ORDER_TYPE_2_3_TEST__C","comment":null,"display_name":"order_type_2_3_test__c"},"TOTAL_NET_ARR_CREDIT__C":{"type":"FLOAT","index":782,"name":"TOTAL_NET_ARR_CREDIT__C","comment":null,"display_name":"total_net_arr_credit__c"},"CONTRACT_RESET_OPPORTUNITY__C":{"type":"TEXT","index":783,"name":"CONTRACT_RESET_OPPORTUNITY__C","comment":null,"display_name":"contract_reset_opportunity__c"},"LICENSE_DELIVERY_DATE__C":{"type":"TIMESTAMP_TZ","index":784,"name":"LICENSE_DELIVERY_DATE__C","comment":null,"display_name":"license_delivery_date__c"},"STAMPED_OPP_OWNER_USER_ROLE_TYPE__C":{"type":"TEXT","index":785,"name":"STAMPED_OPP_OWNER_USER_ROLE_TYPE__C","comment":null,"display_name":"stamped_opp_owner_user_role_type__c"},"SAO_OPP_OWNER_USER_ROLE_TYPE__C":{"type":"TEXT","index":786,"name":"SAO_OPP_OWNER_USER_ROLE_TYPE__C","comment":null,"display_name":"sao_opp_owner_user_role_type__c"},"BUSINESS_DEVELOPMENT_REPRESENTATIVE__C":{"type":"TEXT","index":787,"name":"BUSINESS_DEVELOPMENT_REPRESENTATIVE__C","comment":null,"display_name":"business_development_representative__c"},"STAMPED_OPP_OWNER_SEGMENT_GEO_REGION_ARE__C":{"type":"TEXT","index":788,"name":"STAMPED_OPP_OWNER_SEGMENT_GEO_REGION_ARE__C","comment":null,"display_name":"stamped_opp_owner_segment_geo_region_are__c"},"SAO_OPP_OWNER_SEGMENT_GEO_REGION_AREA__C":{"type":"TEXT","index":789,"name":"SAO_OPP_OWNER_SEGMENT_GEO_REGION_AREA__C","comment":null,"display_name":"sao_opp_owner_segment_geo_region_area__c"},"OUTREACH_ATTRIBUTED_FINISHED_SEQUENCES__C":{"type":"TEXT","index":790,"name":"OUTREACH_ATTRIBUTED_FINISHED_SEQUENCES__C","comment":null,"display_name":"outreach_attributed_finished_sequences__c"},"OLD_ORDER_TYPE_LIVE__C":{"type":"TEXT","index":791,"name":"OLD_ORDER_TYPE_LIVE__C","comment":null,"display_name":"old_order_type_live__c"},"OLD_ORDER_TYPE_STAMP__C":{"type":"TEXT","index":792,"name":"OLD_ORDER_TYPE_STAMP__C","comment":null,"display_name":"old_order_type_stamp__c"},"PRE_UKRAINE_ARR__C":{"type":"FLOAT","index":793,"name":"PRE_UKRAINE_ARR__C","comment":null,"display_name":"pre_ukraine_arr__c"},"UKRAINE_COMMENT__C":{"type":"TEXT","index":794,"name":"UKRAINE_COMMENT__C","comment":null,"display_name":"ukraine_comment__c"},"UKRAINE_RISK_SCALE__C":{"type":"TEXT","index":795,"name":"UKRAINE_RISK_SCALE__C","comment":null,"display_name":"ukraine_risk_scale__c"},"MILITARY_INVASION_COMMENTS__C":{"type":"TEXT","index":796,"name":"MILITARY_INVASION_COMMENTS__C","comment":null,"display_name":"military_invasion_comments__c"},"PRE_MILITARY_INVASION_ARR__C":{"type":"FLOAT","index":797,"name":"PRE_MILITARY_INVASION_ARR__C","comment":null,"display_name":"pre_military_invasion_arr__c"},"MILITARY_INVASION_RISK_SCALE__C":{"type":"TEXT","index":798,"name":"MILITARY_INVASION_RISK_SCALE__C","comment":null,"display_name":"military_invasion_risk_scale__c"},"OUTREACH_LAST_TOUCH_CONTACT__C":{"type":"TEXT","index":799,"name":"OUTREACH_LAST_TOUCH_CONTACT__C","comment":null,"display_name":"outreach_last_touch_contact__c"},"STAMPED_ACCOUNT_SALES_TERRITORY__C":{"type":"TEXT","index":800,"name":"STAMPED_ACCOUNT_SALES_TERRITORY__C","comment":null,"display_name":"stamped_account_sales_territory__c"},"STAMPED_ACCOUNT_DEMOGRAPHICS_UPA_COUNTR__C":{"type":"TEXT","index":801,"name":"STAMPED_ACCOUNT_DEMOGRAPHICS_UPA_COUNTR__C","comment":null,"display_name":"stamped_account_demographics_upa_countr__c"},"NET_50_50__C":{"type":"BOOLEAN","index":802,"name":"NET_50_50__C","comment":null,"display_name":"net_50_50__c"},"ESTIMATOR_WON_ARR_BASIS_CLARI_UNITTYPE__C":{"type":"TEXT","index":803,"name":"ESTIMATOR_WON_ARR_BASIS_CLARI_UNITTYPE__C","comment":null,"display_name":"estimator_won_arr_basis_clari_unittype__c"},"ESTIMATOR_ARR_BASIS_CLARI_UNIT_TYPE__C":{"type":"TEXT","index":804,"name":"ESTIMATOR_ARR_BASIS_CLARI_UNIT_TYPE__C","comment":null,"display_name":"estimator_arr_basis_clari_unit_type__c"},"ESTIMATOR_ARR_BASIS_UNIT_TYPE__C":{"type":"TEXT","index":805,"name":"ESTIMATOR_ARR_BASIS_UNIT_TYPE__C","comment":null,"display_name":"estimator_arr_basis_unit_type__c"},"ESTIMATOR_CHANNEL_SPLIT_UNIT_TYPE__C":{"type":"TEXT","index":806,"name":"ESTIMATOR_CHANNEL_SPLIT_UNIT_TYPE__C","comment":null,"display_name":"estimator_channel_split_unit_type__c"},"SOW_CLOSE_DATE_THIS_OPP__C":{"type":"TIMESTAMP_TZ","index":807,"name":"SOW_CLOSE_DATE_THIS_OPP__C","comment":null,"display_name":"sow_close_date_this_opp__c"},"OUTREACH_LAST_TOUCH_SEQUENCE__C":{"type":"TEXT","index":808,"name":"OUTREACH_LAST_TOUCH_SEQUENCE__C","comment":null,"display_name":"outreach_last_touch_sequence__c"},"COMP_TAM_TEAM__C":{"type":"TEXT","index":809,"name":"COMP_TAM_TEAM__C","comment":null,"display_name":"comp_tam_team__c"},"CP_SOLUTION__C":{"type":"TEXT","index":810,"name":"CP_SOLUTION__C","comment":null,"display_name":"cp_solution__c"},"AWS_OR_GCP_CUSTOMER_BILLING_ACCOUNT_ID__C":{"type":"TEXT","index":811,"name":"AWS_OR_GCP_CUSTOMER_BILLING_ACCOUNT_ID__C","comment":null,"display_name":"aws_or_gcp_customer_billing_account_id__c"},"AWS_OR_GCP_CUSTOMER_CONTACT_NAME_EMAIL__C":{"type":"TEXT","index":812,"name":"AWS_OR_GCP_CUSTOMER_CONTACT_NAME_EMAIL__C","comment":null,"display_name":"aws_or_gcp_customer_contact_name_email__c"},"COMP_CHANNEL_SOURCED_SPLIT_MULTIPLE__C":{"type":"FLOAT","index":813,"name":"COMP_CHANNEL_SOURCED_SPLIT_MULTIPLE__C","comment":null,"display_name":"comp_channel_sourced_split_multiple__c"},"DR_PARTNER_GSI_ACCOUNT__C":{"type":"BOOLEAN","index":814,"name":"DR_PARTNER_GSI_ACCOUNT__C","comment":null,"display_name":"dr_partner_gsi_account__c"},"RESALE_PARTNER_GSI_ACCOUNT__C":{"type":"BOOLEAN","index":815,"name":"RESALE_PARTNER_GSI_ACCOUNT__C","comment":null,"display_name":"resale_partner_gsi_account__c"},"EXEMPT_LATE_RENEWAL_AUTOMATION__C":{"type":"BOOLEAN","index":816,"name":"EXEMPT_LATE_RENEWAL_AUTOMATION__C","comment":null,"display_name":"exempt_late_renewal_automation__c"},"FSI_SAL__C":{"type":"TEXT","index":817,"name":"FSI_SAL__C","comment":null,"display_name":"fsi_sal__c"},"INBOUND_BDR__C":{"type":"TEXT","index":818,"name":"INBOUND_BDR__C","comment":null,"display_name":"inbound_bdr__c"},"FIRST_QUOTE_SUBMISSION_DATE__C":{"type":"TIMESTAMP_TZ","index":819,"name":"FIRST_QUOTE_SUBMISSION_DATE__C","comment":null,"display_name":"first_quote_submission_date__c"},"FIRST_QUOTE_CREATED_DATE__C":{"type":"TIMESTAMP_TZ","index":820,"name":"FIRST_QUOTE_CREATED_DATE__C","comment":null,"display_name":"first_quote_created_date__c"},"FIRST_QUOTE_APPROVED_DATE__C":{"type":"TIMESTAMP_TZ","index":821,"name":"FIRST_QUOTE_APPROVED_DATE__C","comment":null,"display_name":"first_quote_approved_date__c"},"COMP_CHURN_EXCEPTION__C":{"type":"BOOLEAN","index":822,"name":"COMP_CHURN_EXCEPTION__C","comment":null,"display_name":"comp_churn_exception__c"},"IS_PIPELINE_CREATED_ELIGIBLE_FLAG__C":{"type":"BOOLEAN","index":823,"name":"IS_PIPELINE_CREATED_ELIGIBLE_FLAG__C","comment":null,"display_name":"is_pipeline_created_eligible_flag__c"},"AGGREGATE_PARTNER__C":{"type":"TEXT","index":824,"name":"AGGREGATE_PARTNER__C","comment":null,"display_name":"aggregate_partner__c"},"AGGREGATE_PARTNER_TRACK__C":{"type":"TEXT","index":825,"name":"AGGREGATE_PARTNER_TRACK__C","comment":null,"display_name":"aggregate_partner_track__c"},"AGGREGATE_CHANNEL_MANAGER__C":{"type":"TEXT","index":826,"name":"AGGREGATE_CHANNEL_MANAGER__C","comment":null,"display_name":"aggregate_channel_manager__c"},"FSI_INVOLVED__C":{"type":"TEXT","index":827,"name":"FSI_INVOLVED__C","comment":null,"display_name":"fsi_involved__c"},"BLENDED_DEAL__C":{"type":"BOOLEAN","index":828,"name":"BLENDED_DEAL__C","comment":null,"display_name":"blended_deal__c"},"COMP_HIGH_LAM_FIRST_ORDER__C":{"type":"TEXT","index":829,"name":"COMP_HIGH_LAM_FIRST_ORDER__C","comment":null,"display_name":"comp_high_lam_first_order__c"},"ISEXCLUDEDFROMTERRITORY2FILTER":{"type":"BOOLEAN","index":830,"name":"ISEXCLUDEDFROMTERRITORY2FILTER","comment":null,"display_name":"isexcludedfromterritory2filter"},"STAMPED_FIELDS_EDITED_BY_OP__C":{"type":"BOOLEAN","index":831,"name":"STAMPED_FIELDS_EDITED_BY_OP__C","comment":null,"display_name":"stamped_fields_edited_by_op__c"},"SALES_MOTION_CAMPAIGN_CODE__C":{"type":"TEXT","index":832,"name":"SALES_MOTION_CAMPAIGN_CODE__C","comment":null,"display_name":"sales_motion_campaign_code__c"},"NEW_LOGO_OVERRIDE_CLARI__C":{"type":"TEXT","index":833,"name":"NEW_LOGO_OVERRIDE_CLARI__C","comment":null,"display_name":"new_logo_override_clari__c"},"INTENDED_PRODUCT_TIER__C":{"type":"TEXT","index":834,"name":"INTENDED_PRODUCT_TIER__C","comment":null,"display_name":"intended_product_tier__c"},"AGE_BUCKET__C":{"type":"TEXT","index":835,"name":"AGE_BUCKET__C","comment":null,"display_name":"age_bucket__c"},"COMP_EXCEPTIONS__C":{"type":"TEXT","index":836,"name":"COMP_EXCEPTIONS__C","comment":null,"display_name":"comp_exceptions__c"},"CARAHSOFT_ISR__C":{"type":"TEXT","index":837,"name":"CARAHSOFT_ISR__C","comment":null,"display_name":"carahsoft_isr__c"},"AGGREGATE_CHANNEL_MANAGER_USER__C":{"type":"TEXT","index":838,"name":"AGGREGATE_CHANNEL_MANAGER_USER__C","comment":null,"display_name":"aggregate_channel_manager_user__c"},"PS_50_50__C":{"type":"BOOLEAN","index":839,"name":"PS_50_50__C","comment":null,"display_name":"ps_50_50__c"},"MANAGER_FORECAST_CONFIDENCE_LAST_UPDATE__C":{"type":"TIMESTAMP_TZ","index":840,"name":"MANAGER_FORECAST_CONFIDENCE_LAST_UPDATE__C","comment":null,"display_name":"manager_forecast_confidence_last_update__c"},"RELATED_SUBSCRIPTION_ARR__C":{"type":"FLOAT","index":841,"name":"RELATED_SUBSCRIPTION_ARR__C","comment":null,"display_name":"related_subscription_arr__c"},"ADMIN_RENEWAL_NARR_CHECK__C":{"type":"FLOAT","index":842,"name":"ADMIN_RENEWAL_NARR_CHECK__C","comment":null,"display_name":"admin_renewal_narr_check__c"},"ADMIN_CURRENT_SUB_ARR__C":{"type":"FLOAT","index":843,"name":"ADMIN_CURRENT_SUB_ARR__C","comment":null,"display_name":"admin_current_sub_arr__c"},"ADMIN_CLOSE_VS_END_DATE__C":{"type":"FLOAT","index":844,"name":"ADMIN_CLOSE_VS_END_DATE__C","comment":null,"display_name":"admin_close_vs_end_date__c"},"ADMIN_CURRENT_SUB_END_DATE__C":{"type":"TIMESTAMP_TZ","index":845,"name":"ADMIN_CURRENT_SUB_END_DATE__C","comment":null,"display_name":"admin_current_sub_end_date__c"},"ADMIN_BASIS_DELTA__C":{"type":"FLOAT","index":846,"name":"ADMIN_BASIS_DELTA__C","comment":null,"display_name":"admin_basis_delta__c"},"ABDM_NOTES__C":{"type":"TEXT","index":847,"name":"ABDM_NOTES__C","comment":null,"display_name":"abdm_notes__c"},"MANAGER_FORECAST_CONFIDENCE__C":{"type":"FLOAT","index":848,"name":"MANAGER_FORECAST_CONFIDENCE__C","comment":null,"display_name":"manager_forecast_confidence__c"},"ALLIANCE_PARTNER_OPP_ID__C":{"type":"TEXT","index":849,"name":"ALLIANCE_PARTNER_OPP_ID__C","comment":null,"display_name":"alliance_partner_opp_id__c"},"ADMIN_CURRENT_SUB_ID__C":{"type":"TEXT","index":850,"name":"ADMIN_CURRENT_SUB_ID__C","comment":null,"display_name":"admin_current_sub_id__c"},"OWNER_ID_18__C":{"type":"TEXT","index":851,"name":"OWNER_ID_18__C","comment":null,"display_name":"owner_id_18__c"},"TECHNICAL_ARCHITECT__C":{"type":"TEXT","index":852,"name":"TECHNICAL_ARCHITECT__C","comment":null,"display_name":"technical_architect__c"},"ADMIN_STORAGE_ONLY__C":{"type":"BOOLEAN","index":853,"name":"ADMIN_STORAGE_ONLY__C","comment":null,"display_name":"admin_storage_only__c"},"SA_REQUEST_STATUS__C":{"type":"TEXT","index":854,"name":"SA_REQUEST_STATUS__C","comment":null,"display_name":"sa_request_status__c"},"ORDER_TYPE_ARCHIVED__C":{"type":"BOOLEAN","index":855,"name":"ORDER_TYPE_ARCHIVED__C","comment":null,"display_name":"order_type_archived__c"},"KEY_FEATURE__C":{"type":"TEXT","index":856,"name":"KEY_FEATURE__C","comment":null,"display_name":"key_feature__c"},"UNQUALIFIED_DETAIL__C":{"type":"TEXT","index":857,"name":"UNQUALIFIED_DETAIL__C","comment":null,"display_name":"unqualified_detail__c"},"UNQUALIFIED_REASON__C":{"type":"TEXT","index":858,"name":"UNQUALIFIED_REASON__C","comment":null,"display_name":"unqualified_reason__c"},"OWNER_PROFILE_ID__C":{"type":"TEXT","index":859,"name":"OWNER_PROFILE_ID__C","comment":null,"display_name":"owner_profile_id__c"},"SA_NEEDS_INFO_DETAILS__C":{"type":"TEXT","index":860,"name":"SA_NEEDS_INFO_DETAILS__C","comment":null,"display_name":"sa_needs_info_details__c"},"SAFE_ACCOUNT_NAME__C":{"type":"TEXT","index":861,"name":"SAFE_ACCOUNT_NAME__C","comment":null,"display_name":"safe_account_name__c"},"SAFE_ACCOUNT_GEO__C":{"type":"TEXT","index":862,"name":"SAFE_ACCOUNT_GEO__C","comment":null,"display_name":"safe_account_geo__c"},"SAFE_ACCOUNT_ROLE_TYPE__C":{"type":"TEXT","index":863,"name":"SAFE_ACCOUNT_ROLE_TYPE__C","comment":null,"display_name":"safe_account_role_type__c"},"SET_SAFE_FIELDS__C":{"type":"BOOLEAN","index":864,"name":"SET_SAFE_FIELDS__C","comment":null,"display_name":"set_safe_fields__c"},"COMP_MAJOR_AE_TARGET_ACCOUNT__C":{"type":"BOOLEAN","index":865,"name":"COMP_MAJOR_AE_TARGET_ACCOUNT__C","comment":null,"display_name":"comp_major_ae_target_account__c"},"SAFE_ACCOUNT_BUSINESS_UNIT__C":{"type":"TEXT","index":866,"name":"SAFE_ACCOUNT_BUSINESS_UNIT__C","comment":null,"display_name":"safe_account_business_unit__c"},"LAST_SAFE_STAMP_TIME__C":{"type":"TIMESTAMP_TZ","index":867,"name":"LAST_SAFE_STAMP_TIME__C","comment":null,"display_name":"last_safe_stamp_time__c"},"SAFE_ACCOUNT_AREA__C":{"type":"TEXT","index":868,"name":"SAFE_ACCOUNT_AREA__C","comment":null,"display_name":"safe_account_area__c"},"SAFE_ACCOUNT_SEGMENT__C":{"type":"TEXT","index":869,"name":"SAFE_ACCOUNT_SEGMENT__C","comment":null,"display_name":"safe_account_segment__c"},"SAFE_ACCOUNT_TERRITORY__C":{"type":"TEXT","index":870,"name":"SAFE_ACCOUNT_TERRITORY__C","comment":null,"display_name":"safe_account_territory__c"},"SAFE_ACCOUNT_REGION__C":{"type":"TEXT","index":871,"name":"SAFE_ACCOUNT_REGION__C","comment":null,"display_name":"safe_account_region__c"},"SUBSCRIPTION_RENEWAL_DATE__C":{"type":"TIMESTAMP_TZ","index":872,"name":"SUBSCRIPTION_RENEWAL_DATE__C","comment":null,"display_name":"subscription_renewal_date__c"},"STAMPED_OPP_SDR_ROLE__C":{"type":"TEXT","index":873,"name":"STAMPED_OPP_SDR_ROLE__C","comment":null,"display_name":"stamped_opp_sdr_role__c"},"STAMPED_OPP_BDR_ROLE__C":{"type":"TEXT","index":874,"name":"STAMPED_OPP_BDR_ROLE__C","comment":null,"display_name":"stamped_opp_bdr_role__c"},"RENEWAL_SWING_ARR__C":{"type":"FLOAT","index":875,"name":"RENEWAL_SWING_ARR__C","comment":null,"display_name":"renewal_swing_arr__c"},"FOCUS_PARTNER__C":{"type":"BOOLEAN","index":876,"name":"FOCUS_PARTNER__C","comment":null,"display_name":"focus_partner__c"},"STAMPED_OPP_OWNER_USER_BUSINESS_UNIT__C":{"type":"TEXT","index":877,"name":"STAMPED_OPP_OWNER_USER_BUSINESS_UNIT__C","comment":null,"display_name":"stamped_opp_owner_user_business_unit__c"},"VSA_READOUT__C":{"type":"TEXT","index":878,"name":"VSA_READOUT__C","comment":null,"display_name":"vsa_readout__c"},"VSA_START_DATE_NET_ARR__C":{"type":"FLOAT","index":879,"name":"VSA_START_DATE_NET_ARR__C","comment":null,"display_name":"vsa_start_date_net_arr__c"},"VSA_START_DATE__C":{"type":"TIMESTAMP_TZ","index":880,"name":"VSA_START_DATE__C","comment":null,"display_name":"vsa_start_date__c"},"VSA_URL__C":{"type":"TEXT","index":881,"name":"VSA_URL__C","comment":null,"display_name":"vsa_url__c"},"VSA_STATUS__C":{"type":"TEXT","index":882,"name":"VSA_STATUS__C","comment":null,"display_name":"vsa_status__c"},"VSA_END_DATE__C":{"type":"TIMESTAMP_TZ","index":883,"name":"VSA_END_DATE__C","comment":null,"display_name":"vsa_end_date__c"},"COMP_POOLED_CSM_TEAM__C":{"type":"TEXT","index":884,"name":"COMP_POOLED_CSM_TEAM__C","comment":null,"display_name":"comp_pooled_csm_team__c"},"GENERATE_OUT_YEARS__C":{"type":"BOOLEAN","index":885,"name":"GENERATE_OUT_YEARS__C","comment":null,"display_name":"generate_out_years__c"},"INTERVAL_SEQUENCE__C":{"type":"FLOAT","index":886,"name":"INTERVAL_SEQUENCE__C","comment":null,"display_name":"interval_sequence__c"},"TAM_MANAGER_EMAIL__C":{"type":"TEXT","index":887,"name":"TAM_MANAGER_EMAIL__C","comment":null,"display_name":"tam_manager_email__c"},"TRACRTC__REALTIME_CLEAN_PROCESSED__C":{"type":"BOOLEAN","index":888,"name":"TRACRTC__REALTIME_CLEAN_PROCESSED__C","comment":null,"display_name":"tracrtc__realtime_clean_processed__c"},"TRACRTC__REALTIME_CLEAN_FAILED__C":{"type":"BOOLEAN","index":889,"name":"TRACRTC__REALTIME_CLEAN_FAILED__C","comment":null,"display_name":"tracrtc__realtime_clean_failed__c"},"TRACRTC__RE_RUN_REALTIME_CLEAN__C":{"type":"BOOLEAN","index":890,"name":"TRACRTC__RE_RUN_REALTIME_CLEAN__C","comment":null,"display_name":"tracrtc__re_run_realtime_clean__c"},"TRACRTC__TIME_DELAY_PROCESSED__C":{"type":"BOOLEAN","index":891,"name":"TRACRTC__TIME_DELAY_PROCESSED__C","comment":null,"display_name":"tracrtc__time_delay_processed__c"},"TRACRTC__DISABLE_COMPLETE__C":{"type":"BOOLEAN","index":892,"name":"TRACRTC__DISABLE_COMPLETE__C","comment":null,"display_name":"tracrtc__disable_complete__c"},"MARKETPLACE_PARTNER__C":{"type":"TEXT","index":893,"name":"MARKETPLACE_PARTNER__C","comment":null,"display_name":"marketplace_partner__c"},"AUTO_RENEWAL_STATUS__C":{"type":"TEXT","index":894,"name":"AUTO_RENEWAL_STATUS__C","comment":null,"display_name":"auto_renewal_status__c"},"OF_DAYS_LATE_RENEWALS__C":{"type":"FLOAT","index":895,"name":"OF_DAYS_LATE_RENEWALS__C","comment":null,"display_name":"of_days_late_renewals__c"},"FSI_APPROVAL__C":{"type":"TEXT","index":896,"name":"FSI_APPROVAL__C","comment":null,"display_name":"fsi_approval__c"},"QSR_NOTES__C":{"type":"TEXT","index":897,"name":"QSR_NOTES__C","comment":null,"display_name":"qsr_notes__c"},"QSR_STATUS__C":{"type":"TEXT","index":898,"name":"QSR_STATUS__C","comment":null,"display_name":"qsr_status__c"},"WON_ARR_BASIS_FOR_CLARI_OVERRIDE__C":{"type":"FLOAT","index":899,"name":"WON_ARR_BASIS_FOR_CLARI_OVERRIDE__C","comment":null,"display_name":"won_arr_basis_for_clari_override__c"},"CUSTOMER_REFERENCEABILITY__C":{"type":"BOOLEAN","index":900,"name":"CUSTOMER_REFERENCEABILITY__C","comment":null,"display_name":"customer_referenceability__c"},"id - not_null":{"name":"id - not_null","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"id - not_null"},"valid_from - not_null":{"name":"valid_from - not_null","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"valid_from - not_null"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 07:43UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":77115678208,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_opportunity_snapshots_base","raw_sql":"{{ config(\n    tags=[\"mnpi\"]\n) }}\n\n{{ config({\n    \"alias\": \"sfdc_opportunity_snapshots\",\n    })\n}}\n\n{{ create_snapshot_base(\n    source=source('snapshots', 'sfdc_opportunity_snapshots'),\n    primary_key='id',\n    date_start='2019-10-01',\n    date_part='day',\n    snapshot_id_name='opportunity_snapshot_id' \n    )\n}}\n\nSELECT *\nFROM final","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.create_snapshot_base","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.snapshots.sfdc_opportunity_snapshots","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":"sfdc_opportunity_snapshots","schema":"restricted_safe_legacy","database":"PROD","tags":["safe","mnpi"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","snapshots","restricted_safe","sfdc_opportunity_snapshots_base"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/snapshots/restricted_safe/sfdc_opportunity_snapshots_base.sql","original_file_path":"models/legacy/snapshots/restricted_safe/sfdc_opportunity_snapshots_base.sql","name":"sfdc_opportunity_snapshots_base","alias":"sfdc_opportunity_snapshots","checksum":{"name":"sha256","checksum":"699eafc9ef445200caeb28faac17f9d857f1fdd1e19daea69f494f30d25b4259"},"tags":["safe","mnpi"],"refs":[["date_details"],["date_details"]],"sources":[["snapshots","sfdc_opportunity_snapshots"]],"metrics":[],"description":"This is the base model for snapshots of the salesforce opportunity table for 2019-10-01 and forward.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/snapshots/base/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/snapshots/restricted_safe/sfdc_opportunity_snapshots_base.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi"],"secure":true,"alias":"sfdc_opportunity_snapshots"},"created_at":1689033761.4671292,"compiled_sql":"$34","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.sfdc_opportunity_snapshots","label":"sfdc_opportunity_snapshots_base"},{"metadata":{"type":"VIEW","schema":"LEGACY","name":"GITLAB_DOTCOM_PROJECT_STATISTIC_SNAPSHOTS_DAILY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_DAY":{"type":"DATE","index":1,"name":"snapshot_day","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_day"},"PROJECT_STATISTICS_ID":{"type":"NUMBER","index":2,"name":"PROJECT_STATISTICS_ID","comment":null,"display_name":"project_statistics_id"},"PROJECT_ID":{"type":"NUMBER","index":3,"name":"project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"project_id"},"NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_id"},"COMMIT_COUNT":{"type":"NUMBER","index":5,"name":"COMMIT_COUNT","comment":null,"display_name":"commit_count"},"STORAGE_SIZE":{"type":"NUMBER","index":6,"name":"STORAGE_SIZE","comment":null,"display_name":"storage_size"},"REPOSITORY_SIZE":{"type":"NUMBER","index":7,"name":"REPOSITORY_SIZE","comment":null,"display_name":"repository_size"},"CONTAINER_REGISTRY_SIZE":{"type":"NUMBER","index":8,"name":"CONTAINER_REGISTRY_SIZE","comment":null,"display_name":"container_registry_size"},"LFS_OBJECTS_SIZE":{"type":"NUMBER","index":9,"name":"LFS_OBJECTS_SIZE","comment":null,"display_name":"lfs_objects_size"},"BUILD_ARTIFACTS_SIZE":{"type":"NUMBER","index":10,"name":"BUILD_ARTIFACTS_SIZE","comment":null,"display_name":"build_artifacts_size"},"PACKAGES_SIZE":{"type":"NUMBER","index":11,"name":"PACKAGES_SIZE","comment":null,"display_name":"packages_size"},"WIKI_SIZE":{"type":"NUMBER","index":12,"name":"WIKI_SIZE","comment":null,"display_name":"wiki_size"},"SHARED_RUNNERS_SECONDS":{"type":"NUMBER","index":13,"name":"SHARED_RUNNERS_SECONDS","comment":null,"display_name":"shared_runners_seconds"},"LAST_UPDATE_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"LAST_UPDATE_STARTED_AT","comment":null,"display_name":"last_update_started_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_project_statistic_snapshots_daily","raw_sql":"$35","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.current_timestamp","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_project_statistics_snapshots_base","model.gitlab_snowflake.gitlab_dotcom_project_statistics_snapshots_base"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_project_statistic_snapshots_daily"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_project_statistic_snapshots_daily.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_project_statistic_snapshots_daily.sql","name":"gitlab_dotcom_project_statistic_snapshots_daily","alias":"gitlab_dotcom_project_statistic_snapshots_daily","checksum":{"name":"sha256","checksum":"7556b473531089f293ced03e6838cdf3f39a45d966d28bc7d85a2f838fc617d3"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_project_statistics_snapshots_base"],["gitlab_dotcom_project_statistics_snapshots_base"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_project_statistic_snapshots_daily.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033759.3847558,"compiled_sql":"$36","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_project_statistic_snapshots_daily","label":"gitlab_dotcom_project_statistic_snapshots_daily"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":7,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":9,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":10,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":15,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":17,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":18,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":19,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":20,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":21,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":22,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":23,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":24,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"NAMESPACE_NAME":{"type":"TEXT","index":25,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_ID":{"type":"TEXT","index":26,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":27,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":28,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":29,"name":"WAS_PURCHASED_THROUGH_RESELLER","comment":null,"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":30,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":33,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":34,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":37,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":38,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":39,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":40,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":41,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":42,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":44,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":45,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":46,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":47,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":48,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":49,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":50,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":51,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":52,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":53,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":54,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":55,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":56,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":57,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34212352,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription","raw_sql":"$37","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_subscription.sql","original_file_path":"models/common_prep/prep_subscription.sql","name":"prep_subscription","alias":"prep_subscription","checksum":{"name":"sha256","checksum":"1769b1b9c9fad9c8514abcf0c021261c8f88d9797bd412568b7e9982fec2041a"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["prep_billing_account_user"],["prep_billing_account_user"],["sfdc_customer_subscription_source"],["sfdc_customer_subscription_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the subscription shared dimension and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.5360272,"compiled_sql":"$38","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_subscription","label":"prep_subscription"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"NETSUITE_ACTUALS_BALANCE_SHEET","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DOCUMENT_ID":{"type":"TEXT","index":1,"name":"DOCUMENT_ID","comment":null,"display_name":"document_id"},"MEMO":{"type":"TEXT","index":2,"name":"MEMO","comment":null,"display_name":"memo"},"ENTITY_NAME":{"type":"TEXT","index":3,"name":"ENTITY_NAME","comment":null,"display_name":"entity_name"},"TRANSACTION_TYPE":{"type":"TEXT","index":4,"name":"TRANSACTION_TYPE","comment":null,"display_name":"transaction_type"},"ACCOUNT_ID":{"type":"FLOAT","index":5,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":6,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":7,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"UNIQUE_ACCOUNT_NUMBER":{"type":"TEXT","index":8,"name":"UNIQUE_ACCOUNT_NUMBER","comment":null,"display_name":"unique_account_number"},"UNIQUE_ACCOUNT_NAME":{"type":"TEXT","index":9,"name":"unique_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"unique_account_name"},"ACCOUNT_TYPE":{"type":"TEXT","index":10,"name":"account_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_type"},"PARENT_DEPARTMENT_NAME":{"type":"TEXT","index":11,"name":"PARENT_DEPARTMENT_NAME","comment":null,"display_name":"parent_department_name"},"DEPARTMENT_NAME":{"type":"TEXT","index":12,"name":"DEPARTMENT_NAME","comment":null,"display_name":"department_name"},"CLASS_NAME":{"type":"TEXT","index":13,"name":"CLASS_NAME","comment":null,"display_name":"class_name"},"BALANCE_SHEET_GROUPING_LEVEL_2":{"type":"TEXT","index":14,"name":"BALANCE_SHEET_GROUPING_LEVEL_2","comment":null,"display_name":"balance_sheet_grouping_level_2"},"BALANCE_SHEET_GROUPING_LEVEL_3":{"type":"TEXT","index":15,"name":"BALANCE_SHEET_GROUPING_LEVEL_3","comment":null,"display_name":"balance_sheet_grouping_level_3"},"IS_ACCOUNT_INACTIVE":{"type":"BOOLEAN","index":16,"name":"IS_ACCOUNT_INACTIVE","comment":null,"display_name":"is_account_inactive"},"ACTUAL_AMOUNT":{"type":"FLOAT","index":17,"name":"ACTUAL_AMOUNT","comment":null,"display_name":"actual_amount"},"ACCOUNTING_PERIOD_ID":{"type":"FLOAT","index":18,"name":"ACCOUNTING_PERIOD_ID","comment":null,"display_name":"accounting_period_id"},"ACCOUNTING_PERIOD":{"type":"DATE","index":19,"name":"accounting_period","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"accounting_period"},"ACCOUNTING_PERIOD_NAME":{"type":"TEXT","index":20,"name":"ACCOUNTING_PERIOD_NAME","comment":null,"display_name":"accounting_period_name"},"FISCAL_YEAR":{"type":"NUMBER","index":21,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":22,"name":"FISCAL_QUARTER","comment":null,"display_name":"fiscal_quarter"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":23,"name":"FISCAL_QUARTER_NAME","comment":null,"display_name":"fiscal_quarter_name"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1474070528,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.netsuite_actuals_balance_sheet","raw_sql":"$39","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounting_books","model.gitlab_snowflake.netsuite_accounting_books","model.gitlab_snowflake.netsuite_accounting_periods","model.gitlab_snowflake.netsuite_accounting_periods","model.gitlab_snowflake.netsuite_classes","model.gitlab_snowflake.netsuite_classes","model.gitlab_snowflake.netsuite_consolidated_exchange_rates","model.gitlab_snowflake.netsuite_consolidated_exchange_rates","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_subsidiaries_source","model.gitlab_snowflake.netsuite_subsidiaries_source","model.gitlab_snowflake.netsuite_transactions_source","model.gitlab_snowflake.netsuite_transactions_source","model.gitlab_snowflake.netsuite_transaction_lines_xf","model.gitlab_snowflake.netsuite_transaction_lines_xf"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","netsuite","restricted_safe","netsuite_actuals_balance_sheet"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/netsuite/restricted_safe/netsuite_actuals_balance_sheet.sql","original_file_path":"models/legacy/netsuite/restricted_safe/netsuite_actuals_balance_sheet.sql","name":"netsuite_actuals_balance_sheet","alias":"netsuite_actuals_balance_sheet","checksum":{"name":"sha256","checksum":"0c748c1dffe314546b7764e7a0963b80af2336c058af44817147e9c1a363464c"},"tags":["safe"],"refs":[["netsuite_accounts_xf"],["netsuite_accounts_xf"],["netsuite_accounting_books"],["netsuite_accounting_books"],["netsuite_accounting_periods"],["netsuite_accounting_periods"],["netsuite_classes"],["netsuite_classes"],["netsuite_consolidated_exchange_rates"],["netsuite_consolidated_exchange_rates"],["date_details"],["date_details"],["netsuite_departments_xf"],["netsuite_departments_xf"],["netsuite_subsidiaries_source"],["netsuite_subsidiaries_source"],["netsuite_transactions_source"],["netsuite_transactions_source"],["netsuite_transaction_lines_xf"],["netsuite_transaction_lines_xf"]],"sources":[],"metrics":[],"description":"Balance Sheet from Netsuite","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/netsuite/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/netsuite/restricted_safe/netsuite_actuals_balance_sheet.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033762.8176208,"compiled_sql":"$3a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.netsuite_actuals_balance_sheet","label":"netsuite_actuals_balance_sheet"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_BASE_MRR_AMORTIZED","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"COUNTRY":{"type":"TEXT","index":1,"name":"COUNTRY","comment":null,"display_name":"country"},"ACCOUNT_NUMBER":{"type":"TEXT","index":2,"name":"account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_number"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":3,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":4,"name":"subscription_name_slugify","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":5,"name":"oldest_subscription_in_cohort","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"oldest_subscription_in_cohort"},"LINEAGE":{"type":"TEXT","index":6,"name":"lineage","comment":null,"description":"All the subscriptions subsquent to the primary subscription, separated by commas.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"lineage"},"RATE_PLAN_NAME":{"type":"TEXT","index":7,"name":"rate_plan_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"rate_plan_name"},"PRODUCT_CATEGORY":{"type":"TEXT","index":8,"name":"product_category","comment":null,"description":"Product category is based on the rate plan name.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: GitHost, Other, SaaS - Ultimate, Basic, SaaS - Bronze, Self-Managed - Premium, Self-Managed - Starter, Self-Managed - Ultimate, Support, Plus, SaaS - Premium, Standard, Trueup, Storage, SaaS - Other, Dedicated - Ultimate"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":9,"name":"delivery","comment":null,"description":"delivery is based on the product category name.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"delivery"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":10,"name":"rate_plan_charge_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"rate_plan_charge_name"},"MRR_MONTH":{"type":"DATE","index":11,"name":"mrr_month","comment":null,"description":"The month the MRR is to be applied to","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mrr_month"},"COHORT_MONTH":{"type":"DATE","index":12,"name":"cohort_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"cohort_month"},"COHORT_QUARTER":{"type":"DATE","index":13,"name":"cohort_quarter","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"cohort_quarter"},"UNIT_OF_MEASURE":{"type":"TEXT","index":14,"name":"unit_of_measure","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"unit_of_measure"},"MRR":{"type":"FLOAT","index":15,"name":"mrr","comment":null,"description":"Monthly recurring revenue","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"mrr"},"QUANTITY":{"type":"FLOAT","index":16,"name":"quantity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"quantity"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":74164224,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_base_mrr_amortized","raw_sql":"$3b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_base_mrr","model.gitlab_snowflake.zuora_base_mrr","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_base_mrr_amortized"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_base_mrr_amortized.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_base_mrr_amortized.sql","name":"zuora_base_mrr_amortized","alias":"zuora_base_mrr_amortized","checksum":{"name":"sha256","checksum":"ee3b1a609020cf24dd96105906630d6d38993e4b50e7e95b2a83368bb75fb97e"},"tags":["safe"],"refs":[["zuora_base_mrr"],["zuora_base_mrr"],["date_details"],["date_details"]],"sources":[],"metrics":[],"description":"This table amortizes the monthly charges over the time span that the rate plan charge was in effect. A rate plan charge is only in effect if it was in effect for the last day of the month.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_base_mrr_amortized.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2316883,"compiled_sql":"$3c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_base_mrr_amortized","label":"zuora_base_mrr_amortized"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_EVENTS_MONTHLY_ACTIVE_USERS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DAY":{"type":"DATE","index":1,"name":"day","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day"},"IS_LAST_DAY_OF_MONTH":{"type":"BOOLEAN","index":2,"name":"is_last_day_of_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_last_day_of_month"},"COUNT_AUDIT_EVENTS_ACTIVE_USERS_LAST_28_DAYS":{"type":"NUMBER","index":3,"name":"count_audit_events_active_users_last_28_days","comment":null,"description":"The number of unique active users (from events table) in the previous 28 days (inclusive).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_audit_events_active_users_last_28_days"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":4,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":5,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS":{"type":"NUMBER","index":6,"name":"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS","comment":null,"display_name":"count_events_active_users_last_28_days"},"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_ID":{"type":"NUMBER","index":7,"name":"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_ID","comment":null,"display_name":"count_events_active_users_last_28_days_by_plan_id"},"COUNT_EVENTS_ACTIVE_NAMESPACES_LAST_28_DAYS_BY_PLAN_ID":{"type":"NUMBER","index":8,"name":"COUNT_EVENTS_ACTIVE_NAMESPACES_LAST_28_DAYS_BY_PLAN_ID","comment":null,"display_name":"count_events_active_namespaces_last_28_days_by_plan_id"},"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_WAS_PAID":{"type":"NUMBER","index":9,"name":"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_WAS_PAID","comment":null,"display_name":"count_events_active_users_last_28_days_by_plan_was_paid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:38UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":727040,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_events_monthly_active_users","raw_sql":"$3d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_audit_events","model.gitlab_snowflake.gitlab_dotcom_audit_events","model.gitlab_snowflake.gitlab_dotcom_events","model.gitlab_snowflake.gitlab_dotcom_events","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_events_monthly_active_users"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_events_monthly_active_users.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_events_monthly_active_users.sql","name":"gitlab_dotcom_events_monthly_active_users","alias":"gitlab_dotcom_events_monthly_active_users","checksum":{"name":"sha256","checksum":"1ccb7f4368004f988900011c4589af302786687686d5ef19a0023cdc3b147f65"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_audit_events"],["gitlab_dotcom_audit_events"],["gitlab_dotcom_events"],["gitlab_dotcom_events"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"For each day, this model counts the number of active users from the previous 28 days. The definiton of an active user is completing one or more audit events within the timeframe. This model includes the referenced date as part of the 28-day window. So for example, the window on January 31th would be from the start of January 4th to the end of January 31 (inclusive).  \n\nThis model includes one row for every day, but MAU for a given month will typically be reported as the MAU on the **last day of the month**.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_events_monthly_active_users.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3598573,"compiled_sql":"$3e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_events_monthly_active_users","label":"gitlab_dotcom_events_monthly_active_users"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"SFDC_PIPELINE_WATERFALL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PRIMARY_KEY":{"type":"TEXT","index":1,"name":"primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"primary_key"},"OPPORTUNITY_ID":{"type":"TEXT","index":2,"name":"OPPORTUNITY_ID","comment":null,"display_name":"opportunity_id"},"CLOSE_QTR":{"type":"TEXT","index":3,"name":"CLOSE_QTR","comment":null,"display_name":"close_qtr"},"FISCAL_CLOSE_YEAR":{"type":"NUMBER","index":4,"name":"FISCAL_CLOSE_YEAR","comment":null,"display_name":"fiscal_close_year"},"FIRST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":5,"name":"FIRST_DAY_OF_FISCAL_QUARTER","comment":null,"display_name":"first_day_of_fiscal_quarter"},"ORDER_TYPE":{"type":"TEXT","index":6,"name":"ORDER_TYPE","comment":null,"display_name":"order_type"},"ORDER_TYPE_ENDING":{"type":"TEXT","index":7,"name":"ORDER_TYPE_ENDING","comment":null,"display_name":"order_type_ending"},"SALES_SEGMENT":{"type":"TEXT","index":8,"name":"SALES_SEGMENT","comment":null,"display_name":"sales_segment"},"SALES_SEGMENT_ENDING":{"type":"TEXT","index":9,"name":"SALES_SEGMENT_ENDING","comment":null,"display_name":"sales_segment_ending"},"ACCOUNT_OWNER_TEAM_STAMPED":{"type":"TEXT","index":10,"name":"ACCOUNT_OWNER_TEAM_STAMPED","comment":null,"display_name":"account_owner_team_stamped"},"ACCOUNT_OWNER_TEAM_ENDING":{"type":"TEXT","index":11,"name":"ACCOUNT_OWNER_TEAM_ENDING","comment":null,"display_name":"account_owner_team_ending"},"STAGE_NAME":{"type":"TEXT","index":12,"name":"STAGE_NAME","comment":null,"display_name":"stage_name"},"STAGE_NAME_ENDING":{"type":"TEXT","index":13,"name":"STAGE_NAME_ENDING","comment":null,"display_name":"stage_name_ending"},"STAGE_NAME_3PLUS":{"type":"TEXT","index":14,"name":"STAGE_NAME_3PLUS","comment":null,"display_name":"stage_name_3plus"},"STAGE_NAME_3PLUS_ENDING":{"type":"TEXT","index":15,"name":"STAGE_NAME_3PLUS_ENDING","comment":null,"display_name":"stage_name_3plus_ending"},"STAGE_NAME_4PLUS":{"type":"TEXT","index":16,"name":"STAGE_NAME_4PLUS","comment":null,"display_name":"stage_name_4plus"},"STAGE_NAME_4PLUS_ENDING":{"type":"TEXT","index":17,"name":"STAGE_NAME_4PLUS_ENDING","comment":null,"display_name":"stage_name_4plus_ending"},"CREATED_DATE":{"type":"DATE","index":18,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"CREATED_DATE_ENDING":{"type":"DATE","index":19,"name":"CREATED_DATE_ENDING","comment":null,"display_name":"created_date_ending"},"CLOSE_DATE":{"type":"DATE","index":20,"name":"CLOSE_DATE","comment":null,"display_name":"close_date"},"CLOSE_DATE_ENDING":{"type":"DATE","index":21,"name":"CLOSE_DATE_ENDING","comment":null,"display_name":"close_date_ending"},"OPPS":{"type":"NUMBER","index":22,"name":"OPPS","comment":null,"display_name":"opps"},"OPPS_ENDING":{"type":"NUMBER","index":23,"name":"OPPS_ENDING","comment":null,"display_name":"opps_ending"},"C19":{"type":"FLOAT","index":24,"name":"C19","comment":null,"display_name":"c19"},"C19_ENDING":{"type":"FLOAT","index":25,"name":"C19_ENDING","comment":null,"display_name":"c19_ending"},"NET_IACV":{"type":"FLOAT","index":26,"name":"NET_IACV","comment":null,"display_name":"net_iacv"},"NET_IACV_ENDING":{"type":"FLOAT","index":27,"name":"NET_IACV_ENDING","comment":null,"display_name":"net_iacv_ending"},"FORECASTED_IACV":{"type":"FLOAT","index":28,"name":"FORECASTED_IACV","comment":null,"display_name":"forecasted_iacv"},"FORECASTED_IACV_ENDING":{"type":"FLOAT","index":29,"name":"FORECASTED_IACV_ENDING","comment":null,"display_name":"forecasted_iacv_ending"},"STARTING_PIPELINE":{"type":"FLOAT","index":30,"name":"STARTING_PIPELINE","comment":null,"display_name":"starting_pipeline"},"NET_CHANGE_IN_PIPELINE_IACV":{"type":"FLOAT","index":31,"name":"NET_CHANGE_IN_PIPELINE_IACV","comment":null,"display_name":"net_change_in_pipeline_iacv"},"CREATED_IN_QTR":{"type":"FLOAT","index":32,"name":"CREATED_IN_QTR","comment":null,"display_name":"created_in_qtr"},"PULLED_IN_FROM_OTHER_QTR":{"type":"FLOAT","index":33,"name":"PULLED_IN_FROM_OTHER_QTR","comment":null,"display_name":"pulled_in_from_other_qtr"},"NET_IACV_WATERFALL":{"type":"FLOAT","index":34,"name":"NET_IACV_WATERFALL","comment":null,"display_name":"net_iacv_waterfall"},"CLOSED_LOST":{"type":"FLOAT","index":35,"name":"CLOSED_LOST","comment":null,"display_name":"closed_lost"},"DUPLICATE_UNQUALIFIED":{"type":"FLOAT","index":36,"name":"DUPLICATE_UNQUALIFIED","comment":null,"display_name":"duplicate_unqualified"},"SLIPPED_DEALS":{"type":"FLOAT","index":37,"name":"SLIPPED_DEALS","comment":null,"display_name":"slipped_deals"},"ENDING_PIPELINE":{"type":"FLOAT","index":38,"name":"ENDING_PIPELINE","comment":null,"display_name":"ending_pipeline"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":22059520,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_pipeline_waterfall","raw_sql":"$3f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_opportunity_snapshot_history","model.gitlab_snowflake.sfdc_opportunity_snapshot_history","model.gitlab_snowflake.sfdc_opportunity_xf","model.gitlab_snowflake.sfdc_opportunity_xf"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","sfdc","restricted_safe","sfdc_pipeline_waterfall"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/sfdc/restricted_safe/sfdc_pipeline_waterfall.sql","original_file_path":"models/legacy/sfdc/restricted_safe/sfdc_pipeline_waterfall.sql","name":"sfdc_pipeline_waterfall","alias":"sfdc_pipeline_waterfall","checksum":{"name":"sha256","checksum":"eb751589e0732b2961a6672a0a9707e61cd8c9cdda3984025efc19eb65502e2f"},"tags":["safe"],"refs":[["date_details"],["date_details"],["sfdc_accounts_xf"],["sfdc_accounts_xf"],["sfdc_opportunity_snapshot_history"],["sfdc_opportunity_snapshot_history"],["sfdc_opportunity_xf"],["sfdc_opportunity_xf"]],"sources":[],"metrics":[],"description":"Model to describe pipeline movement from the first day of the quarter to the first day of the following quarter.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/sfdc/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/sfdc/restricted_safe/sfdc_pipeline_waterfall.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033764.8895211,"compiled_sql":"$40","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.sfdc_pipeline_waterfall","label":"sfdc_pipeline_waterfall"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_INVOICE_ITEMS_DETAIL_REPORT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"INVOICE_NUMBER":{"type":"TEXT","index":1,"name":"INVOICE_NUMBER","comment":null,"display_name":"invoice_number"},"INVOICE_ITEM_ID":{"type":"TEXT","index":2,"name":"invoice_item_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"invoice_item_id"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":4,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_TYPE":{"type":"TEXT","index":5,"name":"ACCOUNT_TYPE","comment":null,"display_name":"account_type"},"INVOICE_DATE":{"type":"DATE","index":6,"name":"INVOICE_DATE","comment":null,"display_name":"invoice_date"},"PRODUCT_NAME":{"type":"TEXT","index":7,"name":"PRODUCT_NAME","comment":null,"display_name":"product_name"},"RATE_PLAN_NAME":{"type":"TEXT","index":8,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"QUANTITY":{"type":"FLOAT","index":9,"name":"QUANTITY","comment":null,"display_name":"quantity"},"INVOICE_ITEM_UNIT_PRICE":{"type":"FLOAT","index":10,"name":"INVOICE_ITEM_UNIT_PRICE","comment":null,"display_name":"invoice_item_unit_price"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":11,"name":"INVOICE_ITEM_CHARGE_AMOUNT","comment":null,"display_name":"invoice_item_charge_amount"},"ANNUAL_PRICE":{"type":"FLOAT","index":12,"name":"ANNUAL_PRICE","comment":null,"display_name":"annual_price"},"QUANTITY_TIMES_ANNUAL":{"type":"FLOAT","index":13,"name":"QUANTITY_TIMES_ANNUAL","comment":null,"display_name":"quantity_times_annual"},"ULTIMATE_PARENT_SEGMENT":{"type":"TEXT","index":14,"name":"ULTIMATE_PARENT_SEGMENT","comment":null,"display_name":"ultimate_parent_segment"},"PRODUCT_CATEGORY":{"type":"TEXT","index":15,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"INVOICE_MONTH":{"type":"DATE","index":16,"name":"INVOICE_MONTH","comment":null,"display_name":"invoice_month"},"FISCAL_PERIOD":{"type":"TEXT","index":17,"name":"FISCAL_PERIOD","comment":null,"display_name":"fiscal_period"},"LIST_PRICE":{"type":"FLOAT","index":18,"name":"LIST_PRICE","comment":null,"display_name":"list_price"},"DISCOUNT":{"type":"FLOAT","index":19,"name":"DISCOUNT","comment":null,"display_name":"discount"},"LIST_PRICE_TIMES_QUANTITY":{"type":"FLOAT","index":20,"name":"LIST_PRICE_TIMES_QUANTITY","comment":null,"display_name":"list_price_times_quantity"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":16339968,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_invoice_items_detail_report","raw_sql":"$41","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_deleted_accounts","model.gitlab_snowflake.sfdc_deleted_accounts","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_invoice_charges","model.gitlab_snowflake.zuora_invoice_charges","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_rate_plan_source","model.gitlab_snowflake.zuora_product_rate_plan_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_tier_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_tier_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_invoice_items_detail_report"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_invoice_items_detail_report.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_invoice_items_detail_report.sql","name":"zuora_invoice_items_detail_report","alias":"zuora_invoice_items_detail_report","checksum":{"name":"sha256","checksum":"52ded9393856b1f37b4e91f5caef3282816f3ca0a70bb006f60d2bfd35d1d3a5"},"tags":["safe"],"refs":[["date_details"],["date_details"],["sfdc_accounts_xf"],["sfdc_accounts_xf"],["sfdc_deleted_accounts"],["sfdc_deleted_accounts"],["zuora_account_source"],["zuora_account_source"],["zuora_invoice_charges"],["zuora_invoice_charges"],["zuora_product_source"],["zuora_product_source"],["zuora_product_rate_plan_source"],["zuora_product_rate_plan_source"],["zuora_product_rate_plan_charge_source"],["zuora_product_rate_plan_charge_source"],["zuora_product_rate_plan_charge_tier_source"],["zuora_product_rate_plan_charge_tier_source"]],"sources":[],"metrics":[],"description":"Report that provides discounting insights by comparing list prices to invoice prices. The report also enriches invoice item details with Salesforce customer information.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_invoice_items_detail_report.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.214691,"compiled_sql":"$42","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_invoice_items_detail_report","label":"zuora_invoice_items_detail_report"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_NAMESPACE_HISTORICAL_MONTHLY_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"SNAPSHOT_MONTH","comment":null,"display_name":"snapshot_month"},"SNAPSHOT_DAY_NAMESPACE_ID":{"type":"TEXT","index":2,"name":"SNAPSHOT_DAY_NAMESPACE_ID","comment":null,"display_name":"snapshot_day_namespace_id"},"SNAPSHOT_DAY":{"type":"DATE","index":3,"name":"SNAPSHOT_DAY","comment":null,"display_name":"snapshot_day"},"NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":5,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"OWNER_ID":{"type":"NUMBER","index":6,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":7,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"VISIBILITY_LEVEL":{"type":"TEXT","index":8,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":9,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":10,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":11,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":13,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":14,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":15,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"SHARED_RUNNERS_SECONDS":{"type":"NUMBER","index":16,"name":"SHARED_RUNNERS_SECONDS","comment":null,"display_name":"shared_runners_seconds"},"SHARED_RUNNERS_SECONDS_LAST_RESET":{"type":"TIMESTAMP_NTZ","index":17,"name":"SHARED_RUNNERS_SECONDS_LAST_RESET","comment":null,"display_name":"shared_runners_seconds_last_reset"},"REPOSITORY_SIZE":{"type":"NUMBER","index":18,"name":"REPOSITORY_SIZE","comment":null,"display_name":"repository_size"},"CONTAINER_REGISTRY_SIZE":{"type":"NUMBER","index":19,"name":"CONTAINER_REGISTRY_SIZE","comment":null,"display_name":"container_registry_size"},"LFS_OBJECTS_SIZE":{"type":"NUMBER","index":20,"name":"LFS_OBJECTS_SIZE","comment":null,"display_name":"lfs_objects_size"},"WIKI_SIZE":{"type":"NUMBER","index":21,"name":"WIKI_SIZE","comment":null,"display_name":"wiki_size"},"BUILD_ARTIFACTS_SIZE":{"type":"NUMBER","index":22,"name":"BUILD_ARTIFACTS_SIZE","comment":null,"display_name":"build_artifacts_size"},"STORAGE_SIZE":{"type":"NUMBER","index":23,"name":"STORAGE_SIZE","comment":null,"display_name":"storage_size"},"PACKAGES_SIZE":{"type":"NUMBER","index":24,"name":"PACKAGES_SIZE","comment":null,"display_name":"packages_size"},"CONCAT(snapshot_month, namespace_id)":{"name":"CONCAT(snapshot_month, namespace_id)","description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"CONCAT(snapshot_month, namespace_id)"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":42514714112,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_historical_monthly_xf","raw_sql":"$43","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_namespace_historical_monthly_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_namespace_historical_monthly_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespace_historical_monthly_xf.sql","name":"gitlab_dotcom_namespace_historical_monthly_xf","alias":"gitlab_dotcom_namespace_historical_monthly_xf","checksum":{"name":"sha256","checksum":"13cca51c513f9cba06986ef044898ab49bb11e5497710fb9752c31ea96fd4f29"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_namespace_historical_daily"],["gitlab_dotcom_namespace_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_statistics_historical_monthly"],["gitlab_dotcom_namespace_statistics_historical_monthly"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespace_historical_monthly_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3770046,"compiled_sql":"$44","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_namespace_historical_monthly_xf","label":"gitlab_dotcom_namespace_historical_monthly_xf"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"NETSUITE_ACTUALS_INCOME","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"TRANSACTION_ID":{"type":"FLOAT","index":1,"name":"TRANSACTION_ID","comment":null,"display_name":"transaction_id"},"EXTERNAL_REF_NUMBER":{"type":"TEXT","index":2,"name":"EXTERNAL_REF_NUMBER","comment":null,"display_name":"external_ref_number"},"TRANSACTION_EXT_ID":{"type":"TEXT","index":3,"name":"TRANSACTION_EXT_ID","comment":null,"display_name":"transaction_ext_id"},"DOCUMENT_ID":{"type":"TEXT","index":4,"name":"DOCUMENT_ID","comment":null,"display_name":"document_id"},"ACCOUNT_ID":{"type":"FLOAT","index":5,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":6,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_FULL_NAME":{"type":"TEXT","index":7,"name":"ACCOUNT_FULL_NAME","comment":null,"display_name":"account_full_name"},"UNIQUE_ACCOUNT_NAME":{"type":"TEXT","index":8,"name":"UNIQUE_ACCOUNT_NAME","comment":null,"display_name":"unique_account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":9,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"PARENT_ACCOUNT_NUMBER":{"type":"TEXT","index":10,"name":"PARENT_ACCOUNT_NUMBER","comment":null,"display_name":"parent_account_number"},"UNIQUE_ACCOUNT_NUMBER":{"type":"TEXT","index":11,"name":"UNIQUE_ACCOUNT_NUMBER","comment":null,"display_name":"unique_account_number"},"ACTUAL_AMOUNT":{"type":"FLOAT","index":12,"name":"ACTUAL_AMOUNT","comment":null,"display_name":"actual_amount"},"INCOME_STATEMENT_GROUPING":{"type":"TEXT","index":13,"name":"INCOME_STATEMENT_GROUPING","comment":null,"display_name":"income_statement_grouping"},"TRANSACTION_LINES_MEMO":{"type":"TEXT","index":14,"name":"TRANSACTION_LINES_MEMO","comment":null,"display_name":"transaction_lines_memo"},"ENTITY_NAME":{"type":"TEXT","index":15,"name":"ENTITY_NAME","comment":null,"display_name":"entity_name"},"RECEIPT_URL":{"type":"TEXT","index":16,"name":"RECEIPT_URL","comment":null,"display_name":"receipt_url"},"STATUS":{"type":"TEXT","index":17,"name":"STATUS","comment":null,"display_name":"status"},"TRANSACTION_TYPE":{"type":"TEXT","index":18,"name":"TRANSACTION_TYPE","comment":null,"display_name":"transaction_type"},"CLASS_ID":{"type":"FLOAT","index":19,"name":"CLASS_ID","comment":null,"display_name":"class_id"},"CLASS_NAME":{"type":"TEXT","index":20,"name":"CLASS_NAME","comment":null,"display_name":"class_name"},"DEPARTMENT_ID":{"type":"FLOAT","index":21,"name":"DEPARTMENT_ID","comment":null,"display_name":"department_id"},"DEPARTMENT_NAME":{"type":"TEXT","index":22,"name":"DEPARTMENT_NAME","comment":null,"display_name":"department_name"},"PARENT_DEPARTMENT_NAME":{"type":"TEXT","index":23,"name":"PARENT_DEPARTMENT_NAME","comment":null,"display_name":"parent_department_name"},"ACCOUNTING_PERIOD_ID":{"type":"FLOAT","index":24,"name":"ACCOUNTING_PERIOD_ID","comment":null,"display_name":"accounting_period_id"},"ACCOUNTING_PERIOD":{"type":"DATE","index":25,"name":"ACCOUNTING_PERIOD","comment":null,"display_name":"accounting_period"},"ACCOUNTING_PERIOD_NAME":{"type":"TEXT","index":26,"name":"ACCOUNTING_PERIOD_NAME","comment":null,"display_name":"accounting_period_name"},"FISCAL_YEAR":{"type":"NUMBER","index":27,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":28,"name":"FISCAL_QUARTER","comment":null,"display_name":"fiscal_quarter"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":29,"name":"FISCAL_QUARTER_NAME","comment":null,"display_name":"fiscal_quarter_name"},"COST_CATEGORY_LEVEL_1":{"type":"TEXT","index":30,"name":"COST_CATEGORY_LEVEL_1","comment":null,"display_name":"cost_category_level_1"},"COST_CATEGORY_LEVEL_2":{"type":"TEXT","index":31,"name":"COST_CATEGORY_LEVEL_2","comment":null,"display_name":"cost_category_level_2"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 23:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1154048,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.netsuite_actuals_income","raw_sql":"$45","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.netsuite_transactions_source","model.gitlab_snowflake.netsuite_transactions_source","model.gitlab_snowflake.netsuite_transaction_lines_xf","model.gitlab_snowflake.netsuite_transaction_lines_xf","model.gitlab_snowflake.netsuite_accounting_periods_source","model.gitlab_snowflake.netsuite_accounting_periods_source","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_classes","model.gitlab_snowflake.netsuite_classes","model.gitlab_snowflake.netsuite_subsidiaries_source","model.gitlab_snowflake.netsuite_subsidiaries_source","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_consolidated_exchange_rates","model.gitlab_snowflake.netsuite_consolidated_exchange_rates","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","seed.gitlab_snowflake.netsuite_expense_cost_category","seed.gitlab_snowflake.netsuite_expense_cost_category"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","netsuite","restricted_safe","netsuite_actuals_income"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/netsuite/restricted_safe/netsuite_actuals_income.sql","original_file_path":"models/legacy/netsuite/restricted_safe/netsuite_actuals_income.sql","name":"netsuite_actuals_income","alias":"netsuite_actuals_income","checksum":{"name":"sha256","checksum":"b539cecb8d944b5b3591dda5ff8b7dbd399a01841011d5903ea2a6bbd14c1b6d"},"tags":["safe"],"refs":[["netsuite_transactions_source"],["netsuite_transactions_source"],["netsuite_transaction_lines_xf"],["netsuite_transaction_lines_xf"],["netsuite_accounting_periods_source"],["netsuite_accounting_periods_source"],["netsuite_accounts_xf"],["netsuite_accounts_xf"],["netsuite_classes"],["netsuite_classes"],["netsuite_subsidiaries_source"],["netsuite_subsidiaries_source"],["netsuite_departments_xf"],["netsuite_departments_xf"],["netsuite_consolidated_exchange_rates"],["netsuite_consolidated_exchange_rates"],["date_details"],["date_details"],["netsuite_expense_cost_category"],["netsuite_expense_cost_category"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/netsuite/restricted_safe/netsuite_actuals_income.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033720.4534264,"compiled_sql":"$46","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.netsuite_actuals_income","label":"netsuite_actuals_income"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_NON_GAAP_REVENUE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNTING_PERIOD":{"type":"DATE","index":1,"name":"ACCOUNTING_PERIOD","comment":null,"display_name":"accounting_period"},"ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_number"},"CRM_ID":{"type":"TEXT","index":4,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"COUNTRY":{"type":"TEXT","index":5,"name":"COUNTRY","comment":null,"display_name":"country"},"CURRENCY":{"type":"TEXT","index":6,"name":"CURRENCY","comment":null,"display_name":"currency"},"RATE_PLAN_NAME":{"type":"TEXT","index":7,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":8,"name":"rate_plan_charge_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"rate_plan_charge_name"},"PRODUCT_CATEGORY":{"type":"TEXT","index":9,"name":"product_category","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":10,"name":"DELIVERY","comment":null,"display_name":"delivery"},"PRODUCT_NAME":{"type":"TEXT","index":11,"name":"PRODUCT_NAME","comment":null,"display_name":"product_name"},"REVENUE_AMT":{"type":"FLOAT","index":12,"name":"REVENUE_AMT","comment":null,"display_name":"revenue_amt"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":35159040,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_non_gaap_revenue","raw_sql":"$47","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.delivery","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_revenue_schedule_item_source","model.gitlab_snowflake.zuora_revenue_schedule_item_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_non_gaap_revenue"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_non_gaap_revenue.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_non_gaap_revenue.sql","name":"zuora_non_gaap_revenue","alias":"zuora_non_gaap_revenue","checksum":{"name":"sha256","checksum":"c17ea65af9db22012eda5f867b77ce78e6b2b252c1b74dcf86c43bdb718b0cc6"},"tags":["safe"],"refs":[["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["zuora_accounting_period_source"],["zuora_accounting_period_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_product_source"],["zuora_product_source"],["zuora_revenue_schedule_item_source"],["zuora_revenue_schedule_item_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"]],"sources":[],"metrics":[],"description":"Base model for Zuora Non-GAAP Revenue","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_non_gaap_revenue.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2578363,"compiled_sql":"$48","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_non_gaap_revenue","label":"zuora_non_gaap_revenue"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"NETSUITE_ACTUALS_COGS_OPEX","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"TRANSACTION_ID":{"type":"FLOAT","index":1,"name":"TRANSACTION_ID","comment":null,"display_name":"transaction_id"},"EXTERNAL_REF_NUMBER":{"type":"TEXT","index":2,"name":"EXTERNAL_REF_NUMBER","comment":null,"display_name":"external_ref_number"},"TRANSACTION_EXT_ID":{"type":"TEXT","index":3,"name":"TRANSACTION_EXT_ID","comment":null,"display_name":"transaction_ext_id"},"DOCUMENT_ID":{"type":"TEXT","index":4,"name":"DOCUMENT_ID","comment":null,"display_name":"document_id"},"ACCOUNT_ID":{"type":"FLOAT","index":5,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":6,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_FULL_NAME":{"type":"TEXT","index":7,"name":"ACCOUNT_FULL_NAME","comment":null,"display_name":"account_full_name"},"UNIQUE_ACCOUNT_NAME":{"type":"TEXT","index":8,"name":"UNIQUE_ACCOUNT_NAME","comment":null,"display_name":"unique_account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":9,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"PARENT_ACCOUNT_NUMBER":{"type":"TEXT","index":10,"name":"PARENT_ACCOUNT_NUMBER","comment":null,"display_name":"parent_account_number"},"UNIQUE_ACCOUNT_NUMBER":{"type":"TEXT","index":11,"name":"UNIQUE_ACCOUNT_NUMBER","comment":null,"display_name":"unique_account_number"},"ACTUAL_AMOUNT":{"type":"FLOAT","index":12,"name":"ACTUAL_AMOUNT","comment":null,"display_name":"actual_amount"},"INCOME_STATEMENT_GROUPING":{"type":"TEXT","index":13,"name":"INCOME_STATEMENT_GROUPING","comment":null,"display_name":"income_statement_grouping"},"TRANSACTION_LINES_MEMO":{"type":"TEXT","index":14,"name":"TRANSACTION_LINES_MEMO","comment":null,"display_name":"transaction_lines_memo"},"ENTITY_NAME":{"type":"TEXT","index":15,"name":"ENTITY_NAME","comment":null,"display_name":"entity_name"},"RECEIPT_URL":{"type":"TEXT","index":16,"name":"RECEIPT_URL","comment":null,"display_name":"receipt_url"},"STATUS":{"type":"TEXT","index":17,"name":"STATUS","comment":null,"display_name":"status"},"TRANSACTION_TYPE":{"type":"TEXT","index":18,"name":"TRANSACTION_TYPE","comment":null,"display_name":"transaction_type"},"CLASS_ID":{"type":"FLOAT","index":19,"name":"CLASS_ID","comment":null,"display_name":"class_id"},"CLASS_NAME":{"type":"TEXT","index":20,"name":"CLASS_NAME","comment":null,"display_name":"class_name"},"DEPARTMENT_ID":{"type":"FLOAT","index":21,"name":"DEPARTMENT_ID","comment":null,"display_name":"department_id"},"DEPARTMENT_NAME":{"type":"TEXT","index":22,"name":"DEPARTMENT_NAME","comment":null,"display_name":"department_name"},"PARENT_DEPARTMENT_NAME":{"type":"TEXT","index":23,"name":"PARENT_DEPARTMENT_NAME","comment":null,"display_name":"parent_department_name"},"ACCOUNTING_PERIOD_ID":{"type":"FLOAT","index":24,"name":"ACCOUNTING_PERIOD_ID","comment":null,"display_name":"accounting_period_id"},"ACCOUNTING_PERIOD":{"type":"DATE","index":25,"name":"ACCOUNTING_PERIOD","comment":null,"display_name":"accounting_period"},"ACCOUNTING_PERIOD_NAME":{"type":"TEXT","index":26,"name":"ACCOUNTING_PERIOD_NAME","comment":null,"display_name":"accounting_period_name"},"FISCAL_YEAR":{"type":"NUMBER","index":27,"name":"FISCAL_YEAR","comment":null,"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":28,"name":"FISCAL_QUARTER","comment":null,"display_name":"fiscal_quarter"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":29,"name":"FISCAL_QUARTER_NAME","comment":null,"display_name":"fiscal_quarter_name"},"COST_CATEGORY_LEVEL_1":{"type":"TEXT","index":30,"name":"COST_CATEGORY_LEVEL_1","comment":null,"display_name":"cost_category_level_1"},"COST_CATEGORY_LEVEL_2":{"type":"TEXT","index":31,"name":"COST_CATEGORY_LEVEL_2","comment":null,"display_name":"cost_category_level_2"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 23:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":37383168,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.netsuite_actuals_cogs_opex","raw_sql":"$49","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.netsuite_transactions_source","model.gitlab_snowflake.netsuite_transactions_source","model.gitlab_snowflake.netsuite_transaction_lines_xf","model.gitlab_snowflake.netsuite_transaction_lines_xf","model.gitlab_snowflake.netsuite_accounting_periods","model.gitlab_snowflake.netsuite_accounting_periods","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_accounts_xf","model.gitlab_snowflake.netsuite_classes","model.gitlab_snowflake.netsuite_classes","model.gitlab_snowflake.netsuite_subsidiaries_source","model.gitlab_snowflake.netsuite_subsidiaries_source","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_departments_xf","model.gitlab_snowflake.netsuite_consolidated_exchange_rates","model.gitlab_snowflake.netsuite_consolidated_exchange_rates","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","seed.gitlab_snowflake.netsuite_expense_cost_category","seed.gitlab_snowflake.netsuite_expense_cost_category"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","netsuite","restricted_safe","netsuite_actuals_cogs_opex"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/netsuite/restricted_safe/netsuite_actuals_cogs_opex.sql","original_file_path":"models/legacy/netsuite/restricted_safe/netsuite_actuals_cogs_opex.sql","name":"netsuite_actuals_cogs_opex","alias":"netsuite_actuals_cogs_opex","checksum":{"name":"sha256","checksum":"daf9746d43e3f1a5dfa6121d22ceb645381ef4176b6befea56387b5687166fa1"},"tags":["safe"],"refs":[["netsuite_transactions_source"],["netsuite_transactions_source"],["netsuite_transaction_lines_xf"],["netsuite_transaction_lines_xf"],["netsuite_accounting_periods"],["netsuite_accounting_periods"],["netsuite_accounts_xf"],["netsuite_accounts_xf"],["netsuite_classes"],["netsuite_classes"],["netsuite_subsidiaries_source"],["netsuite_subsidiaries_source"],["netsuite_departments_xf"],["netsuite_departments_xf"],["netsuite_consolidated_exchange_rates"],["netsuite_consolidated_exchange_rates"],["date_details"],["date_details"],["netsuite_expense_cost_category"],["netsuite_expense_cost_category"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/netsuite/restricted_safe/netsuite_actuals_cogs_opex.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033720.381482,"compiled_sql":"$4a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.netsuite_actuals_cogs_opex","label":"netsuite_actuals_cogs_opex"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"date_day","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_date_day"],"unique_id":"test.gitlab_snowflake.not_null_date_details_date_day.072d4c295d","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_date_day.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_date_day","alias":"not_null_date_details_date_day","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_date_day.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4272661,"compiled_sql":"\n    \n    \n\n\n\nselect date_day\nfrom \"PROD\".legacy.date_details\nwhere date_day is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"date_day","file_key_name":"models.date_details","label":"not_null_date_details_date_day"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"date_day","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","unique_date_details_date_day"],"unique_id":"test.gitlab_snowflake.unique_date_details_date_day.8453b87114","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_date_details_date_day.sql","original_file_path":"models/legacy/date/schema.yml","name":"unique_date_details_date_day","alias":"unique_date_details_date_day","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/unique_date_details_date_day.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4329739,"compiled_sql":"\n    \n    \n\nselect\n    date_day as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".legacy.date_details\nwhere date_day is not null\ngroup by date_day\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"date_day","file_key_name":"models.date_details","label":"unique_date_details_date_day"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"date_actual","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_date_actual"],"unique_id":"test.gitlab_snowflake.not_null_date_details_date_actual.5be34cb3e4","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_date_actual.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_date_actual","alias":"not_null_date_details_date_actual","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_date_actual.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.437807,"compiled_sql":"\n    \n    \n\n\n\nselect date_actual\nfrom \"PROD\".legacy.date_details\nwhere date_actual is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"date_actual","file_key_name":"models.date_details","label":"not_null_date_details_date_actual"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"date_actual","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","unique_date_details_date_actual"],"unique_id":"test.gitlab_snowflake.unique_date_details_date_actual.6a8df4bc4d","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_date_details_date_actual.sql","original_file_path":"models/legacy/date/schema.yml","name":"unique_date_details_date_actual","alias":"unique_date_details_date_actual","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/unique_date_details_date_actual.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.441924,"compiled_sql":"\n    \n    \n\nselect\n    date_actual as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".legacy.date_details\nwhere date_actual is not null\ngroup by date_actual\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"date_actual","file_key_name":"models.date_details","label":"unique_date_details_date_actual"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_name","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_name"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_name.07847fa86c","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_name.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_name","alias":"not_null_date_details_day_name","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_name.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4456947,"compiled_sql":"\n    \n    \n\n\n\nselect day_name\nfrom \"PROD\".legacy.date_details\nwhere day_name is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_name","file_key_name":"models.date_details","label":"not_null_date_details_day_name"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"month_actual","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_month_actual"],"unique_id":"test.gitlab_snowflake.not_null_date_details_month_actual.6ac39f9c6b","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_month_actual.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_month_actual","alias":"not_null_date_details_month_actual","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_month_actual.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4493465,"compiled_sql":"\n    \n    \n\n\n\nselect month_actual\nfrom \"PROD\".legacy.date_details\nwhere month_actual is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"month_actual","file_key_name":"models.date_details","label":"not_null_date_details_month_actual"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"year_actual","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_year_actual"],"unique_id":"test.gitlab_snowflake.not_null_date_details_year_actual.2876c19669","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_year_actual.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_year_actual","alias":"not_null_date_details_year_actual","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_year_actual.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4529498,"compiled_sql":"\n    \n    \n\n\n\nselect year_actual\nfrom \"PROD\".legacy.date_details\nwhere year_actual is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"year_actual","file_key_name":"models.date_details","label":"not_null_date_details_year_actual"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"quarter_actual","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_quarter_actual"],"unique_id":"test.gitlab_snowflake.not_null_date_details_quarter_actual.3c0befad11","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_quarter_actual.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_quarter_actual","alias":"not_null_date_details_quarter_actual","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_quarter_actual.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4568632,"compiled_sql":"\n    \n    \n\n\n\nselect quarter_actual\nfrom \"PROD\".legacy.date_details\nwhere quarter_actual is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"quarter_actual","file_key_name":"models.date_details","label":"not_null_date_details_quarter_actual"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_of_week","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_of_week"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_of_week.a5ca68f663","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_of_week.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_of_week","alias":"not_null_date_details_day_of_week","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_of_week.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.460498,"compiled_sql":"\n    \n    \n\n\n\nselect day_of_week\nfrom \"PROD\".legacy.date_details\nwhere day_of_week is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_of_week","file_key_name":"models.date_details","label":"not_null_date_details_day_of_week"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"first_day_of_week","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_first_day_of_week"],"unique_id":"test.gitlab_snowflake.not_null_date_details_first_day_of_week.1a905cd01e","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_first_day_of_week.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_first_day_of_week","alias":"not_null_date_details_first_day_of_week","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_first_day_of_week.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.464132,"compiled_sql":"\n    \n    \n\n\n\nselect first_day_of_week\nfrom \"PROD\".legacy.date_details\nwhere first_day_of_week is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"first_day_of_week","file_key_name":"models.date_details","label":"not_null_date_details_first_day_of_week"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"week_of_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_week_of_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_week_of_year.2ef1286c9c","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_week_of_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_week_of_year","alias":"not_null_date_details_week_of_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_week_of_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4676113,"compiled_sql":"\n    \n    \n\n\n\nselect week_of_year\nfrom \"PROD\".legacy.date_details\nwhere week_of_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"week_of_year","file_key_name":"models.date_details","label":"not_null_date_details_week_of_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_of_month","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_of_month"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_of_month.6fd233c226","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_of_month.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_of_month","alias":"not_null_date_details_day_of_month","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_of_month.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4715781,"compiled_sql":"\n    \n    \n\n\n\nselect day_of_month\nfrom \"PROD\".legacy.date_details\nwhere day_of_month is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_of_month","file_key_name":"models.date_details","label":"not_null_date_details_day_of_month"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_of_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_of_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_of_quarter.5d63aa1f69","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_of_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_of_quarter","alias":"not_null_date_details_day_of_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_of_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4753945,"compiled_sql":"\n    \n    \n\n\n\nselect day_of_quarter\nfrom \"PROD\".legacy.date_details\nwhere day_of_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_of_quarter","file_key_name":"models.date_details","label":"not_null_date_details_day_of_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_of_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_of_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_of_year.553463162f","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_of_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_of_year","alias":"not_null_date_details_day_of_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_of_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4788032,"compiled_sql":"\n    \n    \n\n\n\nselect day_of_year\nfrom \"PROD\".legacy.date_details\nwhere day_of_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_of_year","file_key_name":"models.date_details","label":"not_null_date_details_day_of_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"fiscal_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_fiscal_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_fiscal_year.71f01e56d7","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_fiscal_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_fiscal_year","alias":"not_null_date_details_fiscal_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_fiscal_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.482282,"compiled_sql":"\n    \n    \n\n\n\nselect fiscal_year\nfrom \"PROD\".legacy.date_details\nwhere fiscal_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"fiscal_year","file_key_name":"models.date_details","label":"not_null_date_details_fiscal_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"fiscal_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_fiscal_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_fiscal_quarter.b64d65c6c4","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_fiscal_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_fiscal_quarter","alias":"not_null_date_details_fiscal_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_fiscal_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4857876,"compiled_sql":"\n    \n    \n\n\n\nselect fiscal_quarter\nfrom \"PROD\".legacy.date_details\nwhere fiscal_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"fiscal_quarter","file_key_name":"models.date_details","label":"not_null_date_details_fiscal_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_of_fiscal_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_of_fiscal_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_of_fiscal_quarter.b176b8b462","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_of_fiscal_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_of_fiscal_quarter","alias":"not_null_date_details_day_of_fiscal_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_of_fiscal_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4896657,"compiled_sql":"\n    \n    \n\n\n\nselect day_of_fiscal_quarter\nfrom \"PROD\".legacy.date_details\nwhere day_of_fiscal_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_of_fiscal_quarter","file_key_name":"models.date_details","label":"not_null_date_details_day_of_fiscal_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"day_of_fiscal_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_day_of_fiscal_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_day_of_fiscal_year.341ae58c4a","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_day_of_fiscal_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_day_of_fiscal_year","alias":"not_null_date_details_day_of_fiscal_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_day_of_fiscal_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.49307,"compiled_sql":"\n    \n    \n\n\n\nselect day_of_fiscal_year\nfrom \"PROD\".legacy.date_details\nwhere day_of_fiscal_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"day_of_fiscal_year","file_key_name":"models.date_details","label":"not_null_date_details_day_of_fiscal_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"month_name","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_month_name"],"unique_id":"test.gitlab_snowflake.not_null_date_details_month_name.228b63ca59","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_month_name.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_month_name","alias":"not_null_date_details_month_name","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_month_name.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4964838,"compiled_sql":"\n    \n    \n\n\n\nselect month_name\nfrom \"PROD\".legacy.date_details\nwhere month_name is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"month_name","file_key_name":"models.date_details","label":"not_null_date_details_month_name"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"first_day_of_month","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_first_day_of_month"],"unique_id":"test.gitlab_snowflake.not_null_date_details_first_day_of_month.5c5af4491e","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_first_day_of_month.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_first_day_of_month","alias":"not_null_date_details_first_day_of_month","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_first_day_of_month.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.4999204,"compiled_sql":"\n    \n    \n\n\n\nselect first_day_of_month\nfrom \"PROD\".legacy.date_details\nwhere first_day_of_month is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"first_day_of_month","file_key_name":"models.date_details","label":"not_null_date_details_first_day_of_month"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"last_day_of_month","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_last_day_of_month"],"unique_id":"test.gitlab_snowflake.not_null_date_details_last_day_of_month.f785a0b84c","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_last_day_of_month.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_last_day_of_month","alias":"not_null_date_details_last_day_of_month","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_last_day_of_month.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.504018,"compiled_sql":"\n    \n    \n\n\n\nselect last_day_of_month\nfrom \"PROD\".legacy.date_details\nwhere last_day_of_month is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"last_day_of_month","file_key_name":"models.date_details","label":"not_null_date_details_last_day_of_month"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"first_day_of_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_first_day_of_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_first_day_of_year.53f470ebbb","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_first_day_of_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_first_day_of_year","alias":"not_null_date_details_first_day_of_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_first_day_of_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.507543,"compiled_sql":"\n    \n    \n\n\n\nselect first_day_of_year\nfrom \"PROD\".legacy.date_details\nwhere first_day_of_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"first_day_of_year","file_key_name":"models.date_details","label":"not_null_date_details_first_day_of_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"last_day_of_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_last_day_of_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_last_day_of_year.a45c2ac599","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_last_day_of_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_last_day_of_year","alias":"not_null_date_details_last_day_of_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_last_day_of_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.51103,"compiled_sql":"\n    \n    \n\n\n\nselect last_day_of_year\nfrom \"PROD\".legacy.date_details\nwhere last_day_of_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"last_day_of_year","file_key_name":"models.date_details","label":"not_null_date_details_last_day_of_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"first_day_of_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_first_day_of_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_first_day_of_quarter.d5f1d8895d","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_first_day_of_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_first_day_of_quarter","alias":"not_null_date_details_first_day_of_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_first_day_of_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.514474,"compiled_sql":"\n    \n    \n\n\n\nselect first_day_of_quarter\nfrom \"PROD\".legacy.date_details\nwhere first_day_of_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"first_day_of_quarter","file_key_name":"models.date_details","label":"not_null_date_details_first_day_of_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"last_day_of_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_last_day_of_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_last_day_of_quarter.e65cdaf696","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_last_day_of_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_last_day_of_quarter","alias":"not_null_date_details_last_day_of_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_last_day_of_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5180738,"compiled_sql":"\n    \n    \n\n\n\nselect last_day_of_quarter\nfrom \"PROD\".legacy.date_details\nwhere last_day_of_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"last_day_of_quarter","file_key_name":"models.date_details","label":"not_null_date_details_last_day_of_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"first_day_of_fiscal_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_first_day_of_fiscal_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_first_day_of_fiscal_quarter.bdce1ce832","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_first_day_of_fiscal_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_first_day_of_fiscal_quarter","alias":"not_null_date_details_first_day_of_fiscal_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_first_day_of_fiscal_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5218325,"compiled_sql":"\n    \n    \n\n\n\nselect first_day_of_fiscal_quarter\nfrom \"PROD\".legacy.date_details\nwhere first_day_of_fiscal_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"first_day_of_fiscal_quarter","file_key_name":"models.date_details","label":"not_null_date_details_first_day_of_fiscal_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"last_day_of_fiscal_quarter","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_last_day_of_fiscal_quarter"],"unique_id":"test.gitlab_snowflake.not_null_date_details_last_day_of_fiscal_quarter.3c60ad0ff5","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_last_day_of_fiscal_quarter.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_last_day_of_fiscal_quarter","alias":"not_null_date_details_last_day_of_fiscal_quarter","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_last_day_of_fiscal_quarter.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5255396,"compiled_sql":"\n    \n    \n\n\n\nselect last_day_of_fiscal_quarter\nfrom \"PROD\".legacy.date_details\nwhere last_day_of_fiscal_quarter is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"last_day_of_fiscal_quarter","file_key_name":"models.date_details","label":"not_null_date_details_last_day_of_fiscal_quarter"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"first_day_of_fiscal_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_first_day_of_fiscal_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_first_day_of_fiscal_year.0c313ca8fd","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_first_day_of_fiscal_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_first_day_of_fiscal_year","alias":"not_null_date_details_first_day_of_fiscal_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_first_day_of_fiscal_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5290384,"compiled_sql":"\n    \n    \n\n\n\nselect first_day_of_fiscal_year\nfrom \"PROD\".legacy.date_details\nwhere first_day_of_fiscal_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"first_day_of_fiscal_year","file_key_name":"models.date_details","label":"not_null_date_details_first_day_of_fiscal_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"last_day_of_fiscal_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_last_day_of_fiscal_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_last_day_of_fiscal_year.58763445fe","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_last_day_of_fiscal_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_last_day_of_fiscal_year","alias":"not_null_date_details_last_day_of_fiscal_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_last_day_of_fiscal_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5324705,"compiled_sql":"\n    \n    \n\n\n\nselect last_day_of_fiscal_year\nfrom \"PROD\".legacy.date_details\nwhere last_day_of_fiscal_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"last_day_of_fiscal_year","file_key_name":"models.date_details","label":"not_null_date_details_last_day_of_fiscal_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"week_of_fiscal_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_week_of_fiscal_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_week_of_fiscal_year.948c13efe9","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_week_of_fiscal_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_week_of_fiscal_year","alias":"not_null_date_details_week_of_fiscal_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_week_of_fiscal_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5364377,"compiled_sql":"\n    \n    \n\n\n\nselect week_of_fiscal_year\nfrom \"PROD\".legacy.date_details\nwhere week_of_fiscal_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"week_of_fiscal_year","file_key_name":"models.date_details","label":"not_null_date_details_week_of_fiscal_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"month_of_fiscal_year","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_month_of_fiscal_year"],"unique_id":"test.gitlab_snowflake.not_null_date_details_month_of_fiscal_year.4dd8b35729","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_month_of_fiscal_year.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_month_of_fiscal_year","alias":"not_null_date_details_month_of_fiscal_year","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_month_of_fiscal_year.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5402138,"compiled_sql":"\n    \n    \n\n\n\nselect month_of_fiscal_year\nfrom \"PROD\".legacy.date_details\nwhere month_of_fiscal_year is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"month_of_fiscal_year","file_key_name":"models.date_details","label":"not_null_date_details_month_of_fiscal_year"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"last_day_of_week","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_last_day_of_week"],"unique_id":"test.gitlab_snowflake.not_null_date_details_last_day_of_week.7cd545c13e","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_last_day_of_week.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_last_day_of_week","alias":"not_null_date_details_last_day_of_week","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_last_day_of_week.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5437114,"compiled_sql":"\n    \n    \n\n\n\nselect last_day_of_week\nfrom \"PROD\".legacy.date_details\nwhere last_day_of_week is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"last_day_of_week","file_key_name":"models.date_details","label":"not_null_date_details_last_day_of_week"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"quarter_name","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_quarter_name"],"unique_id":"test.gitlab_snowflake.not_null_date_details_quarter_name.c568cc6ec0","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_quarter_name.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_quarter_name","alias":"not_null_date_details_quarter_name","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_quarter_name.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5472717,"compiled_sql":"\n    \n    \n\n\n\nselect quarter_name\nfrom \"PROD\".legacy.date_details\nwhere quarter_name is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"quarter_name","file_key_name":"models.date_details","label":"not_null_date_details_quarter_name"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"fiscal_quarter_name","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_fiscal_quarter_name"],"unique_id":"test.gitlab_snowflake.not_null_date_details_fiscal_quarter_name.d97ed433e1","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_fiscal_quarter_name.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_fiscal_quarter_name","alias":"not_null_date_details_fiscal_quarter_name","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_fiscal_quarter_name.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5510352,"compiled_sql":"\n    \n    \n\n\n\nselect fiscal_quarter_name\nfrom \"PROD\".legacy.date_details\nwhere fiscal_quarter_name is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"fiscal_quarter_name","file_key_name":"models.date_details","label":"not_null_date_details_fiscal_quarter_name"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"fiscal_quarter_name_fy","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_fiscal_quarter_name_fy"],"unique_id":"test.gitlab_snowflake.not_null_date_details_fiscal_quarter_name_fy.5ed046146d","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_fiscal_quarter_name_fy.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_fiscal_quarter_name_fy","alias":"not_null_date_details_fiscal_quarter_name_fy","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_fiscal_quarter_name_fy.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.5565486,"compiled_sql":"\n    \n    \n\n\n\nselect fiscal_quarter_name_fy\nfrom \"PROD\".legacy.date_details\nwhere fiscal_quarter_name_fy is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"fiscal_quarter_name_fy","file_key_name":"models.date_details","label":"not_null_date_details_fiscal_quarter_name_fy"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"is_holiday","model":"{{ get_where_subquery(ref('date_details')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.date_details"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","legacy","date","not_null_date_details_is_holiday"],"unique_id":"test.gitlab_snowflake.not_null_date_details_is_holiday.b92de90ce9","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_date_details_is_holiday.sql","original_file_path":"models/legacy/date/schema.yml","name":"not_null_date_details_is_holiday","alias":"not_null_date_details_is_holiday","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["date_details"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/schema.yml/not_null_date_details_is_holiday.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033764.560004,"compiled_sql":"\n    \n    \n\n\n\nselect is_holiday\nfrom \"PROD\".legacy.date_details\nwhere is_holiday is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"is_holiday","file_key_name":"models.date_details","label":"not_null_date_details_is_holiday"}]},"node":{"resource_type":"model","name":"date_details","unique_id":"model.gitlab_snowflake.date_details"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L10",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_DATE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_ID":{"type":"NUMBER","index":1,"name":"date_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_id"},"DATE_DAY":{"type":"DATE","index":2,"name":"date_day","comment":null,"description":"Calendar date, e.g. '2019-02-02'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"date_day"},"DATE_ACTUAL":{"type":"DATE","index":3,"name":"date_actual","comment":null,"description":"Matches `date_day`, duplicated for ease of use","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"date_actual"},"DAY_NAME":{"type":"TEXT","index":4,"name":"day_name","comment":null,"description":"Abbreviated name of the day of the week, e.g. 'Sat' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_name"},"MONTH_ACTUAL":{"type":"NUMBER","index":5,"name":"month_actual","comment":null,"description":"Number for the calendar month of the year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_actual"},"YEAR_ACTUAL":{"type":"NUMBER","index":6,"name":"year_actual","comment":null,"description":"Calendar year, e.g. '2019' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"year_actual"},"QUARTER_ACTUAL":{"type":"NUMBER","index":7,"name":"quarter_actual","comment":null,"description":"Calendar quarter, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarter_actual"},"DAY_OF_WEEK":{"type":"NUMBER","index":8,"name":"day_of_week","comment":null,"description":"Number of the day of the week, with Sunday = 1 and Saturday = 7","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_week"},"FIRST_DAY_OF_WEEK":{"type":"DATE","index":9,"name":"first_day_of_week","comment":null,"description":"Calendar date of the first Sunday of that week, e.g. '2019-01-27' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_week"},"WEEK_OF_YEAR":{"type":"NUMBER","index":10,"name":"week_of_year","comment":null,"description":"Calendar week of year, e.g. '5' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"week_of_year"},"DAY_OF_MONTH":{"type":"NUMBER","index":11,"name":"day_of_month","comment":null,"description":"Day Number of the month, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_month"},"DAY_OF_QUARTER":{"type":"NUMBER","index":12,"name":"day_of_quarter","comment":null,"description":"Day Number from the start of the calendar quarter, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_quarter"},"DAY_OF_YEAR":{"type":"NUMBER","index":13,"name":"day_of_year","comment":null,"description":"Day Number from the start of the calendar year, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_year"},"FISCAL_YEAR":{"type":"NUMBER","index":14,"name":"fiscal_year","comment":null,"description":"Fiscal year for the date, e.g. '2020' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":15,"name":"fiscal_quarter","comment":null,"description":"Fiscal quarter for the date, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter"},"DAY_OF_FISCAL_QUARTER":{"type":"NUMBER","index":16,"name":"day_of_fiscal_quarter","comment":null,"description":"Day Number from the start of the fiscal quarter, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_fiscal_quarter"},"DAY_OF_FISCAL_YEAR":{"type":"NUMBER","index":17,"name":"day_of_fiscal_year","comment":null,"description":"Day Number from the start of the fiscal year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_fiscal_year"},"MONTH_NAME":{"type":"TEXT","index":18,"name":"month_name","comment":null,"description":"The full month name for any calendar month, e.g. 'February' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_name"},"FIRST_DAY_OF_MONTH":{"type":"DATE","index":19,"name":"first_day_of_month","comment":null,"description":"The first day of a calendar month, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_month"},"LAST_DAY_OF_MONTH":{"type":"DATE","index":20,"name":"last_day_of_month","comment":null,"description":"The last day of a calendar month, e.g. '2019-02-28' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_month"},"FIRST_DAY_OF_YEAR":{"type":"DATE","index":21,"name":"first_day_of_year","comment":null,"description":"The first day of a calendar year, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_year"},"LAST_DAY_OF_YEAR":{"type":"DATE","index":22,"name":"last_day_of_year","comment":null,"description":"The last day of a calendar year, e.g. '2019-12-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_year"},"FIRST_DAY_OF_QUARTER":{"type":"DATE","index":23,"name":"first_day_of_quarter","comment":null,"description":"The first day of a calendar quarter, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_quarter"},"LAST_DAY_OF_QUARTER":{"type":"DATE","index":24,"name":"last_day_of_quarter","comment":null,"description":"The last day of a calendar quarter, e.g. '2019-03-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_quarter"},"FIRST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":25,"name":"first_day_of_fiscal_quarter","comment":null,"description":"The first day of the fiscal quarter, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_quarter"},"LAST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":26,"name":"last_day_of_fiscal_quarter","comment":null,"description":"The last day of the fiscal quarter, e.g. '2019-04-30' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_fiscal_quarter"},"FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":27,"name":"first_day_of_fiscal_year","comment":null,"description":"The first day of the fiscal year, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_year"},"LAST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":28,"name":"last_day_of_fiscal_year","comment":null,"description":"The last day of the fiscal year, e.g. '2020-01-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_fiscal_year"},"WEEK_OF_FISCAL_YEAR":{"type":"NUMBER","index":29,"name":"week_of_fiscal_year","comment":null,"description":"The week number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"week_of_fiscal_year"},"MONTH_OF_FISCAL_YEAR":{"type":"NUMBER","index":30,"name":"month_of_fiscal_year","comment":null,"description":"The month number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_of_fiscal_year"},"LAST_DAY_OF_WEEK":{"type":"DATE","index":31,"name":"last_day_of_week","comment":null,"description":"The Saturday of the week, e.g. '2019-02-02' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_week"},"QUARTER_NAME":{"type":"TEXT","index":32,"name":"quarter_name","comment":null,"description":"The name of the calendar quarter, e.g. '2019-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarter_name"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":33,"name":"fiscal_quarter_name","comment":null,"description":"The name of the fiscal quarter, e.g '2020-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":34,"name":"fiscal_quarter_name_fy","comment":null,"description":"The name of the fiscal quarter, e.g 'FY20-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name_fy"},"FISCAL_QUARTER_NUMBER_ABSOLUTE":{"type":"NUMBER","index":35,"name":"fiscal_quarter_number_absolute","comment":null,"description":"Monotonically increasing integer for each fiscal quarter. This allows for comparing the relative order of fiscal quarters.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_number_absolute"},"FISCAL_MONTH_NAME":{"type":"TEXT","index":36,"name":"fiscal_month_name","comment":null,"description":"The name of the fiscal month, e.g '2020-Feb' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_month_name"},"FISCAL_MONTH_NAME_FY":{"type":"TEXT","index":37,"name":"fiscal_month_name_fy","comment":null,"description":"The name of the fiscal month, e.g 'FY20-Feb' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_month_name_fy"},"HOLIDAY_DESC":{"type":"TEXT","index":38,"name":"holiday_desc","comment":null,"description":"The name of the holiday, if applicable","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"holiday_desc"},"IS_HOLIDAY":{"type":"BOOLEAN","index":39,"name":"is_holiday","comment":null,"description":"Whether or not it is a holiday","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_holiday"},"LAST_MONTH_OF_FISCAL_QUARTER":{"type":"DATE","index":40,"name":"last_month_of_fiscal_quarter","comment":null,"description":"Date indicating last month of fiscal quarter e.g '2020-04-01' for 2020-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_month_of_fiscal_quarter"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER":{"type":"BOOLEAN","index":41,"name":"is_first_day_of_last_month_of_fiscal_quarter","comment":null,"description":"Flag indicating date that is the first day of last month of fiscal quarter. E.g TRUE for '2020-04-01'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_day_of_last_month_of_fiscal_quarter"},"LAST_MONTH_OF_FISCAL_YEAR":{"type":"DATE","index":42,"name":"last_month_of_fiscal_year","comment":null,"description":"Date indicating last month of fiscal year e.g '2021-01-01' for 2020-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_month_of_fiscal_year"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR":{"type":"BOOLEAN","index":43,"name":"is_first_day_of_last_month_of_fiscal_year","comment":null,"description":"Flag indicating date that is the first day of last month of fiscal year. E.g TRUE for '2021-01-01'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_day_of_last_month_of_fiscal_year"},"SNAPSHOT_DATE_FPA":{"type":"DATE","index":44,"name":"snapshot_date_fpa","comment":null,"description":"8th calendar day of a month used for FP&A snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date_fpa"},"SNAPSHOT_DATE_BILLINGS":{"type":"DATE","index":45,"name":"snapshot_date_billings","comment":null,"description":"45 calendar day after a month begins used for Billings snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date_billings"},"DAYS_IN_MONTH_COUNT":{"type":"NUMBER","index":46,"name":"days_in_month_count","comment":null,"description":"Number of calendar days in the given month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_in_month_count"},"WEEK_OF_MONTH_NORMALISED":{"type":"NUMBER","index":47,"name":"WEEK_OF_MONTH_NORMALISED","comment":null,"display_name":"week_of_month_normalised"},"DAY_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":48,"name":"DAY_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"day_of_fiscal_quarter_normalised"},"WEEK_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":49,"name":"WEEK_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"week_of_fiscal_quarter_normalised"},"DAY_OF_FISCAL_YEAR_NORMALISED":{"type":"NUMBER","index":50,"name":"DAY_OF_FISCAL_YEAR_NORMALISED","comment":null,"display_name":"day_of_fiscal_year_normalised"},"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK":{"type":"NUMBER","index":51,"name":"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK","comment":null,"display_name":"is_first_day_of_fiscal_quarter_week"},"DAYS_UNTIL_LAST_DAY_OF_MONTH":{"type":"NUMBER","index":52,"name":"DAYS_UNTIL_LAST_DAY_OF_MONTH","comment":null,"display_name":"days_until_last_day_of_month"},"CURRENT_DATE_ACTUAL":{"type":"DATE","index":53,"name":"CURRENT_DATE_ACTUAL","comment":null,"display_name":"current_date_actual"},"CURRENT_FISCAL_YEAR":{"type":"NUMBER","index":54,"name":"CURRENT_FISCAL_YEAR","comment":null,"display_name":"current_fiscal_year"},"CURRENT_FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":55,"name":"CURRENT_FIRST_DAY_OF_FISCAL_YEAR","comment":null,"display_name":"current_first_day_of_fiscal_year"},"CURRENT_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":56,"name":"CURRENT_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"current_fiscal_quarter_name_fy"},"CURRENT_FIRST_DAY_OF_MONTH":{"type":"DATE","index":57,"name":"CURRENT_FIRST_DAY_OF_MONTH","comment":null,"display_name":"current_first_day_of_month"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 23:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":837632,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_date","raw_sql":"{{ config({\n    \"alias\": \"dim_date\"\n}) }}\n\nWITH dates AS (\n\n  SELECT\n    {{ dbt_utils.star(\n           from=ref('prep_date'), \n           except=['CREATED_BY','UPDATED_BY','MODEL_CREATED_DATE','MODEL_UPDATED_DATE','DBT_UPDATED_AT','DBT_CREATED_AT']\n           ) \n      }}\n  FROM {{ ref('prep_date') }}\n\n), final AS (\n\n  SELECT\n    {{ get_date_id('date_actual') }}                                AS date_id,\n    *\n  FROM dates\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@msendal\",\n    updated_by=\"@pempey\",\n    created_date=\"2020-06-01\",\n    updated_date=\"2023-01-09\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date"]},"config":{"enabled":true,"alias":"dim_date","schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_date"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_date.sql","original_file_path":"models/common/dimensions_shared/dim_date.sql","name":"dim_date","alias":"dim_date","checksum":{"name":"sha256","checksum":"d2d82ff12c2a5541fc719664fdbab66bec108395c3e6b2549434b0f07c9bd080"},"tags":[],"refs":[["prep_date"],["prep_date"],["prep_date"],["prep_date"]],"sources":[],"metrics":[],"description":"Dimensional table representing both calendar year and fiscal year date details.\n\nThe grain of the table is a calendar day.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_date.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"dim_date"},"created_at":1689033750.6328864,"compiled_sql":"$4b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_date","label":"dim_date"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527}]},"node":{"resource_type":"model","name":"date_details","unique_id":"model.gitlab_snowflake.date_details"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L4c",null,{"versions":{"Source":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('dim_date')}}\n\n)\n\nSELECT *\nFROM source","Compiled":"WITH source AS (\n\n    SELECT *\n    FROM \"PROD\".common.dim_date\n\n)\n\nSELECT *\nFROM source"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
