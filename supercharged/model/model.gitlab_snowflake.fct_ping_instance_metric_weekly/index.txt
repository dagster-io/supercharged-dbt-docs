1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.fct_ping_instance_metric_weekly","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.fct_ping_instance_metric_weekly\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.fct_ping_instance_metric_weekly","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.fct_ping_instance_metric_weekly\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.fct_ping_instance_metric_weekly","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
10:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
14:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
21:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
f:T911, **Description:** Atomic level instance Service Ping data for the last ping of the week per installation by ping and metric for 7-day metrics. This includes basic identifiers for easy joins out to dimension tables. This is a filtered version of `fct_ping_instance_metric`
- The data includes a single row per ping and metric
- Includes installation, instance, date, product, billing, and subscription identifiers

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude metrics that timed out during ping generation (`has_timed_out = FALSE`)
- Include 7-day metrics (`time_frame = '7d'`)
- Include metrics from the 'Last Ping of the Week' pings (`is_last_ping_of_week = TRUE`)
- Exclude metrics without values (`metric_value IS NOT NULL`)

**Business Logic in this Model:**
- `is_last_ping_of_week` = last ping created per calendar week per installation (`dim_installation_id`)
- `Inherited` - `has_timed_out` = `IFF(value = -1, TRUE, FALSE)`
- `Inherited` - `umau_value` = metric value from `usage_activity_by_stage_monthly.manage.events`
- `Inherited` - `dim_subscription_id` = `COALESCE(prep_subscription.dim_subscription_id, ping_payload.license_subscription_id)`

**Other Comments:**
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- Service Ping data is captured at a particular point in time with `all-time, 7_day and 28_day` metrics.  The metrics are only pertinent to the Ping Date and Time and can not be aggregated across Ping Dates. Service Pings are normally compared WoW, MoM, YoY,  etc.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 11:T4cb,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('dim_ping_instance', 'dim_ping_instance'),
    ('dim_ping_metric', 'dim_ping_metric')
    ])

}}

, fct_ping_instance_metric AS (

    SELECT
      {{ dbt_utils.star(from=ref('fct_ping_instance_metric'), except=['METRIC_VALUE', 'CREATED_BY', 'UPDATED_BY', 'MODEL_CREATED_DATE',
          'MODEL_UPDATED_DATE', 'DBT_CREATED_AT', 'DBT_UPDATED_AT']) }},
      TRY_TO_NUMBER(metric_value::TEXT) AS metric_value
    FROM {{ ref('fct_ping_instance_metric') }}

),

time_frame_7_day_metrics AS (

    SELECT
      fct_ping_instance_metric.*,
      dim_ping_metric.time_frame
    FROM fct_ping_instance_metric
    INNER JOIN dim_ping_metric
      ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
    INNER JOIN dim_ping_instance
      ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
    WHERE time_frame = ('7d')
      AND is_last_ping_of_week = TRUE
      AND has_timed_out = FALSE
      AND metric_value IS NOT NULL

)

{{ dbt_audit(
    cte_ref="time_frame_7_day_metrics",
    created_by="@iweeks",
    updated_by="@iweeks",
    created_date="2022-08-08",
    updated_date="2022-08-08"
) }}12:T911, **Description:** Atomic level instance Service Ping data for the last ping of the week per installation by ping and metric for 7-day metrics. This includes basic identifiers for easy joins out to dimension tables. This is a filtered version of `fct_ping_instance_metric`
- The data includes a single row per ping and metric
- Includes installation, instance, date, product, billing, and subscription identifiers

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude metrics that timed out during ping generation (`has_timed_out = FALSE`)
- Include 7-day metrics (`time_frame = '7d'`)
- Include metrics from the 'Last Ping of the Week' pings (`is_last_ping_of_week = TRUE`)
- Exclude metrics without values (`metric_value IS NOT NULL`)

**Business Logic in this Model:**
- `is_last_ping_of_week` = last ping created per calendar week per installation (`dim_installation_id`)
- `Inherited` - `has_timed_out` = `IFF(value = -1, TRUE, FALSE)`
- `Inherited` - `umau_value` = metric value from `usage_activity_by_stage_monthly.manage.events`
- `Inherited` - `dim_subscription_id` = `COALESCE(prep_subscription.dim_subscription_id, ping_payload.license_subscription_id)`

**Other Comments:**
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- Service Ping data is captured at a particular point in time with `all-time, 7_day and 28_day` metrics.  The metrics are only pertinent to the Ping Date and Time and can not be aggregated across Ping Dates. Service Pings are normally compared WoW, MoM, YoY,  etc.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 13:T72c,



WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, fct_ping_instance_metric AS (

    SELECT
      "PING_INSTANCE_METRIC_ID",
  "DIM_PING_INSTANCE_ID",
  "METRICS_PATH",
  "HAS_TIMED_OUT",
  "DIM_PRODUCT_TIER_ID",
  "DIM_SUBSCRIPTION_ID",
  "DIM_LOCATION_COUNTRY_ID",
  "DIM_PING_DATE_ID",
  "DIM_INSTANCE_ID",
  "DIM_HOST_ID",
  "DIM_INSTALLATION_ID",
  "DIM_LICENSE_ID",
  "LICENSE_MD5",
  "LICENSE_SHA256",
  "PING_CREATED_AT",
  "UPLOADED_AT",
  "PING_CREATED_DATE",
  "UMAU_VALUE",
  "DIM_SUBSCRIPTION_LICENSE_ID",
  "IS_LICENSE_MAPPED_TO_SUBSCRIPTION",
  "IS_LICENSE_SUBSCRIPTION_ID_VALID",
  "IS_SERVICE_PING_LICENSE_IN_CUSTOMERDOT",
  "DATA_SOURCE",
  "PING_TYPE",
      TRY_TO_NUMBER(metric_value::TEXT) AS metric_value
    FROM "PROD".common.fct_ping_instance_metric

),

time_frame_7_day_metrics AS (

    SELECT
      fct_ping_instance_metric.*,
      dim_ping_metric.time_frame
    FROM fct_ping_instance_metric
    INNER JOIN dim_ping_metric
      ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
    INNER JOIN dim_ping_instance
      ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
    WHERE time_frame = ('7d')
      AND is_last_ping_of_week = TRUE
      AND has_timed_out = FALSE
      AND metric_value IS NOT NULL

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2022-08-08'::DATE        AS model_created_date,
      '2022-08-08'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM time_frame_7_day_metrics15:Tcb6, **Description:** Enriched instance Service Ping data for the last ping of the month per installation by ping and metric for 7-day metrics. This is an enhanced version of `fct_ping_instance_metric_weekly` and is defined using the [`macro_mart_ping_instance_metric`](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.macro_mart_ping_instance_metric) macro. 
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Exclude metrics that timed out during ping generation
- `Inherited` - Include 7-day metrics (`time_frame = '7d'`)
- `Inherited` - Include metrics from the 'Last Ping of the Week' pings

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation. (The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - `is_last_ping_of_week` = last ping created per calendar week per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 16:T54cc,





WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_product_detail AS (

    SELECT *
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')

), dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT
    * FROM "PROD".common.fct_ping_instance_metric_weekly
    WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license_id                                                              AS license_id,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.company                                                         AS license_company_name,
      dim_license.license_expire_date                                             AS license_expire_date,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      MAX(mrr)                                                                    AS max_monthly_mrr,
      MAX(IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE))  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT product_rate_plan_name)
        WITHIN GROUP (ORDER BY product_rate_plan_name ASC)                        AS product_rate_plan_name_array,
      SUM(quantity)                                                               AS quantity,
      SUM(mrr * 12)                                                               AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON effective_start_month <= dim_date.date_day AND effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22



  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription_md5 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
   WHERE license_md5 IS NOT NULL

  ), license_subscriptions_w_latest_subscription_sha256 AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original
    WHERE license_sha256 IS NOT NULL

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_id                        , license_subscriptions_w_latest_subscription_sha256.license_id                        ) AS license_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.license_company_name              , license_subscriptions_w_latest_subscription_sha256.license_company_name              ) AS license_company_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.latest_subscription_id            , license_subscriptions_w_latest_subscription_sha256.latest_subscription_id            ) AS latest_subscription_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.original_subscription_name_slugify, license_subscriptions_w_latest_subscription_sha256.original_subscription_name_slugify) AS original_subscription_name_slugify,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_category_array            , license_subscriptions_w_latest_subscription_sha256.product_category_array            ) AS product_category_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.product_rate_plan_name_array      , license_subscriptions_w_latest_subscription_sha256.product_rate_plan_name_array      ) AS product_rate_plan_name_array,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_start_month          , license_subscriptions_w_latest_subscription_sha256.subscription_start_month          ) AS subscription_start_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.subscription_end_month            , license_subscriptions_w_latest_subscription_sha256.subscription_end_month            ) AS subscription_end_month,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_billing_account_id            , license_subscriptions_w_latest_subscription_sha256.dim_billing_account_id            ) AS dim_billing_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.crm_account_name                  , license_subscriptions_w_latest_subscription_sha256.crm_account_name                  ) AS crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.dim_parent_crm_account_id         , license_subscriptions_w_latest_subscription_sha256.dim_parent_crm_account_id         ) AS dim_parent_crm_account_id,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_name           , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_name           ) AS parent_crm_account_name,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_upa_country    , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_upa_country    ) AS parent_crm_account_upa_country,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_sales_segment  , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_sales_segment  ) AS parent_crm_account_sales_segment,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_industry       , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_industry       ) AS parent_crm_account_industry,
        COALESCE(license_subscriptions_w_latest_subscription_md5.parent_crm_account_territory      , license_subscriptions_w_latest_subscription_sha256.parent_crm_account_territory      ) AS parent_crm_account_territory,
        COALESCE(license_subscriptions_w_latest_subscription_md5.technical_account_manager         , license_subscriptions_w_latest_subscription_sha256.technical_account_manager         ) AS technical_account_manager,
        CASE
          WHEN license_subscriptions_w_latest_subscription_sha256.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_md5.license_expire_date < dim_ping_instance.ping_created_at THEN FALSE
          WHEN license_subscriptions_w_latest_subscription_sha256.max_monthly_mrr > 0 THEN TRUE
          WHEN license_subscriptions_w_latest_subscription_md5.max_monthly_mrr > 0 THEN TRUE
          ELSE FALSE
        END                                                                                                                             AS is_paid_subscription,
        COALESCE(license_subscriptions_w_latest_subscription_md5.is_program_subscription,license_subscriptions_w_latest_subscription_sha256.is_program_subscription, FALSE)       AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        dim_date.first_day_of_week                                                                                                      AS ping_created_date_week,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        dim_ping_instance.is_last_ping_of_week                                                                                          AS is_last_ping_of_week,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription_md5
        ON dim_ping_instance.license_md5 = license_subscriptions_w_latest_subscription_md5.license_md5
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription_sha256
        ON dim_ping_instance.license_sha256 = license_subscriptions_w_latest_subscription_sha256.license_sha256
       AND dim_date.first_day_of_month = license_subscriptions_w_latest_subscription_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month,
      ping_created_date_week,
      is_last_ping_of_week

    FROM joined
      WHERE time_frame != 'none'
        AND TRY_TO_DECIMAL(metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted

17:T417a,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('prep_ping_instance', 'prep_ping_instance'),
    ('prep_license','prep_license'),
    ('prep_charge','prep_charge')
    ])

}},

raw_flattened AS (

  SELECT
    raw_usage_data_id,
    REPLACE(REPLACE(REPLACE(LOWER((raw_usage_data_payload['settings']['collected_data_categories']::VARCHAR)),'"',''),'[',''),']','') collected_data_categories
  FROM prep_ping_instance
  INNER JOIN LATERAL FLATTEN(input=> raw_usage_data_payload,RECURSIVE => true)
  WHERE key = 'settings'
    AND value LIKE '%collected_data_categories%'

),

usage_data_w_date AS (

  SELECT
    prep_ping_instance.*,
    dim_date.date_id                                                                AS dim_ping_date_id,
    prep_ping_instance.raw_usage_data_payload['license_trial_ends_on']::DATE  AS license_trial_ends_on
  FROM prep_ping_instance
  LEFT JOIN dim_date
    ON TO_DATE(ping_created_at) = dim_date.date_day

),

last_ping_of_month_flag AS (

  SELECT DISTINCT
    usage_data_w_date.id                              AS id,
    usage_data_w_date.dim_ping_date_id                AS dim_ping_date_id,
    usage_data_w_date.uuid                            AS uuid,
    usage_data_w_date.host_id                         AS host_id,
    usage_data_w_date.ping_created_at::TIMESTAMP(0)   AS ping_created_at,
    dim_date.first_day_of_month                       AS first_day_of_month,
    TRUE                                              AS last_ping_of_month_flag,
    usage_data_w_date.raw_usage_data_payload          AS raw_usage_data_payload
  FROM usage_data_w_date
  INNER JOIN dim_date
    ON usage_data_w_date.dim_ping_date_id = dim_date.date_id
  QUALIFY ROW_NUMBER() OVER (
          PARTITION BY usage_data_w_date.uuid, usage_data_w_date.host_id, dim_date.first_day_of_month
          ORDER BY ping_created_at DESC) = 1

),

last_ping_of_week_flag AS (

  SELECT DISTINCT
    usage_data_w_date.id                              AS id,
    usage_data_w_date.dim_ping_date_id                AS dim_ping_date_id,
    usage_data_w_date.uuid                            AS uuid,
    usage_data_w_date.host_id                         AS host_id,
    usage_data_w_date.ping_created_at::TIMESTAMP(0)   AS ping_created_at,
    dim_date.first_day_of_month                       AS first_day_of_month,
    TRUE                                              AS last_ping_of_week_flag
  FROM usage_data_w_date
  INNER JOIN dim_date
    ON usage_data_w_date.dim_ping_date_id = dim_date.date_id
  QUALIFY ROW_NUMBER() OVER (
          PARTITION BY usage_data_w_date.uuid, usage_data_w_date.host_id, dim_date.first_day_of_week
          ORDER BY ping_created_at DESC) = 1

),

fct_w_month_flag AS (

  SELECT
    usage_data_w_date.*,
    last_ping_of_month_flag.last_ping_of_month_flag                                                             AS last_ping_of_month_flag,
    last_ping_of_week_flag.last_ping_of_week_flag                                                               AS last_ping_of_week_flag,
    REGEXP_REPLACE(NULLIF(usage_data_w_date.version, ''), '[^0-9.]+')                                           AS cleaned_version,
    IFF(usage_data_w_date.version ILIKE '%-pre', True, False)                                                   AS version_is_prerelease,
    SPLIT_PART(cleaned_version, '.', 1)::NUMBER                                                                 AS major_version,
    SPLIT_PART(cleaned_version, '.', 2)::NUMBER                                                                 AS minor_version,
    major_version || '.' || minor_version                                                                       AS major_minor_version,
    major_version * 100 + minor_version                                                                         AS major_minor_version_id, -- legacy field - to be replaced with major_minor_version_ num
    major_version * 100 + minor_version                                                                         AS major_minor_version_num
  FROM usage_data_w_date
  LEFT JOIN last_ping_of_month_flag
    ON usage_data_w_date.id = last_ping_of_month_flag.id
  LEFT JOIN last_ping_of_week_flag
    ON usage_data_w_date.id = last_ping_of_week_flag.id

),

final AS (

    SELECT DISTINCT
      fct_w_month_flag.dim_ping_instance_id                                                                       AS dim_ping_instance_id,
      fct_w_month_flag.dim_ping_date_id                                                                           AS dim_ping_date_id,
      fct_w_month_flag.dim_host_id                                                                                AS dim_host_id,
      fct_w_month_flag.dim_instance_id                                                                            AS dim_instance_id,
      fct_w_month_flag.dim_installation_id                                                                        AS dim_installation_id,
      fct_w_month_flag.ping_created_at                                                                            AS ping_created_at,
      TO_DATE(DATEADD('days', -28, fct_w_month_flag.ping_created_at))                                             AS ping_created_date_28_days_earlier,
      TO_DATE(DATE_TRUNC('YEAR', fct_w_month_flag.ping_created_at))                                               AS ping_created_date_year,
      TO_DATE(DATE_TRUNC('MONTH', fct_w_month_flag.ping_created_at))                                              AS ping_created_date_month,
      TO_DATE(DATE_TRUNC('WEEK', fct_w_month_flag.ping_created_at))                                               AS ping_created_date_week,
      TO_DATE(DATE_TRUNC('DAY', fct_w_month_flag.ping_created_at))                                                AS ping_created_date,
      fct_w_month_flag.ip_address_hash                                                                            AS ip_address_hash,
      fct_w_month_flag.version                                                                                    AS version,
      fct_w_month_flag.instance_user_count                                                                        AS instance_user_count,
      fct_w_month_flag.license_md5                                                                                AS license_md5,
      fct_w_month_flag.license_sha256                                                                             AS license_sha256,
      fct_w_month_flag.historical_max_users                                                                       AS historical_max_users,
      fct_w_month_flag.license_user_count                                                                         AS license_user_count,
      fct_w_month_flag.license_starts_at                                                                          AS license_starts_at,
      fct_w_month_flag.license_expires_at                                                                         AS license_expires_at,
      fct_w_month_flag.license_add_ons                                                                            AS license_add_ons,
      fct_w_month_flag.recorded_at                                                                                AS recorded_at,
      fct_w_month_flag.updated_at                                                                                 AS updated_at,
      fct_w_month_flag.mattermost_enabled                                                                         AS mattermost_enabled,
      fct_w_month_flag.main_edition                                                                               AS ping_edition,
      fct_w_month_flag.hostname                                                                                   AS host_name,
      fct_w_month_flag.product_tier                                                                               AS product_tier,
      fct_w_month_flag.license_trial                                                                              AS license_trial,
      IFF(fct_w_month_flag.ping_created_at < fct_w_month_flag.license_trial_ends_on, TRUE, FALSE)                 AS is_trial,
      fct_w_month_flag.source_license_id                                                                          AS source_license_id,
      fct_w_month_flag.installation_type                                                                          AS installation_type,
      fct_w_month_flag.license_plan                                                                               AS license_plan,
      fct_w_month_flag.database_adapter                                                                           AS database_adapter,
      fct_w_month_flag.database_version                                                                           AS database_version,
      fct_w_month_flag.git_version                                                                                AS git_version,
      fct_w_month_flag.gitlab_pages_enabled                                                                       AS gitlab_pages_enabled,
      fct_w_month_flag.gitlab_pages_version                                                                       AS gitlab_pages_version,
      fct_w_month_flag.container_registry_enabled                                                                 AS container_registry_enabled,
      fct_w_month_flag.elasticsearch_enabled                                                                      AS elasticsearch_enabled,
      fct_w_month_flag.geo_enabled                                                                                AS geo_enabled,
      fct_w_month_flag.gitlab_shared_runners_enabled                                                              AS gitlab_shared_runners_enabled,
      fct_w_month_flag.gravatar_enabled                                                                           AS gravatar_enabled,
      fct_w_month_flag.ldap_enabled                                                                               AS ldap_enabled,
      fct_w_month_flag.omniauth_enabled                                                                           AS omniauth_enabled,
      fct_w_month_flag.reply_by_email_enabled                                                                     AS reply_by_email_enabled,
      fct_w_month_flag.signup_enabled                                                                             AS signup_enabled,
      fct_w_month_flag.prometheus_metrics_enabled                                                                 AS prometheus_metrics_enabled,
      fct_w_month_flag.usage_activity_by_stage                                                                    AS usage_activity_by_stage,
      fct_w_month_flag.usage_activity_by_stage_monthly                                                            AS usage_activity_by_stage_monthly,
      fct_w_month_flag.gitaly_clusters                                                                            AS gitaly_clusters,
      fct_w_month_flag.gitaly_version                                                                             AS gitaly_version,
      fct_w_month_flag.gitaly_servers                                                                             AS gitaly_servers,
      fct_w_month_flag.gitaly_filesystems                                                                         AS gitaly_filesystems,
      fct_w_month_flag.gitpod_enabled                                                                             AS gitpod_enabled,
      fct_w_month_flag.object_store                                                                               AS object_store,
      fct_w_month_flag.is_dependency_proxy_enabled                                                                AS is_dependency_proxy_enabled,
      fct_w_month_flag.recording_ce_finished_at                                                                   AS recording_ce_finished_at,
      fct_w_month_flag.recording_ee_finished_at                                                                   AS recording_ee_finished_at,
      fct_w_month_flag.is_ingress_modsecurity_enabled                                                             AS is_ingress_modsecurity_enabled,
      fct_w_month_flag.topology                                                                                   AS topology,
      fct_w_month_flag.is_grafana_link_enabled                                                                    AS is_grafana_link_enabled,
      fct_w_month_flag.analytics_unique_visits                                                                    AS analytics_unique_visits,
      fct_w_month_flag.raw_usage_data_id                                                                          AS raw_usage_data_id,
      fct_w_month_flag.container_registry_vendor                                                                  AS container_registry_vendor,
      fct_w_month_flag.container_registry_version                                                                 AS container_registry_version,
      IFF(fct_w_month_flag.license_expires_at >= fct_w_month_flag.ping_created_at 
          OR fct_w_month_flag.license_expires_at IS NULL, fct_w_month_flag.main_edition, 'EE Free')               AS cleaned_edition,
      fct_w_month_flag.cleaned_version                                                                            AS cleaned_version,
      fct_w_month_flag.version_is_prerelease                                                                      AS version_is_prerelease,
      fct_w_month_flag.major_version                                                                              AS major_version,
      fct_w_month_flag.minor_version                                                                              AS minor_version,
      fct_w_month_flag.major_minor_version                                                                        AS major_minor_version,
      fct_w_month_flag.major_minor_version_num                                                                    AS major_minor_version_num,
      fct_w_month_flag.major_minor_version_id                                                                     AS major_minor_version_id, -- legacy field - to be replaced with major_minor_version_ num
      fct_w_month_flag.is_saas_dedicated                                                                          AS is_saas_dedicated,
      fct_w_month_flag.ping_delivery_type                                                                         AS ping_delivery_type,
      fct_w_month_flag.ping_deployment_type                                                                       AS ping_deployment_type,
      CASE
        WHEN fct_w_month_flag.ping_deployment_type = 'GitLab.com'                 THEN TRUE
        WHEN fct_w_month_flag.installation_type = 'gitlab-development-kit'        THEN TRUE
        WHEN fct_w_month_flag.hostname = 'gitlab.com'                             THEN TRUE
        WHEN fct_w_month_flag.hostname ILIKE '%.gitlab.com'                       THEN TRUE
        ELSE FALSE END                                                                                            AS is_internal,
      CASE
        WHEN fct_w_month_flag.hostname ilike 'staging.%'                          THEN TRUE
        WHEN fct_w_month_flag.hostname IN (
        'staging.gitlab.com',
        'dr.gitlab.com'
      )                                                         THEN TRUE
        ELSE FALSE END                                                                                            AS is_staging,
      CASE
        WHEN fct_w_month_flag.last_ping_of_month_flag = TRUE                      THEN TRUE
        ELSE FALSE
      END                                                                                                         AS is_last_ping_of_month,
      CASE
        WHEN fct_w_month_flag.last_ping_of_week_flag = TRUE                       THEN TRUE
        ELSE FALSE
      END                                                                                                         AS is_last_ping_of_week,
      raw_flattened.collected_data_categories,
      fct_w_month_flag.raw_usage_data_payload,
      fct_w_month_flag.ping_type
    FROM fct_w_month_flag
    LEFT JOIN raw_flattened
      ON fct_w_month_flag.raw_usage_data_id = raw_flattened.raw_usage_data_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-08",
    updated_date="2023-06-16"
) }}18:Tff3, **Description:** Atomic level instance Service Ping data including installation settings and metadata, along with JSON payloads with usage metrics
- Atomic (lowest grain) data with a single record per ping

**Data Grain:**
- dim_ping_instance_id

**Filters Applied to Model:**
- `Inherited` - `uuid IS NOT NULL` (uuid is synonymous with dim_instance_id)
- `Inherited` - `version NOT LIKE '%VERSION%`

**Business Logic in this Model:**
- `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)
- `is_last_ping_of_week` = last ping created per calendar week per installation (`dim_installation_id`)
- `ping_delivery_type` = `IFF(uuid/dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f', 'SaaS', 'Self-Managed')`
- `is_internal` = TRUE WHERE:
  - uuid/dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f'
  - (OR) installation_type = 'gitlab-development-kit'
  - (OR) hostname = 'gitlab.com'
  - (OR) hostname LIKE '%.gitlab.com'
- `is_staging` = TRUE WHERE:
  - hostname LIKE 'staging.%'
  - (OR) hostname IN ('staging.gitlab.com','dr.gitlab.com')
- `is_trial` = `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`
- `major_minor_version` = `major_version || '.' || minor_version`
- `app_release_major_minor_id` = `major_version * 100 + minor_version` (helpful for sorting or filtering versions)
- `version_is_prerelease` = `IFF(version ILIKE '%-pre', TRUE, FALSE)`
- `cleaned_edition` = `IFF(license_expires_at >= ping_created_at OR license_expires_at IS NULL, ping_edition, 'EE Free')`

**Other Comments:**
- The `dim_ping_instance` table is built directly from the [prep_ping_instance table](https://gitlab-data.gitlab.io/analytics/#!/model/model.gitlab_snowflake.prep_ping_instance) which brings in Instance Service Ping data one record per Service Ping.  Along with the Instance information a 'Payload' column with an array of Metrics is captured in the Service Ping.
- Sums, Counts and Percents of Usage (called metrics) is captured along with the Implementation Information at the Instance Level and sent to GitLab. The Instance Owner determines whether Service Ping data will be sent or not.
- GitLab implementations can be Customer Hosted (Self-Managed), GitLab Hosted (referred to as SaaS or Dotcom data) or GitLab Dedicated Hosted (where each Installation is Hosted by GitLab but on Separate Servers).  
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- Multiple Instances can be hosted on each Implementation. Multiple Installations can be included within each Instance which is determined by Host_id. (Instance_id || Host_id = Installation_id)
- Service Ping data is captured at a particular point in time with `all-time, 7_day and 28_day` metrics.  The metrics are only pertinent to the Ping Date and Time and can not be aggregated across Ping Dates. Service Pings are normally compared WoW, MoM, YoY,  etc.  
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 19:T42b2,



WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), prep_ping_instance AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ping_instance

), prep_license AS (

    SELECT * 
    FROM "PROD".common_prep.prep_license

), prep_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_charge

),

raw_flattened AS (

  SELECT
    raw_usage_data_id,
    REPLACE(REPLACE(REPLACE(LOWER((raw_usage_data_payload['settings']['collected_data_categories']::VARCHAR)),'"',''),'[',''),']','') collected_data_categories
  FROM prep_ping_instance
  INNER JOIN LATERAL FLATTEN(input=> raw_usage_data_payload,RECURSIVE => true)
  WHERE key = 'settings'
    AND value LIKE '%collected_data_categories%'

),

usage_data_w_date AS (

  SELECT
    prep_ping_instance.*,
    dim_date.date_id                                                                AS dim_ping_date_id,
    prep_ping_instance.raw_usage_data_payload['license_trial_ends_on']::DATE  AS license_trial_ends_on
  FROM prep_ping_instance
  LEFT JOIN dim_date
    ON TO_DATE(ping_created_at) = dim_date.date_day

),

last_ping_of_month_flag AS (

  SELECT DISTINCT
    usage_data_w_date.id                              AS id,
    usage_data_w_date.dim_ping_date_id                AS dim_ping_date_id,
    usage_data_w_date.uuid                            AS uuid,
    usage_data_w_date.host_id                         AS host_id,
    usage_data_w_date.ping_created_at::TIMESTAMP(0)   AS ping_created_at,
    dim_date.first_day_of_month                       AS first_day_of_month,
    TRUE                                              AS last_ping_of_month_flag,
    usage_data_w_date.raw_usage_data_payload          AS raw_usage_data_payload
  FROM usage_data_w_date
  INNER JOIN dim_date
    ON usage_data_w_date.dim_ping_date_id = dim_date.date_id
  QUALIFY ROW_NUMBER() OVER (
          PARTITION BY usage_data_w_date.uuid, usage_data_w_date.host_id, dim_date.first_day_of_month
          ORDER BY ping_created_at DESC) = 1

),

last_ping_of_week_flag AS (

  SELECT DISTINCT
    usage_data_w_date.id                              AS id,
    usage_data_w_date.dim_ping_date_id                AS dim_ping_date_id,
    usage_data_w_date.uuid                            AS uuid,
    usage_data_w_date.host_id                         AS host_id,
    usage_data_w_date.ping_created_at::TIMESTAMP(0)   AS ping_created_at,
    dim_date.first_day_of_month                       AS first_day_of_month,
    TRUE                                              AS last_ping_of_week_flag
  FROM usage_data_w_date
  INNER JOIN dim_date
    ON usage_data_w_date.dim_ping_date_id = dim_date.date_id
  QUALIFY ROW_NUMBER() OVER (
          PARTITION BY usage_data_w_date.uuid, usage_data_w_date.host_id, dim_date.first_day_of_week
          ORDER BY ping_created_at DESC) = 1

),

fct_w_month_flag AS (

  SELECT
    usage_data_w_date.*,
    last_ping_of_month_flag.last_ping_of_month_flag                                                             AS last_ping_of_month_flag,
    last_ping_of_week_flag.last_ping_of_week_flag                                                               AS last_ping_of_week_flag,
    REGEXP_REPLACE(NULLIF(usage_data_w_date.version, ''), '[^0-9.]+')                                           AS cleaned_version,
    IFF(usage_data_w_date.version ILIKE '%-pre', True, False)                                                   AS version_is_prerelease,
    SPLIT_PART(cleaned_version, '.', 1)::NUMBER                                                                 AS major_version,
    SPLIT_PART(cleaned_version, '.', 2)::NUMBER                                                                 AS minor_version,
    major_version || '.' || minor_version                                                                       AS major_minor_version,
    major_version * 100 + minor_version                                                                         AS major_minor_version_id, -- legacy field - to be replaced with major_minor_version_ num
    major_version * 100 + minor_version                                                                         AS major_minor_version_num
  FROM usage_data_w_date
  LEFT JOIN last_ping_of_month_flag
    ON usage_data_w_date.id = last_ping_of_month_flag.id
  LEFT JOIN last_ping_of_week_flag
    ON usage_data_w_date.id = last_ping_of_week_flag.id

),

final AS (

    SELECT DISTINCT
      fct_w_month_flag.dim_ping_instance_id                                                                       AS dim_ping_instance_id,
      fct_w_month_flag.dim_ping_date_id                                                                           AS dim_ping_date_id,
      fct_w_month_flag.dim_host_id                                                                                AS dim_host_id,
      fct_w_month_flag.dim_instance_id                                                                            AS dim_instance_id,
      fct_w_month_flag.dim_installation_id                                                                        AS dim_installation_id,
      fct_w_month_flag.ping_created_at                                                                            AS ping_created_at,
      TO_DATE(DATEADD('days', -28, fct_w_month_flag.ping_created_at))                                             AS ping_created_date_28_days_earlier,
      TO_DATE(DATE_TRUNC('YEAR', fct_w_month_flag.ping_created_at))                                               AS ping_created_date_year,
      TO_DATE(DATE_TRUNC('MONTH', fct_w_month_flag.ping_created_at))                                              AS ping_created_date_month,
      TO_DATE(DATE_TRUNC('WEEK', fct_w_month_flag.ping_created_at))                                               AS ping_created_date_week,
      TO_DATE(DATE_TRUNC('DAY', fct_w_month_flag.ping_created_at))                                                AS ping_created_date,
      fct_w_month_flag.ip_address_hash                                                                            AS ip_address_hash,
      fct_w_month_flag.version                                                                                    AS version,
      fct_w_month_flag.instance_user_count                                                                        AS instance_user_count,
      fct_w_month_flag.license_md5                                                                                AS license_md5,
      fct_w_month_flag.license_sha256                                                                             AS license_sha256,
      fct_w_month_flag.historical_max_users                                                                       AS historical_max_users,
      fct_w_month_flag.license_user_count                                                                         AS license_user_count,
      fct_w_month_flag.license_starts_at                                                                          AS license_starts_at,
      fct_w_month_flag.license_expires_at                                                                         AS license_expires_at,
      fct_w_month_flag.license_add_ons                                                                            AS license_add_ons,
      fct_w_month_flag.recorded_at                                                                                AS recorded_at,
      fct_w_month_flag.updated_at                                                                                 AS updated_at,
      fct_w_month_flag.mattermost_enabled                                                                         AS mattermost_enabled,
      fct_w_month_flag.main_edition                                                                               AS ping_edition,
      fct_w_month_flag.hostname                                                                                   AS host_name,
      fct_w_month_flag.product_tier                                                                               AS product_tier,
      fct_w_month_flag.license_trial                                                                              AS license_trial,
      IFF(fct_w_month_flag.ping_created_at < fct_w_month_flag.license_trial_ends_on, TRUE, FALSE)                 AS is_trial,
      fct_w_month_flag.source_license_id                                                                          AS source_license_id,
      fct_w_month_flag.installation_type                                                                          AS installation_type,
      fct_w_month_flag.license_plan                                                                               AS license_plan,
      fct_w_month_flag.database_adapter                                                                           AS database_adapter,
      fct_w_month_flag.database_version                                                                           AS database_version,
      fct_w_month_flag.git_version                                                                                AS git_version,
      fct_w_month_flag.gitlab_pages_enabled                                                                       AS gitlab_pages_enabled,
      fct_w_month_flag.gitlab_pages_version                                                                       AS gitlab_pages_version,
      fct_w_month_flag.container_registry_enabled                                                                 AS container_registry_enabled,
      fct_w_month_flag.elasticsearch_enabled                                                                      AS elasticsearch_enabled,
      fct_w_month_flag.geo_enabled                                                                                AS geo_enabled,
      fct_w_month_flag.gitlab_shared_runners_enabled                                                              AS gitlab_shared_runners_enabled,
      fct_w_month_flag.gravatar_enabled                                                                           AS gravatar_enabled,
      fct_w_month_flag.ldap_enabled                                                                               AS ldap_enabled,
      fct_w_month_flag.omniauth_enabled                                                                           AS omniauth_enabled,
      fct_w_month_flag.reply_by_email_enabled                                                                     AS reply_by_email_enabled,
      fct_w_month_flag.signup_enabled                                                                             AS signup_enabled,
      fct_w_month_flag.prometheus_metrics_enabled                                                                 AS prometheus_metrics_enabled,
      fct_w_month_flag.usage_activity_by_stage                                                                    AS usage_activity_by_stage,
      fct_w_month_flag.usage_activity_by_stage_monthly                                                            AS usage_activity_by_stage_monthly,
      fct_w_month_flag.gitaly_clusters                                                                            AS gitaly_clusters,
      fct_w_month_flag.gitaly_version                                                                             AS gitaly_version,
      fct_w_month_flag.gitaly_servers                                                                             AS gitaly_servers,
      fct_w_month_flag.gitaly_filesystems                                                                         AS gitaly_filesystems,
      fct_w_month_flag.gitpod_enabled                                                                             AS gitpod_enabled,
      fct_w_month_flag.object_store                                                                               AS object_store,
      fct_w_month_flag.is_dependency_proxy_enabled                                                                AS is_dependency_proxy_enabled,
      fct_w_month_flag.recording_ce_finished_at                                                                   AS recording_ce_finished_at,
      fct_w_month_flag.recording_ee_finished_at                                                                   AS recording_ee_finished_at,
      fct_w_month_flag.is_ingress_modsecurity_enabled                                                             AS is_ingress_modsecurity_enabled,
      fct_w_month_flag.topology                                                                                   AS topology,
      fct_w_month_flag.is_grafana_link_enabled                                                                    AS is_grafana_link_enabled,
      fct_w_month_flag.analytics_unique_visits                                                                    AS analytics_unique_visits,
      fct_w_month_flag.raw_usage_data_id                                                                          AS raw_usage_data_id,
      fct_w_month_flag.container_registry_vendor                                                                  AS container_registry_vendor,
      fct_w_month_flag.container_registry_version                                                                 AS container_registry_version,
      IFF(fct_w_month_flag.license_expires_at >= fct_w_month_flag.ping_created_at 
          OR fct_w_month_flag.license_expires_at IS NULL, fct_w_month_flag.main_edition, 'EE Free')               AS cleaned_edition,
      fct_w_month_flag.cleaned_version                                                                            AS cleaned_version,
      fct_w_month_flag.version_is_prerelease                                                                      AS version_is_prerelease,
      fct_w_month_flag.major_version                                                                              AS major_version,
      fct_w_month_flag.minor_version                                                                              AS minor_version,
      fct_w_month_flag.major_minor_version                                                                        AS major_minor_version,
      fct_w_month_flag.major_minor_version_num                                                                    AS major_minor_version_num,
      fct_w_month_flag.major_minor_version_id                                                                     AS major_minor_version_id, -- legacy field - to be replaced with major_minor_version_ num
      fct_w_month_flag.is_saas_dedicated                                                                          AS is_saas_dedicated,
      fct_w_month_flag.ping_delivery_type                                                                         AS ping_delivery_type,
      fct_w_month_flag.ping_deployment_type                                                                       AS ping_deployment_type,
      CASE
        WHEN fct_w_month_flag.ping_deployment_type = 'GitLab.com'                 THEN TRUE
        WHEN fct_w_month_flag.installation_type = 'gitlab-development-kit'        THEN TRUE
        WHEN fct_w_month_flag.hostname = 'gitlab.com'                             THEN TRUE
        WHEN fct_w_month_flag.hostname ILIKE '%.gitlab.com'                       THEN TRUE
        ELSE FALSE END                                                                                            AS is_internal,
      CASE
        WHEN fct_w_month_flag.hostname ilike 'staging.%'                          THEN TRUE
        WHEN fct_w_month_flag.hostname IN (
        'staging.gitlab.com',
        'dr.gitlab.com'
      )                                                         THEN TRUE
        ELSE FALSE END                                                                                            AS is_staging,
      CASE
        WHEN fct_w_month_flag.last_ping_of_month_flag = TRUE                      THEN TRUE
        ELSE FALSE
      END                                                                                                         AS is_last_ping_of_month,
      CASE
        WHEN fct_w_month_flag.last_ping_of_week_flag = TRUE                       THEN TRUE
        ELSE FALSE
      END                                                                                                         AS is_last_ping_of_week,
      raw_flattened.collected_data_categories,
      fct_w_month_flag.raw_usage_data_payload,
      fct_w_month_flag.ping_type
    FROM fct_w_month_flag
    LEFT JOIN raw_flattened
      ON fct_w_month_flag.raw_usage_data_id = raw_flattened.raw_usage_data_id

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-08'::DATE        AS model_created_date,
      '2023-06-16'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1a:Taac,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}


WITH source AS (

    SELECT *
    FROM {{ref('usage_ping_metrics_source')}}

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['metrics_path']) }}                         AS ping_metric_id,
      metrics_path                                                            AS metrics_path,
      'raw_usage_data_payload['''
        || REPLACE(metrics_path, '.', '''][''')
        || ''']'                                                              AS sql_friendly_path,
      data_source                                                             AS data_source,
      description                                                             AS description,
      IFF(substring(product_group, 0, 5) = 'group',
        SPLIT_PART(REPLACE(product_group, ' ', '_'), ':', 3),
        REPLACE(product_group, ' ', '_'))                                     AS group_name,
      product_section                                                         AS section_name,
      IFF(substring(product_stage, 0, 7) = 'devops:',
        SPLIT_PART(REPLACE(product_stage, ' ', '_'), ':', 3),
        REPLACE(product_stage, ' ', '_'))                                     AS stage_name,
      milestone                                                               AS milestone,
      skip_validation                                                         AS skip_validation,
      metrics_status                                                          AS metrics_status,
      tier                                                                    AS tier,
      time_frame                                                              AS time_frame,
      value_type                                                              AS value_type,
      instrumentation_class                                                   AS instrumentation_class,
      IFNULL(is_gmau, FALSE)                                                  AS is_gmau,
      IFNULL(is_smau, FALSE)                                                  AS is_smau,
      IFNULL(is_paid_gmau, FALSE)                                             AS is_paid_gmau,
      IFNULL(is_umau, FALSE)                                                  AS is_umau,
      snapshot_date                                                           AS snapshot_date,
      uploaded_at                                                             AS uploaded_at,
      data_by_row
    FROM source
      QUALIFY MAX(uploaded_at) OVER() = uploaded_at

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@icooper-acp",
    updated_by="@chrissharp",
    created_date="2022-04-14",
    updated_date="2022-05-17"
) }}1b:Tb76,


WITH source AS (

    SELECT *
    FROM "PREP".gitlab_data_yaml.usage_ping_metrics_source

), final AS (

    SELECT
      md5(cast(coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
))                         AS ping_metric_id,
      metrics_path                                                            AS metrics_path,
      'raw_usage_data_payload['''
        || REPLACE(metrics_path, '.', '''][''')
        || ''']'                                                              AS sql_friendly_path,
      data_source                                                             AS data_source,
      description                                                             AS description,
      IFF(substring(product_group, 0, 5) = 'group',
        SPLIT_PART(REPLACE(product_group, ' ', '_'), ':', 3),
        REPLACE(product_group, ' ', '_'))                                     AS group_name,
      product_section                                                         AS section_name,
      IFF(substring(product_stage, 0, 7) = 'devops:',
        SPLIT_PART(REPLACE(product_stage, ' ', '_'), ':', 3),
        REPLACE(product_stage, ' ', '_'))                                     AS stage_name,
      milestone                                                               AS milestone,
      skip_validation                                                         AS skip_validation,
      metrics_status                                                          AS metrics_status,
      tier                                                                    AS tier,
      time_frame                                                              AS time_frame,
      value_type                                                              AS value_type,
      instrumentation_class                                                   AS instrumentation_class,
      IFNULL(is_gmau, FALSE)                                                  AS is_gmau,
      IFNULL(is_smau, FALSE)                                                  AS is_smau,
      IFNULL(is_paid_gmau, FALSE)                                             AS is_paid_gmau,
      IFNULL(is_umau, FALSE)                                                  AS is_umau,
      snapshot_date                                                           AS snapshot_date,
      uploaded_at                                                             AS uploaded_at,
      data_by_row
    FROM source
      QUALIFY MAX(uploaded_at) OVER() = uploaded_at

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2022-04-14'::DATE        AS model_created_date,
      '2022-05-17'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1c:T2401,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "incremental",
    unique_key = "ping_instance_metric_id"
) }}

{{ simple_cte([
    ('prep_subscription', 'prep_subscription'),
    ('dim_date', 'dim_date'),
    ('map_ip_to_country', 'map_ip_to_country'),
    ('locations', 'prep_location_country'),
    ('prep_ping_instance', 'prep_ping_instance_flattened'),
    ('dim_product_tier', 'dim_product_tier')
    ])

}}
, prep_subscription_md5 AS (

    SELECT dim_subscription_id
    FROM {{ ref('prep_subscription') }}

), prep_subscription_sha256 AS (

    SELECT dim_subscription_id
    FROM {{ ref('prep_subscription') }}

), prep_license AS (

    SELECT
      license_md5,
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM {{ ref('prep_license') }}

), prep_license_md5 AS (

    SELECT
      license_md5,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_md5 IS NOT NULL

), prep_license_sha256 AS (

    SELECT
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_sha256 IS NOT NULL

), map_ip_location AS (

    SELECT
      map_ip_to_country.ip_address_hash                 AS ip_address_hash,
      map_ip_to_country.dim_location_country_id         AS dim_location_country_id
    FROM map_ip_to_country
    INNER JOIN locations
      WHERE map_ip_to_country.dim_location_country_id = locations.dim_location_country_id

), source AS (

    SELECT
      prep_ping_instance.*
    FROM prep_ping_instance
      {% if is_incremental() %}
                  WHERE uploaded_at >= (SELECT MAX(uploaded_at) FROM {{this}})
      {% endif %}

), add_country_info_to_usage_ping AS (

    SELECT
      source.*,
      map_ip_location.dim_location_country_id     AS dim_location_country_id
    FROM source
    LEFT JOIN map_ip_location
      ON source.ip_address_hash = map_ip_location.ip_address_hash

), prep_usage_ping_cte AS (

    SELECT
      dim_ping_instance_id                                AS dim_ping_instance_id,
      dim_host_id                                         AS dim_host_id,
      dim_instance_id                                     AS dim_instance_id,
      dim_installation_id                                 AS dim_installation_id,
      dim_product_tier.dim_product_tier_id                AS dim_product_tier_id,
      ping_created_at                                     AS ping_created_at,
      uploaded_at                                         AS uploaded_at,
      license_md5                                         AS license_md5,
      license_sha256                                      AS license_sha256,
      dim_location_country_id                             AS dim_location_country_id,
      license_trial_ends_on                               AS license_trial_ends_on,
      license_subscription_id                             AS license_subscription_id,
      umau_value                                          AS umau_value,
      product_tier                                        AS product_tier,
      main_edition                                        AS main_edition,
      metrics_path                                        AS metrics_path,
      metric_value                                        AS metric_value,
      has_timed_out                                       AS has_timed_out,
      ping_type                                           AS ping_type
    FROM add_country_info_to_usage_ping
    LEFT JOIN dim_product_tier
    ON TRIM(LOWER(add_country_info_to_usage_ping.product_tier)) = TRIM(LOWER(dim_product_tier.product_tier_historical_short))
    AND add_country_info_to_usage_ping.ping_deployment_type = dim_product_tier.product_deployment_type

), joined_payload AS (

    SELECT
      prep_usage_ping_cte.*,
      COALESCE(prep_license_md5.dim_license_id, prep_license_sha256.dim_license_id)                                                AS dim_license_id,
      dim_date.date_id                                                                                                             AS dim_ping_date_id,
      COALESCE(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id), license_subscription_id) AS dim_subscription_id,
      IFF(prep_usage_ping_cte.ping_created_at < license_trial_ends_on, TRUE, FALSE)                                                AS is_trial,
      IFF(COALESCE(prep_license_md5.dim_subscription_id,prep_license_sha256.dim_subscription_id) IS NOT NULL, TRUE, FALSE)         AS is_license_mapped_to_subscription, -- does the license table have a value in both license_id and subscription_id
      IFF(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id) IS NULL, FALSE, TRUE)          AS is_license_subscription_id_valid   -- is the subscription_id in the license table valid (does it exist in the subscription table?)
    FROM prep_usage_ping_cte
    LEFT JOIN prep_license_md5
      ON prep_usage_ping_cte.license_md5    = prep_license_md5.license_md5
    LEFT JOIN prep_license_sha256
      ON prep_usage_ping_cte.license_sha256 = prep_license_sha256.license_sha256
    LEFT JOIN prep_subscription_md5
      ON prep_license_md5.dim_subscription_id = prep_subscription_md5.dim_subscription_id
    LEFT JOIN prep_subscription_sha256
      ON prep_license_sha256.dim_subscription_id = prep_subscription_sha256.dim_subscription_id
    LEFT JOIN dim_date
      ON TO_DATE(prep_usage_ping_cte.ping_created_at) = dim_date.date_day

), flattened_high_level as (
    SELECT
      {{ dbt_utils.surrogate_key(['dim_ping_instance_id', 'joined_payload.metrics_path']) }}                      AS ping_instance_metric_id,
      dim_ping_instance_id                                                                                        AS dim_ping_instance_id,
      joined_payload.metrics_path                                                                                 AS metrics_path,
      metric_value                                                                                                AS metric_value,
      has_timed_out                                                                                               AS has_timed_out,
      dim_product_tier_id                                                                                         AS dim_product_tier_id,
      dim_subscription_id                                                                                         AS dim_subscription_id,
      dim_location_country_id                                                                                     AS dim_location_country_id,
      dim_ping_date_id                                                                                            AS dim_ping_date_id,
      dim_instance_id                                                                                             AS dim_instance_id,
      dim_host_id                                                                                                 AS dim_host_id,
      dim_installation_id                                                                                         AS dim_installation_id,
      dim_license_id                                                                                              AS dim_license_id,
      license_md5                                                                                                 AS license_md5,
      license_sha256                                                                                              AS license_sha256,
      ping_created_at                                                                                             AS ping_created_at,
      uploaded_at                                                                                                 AS uploaded_at,
      ping_created_at::DATE                                                                                       AS ping_created_date,
      umau_value                                                                                                  AS umau_value,
      license_subscription_id                                                                                     AS dim_subscription_license_id,
      is_license_mapped_to_subscription                                                                           AS is_license_mapped_to_subscription,
      is_license_subscription_id_valid                                                                            AS is_license_subscription_id_valid,
      IFF(dim_license_id IS NULL, FALSE, TRUE)                                                                    AS is_service_ping_license_in_customerDot,
      'VERSION_DB'                                                                                                AS data_source,
      ping_type                                                                                                   AS ping_type
  FROM joined_payload

)

{{ dbt_audit(
    cte_ref="flattened_high_level",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-08",
    updated_date="2023-06-12"
) }}1d:Tdd0, **Description:** Atomic level instance Service Ping data by ping and metric for all metrics, including basic identifiers for easy joins out to dimension tables
- The data includes a single row per ping and metric
- Includes installation, instance, date, product, billing, and subscription identifiers

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- `Inherited` - `uuid IS NOT NULL` (uuid is synonymous with dim_instance_id)
- `Inherited` - `version NOT LIKE '%VERSION%`

**Business Logic in this Model:**
- Includes all metrics, regardless of time frame or whether they can be located in `dim_ping_metric`
- `Inherited` - `has_timed_out` = `IFF(value = -1, TRUE, FALSE)`
- `Inherited` - Metrics that timed out (return -1) are set to a value of 0
- `Inherited` - `umau_value` = metric value from `usage_activity_by_stage_monthly.manage.events`
- `dim_subscription_id` = `COALESCE(prep_subscription.dim_subscription_id, ping_payload.license_subscription_id)`

**Other Comments:**
- The `fct_ping_instance_metric` table is built directly from the [prep_ping_instance table](https://gitlab-data.gitlab.io/analytics/#!/model/model.gitlab_snowflake.prep_ping_instance) which brings in Instance Service Ping data one record per Service Ping.  Along with the Instance information a 'Payload' column with an array of Metrics is captured in the Service Ping.
- Sums, Counts and Percents of Usage (called metrics) is captured along with the Implementation Information at the Instance Level and sent to GitLab. The Instance Owner determines whether Service Ping data will be sent or not.
- GitLab implementations can be Customer Hosted (Self-Managed), GitLab Hosted (referred to as SaaS or Dotcom data) or GitLab Dedicated Hosted (where each Installation is Hosted by GitLab but on Separate Servers).  
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- Multiple Instances can be hosted on each Implementation. Multiple Installations can be included within each Instance which is determined by Host_id. (Instance_id || Host_id = Installation_id)
- Service Ping data is captured at a particular point in time with `all-time, 7_day and 28_day` metrics.  The metrics are only pertinent to the Ping Date and Time and can not be aggregated across Ping Dates. Service Pings are normally compared WoW, MoM, YoY,  etc.  
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 1e:T25ab,



WITH prep_subscription AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), map_ip_to_country AS (

    SELECT * 
    FROM "PROD".common_mapping.map_ip_to_country

), locations AS (

    SELECT * 
    FROM "PROD".common_prep.prep_location_country

), prep_ping_instance AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ping_instance_flattened

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

)
, prep_subscription_md5 AS (

    SELECT dim_subscription_id
    FROM "PROD".common_prep.prep_subscription

), prep_subscription_sha256 AS (

    SELECT dim_subscription_id
    FROM "PROD".common_prep.prep_subscription

), prep_license AS (

    SELECT
      license_md5,
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM "PROD".common_prep.prep_license

), prep_license_md5 AS (

    SELECT
      license_md5,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_md5 IS NOT NULL

), prep_license_sha256 AS (

    SELECT
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_sha256 IS NOT NULL

), map_ip_location AS (

    SELECT
      map_ip_to_country.ip_address_hash                 AS ip_address_hash,
      map_ip_to_country.dim_location_country_id         AS dim_location_country_id
    FROM map_ip_to_country
    INNER JOIN locations
      WHERE map_ip_to_country.dim_location_country_id = locations.dim_location_country_id

), source AS (

    SELECT
      prep_ping_instance.*
    FROM prep_ping_instance
      
                  WHERE uploaded_at >= (SELECT MAX(uploaded_at) FROM "PROD".common.fct_ping_instance_metric)
      

), add_country_info_to_usage_ping AS (

    SELECT
      source.*,
      map_ip_location.dim_location_country_id     AS dim_location_country_id
    FROM source
    LEFT JOIN map_ip_location
      ON source.ip_address_hash = map_ip_location.ip_address_hash

), prep_usage_ping_cte AS (

    SELECT
      dim_ping_instance_id                                AS dim_ping_instance_id,
      dim_host_id                                         AS dim_host_id,
      dim_instance_id                                     AS dim_instance_id,
      dim_installation_id                                 AS dim_installation_id,
      dim_product_tier.dim_product_tier_id                AS dim_product_tier_id,
      ping_created_at                                     AS ping_created_at,
      uploaded_at                                         AS uploaded_at,
      license_md5                                         AS license_md5,
      license_sha256                                      AS license_sha256,
      dim_location_country_id                             AS dim_location_country_id,
      license_trial_ends_on                               AS license_trial_ends_on,
      license_subscription_id                             AS license_subscription_id,
      umau_value                                          AS umau_value,
      product_tier                                        AS product_tier,
      main_edition                                        AS main_edition,
      metrics_path                                        AS metrics_path,
      metric_value                                        AS metric_value,
      has_timed_out                                       AS has_timed_out,
      ping_type                                           AS ping_type
    FROM add_country_info_to_usage_ping
    LEFT JOIN dim_product_tier
    ON TRIM(LOWER(add_country_info_to_usage_ping.product_tier)) = TRIM(LOWER(dim_product_tier.product_tier_historical_short))
    AND add_country_info_to_usage_ping.ping_deployment_type = dim_product_tier.product_deployment_type

), joined_payload AS (

    SELECT
      prep_usage_ping_cte.*,
      COALESCE(prep_license_md5.dim_license_id, prep_license_sha256.dim_license_id)                                                AS dim_license_id,
      dim_date.date_id                                                                                                             AS dim_ping_date_id,
      COALESCE(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id), license_subscription_id) AS dim_subscription_id,
      IFF(prep_usage_ping_cte.ping_created_at < license_trial_ends_on, TRUE, FALSE)                                                AS is_trial,
      IFF(COALESCE(prep_license_md5.dim_subscription_id,prep_license_sha256.dim_subscription_id) IS NOT NULL, TRUE, FALSE)         AS is_license_mapped_to_subscription, -- does the license table have a value in both license_id and subscription_id
      IFF(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id) IS NULL, FALSE, TRUE)          AS is_license_subscription_id_valid   -- is the subscription_id in the license table valid (does it exist in the subscription table?)
    FROM prep_usage_ping_cte
    LEFT JOIN prep_license_md5
      ON prep_usage_ping_cte.license_md5    = prep_license_md5.license_md5
    LEFT JOIN prep_license_sha256
      ON prep_usage_ping_cte.license_sha256 = prep_license_sha256.license_sha256
    LEFT JOIN prep_subscription_md5
      ON prep_license_md5.dim_subscription_id = prep_subscription_md5.dim_subscription_id
    LEFT JOIN prep_subscription_sha256
      ON prep_license_sha256.dim_subscription_id = prep_subscription_sha256.dim_subscription_id
    LEFT JOIN dim_date
      ON TO_DATE(prep_usage_ping_cte.ping_created_at) = dim_date.date_day

), flattened_high_level as (
    SELECT
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(joined_payload.metrics_path as 
    varchar
), '') as 
    varchar
))                      AS ping_instance_metric_id,
      dim_ping_instance_id                                                                                        AS dim_ping_instance_id,
      joined_payload.metrics_path                                                                                 AS metrics_path,
      metric_value                                                                                                AS metric_value,
      has_timed_out                                                                                               AS has_timed_out,
      dim_product_tier_id                                                                                         AS dim_product_tier_id,
      dim_subscription_id                                                                                         AS dim_subscription_id,
      dim_location_country_id                                                                                     AS dim_location_country_id,
      dim_ping_date_id                                                                                            AS dim_ping_date_id,
      dim_instance_id                                                                                             AS dim_instance_id,
      dim_host_id                                                                                                 AS dim_host_id,
      dim_installation_id                                                                                         AS dim_installation_id,
      dim_license_id                                                                                              AS dim_license_id,
      license_md5                                                                                                 AS license_md5,
      license_sha256                                                                                              AS license_sha256,
      ping_created_at                                                                                             AS ping_created_at,
      uploaded_at                                                                                                 AS uploaded_at,
      ping_created_at::DATE                                                                                       AS ping_created_date,
      umau_value                                                                                                  AS umau_value,
      license_subscription_id                                                                                     AS dim_subscription_license_id,
      is_license_mapped_to_subscription                                                                           AS is_license_mapped_to_subscription,
      is_license_subscription_id_valid                                                                            AS is_license_subscription_id_valid,
      IFF(dim_license_id IS NULL, FALSE, TRUE)                                                                    AS is_service_ping_license_in_customerDot,
      'VERSION_DB'                                                                                                AS data_source,
      ping_type                                                                                                   AS ping_type
  FROM joined_payload

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-08'::DATE        AS model_created_date,
      '2023-06-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM flattened_high_level1f:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}20:T416,Used to simplify CTE imports in a model.

A large portion of import statements in a SQL model are simple `SELECT * FROM table`. Writing pure SQL is verbose and this macro aims to simplify the imports.

The macro accepts once argument which is a list of tuples where each tuple has the alias name and the table reference.

Below is an example and the expected output:

```sql

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account','zuora_account_source'),
    ('zuora_contact','zuora_contact_source')
]) }}

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM {{ref('zuora_excluded_accounts')}}

)

```

```sql
WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".common.map_merged_crm_account

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

)

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM "PROD".legacy.zuora_excluded_accounts

)
```22:T4cb,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('dim_ping_instance', 'dim_ping_instance'),
    ('dim_ping_metric', 'dim_ping_metric')
    ])

}}

, fct_ping_instance_metric AS (

    SELECT
      {{ dbt_utils.star(from=ref('fct_ping_instance_metric'), except=['METRIC_VALUE', 'CREATED_BY', 'UPDATED_BY', 'MODEL_CREATED_DATE',
          'MODEL_UPDATED_DATE', 'DBT_CREATED_AT', 'DBT_UPDATED_AT']) }},
      TRY_TO_NUMBER(metric_value::TEXT) AS metric_value
    FROM {{ ref('fct_ping_instance_metric') }}

),

time_frame_7_day_metrics AS (

    SELECT
      fct_ping_instance_metric.*,
      dim_ping_metric.time_frame
    FROM fct_ping_instance_metric
    INNER JOIN dim_ping_metric
      ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
    INNER JOIN dim_ping_instance
      ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
    WHERE time_frame = ('7d')
      AND is_last_ping_of_week = TRUE
      AND has_timed_out = FALSE
      AND metric_value IS NOT NULL

)

{{ dbt_audit(
    cte_ref="time_frame_7_day_metrics",
    created_by="@iweeks",
    updated_by="@iweeks",
    created_date="2022-08-08",
    updated_date="2022-08-08"
) }}23:T72c,



WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, fct_ping_instance_metric AS (

    SELECT
      "PING_INSTANCE_METRIC_ID",
  "DIM_PING_INSTANCE_ID",
  "METRICS_PATH",
  "HAS_TIMED_OUT",
  "DIM_PRODUCT_TIER_ID",
  "DIM_SUBSCRIPTION_ID",
  "DIM_LOCATION_COUNTRY_ID",
  "DIM_PING_DATE_ID",
  "DIM_INSTANCE_ID",
  "DIM_HOST_ID",
  "DIM_INSTALLATION_ID",
  "DIM_LICENSE_ID",
  "LICENSE_MD5",
  "LICENSE_SHA256",
  "PING_CREATED_AT",
  "UPLOADED_AT",
  "PING_CREATED_DATE",
  "UMAU_VALUE",
  "DIM_SUBSCRIPTION_LICENSE_ID",
  "IS_LICENSE_MAPPED_TO_SUBSCRIPTION",
  "IS_LICENSE_SUBSCRIPTION_ID_VALID",
  "IS_SERVICE_PING_LICENSE_IN_CUSTOMERDOT",
  "DATA_SOURCE",
  "PING_TYPE",
      TRY_TO_NUMBER(metric_value::TEXT) AS metric_value
    FROM "PROD".common.fct_ping_instance_metric

),

time_frame_7_day_metrics AS (

    SELECT
      fct_ping_instance_metric.*,
      dim_ping_metric.time_frame
    FROM fct_ping_instance_metric
    INNER JOIN dim_ping_metric
      ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
    INNER JOIN dim_ping_instance
      ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
    WHERE time_frame = ('7d')
      AND is_last_ping_of_week = TRUE
      AND has_timed_out = FALSE
      AND metric_value IS NOT NULL

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2022-08-08'::DATE        AS model_created_date,
      '2022-08-08'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM time_frame_7_day_metricsc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.fct_ping_instance_metric_weekly"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"fct_ping_instance_metric_weekly"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","product",{"children":[["$","code",null,{"children":["$","a",null,{"children":"product"}]}],"Â "]}],["$","span","mnpi_exception",{"children":[["$","code",null,{"children":["$","a",null,{"children":"mnpi_exception"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.common.fct_ping_instance_metric_weekly"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"179 GB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 12:52UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"$f"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$L10",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_PING_INSTANCE_METRIC_WEEKLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the fct_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ping_instance_metric_id"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":2,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":4,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":5,"name":"dim_product_tier_id","comment":null,"description":"The unique identifier of a product tier, easily joined to `dim_product_tier`. This will reflect the tier of the installation at time of ping creation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":6,"name":"dim_subscription_id","comment":null,"description":"The unique identifier of a subscription, easily joined to `dim_subscription`. This is defined as the subscription_id associated with the license, with `license_subscription_id` from the ping payload as a fallback value.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_LOCATION_COUNTRY_ID":{"type":"NUMBER","index":7,"name":"dim_location_country_id","comment":null,"description":"The unique identifier of a country, easily joined to `dim_location_country`. The location is associated with the IP address of the ping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_location_country_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":8,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":9,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_HOST_ID":{"type":"NUMBER","index":10,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":11,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":12,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"LICENSE_MD5":{"type":"TEXT","index":13,"name":"license_md5","comment":null,"description":"The md5 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":14,"name":"license_sha256","comment":null,"description":"The SHA-256 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"UPLOADED_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"UPLOADED_AT","comment":null,"display_name":"uploaded_at"},"PING_CREATED_DATE":{"type":"DATE","index":17,"name":"ping_created_date","comment":null,"description":"The date when the ping was created (YYYY-MM-DD)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date"},"UMAU_VALUE":{"type":"NUMBER","index":18,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"DIM_SUBSCRIPTION_LICENSE_ID":{"type":"TEXT","index":19,"name":"dim_subscription_license_id","comment":null,"description":"The unique identifier of a license subscription. This appears as `license_subscription_id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_license_id"},"IS_LICENSE_MAPPED_TO_SUBSCRIPTION":{"type":"BOOLEAN","index":20,"name":"is_license_mapped_to_subscription","comment":null,"description":"Data quality boolean flag set to True if the license table has a value in both license_id and subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_license_mapped_to_subscription"},"IS_LICENSE_SUBSCRIPTION_ID_VALID":{"type":"BOOLEAN","index":21,"name":"is_license_subscription_id_valid","comment":null,"description":"Data quality boolean flag set to True if the subscription_id in the license table is valid (does it exist in the subscription table?)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_license_subscription_id_valid"},"IS_SERVICE_PING_LICENSE_IN_CUSTOMERDOT":{"type":"BOOLEAN","index":22,"name":"is_service_ping_license_in_customerDot","comment":null,"description":"Data quality boolean flag set to True if the license from Service Ping exist in CustomerDot.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_service_ping_license_in_customerDot"},"DATA_SOURCE":{"type":"TEXT","index":23,"name":"data_source","comment":null,"description":"The source application where the data was extracted from (ex. GITLAB_DOTCOM, VERSION_DB)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"PING_TYPE":{"type":"TEXT","index":24,"name":"PING_TYPE","comment":null,"display_name":"ping_type"},"METRIC_VALUE":{"type":"NUMBER","index":25,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"TIME_FRAME":{"type":"TEXT","index":26,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"CREATED_BY":{"type":"TEXT","index":27,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":28,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":29,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":30,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":31,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":32,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:52UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":191770403840,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_ping_instance_metric_weekly","raw_sql":"$11","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.fct_ping_instance_metric","model.gitlab_snowflake.fct_ping_instance_metric","model.gitlab_snowflake.fct_ping_instance_metric","model.gitlab_snowflake.fct_ping_instance_metric"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_ping_instance_metric_weekly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_ping_instance_metric_weekly.sql","original_file_path":"models/common/facts_product_and_engineering/fct_ping_instance_metric_weekly.sql","name":"fct_ping_instance_metric_weekly","alias":"fct_ping_instance_metric_weekly","checksum":{"name":"sha256","checksum":"4aa7b5622bd8718808d362f89ca18cf7afb24debd5b62873910bcc02006b77a0"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_ping_metric"],["dim_ping_metric"],["fct_ping_instance_metric"],["fct_ping_instance_metric"],["fct_ping_instance_metric"],["fct_ping_instance_metric"]],"sources":[],"metrics":[],"description":"$12","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_ping_instance_metric_weekly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033751.8895717,"compiled_sql":"$13","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_ping_instance_metric_weekly","label":"fct_ping_instance_metric_weekly"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_WEEKLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"NUMBER","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":6,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":8,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":9,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":13,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":14,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":15,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":16,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":17,"name":"PING_DEPLOYMENT_TYPE","comment":null,"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":18,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":21,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":22,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":23,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":24,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":26,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":28,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":29,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":30,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":31,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":32,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":33,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":34,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":35,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":36,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":37,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":38,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":39,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":40,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":41,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":42,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":45,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":47,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":48,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":50,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":52,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":53,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":54,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":55,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":56,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"CREATED_BY":{"type":"TEXT","index":57,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:03UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":242513092096,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_weekly","raw_sql":"{{ config(\n    tags=[\"product\", \"mnpi_exception\"]\n) }}\n\n{{ macro_mart_ping_instance_metric('fct_ping_instance_metric_weekly') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.macro_mart_ping_instance_metric","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_weekly","model.gitlab_snowflake.fct_ping_instance_metric_weekly","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_weekly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_weekly.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_weekly.sql","name":"mart_ping_instance_metric_weekly","alias":"mart_ping_instance_metric_weekly","checksum":{"name":"sha256","checksum":"41b490aa080ebb1307c78a35a54f9d7275fc34f3d840056841b259000344b50e"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_weekly"],["fct_ping_instance_metric_weekly"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$15","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_weekly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.6314888,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_weekly","label":"mart_ping_instance_metric_weekly"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_ping_instance_met_50ae86a72a204d341e710b89ca8be786\") }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"ping_instance_metric_id","model":"{{ get_where_subquery(ref('fct_ping_instance_metric_weekly')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.fct_ping_instance_metric_weekly"]},"config":{"enabled":true,"alias":"not_null_fct_ping_instance_met_50ae86a72a204d341e710b89ca8be786","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common","not_null_fct_ping_instance_metric_weekly_ping_instance_metric_id"],"unique_id":"test.gitlab_snowflake.not_null_fct_ping_instance_metric_weekly_ping_instance_metric_id.ea957acfed","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_fct_ping_instance_met_50ae86a72a204d341e710b89ca8be786.sql","original_file_path":"models/common/schema.yml","name":"not_null_fct_ping_instance_metric_weekly_ping_instance_metric_id","alias":"not_null_fct_ping_instance_met_50ae86a72a204d341e710b89ca8be786","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["fct_ping_instance_metric_weekly"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common/schema.yml/not_null_fct_ping_instance_met_50ae86a72a204d341e710b89ca8be786.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"not_null_fct_ping_instance_met_50ae86a72a204d341e710b89ca8be786"},"created_at":1689033754.9275613,"compiled_sql":"\n    \n    \n\n\n\nselect ping_instance_metric_id\nfrom \"PROD\".common.fct_ping_instance_metric_weekly\nwhere ping_instance_metric_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"ping_instance_metric_id","file_key_name":"models.fct_ping_instance_metric_weekly","label":"not_null_fct_ping_instance_metric_weekly_ping_instance_metric_id"}]},"node":{"resource_type":"model","name":"fct_ping_instance_metric_weekly","unique_id":"model.gitlab_snowflake.fct_ping_instance_metric_weekly"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_PING_INSTANCE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":1,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_ping_instance_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"DIM_HOST_ID":{"type":"NUMBER","index":3,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":4,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":5,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_28_DAYS_EARLIER":{"type":"DATE","index":7,"name":"ping_created_date_28_days_earlier","comment":null,"description":"The date 28 days prior to when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_28_days_earlier"},"PING_CREATED_DATE_YEAR":{"type":"DATE","index":8,"name":"ping_created_date_year","comment":null,"description":"The year when the ping was created (YYYY-01-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_year"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":9,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":10,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"PING_CREATED_DATE":{"type":"DATE","index":11,"name":"ping_created_date","comment":null,"description":"The date when the ping was created (YYYY-MM-DD)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date"},"IP_ADDRESS_HASH":{"type":"TEXT","index":12,"name":"ip_address_hash","comment":null,"description":"The hashed source_ip associated with the ping","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ip_address_hash"},"VERSION":{"type":"TEXT","index":13,"name":"version","comment":null,"description":"The full version of GitLab associated with the installation (ex. 13.8.8-ee, 15.4.2, etc). See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":14,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"LICENSE_MD5":{"type":"TEXT","index":15,"name":"license_md5","comment":null,"description":"The md5 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":16,"name":"license_sha256","comment":null,"description":"The SHA-256 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"HISTORICAL_MAX_USERS":{"type":"NUMBER","index":17,"name":"historical_max_users","comment":null,"description":"The peak active (defined as non-blocked) user count ever reported over the lifetime of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"historical_max_users"},"LICENSE_USER_COUNT":{"type":"NUMBER","index":18,"name":"license_user_count","comment":null,"description":"Count of licensed users purchased with the customer's subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_user_count"},"LICENSE_STARTS_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"license_starts_at","comment":null,"description":"The date the license starts","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_starts_at"},"LICENSE_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"license_expires_at","comment":null,"description":"The date the license expires","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_expires_at"},"LICENSE_ADD_ONS":{"type":"VARIANT","index":21,"name":"license_add_ons","comment":null,"description":"The add-ons associated with the license. In [the handbook](https://about.gitlab.com/handbook/support/license-and-renewals/#common-terminology), the term \"add-on\" is defined as\n\n> An optional extra that can be purchased to increase the limits of what is available in GitLab. Common examples of this are a Seat add-on where additional seats are purchased during the subscription term, or an additional Storage or Units of Compute purchase (on SaaS only).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_add_ons"},"RECORDED_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"recorded_at","comment":null,"description":"The time when the Service Ping computation was started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"recorded_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":23,"name":"updated_at","comment":null,"description":"The time when the ping data was last updated from the Versions db","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_at"},"MATTERMOST_ENABLED":{"type":"BOOLEAN","index":24,"name":"mattermost_enabled","comment":null,"description":"Boolean flag set to True if Mattermost is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"mattermost_enabled"},"PING_EDITION":{"type":"TEXT","index":25,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"HOST_NAME":{"type":"TEXT","index":26,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PRODUCT_TIER":{"type":"TEXT","index":27,"name":"product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier"},"LICENSE_TRIAL":{"type":"BOOLEAN","index":28,"name":"license_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This field can be NULL if no license information is provided. There are cases where `license_trial = TRUE` even when an installation is outside of a trial period, so be cautious using this field.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_trial"},"IS_TRIAL":{"type":"BOOLEAN","index":29,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"SOURCE_LICENSE_ID":{"type":"NUMBER","index":30,"name":"source_license_id","comment":null,"description":"The unique identifier of the source license. This appears as `license_id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"source_license_id"},"INSTALLATION_TYPE":{"type":"TEXT","index":31,"name":"installation_type","comment":null,"description":"The type of installation associated with the instance (i.e. gitlab-development-kit, gitlab-helm-chart, gitlab-omnibus-helm-chart)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"installation_type"},"LICENSE_PLAN":{"type":"TEXT","index":32,"name":"license_plan","comment":null,"description":"The license plan associated with the installation (ex, premium, ultimate). This value comes directly from the ping payload","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_plan"},"DATABASE_ADAPTER":{"type":"TEXT","index":33,"name":"database_adapter","comment":null,"description":"The database adapter associated with the installation. This only returns a value of `postgresql` in supported versions of GitLab.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"database_adapter"},"DATABASE_VERSION":{"type":"TEXT","index":34,"name":"database_version","comment":null,"description":"The version of the PostgreSQL database associated with the installation (ex. 9.5.3, 12.10, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"database_version"},"GIT_VERSION":{"type":"TEXT","index":35,"name":"git_version","comment":null,"description":"The version of Git the installations is running (ex. 2.29.0, 2.35.1., 2.14.3, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"git_version"},"GITLAB_PAGES_ENABLED":{"type":"BOOLEAN","index":36,"name":"gitlab_pages_enabled","comment":null,"description":"Boolean flag set to True if GitLab Pages is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_pages_enabled"},"GITLAB_PAGES_VERSION":{"type":"TEXT","index":37,"name":"gitlab_pages_version","comment":null,"description":"The version number of GitLab Pages (ex. 1.25.0, 1.51.0)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_pages_version"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":38,"name":"container_registry_enabled","comment":null,"description":"Boolean flag set to True if container registry is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_enabled"},"ELASTICSEARCH_ENABLED":{"type":"BOOLEAN","index":39,"name":"elasticsearch_enabled","comment":null,"description":"Boolean flag set to True if Elasticsearch is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"elasticsearch_enabled"},"GEO_ENABLED":{"type":"BOOLEAN","index":40,"name":"geo_enabled","comment":null,"description":"Boolean flag set to True if Geo is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"geo_enabled"},"GITLAB_SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":41,"name":"gitlab_shared_runners_enabled","comment":null,"description":"Boolean flag set to True if shared runners is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_shared_runners_enabled"},"GRAVATAR_ENABLED":{"type":"BOOLEAN","index":42,"name":"gravatar_enabled","comment":null,"description":"Boolean flag set to True if Gravatar is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gravatar_enabled"},"LDAP_ENABLED":{"type":"BOOLEAN","index":43,"name":"ldap_enabled","comment":null,"description":"Boolean flag set to True if LDAP is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_enabled"},"OMNIAUTH_ENABLED":{"type":"BOOLEAN","index":44,"name":"omniauth_enabled","comment":null,"description":"Boolean flag set to True if OmniAuth is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"omniauth_enabled"},"REPLY_BY_EMAIL_ENABLED":{"type":"BOOLEAN","index":45,"name":"reply_by_email_enabled","comment":null,"description":"Boolean flag set to True if incoming email is set up","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"reply_by_email_enabled"},"SIGNUP_ENABLED":{"type":"BOOLEAN","index":46,"name":"signup_enabled","comment":null,"description":"Boolean flag set to True if public signup (aka \"Open Registration\") is enabled. More details about this feature [here](https://gitlab.com/groups/gitlab-org/-/epics/4214)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"signup_enabled"},"PROMETHEUS_METRICS_ENABLED":{"type":"BOOLEAN","index":47,"name":"prometheus_metrics_enabled","comment":null,"description":"Boolean flag set to True if the Prometheus Metrics endpoint is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"prometheus_metrics_enabled"},"USAGE_ACTIVITY_BY_STAGE":{"type":"VARIANT","index":48,"name":"usage_activity_by_stage","comment":null,"description":"JSON object containing the `usage_activity_by_stage` metrics","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"usage_activity_by_stage"},"USAGE_ACTIVITY_BY_STAGE_MONTHLY":{"type":"VARIANT","index":49,"name":"usage_activity_by_stage_monthly","comment":null,"description":"JSON object containing the `usage_activity_by_stage_monthly` metrics","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"usage_activity_by_stage_monthly"},"GITALY_CLUSTERS":{"type":"NUMBER","index":50,"name":"gitaly_clusters","comment":null,"description":"Count of total GitLab Managed clusters, both enabled and disabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitaly_clusters"},"GITALY_VERSION":{"type":"TEXT","index":51,"name":"gitaly_version","comment":null,"description":"Version of Gitaly running on the installation (ex. 14.2.1, 15.5.1, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitaly_version"},"GITALY_SERVERS":{"type":"NUMBER","index":52,"name":"gitaly_servers","comment":null,"description":"Count of total Gitaly servers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitaly_servers"},"GITALY_FILESYSTEMS":{"type":"TEXT","index":53,"name":"gitaly_filesystems","comment":null,"description":"Filesystem data for Gitaly installations","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitaly_filesystems"},"GITPOD_ENABLED":{"type":"TEXT","index":54,"name":"gitpod_enabled","comment":null,"description":"Text flag set to True if Gitpod is enabled. This is not a boolean field, so values are `t` and `f` instead of `TRUE` and `FALSE`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitpod_enabled"},"OBJECT_STORE":{"type":"VARIANT","index":55,"name":"object_store","comment":null,"description":"JSON object containing the `object_store` metrics","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"object_store"},"IS_DEPENDENCY_PROXY_ENABLED":{"type":"BOOLEAN","index":56,"name":"is_dependency_proxy_enabled","comment":null,"description":"Boolean flag set to True if the dependency proxy is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_dependency_proxy_enabled"},"RECORDING_CE_FINISHED_AT":{"type":"TIMESTAMP_NTZ","index":57,"name":"recording_ce_finished_at","comment":null,"description":"The time when CE features were computed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"recording_ce_finished_at"},"RECORDING_EE_FINISHED_AT":{"type":"TIMESTAMP_NTZ","index":58,"name":"recording_ee_finished_at","comment":null,"description":"The time with EE-specific features were computed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"recording_ee_finished_at"},"IS_INGRESS_MODSECURITY_ENABLED":{"type":"BOOLEAN","index":59,"name":"is_ingress_modsecurity_enabled","comment":null,"description":"Boolean flag set to True if ModSecurity is enabled within Ingress","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ingress_modsecurity_enabled"},"TOPOLOGY":{"type":"VARIANT","index":60,"name":"topology","comment":null,"description":"JSON object containing the `topology` metrics","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"topology"},"IS_GRAFANA_LINK_ENABLED":{"type":"BOOLEAN","index":61,"name":"is_grafana_link_enabled","comment":null,"description":"Boolean flag set to True if Grafana is enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_grafana_link_enabled"},"ANALYTICS_UNIQUE_VISITS":{"type":"VARIANT","index":62,"name":"analytics_unique_visits","comment":null,"description":"JSON object containing the `analytics_unique_visits` metrics","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"analytics_unique_visits"},"RAW_USAGE_DATA_ID":{"type":"TEXT","index":63,"name":"raw_usage_data_id","comment":null,"description":"The unique identifier of the raw usage data in the Versions db","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"raw_usage_data_id"},"CONTAINER_REGISTRY_VENDOR":{"type":"TEXT","index":64,"name":"container_registry_vendor","comment":null,"description":"The vendor of the container registry (ex. gitlab)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_vendor"},"CONTAINER_REGISTRY_VERSION":{"type":"TEXT","index":65,"name":"container_registry_version","comment":null,"description":"The version of the container registry in use (ex. 2.11.0-gitlab, 3.60.1-gitlab, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_version"},"CLEANED_EDITION":{"type":"TEXT","index":66,"name":"cleaned_edition","comment":null,"description":"A modified version of the edition of GitLab on the installation, with 3 possible values: CE, EE, and EE Free. Here is the SQL that generates this value\n\n`IFF(license_expires_at >= ping_created_at OR license_expires_at IS NULL, main_edition, 'EE Free')`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cleaned_edition"},"CLEANED_VERSION":{"type":"TEXT","index":67,"name":"cleaned_version","comment":null,"description":"The full version of GitLab associated with the installation, formatted as `(Major).(Minor).(Patch)` (ex. 13.8.8, 15.4.2, 14.7.0). See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cleaned_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":68,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"MAJOR_VERSION":{"type":"NUMBER","index":69,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":70,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":71,"name":"major_minor_version","comment":null,"description":"The concatenation of major and minor version, easily joined to `dim_gitlab_releases`. For example, for 13.6.2, `major_minor_version` is 13.6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"MAJOR_MINOR_VERSION_NUM":{"type":"NUMBER","index":72,"name":"major_minor_version_num","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_num"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":73,"name":"MAJOR_MINOR_VERSION_ID","comment":null,"display_name":"major_minor_version_id"},"IS_SAAS_DEDICATED":{"type":"BOOLEAN","index":74,"name":"is_saas_dedicated","comment":null,"description":"Boolean flag set to True if the ping is from a Dedicated implementation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_dedicated"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":75,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":76,"name":"ping_deployment_type","comment":null,"description":"Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"IS_INTERNAL":{"type":"BOOLEAN","index":77,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":78,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":79,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":80,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"COLLECTED_DATA_CATEGORIES":{"type":"TEXT","index":81,"name":"collected_data_categories","comment":null,"description":"Comma-separated list of collected data categories corresponding to the installation's settings (ex: `standard,subscription,operational,optional`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"collected_data_categories"},"RAW_USAGE_DATA_PAYLOAD":{"type":"VARIANT","index":82,"name":"raw_usage_data_payload","comment":null,"description":"Either the original payload value or a reconstructed value. See https://gitlab.com/gitlab-data/analytics/-/merge_requests/4064/diffs#bc1d7221ae33626053b22854f3ecbbfff3ffe633 for rationale.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"raw_usage_data_payload"},"PING_TYPE":{"type":"TEXT","index":83,"name":"ping_type","comment":null,"description":"Indicates whether the ping payload was generated by a manual or automated process, and has three potential values: 'SaaS - Manual', 'SaaS - Automated', and 'Self-Managed'. This field will only have the 'SaaS - Manual' value for the GitLab SaaS production installation (dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7') before February 19, 2023.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_type"},"CREATED_BY":{"type":"TEXT","index":84,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":85,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":86,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":87,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":88,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":89,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:53UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":67096234496,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_ping_instance","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_ping_instance","model.gitlab_snowflake.prep_ping_instance","model.gitlab_snowflake.prep_license","model.gitlab_snowflake.prep_license","model.gitlab_snowflake.prep_charge","model.gitlab_snowflake.prep_charge"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_local","product_and_engineering","dim_ping_instance"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_local/product_and_engineering/dim_ping_instance.sql","original_file_path":"models/common/dimensions_local/product_and_engineering/dim_ping_instance.sql","name":"dim_ping_instance","alias":"dim_ping_instance","checksum":{"name":"sha256","checksum":"e1cfff5804c33f2a80f827381f9de983f78c5c3f833f839ed3ec6782b81707f1"},"tags":["product","mnpi_exception"],"refs":[["dim_date"],["dim_date"],["prep_ping_instance"],["prep_ping_instance"],["prep_license"],["prep_license"],["prep_charge"],["prep_charge"]],"sources":[],"metrics":[],"description":"$18","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_local/product_and_engineering/dim_ping_instance.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033751.269015,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_ping_instance","label":"dim_ping_instance"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_PING_METRIC","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_metric_id","comment":null,"description":"The unique ID of the dim_ping_metric model consisting of metrics_path, created using the dbt surrogate_key macro","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_metric_id"},"METRICS_PATH":{"type":"TEXT","index":2,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"SQL_FRIENDLY_PATH":{"type":"TEXT","index":3,"name":"sql_friendly_path","comment":null,"description":"Reformatted metrics_path that reflects how the metrics_path would be filtered from the raw payload. The metrics are prepended with `raw_usage_data_payload`, and `.` are replaced with `[]`. (Ex. `usage_activity_by_stage_monthly.plan.assignee_lists` has the value `raw_usage_data_payload['usage_activity_by_stage_monthly']['plan']['assignee_lists']`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sql_friendly_path"},"DATA_SOURCE":{"type":"TEXT","index":4,"name":"data_source","comment":null,"description":"The source of the metric. May be set to a value like `database`, `redis`, `redis_hll`, `prometheus`, `system`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"DESCRIPTION":{"type":"TEXT","index":5,"name":"description","comment":null,"description":"A description of the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"description"},"GROUP_NAME":{"type":"TEXT","index":6,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"SECTION_NAME":{"type":"TEXT","index":7,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"STAGE_NAME":{"type":"TEXT","index":8,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"MILESTONE":{"type":"TEXT","index":9,"name":"milestone","comment":null,"description":"The milestone when the metric was introduced and when it was available to Self-Managed installations with the official GitLab release","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"milestone"},"SKIP_VALIDATION":{"type":"TEXT","index":10,"name":"skip_validation","comment":null,"description":"This will always be NULL","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"skip_validation"},"METRICS_STATUS":{"type":"TEXT","index":11,"name":"metrics_status","comment":null,"description":"[Status](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-statuses) of the metric, may be set to `active`, `removed`, or `broken`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_status"},"TIER":{"type":"VARIANT","index":12,"name":"tier","comment":null,"description":"The tier(s) where the tracked feature is available, formatted as an array containing one or a combination of free, premium or ultimate (ex. `[   \"free\",   \"premium\",   \"ultimate\" ]`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"tier"},"TIME_FRAME":{"type":"TEXT","index":13,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"VALUE_TYPE":{"type":"TEXT","index":14,"name":"value_type","comment":null,"description":"One of `string`, `number`, `boolean`, `object`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"value_type"},"INSTRUMENTATION_CLASS":{"type":"TEXT","index":15,"name":"instrumentation_class","comment":null,"description":"The name of the [instrumentation class](https://docs.gitlab.com/ee/development/service_ping/metrics_instrumentation.html#nomenclature) (ex. DatabaseMetric, RedisMetric, RedisHLLMetric, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instrumentation_class"},"IS_GMAU":{"type":"BOOLEAN","index":16,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_SMAU":{"type":"BOOLEAN","index":17,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":18,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":19,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"SNAPSHOT_DATE":{"type":"DATE","index":20,"name":"snapshot_date","comment":null,"description":"The date the data was extracted from metrics YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date"},"UPLOADED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"uploaded_at","comment":null,"description":"The time the data was extracted from metrics YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"uploaded_at"},"DATA_BY_ROW":{"type":"VARIANT","index":22,"name":"data_by_row","comment":null,"description":"JSON object with all fields from YAML file","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_by_row"},"CREATED_BY":{"type":"TEXT","index":23,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":24,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":25,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":26,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":27,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":28,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:19UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":430592,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_ping_metric","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.usage_ping_metrics_source","model.gitlab_snowflake.usage_ping_metrics_source"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_local","product_and_engineering","dim_ping_metric"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_local/product_and_engineering/dim_ping_metric.sql","original_file_path":"models/common/dimensions_local/product_and_engineering/dim_ping_metric.sql","name":"dim_ping_metric","alias":"dim_ping_metric","checksum":{"name":"sha256","checksum":"660bc966a76c37be29514051749c6459f4a993b440e51c2fb90eb3724fb57983"},"tags":["product","mnpi_exception"],"refs":[["usage_ping_metrics_source"],["usage_ping_metrics_source"]],"sources":[],"metrics":[],"description":" This model replaces `dim_usage_ping_metric` table that maps directly to the [Gitlab Metrics Dictionary](https://metrics.gitlab.com/). In addition to all metrics currently in the Service Ping, it also contains metrics that have been removed.\n\nSome other enhancements in this model include : addition of a surrogate key, exclusion and cleaning of some Product groups, and renaming Usage ping to Service Ping. ","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_local/product_and_engineering/dim_ping_metric.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033751.2838063,"compiled_sql":"$1b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_ping_metric","label":"dim_ping_metric"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_PING_INSTANCE_METRIC","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the service_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ping_instance_metric_id"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":2,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"VARIANT","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":6,"name":"dim_product_tier_id","comment":null,"description":"The unique identifier of a product tier, easily joined to `dim_product_tier`. This will reflect the tier of the installation at time of ping creation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"dim_subscription_id","comment":null,"description":"The unique identifier of a subscription, easily joined to `dim_subscription`. This is defined as the subscription_id associated with the license, with `license_subscription_id` from the ping payload as a fallback value.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_LOCATION_COUNTRY_ID":{"type":"NUMBER","index":8,"name":"dim_location_country_id","comment":null,"description":"The unique identifier of a country, easily joined to `dim_location_country`. The location is associated with the IP address of the ping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_location_country_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":9,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":10,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_HOST_ID":{"type":"NUMBER","index":11,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":12,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":13,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"LICENSE_MD5":{"type":"TEXT","index":14,"name":"license_md5","comment":null,"description":"The md5 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":15,"name":"license_sha256","comment":null,"description":"The SHA-256 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"UPLOADED_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"uploaded_at","comment":null,"description":"Column `uploaded_at` (`TIMESTAMP` data type) represent the moment WHEN the record is ingested into Snowflake. \nThe main motivation for introducing this column is for a few reasons:\n1. Be able to track back the exact date and time of data ingesting _(this information wasn't known to us)_\n1. Improving incremental load using `uploaded_at` column \n1. Support \"late_arriving\" ping automatically, without the need to full-refresh a full lineage","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"uploaded_at"},"PING_CREATED_DATE":{"type":"DATE","index":18,"name":"ping_created_date","comment":null,"description":"The date when the ping was created (YYYY-MM-DD)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date"},"UMAU_VALUE":{"type":"NUMBER","index":19,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"DIM_SUBSCRIPTION_LICENSE_ID":{"type":"TEXT","index":20,"name":"dim_subscription_license_id","comment":null,"description":"The unique identifier of a license subscription. This appears as `license_subscription_id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_license_id"},"IS_LICENSE_MAPPED_TO_SUBSCRIPTION":{"type":"BOOLEAN","index":21,"name":"is_license_mapped_to_subscription","comment":null,"description":"Data quality boolean flag set to True if the license table has a value in both license_id and subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_license_mapped_to_subscription"},"IS_LICENSE_SUBSCRIPTION_ID_VALID":{"type":"BOOLEAN","index":22,"name":"is_license_subscription_id_valid","comment":null,"description":"Data quality boolean flag set to True if the subscription_id in the license table is valid (does it exist in the subscription table?)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_license_subscription_id_valid"},"IS_SERVICE_PING_LICENSE_IN_CUSTOMERDOT":{"type":"BOOLEAN","index":23,"name":"is_service_ping_license_in_customerDot","comment":null,"description":"Data quality boolean flag set to True if the license from Service Ping exist in CustomerDot.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_service_ping_license_in_customerDot"},"DATA_SOURCE":{"type":"TEXT","index":24,"name":"data_source","comment":null,"description":"The source application where the data was extracted from (ex. GITLAB_DOTCOM, VERSION_DB)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"PING_TYPE":{"type":"TEXT","index":25,"name":"ping_type","comment":null,"description":"Indicates whether the ping payload was generated by a manual or automated process, and has three potential values: 'SaaS - Manual', 'SaaS - Automated', and 'Self-Managed'. This field will only have the 'SaaS - Manual' value for the GitLab SaaS production installation (dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7') before February 19, 2023.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_type"},"CREATED_BY":{"type":"TEXT","index":26,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":27,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":28,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":29,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":30,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":31,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:57UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1052945513984,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_ping_instance_metric","raw_sql":"$1c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.map_ip_to_country","model.gitlab_snowflake.map_ip_to_country","model.gitlab_snowflake.prep_location_country","model.gitlab_snowflake.prep_location_country","model.gitlab_snowflake.prep_ping_instance_flattened","model.gitlab_snowflake.prep_ping_instance_flattened","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_license","model.gitlab_snowflake.prep_license"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"ping_instance_metric_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_ping_instance_metric"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_ping_instance_metric.sql","original_file_path":"models/common/facts_product_and_engineering/fct_ping_instance_metric.sql","name":"fct_ping_instance_metric","alias":"fct_ping_instance_metric","checksum":{"name":"sha256","checksum":"e5750ce87072a17ffb346629198b6f3321ade816de2b3abcbbc58b6747022cb4"},"tags":["product","mnpi_exception"],"refs":[["prep_subscription"],["prep_subscription"],["dim_date"],["dim_date"],["map_ip_to_country"],["map_ip_to_country"],["prep_location_country"],["prep_location_country"],["prep_ping_instance_flattened"],["prep_ping_instance_flattened"],["dim_product_tier"],["dim_product_tier"],["prep_subscription"],["prep_subscription"],["prep_subscription"],["prep_subscription"],["prep_license"],["prep_license"]],"sources":[],"metrics":[],"description":"$1d","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_ping_instance_metric.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product","mnpi_exception"],"unique_key":"ping_instance_metric_id"},"created_at":1689033751.3162186,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_ping_instance_metric","label":"fct_ping_instance_metric"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$1f","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.simple_cte","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/simple_cte.sql","original_file_path":"macros/utils/simple_cte.sql","name":"simple_cte","macro_sql":"{% macro simple_cte(tuple_list) %}\n\nWITH{% for cte_ref in tuple_list %} {{cte_ref[0]}} AS (\n\n    SELECT * \n    FROM {{ ref(cte_ref[1]) }}\n\n)\n    {%- if not loop.last -%}\n    ,\n    {%- endif -%}\n    \n    {%- endfor -%}\n\n{%- endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"$20","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"tuple_list","type":"list","description":"List of tuples with the alias as the first item and the dbt table reference as the second item."}],"created_at":1689033766.0494742},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527},{"unique_id":"macro.dbt_utils.star","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","name":"star","macro_sql":"{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__star"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033675.9787252}]},"node":{"resource_type":"model","name":"fct_ping_instance_metric_weekly","unique_id":"model.gitlab_snowflake.fct_ping_instance_metric_weekly"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L21",null,{"versions":{"Source":"$22","Compiled":"$23"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
