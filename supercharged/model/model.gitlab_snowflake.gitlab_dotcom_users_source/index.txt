1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.gitlab_dotcom_users_source","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.gitlab_dotcom_users_source\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.gitlab_dotcom_users_source","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.gitlab_dotcom_users_source\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.gitlab_dotcom_users_source","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
55:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:Tff8,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_users_dedupe_source') }}

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    {{ user_role_mapping(user_role='role') }}::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    {{ it_job_title_hierarchy('role') }}
  FROM renamed

)

SELECT *
FROM add_job_hierarchy11:T1bb4,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_dedupe_source

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    CASE
      WHEN role = 0 THEN 'Software Developer'
      WHEN role = 1 THEN 'Development Team Lead'
      WHEN role = 2 THEN 'Devops Engineer'
      WHEN role = 3 THEN 'Systems Administrator'
      WHEN role = 4 THEN 'Security Analyst'
      WHEN role = 5 THEN 'Data Analyst'
      WHEN role = 6 THEN 'Product Manager'
      WHEN role = 7 THEN 'Product Designer'
      WHEN role = 8 THEN 'Other'
      WHEN role = 99 THEN 'Experiment Default Value - Signup Not Completed'
      ELSE NULL
    END::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    CASE
    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(role), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy
  FROM renamed

)

SELECT *
FROM add_job_hierarchy13:T401,This macro maps a job title to the IT job title hierarchy. It works by doing string matching on the job title and categorizing them into 3 buckets:

1. **IT Decision Makers**: CIO, CTO, VP of IT, ...
2. **IT Managers**: Manager of IT. Manager of Procurement, ...
3. **IT Individual contributors**: Software Developer, Application Developer, IT programmer, ...

These buckets are only for IT, information systems, engineering, ... Everything else gets a NULL value assigned to it.

This macro uses the pad_column macro to "pad" the job title field with spaces and discard unrelated pattern matching.

An example of this is the matching for the job title of `IT Manager`. The string pattern for it `%it%manager%` also gets unrelated matches like `Junior Digital Project Manager` or `Supplier Quality Section Manager`. To overcome this problem, the job title field is "padded" with spaces to the both sides of the string and the string pattern changed `% it%manager%`. This way the previous unrelated job titles would not match.14:Td833,{{ config(
    tags=["product"]
) }}
    
{{ simple_cte ([
  ('marketing_contact', 'dim_marketing_contact'),
  ('marketing_contact_order', 'bdg_marketing_contact_order'),
  ('dim_namespace', 'dim_namespace'),
  ('gitlab_dotcom_namespaces_source', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source'),
  ('gitlab_dotcom_members_source', 'gitlab_dotcom_members_source'),
  ('gitlab_dotcom_memberships', 'gitlab_dotcom_memberships'),
  ('customers_db_charges_xf', 'customers_db_charges_xf'),
  ('customers_db_trials', 'customers_db_trials'),
  ('customers_db_leads', 'customers_db_leads_source'),
  ('fct_event_user_daily', 'fct_event_user_daily'),
  ('map_gitlab_dotcom_xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
  ('services', 'gitlab_dotcom_integrations_source'),
  ('project', 'prep_project'),
  ('ptpt_scores_by_user', 'prep_ptpt_scores_by_user'),
  ('ptpf_scores_by_user', 'prep_ptpf_scores_by_user'),
  ('ptp_scores_by_user', 'prep_ptp_scores_by_user'),
  ('namespace_details', 'gitlab_dotcom_namespace_details_source')
]) }}

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    {{ dbt_utils.group_by(3) }}

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    {{ dbt_utils.group_by(7) }}
  
), pqls_with_product_information AS (

    SELECT
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION ALL

    SELECT 
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), latest_pql AS (

    SELECT
      pqls_with_product_information.*,
      gitlab_dotcom_namespaces_source.namespace_name                        AS pql_namespace_name
    FROM pqls_with_product_information
    LEFT JOIN gitlab_dotcom_namespaces_source
      ON gitlab_dotcom_namespaces_source.namespace_id = pqls_with_product_information.pql_namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email ORDER BY pql_event_created_at DESC) = 1

), services_by_email AS (

    SELECT
      latest_pql.email                                                                           AS email,
      COUNT(*)                                                                                   AS pql_nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS pql_integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    LEFT JOIN latest_pql
      ON latest_pql.pql_namespace_id = project.dim_namespace_id
    GROUP BY 1

), users_role_by_email AS (

    SELECT
      latest_pql.email,
      marketing_contact.job_title AS pql_namespace_creator_job_description
    FROM latest_pql 
    INNER JOIN dim_namespace
      ON latest_pql.pql_namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN marketing_contact
      ON dim_namespace.creator_id = marketing_contact.gitlab_dotcom_user_id

)
-------------------------- End of PQL logic --------------------------

, subscription_aggregate AS (

    SELECT
      dim_marketing_contact_id,
      MIN(subscription_start_date)                                                               AS min_subscription_start_date,
      MAX(subscription_end_date)                                                                 AS max_subscription_end_date
    FROM marketing_contact_order
    WHERE subscription_start_date is not null
    GROUP BY dim_marketing_contact_id

), namespace_notifications AS (

    SELECT
      COALESCE(notification_email, email) AS email_address,
      namespace_details.namespace_id      AS user_limit_namespace_id,
      dashboard_notification_at           AS user_limit_notification_at,
      dashboard_enforcement_at            AS user_limit_enforcement_at
    FROM namespace_details
    INNER JOIN dim_namespace
      ON namespace_details.namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN gitlab_dotcom_users_source AS user
      ON user.user_id = dim_namespace.creator_id
      AND state = 'active'
    WHERE dashboard_notification_at IS NOT NULL OR dashboard_enforcement_at IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY COALESCE(dashboard_notification_at, dashboard_enforcement_at) ASC) = 1

), paid_subscription_aggregate AS (

    SELECT 
      dim_marketing_contact_id,
      COUNT(DISTINCT dim_subscription_id)                                                        AS nbr_of_paid_subscriptions
    FROM marketing_contact_order
    WHERE dim_subscription_id is not null
      AND (is_saas_bronze_tier 
           OR is_saas_premium_tier 
           OR is_saas_ultimate_tier 
           OR is_self_managed_starter_tier
           OR is_self_managed_premium_tier
           OR is_self_managed_ultimate_tier
          )
    GROUP BY dim_marketing_contact_id

), distinct_contact_subscription AS (

    SELECT DISTINCT
      dim_marketing_contact_id,
      dim_subscription_id,
      usage_umau_28_days_user,
      usage_action_monthly_active_users_project_repo_28_days_user,
      usage_merge_requests_28_days_user,
      usage_commit_comment_all_time_event,
      usage_source_code_pushes_all_time_event,
      usage_ci_pipelines_28_days_user,
      usage_ci_internal_pipelines_28_days_user,
      usage_ci_builds_28_days_user,
      usage_ci_builds_all_time_user,
      usage_ci_builds_all_time_event,
      usage_ci_runners_all_time_event,
      usage_auto_devops_enabled_all_time_event,
      usage_template_repositories_all_time_event,
      usage_ci_pipeline_config_repository_28_days_user,
      usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_user_container_scanning_jobs_28_days_user,
      usage_user_sast_jobs_28_days_user,
      usage_user_dast_jobs_28_days_user,
      usage_user_dependency_scanning_jobs_28_days_user,
      usage_user_license_management_jobs_28_days_user,
      usage_user_secret_detection_jobs_28_days_user,
      usage_projects_with_packages_all_time_event,
      usage_projects_with_packages_28_days_event,
      usage_deployments_28_days_user,
      usage_releases_28_days_user,
      usage_epics_28_days_user,
      usage_issues_28_days_user,
      usage_instance_user_count_not_aligned,
      usage_historical_max_users_not_aligned
    FROM marketing_contact_order
    WHERE dim_subscription_id IS NOT NULL

), usage_metrics AS (

    SELECT 
      dim_marketing_contact_id,
      SUM(usage_umau_28_days_user)                                                                  AS usage_umau_28_days_user,
      SUM(usage_action_monthly_active_users_project_repo_28_days_user)                              AS usage_action_monthly_active_users_project_repo_28_days_user,
      SUM(usage_merge_requests_28_days_user)                                                        AS usage_merge_requests_28_days_user,
      SUM(usage_commit_comment_all_time_event)                                                      AS usage_commit_comment_all_time_event,
      SUM(usage_source_code_pushes_all_time_event)                                                  AS usage_source_code_pushes_all_time_event,
      SUM(usage_ci_pipelines_28_days_user)                                                          AS usage_ci_pipelines_28_days_user,
      SUM(usage_ci_internal_pipelines_28_days_user)                                                 AS usage_ci_internal_pipelines_28_days_user,
      SUM(usage_ci_builds_28_days_user)                                                             AS usage_ci_builds_28_days_user,
      SUM(usage_ci_builds_all_time_user)                                                            AS usage_ci_builds_all_time_user,
      SUM(usage_ci_builds_all_time_event)                                                           AS usage_ci_builds_all_time_event,
      SUM(usage_ci_runners_all_time_event)                                                          AS usage_ci_runners_all_time_event,
      SUM(usage_auto_devops_enabled_all_time_event)                                                 AS usage_auto_devops_enabled_all_time_event,
      SUM(usage_template_repositories_all_time_event)                                               AS usage_template_repositories_all_time_event,
      SUM(usage_ci_pipeline_config_repository_28_days_user)                                         AS usage_ci_pipeline_config_repository_28_days_user,
      SUM(usage_user_unique_users_all_secure_scanners_28_days_user)                                 AS usage_user_unique_users_all_secure_scanners_28_days_user,
      SUM(usage_user_container_scanning_jobs_28_days_user)                                          AS usage_user_container_scanning_jobs_28_days_user,
      SUM(usage_user_sast_jobs_28_days_user)                                                        AS usage_user_sast_jobs_28_days_user,
      SUM(usage_user_dast_jobs_28_days_user)                                                        AS usage_user_dast_jobs_28_days_user,
      SUM(usage_user_dependency_scanning_jobs_28_days_user)                                         AS usage_user_dependency_scanning_jobs_28_days_user,
      SUM(usage_user_license_management_jobs_28_days_user)                                          AS usage_user_license_management_jobs_28_days_user,
      SUM(usage_user_secret_detection_jobs_28_days_user)                                            AS usage_user_secret_detection_jobs_28_days_user,
      SUM(usage_projects_with_packages_all_time_event)                                              AS usage_projects_with_packages_all_time_event,
      SUM(usage_projects_with_packages_28_days_event)                                               AS usage_projects_with_packages_28_days_event,
      SUM(usage_deployments_28_days_user)                                                           AS usage_deployments_28_days_user,
      SUM(usage_releases_28_days_user)                                                              AS usage_releases_28_days_user,
      SUM(usage_epics_28_days_user)                                                                 AS usage_epics_28_days_user,
      SUM(usage_issues_28_days_user)                                                                AS usage_issues_28_days_user,
      SUM(usage_instance_user_count_not_aligned)                                                    AS usage_instance_user_count_not_aligned,
      SUM(usage_historical_max_users_not_aligned)                                                   AS usage_historical_max_users_not_aligned
    FROM distinct_contact_subscription
    GROUP BY dim_marketing_contact_id

), prep AS (
  
    SELECT     
      marketing_contact.dim_marketing_contact_id,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Member' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_member,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Personal Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_individual_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND (marketing_contact_order.is_saas_ultimate_tier OR marketing_contact_order.is_saas_premium_tier OR marketing_contact_order.is_saas_bronze_tier)
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_paid_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND marketing_contact_order.is_saas_free_tier
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_free_tier,
      IFF(is_group_maintainer_of_saas_free_tier OR is_group_maintainer_of_saas_paid_tier, TRUE, FALSE) AS is_group_maintainer_of_saas,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Customer DB Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_customer_db_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Zuora Billing Contact' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_zuora_billing_contact,
      MIN(marketing_contact_order.days_since_saas_trial_ended)                                   AS days_since_saas_trial_ended,
      MIN(marketing_contact_order.days_since_saas_trial_ended_bucket)                            AS days_since_saas_trial_ended_bucket,
      MAX(marketing_contact_order.days_until_saas_trial_ends)                                    AS days_until_saas_trial_ends,
      MAX(marketing_contact_order.days_until_saas_trial_ends_bucket)                             AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_trial,   
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_trial,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_ultimate_tier,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_ultimate_tier,      
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_starter_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_starter_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_premium_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_premium_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_ultimate_tier) >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_ultimate_tier,
      CASE
        WHEN MAX(marketing_contact_order.is_setup_for_company) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_setup_for_company_use,
      CASE
        WHEN MAX(marketing_contact_order.does_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.does_free_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_free_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_public) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_public_ultimate_parent_namespace,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_private) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_private_ultimate_parent_namespace,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_public = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS public_ultimate_parent_namespaces,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_private = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS private_ultimate_parent_namespaces,
      ARRAY_AGG(
                DISTINCT
                CASE
                  WHEN marketing_contact_order.is_ultimate_parent_namespace = FALSE
                    THEN NULL
                  ELSE IFNULL(marketing_contact_order.marketing_contact_role || ': ' || 
                    IFNULL(marketing_contact_order.namespace_path, CASE 
                                            WHEN marketing_contact_order.self_managed_product_tier IS NOT NULL
                                              THEN 'Self-Managed' 
                                            ELSE '' 
                                          END)  || ' | ' || 
                    IFNULL(marketing_contact_order.saas_product_tier, '') || 
                    IFNULL(marketing_contact_order.self_managed_product_tier, ''),
                    
                    'No Namespace') END
               )                                                                                 AS role_tier_ultimate_namespace_text

    FROM marketing_contact
    LEFT JOIN  marketing_contact_order
      ON marketing_contact_order.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    GROUP BY marketing_contact.dim_marketing_contact_id

), joined AS (

    SELECT 
      prep.*,
      IFF(individual_namespace_is_saas_bronze_tier
        OR group_owner_of_saas_bronze_tier
        OR group_member_of_saas_bronze_tier
        OR responsible_for_group_saas_bronze_tier,
        TRUE, FALSE)                                        AS is_saas_bronze_tier,
      IFF(individual_namespace_is_saas_premium_tier
        OR group_owner_of_saas_premium_tier
        OR group_member_of_saas_premium_tier
        OR responsible_for_group_saas_premium_tier,
        TRUE, FALSE)                                        AS is_saas_premium_tier,
      IFF(individual_namespace_is_saas_ultimate_tier
        OR group_owner_of_saas_ultimate_tier
        OR group_member_of_saas_ultimate_tier
        OR responsible_for_group_saas_ultimate_tier, 
        TRUE, FALSE)                                        AS is_saas_ultimate_tier,
      IFF(is_saas_bronze_tier
        OR is_self_managed_starter_tier,
        TRUE, FALSE)                                        AS is_bronze_starter_tier,
      IFF(is_saas_premium_tier
        OR is_self_managed_premium_tier,
        TRUE, FALSE)                                        AS is_premium_tier,
      IFF(is_saas_ultimate_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_ultimate_tier,                                                      
      IFF(is_saas_bronze_tier
        OR is_saas_premium_tier
        OR is_saas_ultimate_tier,
        TRUE, FALSE)                                        AS is_saas_delivery,
      IFF(is_self_managed_starter_tier
        OR is_self_managed_premium_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_self_managed_delivery,
      IFF(individual_namespace_is_saas_free_tier
        OR group_member_of_saas_free_tier
        OR group_owner_of_saas_free_tier,
        TRUE, FALSE)                                        AS is_saas_free_tier,
      IFF(is_saas_delivery
        OR is_self_managed_delivery,
        TRUE, FALSE)                                        AS is_paid_tier,
      marketing_contact.is_paid_tier_marketo,
      IFF(is_paid_tier = TRUE OR (is_paid_tier = FALSE AND marketing_contact.is_paid_tier_marketo = TRUE), TRUE, FALSE)
                                                            AS is_paid_tier_change,
      subscription_aggregate.min_subscription_start_date,
      subscription_aggregate.max_subscription_end_date,
      paid_subscription_aggregate.nbr_of_paid_subscriptions,
      CASE 
        WHEN (prep.responsible_for_group_saas_free_tier
              OR prep.individual_namespace_is_saas_free_tier
              OR prep.group_owner_of_saas_free_tier
             ) 
             AND NOT (prep.responsible_for_group_saas_ultimate_tier
                      OR prep.responsible_for_group_saas_premium_tier
                      OR prep.responsible_for_group_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_premium_tier
                      OR prep.individual_namespace_is_saas_ultimate_tier
                      OR prep.group_owner_of_saas_bronze_tier
                      OR prep.group_owner_of_saas_premium_tier
                      OR prep.group_owner_of_saas_ultimate_tier
                     )
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_free_tier_only,
      marketing_contact.email_address,
      marketing_contact.first_name,
      IFNULL(marketing_contact.last_name, 'Unknown')                                             AS last_name,
      marketing_contact.gitlab_user_name,
      IFNULL(marketing_contact.company_name, 'Unknown')                                          AS company_name,
      marketing_contact.sfdc_record_id,
      marketing_contact.dim_crm_account_id,
      marketing_contact.job_title,
      marketing_contact.it_job_title_hierarchy,
      marketing_contact.country,
      marketing_contact.mobile_phone,
      marketing_contact.sfdc_parent_sales_segment,
      marketing_contact.sfdc_parent_crm_account_region,
      marketing_contact.marketo_lead_id,
      marketing_contact.is_marketo_lead,
      marketing_contact.is_marketo_email_hard_bounced,
      marketing_contact.marketo_email_hard_bounced_date,
      marketing_contact.is_marketo_unsubscribed,
      marketing_contact.is_marketo_opted_in,
      marketing_contact.has_marketo_unsubscribed,
      marketing_contact.marketo_compliance_segment_value,
      marketing_contact.is_sfdc_lead_contact,
      marketing_contact.sfdc_lead_contact,
      marketing_contact.sfdc_created_date,
      marketing_contact.is_sfdc_opted_out,
      marketing_contact.is_gitlab_dotcom_user,
      marketing_contact.gitlab_dotcom_user_id,
      marketing_contact.gitlab_dotcom_created_date,
      marketing_contact.gitlab_dotcom_confirmed_date,
      marketing_contact.gitlab_dotcom_active_state,
      marketing_contact.gitlab_dotcom_last_login_date,
      marketing_contact.gitlab_dotcom_email_opted_in,
      marketing_contact.days_since_saas_signup,
      marketing_contact.days_since_saas_signup_bucket,
      marketing_contact.is_customer_db_user,
      marketing_contact.customer_db_customer_id,
      marketing_contact.customer_db_created_date,
      marketing_contact.customer_db_confirmed_date,
      IFF(latest_pql.email IS NOT NULL, TRUE, FALSE) AS is_pql,
      marketing_contact.is_pql_marketo,
      IFF(is_pql = TRUE OR (is_pql = FALSE AND marketing_contact.is_pql_marketo = TRUE), TRUE, FALSE)
                                            AS is_pql_change,
      latest_pql.pql_namespace_id,
      latest_pql.pql_namespace_name,
      latest_pql.pql_namespace_name_masked, 
      latest_pql.pql_product_interaction,
      latest_pql.pql_list_stages,
      latest_pql.pql_nbr_stages,
      latest_pql.pql_nbr_namespace_users,
      latest_pql.pql_trial_start_date,
      latest_pql.pql_min_subscription_start_date,
      latest_pql.pql_event_created_at,
      services_by_email.pql_nbr_integrations_installed,
      services_by_email.pql_integrations_installed,
      users_role_by_email.pql_namespace_creator_job_description,
      marketing_contact.days_since_self_managed_owner_signup,
      marketing_contact.days_since_self_managed_owner_signup_bucket,
      marketing_contact.zuora_contact_id,
      marketing_contact.zuora_created_date,
      marketing_contact.zuora_active_state,
      marketing_contact.wip_is_valid_email_address,
      marketing_contact.wip_invalid_email_address_reason,

      -- Propensity to purchase trials fields
      IFF(ptpt_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpt_contact,
      IFF(is_ptpt_contact = TRUE OR (is_ptpt_contact = FALSE AND marketing_contact.is_ptpt_contact_marketo = TRUE), TRUE, FALSE)
                                                  AS is_ptpt_contact_change,
      ptpt_scores_by_user.namespace_id            AS ptpt_namespace_id,
      ptpt_scores_by_user.score_group             AS ptpt_score_group,
      ptpt_scores_by_user.insights                AS ptpt_insights,
      ptpt_scores_by_user.score_date              AS ptpt_score_date,
      ptpt_scores_by_user.past_score_group        AS ptpt_past_score_group,
      ptpt_scores_by_user.past_score_date         AS ptpt_past_score_date,

      -- Propensity to purchase Free fields
      IFF(ptpf_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpf_contact,
      ptpf_scores_by_user.namespace_id            AS ptpf_namespace_id,
      ptpf_scores_by_user.score_group             AS ptpf_score_group,
      ptpf_scores_by_user.score_date              AS ptpf_score_date,
      ptpf_scores_by_user.past_score_group        AS ptpf_past_score_group,
      ptpf_scores_by_user.past_score_date         AS ptpf_past_score_date,

      -- Propensity to purchase fields
      IFF(ptp_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptp_contact,
      IFF(is_ptp_contact = TRUE OR (is_ptp_contact = FALSE AND marketing_contact.is_ptp_contact_marketo = TRUE
        ), TRUE, FALSE)
                                                  AS is_ptp_contact_change,
      ptp_scores_by_user.namespace_id             AS ptp_namespace_id,
      ptp_scores_by_user.score_group              AS ptp_score_group,
      ptp_scores_by_user.score_date               AS ptp_score_date,
      ptp_scores_by_user.insights                 AS ptp_insights,
      ptp_scores_by_user.past_insights            AS ptp_past_insights,
      ptp_scores_by_user.past_score_group         AS ptp_past_score_group,
      ptp_scores_by_user.past_score_date          AS ptp_past_score_date,
      CASE
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 0 AND 30 THEN '< 30 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 30 AND 60 THEN '30 - 60 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 60 AND 90 THEN '60 - 90 days'
        WHEN ptp_scores_by_user.days_since_trial_start >= 90 THEN '90+ days'
      END                                         AS ptp_days_since_trial_start,
      ptp_scores_by_user.ptp_source               AS ptp_source,

      -- Namespace notification dates
      namespace_notifications.user_limit_namespace_id,
      namespace_notifications.user_limit_notification_at,
      namespace_notifications.user_limit_enforcement_at,
      IFF(namespace_notifications.user_limit_notification_at IS NOT NULL OR namespace_notifications.user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                              AS is_impacted_by_user_limit,
      IFF(is_impacted_by_user_limit = TRUE OR (is_impacted_by_user_limit = FALSE AND marketing_contact.is_impacted_by_user_limit_marketo = TRUE), TRUE, FALSE)
                                                  AS is_impacted_by_user_limit_change,

      usage_metrics.usage_umau_28_days_user,
      usage_metrics.usage_action_monthly_active_users_project_repo_28_days_user,
      usage_metrics.usage_merge_requests_28_days_user,
      usage_metrics.usage_commit_comment_all_time_event,
      usage_metrics.usage_source_code_pushes_all_time_event,
      usage_metrics.usage_ci_pipelines_28_days_user,
      usage_metrics.usage_ci_internal_pipelines_28_days_user,
      usage_metrics.usage_ci_builds_28_days_user,
      usage_metrics.usage_ci_builds_all_time_user,
      usage_metrics.usage_ci_builds_all_time_event,
      usage_metrics.usage_ci_runners_all_time_event,
      usage_metrics.usage_auto_devops_enabled_all_time_event,
      usage_metrics.usage_template_repositories_all_time_event,
      usage_metrics.usage_ci_pipeline_config_repository_28_days_user,
      usage_metrics.usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_metrics.usage_user_container_scanning_jobs_28_days_user,
      usage_metrics.usage_user_sast_jobs_28_days_user,
      usage_metrics.usage_user_dast_jobs_28_days_user,
      usage_metrics.usage_user_dependency_scanning_jobs_28_days_user,
      usage_metrics.usage_user_license_management_jobs_28_days_user,
      usage_metrics.usage_user_secret_detection_jobs_28_days_user,
      usage_metrics.usage_projects_with_packages_all_time_event,
      usage_metrics.usage_projects_with_packages_28_days_event,
      usage_metrics.usage_deployments_28_days_user,
      usage_metrics.usage_releases_28_days_user,
      usage_metrics.usage_epics_28_days_user,
      usage_metrics.usage_issues_28_days_user,
      usage_metrics.usage_instance_user_count_not_aligned,
      usage_metrics.usage_historical_max_users_not_aligned,
      'Raw'                                                                                      AS lead_status,
      'Snowflake Email Marketing Database'                                                       AS lead_source      
    FROM prep
    LEFT JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN subscription_aggregate
      ON subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN paid_subscription_aggregate
      ON paid_subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN usage_metrics
      ON usage_metrics.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN latest_pql
      ON latest_pql.email = marketing_contact.email_address
    LEFT JOIN services_by_email
      ON services_by_email.email = marketing_contact.email_address
    LEFT JOIN users_role_by_email
      ON users_role_by_email.email = marketing_contact.email_address
    LEFT JOIN ptpt_scores_by_user
      ON ptpt_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptpf_scores_by_user
      ON ptpf_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptp_scores_by_user
      ON ptp_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN namespace_notifications
      ON namespace_notifications.email_address = marketing_contact.email_address
)

{{ hash_diff(
    cte_ref="joined",
    return_cte="final",
    columns=[
      'is_group_namespace_owner',
      'is_group_namespace_member',
      'is_individual_namespace_owner',
      'is_customer_db_owner',
      'is_zuora_billing_contact',
      'days_since_saas_trial_ended_bucket',
      'individual_namespace_is_saas_trial',
      'individual_namespace_is_saas_free_tier',
      'individual_namespace_is_saas_bronze_tier',
      'individual_namespace_is_saas_premium_tier',
      'individual_namespace_is_saas_ultimate_tier',
      'group_member_of_saas_trial',
      'group_member_of_saas_free_tier',
      'group_member_of_saas_bronze_tier',
      'group_member_of_saas_premium_tier',
      'group_member_of_saas_ultimate_tier',
      'group_owner_of_saas_trial',
      'group_owner_of_saas_free_tier',
      'group_owner_of_saas_bronze_tier',
      'group_owner_of_saas_premium_tier',
      'group_owner_of_saas_ultimate_tier',
      'responsible_for_group_saas_trial',
      'responsible_for_group_saas_free_tier',
      'responsible_for_group_saas_bronze_tier',
      'responsible_for_group_saas_premium_tier',
      'responsible_for_group_saas_ultimate_tier',
      'is_self_managed_starter_tier',
      'is_self_managed_premium_tier',
      'is_self_managed_ultimate_tier',
      'email_address',
      'first_name',
      'last_name',
      'gitlab_user_name',
      'company_name',
      'country',
      'is_gitlab_dotcom_user',
      'gitlab_dotcom_user_id',
      'gitlab_dotcom_created_date',
      'gitlab_dotcom_confirmed_date',
      'gitlab_dotcom_active_state',
      'gitlab_dotcom_last_login_date',
      'gitlab_dotcom_email_opted_in',
      'is_customer_db_user',
      'customer_db_customer_id',
      'customer_db_created_date',
      'customer_db_confirmed_date',
      'zuora_contact_id',
      'zuora_created_date',
      'zuora_active_state',
      'pql_list_stages',
      'pql_nbr_stages',
      'pql_nbr_namespace_users',
      'has_namespace_setup_for_company_use',
      'pql_namespace_id',
      'pql_namespace_name',
      'pql_nbr_integrations_installed',
      'pql_integrations_installed',
      'pql_namespace_creator_job_description',
      'is_pql',
      'is_paid_tier',
      'is_pql_change',
      'is_paid_tier_change',
      'is_ptpt_contact',
      'is_ptpt_contact_change',
      'ptpt_namespace_id',
      'ptpt_score_group',
      'ptpt_insights',
      'ptpt_score_date',
      'ptpt_past_score_group',
      'is_member_of_public_ultimate_parent_namespace',
      'is_member_of_private_ultimate_parent_namespace',
      'user_limit_notification_at',
      'user_limit_enforcement_at',
      'is_impacted_by_user_limit',
      'is_impacted_by_user_limit_change',
      'user_limit_namespace_id',
      'marketo_lead_id',
      'is_ptp_contact',
      'is_ptp_contact_change',
      'ptp_namespace_id',
      'ptp_score_group',
      'ptp_score_date',
      'ptp_insights',
      'ptp_past_insights',
      'ptp_past_score_group',
      'ptp_days_since_trial_start',
      'ptp_source'
      ]
) }}

{{ dbt_audit(
    cte_ref="final",
    created_by="@trevor31",
    updated_by="@jpeguero",
    created_date="2021-02-09",
    updated_date="2023-06-19"
) }}15:Tea0b,
    


WITH marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), marketing_contact_order AS (

    SELECT * 
    FROM "PREP".sensitive.bdg_marketing_contact_order

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), gitlab_dotcom_namespaces_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), gitlab_dotcom_members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_dotcom_memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), customers_db_charges_xf AS (

    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

), customers_db_trials AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_trials

), customers_db_leads AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), fct_event_user_daily AS (

    SELECT * 
    FROM "PROD".common.fct_event_user_daily

), map_gitlab_dotcom_xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), services AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), ptpt_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptpt_scores_by_user

), ptpf_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptpf_scores_by_user

), ptp_scores_by_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ptp_scores_by_user

), namespace_details AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_details_source

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    group by 1,2,3

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    group by 1,2,3,4,5,6,7
  
), pqls_with_product_information AS (

    SELECT
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION ALL

    SELECT 
      pqls.email,
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      COALESCE(pqls.namespace_name,stages_adopted.namespace_name)          AS pql_namespace_name_masked,
      pqls.user_id,
      pqls.trial_start_date                                                AS pql_trial_start_date,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      stages_adopted.list_of_stages                                        AS pql_list_stages,
      stages_adopted.active_stage_count                                    AS pql_nbr_stages,
      IFNULL(namespaces_with_user_count.current_member_count, 0) + 1       AS pql_nbr_namespace_users,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), latest_pql AS (

    SELECT
      pqls_with_product_information.*,
      gitlab_dotcom_namespaces_source.namespace_name                        AS pql_namespace_name
    FROM pqls_with_product_information
    LEFT JOIN gitlab_dotcom_namespaces_source
      ON gitlab_dotcom_namespaces_source.namespace_id = pqls_with_product_information.pql_namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email ORDER BY pql_event_created_at DESC) = 1

), services_by_email AS (

    SELECT
      latest_pql.email                                                                           AS email,
      COUNT(*)                                                                                   AS pql_nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS pql_integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    LEFT JOIN latest_pql
      ON latest_pql.pql_namespace_id = project.dim_namespace_id
    GROUP BY 1

), users_role_by_email AS (

    SELECT
      latest_pql.email,
      marketing_contact.job_title AS pql_namespace_creator_job_description
    FROM latest_pql 
    INNER JOIN dim_namespace
      ON latest_pql.pql_namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN marketing_contact
      ON dim_namespace.creator_id = marketing_contact.gitlab_dotcom_user_id

)
-------------------------- End of PQL logic --------------------------

, subscription_aggregate AS (

    SELECT
      dim_marketing_contact_id,
      MIN(subscription_start_date)                                                               AS min_subscription_start_date,
      MAX(subscription_end_date)                                                                 AS max_subscription_end_date
    FROM marketing_contact_order
    WHERE subscription_start_date is not null
    GROUP BY dim_marketing_contact_id

), namespace_notifications AS (

    SELECT
      COALESCE(notification_email, email) AS email_address,
      namespace_details.namespace_id      AS user_limit_namespace_id,
      dashboard_notification_at           AS user_limit_notification_at,
      dashboard_enforcement_at            AS user_limit_enforcement_at
    FROM namespace_details
    INNER JOIN dim_namespace
      ON namespace_details.namespace_id = dim_namespace.dim_namespace_id
    INNER JOIN gitlab_dotcom_users_source AS user
      ON user.user_id = dim_namespace.creator_id
      AND state = 'active'
    WHERE dashboard_notification_at IS NOT NULL OR dashboard_enforcement_at IS NOT NULL
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY COALESCE(dashboard_notification_at, dashboard_enforcement_at) ASC) = 1

), paid_subscription_aggregate AS (

    SELECT 
      dim_marketing_contact_id,
      COUNT(DISTINCT dim_subscription_id)                                                        AS nbr_of_paid_subscriptions
    FROM marketing_contact_order
    WHERE dim_subscription_id is not null
      AND (is_saas_bronze_tier 
           OR is_saas_premium_tier 
           OR is_saas_ultimate_tier 
           OR is_self_managed_starter_tier
           OR is_self_managed_premium_tier
           OR is_self_managed_ultimate_tier
          )
    GROUP BY dim_marketing_contact_id

), distinct_contact_subscription AS (

    SELECT DISTINCT
      dim_marketing_contact_id,
      dim_subscription_id,
      usage_umau_28_days_user,
      usage_action_monthly_active_users_project_repo_28_days_user,
      usage_merge_requests_28_days_user,
      usage_commit_comment_all_time_event,
      usage_source_code_pushes_all_time_event,
      usage_ci_pipelines_28_days_user,
      usage_ci_internal_pipelines_28_days_user,
      usage_ci_builds_28_days_user,
      usage_ci_builds_all_time_user,
      usage_ci_builds_all_time_event,
      usage_ci_runners_all_time_event,
      usage_auto_devops_enabled_all_time_event,
      usage_template_repositories_all_time_event,
      usage_ci_pipeline_config_repository_28_days_user,
      usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_user_container_scanning_jobs_28_days_user,
      usage_user_sast_jobs_28_days_user,
      usage_user_dast_jobs_28_days_user,
      usage_user_dependency_scanning_jobs_28_days_user,
      usage_user_license_management_jobs_28_days_user,
      usage_user_secret_detection_jobs_28_days_user,
      usage_projects_with_packages_all_time_event,
      usage_projects_with_packages_28_days_event,
      usage_deployments_28_days_user,
      usage_releases_28_days_user,
      usage_epics_28_days_user,
      usage_issues_28_days_user,
      usage_instance_user_count_not_aligned,
      usage_historical_max_users_not_aligned
    FROM marketing_contact_order
    WHERE dim_subscription_id IS NOT NULL

), usage_metrics AS (

    SELECT 
      dim_marketing_contact_id,
      SUM(usage_umau_28_days_user)                                                                  AS usage_umau_28_days_user,
      SUM(usage_action_monthly_active_users_project_repo_28_days_user)                              AS usage_action_monthly_active_users_project_repo_28_days_user,
      SUM(usage_merge_requests_28_days_user)                                                        AS usage_merge_requests_28_days_user,
      SUM(usage_commit_comment_all_time_event)                                                      AS usage_commit_comment_all_time_event,
      SUM(usage_source_code_pushes_all_time_event)                                                  AS usage_source_code_pushes_all_time_event,
      SUM(usage_ci_pipelines_28_days_user)                                                          AS usage_ci_pipelines_28_days_user,
      SUM(usage_ci_internal_pipelines_28_days_user)                                                 AS usage_ci_internal_pipelines_28_days_user,
      SUM(usage_ci_builds_28_days_user)                                                             AS usage_ci_builds_28_days_user,
      SUM(usage_ci_builds_all_time_user)                                                            AS usage_ci_builds_all_time_user,
      SUM(usage_ci_builds_all_time_event)                                                           AS usage_ci_builds_all_time_event,
      SUM(usage_ci_runners_all_time_event)                                                          AS usage_ci_runners_all_time_event,
      SUM(usage_auto_devops_enabled_all_time_event)                                                 AS usage_auto_devops_enabled_all_time_event,
      SUM(usage_template_repositories_all_time_event)                                               AS usage_template_repositories_all_time_event,
      SUM(usage_ci_pipeline_config_repository_28_days_user)                                         AS usage_ci_pipeline_config_repository_28_days_user,
      SUM(usage_user_unique_users_all_secure_scanners_28_days_user)                                 AS usage_user_unique_users_all_secure_scanners_28_days_user,
      SUM(usage_user_container_scanning_jobs_28_days_user)                                          AS usage_user_container_scanning_jobs_28_days_user,
      SUM(usage_user_sast_jobs_28_days_user)                                                        AS usage_user_sast_jobs_28_days_user,
      SUM(usage_user_dast_jobs_28_days_user)                                                        AS usage_user_dast_jobs_28_days_user,
      SUM(usage_user_dependency_scanning_jobs_28_days_user)                                         AS usage_user_dependency_scanning_jobs_28_days_user,
      SUM(usage_user_license_management_jobs_28_days_user)                                          AS usage_user_license_management_jobs_28_days_user,
      SUM(usage_user_secret_detection_jobs_28_days_user)                                            AS usage_user_secret_detection_jobs_28_days_user,
      SUM(usage_projects_with_packages_all_time_event)                                              AS usage_projects_with_packages_all_time_event,
      SUM(usage_projects_with_packages_28_days_event)                                               AS usage_projects_with_packages_28_days_event,
      SUM(usage_deployments_28_days_user)                                                           AS usage_deployments_28_days_user,
      SUM(usage_releases_28_days_user)                                                              AS usage_releases_28_days_user,
      SUM(usage_epics_28_days_user)                                                                 AS usage_epics_28_days_user,
      SUM(usage_issues_28_days_user)                                                                AS usage_issues_28_days_user,
      SUM(usage_instance_user_count_not_aligned)                                                    AS usage_instance_user_count_not_aligned,
      SUM(usage_historical_max_users_not_aligned)                                                   AS usage_historical_max_users_not_aligned
    FROM distinct_contact_subscription
    GROUP BY dim_marketing_contact_id

), prep AS (
  
    SELECT     
      marketing_contact.dim_marketing_contact_id,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Group Namespace Member' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_group_namespace_member,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Personal Namespace Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_individual_namespace_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND (marketing_contact_order.is_saas_ultimate_tier OR marketing_contact_order.is_saas_premium_tier OR marketing_contact_order.is_saas_bronze_tier)
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_paid_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Maintainer'
                                                                        )
                  AND marketing_contact_order.is_saas_free_tier
                    THEN 1
                  ELSE 0
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS is_group_maintainer_of_saas_free_tier,
      IFF(is_group_maintainer_of_saas_free_tier OR is_group_maintainer_of_saas_paid_tier, TRUE, FALSE) AS is_group_maintainer_of_saas,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Customer DB Owner' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_customer_db_owner,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.marketing_contact_role = 'Zuora Billing Contact' 
                    THEN 1 
                  ELSE 0 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_zuora_billing_contact,
      MIN(marketing_contact_order.days_since_saas_trial_ended)                                   AS days_since_saas_trial_ended,
      MIN(marketing_contact_order.days_since_saas_trial_ended_bucket)                            AS days_since_saas_trial_ended_bucket,
      MAX(marketing_contact_order.days_until_saas_trial_ends)                                    AS days_until_saas_trial_ends,
      MAX(marketing_contact_order.days_until_saas_trial_ends_bucket)                             AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_trial,   
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 1 
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS individual_namespace_is_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_trial,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_member_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_group_namespace = 1 
                    AND marketing_contact_order.marketing_contact_role = 'Group Namespace Member'
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_member_of_saas_ultimate_tier,      
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS group_owner_of_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Group Namespace Owner'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS group_owner_of_saas_ultimate_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         ) 
                    THEN marketing_contact_order.is_saas_trial AND marketing_contact_order.trial_end_date >= CURRENT_DATE
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_trial,    
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_free_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_free_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_bronze_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_bronze_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0 
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_premium_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_group_saas_premium_tier,
      CASE 
        WHEN MAX(CASE 
                  WHEN marketing_contact_order.is_individual_namespace = 0
                    AND marketing_contact_order.marketing_contact_role IN (
                                                                          'Customer DB Owner'
                                                                          , 'Zuora Billing Contact'
                                                                         )
                    THEN marketing_contact_order.is_saas_ultimate_tier 
                  ELSE NULL 
                END) >= 1 THEN TRUE 
        ELSE FALSE
      END                                                                                        AS responsible_for_group_saas_ultimate_tier,      
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_starter_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_starter_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_premium_tier)  >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_premium_tier, 
      CASE 
        WHEN MAX(marketing_contact_order.is_self_managed_ultimate_tier) >= 1 
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS is_self_managed_ultimate_tier,
      CASE
        WHEN MAX(marketing_contact_order.is_setup_for_company) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_setup_for_company_use,
      CASE
        WHEN MAX(marketing_contact_order.does_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.does_free_namespace_have_public_project) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS has_free_namespace_with_public_project,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_public) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_public_ultimate_parent_namespace,
      CASE
        WHEN MAX(marketing_contact_order.is_ultimate_parent_namespace_private) = TRUE
          THEN TRUE
        ELSE FALSE
      END                                                                                        AS is_member_of_private_ultimate_parent_namespace,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_public = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS public_ultimate_parent_namespaces,
      ARRAY_AGG(DISTINCT IFF(marketing_contact_order.is_ultimate_parent_namespace_private = TRUE, marketing_contact_order.dim_namespace_id, NULL))
                                                                                                 AS private_ultimate_parent_namespaces,
      ARRAY_AGG(
                DISTINCT
                CASE
                  WHEN marketing_contact_order.is_ultimate_parent_namespace = FALSE
                    THEN NULL
                  ELSE IFNULL(marketing_contact_order.marketing_contact_role || ': ' || 
                    IFNULL(marketing_contact_order.namespace_path, CASE 
                                            WHEN marketing_contact_order.self_managed_product_tier IS NOT NULL
                                              THEN 'Self-Managed' 
                                            ELSE '' 
                                          END)  || ' | ' || 
                    IFNULL(marketing_contact_order.saas_product_tier, '') || 
                    IFNULL(marketing_contact_order.self_managed_product_tier, ''),
                    
                    'No Namespace') END
               )                                                                                 AS role_tier_ultimate_namespace_text

    FROM marketing_contact
    LEFT JOIN  marketing_contact_order
      ON marketing_contact_order.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    GROUP BY marketing_contact.dim_marketing_contact_id

), joined AS (

    SELECT 
      prep.*,
      IFF(individual_namespace_is_saas_bronze_tier
        OR group_owner_of_saas_bronze_tier
        OR group_member_of_saas_bronze_tier
        OR responsible_for_group_saas_bronze_tier,
        TRUE, FALSE)                                        AS is_saas_bronze_tier,
      IFF(individual_namespace_is_saas_premium_tier
        OR group_owner_of_saas_premium_tier
        OR group_member_of_saas_premium_tier
        OR responsible_for_group_saas_premium_tier,
        TRUE, FALSE)                                        AS is_saas_premium_tier,
      IFF(individual_namespace_is_saas_ultimate_tier
        OR group_owner_of_saas_ultimate_tier
        OR group_member_of_saas_ultimate_tier
        OR responsible_for_group_saas_ultimate_tier, 
        TRUE, FALSE)                                        AS is_saas_ultimate_tier,
      IFF(is_saas_bronze_tier
        OR is_self_managed_starter_tier,
        TRUE, FALSE)                                        AS is_bronze_starter_tier,
      IFF(is_saas_premium_tier
        OR is_self_managed_premium_tier,
        TRUE, FALSE)                                        AS is_premium_tier,
      IFF(is_saas_ultimate_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_ultimate_tier,                                                      
      IFF(is_saas_bronze_tier
        OR is_saas_premium_tier
        OR is_saas_ultimate_tier,
        TRUE, FALSE)                                        AS is_saas_delivery,
      IFF(is_self_managed_starter_tier
        OR is_self_managed_premium_tier
        OR is_self_managed_ultimate_tier,
        TRUE, FALSE)                                        AS is_self_managed_delivery,
      IFF(individual_namespace_is_saas_free_tier
        OR group_member_of_saas_free_tier
        OR group_owner_of_saas_free_tier,
        TRUE, FALSE)                                        AS is_saas_free_tier,
      IFF(is_saas_delivery
        OR is_self_managed_delivery,
        TRUE, FALSE)                                        AS is_paid_tier,
      marketing_contact.is_paid_tier_marketo,
      IFF(is_paid_tier = TRUE OR (is_paid_tier = FALSE AND marketing_contact.is_paid_tier_marketo = TRUE), TRUE, FALSE)
                                                            AS is_paid_tier_change,
      subscription_aggregate.min_subscription_start_date,
      subscription_aggregate.max_subscription_end_date,
      paid_subscription_aggregate.nbr_of_paid_subscriptions,
      CASE 
        WHEN (prep.responsible_for_group_saas_free_tier
              OR prep.individual_namespace_is_saas_free_tier
              OR prep.group_owner_of_saas_free_tier
             ) 
             AND NOT (prep.responsible_for_group_saas_ultimate_tier
                      OR prep.responsible_for_group_saas_premium_tier
                      OR prep.responsible_for_group_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_bronze_tier
                      OR prep.individual_namespace_is_saas_premium_tier
                      OR prep.individual_namespace_is_saas_ultimate_tier
                      OR prep.group_owner_of_saas_bronze_tier
                      OR prep.group_owner_of_saas_premium_tier
                      OR prep.group_owner_of_saas_ultimate_tier
                     )
          THEN TRUE 
        ELSE FALSE 
      END                                                                                        AS responsible_for_free_tier_only,
      marketing_contact.email_address,
      marketing_contact.first_name,
      IFNULL(marketing_contact.last_name, 'Unknown')                                             AS last_name,
      marketing_contact.gitlab_user_name,
      IFNULL(marketing_contact.company_name, 'Unknown')                                          AS company_name,
      marketing_contact.sfdc_record_id,
      marketing_contact.dim_crm_account_id,
      marketing_contact.job_title,
      marketing_contact.it_job_title_hierarchy,
      marketing_contact.country,
      marketing_contact.mobile_phone,
      marketing_contact.sfdc_parent_sales_segment,
      marketing_contact.sfdc_parent_crm_account_region,
      marketing_contact.marketo_lead_id,
      marketing_contact.is_marketo_lead,
      marketing_contact.is_marketo_email_hard_bounced,
      marketing_contact.marketo_email_hard_bounced_date,
      marketing_contact.is_marketo_unsubscribed,
      marketing_contact.is_marketo_opted_in,
      marketing_contact.has_marketo_unsubscribed,
      marketing_contact.marketo_compliance_segment_value,
      marketing_contact.is_sfdc_lead_contact,
      marketing_contact.sfdc_lead_contact,
      marketing_contact.sfdc_created_date,
      marketing_contact.is_sfdc_opted_out,
      marketing_contact.is_gitlab_dotcom_user,
      marketing_contact.gitlab_dotcom_user_id,
      marketing_contact.gitlab_dotcom_created_date,
      marketing_contact.gitlab_dotcom_confirmed_date,
      marketing_contact.gitlab_dotcom_active_state,
      marketing_contact.gitlab_dotcom_last_login_date,
      marketing_contact.gitlab_dotcom_email_opted_in,
      marketing_contact.days_since_saas_signup,
      marketing_contact.days_since_saas_signup_bucket,
      marketing_contact.is_customer_db_user,
      marketing_contact.customer_db_customer_id,
      marketing_contact.customer_db_created_date,
      marketing_contact.customer_db_confirmed_date,
      IFF(latest_pql.email IS NOT NULL, TRUE, FALSE) AS is_pql,
      marketing_contact.is_pql_marketo,
      IFF(is_pql = TRUE OR (is_pql = FALSE AND marketing_contact.is_pql_marketo = TRUE), TRUE, FALSE)
                                            AS is_pql_change,
      latest_pql.pql_namespace_id,
      latest_pql.pql_namespace_name,
      latest_pql.pql_namespace_name_masked, 
      latest_pql.pql_product_interaction,
      latest_pql.pql_list_stages,
      latest_pql.pql_nbr_stages,
      latest_pql.pql_nbr_namespace_users,
      latest_pql.pql_trial_start_date,
      latest_pql.pql_min_subscription_start_date,
      latest_pql.pql_event_created_at,
      services_by_email.pql_nbr_integrations_installed,
      services_by_email.pql_integrations_installed,
      users_role_by_email.pql_namespace_creator_job_description,
      marketing_contact.days_since_self_managed_owner_signup,
      marketing_contact.days_since_self_managed_owner_signup_bucket,
      marketing_contact.zuora_contact_id,
      marketing_contact.zuora_created_date,
      marketing_contact.zuora_active_state,
      marketing_contact.wip_is_valid_email_address,
      marketing_contact.wip_invalid_email_address_reason,

      -- Propensity to purchase trials fields
      IFF(ptpt_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpt_contact,
      IFF(is_ptpt_contact = TRUE OR (is_ptpt_contact = FALSE AND marketing_contact.is_ptpt_contact_marketo = TRUE), TRUE, FALSE)
                                                  AS is_ptpt_contact_change,
      ptpt_scores_by_user.namespace_id            AS ptpt_namespace_id,
      ptpt_scores_by_user.score_group             AS ptpt_score_group,
      ptpt_scores_by_user.insights                AS ptpt_insights,
      ptpt_scores_by_user.score_date              AS ptpt_score_date,
      ptpt_scores_by_user.past_score_group        AS ptpt_past_score_group,
      ptpt_scores_by_user.past_score_date         AS ptpt_past_score_date,

      -- Propensity to purchase Free fields
      IFF(ptpf_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptpf_contact,
      ptpf_scores_by_user.namespace_id            AS ptpf_namespace_id,
      ptpf_scores_by_user.score_group             AS ptpf_score_group,
      ptpf_scores_by_user.score_date              AS ptpf_score_date,
      ptpf_scores_by_user.past_score_group        AS ptpf_past_score_group,
      ptpf_scores_by_user.past_score_date         AS ptpf_past_score_date,

      -- Propensity to purchase fields
      IFF(ptp_scores_by_user.namespace_id IS NOT NULL, TRUE, FALSE)
                                                  AS is_ptp_contact,
      IFF(is_ptp_contact = TRUE OR (is_ptp_contact = FALSE AND marketing_contact.is_ptp_contact_marketo = TRUE
        ), TRUE, FALSE)
                                                  AS is_ptp_contact_change,
      ptp_scores_by_user.namespace_id             AS ptp_namespace_id,
      ptp_scores_by_user.score_group              AS ptp_score_group,
      ptp_scores_by_user.score_date               AS ptp_score_date,
      ptp_scores_by_user.insights                 AS ptp_insights,
      ptp_scores_by_user.past_insights            AS ptp_past_insights,
      ptp_scores_by_user.past_score_group         AS ptp_past_score_group,
      ptp_scores_by_user.past_score_date          AS ptp_past_score_date,
      CASE
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 0 AND 30 THEN '< 30 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 30 AND 60 THEN '30 - 60 days'
        WHEN ptp_scores_by_user.days_since_trial_start BETWEEN 60 AND 90 THEN '60 - 90 days'
        WHEN ptp_scores_by_user.days_since_trial_start >= 90 THEN '90+ days'
      END                                         AS ptp_days_since_trial_start,
      ptp_scores_by_user.ptp_source               AS ptp_source,

      -- Namespace notification dates
      namespace_notifications.user_limit_namespace_id,
      namespace_notifications.user_limit_notification_at,
      namespace_notifications.user_limit_enforcement_at,
      IFF(namespace_notifications.user_limit_notification_at IS NOT NULL OR namespace_notifications.user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                              AS is_impacted_by_user_limit,
      IFF(is_impacted_by_user_limit = TRUE OR (is_impacted_by_user_limit = FALSE AND marketing_contact.is_impacted_by_user_limit_marketo = TRUE), TRUE, FALSE)
                                                  AS is_impacted_by_user_limit_change,

      usage_metrics.usage_umau_28_days_user,
      usage_metrics.usage_action_monthly_active_users_project_repo_28_days_user,
      usage_metrics.usage_merge_requests_28_days_user,
      usage_metrics.usage_commit_comment_all_time_event,
      usage_metrics.usage_source_code_pushes_all_time_event,
      usage_metrics.usage_ci_pipelines_28_days_user,
      usage_metrics.usage_ci_internal_pipelines_28_days_user,
      usage_metrics.usage_ci_builds_28_days_user,
      usage_metrics.usage_ci_builds_all_time_user,
      usage_metrics.usage_ci_builds_all_time_event,
      usage_metrics.usage_ci_runners_all_time_event,
      usage_metrics.usage_auto_devops_enabled_all_time_event,
      usage_metrics.usage_template_repositories_all_time_event,
      usage_metrics.usage_ci_pipeline_config_repository_28_days_user,
      usage_metrics.usage_user_unique_users_all_secure_scanners_28_days_user,
      usage_metrics.usage_user_container_scanning_jobs_28_days_user,
      usage_metrics.usage_user_sast_jobs_28_days_user,
      usage_metrics.usage_user_dast_jobs_28_days_user,
      usage_metrics.usage_user_dependency_scanning_jobs_28_days_user,
      usage_metrics.usage_user_license_management_jobs_28_days_user,
      usage_metrics.usage_user_secret_detection_jobs_28_days_user,
      usage_metrics.usage_projects_with_packages_all_time_event,
      usage_metrics.usage_projects_with_packages_28_days_event,
      usage_metrics.usage_deployments_28_days_user,
      usage_metrics.usage_releases_28_days_user,
      usage_metrics.usage_epics_28_days_user,
      usage_metrics.usage_issues_28_days_user,
      usage_metrics.usage_instance_user_count_not_aligned,
      usage_metrics.usage_historical_max_users_not_aligned,
      'Raw'                                                                                      AS lead_status,
      'Snowflake Email Marketing Database'                                                       AS lead_source      
    FROM prep
    LEFT JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN subscription_aggregate
      ON subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN paid_subscription_aggregate
      ON paid_subscription_aggregate.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN usage_metrics
      ON usage_metrics.dim_marketing_contact_id = prep.dim_marketing_contact_id
    LEFT JOIN latest_pql
      ON latest_pql.email = marketing_contact.email_address
    LEFT JOIN services_by_email
      ON services_by_email.email = marketing_contact.email_address
    LEFT JOIN users_role_by_email
      ON users_role_by_email.email = marketing_contact.email_address
    LEFT JOIN ptpt_scores_by_user
      ON ptpt_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptpf_scores_by_user
      ON ptpf_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN ptp_scores_by_user
      ON ptp_scores_by_user.dim_marketing_contact_id = marketing_contact.dim_marketing_contact_id
    LEFT JOIN namespace_notifications
      ON namespace_notifications.email_address = marketing_contact.email_address
)



  , hashing AS (

    SELECT *,

      md5(cast(coalesce(cast(is_group_namespace_owner as 
    varchar
), '') || '-' || coalesce(cast(is_group_namespace_member as 
    varchar
), '') || '-' || coalesce(cast(is_individual_namespace_owner as 
    varchar
), '') || '-' || coalesce(cast(is_customer_db_owner as 
    varchar
), '') || '-' || coalesce(cast(is_zuora_billing_contact as 
    varchar
), '') || '-' || coalesce(cast(days_since_saas_trial_ended_bucket as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(individual_namespace_is_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(group_member_of_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(group_owner_of_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_trial as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_free_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_bronze_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(responsible_for_group_saas_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_starter_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_premium_tier as 
    varchar
), '') || '-' || coalesce(cast(is_self_managed_ultimate_tier as 
    varchar
), '') || '-' || coalesce(cast(email_address as 
    varchar
), '') || '-' || coalesce(cast(first_name as 
    varchar
), '') || '-' || coalesce(cast(last_name as 
    varchar
), '') || '-' || coalesce(cast(gitlab_user_name as 
    varchar
), '') || '-' || coalesce(cast(company_name as 
    varchar
), '') || '-' || coalesce(cast(country as 
    varchar
), '') || '-' || coalesce(cast(is_gitlab_dotcom_user as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_user_id as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_created_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_active_state as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_last_login_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_email_opted_in as 
    varchar
), '') || '-' || coalesce(cast(is_customer_db_user as 
    varchar
), '') || '-' || coalesce(cast(customer_db_customer_id as 
    varchar
), '') || '-' || coalesce(cast(customer_db_created_date as 
    varchar
), '') || '-' || coalesce(cast(customer_db_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(zuora_contact_id as 
    varchar
), '') || '-' || coalesce(cast(zuora_created_date as 
    varchar
), '') || '-' || coalesce(cast(zuora_active_state as 
    varchar
), '') || '-' || coalesce(cast(pql_list_stages as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_stages as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_namespace_users as 
    varchar
), '') || '-' || coalesce(cast(has_namespace_setup_for_company_use as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_name as 
    varchar
), '') || '-' || coalesce(cast(pql_nbr_integrations_installed as 
    varchar
), '') || '-' || coalesce(cast(pql_integrations_installed as 
    varchar
), '') || '-' || coalesce(cast(pql_namespace_creator_job_description as 
    varchar
), '') || '-' || coalesce(cast(is_pql as 
    varchar
), '') || '-' || coalesce(cast(is_paid_tier as 
    varchar
), '') || '-' || coalesce(cast(is_pql_change as 
    varchar
), '') || '-' || coalesce(cast(is_paid_tier_change as 
    varchar
), '') || '-' || coalesce(cast(is_ptpt_contact as 
    varchar
), '') || '-' || coalesce(cast(is_ptpt_contact_change as 
    varchar
), '') || '-' || coalesce(cast(ptpt_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(ptpt_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptpt_insights as 
    varchar
), '') || '-' || coalesce(cast(ptpt_score_date as 
    varchar
), '') || '-' || coalesce(cast(ptpt_past_score_group as 
    varchar
), '') || '-' || coalesce(cast(is_member_of_public_ultimate_parent_namespace as 
    varchar
), '') || '-' || coalesce(cast(is_member_of_private_ultimate_parent_namespace as 
    varchar
), '') || '-' || coalesce(cast(user_limit_notification_at as 
    varchar
), '') || '-' || coalesce(cast(user_limit_enforcement_at as 
    varchar
), '') || '-' || coalesce(cast(is_impacted_by_user_limit as 
    varchar
), '') || '-' || coalesce(cast(is_impacted_by_user_limit_change as 
    varchar
), '') || '-' || coalesce(cast(user_limit_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(marketo_lead_id as 
    varchar
), '') || '-' || coalesce(cast(is_ptp_contact as 
    varchar
), '') || '-' || coalesce(cast(is_ptp_contact_change as 
    varchar
), '') || '-' || coalesce(cast(ptp_namespace_id as 
    varchar
), '') || '-' || coalesce(cast(ptp_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptp_score_date as 
    varchar
), '') || '-' || coalesce(cast(ptp_insights as 
    varchar
), '') || '-' || coalesce(cast(ptp_past_insights as 
    varchar
), '') || '-' || coalesce(cast(ptp_past_score_group as 
    varchar
), '') || '-' || coalesce(cast(ptp_days_since_trial_start as 
    varchar
), '') || '-' || coalesce(cast(ptp_source as 
    varchar
), '') as 
    varchar
)) as prev_hash

    FROM joined

  ), final as (

      

        SELECT hashing.*,
          CASE
            WHEN hashing.prev_hash = t.prev_hash THEN last_changed
            ELSE CURRENT_TIMESTAMP()
          END AS last_changed
        FROM hashing
        LEFT JOIN "PREP".sensitive.mart_marketing_contact as t on t.prev_hash = hashing.prev_hash

      

  )


SELECT
      *,
      '@trevor31'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-09'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final16:T1783,{{ simple_cte ([
  ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_members', 'gitlab_dotcom_members_source'),
  ('gitlab_users', 'gitlab_dotcom_users_source'),
  ('customer_db_source', 'customers_db_customers_source'),
  ('zuora_account', 'zuora_account_source'),
  ('zuora_contact', 'zuora_contact_source'),
  ('dim_marketing_contact', 'dim_marketing_contact'),
  ('prep_namespace', 'prep_namespace')
]) }}

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2022-10-03"
) }}17:T19aa,

WITH gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_members AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_users AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_customers_source

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

)

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2022-10-03'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final18:Tbf3,Array of objects containing information related to each ultimate parent namespace that the marketing contact is directly related to. Each object inside the array is a different namespace.

For the trial fields in the objects, in case a namespace has had multiple trials only the latest one will be used to populate the fields. If a namespace never had a trials, these fields will not exist in the object.

Each object in the array contains the following fields (in case it does not, it means that the attribute is not applicable to that namespace):

- **Namespace_id**: Gitlab.com namespace_id of the namespace in question.
- **user_access_level**: Numerical value representing the access level the marketing user contact has to the namespace. Mapping of the numerical values can be seen [HERE](https://docs.gitlab.com/ee/api/access_requests.html).
- **user_access_level_name**: Name of the access level the marketing user contact has to the namespace.
- **gitlab_plan_title**: Plan of the namespace.
- **gitlab_plan_is_paid**: Flag indicating whether the namespace is paid or not.
- **is_setup_for_company**: Flag indicating whether the namespace was set up for company use or not.
- **current_member_count**: Number of members in the namespace
- **created_at**: Creation timestamp of the namespace.
- **creator_user_id**: The gitlab_dotcom_user_id of the creator of the namespace.
- **is_setup_for_company**: Flag indicating whether the namespace was set up for company use or not.
- **trial_start_date**: Trial start date of the namespace. 
- **trial_expired_date**: Date in which the trial expires/expired at. 
- **is_active_trial**: Flag that indicates whether the namespace is in an active trial. 
- **glm_content**: GLM content of the trial. 
- **glm_source**: GLM source of the trial. 
- **is_namespace_pql**: Flag indicating whether the namespace is part of the PQL program (Product Qualified Lead). 
- **list_of_stages**: Array listing all the stages adopted by the namespace during Trial and/or Free process. 
- **nbr_integrations_installed**: Number integrations installed in the namespace. 
- **integrations_installed**: Array listing all the integrations installed in the namespace. 
- **ptp_source**: Source of the propensity to purchase model. Currently, that can be from either PtPT (Propensity to Purchase: Trial) or PtPF (Propensity to Purchase: Free) models. 
- **ptp_score_date**: Date in which the ptp_score_group was calculated. 
- **ptp_score_group**: Score group for the namespace given by the PtP machine learning model. 
- **ptp_insights**: List of insights on the PtP scores. 
- **ptp_previous_score_group**: Previous score group for the namespace given by the PtP machine learning model. 
- **user_limit_notification_at**: Datetime detailing when the user limit notification happened for the namespace. 
- **user_limit_enforcement_at**: Datetime detailing when the user limit enforcement will happen for the namespace. 
- **is_impacted_by_user_limit**: Flag indicating whether the namespace is impacted by the user limits project.19:T49a2,{{ config(
    materialized='table'
) }}

{{ simple_cte([
    ('dim_marketing_contact','dim_marketing_contact'),
    ('gitlab_dotcom_members_source','gitlab_dotcom_members_source'),
    ('dim_namespace', 'dim_namespace'),
    ('ptpt_scores', 'ptpt_scores'),
    ('ptpf_scores', 'ptpf_scores'),
    ('customers_db_trial_histories_source', 'customers_db_trial_histories_source'),
    ('gitlab_dotcom_namespace_details_source', 'gitlab_dotcom_namespace_details_source'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source'),

    ('gitlab_dotcom_memberships', 'gitlab_dotcom_memberships'),
    ('customers_db_trials', 'customers_db_trials'),
    ('customers_db_charges_xf', 'customers_db_charges_xf'),
    ('customers_db_leads', 'customers_db_leads_source'),
    ('map_gitlab_dotcom_xmau_metrics', 'map_gitlab_dotcom_xmau_metrics'),
    ('services', 'gitlab_dotcom_integrations_source'),
    ('project', 'prep_project'),
    ('fct_event_user_daily', 'fct_event_user_daily')
]) }}

, ptpt_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), ptpt_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpt_score_dates
    LIMIT 1

), ptpf_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), ptpf_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpf_score_dates
    LIMIT 1

), namespace_user_mapping AS (

  SELECT DISTINCT
    gitlab_dotcom_members_source.user_id,
    gitlab_dotcom_members_source.source_id AS namespace_id,
    dim_namespace.ultimate_parent_namespace_id,
    gitlab_dotcom_members_source.access_level
  FROM gitlab_dotcom_members_source
  LEFT JOIN dim_namespace
    ON gitlab_dotcom_members_source.source_id = dim_namespace.dim_namespace_id
  WHERE gitlab_dotcom_members_source.is_currently_valid = TRUE
    AND gitlab_dotcom_members_source.member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('gitlab_dotcom_members_source', 'user_id') }}
    AND gitlab_dotcom_members_source.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_dotcom_members_source.user_id, gitlab_dotcom_members_source.source_id
    ORDER BY gitlab_dotcom_members_source.access_level DESC) = 1 -- There are less than 100 cases where a user has more than one access level to
    -- the same namespace. This selects the highest of said access levels

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    {{ dbt_utils.group_by(3) }}

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    {{ dbt_utils.group_by(7) }}
  
), pqls_filtered AS (

    SELECT
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION

    SELECT 
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), services_by_namespace AS (

    SELECT
      project.dim_namespace_id                                                                   AS dim_namespace_id,
      COUNT(*)                                                                                   AS nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    INNER JOIN namespaces
      ON namespaces.dim_namespace_id = project.dim_namespace_id
    GROUP BY 1

), pqls_by_user AS (

    SELECT DISTINCT user_id
    FROM pqls

)

-------------------------- End of PQL logic --------------------------

, stages_adopted_by_namespace AS (

  SELECT DISTINCT
    dim_namespace_id,
    list_of_stages,
    active_stage_count
  FROM stages_adopted

), namespace_details AS (

  SELECT
    namespace_user_mapping.user_id,
    dim_namespace.dim_namespace_id                                              AS namespace_id,
    namespace_user_mapping.access_level                                         AS user_access_level,
    CASE user_access_level
      WHEN 50 THEN 'Owner'
      WHEN 40 THEN 'Maintainer'
      WHEN 30 THEN 'Developer'
      WHEN 20 THEN 'Reporter'
      WHEN 10 THEN 'Guest'
      WHEN 5  THEN 'Minimal access'
      ELSE 'Other'
    END                                                                         AS user_access_level_name,

    dim_namespace.gitlab_plan_title,
    dim_namespace.gitlab_plan_is_paid,
    dim_namespace.is_setup_for_company,
    dim_namespace.current_member_count,
    dim_namespace.created_at                                                    AS created_at,
    dim_namespace.creator_id                                                    AS creator_user_id,

    customers_db_trial_histories_source.start_date                              AS trial_start_date,
    customers_db_trial_histories_source.expired_on                              AS trial_expired_date,
    IFF(CURRENT_DATE() >= trial_start_date AND CURRENT_DATE() <= COALESCE(trial_expired_date, CURRENT_DATE()), TRUE, FALSE) 
                                                                                AS is_active_trial,
    customers_db_trial_histories_source.glm_content,
    customers_db_trial_histories_source.glm_source,

    IFF(pqls_filtered.pql_namespace_id IS NOT NULL, TRUE, FALSE)                AS is_namespace_pql,

    stages_adopted_by_namespace.list_of_stages,
    stages_adopted_by_namespace.active_stage_count,
    services_by_namespace.nbr_integrations_installed,
    services_by_namespace.integrations_installed,

    
    CASE
      WHEN last_ptpt_scores.score_group >= 4
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group >= 4
        THEN 'Free'
      WHEN last_ptpt_scores.score_group IS NOT NULL
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group IS NOT NULL
        THEN 'Free'
      ELSE NULL
    END                                                                         AS ptp_source,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_date, last_ptpf_scores.score_date)
                                                                                AS ptp_score_date,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_group, last_ptpf_scores.score_group)
                                                                                AS ptp_score_group,
    IFF(ptp_source = 'Trial', last_ptpt_scores.insights, last_ptpf_scores.insights)
                                                                                AS ptp_insights,
    IFF(ptp_source = 'Trial', second_last_ptpt_scores.score_group, second_last_ptpf_scores.score_group)
                                                                                AS ptp_previous_score_group,

    gitlab_dotcom_namespace_details_source.dashboard_notification_at            AS user_limit_notification_at,
    gitlab_dotcom_namespace_details_source.dashboard_enforcement_at             AS user_limit_enforcement_at,
    IFF(user_limit_notification_at IS NOT NULL OR user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                                                            AS is_impacted_by_user_limit

  FROM namespace_user_mapping
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
    AND namespace_is_ultimate_parent = TRUE
  LEFT JOIN ptpt_last_dates
  LEFT JOIN ptpt_scores AS last_ptpt_scores
    ON last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpt_scores.score_date = ptpt_last_dates.last_score_date
  LEFT JOIN ptpt_scores AS second_last_ptpt_scores
    ON second_last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpt_scores.score_date = ptpt_last_dates.second_last_score_date
  LEFT JOIN ptpf_last_dates
  LEFT JOIN ptpf_scores AS last_ptpf_scores
    ON last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpf_scores.score_date = ptpf_last_dates.last_score_date
  LEFT JOIN ptpf_scores AS second_last_ptpf_scores
    ON second_last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpf_scores.score_date = ptpf_last_dates.second_last_score_date
  LEFT JOIN customers_db_trial_histories_source
    ON customers_db_trial_histories_source.gl_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN gitlab_dotcom_namespace_details_source
    ON gitlab_dotcom_namespace_details_source.namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN stages_adopted_by_namespace
    ON stages_adopted_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN pqls_filtered
    ON pqls_filtered.pql_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN services_by_namespace
    ON services_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id

), user_aggregated_namespace_details AS (

  SELECT 
    user_id,
    ARRAY_AGG(OBJECT_CONSTRUCT(*)) AS namespaces_array
  FROM namespace_details
  GROUP BY 1
  
), user_trials AS (

  SELECT
    user_id,
    MAX(trial_start_date) AS max_trial_start_date
  FROM namespace_details
  GROUP BY 1

  ), user_details_and_namespace_details AS (

  SELECT
    dim_marketing_contact.dim_marketing_contact_id,
    dim_marketing_contact.email_address,
    dim_marketing_contact.first_name,
    dim_marketing_contact.last_name,
    dim_marketing_contact.country,
    dim_marketing_contact.company_name,
    dim_marketing_contact.job_title,
    dim_marketing_contact.gitlab_dotcom_user_id,
    dim_marketing_contact.gitlab_user_name,
    dim_marketing_contact.gitlab_dotcom_active_state,
    dim_marketing_contact.gitlab_dotcom_confirmed_date,
    dim_marketing_contact.gitlab_dotcom_created_date,
    dim_marketing_contact.gitlab_dotcom_last_login_date,
    dim_marketing_contact.gitlab_dotcom_email_opted_in,
    IFF(pqls_by_user.user_id IS NOT NULL, TRUE, FALSE) AS is_pql,
    user_trials.max_trial_start_date,
    user_aggregated_namespace_details.namespaces_array

  FROM dim_marketing_contact
  LEFT JOIN user_aggregated_namespace_details
    ON dim_marketing_contact.gitlab_dotcom_user_id = user_aggregated_namespace_details.user_id
  LEFT JOIN pqls_by_user
    ON pqls_by_user.user_id = dim_marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN user_trials
    ON user_trials.user_id = dim_marketing_contact.gitlab_dotcom_user_id

  WHERE dim_marketing_contact.gitlab_dotcom_user_id IS NOT NULL
    AND (
      dim_marketing_contact.gitlab_dotcom_created_date::DATE >= '2022-06-01'
      OR user_trials.max_trial_start_date::DATE >= DATEADD('month', -3, CURRENT_DATE)
    )

)

{{ hash_diff(
    cte_ref="user_details_and_namespace_details",
    return_cte="final",
    columns=[
      'first_name',
      'last_name',
      'country',
      'company_name',
      'job_title',
      'gitlab_dotcom_user_id',
      'gitlab_user_name',
      'gitlab_dotcom_active_state',
      'gitlab_dotcom_confirmed_date',
      'gitlab_dotcom_created_date',
      'gitlab_dotcom_last_login_date',
      'gitlab_dotcom_email_opted_in',
      'is_pql',
      'max_trial_start_date',
      'namespaces_array'
      ]
) }}

SELECT *
FROM final1a:T502a,



WITH dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), gitlab_dotcom_members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), dim_namespace AS (

    SELECT * 
    FROM "PROD".common.dim_namespace

), ptpt_scores AS (

    SELECT * 
    FROM "PROD".workspace_data_science.ptpt_scores

), ptpf_scores AS (

    SELECT * 
    FROM "PROD".workspace_data_science.ptpf_scores

), customers_db_trial_histories_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), gitlab_dotcom_namespace_details_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_details_source

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), gitlab_dotcom_memberships AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_memberships

), customers_db_trials AS (

    SELECT * 
    FROM "PROD".legacy.customers_db_trials

), customers_db_charges_xf AS (

    SELECT * 
    FROM "PROD".restricted_safe_legacy.customers_db_charges_xf

), customers_db_leads AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), map_gitlab_dotcom_xmau_metrics AS (

    SELECT * 
    FROM "PROD".common_mapping.map_gitlab_dotcom_xmau_metrics

), services AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), fct_event_user_daily AS (

    SELECT * 
    FROM "PROD".common.fct_event_user_daily

)

, ptpt_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), ptpt_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpt_score_dates
    LIMIT 1

), ptpf_score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), ptpf_last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS second_last_score_date
    FROM ptpf_score_dates
    LIMIT 1

), namespace_user_mapping AS (

  SELECT DISTINCT
    gitlab_dotcom_members_source.user_id,
    gitlab_dotcom_members_source.source_id AS namespace_id,
    dim_namespace.ultimate_parent_namespace_id,
    gitlab_dotcom_members_source.access_level
  FROM gitlab_dotcom_members_source
  LEFT JOIN dim_namespace
    ON gitlab_dotcom_members_source.source_id = dim_namespace.dim_namespace_id
  WHERE gitlab_dotcom_members_source.is_currently_valid = TRUE
    AND gitlab_dotcom_members_source.member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = gitlab_dotcom_members_source.user_id

    )
    AND gitlab_dotcom_members_source.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_dotcom_members_source.user_id, gitlab_dotcom_members_source.source_id
    ORDER BY gitlab_dotcom_members_source.access_level DESC) = 1 -- There are less than 100 cases where a user has more than one access level to
    -- the same namespace. This selects the highest of said access levels

)

-------------------------- Start of PQL logic: --------------------------

, namespaces AS (
  
    SELECT
      gitlab_dotcom_users_source.email,
      dim_namespace.dim_namespace_id,
      dim_namespace.namespace_name,
      dim_namespace.created_at              AS namespace_created_at,
      dim_namespace.created_at::DATE        AS namespace_created_at_date,
      dim_namespace.gitlab_plan_title       AS plan_title,
      dim_namespace.creator_id,
      dim_namespace.current_member_count    AS member_count
    FROM dim_namespace
    LEFT JOIN gitlab_dotcom_users_source
      ON gitlab_dotcom_users_source.user_id = dim_namespace.creator_id
    WHERE dim_namespace.namespace_is_internal = FALSE
      AND LOWER(gitlab_dotcom_users_source.state) = 'active'
      AND LOWER(dim_namespace.namespace_type) = 'group'
      AND dim_namespace.ultimate_parent_namespace_id = dim_namespace.dim_namespace_id 
      AND date(dim_namespace.created_at) >= '2021-01-27'::DATE
  
), flattened_members AS (

    SELECT --flattening members table to 1 record per member_id
      members.user_id,
      members.source_id,
      members.invite_created_at,
      MIN(members.invite_accepted_at) AS invite_accepted_at
    FROM gitlab_dotcom_members_source members
    INNER JOIN namespaces --limit to just namespaces we care about
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
    WHERE LOWER(members.member_source_type) = 'namespace' --only looking at namespace invites
      AND members.invite_created_at >= namespaces.namespace_created_at --invite created after namespace created
      AND IFNULL(members.invite_accepted_at, CURRENT_TIMESTAMP) >= members.invite_created_at --invite accepted after invite created (removes weird edge cases with imported projects, etc)
    group by 1,2,3

), invite_status AS (

    SELECT --pull in relevant namespace data, invite status, etc
      namespaces.dim_namespace_id,
      members.user_id,
      IFF(memberships.user_id IS NOT NULL, TRUE, FALSE) AS invite_was_successful --flag whether the user actually joined the namespace
    FROM flattened_members members
    JOIN namespaces
      ON members.source_id = namespaces.dim_namespace_id --same as namespace_id for group namespaces
      AND (invite_accepted_at IS NULL OR (TIMESTAMPDIFF(minute,invite_accepted_at,namespace_created_at) NOT IN (0,1,2))) = TRUE -- this blocks namespaces created within two minutes of the namespace creator accepting their invite
    LEFT JOIN gitlab_dotcom_memberships memberships --record added once invite is accepted/user has access
      ON members.user_id = memberships.user_id
      AND members.source_id = memberships.membership_source_id
      AND memberships.is_billable = TRUE
    WHERE members.user_id != namespaces.creator_id --not an "invite" if user created namespace

), namespaces_with_user_count AS (

    SELECT
      dim_namespace_id,
      COUNT(DISTINCT user_id) AS current_member_count
    FROM invite_status
    WHERE invite_was_successful = TRUE
    GROUP BY 1

), subscriptions AS (
  
    SELECT 
      charges.current_gitlab_namespace_id::INT                      AS namespace_id, 
      MIN(charges.subscription_start_date)                          AS min_subscription_start_date
    FROM customers_db_charges_xf charges
    INNER JOIN namespaces 
      ON charges.current_gitlab_namespace_id = namespaces.dim_namespace_id
    WHERE charges.current_gitlab_namespace_id IS NOT NULL
      AND charges.product_category IN ('SaaS - Ultimate','SaaS - Premium') -- changing to product category field, used by the charges table
    GROUP BY 1
  
), latest_trial_by_user AS (
  
    SELECT *
    FROM customers_db_trials
    QUALIFY ROW_NUMBER() OVER(PARTITION BY gitlab_user_id ORDER BY trial_start_date DESC) = 1

), pqls AS (
  
    SELECT DISTINCT
      leads.product_interaction,
      leads.user_id,
      users.email,
      leads.namespace_id           AS dim_namespace_id,
      dim_namespace.namespace_name,
      leads.trial_start_date::DATE AS trial_start_date,
      leads.created_at             AS pql_event_created_at
    FROM customers_db_leads leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'hand raise pql'
  
    UNION ALL
  
    SELECT DISTINCT 
      leads.product_interaction,
      leads.user_id,
      users.email,
      latest_trial_by_user.gitlab_namespace_id    AS dim_namespace_id,
      dim_namespace.namespace_name,
      latest_trial_by_user.trial_start_date::DATE AS trial_start_date,
      leads.created_at                            AS pql_event_created_at
    FROM customers_db_leads AS leads
    LEFT JOIN gitlab_dotcom_users_source AS users
      ON leads.user_id = users.user_id
    LEFT JOIN latest_trial_by_user
      ON latest_trial_by_user.gitlab_user_id = leads.user_id
    LEFT JOIN dim_namespace
      ON dim_namespace.dim_namespace_id = leads.namespace_id
    WHERE LOWER(leads.product_interaction) = 'saas trial'
      AND leads.is_for_business_use = 'True'

), stages_adopted AS (
  
    SELECT 
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      namespaces.email,
      namespaces.creator_id,
      namespaces.member_count,
      'SaaS Trial or Free'                       AS product_interaction,
      subscriptions.min_subscription_start_date,
      ARRAYAGG(DISTINCT events.stage_name)       AS list_of_stages,
      COUNT(DISTINCT events.stage_name)          AS active_stage_count
    FROM fct_event_user_daily   AS events
    INNER JOIN namespaces 
      ON namespaces.dim_namespace_id = events.dim_ultimate_parent_namespace_id 
    LEFT JOIN map_gitlab_dotcom_xmau_metrics AS xmau 
      ON xmau.common_events_to_include = events.event_name
    LEFT JOIN subscriptions 
      ON subscriptions.namespace_id = namespaces.dim_namespace_id
    WHERE days_since_namespace_creation_at_event_date BETWEEN 0 AND 365
      AND events.plan_name_at_event_date IN ('trial','free', 'ultimate_trial') --Added in to only use events from a free or trial namespace (which filters based on the selection chose for the `free_or_trial` filter
      AND xmau.smau = TRUE
      AND events.event_date BETWEEN namespaces.namespace_created_at_date AND IFNULL(subscriptions.min_subscription_start_date,CURRENT_DATE)
    group by 1,2,3,4,5,6,7
  
), pqls_filtered AS (

    SELECT
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted 
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'saas trial'
      AND IFNULL(stages_adopted.min_subscription_start_date,CURRENT_DATE) >= pqls.trial_start_date

    UNION

    SELECT 
      pqls.product_interaction                                             AS pql_product_interaction,
      COALESCE(pqls.dim_namespace_id,stages_adopted.dim_namespace_id)::INT AS pql_namespace_id,
      stages_adopted.min_subscription_start_date                           AS pql_min_subscription_start_date,
      pqls.pql_event_created_at
    FROM pqls
    LEFT JOIN stages_adopted
      ON pqls.dim_namespace_id = stages_adopted.dim_namespace_id
    LEFT JOIN namespaces_with_user_count
      ON namespaces_with_user_count.dim_namespace_id = pqls.dim_namespace_id
    WHERE LOWER(pqls.product_interaction) = 'hand raise pql'

), services_by_namespace AS (

    SELECT
      project.dim_namespace_id                                                                   AS dim_namespace_id,
      COUNT(*)                                                                                   AS nbr_integrations_installed,
      ARRAY_AGG(DISTINCT services.service_type) WITHIN GROUP (ORDER BY services.service_type)    AS integrations_installed
    FROM services
    LEFT JOIN project
      ON services.project_id = project.dim_project_id
    INNER JOIN namespaces
      ON namespaces.dim_namespace_id = project.dim_namespace_id
    GROUP BY 1

), pqls_by_user AS (

    SELECT DISTINCT user_id
    FROM pqls

)

-------------------------- End of PQL logic --------------------------

, stages_adopted_by_namespace AS (

  SELECT DISTINCT
    dim_namespace_id,
    list_of_stages,
    active_stage_count
  FROM stages_adopted

), namespace_details AS (

  SELECT
    namespace_user_mapping.user_id,
    dim_namespace.dim_namespace_id                                              AS namespace_id,
    namespace_user_mapping.access_level                                         AS user_access_level,
    CASE user_access_level
      WHEN 50 THEN 'Owner'
      WHEN 40 THEN 'Maintainer'
      WHEN 30 THEN 'Developer'
      WHEN 20 THEN 'Reporter'
      WHEN 10 THEN 'Guest'
      WHEN 5  THEN 'Minimal access'
      ELSE 'Other'
    END                                                                         AS user_access_level_name,

    dim_namespace.gitlab_plan_title,
    dim_namespace.gitlab_plan_is_paid,
    dim_namespace.is_setup_for_company,
    dim_namespace.current_member_count,
    dim_namespace.created_at                                                    AS created_at,
    dim_namespace.creator_id                                                    AS creator_user_id,

    customers_db_trial_histories_source.start_date                              AS trial_start_date,
    customers_db_trial_histories_source.expired_on                              AS trial_expired_date,
    IFF(CURRENT_DATE() >= trial_start_date AND CURRENT_DATE() <= COALESCE(trial_expired_date, CURRENT_DATE()), TRUE, FALSE) 
                                                                                AS is_active_trial,
    customers_db_trial_histories_source.glm_content,
    customers_db_trial_histories_source.glm_source,

    IFF(pqls_filtered.pql_namespace_id IS NOT NULL, TRUE, FALSE)                AS is_namespace_pql,

    stages_adopted_by_namespace.list_of_stages,
    stages_adopted_by_namespace.active_stage_count,
    services_by_namespace.nbr_integrations_installed,
    services_by_namespace.integrations_installed,

    
    CASE
      WHEN last_ptpt_scores.score_group >= 4
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group >= 4
        THEN 'Free'
      WHEN last_ptpt_scores.score_group IS NOT NULL
        THEN 'Trial'
      WHEN last_ptpf_scores.score_group IS NOT NULL
        THEN 'Free'
      ELSE NULL
    END                                                                         AS ptp_source,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_date, last_ptpf_scores.score_date)
                                                                                AS ptp_score_date,
    IFF(ptp_source = 'Trial', last_ptpt_scores.score_group, last_ptpf_scores.score_group)
                                                                                AS ptp_score_group,
    IFF(ptp_source = 'Trial', last_ptpt_scores.insights, last_ptpf_scores.insights)
                                                                                AS ptp_insights,
    IFF(ptp_source = 'Trial', second_last_ptpt_scores.score_group, second_last_ptpf_scores.score_group)
                                                                                AS ptp_previous_score_group,

    gitlab_dotcom_namespace_details_source.dashboard_notification_at            AS user_limit_notification_at,
    gitlab_dotcom_namespace_details_source.dashboard_enforcement_at             AS user_limit_enforcement_at,
    IFF(user_limit_notification_at IS NOT NULL OR user_limit_enforcement_at IS NOT NULL,
        TRUE, FALSE)                                                            AS is_impacted_by_user_limit

  FROM namespace_user_mapping
  INNER JOIN dim_namespace
    ON dim_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
    AND namespace_is_ultimate_parent = TRUE
  LEFT JOIN ptpt_last_dates
  LEFT JOIN ptpt_scores AS last_ptpt_scores
    ON last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpt_scores.score_date = ptpt_last_dates.last_score_date
  LEFT JOIN ptpt_scores AS second_last_ptpt_scores
    ON second_last_ptpt_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpt_scores.score_date = ptpt_last_dates.second_last_score_date
  LEFT JOIN ptpf_last_dates
  LEFT JOIN ptpf_scores AS last_ptpf_scores
    ON last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND last_ptpf_scores.score_date = ptpf_last_dates.last_score_date
  LEFT JOIN ptpf_scores AS second_last_ptpf_scores
    ON second_last_ptpf_scores.namespace_id = namespace_user_mapping.namespace_id
    AND second_last_ptpf_scores.score_date = ptpf_last_dates.second_last_score_date
  LEFT JOIN customers_db_trial_histories_source
    ON customers_db_trial_histories_source.gl_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN gitlab_dotcom_namespace_details_source
    ON gitlab_dotcom_namespace_details_source.namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN stages_adopted_by_namespace
    ON stages_adopted_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN pqls_filtered
    ON pqls_filtered.pql_namespace_id = namespace_user_mapping.namespace_id
  LEFT JOIN services_by_namespace
    ON services_by_namespace.dim_namespace_id = namespace_user_mapping.namespace_id

), user_aggregated_namespace_details AS (

  SELECT 
    user_id,
    ARRAY_AGG(OBJECT_CONSTRUCT(*)) AS namespaces_array
  FROM namespace_details
  GROUP BY 1
  
), user_trials AS (

  SELECT
    user_id,
    MAX(trial_start_date) AS max_trial_start_date
  FROM namespace_details
  GROUP BY 1

  ), user_details_and_namespace_details AS (

  SELECT
    dim_marketing_contact.dim_marketing_contact_id,
    dim_marketing_contact.email_address,
    dim_marketing_contact.first_name,
    dim_marketing_contact.last_name,
    dim_marketing_contact.country,
    dim_marketing_contact.company_name,
    dim_marketing_contact.job_title,
    dim_marketing_contact.gitlab_dotcom_user_id,
    dim_marketing_contact.gitlab_user_name,
    dim_marketing_contact.gitlab_dotcom_active_state,
    dim_marketing_contact.gitlab_dotcom_confirmed_date,
    dim_marketing_contact.gitlab_dotcom_created_date,
    dim_marketing_contact.gitlab_dotcom_last_login_date,
    dim_marketing_contact.gitlab_dotcom_email_opted_in,
    IFF(pqls_by_user.user_id IS NOT NULL, TRUE, FALSE) AS is_pql,
    user_trials.max_trial_start_date,
    user_aggregated_namespace_details.namespaces_array

  FROM dim_marketing_contact
  LEFT JOIN user_aggregated_namespace_details
    ON dim_marketing_contact.gitlab_dotcom_user_id = user_aggregated_namespace_details.user_id
  LEFT JOIN pqls_by_user
    ON pqls_by_user.user_id = dim_marketing_contact.gitlab_dotcom_user_id
  LEFT JOIN user_trials
    ON user_trials.user_id = dim_marketing_contact.gitlab_dotcom_user_id

  WHERE dim_marketing_contact.gitlab_dotcom_user_id IS NOT NULL
    AND (
      dim_marketing_contact.gitlab_dotcom_created_date::DATE >= '2022-06-01'
      OR user_trials.max_trial_start_date::DATE >= DATEADD('month', -3, CURRENT_DATE)
    )

)



  , hashing AS (

    SELECT *,

      md5(cast(coalesce(cast(first_name as 
    varchar
), '') || '-' || coalesce(cast(last_name as 
    varchar
), '') || '-' || coalesce(cast(country as 
    varchar
), '') || '-' || coalesce(cast(company_name as 
    varchar
), '') || '-' || coalesce(cast(job_title as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_user_id as 
    varchar
), '') || '-' || coalesce(cast(gitlab_user_name as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_active_state as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_confirmed_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_created_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_last_login_date as 
    varchar
), '') || '-' || coalesce(cast(gitlab_dotcom_email_opted_in as 
    varchar
), '') || '-' || coalesce(cast(is_pql as 
    varchar
), '') || '-' || coalesce(cast(max_trial_start_date as 
    varchar
), '') || '-' || coalesce(cast(namespaces_array as 
    varchar
), '') as 
    varchar
)) as prev_hash

    FROM user_details_and_namespace_details

  ), final as (

      

        SELECT hashing.*,
          CASE
            WHEN hashing.prev_hash = t.prev_hash THEN last_changed
            ELSE CURRENT_TIMESTAMP()
          END AS last_changed
        FROM hashing
        LEFT JOIN "PREP".sensitive.poc_pump_marketing_contact_namespace_detail as t on t.prev_hash = hashing.prev_hash

      

  )


SELECT *
FROM final1b:T5510,WITH sfdc_lead AS (

    SELECT *
    FROM {{ref('sfdc_lead_source') }}

), sfdc_contact AS (

    SELECT *
    FROM {{ref('sfdc_contact_source') }}

), sfdc_account AS (

    SELECT *
    FROM {{ref('sfdc_account_source') }}

), marketo AS (

    SELECT *
    FROM {{ref('marketo_lead_source') }}
    
), crm_account AS (

    SELECT *
    FROM {{ref('dim_crm_account') }}

), sales_segment AS (

    SELECT *
    FROM {{ref('prep_sales_segment') }}

), crm_person AS (

    SELECT *
    FROM {{ref('prep_crm_person') }}

), gitlab_users AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_users_source') }}

), customer_db_source AS (

    SELECT *
    FROM {{ref('customers_db_customers_source') }}

), zuora_contact_source AS (

    SELECT *
    FROM {{ref('zuora_contact_source') }}

), zuora_account_source AS (

    SELECT *
    FROM {{ref('zuora_account_source') }}

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM {{ref('driveload_marketing_dnc_list_source')}}
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['emails.email_address']) }}                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      {{ days_buckets('days_since_saas_signup') }}                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      {{ days_buckets('days_since_self_managed_owner_signup') }}                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2023-06-19"
) }}1c:T5da8,WITH sfdc_lead AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_lead_source

), sfdc_contact AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_contact_source

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source

), marketo AS (

    SELECT *
    FROM "PREP".marketo.marketo_lead_source
    
), crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), sales_segment AS (

    SELECT *
    FROM "PROD".common_prep.prep_sales_segment

), crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), gitlab_users AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT *
    FROM "PREP".customers.customers_db_customers_source

), zuora_contact_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_account_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM "PREP".driveload.driveload_marketing_dnc_list_source
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      md5(cast(coalesce(cast(emails.email_address as 
    varchar
), '') as 
    varchar
))                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      CASE 
  WHEN days_since_saas_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_signup > 1095
    THEN '[12] 3+ Years'
END                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      CASE 
  WHEN days_since_self_managed_owner_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_self_managed_owner_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_self_managed_owner_signup > 1095
    THEN '[12] 3+ Years'
END                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1d:Tc7c,{% set sensitive_fields = ['project_description', 'project_import_source', 'project_issues_template', 'project_build_coverage_regex',
                           'project_name', 'project_path', 'project_import_url', 'project_merge_requests_template'] %}

WITH projects AS (

    SELECT *
    FROM {{ref('gitlab_ops_projects')}}

),

members AS (

    SELECT *
    FROM {{ref('gitlab_ops_members')}} members
    WHERE is_currently_valid = TRUE
      AND {{ filter_out_blocked_users('members', 'user_id') }}

),

joined AS (
    SELECT
      projects.project_id,
      projects.created_at, -- We will phase out `project_created_at`
      projects.created_at                                          AS project_created_at,
      projects.updated_at                                          AS project_updated_at,
      projects.creator_id,
      projects.namespace_id,
      projects.last_activity_at,
      projects.visibility_level,
      projects.archived,
      projects.has_avatar,
      projects.project_star_count,
      projects.merge_requests_rebase_enabled,
      projects.import_type,
      projects.approvals_before_merge,
      projects.reset_approvals_on_push,
      projects.merge_requests_ff_only_enabled,
      projects.mirror,
      projects.mirror_user_id,
      projects.shared_runners_enabled,
      projects.build_allow_git_fetch,
      projects.build_timeout,
      projects.mirror_trigger_builds,
      projects.pending_delete,
      projects.public_builds,
      projects.last_repository_check_failed,
      projects.last_repository_check_at,
      projects.container_registry_enabled,
      projects.only_allow_merge_if_pipeline_succeeds,
      projects.has_external_issue_tracker,
      projects.repository_storage,
      projects.repository_read_only,
      projects.request_access_enabled,
      projects.has_external_wiki,
      projects.ci_config_path,
      projects.lfs_enabled,
      projects.only_allow_merge_if_all_discussions_are_resolved,
      projects.repository_size_limit,
      projects.printing_merge_request_link_enabled,
      projects.has_auto_canceling_pending_pipelines,
      projects.service_desk_enabled,
      projects.delete_error,
      projects.last_repository_updated_at,
      projects.storage_version,
      projects.resolve_outdated_diff_discussions,
      projects.disable_overriding_approvers_per_merge_request,
      projects.remote_mirror_available_overridden,
      projects.only_mirror_protected_branches,
      projects.pull_mirror_available_overridden,
      projects.mirror_overwrites_diverged_branches,

      {% for field in sensitive_fields %}
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE {{field}}
      END                                                          AS {{field}},
      {% endfor %}
      COALESCE(COUNT(DISTINCT members.member_id), 0)               AS member_count
    FROM projects
      LEFT JOIN members
        ON projects.project_id = members.source_id
        AND members.member_source_type = 'Project'
    {{ dbt_utils.group_by(n=57) }}
)

SELECT *
FROM joined1e:T1512,

WITH projects AS (

    SELECT *
    FROM "PROD".legacy.gitlab_ops_projects

),

members AS (

    SELECT *
    FROM "PROD".legacy.gitlab_ops_members members
    WHERE is_currently_valid = TRUE
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )

),

joined AS (
    SELECT
      projects.project_id,
      projects.created_at, -- We will phase out `project_created_at`
      projects.created_at                                          AS project_created_at,
      projects.updated_at                                          AS project_updated_at,
      projects.creator_id,
      projects.namespace_id,
      projects.last_activity_at,
      projects.visibility_level,
      projects.archived,
      projects.has_avatar,
      projects.project_star_count,
      projects.merge_requests_rebase_enabled,
      projects.import_type,
      projects.approvals_before_merge,
      projects.reset_approvals_on_push,
      projects.merge_requests_ff_only_enabled,
      projects.mirror,
      projects.mirror_user_id,
      projects.shared_runners_enabled,
      projects.build_allow_git_fetch,
      projects.build_timeout,
      projects.mirror_trigger_builds,
      projects.pending_delete,
      projects.public_builds,
      projects.last_repository_check_failed,
      projects.last_repository_check_at,
      projects.container_registry_enabled,
      projects.only_allow_merge_if_pipeline_succeeds,
      projects.has_external_issue_tracker,
      projects.repository_storage,
      projects.repository_read_only,
      projects.request_access_enabled,
      projects.has_external_wiki,
      projects.ci_config_path,
      projects.lfs_enabled,
      projects.only_allow_merge_if_all_discussions_are_resolved,
      projects.repository_size_limit,
      projects.printing_merge_request_link_enabled,
      projects.has_auto_canceling_pending_pipelines,
      projects.service_desk_enabled,
      projects.delete_error,
      projects.last_repository_updated_at,
      projects.storage_version,
      projects.resolve_outdated_diff_discussions,
      projects.disable_overriding_approvers_per_merge_request,
      projects.remote_mirror_available_overridden,
      projects.only_mirror_protected_branches,
      projects.pull_mirror_available_overridden,
      projects.mirror_overwrites_diverged_branches,

      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_description
      END                                                          AS project_description,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_import_source
      END                                                          AS project_import_source,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_issues_template
      END                                                          AS project_issues_template,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_build_coverage_regex
      END                                                          AS project_build_coverage_regex,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_name
      END                                                          AS project_name,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_path
      END                                                          AS project_path,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_import_url
      END                                                          AS project_import_url,
      
      CASE
        WHEN projects.visibility_level != 'public' -- AND NOT namespace_lineage.namespace_is_internal -- missing table 
          THEN 'project is private/internal'
        ELSE project_merge_requests_template
      END                                                          AS project_merge_requests_template,
      
      COALESCE(COUNT(DISTINCT members.member_id), 0)               AS member_count
    FROM projects
      LEFT JOIN members
        ON projects.project_id = members.source_id
        AND members.member_source_type = 'Project'
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57
)

SELECT *
FROM joined1f:T160b,{% set sensitive_fields = ['project_description', 'project_import_source', 'project_issues_template', 'project_build_coverage_regex',
                           'project_name', 'project_path', 'project_import_url', 'project_merge_requests_template'] %}

WITH projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects')}}

),

namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces')}}

),

members AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_members')}} members
    WHERE is_currently_valid = TRUE
      AND {{ filter_out_blocked_users('members', 'user_id') }}

),

namespace_lineage AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespace_lineage')}}

),

gitlab_subscriptions AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base')}}

),

active_services AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_integrations')}}
    WHERE is_active = True

),

joined AS (
    SELECT
      projects.project_id,
      projects.created_at, -- We will phase out `project_created_at`
      projects.created_at                                          AS project_created_at,
      projects.updated_at                                          AS project_updated_at,
      projects.creator_id,
      projects.namespace_id,
      projects.last_activity_at,
      projects.visibility_level,
      projects.archived,
      projects.has_avatar,
      projects.project_star_count,
      projects.merge_requests_rebase_enabled,
      projects.import_type,
      projects.approvals_before_merge,
      projects.reset_approvals_on_push,
      projects.merge_requests_ff_only_enabled,
      projects.mirror,
      projects.mirror_user_id,
      projects.shared_runners_enabled,
      projects.build_allow_git_fetch,
      projects.build_timeout,
      projects.mirror_trigger_builds,
      projects.pending_delete,
      projects.public_builds,
      projects.last_repository_check_failed,
      projects.last_repository_check_at,
      projects.container_registry_enabled,
      projects.only_allow_merge_if_pipeline_succeeds,
      projects.has_external_issue_tracker,
      projects.repository_storage,
      projects.repository_read_only,
      projects.request_access_enabled,
      projects.has_external_wiki,
      projects.ci_config_path,
      projects.lfs_enabled,
      projects.only_allow_merge_if_all_discussions_are_resolved,
      projects.repository_size_limit,
      projects.printing_merge_request_link_enabled,
      projects.has_auto_canceling_pending_pipelines,
      projects.service_desk_enabled,
      projects.delete_error,
      projects.last_repository_updated_at,
      projects.storage_version,
      projects.resolve_outdated_diff_discussions,
      projects.disable_overriding_approvers_per_merge_request,
      projects.remote_mirror_available_overridden,
      projects.only_mirror_protected_branches,
      projects.pull_mirror_available_overridden,
      projects.mirror_overwrites_diverged_branches,
      IFF(projects.import_type='gitlab_project' AND projects.project_path='learn-gitlab',
        TRUE,
        FALSE)                                                     AS is_learn_gitlab,

      {% for field in sensitive_fields %}
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE {{field}}
      END                                                          AS {{field}},
      {% endfor %}

      namespaces.namespace_name,
      namespaces.namespace_path,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.namespace_plan_id,
      namespace_lineage.namespace_plan_title,
      namespace_lineage.namespace_plan_is_paid,
      namespace_lineage.ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id,
      namespace_lineage.ultimate_parent_plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid,

      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
      END                                                          AS plan_id_at_project_creation,
      CASE
        WHEN import_type IS NULL
          THEN NULL
        WHEN import_type = 'gitlab_project' AND project_import_url IS NULL
          THEN 'project_template'
        WHEN import_type = 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'gitlab_project_import'
        WHEN import_type IS NOT NULL AND import_type != 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'other_source_project_import'
      END                                                          AS project_template,
      ARRAYAGG(active_services.service_type)                       AS active_service_types,
      COALESCE(COUNT(DISTINCT members.member_id), 0)               AS member_count
    FROM projects
      LEFT JOIN members
        ON projects.project_id = members.source_id
        AND members.member_source_type = 'Project'
      LEFT JOIN namespaces
        ON projects.namespace_id = namespaces.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN gitlab_subscriptions
        ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects.created_at BETWEEN gitlab_subscriptions.valid_from AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
      LEFT JOIN active_services
        ON projects.project_id = active_services.project_id
    {{ dbt_utils.group_by(n=70) }}
)

SELECT *
FROM joined20:T1e48,

WITH projects AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_projects

),

namespaces AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_namespaces

),

members AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_members members
    WHERE is_currently_valid = TRUE
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )

),

namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

),

gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

),

active_services AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_integrations
    WHERE is_active = True

),

joined AS (
    SELECT
      projects.project_id,
      projects.created_at, -- We will phase out `project_created_at`
      projects.created_at                                          AS project_created_at,
      projects.updated_at                                          AS project_updated_at,
      projects.creator_id,
      projects.namespace_id,
      projects.last_activity_at,
      projects.visibility_level,
      projects.archived,
      projects.has_avatar,
      projects.project_star_count,
      projects.merge_requests_rebase_enabled,
      projects.import_type,
      projects.approvals_before_merge,
      projects.reset_approvals_on_push,
      projects.merge_requests_ff_only_enabled,
      projects.mirror,
      projects.mirror_user_id,
      projects.shared_runners_enabled,
      projects.build_allow_git_fetch,
      projects.build_timeout,
      projects.mirror_trigger_builds,
      projects.pending_delete,
      projects.public_builds,
      projects.last_repository_check_failed,
      projects.last_repository_check_at,
      projects.container_registry_enabled,
      projects.only_allow_merge_if_pipeline_succeeds,
      projects.has_external_issue_tracker,
      projects.repository_storage,
      projects.repository_read_only,
      projects.request_access_enabled,
      projects.has_external_wiki,
      projects.ci_config_path,
      projects.lfs_enabled,
      projects.only_allow_merge_if_all_discussions_are_resolved,
      projects.repository_size_limit,
      projects.printing_merge_request_link_enabled,
      projects.has_auto_canceling_pending_pipelines,
      projects.service_desk_enabled,
      projects.delete_error,
      projects.last_repository_updated_at,
      projects.storage_version,
      projects.resolve_outdated_diff_discussions,
      projects.disable_overriding_approvers_per_merge_request,
      projects.remote_mirror_available_overridden,
      projects.only_mirror_protected_branches,
      projects.pull_mirror_available_overridden,
      projects.mirror_overwrites_diverged_branches,
      IFF(projects.import_type='gitlab_project' AND projects.project_path='learn-gitlab',
        TRUE,
        FALSE)                                                     AS is_learn_gitlab,

      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_description
      END                                                          AS project_description,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_source
      END                                                          AS project_import_source,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_issues_template
      END                                                          AS project_issues_template,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_build_coverage_regex
      END                                                          AS project_build_coverage_regex,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_name
      END                                                          AS project_name,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_path
      END                                                          AS project_path,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_url
      END                                                          AS project_import_url,
      
      CASE
        WHEN projects.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_merge_requests_template
      END                                                          AS project_merge_requests_template,
      

      namespaces.namespace_name,
      namespaces.namespace_path,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.namespace_plan_id,
      namespace_lineage.namespace_plan_title,
      namespace_lineage.namespace_plan_is_paid,
      namespace_lineage.ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id,
      namespace_lineage.ultimate_parent_plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid,

      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
      END                                                          AS plan_id_at_project_creation,
      CASE
        WHEN import_type IS NULL
          THEN NULL
        WHEN import_type = 'gitlab_project' AND project_import_url IS NULL
          THEN 'project_template'
        WHEN import_type = 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'gitlab_project_import'
        WHEN import_type IS NOT NULL AND import_type != 'gitlab_project' AND project_import_url IS NOT NULL
          THEN 'other_source_project_import'
      END                                                          AS project_template,
      ARRAYAGG(active_services.service_type)                       AS active_service_types,
      COALESCE(COUNT(DISTINCT members.member_id), 0)               AS member_count
    FROM projects
      LEFT JOIN members
        ON projects.project_id = members.source_id
        AND members.member_source_type = 'Project'
      LEFT JOIN namespaces
        ON projects.namespace_id = namespaces.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN gitlab_subscriptions
        ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects.created_at BETWEEN gitlab_subscriptions.valid_from AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
      LEFT JOIN active_services
        ON projects.project_id = active_services.project_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70
)

SELECT *
FROM joined21:T156c,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "table",
    "unique_key": "dim_user_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('source', 'gitlab_dotcom_users_source'),
    ('email_classification', 'driveload_email_domain_classification_source'),
    ('identity','gitlab_dotcom_identities_source'),
    ('gitlab_dotcom_user_preferences_source','gitlab_dotcom_user_preferences_source'),
    ('gitlab_dotcom_user_details_source','gitlab_dotcom_user_details_source'),
    ('customers_db_leads_source','customers_db_leads_source')

]) }}, 

email_classification_dedup AS (

  SELECT 
    *
  FROM email_classification
  QUALIFY ROW_NUMBER() OVER(PARTITION BY domain ORDER BY domain DESC) = 1

), 

closest_provider AS (

  SELECT
    source.user_id AS user_id,
    identity.identity_provider AS identity_provider
  FROM source                                                       
  LEFT JOIN identity 
    ON source.user_id = identity.user_id
  WHERE 
    identity.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY source.user_id 
      ORDER BY TIMEDIFF(MILLISECONDS,source.created_at,COALESCE(identity.created_at,{{var('infinity_future')}})) ASC) = 1

), 

user_preferences AS (

  SELECT 
    user_id AS user_id,
    COALESCE(setup_for_company::VARCHAR,'Unknown') AS setup_for_company
  FROM gitlab_dotcom_user_preferences_source

),

user_details AS (

  SELECT 
    user_id AS user_id,
    CASE COALESCE(registration_objective,-1)
      WHEN 0 THEN 'basics' 
      WHEN 1 THEN 'move_repository' 
      WHEN 2 THEN 'code_storage' 
      WHEN 3 THEN 'exploring' 
      WHEN 4 THEN 'ci' 
      WHEN 5 THEN 'other' 
      WHEN 6 THEN 'joining_team'
      WHEN -1 THEN 'Unknown'
    END AS jobs_to_be_done
  FROM gitlab_dotcom_user_details_source

),

customer_leads AS (

  SELECT 
    user_id AS user_id,
    COALESCE(MAX(is_for_business_use)::VARCHAR,'Unknown') AS for_business_use,
    COALESCE(MAX(employees_bucket)::VARCHAR,'Unknown') AS employee_count,
    COALESCE(MAX(country)::VARCHAR,'Unknown') AS country,
    COALESCE(MAX(state)::VARCHAR,'Unknown') AS state
  FROM customers_db_leads_source
  GROUP BY
    user_id

),


renamed AS (

  SELECT
    --surrogate_key
    {{ dbt_utils.surrogate_key(['source.user_id']) }}  AS dim_user_sk,
    
    --natural_key
    source.user_id,
    
    --legacy natural_key to be deprecated during change management plan
    source.user_id AS dim_user_id,
    
    --Other attributes
    source.remember_created_at AS remember_created_at,
    source.sign_in_count AS sign_in_count,
    source.current_sign_in_at AS current_sign_in_at,
    source.last_sign_in_at AS last_sign_in_at,
    source.created_at AS created_at,
    dim_date.date_id AS created_date_id,
    source.updated_at AS updated_at,
    source.is_admin AS is_admin,
    source.state AS user_state,
    CASE 
      WHEN source.state in ('blocked', 'banned') THEN TRUE
      ELSE FALSE 
    END AS is_blocked_user,
    source.notification_email_domain AS notification_email_domain,
    notification_email_domain.classification AS notification_email_domain_classification,
    source.email_domain AS email_domain,
    email_domain.classification AS email_domain_classification,
    source.public_email_domain AS public_email_domain,
    public_email_domain.classification AS public_email_domain_classification,
    source.commit_email_domain AS commit_email_domain,
    commit_email_domain.classification AS commit_email_domain_classification,
    closest_provider.identity_provider AS identity_provider,

    -- Expanded Attributes  (Not Found = Joined Row Not found for the Attribute)
    COALESCE(source.role,'Unknown') AS role,
    COALESCE(TO_DATE(source.last_activity_on)::VARCHAR,'Unknown') AS last_activity_date,              
    COALESCE(TO_DATE(source.last_sign_in_at)::VARCHAR,'Unknown')  AS last_sign_in_date,               
    COALESCE(user_preferences.setup_for_company,'Not Found') AS setup_for_company,               
    COALESCE(user_details.jobs_to_be_done,'Not Found') AS jobs_to_be_done,
    COALESCE(customer_leads.for_business_use,'Not Found') AS for_business_use,                 
    COALESCE(customer_leads.employee_count,'Not Found') AS employee_count,
    COALESCE(customer_leads.country,'Not Found') AS country,
    COALESCE(customer_leads.state,'Not Found') AS state

  FROM source
  LEFT JOIN dim_date
    ON TO_DATE(source.created_at) = dim_date.date_day
  LEFT JOIN email_classification_dedup AS notification_email_domain
    ON notification_email_domain.domain = source.notification_email_domain
  LEFT JOIN email_classification_dedup AS email_domain
    ON email_domain.domain = source.email_domain
  LEFT JOIN email_classification_dedup AS public_email_domain
    ON public_email_domain.domain = source.public_email_domain
  LEFT JOIN email_classification_dedup AS commit_email_domain
    ON commit_email_domain.domain = source.commit_email_domain
  LEFT JOIN closest_provider AS closest_provider
    ON source.user_id = closest_provider.user_id  
  LEFT JOIN user_preferences  AS user_preferences
    ON source.user_id = user_preferences.user_id
  LEFT JOIN user_details AS user_details
    ON source.user_id = user_details.user_id
  LEFT JOIN customer_leads AS customer_leads
    ON source.user_id = customer_leads.user_id

)

{{ dbt_audit(
    cte_ref="renamed",
    created_by="@mpeychet",
    updated_by="@tpoole",
    created_date="2021-05-31",
    updated_date="2022-08-25"
) }}22:T1719,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), email_classification AS (

    SELECT * 
    FROM "PREP".driveload.driveload_email_domain_classification_source

), identity AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_identities_source

), gitlab_dotcom_user_preferences_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_user_preferences_source

), gitlab_dotcom_user_details_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_user_details_source

), customers_db_leads_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), 

email_classification_dedup AS (

  SELECT 
    *
  FROM email_classification
  QUALIFY ROW_NUMBER() OVER(PARTITION BY domain ORDER BY domain DESC) = 1

), 

closest_provider AS (

  SELECT
    source.user_id AS user_id,
    identity.identity_provider AS identity_provider
  FROM source                                                       
  LEFT JOIN identity 
    ON source.user_id = identity.user_id
  WHERE 
    identity.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY source.user_id 
      ORDER BY TIMEDIFF(MILLISECONDS,source.created_at,COALESCE(identity.created_at,TO_DATE('9999-12-31', 'YYYY-MM-DD'))) ASC) = 1

), 

user_preferences AS (

  SELECT 
    user_id AS user_id,
    COALESCE(setup_for_company::VARCHAR,'Unknown') AS setup_for_company
  FROM gitlab_dotcom_user_preferences_source

),

user_details AS (

  SELECT 
    user_id AS user_id,
    CASE COALESCE(registration_objective,-1)
      WHEN 0 THEN 'basics' 
      WHEN 1 THEN 'move_repository' 
      WHEN 2 THEN 'code_storage' 
      WHEN 3 THEN 'exploring' 
      WHEN 4 THEN 'ci' 
      WHEN 5 THEN 'other' 
      WHEN 6 THEN 'joining_team'
      WHEN -1 THEN 'Unknown'
    END AS jobs_to_be_done
  FROM gitlab_dotcom_user_details_source

),

customer_leads AS (

  SELECT 
    user_id AS user_id,
    COALESCE(MAX(is_for_business_use)::VARCHAR,'Unknown') AS for_business_use,
    COALESCE(MAX(employees_bucket)::VARCHAR,'Unknown') AS employee_count,
    COALESCE(MAX(country)::VARCHAR,'Unknown') AS country,
    COALESCE(MAX(state)::VARCHAR,'Unknown') AS state
  FROM customers_db_leads_source
  GROUP BY
    user_id

),


renamed AS (

  SELECT
    --surrogate_key
    md5(cast(coalesce(cast(source.user_id as 
    varchar
), '') as 
    varchar
))  AS dim_user_sk,
    
    --natural_key
    source.user_id,
    
    --legacy natural_key to be deprecated during change management plan
    source.user_id AS dim_user_id,
    
    --Other attributes
    source.remember_created_at AS remember_created_at,
    source.sign_in_count AS sign_in_count,
    source.current_sign_in_at AS current_sign_in_at,
    source.last_sign_in_at AS last_sign_in_at,
    source.created_at AS created_at,
    dim_date.date_id AS created_date_id,
    source.updated_at AS updated_at,
    source.is_admin AS is_admin,
    source.state AS user_state,
    CASE 
      WHEN source.state in ('blocked', 'banned') THEN TRUE
      ELSE FALSE 
    END AS is_blocked_user,
    source.notification_email_domain AS notification_email_domain,
    notification_email_domain.classification AS notification_email_domain_classification,
    source.email_domain AS email_domain,
    email_domain.classification AS email_domain_classification,
    source.public_email_domain AS public_email_domain,
    public_email_domain.classification AS public_email_domain_classification,
    source.commit_email_domain AS commit_email_domain,
    commit_email_domain.classification AS commit_email_domain_classification,
    closest_provider.identity_provider AS identity_provider,

    -- Expanded Attributes  (Not Found = Joined Row Not found for the Attribute)
    COALESCE(source.role,'Unknown') AS role,
    COALESCE(TO_DATE(source.last_activity_on)::VARCHAR,'Unknown') AS last_activity_date,              
    COALESCE(TO_DATE(source.last_sign_in_at)::VARCHAR,'Unknown')  AS last_sign_in_date,               
    COALESCE(user_preferences.setup_for_company,'Not Found') AS setup_for_company,               
    COALESCE(user_details.jobs_to_be_done,'Not Found') AS jobs_to_be_done,
    COALESCE(customer_leads.for_business_use,'Not Found') AS for_business_use,                 
    COALESCE(customer_leads.employee_count,'Not Found') AS employee_count,
    COALESCE(customer_leads.country,'Not Found') AS country,
    COALESCE(customer_leads.state,'Not Found') AS state

  FROM source
  LEFT JOIN dim_date
    ON TO_DATE(source.created_at) = dim_date.date_day
  LEFT JOIN email_classification_dedup AS notification_email_domain
    ON notification_email_domain.domain = source.notification_email_domain
  LEFT JOIN email_classification_dedup AS email_domain
    ON email_domain.domain = source.email_domain
  LEFT JOIN email_classification_dedup AS public_email_domain
    ON public_email_domain.domain = source.public_email_domain
  LEFT JOIN email_classification_dedup AS commit_email_domain
    ON commit_email_domain.domain = source.commit_email_domain
  LEFT JOIN closest_provider AS closest_provider
    ON source.user_id = closest_provider.user_id  
  LEFT JOIN user_preferences  AS user_preferences
    ON source.user_id = user_preferences.user_id
  LEFT JOIN user_details AS user_details
    ON source.user_id = user_details.user_id
  LEFT JOIN customer_leads AS customer_leads
    ON source.user_id = customer_leads.user_id

)

SELECT
      *,
      '@mpeychet'::VARCHAR       AS created_by,
      '@tpoole'::VARCHAR       AS updated_by,
      '2021-05-31'::DATE        AS model_created_date,
      '2022-08-25'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM renamed23:T1442,-- depends_on: {{ ref('engineering_productivity_metrics_projects_to_include') }}
-- depends_on: {{ ref('projects_part_of_product') }}

WITH merge_requests AS (

    SELECT 
      {{ dbt_utils.star(from=ref('gitlab_dotcom_merge_requests') ) }},
      created_at AS merge_request_created_at,
      updated_at  AS merge_request_updated_at
    FROM {{ref('gitlab_dotcom_merge_requests')}} merge_requests
    WHERE {{ filter_out_blocked_users('merge_requests', 'author_id') }}

), label_links AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_label_links')}}
    WHERE is_currently_valid = True
      AND target_type = 'MergeRequest'

), all_labels AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_labels_xf')}}

), agg_labels AS (

    SELECT
      merge_requests.merge_request_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM merge_requests
    LEFT JOIN label_links
      ON merge_requests.merge_request_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY merge_requests.merge_request_id

),  latest_merge_request_metric AS (

    SELECT MAX(merge_request_metric_id) AS target_id
    FROM {{ref('gitlab_dotcom_merge_request_metrics')}}
    GROUP BY merge_request_id

),  merge_request_metrics AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_merge_request_metrics')}}
    INNER JOIN latest_merge_request_metric
    ON merge_request_metric_id = target_id

), milestones AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_milestones')}}

), projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects_xf')}}

), author_namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces_xf')}}
    WHERE namespace_type = 'User'

), gitlab_subscriptions AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base')}}

), joined AS (

    SELECT
      merge_requests.*, 
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_title)                                       AS milestone_title,
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_description)                                 AS milestone_description,
      projects.namespace_id,
      projects.ultimate_parent_id,
      projects.ultimate_parent_plan_id,
      projects.ultimate_parent_plan_title,
      projects.ultimate_parent_plan_is_paid,
      projects.namespace_is_internal,
      author_namespaces.namespace_path                                                      AS author_namespace_path,
      ARRAY_TO_STRING(agg_labels.labels,'|')                                                AS masked_label_title,
      agg_labels.labels,
      merge_request_metrics.merged_at,
      IFF(merge_requests.target_project_id IN ({{is_project_included_in_engineering_metrics()}}),
        TRUE, FALSE)                                                                        AS is_included_in_engineering_metrics,
      IFF(merge_requests.target_project_id IN ({{is_project_part_of_product()}}),
        TRUE, FALSE)                                                                        AS is_part_of_product,
      IFF(projects.namespace_is_internal IS NOT NULL
          AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels),
        TRUE, FALSE)                                                                        AS is_community_contributor_related,
      TIMESTAMPDIFF(HOURS, merge_requests.merge_request_created_at,
        merge_request_metrics.merged_at)                                                    AS hours_to_merged_status,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[]( |[xX])[\]]',1,'m') AS total_checkboxes,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[][xX][\]]',1,'m')     AS completed_checkboxes,
      -- Original regex, (?:(?:>\s{0,4})*)(?:\s*(?:[-+*]|(?:\d+\.)))+\s+(\[\s\]|\[[xX]\])(\s.+), found in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/models/concerns/taskable.rb

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_merge_request_creation

    FROM merge_requests
      LEFT JOIN agg_labels
        ON merge_requests.merge_request_id = agg_labels.merge_request_id
      LEFT JOIN merge_request_metrics
        ON merge_requests.merge_request_id = merge_request_metrics.merge_request_id
      LEFT JOIN milestones
        ON merge_requests.milestone_id = milestones.milestone_id
      LEFT JOIN projects
        ON merge_requests.target_project_id = projects.project_id
      LEFT JOIN author_namespaces
        ON merge_requests.author_id = author_namespaces.owner_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND merge_requests.created_at BETWEEN gitlab_subscriptions.valid_from AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}

)

SELECT *
FROM joined24:T577,Adds associated labels for Merge Requests when these exist.

In order to achieve that we first join issues to the `label links` relation table, and then use that to join to the labels
table.

The labels are filtered in a CTE to only include `target_type = MergeRequest` as the labels table contains both Issue and Merge Request information and misattribution can happen.

In order to also add Metrics data for a Merge Request, we want to get only the last available record from the `gitlab_dotcom_merge_request_metrics` table.   
First a CTE will get the ID of the latest Merge Request Metrics snapshot, then in the following CTE we inner join to that in order to ensure we only get the latest data.

We also need to know if a MR is related to our community contributor project, there are two conditions to know if this is true:

* The label for the MR needs to be set to `community contribution`
* the namespace for the target project of the MR needs to be Gitlab.org (namespace_id = 9970)

In order to achieve this we will build a CTE from the project table that contains only project from the Gitlab.org space, then we will use this as a logical condition in a case statement.

Information about the merge request's namespace (`namespace_id`) and ultimate parent namespace (`ultimate_parent_id`, `namespace_is_internal`) is found through the **project** that the merge request is associated with.25:T26f1,-- depends_on: "PROD".legacy.engineering_productivity_metrics_projects_to_include
-- depends_on: "PROD".legacy.projects_part_of_product

WITH merge_requests AS (

    SELECT 
      "MERGE_REQUEST_ID",
  "MERGE_REQUEST_IID",
  "MERGE_REQUEST_TITLE",
  "IS_MERGE_TO_MASTER",
  "MERGE_ERROR",
  "ASSIGNEE_ID",
  "UPDATED_BY_ID",
  "MERGE_USER_ID",
  "LAST_EDITED_BY_ID",
  "MILESTONE_ID",
  "HEAD_PIPELINE_ID",
  "LATEST_MERGE_REQUEST_DIFF_ID",
  "APPROVALS_BEFORE_MERGE",
  "LOCK_VERSION",
  "TIME_ESTIMATE",
  "PROJECT_ID",
  "TARGET_PROJECT_ID",
  "AUTHOR_ID",
  "MERGE_REQUEST_STATE_ID",
  "MERGE_REQUEST_STATE",
  "MERGE_REQUEST_STATUS",
  "DOES_MERGE_WHEN_PIPELINE_SUCCEEDS",
  "DOES_SQUASH",
  "IS_DISCUSSION_LOCKED",
  "DOES_ALLOW_MAINTAINER_TO_PUSH",
  "CREATED_AT",
  "UPDATED_AT",
  "MERGE_REQUEST_LAST_EDITED_AT",
  "MERGE_REQUEST_DESCRIPTION",
      created_at AS merge_request_created_at,
      updated_at  AS merge_request_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_merge_requests merge_requests
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = merge_requests.author_id

    )

), label_links AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_label_links
    WHERE is_currently_valid = True
      AND target_type = 'MergeRequest'

), all_labels AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_labels_xf

), agg_labels AS (

    SELECT
      merge_requests.merge_request_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM merge_requests
    LEFT JOIN label_links
      ON merge_requests.merge_request_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY merge_requests.merge_request_id

),  latest_merge_request_metric AS (

    SELECT MAX(merge_request_metric_id) AS target_id
    FROM "PROD".legacy.gitlab_dotcom_merge_request_metrics
    GROUP BY merge_request_id

),  merge_request_metrics AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_merge_request_metrics
    INNER JOIN latest_merge_request_metric
    ON merge_request_metric_id = target_id

), milestones AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_milestones

), projects AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), author_namespaces AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf
    WHERE namespace_type = 'User'

), gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), joined AS (

    SELECT
      merge_requests.*, 
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_title)                                       AS milestone_title,
      IFF(projects.visibility_level != 'public' AND projects.namespace_is_internal = FALSE,
        'content masked', milestones.milestone_description)                                 AS milestone_description,
      projects.namespace_id,
      projects.ultimate_parent_id,
      projects.ultimate_parent_plan_id,
      projects.ultimate_parent_plan_title,
      projects.ultimate_parent_plan_is_paid,
      projects.namespace_is_internal,
      author_namespaces.namespace_path                                                      AS author_namespace_path,
      ARRAY_TO_STRING(agg_labels.labels,'|')                                                AS masked_label_title,
      agg_labels.labels,
      merge_request_metrics.merged_at,
      IFF(merge_requests.target_project_id IN (13083, 278964, 250833, 7071551, 554859, 2009901, 2694799, 74823, 3674569, 430285, 5373222, 9762266, 5779760, 10476326, 9450197, 9450195, 9450192, 7145793, 6535935, 6280478, 6237091, 6237085, 5971589, 5606894, 4894834, 5851774, 5849726, 5778095, 5778093, 5778044, 5777976, 5777952, 5777939, 4157550, 1507906, 4382108, 8427052, 7524061, 7776928, 11520423, 10748426, 8368695, 5474112, 5467277, 10014839, 7660893, 6487905, 5777819, 145205, 3362933, 3430480, 4921652, 3626648, 6469877, 3601513, 12006272, 9049889, 734943, 14022, 1441932, 9396716, 6237088, 6126012, 6802300, 6143038, 5828233, 5777853, 8375261, 8368700, 5996549, 5727416, 5457755, 3828396, 7795571, 6392811, 6168240, 5778074, 5778037, 5777954, 5777179, 8362868, 9438583, 4949400, 5647182, 4359271, 4149988, 8226179, 11428501, 11432834, 7688358, 6328050, 5509547, 5456231, 11688089, 14240586, 11080193, 14694517, 6047528, 443787, 7750843, 4456656, 2670515, 6491770, 6130122, 11574953, 6388398, 5465687, 10619765, 9358979, 5778056, 5777918, 1075790, 3825482, 3787977, 11915984, 11317506, 10846938, 9712018, 6523803, 5737157, 5486671, 9184510, 20699, 10400718, 5457651, 27726, 6457868, 5467143, 10947578),
        TRUE, FALSE)                                                                        AS is_included_in_engineering_metrics,
      IFF(merge_requests.target_project_id IN (4359271, 7453181, 3828396, 6329679, 16590122, 13822214, 16240616, 1254421, 5279538, 17019611, 11173751, 19922160, 34675721, 15363819, 10400718, 11688089, 2670515, 23345837, 43513722, 150440, 13682597, 2694799, 1794617, 46649240, 21250701, 1507906, 13083, 1777822, 145205, 5981322, 14694517, 6457868, 27726, 9450192, 6392811, 9762266, 6126012, 13815397, 9184510, 1075790, 34770409, 5261717, 554859, 928825, 3843116, 11015994, 9450197, 5498087, 5779760, 5777853, 5777952, 5777954, 5778074, 39622674, 6237091, 6280478, 19871573, 19871264, 19413496, 24673064, 5467143, 24249085, 3430480, 2651596, 2009901, 4157550, 4534254, 734943, 13764, 250833, 7792567, 14378900, 10506825, 11196060, 9358979, 10846951, 27060148, 5778056, 37734140, 39233486, 11533294, 23070395, 20162469, 11915984, 6047528, 5647182, 2953390, 20699, 10586771, 3844141, 11380952, 15112583, 3362933, 4949400, 10476326, 6487905, 9450195, 30656896, 13922331, 10861561, 21479276, 15369510, 26751150, 21351796, 12006272, 5777179, 5777819, 5777939, 6130122, 39229232, 5606894, 13150952, 5971589, 5964710, 24298348, 25230764, 24313598, 23176783, 23070140, 24225194, 20334170, 24257614, 27821122, 5727416, 5737157, 14097509, 5465687, 16842968, 4456656, 18943607, 95156, 387896, 430285, 13017938, 17166102, 5778093, 39298809, 8362868, 13467157, 6237088, 6237085, 22111360, 24544330, 23069956, 23465101, 20773921, 23545481, 15232184, 27497069, 11432834, 13664986, 5457755, 6523803, 7688358, 14404642, 7776928, 10973541, 8368695, 15642544, 4176070, 12690061, 16573099, 13566613, 18899486, 27628435, 31202357, 24631368, 13331704, 26076251, 39193358, 25537666, 278964, 36743, 74823, 6043225, 14022, 11625232, 5772881, 5777976, 5828233, 5373222, 25538517, 24544020, 24317064, 23176971, 24111720, 19413101, 19413012, 19904939, 20337863, 20336302, 24075172, 16683102, 16239404, 3101096, 143237, 10953870, 4875494, 3842996, 7660893, 9396716, 11139665, 17035255, 5777918, 5778037, 5778044, 5778095, 11373038, 19617580, 24542363, 24313398, 24302484, 23599168, 23505725, 23070377, 23070164, 23069693, 21501997, 23597850, 23455079, 28589369, 27819859, 27821148, 28502955, 37954006, 13348998, 6388398, 11520423, 5996549, 9712018, 5457651, 5509547, 10748426, 5467277, 5486671, 5474112, 6328050, 11317506, 10846938, 13831684, 6491770, 38355982, 15704133, 15685912, 15683922, 15667093, 19047934, 11446522, 1441932, 7795571, 6535935, 8368700, 11511606, 7523614, 7524061, 7560116, 14477200, 11229385, 11880131, 12450931, 443787, 4149988, 4382108, 15114652, 19722963, 7444821, 5651817, 1755794, 22848448, 26392061, 32149347, 32189602, 32318686, 31202862, 31203942, 35104827, 37966217, 43788427, 29138380, 40916776, 1148549, 28496898, 7145793, 14853550, 11080193, 40857363, 24112430, 23365123, 5456231, 11574953, 9438583, 7071551, 19019153, 15685819, 14292404, 7560137, 13613417, 15208888, 1755701, 31203840, 32823351, 43473862, 34907799, 15821588, 15685887, 27919014),
        TRUE, FALSE)                                                                        AS is_part_of_product,
      IFF(projects.namespace_is_internal IS NOT NULL
          AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels),
        TRUE, FALSE)                                                                        AS is_community_contributor_related,
      TIMESTAMPDIFF(HOURS, merge_requests.merge_request_created_at,
        merge_request_metrics.merged_at)                                                    AS hours_to_merged_status,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[]( |[xX])[\]]',1,'m') AS total_checkboxes,
      regexp_count(merge_requests.merge_request_description,'([-+*]|[\d+\.]) [\[][xX][\]]',1,'m')     AS completed_checkboxes,
      -- Original regex, (?:(?:>\s{0,4})*)(?:\s*(?:[-+*]|(?:\d+\.)))+\s+(\[\s\]|\[[xX]\])(\s.+), found in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/models/concerns/taskable.rb

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_merge_request_creation

    FROM merge_requests
      LEFT JOIN agg_labels
        ON merge_requests.merge_request_id = agg_labels.merge_request_id
      LEFT JOIN merge_request_metrics
        ON merge_requests.merge_request_id = merge_request_metrics.merge_request_id
      LEFT JOIN milestones
        ON merge_requests.milestone_id = milestones.milestone_id
      LEFT JOIN projects
        ON merge_requests.target_project_id = projects.project_id
      LEFT JOIN author_namespaces
        ON merge_requests.author_id = author_namespaces.owner_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND merge_requests.created_at BETWEEN gitlab_subscriptions.valid_from AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)

)

SELECT *
FROM joined26:T1db6,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
        "materialized": "incremental",
        "unique_key": "event_primary_key",
        "automatic_clustering": true
    })
}}

/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

{%- set event_ctes = [
  {
    "event_name": "epic_notes",
    "source_cte_name": "epic_notes_source",
    "user_column_name": "note_author_id",
    "key_to_parent_group": "ultimate_parent_id",
    "primary_key": "note_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "issue_notes",
    "source_cte_name": "issue_notes_source",
    "user_column_name": "note_author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "note_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "merge_request_notes",
    "source_cte_name": "merge_request_notes_source",
    "user_column_name": "note_author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "note_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "notes",
    "source_table_name": "gitlab_dotcom_notes",
    "user_column_name": "note_author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "note_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
]
-%}


{{ simple_cte([
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespaces', 'gitlab_dotcom_namespaces_xf'),
    ('plans', 'gitlab_dotcom_plans'),
    ('projects', 'gitlab_dotcom_projects_xf'),
    ('users', 'gitlab_dotcom_users'),
    ('blocked_users', 'gitlab_dotcom_users_blocked_xf')
]) }}


/* Source CTEs Start Here */
, epic_notes_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_epic_notes_xf') }}

),  issue_notes_source AS (

    SELECT *
    FROM {{ ref('temp_gitlab_dotcom_notes_filtered') }}
    WHERE noteable_type = 'Issue'

), merge_request_notes_source AS (

    SELECT *
    FROM {{ ref('temp_gitlab_dotcom_notes_filtered') }}
    WHERE noteable_type = 'MergeRequest'

)
/* End of Source CTEs */

{% for event_cte in event_ctes %}

, {{ event_cte.event_name }} AS (

    SELECT *,
      MD5({{ event_cte.primary_key }} || '-' || '{{ event_cte.event_name }}')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    {% if event_cte.source_table_name is defined %}
      FROM {{ ref(event_cte.source_table_name) }}
    {% else %}
      FROM {{ event_cte.source_cte_name }}
    {% endif %}
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    {% if is_incremental() %}

      AND created_at > (SELECT MAX(event_created_at) FROM {{this}} WHERE event_name = '{{ event_cte.event_name }}')

    {% endif %}

)

{% endfor -%}

, data AS (

{% for event_cte in event_ctes %}

    SELECT 
      event_primary_key,
      '{{ event_cte.event_name }}' AS event_name,
      {{ event_cte.user_column_name }} AS user_id,
      created_at AS event_created_at,
      {{ event_cte.is_representative_of_stage }}::BOOLEAN AS is_representative_of_stage,
      '{{ event_cte.stage_name }}' AS stage_name,
      {% if event_cte.key_to_parent_project is defined -%}

      {{ event_cte.key_to_parent_project }} 
 
      {%- elif event_cte.key_to_parent_group is defined -%}

      {{ event_cte.key_to_parent_group }} 
      
      {%- else -%}
      NULL 
      {%- endif %}::NUMBER AS parent_id,
      {% if event_cte.key_to_parent_project is defined -%}
        'project'
       
      {%- elif event_cte.key_to_parent_group is defined -%}
        'group'
  
      {%- else -%}
        NULL     
      {%- endif %} AS parent_type
    FROM {{ event_cte.event_name }}                                                                              

    {% if not loop.last -%}
    UNION ALL
    {%- endif -%}
    {% endfor -%}

),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < {{ coalesce_to_infinity("TO_DATE(gitlab_subscriptions.valid_to)") }}
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE {{ filter_out_blocked_users('data' , 'user_id') }}
      


)
, final AS (
    SELECT
      joins.*,
      users.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN users
      ON joins.user_id = users.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final27:T20af,



/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

WITH gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespaces AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf

), plans AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_plans

), projects AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), users AS (

    SELECT * 
    FROM "PREP".sensitive.gitlab_dotcom_users

), blocked_users AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_users_blocked_xf

)


/* Source CTEs Start Here */
, epic_notes_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_epic_notes_xf

),  issue_notes_source AS (

    SELECT *
    FROM "PROD".legacy.temp_gitlab_dotcom_notes_filtered
    WHERE noteable_type = 'Issue'

), merge_request_notes_source AS (

    SELECT *
    FROM "PROD".legacy.temp_gitlab_dotcom_notes_filtered
    WHERE noteable_type = 'MergeRequest'

)
/* End of Source CTEs */



, epic_notes AS (

    SELECT *,
      MD5(note_id || '-' || 'epic_notes')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM epic_notes_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_notes WHERE event_name = 'epic_notes')

    

)



, issue_notes AS (

    SELECT *,
      MD5(note_id || '-' || 'issue_notes')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM issue_notes_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_notes WHERE event_name = 'issue_notes')

    

)



, merge_request_notes AS (

    SELECT *,
      MD5(note_id || '-' || 'merge_request_notes')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM merge_request_notes_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_notes WHERE event_name = 'merge_request_notes')

    

)



, notes AS (

    SELECT *,
      MD5(note_id || '-' || 'notes')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_notes
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_notes WHERE event_name = 'notes')

    

)

, data AS (



    SELECT 
      event_primary_key,
      'epic_notes' AS event_name,
      note_author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      ultimate_parent_id::NUMBER AS parent_id,
      'group' AS parent_type
    FROM epic_notes                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'issue_notes' AS event_name,
      note_author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM issue_notes                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'merge_request_notes' AS event_name,
      note_author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM merge_request_notes                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'notes' AS event_name,
      note_author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM notes                                                                              

    ),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < COALESCE( TO_DATE(gitlab_subscriptions.valid_to), '9999-12-31'::TIMESTAMP)
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = data.user_id

    )
      


)
, final AS (
    SELECT
      joins.*,
      users.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN users
      ON joins.user_id = users.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final28:T1adf,-- depends_on: {{ ref('engineering_productivity_metrics_projects_to_include') }}
-- depends_on: {{ ref('projects_part_of_product') }}

{% set fields_to_mask = ['issue_title', 'issue_description'] %}


WITH issues AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_issues')}} issues
    WHERE {{ filter_out_blocked_users('issues', 'author_id') }}

), label_links AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_label_links')}}
    WHERE is_currently_valid = True
      AND target_type = 'Issue'

), all_labels AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_labels_xf')}}

), derived_close_date AS (

    SELECT
      noteable_id AS issue_id,
      created_at  AS derived_closed_at
    FROM {{ref('gitlab_dotcom_notes')}}
    WHERE noteable_type = 'Issue'
      AND system = TRUE
      AND (CONTAINS(note, 'closed')
      OR CONTAINS(note, 'moved to'))
    QUALIFY ROW_NUMBER() OVER (PARTITION BY noteable_id ORDER BY created_at DESC) = 1

), agg_labels AS (

    SELECT
      issues.issue_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM issues
    LEFT JOIN label_links
      ON issues.issue_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY issues.issue_id

), projects AS (

    SELECT
      project_id,
      namespace_id,
      visibility_level
    FROM {{ref('gitlab_dotcom_projects')}}

), namespace_lineage AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespace_lineage')}}

), gitlab_subscriptions AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base')}}

), issue_metrics AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_issue_metrics') }}

), events_weight AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_resource_weight_events_xf') }}

), first_events_weight AS (

    SELECT
      issue_id,
      MIN(created_at) first_weight_set_at
    FROM events_weight
    GROUP BY 1

), joined AS (

  SELECT
    issues.issue_id,
    issues.issue_iid,
    issues.author_id,
    issues.project_id,
    milestone_id,
    sprint_id,
    updated_by_id,
    last_edited_by_id,
    moved_to_id,
    issues.created_at                            AS issue_created_at,
    issues.updated_at                            AS issue_updated_at,
    issue_last_edited_at,
    --issue_closed_at,
    IFF(issue_closed_at IS NULL 
        AND state = 'closed',
        derived_close_date.derived_closed_at,
        issue_closed_at)                         AS issue_closed_at,
    projects.namespace_id,
    visibility_level,
    is_confidential                              AS issue_is_confidential,
    {% for field in fields_to_mask %}
    CASE
      WHEN is_confidential = TRUE
        THEN 'confidential - masked'
      WHEN visibility_level != 'public'
        AND namespace_lineage.namespace_is_internal = FALSE
        THEN 'private/internal - masked'
      ELSE {{field}}
    END                                          AS {{field}},
    {% endfor %}

    CASE
    WHEN projects.namespace_id = 9970
      AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels)
      THEN TRUE
    ELSE FALSE
    END                                          AS is_community_contributor_related,

    CASE
      WHEN ARRAY_CONTAINS('severity::1'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S1'::variant, agg_labels.labels)
        THEN 'severity 1'
      WHEN ARRAY_CONTAINS('severity::2'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S2'::variant, agg_labels.labels)
        THEN 'severity 2'
      WHEN ARRAY_CONTAINS('severity::3'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S3'::variant, agg_labels.labels)
        THEN 'severity 3'
      WHEN ARRAY_CONTAINS('severity::4'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S4'::variant, agg_labels.labels)
        THEN 'severity 4'
      ELSE 'undefined'
    END                                          AS severity_tag,

    CASE
      WHEN ARRAY_CONTAINS('priority::1'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P1'::variant, agg_labels.labels)
        THEN 'priority 1'
      WHEN ARRAY_CONTAINS('priority::2'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P2'::variant, agg_labels.labels)
        THEN 'priority 2'
      WHEN ARRAY_CONTAINS('priority::3'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P3'::variant, agg_labels.labels)
        THEN 'priority 3'
      WHEN ARRAY_CONTAINS('priority::4'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P4'::variant, agg_labels.labels)
        THEN 'priority 4'
      ELSE 'undefined'
    END                                          AS priority_tag,

    CASE
      WHEN projects.namespace_id = 9970
        AND ARRAY_CONTAINS('security'::variant, agg_labels.labels)
        THEN TRUE
      ELSE FALSE
    END                                          AS is_security_issue,

    IFF(issues.project_id IN ({{is_project_included_in_engineering_metrics()}}),
      TRUE, FALSE)                               AS is_included_in_engineering_metrics,
    IFF(issues.project_id IN ({{is_project_part_of_product()}}),
      TRUE, FALSE)                               AS is_part_of_product,
    state,
    weight,
    due_date,
    lock_version,
    time_estimate,
    has_discussion_locked,
    closed_by_id,
    relative_position,
    service_desk_reply_to,
    duplicated_to_id,
    promoted_to_epic_id,
    issue_type,

    agg_labels.labels,
    ARRAY_TO_STRING(agg_labels.labels,'|')       AS masked_label_title,

    namespace_lineage.namespace_is_internal      AS is_internal_issue,
    namespace_lineage.ultimate_parent_id,
    namespace_lineage.ultimate_parent_plan_id,
    namespace_lineage.ultimate_parent_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid,

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_issue_creation,

    issue_metrics.first_mentioned_in_commit_at,
    issue_metrics.first_associated_with_milestone_at,
    issue_metrics.first_added_to_board_at,
    first_events_weight.first_weight_set_at

  FROM issues
  LEFT JOIN agg_labels
    ON issues.issue_id = agg_labels.issue_id
  LEFT JOIN projects
    ON issues.project_id = projects.project_id
  LEFT JOIN namespace_lineage
    ON projects.namespace_id = namespace_lineage.namespace_id
  LEFT JOIN gitlab_subscriptions
    ON namespace_lineage.ultimate_parent_id = gitlab_subscriptions.namespace_id
    AND issues.created_at BETWEEN gitlab_subscriptions.valid_from AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
  LEFT JOIN issue_metrics
    ON issues.issue_id = issue_metrics.issue_id
  LEFT JOIN first_events_weight
    ON issues.issue_id = first_events_weight.issue_id
  LEFT JOIN derived_close_date
    ON issues.issue_id = derived_close_date.issue_id
)

SELECT *
FROM joined29:T2c0b,-- depends_on: "PROD".legacy.engineering_productivity_metrics_projects_to_include
-- depends_on: "PROD".legacy.projects_part_of_product




WITH issues AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_issues issues
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = issues.author_id

    )

), label_links AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_label_links
    WHERE is_currently_valid = True
      AND target_type = 'Issue'

), all_labels AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_labels_xf

), derived_close_date AS (

    SELECT
      noteable_id AS issue_id,
      created_at  AS derived_closed_at
    FROM "PREP".sensitive.gitlab_dotcom_notes
    WHERE noteable_type = 'Issue'
      AND system = TRUE
      AND (CONTAINS(note, 'closed')
      OR CONTAINS(note, 'moved to'))
    QUALIFY ROW_NUMBER() OVER (PARTITION BY noteable_id ORDER BY created_at DESC) = 1

), agg_labels AS (

    SELECT
      issues.issue_id,
      ARRAY_AGG(LOWER(masked_label_title)) WITHIN GROUP (ORDER BY masked_label_title ASC) AS labels
    FROM issues
    LEFT JOIN label_links
      ON issues.issue_id = label_links.target_id
    LEFT JOIN all_labels
      ON label_links.label_id = all_labels.label_id
    GROUP BY issues.issue_id

), projects AS (

    SELECT
      project_id,
      namespace_id,
      visibility_level
    FROM "PREP".sensitive.gitlab_dotcom_projects

), namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

), gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), issue_metrics AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_issue_metrics

), events_weight AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_resource_weight_events_xf

), first_events_weight AS (

    SELECT
      issue_id,
      MIN(created_at) first_weight_set_at
    FROM events_weight
    GROUP BY 1

), joined AS (

  SELECT
    issues.issue_id,
    issues.issue_iid,
    issues.author_id,
    issues.project_id,
    milestone_id,
    sprint_id,
    updated_by_id,
    last_edited_by_id,
    moved_to_id,
    issues.created_at                            AS issue_created_at,
    issues.updated_at                            AS issue_updated_at,
    issue_last_edited_at,
    --issue_closed_at,
    IFF(issue_closed_at IS NULL 
        AND state = 'closed',
        derived_close_date.derived_closed_at,
        issue_closed_at)                         AS issue_closed_at,
    projects.namespace_id,
    visibility_level,
    is_confidential                              AS issue_is_confidential,
    
    CASE
      WHEN is_confidential = TRUE
        THEN 'confidential - masked'
      WHEN visibility_level != 'public'
        AND namespace_lineage.namespace_is_internal = FALSE
        THEN 'private/internal - masked'
      ELSE issue_title
    END                                          AS issue_title,
    
    CASE
      WHEN is_confidential = TRUE
        THEN 'confidential - masked'
      WHEN visibility_level != 'public'
        AND namespace_lineage.namespace_is_internal = FALSE
        THEN 'private/internal - masked'
      ELSE issue_description
    END                                          AS issue_description,
    

    CASE
    WHEN projects.namespace_id = 9970
      AND ARRAY_CONTAINS('community contribution'::variant, agg_labels.labels)
      THEN TRUE
    ELSE FALSE
    END                                          AS is_community_contributor_related,

    CASE
      WHEN ARRAY_CONTAINS('severity::1'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S1'::variant, agg_labels.labels)
        THEN 'severity 1'
      WHEN ARRAY_CONTAINS('severity::2'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S2'::variant, agg_labels.labels)
        THEN 'severity 2'
      WHEN ARRAY_CONTAINS('severity::3'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S3'::variant, agg_labels.labels)
        THEN 'severity 3'
      WHEN ARRAY_CONTAINS('severity::4'::variant, agg_labels.labels) OR ARRAY_CONTAINS('S4'::variant, agg_labels.labels)
        THEN 'severity 4'
      ELSE 'undefined'
    END                                          AS severity_tag,

    CASE
      WHEN ARRAY_CONTAINS('priority::1'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P1'::variant, agg_labels.labels)
        THEN 'priority 1'
      WHEN ARRAY_CONTAINS('priority::2'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P2'::variant, agg_labels.labels)
        THEN 'priority 2'
      WHEN ARRAY_CONTAINS('priority::3'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P3'::variant, agg_labels.labels)
        THEN 'priority 3'
      WHEN ARRAY_CONTAINS('priority::4'::variant, agg_labels.labels) OR ARRAY_CONTAINS('P4'::variant, agg_labels.labels)
        THEN 'priority 4'
      ELSE 'undefined'
    END                                          AS priority_tag,

    CASE
      WHEN projects.namespace_id = 9970
        AND ARRAY_CONTAINS('security'::variant, agg_labels.labels)
        THEN TRUE
      ELSE FALSE
    END                                          AS is_security_issue,

    IFF(issues.project_id IN (13083, 278964, 250833, 7071551, 554859, 2009901, 2694799, 74823, 3674569, 430285, 5373222, 9762266, 5779760, 10476326, 9450197, 9450195, 9450192, 7145793, 6535935, 6280478, 6237091, 6237085, 5971589, 5606894, 4894834, 5851774, 5849726, 5778095, 5778093, 5778044, 5777976, 5777952, 5777939, 4157550, 1507906, 4382108, 8427052, 7524061, 7776928, 11520423, 10748426, 8368695, 5474112, 5467277, 10014839, 7660893, 6487905, 5777819, 145205, 3362933, 3430480, 4921652, 3626648, 6469877, 3601513, 12006272, 9049889, 734943, 14022, 1441932, 9396716, 6237088, 6126012, 6802300, 6143038, 5828233, 5777853, 8375261, 8368700, 5996549, 5727416, 5457755, 3828396, 7795571, 6392811, 6168240, 5778074, 5778037, 5777954, 5777179, 8362868, 9438583, 4949400, 5647182, 4359271, 4149988, 8226179, 11428501, 11432834, 7688358, 6328050, 5509547, 5456231, 11688089, 14240586, 11080193, 14694517, 6047528, 443787, 7750843, 4456656, 2670515, 6491770, 6130122, 11574953, 6388398, 5465687, 10619765, 9358979, 5778056, 5777918, 1075790, 3825482, 3787977, 11915984, 11317506, 10846938, 9712018, 6523803, 5737157, 5486671, 9184510, 20699, 10400718, 5457651, 27726, 6457868, 5467143, 10947578),
      TRUE, FALSE)                               AS is_included_in_engineering_metrics,
    IFF(issues.project_id IN (4359271, 7453181, 3828396, 6329679, 16590122, 13822214, 16240616, 1254421, 5279538, 17019611, 11173751, 19922160, 34675721, 15363819, 10400718, 11688089, 2670515, 23345837, 43513722, 150440, 13682597, 2694799, 1794617, 46649240, 21250701, 1507906, 13083, 1777822, 145205, 5981322, 14694517, 6457868, 27726, 9450192, 6392811, 9762266, 6126012, 13815397, 9184510, 1075790, 34770409, 5261717, 554859, 928825, 3843116, 11015994, 9450197, 5498087, 5779760, 5777853, 5777952, 5777954, 5778074, 39622674, 6237091, 6280478, 19871573, 19871264, 19413496, 24673064, 5467143, 24249085, 3430480, 2651596, 2009901, 4157550, 4534254, 734943, 13764, 250833, 7792567, 14378900, 10506825, 11196060, 9358979, 10846951, 27060148, 5778056, 37734140, 39233486, 11533294, 23070395, 20162469, 11915984, 6047528, 5647182, 2953390, 20699, 10586771, 3844141, 11380952, 15112583, 3362933, 4949400, 10476326, 6487905, 9450195, 30656896, 13922331, 10861561, 21479276, 15369510, 26751150, 21351796, 12006272, 5777179, 5777819, 5777939, 6130122, 39229232, 5606894, 13150952, 5971589, 5964710, 24298348, 25230764, 24313598, 23176783, 23070140, 24225194, 20334170, 24257614, 27821122, 5727416, 5737157, 14097509, 5465687, 16842968, 4456656, 18943607, 95156, 387896, 430285, 13017938, 17166102, 5778093, 39298809, 8362868, 13467157, 6237088, 6237085, 22111360, 24544330, 23069956, 23465101, 20773921, 23545481, 15232184, 27497069, 11432834, 13664986, 5457755, 6523803, 7688358, 14404642, 7776928, 10973541, 8368695, 15642544, 4176070, 12690061, 16573099, 13566613, 18899486, 27628435, 31202357, 24631368, 13331704, 26076251, 39193358, 25537666, 278964, 36743, 74823, 6043225, 14022, 11625232, 5772881, 5777976, 5828233, 5373222, 25538517, 24544020, 24317064, 23176971, 24111720, 19413101, 19413012, 19904939, 20337863, 20336302, 24075172, 16683102, 16239404, 3101096, 143237, 10953870, 4875494, 3842996, 7660893, 9396716, 11139665, 17035255, 5777918, 5778037, 5778044, 5778095, 11373038, 19617580, 24542363, 24313398, 24302484, 23599168, 23505725, 23070377, 23070164, 23069693, 21501997, 23597850, 23455079, 28589369, 27819859, 27821148, 28502955, 37954006, 13348998, 6388398, 11520423, 5996549, 9712018, 5457651, 5509547, 10748426, 5467277, 5486671, 5474112, 6328050, 11317506, 10846938, 13831684, 6491770, 38355982, 15704133, 15685912, 15683922, 15667093, 19047934, 11446522, 1441932, 7795571, 6535935, 8368700, 11511606, 7523614, 7524061, 7560116, 14477200, 11229385, 11880131, 12450931, 443787, 4149988, 4382108, 15114652, 19722963, 7444821, 5651817, 1755794, 22848448, 26392061, 32149347, 32189602, 32318686, 31202862, 31203942, 35104827, 37966217, 43788427, 29138380, 40916776, 1148549, 28496898, 7145793, 14853550, 11080193, 40857363, 24112430, 23365123, 5456231, 11574953, 9438583, 7071551, 19019153, 15685819, 14292404, 7560137, 13613417, 15208888, 1755701, 31203840, 32823351, 43473862, 34907799, 15821588, 15685887, 27919014),
      TRUE, FALSE)                               AS is_part_of_product,
    state,
    weight,
    due_date,
    lock_version,
    time_estimate,
    has_discussion_locked,
    closed_by_id,
    relative_position,
    service_desk_reply_to,
    duplicated_to_id,
    promoted_to_epic_id,
    issue_type,

    agg_labels.labels,
    ARRAY_TO_STRING(agg_labels.labels,'|')       AS masked_label_title,

    namespace_lineage.namespace_is_internal      AS is_internal_issue,
    namespace_lineage.ultimate_parent_id,
    namespace_lineage.ultimate_parent_plan_id,
    namespace_lineage.ultimate_parent_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid,

    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_issue_creation,

    issue_metrics.first_mentioned_in_commit_at,
    issue_metrics.first_associated_with_milestone_at,
    issue_metrics.first_added_to_board_at,
    first_events_weight.first_weight_set_at

  FROM issues
  LEFT JOIN agg_labels
    ON issues.issue_id = agg_labels.issue_id
  LEFT JOIN projects
    ON issues.project_id = projects.project_id
  LEFT JOIN namespace_lineage
    ON projects.namespace_id = namespace_lineage.namespace_id
  LEFT JOIN gitlab_subscriptions
    ON namespace_lineage.ultimate_parent_id = gitlab_subscriptions.namespace_id
    AND issues.created_at BETWEEN gitlab_subscriptions.valid_from AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
  LEFT JOIN issue_metrics
    ON issues.issue_id = issue_metrics.issue_id
  LEFT JOIN first_events_weight
    ON issues.issue_id = first_events_weight.issue_id
  LEFT JOIN derived_close_date
    ON issues.issue_id = derived_close_date.issue_id
)

SELECT *
FROM joined2a:T62f,{{ config(
    materialized='table'
) }}

{{ simple_cte([
    ('users','gitlab_dotcom_users_source'),
    ('users_enhance','gitlab_contact_enhance_source')
]) }},

sf_leads AS (

  SELECT
    zoominfo_company_id,
    lead_email
  FROM {{ ref('sfdc_lead_source') }}
  WHERE zoominfo_company_id IS NOT NULL
  -- email is not unique, use the record created most recently
  QUALIFY ROW_NUMBER() OVER (PARTITION BY lead_email ORDER BY created_date DESC ) = 1
),

sf_contacts AS (

  SELECT
    zoominfo_company_id,
    contact_email
  FROM {{ ref('sfdc_contact_source') }}
  WHERE zoominfo_company_id IS NOT NULL
  -- email is not unique, use the record created most recently
  QUALIFY ROW_NUMBER() OVER (PARTITION BY contact_email ORDER BY created_date DESC ) = 1
),

rpt AS (

  SELECT DISTINCT
    users.user_id AS gitlab_dotcom_user_id,
    COALESCE(
      sf_leads.zoominfo_company_id,
      sf_contacts.zoominfo_company_id,
      users_enhance.zoominfo_company_id
    ) AS company_id,
    sf_leads.zoominfo_company_id AS sf_lead_company_id,
    sf_contacts.zoominfo_company_id AS sf_contact_company_id,
    users_enhance.zoominfo_company_id AS gitlab_user_enhance_company_id,
    {{ dbt_utils.surrogate_key(['users.user_id']) }} AS dim_user_id,
    {{ dbt_utils.surrogate_key(['company_id']) }} AS dim_company_id
  FROM users
  LEFT JOIN sf_leads
    ON users.email = sf_leads.lead_email
  LEFT JOIN sf_contacts
    ON users.email = sf_contacts.contact_email
  LEFT JOIN users_enhance
    ON users.user_id = users_enhance.user_id
  WHERE company_id IS NOT NULL

)

SELECT * FROM rpt2b:T683,



WITH users AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), users_enhance AS (

    SELECT * 
    FROM "PREP".zoominfo.gitlab_contact_enhance_source

),

sf_leads AS (

  SELECT
    zoominfo_company_id,
    lead_email
  FROM "PREP".sfdc.sfdc_lead_source
  WHERE zoominfo_company_id IS NOT NULL
  -- email is not unique, use the record created most recently
  QUALIFY ROW_NUMBER() OVER (PARTITION BY lead_email ORDER BY created_date DESC ) = 1
),

sf_contacts AS (

  SELECT
    zoominfo_company_id,
    contact_email
  FROM "PREP".sfdc.sfdc_contact_source
  WHERE zoominfo_company_id IS NOT NULL
  -- email is not unique, use the record created most recently
  QUALIFY ROW_NUMBER() OVER (PARTITION BY contact_email ORDER BY created_date DESC ) = 1
),

rpt AS (

  SELECT DISTINCT
    users.user_id AS gitlab_dotcom_user_id,
    COALESCE(
      sf_leads.zoominfo_company_id,
      sf_contacts.zoominfo_company_id,
      users_enhance.zoominfo_company_id
    ) AS company_id,
    sf_leads.zoominfo_company_id AS sf_lead_company_id,
    sf_contacts.zoominfo_company_id AS sf_contact_company_id,
    users_enhance.zoominfo_company_id AS gitlab_user_enhance_company_id,
    md5(cast(coalesce(cast(users.user_id as 
    varchar
), '') as 
    varchar
)) AS dim_user_id,
    md5(cast(coalesce(cast(company_id as 
    varchar
), '') as 
    varchar
)) AS dim_company_id
  FROM users
  LEFT JOIN sf_leads
    ON users.email = sf_leads.lead_email
  LEFT JOIN sf_contacts
    ON users.email = sf_contacts.contact_email
  LEFT JOIN users_enhance
    ON users.user_id = users_enhance.user_id
  WHERE company_id IS NOT NULL

)

SELECT * FROM rpt2c:Tb80,{% set fields_to_mask = ['group_name', 'group_path'] %}

WITH groups AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_groups')}}

),

members AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_members')}} members
    WHERE is_currently_valid = TRUE 
      AND {{ filter_out_blocked_users('members', 'user_id') }}

),

projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects')}}

), namespace_lineage AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespace_lineage')}}

), joined AS (

    SELECT
      groups.group_id,

      {% for field in fields_to_mask %}
      CASE
        WHEN groups.visibility_level = 'public' OR namespace_is_internal THEN groups.{{field}}
        WHEN groups.visibility_level = 'internal' AND NOT namespace_is_internal THEN 'internal - masked'
        WHEN groups.visibility_level = 'private'  AND NOT namespace_is_internal THEN 'private - masked'
      END                                                               AS {{field}},
      {% endfor %}

      groups.owner_id,
      groups.has_avatar,
      groups.created_at                                                 AS group_created_at,
      groups.updated_at                                                 AS group_updated_at,
      groups.is_membership_locked,
      groups.has_request_access_enabled,
      groups.has_share_with_group_locked,
      groups.visibility_level,
      groups.ldap_sync_status,
      groups.ldap_sync_error,
      groups.ldap_sync_last_update_at,
      groups.ldap_sync_last_successful_update_at,
      groups.ldap_sync_last_sync_at,
      groups.lfs_enabled,
      groups.parent_group_id,
      IFF(groups.parent_group_id IS NULL, True, False)                  AS is_top_level_group,
      groups.shared_runners_minutes_limit,
      groups.repository_size_limit,
      groups.does_require_two_factor_authentication,
      groups.two_factor_grace_period,
      groups.project_creation_level,

      namespace_lineage.namespace_is_internal                           AS group_is_internal,
      namespace_lineage.ultimate_parent_id                              AS group_ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id                         AS group_plan_id,
      namespace_lineage.ultimate_parent_plan_title                      AS group_plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid                    AS group_plan_is_paid,

      COALESCE(COUNT(DISTINCT members.member_id), 0)                    AS member_count,
      COALESCE(COUNT(DISTINCT projects.project_id), 0)                  AS project_count

    FROM groups
      LEFT JOIN members
        ON groups.group_id = members.source_id
        AND members.member_source_type = 'Namespace'
      LEFT JOIN projects
        ON projects.namespace_id = groups.group_id
      LEFT JOIN namespace_lineage
        ON groups.group_id = namespace_lineage.namespace_id
    {{ dbt_utils.group_by(n=29) }}

)

SELECT *
FROM joined2d:Td9d,

WITH groups AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_groups

),

members AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_members members
    WHERE is_currently_valid = TRUE 
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )

),

projects AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_projects

), namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

), joined AS (

    SELECT
      groups.group_id,

      
      CASE
        WHEN groups.visibility_level = 'public' OR namespace_is_internal THEN groups.group_name
        WHEN groups.visibility_level = 'internal' AND NOT namespace_is_internal THEN 'internal - masked'
        WHEN groups.visibility_level = 'private'  AND NOT namespace_is_internal THEN 'private - masked'
      END                                                               AS group_name,
      
      CASE
        WHEN groups.visibility_level = 'public' OR namespace_is_internal THEN groups.group_path
        WHEN groups.visibility_level = 'internal' AND NOT namespace_is_internal THEN 'internal - masked'
        WHEN groups.visibility_level = 'private'  AND NOT namespace_is_internal THEN 'private - masked'
      END                                                               AS group_path,
      

      groups.owner_id,
      groups.has_avatar,
      groups.created_at                                                 AS group_created_at,
      groups.updated_at                                                 AS group_updated_at,
      groups.is_membership_locked,
      groups.has_request_access_enabled,
      groups.has_share_with_group_locked,
      groups.visibility_level,
      groups.ldap_sync_status,
      groups.ldap_sync_error,
      groups.ldap_sync_last_update_at,
      groups.ldap_sync_last_successful_update_at,
      groups.ldap_sync_last_sync_at,
      groups.lfs_enabled,
      groups.parent_group_id,
      IFF(groups.parent_group_id IS NULL, True, False)                  AS is_top_level_group,
      groups.shared_runners_minutes_limit,
      groups.repository_size_limit,
      groups.does_require_two_factor_authentication,
      groups.two_factor_grace_period,
      groups.project_creation_level,

      namespace_lineage.namespace_is_internal                           AS group_is_internal,
      namespace_lineage.ultimate_parent_id                              AS group_ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id                         AS group_plan_id,
      namespace_lineage.ultimate_parent_plan_title                      AS group_plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid                    AS group_plan_is_paid,

      COALESCE(COUNT(DISTINCT members.member_id), 0)                    AS member_count,
      COALESCE(COUNT(DISTINCT projects.project_id), 0)                  AS project_count

    FROM groups
      LEFT JOIN members
        ON groups.group_id = members.source_id
        AND members.member_source_type = 'Namespace'
      LEFT JOIN projects
        ON projects.namespace_id = groups.group_id
      LEFT JOIN namespace_lineage
        ON groups.group_id = namespace_lineage.namespace_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29

)

SELECT *
FROM joined2e:T66b,WITH users AS (

    SELECT
      user_id,
      user_name
    FROM {{ ref('gitlab_dotcom_users') }} users
    WHERE {{ filter_out_blocked_users('users', 'user_id') }}

), notes AS (

    SELECT
      *,
      IFF(note LIKE 'Reassigned%', note, NULL)                                    AS reassigned,
      IFF(note LIKE 'assigned%', SPLIT_PART(note, 'unassigned ', 1), NULL)        AS assigned,
      IFF(note LIKE '%unassigned%', SPLIT_PART(note, 'unassigned ', 2), NULL)     AS unassigned
    FROM {{ ref('gitlab_dotcom_internal_notes_xf') }}
    WHERE noteable_type = 'MergeRequest'
      AND (note LIKE 'assigned to%' OR note LIKE 'unassigned%' OR note LIKE 'Reassigned%')

), notes_cleaned AS (

    SELECT
      note_id,
      noteable_id,
      note_author_id,
      created_at,
      note,
      event,
      "{{this.database}}".{{target.schema}}.regexp_to_array(event_string, '(?<=\@)(.*?)(?=(\\s|$|\,))') AS event_cleaned
    FROM notes
    UNPIVOT(event_string FOR event IN (assigned, unassigned, reassigned))
  
), notes_flat AS (

    SELECT
      notes_cleaned.*,
      f.index AS rank_in_event,
      f.value AS user_name
    FROM notes_cleaned,
    LATERAL FLATTEN(input => event_cleaned) f  

), joined AS (

    SELECT
      noteable_id  AS merge_request_id,
      note_id,
      note_author_id,
      created_at   AS note_created_at,
      LOWER(event) AS event,
      user_id      AS event_user_id,
      rank_in_event
    FROM notes_flat 
    INNER JOIN users
      ON notes_flat.user_name = users.user_name
    WHERE {{ filter_out_blocked_users('notes_flat', 'note_author_id') }} 

)

SELECT *
FROM joined
ORDER BY 1,2,72f:T799,WITH users AS (

    SELECT
      user_id,
      user_name
    FROM "PREP".sensitive.gitlab_dotcom_users users
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = users.user_id

    )

), notes AS (

    SELECT
      *,
      IFF(note LIKE 'Reassigned%', note, NULL)                                    AS reassigned,
      IFF(note LIKE 'assigned%', SPLIT_PART(note, 'unassigned ', 1), NULL)        AS assigned,
      IFF(note LIKE '%unassigned%', SPLIT_PART(note, 'unassigned ', 2), NULL)     AS unassigned
    FROM "PROD".legacy.gitlab_dotcom_internal_notes_xf
    WHERE noteable_type = 'MergeRequest'
      AND (note LIKE 'assigned to%' OR note LIKE 'unassigned%' OR note LIKE 'Reassigned%')

), notes_cleaned AS (

    SELECT
      note_id,
      noteable_id,
      note_author_id,
      created_at,
      note,
      event,
      "PROD".preparation.regexp_to_array(event_string, '(?<=\@)(.*?)(?=(\\s|$|\,))') AS event_cleaned
    FROM notes
    UNPIVOT(event_string FOR event IN (assigned, unassigned, reassigned))
  
), notes_flat AS (

    SELECT
      notes_cleaned.*,
      f.index AS rank_in_event,
      f.value AS user_name
    FROM notes_cleaned,
    LATERAL FLATTEN(input => event_cleaned) f  

), joined AS (

    SELECT
      noteable_id  AS merge_request_id,
      note_id,
      note_author_id,
      created_at   AS note_created_at,
      LOWER(event) AS event,
      user_id      AS event_user_id,
      rank_in_event
    FROM notes_flat 
    INNER JOIN users
      ON notes_flat.user_name = users.user_name
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = notes_flat.note_author_id

    ) 

)

SELECT *
FROM joined
ORDER BY 1,2,730:T1c54,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
        "materialized": "incremental",
        "unique_key": "event_primary_key",
        "automatic_clustering": true
    })
}}

/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

{%- set event_ctes = [
  {
    "event_name": "ci_builds",
    "source_table_name": "temp_gitlab_dotcom_ci_builds_filtered",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "verify",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "ci_pipeline_schedules",
    "source_table_name": "gitlab_dotcom_ci_pipeline_schedules",
    "user_column_name": "owner_id",
    "key_to_parent_project": "project_id",
    "primary_key": "ci_pipeline_schedule_id",
    "stage_name": "verify",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "ci_stages",
    "source_table_name": "gitlab_dotcom_ci_stages",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "ci_stage_id",
    "stage_name": "configure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "ci_triggers",
    "source_table_name": "gitlab_dotcom_ci_triggers",
    "user_column_name": "owner_id",
    "key_to_parent_project": "project_id",
    "primary_key": "ci_trigger_id",
    "stage_name": "verify",
    "is_representative_of_stage": "False"
  },
]
-%}


{{ simple_cte([
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespaces', 'gitlab_dotcom_namespaces_xf'),
    ('plans', 'gitlab_dotcom_plans'),
    ('projects', 'gitlab_dotcom_projects_xf'),
    ('blocked_users', 'gitlab_dotcom_users_blocked_xf'),
    ('users', 'gitlab_dotcom_users')
]) }}


{% for event_cte in event_ctes %}

, {{ event_cte.event_name }} AS (

    SELECT *,
      MD5({{ event_cte.primary_key }} || '-' || '{{ event_cte.event_name }}')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    {% if event_cte.source_table_name is defined %}
      FROM {{ ref(event_cte.source_table_name) }}
    {% else %}
      FROM {{ event_cte.source_cte_name }}
    {% endif %}
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    {% if is_incremental() %}

      AND created_at > (SELECT MAX(event_created_at) FROM {{this}} WHERE event_name = '{{ event_cte.event_name }}')

    {% endif %}

)

{% endfor -%}

, data AS (

{% for event_cte in event_ctes %}

    SELECT 
      event_primary_key,
      '{{ event_cte.event_name }}' AS event_name,
      {{ event_cte.user_column_name }} AS user_id,
      created_at AS event_created_at,
      {{ event_cte.is_representative_of_stage }}::BOOLEAN AS is_representative_of_stage,
      '{{ event_cte.stage_name }}' AS stage_name,
      {% if event_cte.key_to_parent_project is defined -%}

      {{ event_cte.key_to_parent_project }} 
 
      {%- elif event_cte.key_to_parent_group is defined -%}

      {{ event_cte.key_to_parent_group }} 
      
      {%- else -%}
      NULL 
      {%- endif %}::NUMBER AS parent_id,
      {% if event_cte.key_to_parent_project is defined -%}
        'project'
       
      {%- elif event_cte.key_to_parent_group is defined -%}
        'group'
  
      {%- else -%}
        NULL     
      {%- endif %} AS parent_type
    FROM {{ event_cte.event_name }}                                                                              

    {% if not loop.last -%}
    UNION ALL
    {%- endif -%}
    {% endfor -%}

),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < {{ coalesce_to_infinity("TO_DATE(gitlab_subscriptions.valid_to)") }}
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE {{ filter_out_blocked_users('data' , 'user_id') }}
      


)
, final AS (
    SELECT
      joins.*,
      users.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN users
      ON joins.user_id = users.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final31:T1f8f,



/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

WITH gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespaces AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf

), plans AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_plans

), projects AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), blocked_users AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_users_blocked_xf

), users AS (

    SELECT * 
    FROM "PREP".sensitive.gitlab_dotcom_users

)




, ci_builds AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'ci_builds')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.temp_gitlab_dotcom_ci_builds_filtered
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_ci_builds WHERE event_name = 'ci_builds')

    

)



, ci_pipeline_schedules AS (

    SELECT *,
      MD5(ci_pipeline_schedule_id || '-' || 'ci_pipeline_schedules')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_ci_pipeline_schedules
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_ci_builds WHERE event_name = 'ci_pipeline_schedules')

    

)



, ci_stages AS (

    SELECT *,
      MD5(ci_stage_id || '-' || 'ci_stages')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_ci_stages
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_ci_builds WHERE event_name = 'ci_stages')

    

)



, ci_triggers AS (

    SELECT *,
      MD5(ci_trigger_id || '-' || 'ci_triggers')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_ci_triggers
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_ci_builds WHERE event_name = 'ci_triggers')

    

)

, data AS (



    SELECT 
      event_primary_key,
      'ci_builds' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'verify' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM ci_builds                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'ci_pipeline_schedules' AS event_name,
      owner_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'verify' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM ci_pipeline_schedules                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'ci_stages' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'configure' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM ci_stages                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'ci_triggers' AS event_name,
      owner_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'verify' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM ci_triggers                                                                              

    ),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < COALESCE( TO_DATE(gitlab_subscriptions.valid_to), '9999-12-31'::TIMESTAMP)
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = data.user_id

    )
      


)
, final AS (
    SELECT
      joins.*,
      users.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN users
      ON joins.user_id = users.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final32:Ta7c,{{ simple_cte([
    ('ptpt_scores', 'ptpt_scores_source'),
    ('prep_namespace', 'prep_namespace'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source')
    ])
}}

, score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpt_scores_last AS (

    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpt_scores_last_2 AS (
  
    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpt_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last.namespace_id,
      ptpt_scores_last.score,
      ptpt_scores_last.score_group,
      ptpt_scores_last.insights,
      ptpt_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last
      ON prep_namespace.dim_namespace_id = ptpt_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpt_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last_2.insights,
      ptpt_scores_last_2.score_group,
      ptpt_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpt_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['namespace_creator_ptpt_score.email_address']) }} AS dim_marketing_contact_id,
  namespace_creator_ptpt_score.namespace_id,
  namespace_creator_ptpt_score.score,
  namespace_creator_ptpt_score.score_group,
  namespace_creator_ptpt_score.insights,
  namespace_creator_ptpt_score.score_date,
  namespace_creator_ptpt_score_last_2.insights          AS past_insights,
  namespace_creator_ptpt_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpt_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpt_score
LEFT JOIN namespace_creator_ptpt_score_last_2
  ON namespace_creator_ptpt_score.email_address = namespace_creator_ptpt_score_last_2.email_address33:Tb02,

WITH ptpt_scores AS (

    SELECT * 
    FROM "PREP".data_science.ptpt_scores_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

)

, score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpt_scores_last AS (

    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpt_scores_last_2 AS (
  
    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpt_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last.namespace_id,
      ptpt_scores_last.score,
      ptpt_scores_last.score_group,
      ptpt_scores_last.insights,
      ptpt_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last
      ON prep_namespace.dim_namespace_id = ptpt_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpt_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last_2.insights,
      ptpt_scores_last_2.score_group,
      ptpt_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpt_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  md5(cast(coalesce(cast(namespace_creator_ptpt_score.email_address as 
    varchar
), '') as 
    varchar
)) AS dim_marketing_contact_id,
  namespace_creator_ptpt_score.namespace_id,
  namespace_creator_ptpt_score.score,
  namespace_creator_ptpt_score.score_group,
  namespace_creator_ptpt_score.insights,
  namespace_creator_ptpt_score.score_date,
  namespace_creator_ptpt_score_last_2.insights          AS past_insights,
  namespace_creator_ptpt_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpt_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpt_score
LEFT JOIN namespace_creator_ptpt_score_last_2
  ON namespace_creator_ptpt_score.email_address = namespace_creator_ptpt_score_last_2.email_address34:T840,WITH employees AS (
  -- Attempts to get the most recent username for a team member
  SELECT DISTINCT
    employee_id,
    LAST_VALUE(NULLIF(gitlab_username, ''))
    OVER (PARTITION BY employee_id ORDER BY uploaded_at ASC) AS gitlab_username
  FROM {{ ref('blended_employee_mapping_source') }}
  WHERE NULLIF(gitlab_username, '') IS NOT NULL

),

emails AS (
  -- Attempts to get the most recent user email for a team_member
  SELECT DISTINCT
    employee_id,
    LAST_VALUE(work_email) IGNORE NULLS
    OVER (PARTITION BY employee_id ORDER BY uploaded_at ASC) AS gitlab_email
  FROM {{ ref('blended_directory_source') }}
),

users AS (
  -- Attempts to get the most recent user id for a username
  SELECT
    user_id,
    user_name,
    notification_email,
    last_activity_on
  FROM {{ ref('gitlab_dotcom_users_source') }}
  QUALIFY ROW_NUMBER() OVER (PARTITION BY user_name ORDER BY last_activity_on DESC ) = 1

),

map AS (

  SELECT
    {{ dbt_utils.surrogate_key(['employees.employee_id']) }} AS dim_team_member_sk,
    {{ dbt_utils.surrogate_key(['users.user_id']) }} AS dim_user_sk,
    employees.employee_id,
    users.user_id,
    users.user_name AS gitlab_username,
    users.notification_email,
    users.last_activity_on,
    SPLIT_PART(users.notification_email,'@',2) AS email_domain,
    IFF(email_domain = 'gitlab.com',TRUE,FALSE) AS is_gitlab_email,
    ROW_NUMBER() OVER (PARTITION BY employees.employee_id
    ORDER BY is_gitlab_email,last_activity_on) AS preference
  FROM employees
  LEFT JOIN emails
    ON employees.employee_id = emails.employee_id
  LEFT JOIN users
    ON employees.gitlab_username = users.user_name
      OR emails.gitlab_email = users.notification_email
  WHERE users.user_id IS NOT NULL
  AND users.last_activity_on IS NOT NULL
  QUALIFY preference = 1
),

map_clean AS (
  SELECT
    dim_team_member_sk,
    dim_user_sk,
    employee_id,
    user_id,
    gitlab_username,
    notification_email
  FROM map
)

{{ dbt_audit(
    cte_ref="map_clean",
    created_by="@pempey",
    updated_by="@pempey",
    created_date="2022-07-22",
    updated_date="2022-08-08"
) }}35:T979,WITH employees AS (
  -- Attempts to get the most recent username for a team member
  SELECT DISTINCT
    employee_id,
    LAST_VALUE(NULLIF(gitlab_username, ''))
    OVER (PARTITION BY employee_id ORDER BY uploaded_at ASC) AS gitlab_username
  FROM "PREP".workday.blended_employee_mapping_source
  WHERE NULLIF(gitlab_username, '') IS NOT NULL

),

emails AS (
  -- Attempts to get the most recent user email for a team_member
  SELECT DISTINCT
    employee_id,
    LAST_VALUE(work_email) IGNORE NULLS
    OVER (PARTITION BY employee_id ORDER BY uploaded_at ASC) AS gitlab_email
  FROM "PREP".workday.blended_directory_source
),

users AS (
  -- Attempts to get the most recent user id for a username
  SELECT
    user_id,
    user_name,
    notification_email,
    last_activity_on
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source
  QUALIFY ROW_NUMBER() OVER (PARTITION BY user_name ORDER BY last_activity_on DESC ) = 1

),

map AS (

  SELECT
    md5(cast(coalesce(cast(employees.employee_id as 
    varchar
), '') as 
    varchar
)) AS dim_team_member_sk,
    md5(cast(coalesce(cast(users.user_id as 
    varchar
), '') as 
    varchar
)) AS dim_user_sk,
    employees.employee_id,
    users.user_id,
    users.user_name AS gitlab_username,
    users.notification_email,
    users.last_activity_on,
    SPLIT_PART(users.notification_email,'@',2) AS email_domain,
    IFF(email_domain = 'gitlab.com',TRUE,FALSE) AS is_gitlab_email,
    ROW_NUMBER() OVER (PARTITION BY employees.employee_id
    ORDER BY is_gitlab_email,last_activity_on) AS preference
  FROM employees
  LEFT JOIN emails
    ON employees.employee_id = emails.employee_id
  LEFT JOIN users
    ON employees.gitlab_username = users.user_name
      OR emails.gitlab_email = users.notification_email
  WHERE users.user_id IS NOT NULL
  AND users.last_activity_on IS NOT NULL
  QUALIFY preference = 1
),

map_clean AS (
  SELECT
    dim_team_member_sk,
    dim_user_sk,
    employee_id,
    user_id,
    gitlab_username,
    notification_email
  FROM map
)

SELECT
      *,
      '@pempey'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2022-07-22'::DATE        AS model_created_date,
      '2022-08-08'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM map_clean36:T4773,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
        "materialized": "incremental",
        "unique_key": "event_primary_key",
        "automatic_clustering": true
    })
}}

/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

{%- set event_ctes = [
  {
    "event_name": "action_monthly_active_users_project_repo",
    "source_cte_name": "action_monthly_active_users_project_repo_source",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "event_id",
    "stage_name": "create",
    "is_representative_of_stage": "True"
  }, {
    "event_name": "action_monthly_active_users_design_management",
    "source_cte_name": "action_monthly_active_users_design_management_source",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "event_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  }, {
    "event_name": "action_monthly_active_users_wiki_repo",
    "source_cte_name": "action_monthly_active_users_wiki_repo_source",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "event_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "api_fuzzing",
    "source_cte_name": "api_fuzzing_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "boards",
    "source_table_name": "gitlab_dotcom_boards",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "board_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "successful_ci_pipelines",
    "source_cte_name": "successful_ci_pipelines_source",
    "user_column_name": "user_id",
    "key_to_parent_project": "project_id",
    "primary_key": "ci_pipeline_id",
    "stage_name": "verify",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "clusters_applications_helm",
    "source_table_name": "gitlab_dotcom_clusters_applications_helm_xf",
    "user_column_name": "user_id",
    "key_to_parent_project": "cluster_project_id",
    "primary_key": "clusters_applications_helm_id",
    "stage_name": "configure",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "container_scanning",
    "source_cte_name": "container_scanning_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "protect",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "dast",
    "source_cte_name": "dast_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "dependency_scanning",
    "source_cte_name": "dependency_scanning_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "deployments",
    "source_table_name": "gitlab_dotcom_deployments",
    "user_column_name": "user_id",
    "key_to_parent_project": "project_id",
    "primary_key": "deployment_id",
    "stage_name": "release",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "environments",
    "source_table_name": "gitlab_dotcom_environments",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "environment_id",
    "stage_name": "release",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "epics",
    "source_table_name": "gitlab_dotcom_epics",
    "user_column_name": "author_id",
    "key_to_parent_group": "group_id",
    "primary_key": "epic_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "labels",
    "source_table_name": "gitlab_dotcom_labels",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "label_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "license_scanning",
    "source_cte_name": "license_scanning_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "merge_requests",
    "source_table_name": "gitlab_dotcom_merge_requests",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "merge_request_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "milestones",
    "source_table_name": "gitlab_dotcom_milestones",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "milestone_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "packages",
    "source_table_name": "gitlab_dotcom_packages_packages",
    "user_column_name": "creator_id",
    "key_to_parent_project": "project_id",
    "primary_key": "packages_package_id",
    "stage_name": "package",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "project_auto_devops",
    "source_table_name": "gitlab_dotcom_project_auto_devops",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "project_auto_devops_id",
    "stage_name": "configure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "projects_container_registry_enabled",
    "source_cte_name": "projects_container_registry_enabled_source",
    "user_column_name": "creator_id",
    "key_to_parent_project": "project_id",
    "primary_key": "project_id",
    "stage_name": "package",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "projects_prometheus_active",
    "source_cte_name": "projects_prometheus_active_source",
    "user_column_name": "creator_id",
    "key_to_parent_project": "project_id",
    "primary_key": "project_id",
    "stage_name": "monitor",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "releases",
    "source_table_name": "gitlab_dotcom_releases",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "release_id",
    "stage_name": "release",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "requirements",
    "source_table_name": "gitlab_dotcom_requirements",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "requirement_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "sast",
    "source_cte_name": "sast_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "secret_detection",
    "source_cte_name": "secret_detection_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "secure_stage_ci_jobs",
    "source_table_name": "gitlab_dotcom_secure_stage_ci_jobs",
    "user_column_name": "ci_build_user_id",
    "key_to_parent_project": "ci_build_project_id",
    "primary_key": "ci_build_id",
    "stage_name": "secure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "services",
    "source_cte_name": "services_source",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "service_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "snippets",
    "source_table_name": "gitlab_dotcom_snippets",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "snippet_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "terraform_reports",
    "source_cte_name": "terraform_reports_source",
    "user_column_name": "NULL",
    "key_to_parent_project": "project_id",
    "primary_key": "ci_job_artifact_id",
    "stage_name": "configure",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "todos",
    "source_table_name": "gitlab_dotcom_todos",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "todo_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "users",
    "source_table_name": "gitlab_dotcom_users",
    "user_column_name": "user_id",
    "primary_key": "user_id",
    "stage_name": "manage",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "push_events",
    "source_cte_name": "push_events_source",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "event_id",
    "stage_name": "create",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "ci_pipelines",
    "source_table_name": "gitlab_dotcom_ci_pipelines",
    "user_column_name": "user_id",
    "key_to_parent_project": "project_id",
    "primary_key": "ci_pipeline_id",
    "stage_name": "verify",
    "is_representative_of_stage": "True"
  },
]
-%}


{{ simple_cte([
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespaces', 'gitlab_dotcom_namespaces_xf'),
    ('plans', 'gitlab_dotcom_plans'),
    ('projects', 'gitlab_dotcom_projects_xf'),
    ('blocked_users', 'gitlab_dotcom_users_blocked_xf'),
    ('user_details','gitlab_dotcom_users')
]) }}


/* Source CTEs Start Here */
, action_monthly_active_users_project_repo_source AS (

    SELECT *
    FROM  {{ ref('temp_gitlab_dotcom_events_filtered') }}
    WHERE target_type IS NULL
      AND event_action_type_id = 5
), action_monthly_active_users_design_management_source AS (

    SELECT *
    FROM  {{ ref('temp_gitlab_dotcom_events_filtered') }}
    WHERE target_type = 'DesignManagement::Design'
      AND event_action_type_id IN (1, 2)

), action_monthly_active_users_wiki_repo_source AS (

    SELECT *
    FROM  {{ ref('temp_gitlab_dotcom_events_filtered') }}
    WHERE target_type = 'WikiPage::Meta'
      AND event_action_type_id IN (1, 2)

), api_fuzzing_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type = 'api_fuzzing'

), container_scanning_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type = 'container_scanning'

), dast_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type = 'dast'

), dependency_scanning_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type = 'dependency_scanning'

), license_scanning_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type IN (
                                  'license_scanning',
                                  'license_management'
                                )

), projects_prometheus_active_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_projects_xf') }}
    WHERE ARRAY_CONTAINS('Integrations::Prometheus'::VARIANT, active_service_types)

), projects_container_registry_enabled_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_projects_xf') }}
    WHERE container_registry_enabled = True

), sast_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type = 'sast'

), secret_detection_jobs AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_secure_stage_ci_jobs') }}
    WHERE secure_ci_job_type = 'secret_detection'

), services_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_integrations') }}
    WHERE service_type != 'GitlabIssueTrackerService'

), successful_ci_pipelines_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_ci_pipelines') }}
    WHERE failure_reason IS NULL

), terraform_reports_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_ci_job_artifacts') }}
    WHERE file_type = 18

), push_events_source AS (

    SELECT *
    FROM {{ ref('temp_gitlab_dotcom_events_filtered') }}
    WHERE event_action_type = 'pushed'

)
/* End of Source CTEs */

{% for event_cte in event_ctes %}

, {{ event_cte.event_name }} AS (

    SELECT *,
      MD5({{ event_cte.primary_key }} || '-' || '{{ event_cte.event_name }}')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    {% if event_cte.source_table_name is defined %}
      FROM {{ ref(event_cte.source_table_name) }}
    {% else %}
      FROM {{ event_cte.source_cte_name }}
    {% endif %}
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    {% if is_incremental() %}

      AND created_at > (SELECT MAX(event_created_at) FROM {{this}} WHERE event_name = '{{ event_cte.event_name }}')

    {% endif %}

)

{% endfor -%}

, data AS (

{% for event_cte in event_ctes %}

    SELECT 
      event_primary_key,
      '{{ event_cte.event_name }}' AS event_name,
      {{ event_cte.user_column_name }} AS user_id,
      created_at AS event_created_at,
      {{ event_cte.is_representative_of_stage }}::BOOLEAN AS is_representative_of_stage,
      '{{ event_cte.stage_name }}' AS stage_name,
      {% if event_cte.key_to_parent_project is defined -%}

      {{ event_cte.key_to_parent_project }} 
 
      {%- elif event_cte.key_to_parent_group is defined -%}

      {{ event_cte.key_to_parent_group }} 
      
      {%- else -%}
      NULL 
      {%- endif %}::NUMBER AS parent_id,
      {% if event_cte.key_to_parent_project is defined -%}
        'project'
       
      {%- elif event_cte.key_to_parent_group is defined -%}
        'group'
  
      {%- else -%}
        NULL     
      {%- endif %} AS parent_type
    FROM {{ event_cte.event_name }}                                                                              

    {% if not loop.last -%}
    UNION ALL
    {%- endif -%}
    {% endfor -%}

),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < {{ coalesce_to_infinity("TO_DATE(gitlab_subscriptions.valid_to)") }}
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE {{ filter_out_blocked_users('data' , 'user_id') }}
      


)
, final AS (
    SELECT
      joins.*,
      user_details.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN user_details
      ON joins.user_id = user_details.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final37:T62a,This table aggregates but does not manipulate a subset of columns from the pipeline related gitlab_dotcom database tables. These tables are populated directly from gitlab-dot-com variables. The calculated columns are `stage_name` and `event_name`.

This table was split out from `gitlab_dotcom_usage_data_events` in order to allow the model to complete in a reasonable time.

This data is associated to the top-most namespace/project level, not necessarily the level at which the event occurred.

The goal is to be able to reproduce the same usage dataset as the one sent weekly by self-managed instances to the version app.

Data Team notes:

The table normalizes all the gitlab_dotcom tables to always extract the same subset of column:
* namespace_id, 
* namespace_created_at,
* project_created_at,
* event_created_at

Currently, the following tables are included in the model:

* gitlab_dotcom_boards
* gitlab_dotcom_ci_builds
* gitlab_dotcom_ci_job_artifacts
* gitlab_dotcom_ci_pipeline_schedules
* gitlab_dotcom_ci_pipelines
* gitlab_dotcom_ci_stages
* gitlab_dotcom_ci_triggers
* gitlab_dotcom_clusters_applications_helm_xf
* gitlab_dotcom_deployments
* gitlab_dotcom_environments
* gitlab_dotcom_epics
* gitlab_dotcom_events
* gitlab_dotcom_labels
* gitlab_dotcom_merge_requests
* gitlab_dotcom_milestones
* gitlab_dotcom_packages_packages
* gitlab_dotcom_project_auto_devops
* gitlab_dotcom_projects_xf
* gitlab_dotcom_releases
* gitlab_dotcom_requirements
* gitlab_dotcom_secure_stage_ci_jobs
* gitlab_dotcom_integrations
* gitlab_dotcom_snippets
* gitlab_dotcom_todos38:T91d9,



/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

WITH gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespaces AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf

), plans AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_plans

), projects AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), blocked_users AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_users_blocked_xf

), user_details AS (

    SELECT * 
    FROM "PREP".sensitive.gitlab_dotcom_users

)


/* Source CTEs Start Here */
, action_monthly_active_users_project_repo_source AS (

    SELECT *
    FROM  "PROD".legacy.temp_gitlab_dotcom_events_filtered
    WHERE target_type IS NULL
      AND event_action_type_id = 5
), action_monthly_active_users_design_management_source AS (

    SELECT *
    FROM  "PROD".legacy.temp_gitlab_dotcom_events_filtered
    WHERE target_type = 'DesignManagement::Design'
      AND event_action_type_id IN (1, 2)

), action_monthly_active_users_wiki_repo_source AS (

    SELECT *
    FROM  "PROD".legacy.temp_gitlab_dotcom_events_filtered
    WHERE target_type = 'WikiPage::Meta'
      AND event_action_type_id IN (1, 2)

), api_fuzzing_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type = 'api_fuzzing'

), container_scanning_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type = 'container_scanning'

), dast_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type = 'dast'

), dependency_scanning_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type = 'dependency_scanning'

), license_scanning_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type IN (
                                  'license_scanning',
                                  'license_management'
                                )

), projects_prometheus_active_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_projects_xf
    WHERE ARRAY_CONTAINS('Integrations::Prometheus'::VARIANT, active_service_types)

), projects_container_registry_enabled_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_projects_xf
    WHERE container_registry_enabled = True

), sast_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type = 'sast'

), secret_detection_jobs AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    WHERE secure_ci_job_type = 'secret_detection'

), services_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_integrations
    WHERE service_type != 'GitlabIssueTrackerService'

), successful_ci_pipelines_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_ci_pipelines
    WHERE failure_reason IS NULL

), terraform_reports_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_ci_job_artifacts
    WHERE file_type = 18

), push_events_source AS (

    SELECT *
    FROM "PROD".legacy.temp_gitlab_dotcom_events_filtered
    WHERE event_action_type = 'pushed'

)
/* End of Source CTEs */



, action_monthly_active_users_project_repo AS (

    SELECT *,
      MD5(event_id || '-' || 'action_monthly_active_users_project_repo')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM action_monthly_active_users_project_repo_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'action_monthly_active_users_project_repo')

    

)



, action_monthly_active_users_design_management AS (

    SELECT *,
      MD5(event_id || '-' || 'action_monthly_active_users_design_management')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM action_monthly_active_users_design_management_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'action_monthly_active_users_design_management')

    

)



, action_monthly_active_users_wiki_repo AS (

    SELECT *,
      MD5(event_id || '-' || 'action_monthly_active_users_wiki_repo')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM action_monthly_active_users_wiki_repo_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'action_monthly_active_users_wiki_repo')

    

)



, api_fuzzing AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'api_fuzzing')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM api_fuzzing_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'api_fuzzing')

    

)



, boards AS (

    SELECT *,
      MD5(board_id || '-' || 'boards')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_boards
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'boards')

    

)



, successful_ci_pipelines AS (

    SELECT *,
      MD5(ci_pipeline_id || '-' || 'successful_ci_pipelines')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM successful_ci_pipelines_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'successful_ci_pipelines')

    

)



, clusters_applications_helm AS (

    SELECT *,
      MD5(clusters_applications_helm_id || '-' || 'clusters_applications_helm')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_clusters_applications_helm_xf
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'clusters_applications_helm')

    

)



, container_scanning AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'container_scanning')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM container_scanning_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'container_scanning')

    

)



, dast AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'dast')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM dast_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'dast')

    

)



, dependency_scanning AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'dependency_scanning')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM dependency_scanning_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'dependency_scanning')

    

)



, deployments AS (

    SELECT *,
      MD5(deployment_id || '-' || 'deployments')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_deployments
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'deployments')

    

)



, environments AS (

    SELECT *,
      MD5(environment_id || '-' || 'environments')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_environments
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'environments')

    

)



, epics AS (

    SELECT *,
      MD5(epic_id || '-' || 'epics')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_epics
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'epics')

    

)



, labels AS (

    SELECT *,
      MD5(label_id || '-' || 'labels')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_labels
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'labels')

    

)



, license_scanning AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'license_scanning')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM license_scanning_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'license_scanning')

    

)



, merge_requests AS (

    SELECT *,
      MD5(merge_request_id || '-' || 'merge_requests')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_merge_requests
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'merge_requests')

    

)



, milestones AS (

    SELECT *,
      MD5(milestone_id || '-' || 'milestones')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_milestones
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'milestones')

    

)



, packages AS (

    SELECT *,
      MD5(packages_package_id || '-' || 'packages')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_packages_packages
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'packages')

    

)



, project_auto_devops AS (

    SELECT *,
      MD5(project_auto_devops_id || '-' || 'project_auto_devops')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_project_auto_devops
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'project_auto_devops')

    

)



, projects_container_registry_enabled AS (

    SELECT *,
      MD5(project_id || '-' || 'projects_container_registry_enabled')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM projects_container_registry_enabled_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'projects_container_registry_enabled')

    

)



, projects_prometheus_active AS (

    SELECT *,
      MD5(project_id || '-' || 'projects_prometheus_active')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM projects_prometheus_active_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'projects_prometheus_active')

    

)



, releases AS (

    SELECT *,
      MD5(release_id || '-' || 'releases')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_releases
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'releases')

    

)



, requirements AS (

    SELECT *,
      MD5(requirement_id || '-' || 'requirements')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_requirements
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'requirements')

    

)



, sast AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'sast')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM sast_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'sast')

    

)



, secret_detection AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'secret_detection')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM secret_detection_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'secret_detection')

    

)



, secure_stage_ci_jobs AS (

    SELECT *,
      MD5(ci_build_id || '-' || 'secure_stage_ci_jobs')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_secure_stage_ci_jobs
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'secure_stage_ci_jobs')

    

)



, services AS (

    SELECT *,
      MD5(service_id || '-' || 'services')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM services_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'services')

    

)



, snippets AS (

    SELECT *,
      MD5(snippet_id || '-' || 'snippets')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_snippets
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'snippets')

    

)



, terraform_reports AS (

    SELECT *,
      MD5(ci_job_artifact_id || '-' || 'terraform_reports')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM terraform_reports_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'terraform_reports')

    

)



, todos AS (

    SELECT *,
      MD5(todo_id || '-' || 'todos')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_todos
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'todos')

    

)



, users AS (

    SELECT *,
      MD5(user_id || '-' || 'users')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_users
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'users')

    

)



, push_events AS (

    SELECT *,
      MD5(event_id || '-' || 'push_events')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM push_events_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'push_events')

    

)



, ci_pipelines AS (

    SELECT *,
      MD5(ci_pipeline_id || '-' || 'ci_pipelines')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_ci_pipelines
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_pipelines WHERE event_name = 'ci_pipelines')

    

)

, data AS (



    SELECT 
      event_primary_key,
      'action_monthly_active_users_project_repo' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM action_monthly_active_users_project_repo                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'action_monthly_active_users_design_management' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM action_monthly_active_users_design_management                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'action_monthly_active_users_wiki_repo' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM action_monthly_active_users_wiki_repo                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'api_fuzzing' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM api_fuzzing                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'boards' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM boards                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'successful_ci_pipelines' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'verify' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM successful_ci_pipelines                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'clusters_applications_helm' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'configure' AS stage_name,
      cluster_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM clusters_applications_helm                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'container_scanning' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'protect' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM container_scanning                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'dast' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM dast                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'dependency_scanning' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM dependency_scanning                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'deployments' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'release' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM deployments                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'environments' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'release' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM environments                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'epics' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      group_id::NUMBER AS parent_id,
      'group' AS parent_type
    FROM epics                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'labels' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM labels                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'license_scanning' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM license_scanning                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'merge_requests' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM merge_requests                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'milestones' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM milestones                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'packages' AS event_name,
      creator_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'package' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM packages                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'project_auto_devops' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'configure' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM project_auto_devops                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'projects_container_registry_enabled' AS event_name,
      creator_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'package' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM projects_container_registry_enabled                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'projects_prometheus_active' AS event_name,
      creator_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'monitor' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM projects_prometheus_active                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'releases' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'release' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM releases                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'requirements' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM requirements                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'sast' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM sast                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'secret_detection' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM secret_detection                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'secure_stage_ci_jobs' AS event_name,
      ci_build_user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'secure' AS stage_name,
      ci_build_project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM secure_stage_ci_jobs                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'services' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM services                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'snippets' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM snippets                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'terraform_reports' AS event_name,
      NULL AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'configure' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM terraform_reports                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'todos' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM todos                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'users' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'manage' AS stage_name,
      NULL::NUMBER AS parent_id,
      NULL AS parent_type
    FROM users                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'push_events' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'create' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM push_events                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'ci_pipelines' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'verify' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM ci_pipelines                                                                              

    ),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < COALESCE( TO_DATE(gitlab_subscriptions.valid_to), '9999-12-31'::TIMESTAMP)
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = data.user_id

    )
      


)
, final AS (
    SELECT
      joins.*,
      user_details.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN user_details
      ON joins.user_id = user_details.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final39:Tc59,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (

    SELECT *
    FROM {{ ref('customers_db_customers') }}

), trials AS  (

    SELECT *
    FROM {{ ref('customers_db_trials') }}

), users AS (

    SELECT
      {{ dbt_utils.star(from=ref('gitlab_dotcom_users')) }},
      created_at AS user_created_at,
      updated_at AS user_updated_at
    FROM {{ ref('gitlab_dotcom_users') }}

), highest_paid_subscription_plan AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_highest_paid_subscription_plan') }}

),   customers_with_trial AS (

    SELECT
      customers.customer_provider_user_id                         AS user_id,
      MIN(customers.customer_id)                                  AS first_customer_id,
      MIN(customers.customer_created_at)                          AS first_customer_created_at,
      ARRAY_AGG(customers.customer_id)
          WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
      MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
      MIN(trial_start_date)                                       AS has_started_trial_at
    FROM customers
      LEFT JOIN trials
        ON customers.customer_id = trials.customer_id
    WHERE customers.customer_provider = 'gitlab'
    GROUP BY 1

),   joined AS (
    SELECT
      users.*,
      TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
      TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
      CASE
        WHEN account_age <= 1 THEN '1 - 1 day or less'
        WHEN account_age <= 7 THEN '2 - 2 to 7 days'
        WHEN account_age <= 14 THEN '3 - 8 to 14 days'
        WHEN account_age <= 30 THEN '4 - 15 to 30 days'
        WHEN account_age <= 60 THEN '5 - 31 to 60 days'
        WHEN account_age > 60 THEN '6 - Over 60 days'
      END                                                                           AS account_age_cohort,

      highest_paid_subscription_plan.highest_paid_subscription_plan_id,
      highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
      highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
      highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

      IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
      customers_with_trial.first_customer_created_at,
      customers_with_trial.first_customer_id,
      customers_with_trial.customer_id_list,
      customers_with_trial.has_started_trial,
      customers_with_trial.has_started_trial_at

    FROM users
      LEFT JOIN highest_paid_subscription_plan
        ON users.user_id = highest_paid_subscription_plan.user_id
      LEFT JOIN customers_with_trial
        ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
    WHERE {{ filter_out_active_users('users', 'user_id') }}

)

SELECT *
FROM joined3a:T912,This model extends the base model `gitlab_dotcom_users` and adds several other dimensions as well a filter out active users

### Age cohorts
This model adds account age cohorts to the users table, the defined cohorts are:

1-  1 day or less  
2-  2 to 7 days  
3-  8 to 14 days  
4-  15 to 30 days  
5-  31 to 60 days  
6-  Over 60 days  

The CTE does this by comparing the time of the dbt run with `created_at` in the users table.

### Highest inherited subscription

This model documents the highest subscription a user inherits from. Rules around inheritance are a bit complicated, as stated in the handbook [here](https://about.gitlab.com/handbook/marketing/product-marketing/enablement/dotcom-subscriptions/#common-misconceptions),

>>>
Reality: GitLab.com subscriptions are scoped to a namespace, and individual users could participate in many groups with different subscription types. For example, they might have personal projects on a Free subscription type, participate in an open-source project that has Gold features (because it's public) while their company has a Silver subscription.
>>>

A user inherits from a subscription when:
* They are a member of a group/sub-group that has a paid subscription.
* They are a member of a project which belongs to a group with a paid subscription
* They have a personal subscription attached to their personal namespace.

Some gotchas:
* If a user is part of a public open-source (or edu) group/project, they will not inherit from the Gold subscription of the group/project.
* If a user is part of a project created by another user's personal namespace, they won't inherit from the owner's namespace subscription.

We then know for each user: what's the highest plan they inherit from and where they inherit it from.

If a user inherits from 2+ subscriptions with the same plan, we choose one subscription over the other based on the inheritance source: First, user, then groups, then projects.

### Subscription Portal (customers.gitlab.com) data 

This model surfaces also if a user has created an account or not in the subscription portal by joining with the `customers_db_customers` table. It also informs us if a specific user has already started a trial and if so when. 

### Misc

A `days_active` column is added by comparing `created_at` with `last_activity_on`3b:T1c4a,

WITH  __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
),customers AS (

    SELECT *
    FROM "PROD".legacy.customers_db_customers

), trials AS  (

    SELECT *
    FROM "PROD".legacy.customers_db_trials

), users AS (

    SELECT
      "USER_ID",
  "REMEMBER_CREATED_AT",
  "SIGN_IN_COUNT",
  "CURRENT_SIGN_IN_AT",
  "LAST_SIGN_IN_AT",
  "CREATED_AT",
  "UPDATED_AT",
  "IS_ADMIN",
  "PROJECTS_LIMIT",
  "FAILED_ATTEMPTS",
  "LOCKED_AT",
  "USER_LOCKED",
  "HAS_CREATE_GROUP_PERMISSIONS",
  "HAS_CREATE_TEAM_PERMISSIONS",
  "STATE",
  "COLOR_SCHEME_ID",
  "PASSWORD_EXPIRES_AT",
  "CREATED_BY_ID",
  "LAST_CREDENTIAL_CHECK_AT",
  "HAS_AVATAR",
  "CONFIRMED_AT",
  "CONFIRMATION_SENT_AT",
  "HAS_HIDE_NO_SSH_KEY_ENABLED",
  "ADMIN_EMAIL_UNSUBSCRIBED_AT",
  "NOTIFICATION_EMAIL",
  "NOTIFICATION_EMAIL_DOMAIN",
  "HAS_HIDE_NO_PASSWORD_ENABLED",
  "IS_PASSWORD_AUTOMATICALLY_SET",
  "LOCATION",
  "EMAIL",
  "EMAIL_DOMAIN",
  "PUBLIC_EMAIL",
  "PUBLIC_EMAIL_DOMAIN",
  "COMMIT_EMAIL",
  "COMMIT_EMAIL_DOMAIN",
  "IS_EMAIL_OPTED_IN",
  "EMAIL_OPTED_IN_SOURCE_ID",
  "EMAIL_OPTED_IN_AT",
  "DASHBOARD",
  "PROJECT_VIEW",
  "CONSUMED_TIMESTEP",
  "LAYOUT",
  "HAS_HIDE_PROJECT_LIMIT_ENABLED",
  "OTP_GRACE_PERIOD_STARTED_AT",
  "IS_EXTERNAL_USER",
  "ORGANIZATION",
  "AUDITOR",
  "DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP",
  "TWO_FACTOR_GRACE_PERIOD",
  "LAST_ACTIVITY_ON",
  "IS_NOTIFIED_OF_OWN_ACTIVITY",
  "PREFERRED_LANGUAGE",
  "THEME_ID",
  "ACCEPTED_TERM_ID",
  "IS_PRIVATE_PROFILE",
  "ROADMAP_LAYOUT",
  "INCLUDE_PRIVATE_CONTRIBUTIONS",
  "GROUP_VIEW",
  "MANAGING_GROUP_ID",
  "ROLE_ID",
  "ROLE",
  "USER_NAME",
  "FIRST_NAME",
  "LAST_NAME",
  "USERS_NAME",
  "USER_TYPE",
  "IT_JOB_TITLE_HIERARCHY",
      created_at AS user_created_at,
      updated_at AS user_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_users

), highest_paid_subscription_plan AS (

    SELECT *
    FROM __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan

),   customers_with_trial AS (

    SELECT
      customers.customer_provider_user_id                         AS user_id,
      MIN(customers.customer_id)                                  AS first_customer_id,
      MIN(customers.customer_created_at)                          AS first_customer_created_at,
      ARRAY_AGG(customers.customer_id)
          WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
      MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
      MIN(trial_start_date)                                       AS has_started_trial_at
    FROM customers
      LEFT JOIN trials
        ON customers.customer_id = trials.customer_id
    WHERE customers.customer_provider = 'gitlab'
    GROUP BY 1

),   joined AS (
    SELECT
      users.*,
      TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
      TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
      CASE
        WHEN account_age <= 1 THEN '1 - 1 day or less'
        WHEN account_age <= 7 THEN '2 - 2 to 7 days'
        WHEN account_age <= 14 THEN '3 - 8 to 14 days'
        WHEN account_age <= 30 THEN '4 - 15 to 30 days'
        WHEN account_age <= 60 THEN '5 - 31 to 60 days'
        WHEN account_age > 60 THEN '6 - Over 60 days'
      END                                                                           AS account_age_cohort,

      highest_paid_subscription_plan.highest_paid_subscription_plan_id,
      highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
      highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
      highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
      highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

      IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
      customers_with_trial.first_customer_created_at,
      customers_with_trial.first_customer_id,
      customers_with_trial.customer_id_list,
      customers_with_trial.has_started_trial,
      customers_with_trial.has_started_trial_at

    FROM users
      LEFT JOIN highest_paid_subscription_plan
        ON users.user_id = highest_paid_subscription_plan.user_id
      LEFT JOIN customers_with_trial
        ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'active' 
          AND users_source.user_id = users.user_id

    )

)

SELECT *
FROM joined3c:T9e5, __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
)3d:T1c47,WITH members AS ( -- direct group and project members

    SELECT *
    FROM {{ ref('gitlab_dotcom_members') }} members
    WHERE is_currently_valid = TRUE
      AND user_id IS NOT NULL
      AND {{ filter_out_blocked_users('members', 'user_id') }}
    QUALIFY RANK() OVER (
        PARTITION BY 
          user_id, 
          source_id, 
          member_source_type 
        ORDER BY 
          access_level DESC, 
          invite_created_at DESC
        ) = 1
    
), namespaces AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespaces') }}

), namespace_lineage AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_namespace_lineage') }}

), users AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_users') }}

), projects AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_projects') }}

), group_group_links AS ( -- groups invited to groups

    SELECT *
    FROM {{ ref('gitlab_dotcom_group_group_links') }}
    WHERE is_currently_valid = TRUE

), project_group_links AS ( -- groups invited to projects

    SELECT *
    FROM {{ ref('gitlab_dotcom_project_group_links') }}
    WHERE is_currently_valid = TRUE

), group_group_links_lineage AS (

    SELECT
      group_group_links.shared_group_id, -- the "host" group
      group_group_links.group_group_link_id,
      group_group_links.shared_with_group_id, -- the "guest" group
      group_group_links.group_access,
      namespace_lineage.upstream_lineage AS base_and_ancestors -- all parent namespaces for the "guest" group
    FROM group_group_links
    INNER JOIN namespace_lineage
      ON group_group_links.shared_with_group_id = namespace_lineage.namespace_id

), project_group_links_lineage AS (

    SELECT
      projects.namespace_id              AS shared_group_id, -- the "host" group the project directly belongs to
      project_group_links.project_group_link_id,
      project_group_links.group_id       AS shared_with_group_id, -- the "guest" group
      project_group_links.group_access,
      namespace_lineage.upstream_lineage AS base_and_ancestors -- all parent namespaces for the "guest" group
    FROM project_group_links
    INNER JOIN projects
      ON project_group_links.project_id = projects.project_id
    INNER JOIN namespace_lineage
      ON project_group_links.group_id = namespace_lineage.namespace_id

), group_group_links_flattened AS (

    SELECT
      group_group_links_lineage.*,
      f.value AS shared_with_group_lineage -- creates one row for each "guest" group and its parent namespaces
    FROM group_group_links_lineage,
      TABLE(FLATTEN(group_group_links_lineage.base_and_ancestors)) f

), project_group_links_flattened AS (

    SELECT
      project_group_links_lineage.*,
      f.value AS shared_with_group_lineage -- creates one row for each "guest" group and its parent namespaces
    FROM project_group_links_lineage,
      TABLE(FLATTEN(project_group_links_lineage.base_and_ancestors)) f

), group_members AS (

    SELECT *
    FROM members
    WHERE member_source_type = 'Namespace'

), project_members AS (

    SELECT
      projects.namespace_id,
      members.*
    FROM members
    INNER JOIN projects
      ON members.source_id = projects.project_id
    WHERE member_source_type = 'Project'

), group_group_link_members AS (

    SELECT *
    FROM group_group_links_flattened
    INNER JOIN group_members
      ON group_group_links_flattened.shared_with_group_lineage = group_members.source_id

), project_group_link_members AS (

    SELECT *
    FROM project_group_links_flattened
    INNER JOIN group_members
      ON project_group_links_flattened.shared_with_group_lineage = group_members.source_id

), individual_namespaces AS (

    SELECT *
    FROM namespaces
    WHERE namespace_type = 'User'

), unioned AS (

    SELECT
      source_id          AS namespace_id,
      'group_membership' AS membership_source_type,
      source_id          AS membership_source_id,
      access_level,
      NULL               AS group_access, -- direct member of group
      requested_at,
      user_id
    FROM group_members
  
    UNION
  
    SELECT
      namespace_id,
      'project_membership' AS membership_source_type,
      source_id            AS membership_source_id,
      access_level,
      NULL                 AS group_access, -- direct member of project
      requested_at,
      user_id
    FROM project_members
  
    UNION
  
    SELECT
      shared_group_id     AS namespace_id,
      IFF(
          shared_with_group_lineage = shared_with_group_id, 
          'group_group_link', 
          'group_group_link_ancestor'
      )                   AS membership_source_type, -- differentiate "guest" group from its parent namespaces
      group_group_link_id AS membership_source_id,
      access_level,
      group_access,
      requested_at,
      user_id
    FROM group_group_link_members
  
    UNION
  
    SELECT
      shared_group_id       AS namespace_id,
      IFF(
          shared_with_group_lineage = shared_with_group_id, 
          'project_group_link', 
          'project_group_link_ancestor'
      )                     AS membership_source_type, -- differentiate "guest" group from its parent namespaces
      project_group_link_id AS membership_source_id,
      access_level,
      group_access,
      requested_at,
      user_id
    FROM project_group_link_members
    
    UNION
  
    SELECT
      namespace_id,
      'individual_namespace' AS membership_source_type,
      namespace_id           AS membership_source_id,
      50                     AS access_level, -- implied by ownership
      NULL                   AS group_access, -- implied by ownership
      NULL                   AS requested_at, -- implied by ownership
      owner_id               AS user_id
    FROM individual_namespaces
  
), joined AS (

    SELECT
      namespace_lineage.ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id,
      namespace_lineage.ultimate_parent_plan_title,
      unioned.*,
      users.state AS user_state,
      users.user_type
    FROM unioned
    INNER JOIN namespace_lineage
      ON unioned.namespace_id = namespace_lineage.namespace_id
    INNER JOIN users
      ON unioned.user_id = users.user_id

), final AS (

    SELECT
      ultimate_parent_id,
      ultimate_parent_plan_id,
      ultimate_parent_plan_title,
      namespace_id,
      membership_source_type,
      membership_source_id,
      access_level,
      group_access,
      requested_at,
      user_id,
      user_state,
      user_type,
      IFF(access_level = 10 OR group_access = 10, TRUE, FALSE) AS is_guest, -- exclude any user with guest access
      IFF(
          user_state = 'active' AND (user_type != 6 OR user_type IS NULL) AND requested_at IS NULL, 
          TRUE, FALSE -- must be active, not a project bot, and not awaiting access
      )                                                        AS is_active,
      IFF(
          (ultimate_parent_plan_title = 'gold' AND is_active = TRUE AND is_guest = FALSE)
          OR (ultimate_parent_plan_title != 'gold' AND is_active = TRUE),
          TRUE, FALSE -- exclude guests if namespace has gold plan
      )                                                        AS is_billable
    FROM joined  
      
)

SELECT *
FROM final3e:T665,This model unions together all of the other models that represent a user having (full or partial) access to a namespace, AKA "membership". 

There are 5 general ways that a user can have access to a group G:
* Be a **group member** of group G.
* Be a **group member** of G2, where G2 is a descendant (subgroup) of group G.
* Be a **project member** of P, where P is owned by G or one of G's descendants.
* Be a group member of X or a parent group of X, where X is invited to a project underneath G via [project group links](https://docs.gitlab.com/ee/user/group/#sharing-a-project-with-a-group).
* Be a group member of Y or a parent group of Y, where Y is invited to G or one of G's descendants via [group group links](https://docs.gitlab.com/ee/user/group/#sharing-a-group-with-another-group).

An example of these relationships is shown in this diagram:

<div style="width: 720px; height: 480px; margin: 10px; position: relative;"><iframe allowfullscreen frameborder="0" style="width:720px; height:480px" src="https://app.lucidchart.com/documents/embeddedchart/9f529269-3e32-4343-9713-8eb311df7258" id="WRFbB73aKeB3"></iframe></div>

Additionally, this model calculates the field `is_billable` - i.e. if a member should be counted toward the seat count for a subscription (note: this also applies to namespaces without a subscription for the convenience of determining seats in use). To determine the number of seats in use for a given namespace, a simple query such as the following will suffice: 

```
SELECT COUNT(DISTINCT user_id)
FROM legacy.gitlab_dotcom_memberships
WHERE is_billable = TRUE
  AND ultimate_parent_id = 123456
```3f:T1cf5,WITH members AS ( -- direct group and project members

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_members members
    WHERE is_currently_valid = TRUE
      AND user_id IS NOT NULL
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )
    QUALIFY RANK() OVER (
        PARTITION BY 
          user_id, 
          source_id, 
          member_source_type 
        ORDER BY 
          access_level DESC, 
          invite_created_at DESC
        ) = 1
    
), namespaces AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_namespaces

), namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

), users AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_users

), projects AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_projects

), group_group_links AS ( -- groups invited to groups

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_group_group_links
    WHERE is_currently_valid = TRUE

), project_group_links AS ( -- groups invited to projects

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_project_group_links
    WHERE is_currently_valid = TRUE

), group_group_links_lineage AS (

    SELECT
      group_group_links.shared_group_id, -- the "host" group
      group_group_links.group_group_link_id,
      group_group_links.shared_with_group_id, -- the "guest" group
      group_group_links.group_access,
      namespace_lineage.upstream_lineage AS base_and_ancestors -- all parent namespaces for the "guest" group
    FROM group_group_links
    INNER JOIN namespace_lineage
      ON group_group_links.shared_with_group_id = namespace_lineage.namespace_id

), project_group_links_lineage AS (

    SELECT
      projects.namespace_id              AS shared_group_id, -- the "host" group the project directly belongs to
      project_group_links.project_group_link_id,
      project_group_links.group_id       AS shared_with_group_id, -- the "guest" group
      project_group_links.group_access,
      namespace_lineage.upstream_lineage AS base_and_ancestors -- all parent namespaces for the "guest" group
    FROM project_group_links
    INNER JOIN projects
      ON project_group_links.project_id = projects.project_id
    INNER JOIN namespace_lineage
      ON project_group_links.group_id = namespace_lineage.namespace_id

), group_group_links_flattened AS (

    SELECT
      group_group_links_lineage.*,
      f.value AS shared_with_group_lineage -- creates one row for each "guest" group and its parent namespaces
    FROM group_group_links_lineage,
      TABLE(FLATTEN(group_group_links_lineage.base_and_ancestors)) f

), project_group_links_flattened AS (

    SELECT
      project_group_links_lineage.*,
      f.value AS shared_with_group_lineage -- creates one row for each "guest" group and its parent namespaces
    FROM project_group_links_lineage,
      TABLE(FLATTEN(project_group_links_lineage.base_and_ancestors)) f

), group_members AS (

    SELECT *
    FROM members
    WHERE member_source_type = 'Namespace'

), project_members AS (

    SELECT
      projects.namespace_id,
      members.*
    FROM members
    INNER JOIN projects
      ON members.source_id = projects.project_id
    WHERE member_source_type = 'Project'

), group_group_link_members AS (

    SELECT *
    FROM group_group_links_flattened
    INNER JOIN group_members
      ON group_group_links_flattened.shared_with_group_lineage = group_members.source_id

), project_group_link_members AS (

    SELECT *
    FROM project_group_links_flattened
    INNER JOIN group_members
      ON project_group_links_flattened.shared_with_group_lineage = group_members.source_id

), individual_namespaces AS (

    SELECT *
    FROM namespaces
    WHERE namespace_type = 'User'

), unioned AS (

    SELECT
      source_id          AS namespace_id,
      'group_membership' AS membership_source_type,
      source_id          AS membership_source_id,
      access_level,
      NULL               AS group_access, -- direct member of group
      requested_at,
      user_id
    FROM group_members
  
    UNION
  
    SELECT
      namespace_id,
      'project_membership' AS membership_source_type,
      source_id            AS membership_source_id,
      access_level,
      NULL                 AS group_access, -- direct member of project
      requested_at,
      user_id
    FROM project_members
  
    UNION
  
    SELECT
      shared_group_id     AS namespace_id,
      IFF(
          shared_with_group_lineage = shared_with_group_id, 
          'group_group_link', 
          'group_group_link_ancestor'
      )                   AS membership_source_type, -- differentiate "guest" group from its parent namespaces
      group_group_link_id AS membership_source_id,
      access_level,
      group_access,
      requested_at,
      user_id
    FROM group_group_link_members
  
    UNION
  
    SELECT
      shared_group_id       AS namespace_id,
      IFF(
          shared_with_group_lineage = shared_with_group_id, 
          'project_group_link', 
          'project_group_link_ancestor'
      )                     AS membership_source_type, -- differentiate "guest" group from its parent namespaces
      project_group_link_id AS membership_source_id,
      access_level,
      group_access,
      requested_at,
      user_id
    FROM project_group_link_members
    
    UNION
  
    SELECT
      namespace_id,
      'individual_namespace' AS membership_source_type,
      namespace_id           AS membership_source_id,
      50                     AS access_level, -- implied by ownership
      NULL                   AS group_access, -- implied by ownership
      NULL                   AS requested_at, -- implied by ownership
      owner_id               AS user_id
    FROM individual_namespaces
  
), joined AS (

    SELECT
      namespace_lineage.ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id,
      namespace_lineage.ultimate_parent_plan_title,
      unioned.*,
      users.state AS user_state,
      users.user_type
    FROM unioned
    INNER JOIN namespace_lineage
      ON unioned.namespace_id = namespace_lineage.namespace_id
    INNER JOIN users
      ON unioned.user_id = users.user_id

), final AS (

    SELECT
      ultimate_parent_id,
      ultimate_parent_plan_id,
      ultimate_parent_plan_title,
      namespace_id,
      membership_source_type,
      membership_source_id,
      access_level,
      group_access,
      requested_at,
      user_id,
      user_state,
      user_type,
      IFF(access_level = 10 OR group_access = 10, TRUE, FALSE) AS is_guest, -- exclude any user with guest access
      IFF(
          user_state = 'active' AND (user_type != 6 OR user_type IS NULL) AND requested_at IS NULL, 
          TRUE, FALSE -- must be active, not a project bot, and not awaiting access
      )                                                        AS is_active,
      IFF(
          (ultimate_parent_plan_title = 'gold' AND is_active = TRUE AND is_guest = FALSE)
          OR (ultimate_parent_plan_title != 'gold' AND is_active = TRUE),
          TRUE, FALSE -- exclude guests if namespace has gold plan
      )                                                        AS is_billable
    FROM joined  
      
)

SELECT *
FROM final40:T490,{{ config({
    "schema": "legacy"
    })
}}

WITH users AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_users') }} users
  WHERE {{ filter_out_blocked_users('users', 'user_id') }}

), cohorting AS (

  SELECT user_id,
         created_at::DATE                                               AS cohort_date,
         TIMESTAMPDIFF(MONTHS, created_at,last_activity_on)         AS period
  FROM users

), joined AS (

  SELECT DATE_TRUNC('month', cohorting.cohort_date)                     AS cohort_date,
         cohorting.period,
         COUNT(DISTINCT cohorting.user_id)                              AS active_in_period_distinct_count,
         COUNT(DISTINCT base_cohort.user_id)                            AS base_cohort_count,
         active_in_period_distinct_count/base_cohort_count :: FLOAT     AS retention

  FROM cohorting
  JOIN cohorting AS base_cohort
    ON cohorting.cohort_date = base_cohort.cohort_date
  AND base_cohort.period = 0
  WHERE cohorting.period IS NOT NULL
    AND cohorting.period >= 0
  GROUP BY 1, 2
  ORDER BY cohort_date DESC

)

SELECT
  md5(cohort_date || period)                                       AS cohort_key,
  *
FROM joined41:T506,

WITH users AS (

  SELECT *
  FROM "PREP".sensitive.gitlab_dotcom_users users
  WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = users.user_id

    )

), cohorting AS (

  SELECT user_id,
         created_at::DATE                                               AS cohort_date,
         TIMESTAMPDIFF(MONTHS, created_at,last_activity_on)         AS period
  FROM users

), joined AS (

  SELECT DATE_TRUNC('month', cohorting.cohort_date)                     AS cohort_date,
         cohorting.period,
         COUNT(DISTINCT cohorting.user_id)                              AS active_in_period_distinct_count,
         COUNT(DISTINCT base_cohort.user_id)                            AS base_cohort_count,
         active_in_period_distinct_count/base_cohort_count :: FLOAT     AS retention

  FROM cohorting
  JOIN cohorting AS base_cohort
    ON cohorting.cohort_date = base_cohort.cohort_date
  AND base_cohort.period = 0
  WHERE cohorting.period IS NOT NULL
    AND cohorting.period >= 0
  GROUP BY 1, 2
  ORDER BY cohort_date DESC

)

SELECT
  md5(cohort_date || period)                                       AS cohort_key,
  *
FROM joined42:T20e2,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
        "materialized": "incremental",
        "unique_key": "event_primary_key",
        "automatic_clustering": true
    })
}}

/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

{%- set event_ctes = [
  {
    "event_name": "incident_labeled_issues",
    "source_cte_name": "incident_labeled_issues_source",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "issue_id",
    "stage_name": "monitor",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "issues",
    "source_table_name": "gitlab_dotcom_issues",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "issue_id",
    "stage_name": "plan",
    "is_representative_of_stage": "True"
  },
  {
    "event_name": "issue_resource_label_events",
    "source_cte_name": "issue_resource_label_events_source",
    "user_column_name": "user_id",
    "key_to_parent_project": "namespace_id",
    "primary_key": "resource_label_event_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "issue_resource_weight_events",
    "source_table_name": "gitlab_dotcom_resource_weight_events_xf",
    "user_column_name": "user_id",
    "key_to_parent_project": "project_id",
    "primary_key": "resource_weight_event_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "issue_resource_milestone_events",
    "source_cte_name": "issue_resource_milestone_events_source",
    "user_column_name": "user_id",
    "key_to_parent_project": "project_id",
    "primary_key": "resource_milestone_event_id",
    "stage_name": "plan",
    "is_representative_of_stage": "False"
  },
  {
    "event_name": "events",
    "source_table_name": "gitlab_dotcom_events",
    "user_column_name": "author_id",
    "key_to_parent_project": "project_id",
    "primary_key": "event_id",
    "stage_name": "manage",
    "is_representative_of_stage": "False"
  },
]
-%}


{{ simple_cte([
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespaces', 'gitlab_dotcom_namespaces_xf'),
    ('plans', 'gitlab_dotcom_plans'),
    ('projects', 'gitlab_dotcom_projects_xf'),
    ('users', 'gitlab_dotcom_users'),
    ('blocked_users', 'gitlab_dotcom_users_blocked_xf')
]) }}


/* Source CTEs Start Here */
, incident_labeled_issues_source AS (

    SELECT
      *,
      issue_created_at AS created_at
    FROM {{ ref('gitlab_dotcom_issues_xf') }}
    WHERE ARRAY_CONTAINS('incident'::variant, labels)

), issue_resource_label_events_source AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_resource_label_events_xf')}}
    WHERE issue_id IS NOT NULL

), issue_resource_milestone_events_source AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_resource_milestone_events_xf')}}
    WHERE issue_id IS NOT NULL

)
/* End of Source CTEs */

{% for event_cte in event_ctes %}

, {{ event_cte.event_name }} AS (

    SELECT *,
      MD5({{ event_cte.primary_key }} || '-' || '{{ event_cte.event_name }}')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    {% if event_cte.source_table_name is defined %}
      FROM {{ ref(event_cte.source_table_name) }}
    {% else %}
      FROM {{ event_cte.source_cte_name }}
    {% endif %}
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    {% if is_incremental() %}

      AND created_at > (SELECT MAX(event_created_at) FROM {{this}} WHERE event_name = '{{ event_cte.event_name }}')

    {% endif %}

)

{% endfor -%}

, data AS (

{% for event_cte in event_ctes %}

    SELECT 
      event_primary_key,
      '{{ event_cte.event_name }}' AS event_name,
      {{ event_cte.user_column_name }} AS user_id,
      created_at AS event_created_at,
      {{ event_cte.is_representative_of_stage }}::BOOLEAN AS is_representative_of_stage,
      '{{ event_cte.stage_name }}' AS stage_name,
      {% if event_cte.key_to_parent_project is defined -%}

      {{ event_cte.key_to_parent_project }} 
 
      {%- elif event_cte.key_to_parent_group is defined -%}

      {{ event_cte.key_to_parent_group }} 
      
      {%- else -%}
      NULL 
      {%- endif %}::NUMBER AS parent_id,
      {% if event_cte.key_to_parent_project is defined -%}
        'project'
       
      {%- elif event_cte.key_to_parent_group is defined -%}
        'group'
  
      {%- else -%}
        NULL     
      {%- endif %} AS parent_type
    FROM {{ event_cte.event_name }}                                                                              

    {% if not loop.last -%}
    UNION ALL
    {%- endif -%}
    {% endfor -%}

),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < {{ coalesce_to_infinity("TO_DATE(gitlab_subscriptions.valid_to)") }}
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE {{ filter_out_blocked_users('data' , 'user_id') }}
      


)
, final AS (
    SELECT
      joins.*,
      users.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN users
      ON joins.user_id = users.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final43:T420,This table aggregates but does not manipulate a subset of columns from the issues related gitlab_dotcom database tables. These tables are populated directly from gitlab-dot-com variables. The calculated columns are `stage_name` and `event_name`.

This table was split out from `gitlab_dotcom_usage_data_events` in order to allow the model to complete in a reasonable time.

This data is associated to the top-most namespace/project level, not necessarily the level at which the event occurred.

The goal is to be able to reproduce the same usage dataset as the one sent weekly by self-managed instances to the version app.

Data Team notes:

The table normalizes all the gitlab_dotcom tables to always extract the same subset of column:
* namespace_id, 
* namespace_created_at,
* project_created_at,
* event_created_at

Currently, the following tables are included in the model:

* gitlab_dotcom_issues
* gitlab_dotcom_issues_xf
* gitlab_dotcom_resource_label_events_xf
* gitlab_dotcom_resource_milestone_events_xf
* gitlab_dotcom_resource_weight_events_xf44:T297d,



/*
  Each dict must have ALL of the following:
    * event_name
    * primary_key
    * stage_name": "create",
    * "is_representative_of_stage
    * primary_key"
  Must have ONE of the following:
    * source_cte_name OR source_table_name
    * key_to_parent_project OR key_to_group_project (NOT both, see how clusters_applications_helm is included twice for group and project.
*/

WITH gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespaces AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_namespaces_xf

), plans AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_plans

), projects AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), users AS (

    SELECT * 
    FROM "PREP".sensitive.gitlab_dotcom_users

), blocked_users AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_users_blocked_xf

)


/* Source CTEs Start Here */
, incident_labeled_issues_source AS (

    SELECT
      *,
      issue_created_at AS created_at
    FROM "PROD".legacy.gitlab_dotcom_issues_xf
    WHERE ARRAY_CONTAINS('incident'::variant, labels)

), issue_resource_label_events_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_resource_label_events_xf
    WHERE issue_id IS NOT NULL

), issue_resource_milestone_events_source AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_resource_milestone_events_xf
    WHERE issue_id IS NOT NULL

)
/* End of Source CTEs */



, incident_labeled_issues AS (

    SELECT *,
      MD5(issue_id || '-' || 'incident_labeled_issues')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM incident_labeled_issues_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_issues WHERE event_name = 'incident_labeled_issues')

    

)



, issues AS (

    SELECT *,
      MD5(issue_id || '-' || 'issues')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PREP".sensitive.gitlab_dotcom_issues
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_issues WHERE event_name = 'issues')

    

)



, issue_resource_label_events AS (

    SELECT *,
      MD5(resource_label_event_id || '-' || 'issue_resource_label_events')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM issue_resource_label_events_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_issues WHERE event_name = 'issue_resource_label_events')

    

)



, issue_resource_weight_events AS (

    SELECT *,
      MD5(resource_weight_event_id || '-' || 'issue_resource_weight_events')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_resource_weight_events_xf
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_issues WHERE event_name = 'issue_resource_weight_events')

    

)



, issue_resource_milestone_events AS (

    SELECT *,
      MD5(resource_milestone_event_id || '-' || 'issue_resource_milestone_events')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM issue_resource_milestone_events_source
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_issues WHERE event_name = 'issue_resource_milestone_events')

    

)



, events AS (

    SELECT *,
      MD5(event_id || '-' || 'events')   AS event_primary_key
    /* Check for source_table_name, else use source_cte_name. */
    
      FROM "PROD".legacy.gitlab_dotcom_events
    
    WHERE created_at IS NOT NULL
      AND created_at >= DATEADD(MONTH, -25, CURRENT_DATE)
      
    

      AND created_at > (SELECT MAX(event_created_at) FROM "PROD".legacy.gitlab_dotcom_usage_data_issues WHERE event_name = 'events')

    

)

, data AS (



    SELECT 
      event_primary_key,
      'incident_labeled_issues' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'monitor' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM incident_labeled_issues                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'issues' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      True::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM issues                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'issue_resource_label_events' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      namespace_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM issue_resource_label_events                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'issue_resource_weight_events' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM issue_resource_weight_events                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'issue_resource_milestone_events' AS event_name,
      user_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'plan' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM issue_resource_milestone_events                                                                              

    UNION ALL

    SELECT 
      event_primary_key,
      'events' AS event_name,
      author_id AS user_id,
      created_at AS event_created_at,
      False::BOOLEAN AS is_representative_of_stage,
      'manage' AS stage_name,
      project_id::NUMBER AS parent_id,
      'project' AS parent_type
    FROM events                                                                              

    ),

joins AS (
  SELECT
    data.event_primary_key,
    data.event_name,
    ultimate_namespace.namespace_id,
    ultimate_namespace.namespace_created_at,
    IFF(blocked_users.user_id IS NOT NULL, TRUE, FALSE) AS is_blocked_namespace,
    data.user_id,
    data.parent_type,
    data.parent_id,
    COALESCE(projects.project_created_at,namespaces.namespace_created_at) AS parent_created_at,
    projects.is_learn_gitlab AS project_is_learn_gitlab,
    ultimate_namespace.namespace_is_internal AS namespace_is_internal,
    data.event_created_at,
    data.is_representative_of_stage,
    data.stage_name,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
    END AS plan_id_at_event_date,
    CASE
      WHEN gitlab_subscriptions.is_trial
        THEN 'trial'
      ELSE COALESCE(plans.plan_name, 'free')
    END AS plan_name_at_event_date,
    COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date
  FROM data
  /* Join with parent project. */

      LEFT JOIN projects
        ON data.parent_id = projects.project_id
        AND data.parent_type = 'project'
      /* Join with parent group. */
      LEFT JOIN namespaces
        ON data.parent_id = namespaces.namespace_id
        AND data.parent_type = 'group'

      -- Join on either the project's or the group's ultimate namespace.
      LEFT JOIN namespaces AS ultimate_namespace

        ON ultimate_namespace.namespace_id = COALESCE(projects.ultimate_parent_id,namespaces.namespace_ultimate_parent_id)


      LEFT JOIN gitlab_subscriptions
        ON ultimate_namespace.namespace_id = gitlab_subscriptions.namespace_id
        AND data.event_created_at >= TO_DATE(gitlab_subscriptions.valid_from)
        AND data.event_created_at < COALESCE( TO_DATE(gitlab_subscriptions.valid_to), '9999-12-31'::TIMESTAMP)
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN blocked_users
        ON ultimate_namespace.creator_id = blocked_users.user_id 
      WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = data.user_id

    )
      


)
, final AS (
    SELECT
      joins.*,
      users.created_at                                    AS user_created_at,
      FLOOR(
      DATEDIFF('hour',
              namespace_created_at,
              event_created_at)/24)                       AS days_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                namespace_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_namespace_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/24)                     AS days_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                parent_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_parent_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/24)                     AS days_since_user_creation,
      FLOOR(
        DATEDIFF('hour',
                user_created_at,
                event_created_at)/(24 * 7))               AS weeks_since_user_creation
    FROM joins
    LEFT JOIN users
      ON joins.user_id = users.user_id
    WHERE event_created_at < CURRENT_DATE()

)

SELECT *
FROM final45:Taf4,WITH days AS (

    SELECT DISTINCT
      date_day                       AS day,
      (date_day = last_day_of_month) AS is_last_day_of_month
    FROM {{ ref('date_details') }}
    WHERE date_day < CURRENT_DATE

), audit_events AS (

    SELECT DISTINCT
      author_id,
      TO_DATE(created_at) AS audit_event_day
    FROM {{ ref('gitlab_dotcom_audit_events') }}
    WHERE TRUE

), events AS (

    SELECT DISTINCT
      author_id,
      ultimate_parent_id,
      plan_id_at_event_date,
      plan_was_paid_at_event_date,
      TO_DATE(created_at) AS event_day
    FROM {{ ref('gitlab_dotcom_events') }} dotcom_events
    WHERE {{ filter_out_blocked_users('dotcom_events', 'author_id') }}

), audit_events_active_user AS (

    SELECT
      days.day,
      days.is_last_day_of_month,
      COUNT(DISTINCT author_id)   AS count_audit_events_active_users_last_28_days
    FROM days
      INNER JOIN audit_events
        ON audit_event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    GROUP BY
      days.day,
      days.is_last_day_of_month
    ORDER BY
      days.day

), events_active_user AS (

    SELECT DISTINCT
      days.day,
      days.is_last_day_of_month,
      events.plan_id_at_event_date,
      events.plan_was_paid_at_event_date,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day)                                              AS count_events_active_users_last_28_days,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)                AS count_events_active_users_last_28_days_by_plan_id,
      COUNT(DISTINCT ultimate_parent_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)       AS count_events_active_namespaces_last_28_days_by_plan_id,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_was_paid_at_event_date)          AS count_events_active_users_last_28_days_by_plan_was_paid
    FROM days
      INNER JOIN events
        ON events.event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    ORDER BY
      days.day

), joined AS (

    SELECT DISTINCT
      audit_events_active_user.day,
      audit_events_active_user.is_last_day_of_month,
      audit_events_active_user.count_audit_events_active_users_last_28_days,
      events_active_user.plan_id_at_event_date,
      events_active_user.plan_was_paid_at_event_date,
      events_active_user.count_events_active_users_last_28_days,
      events_active_user.count_events_active_users_last_28_days_by_plan_id,
      events_active_user.count_events_active_namespaces_last_28_days_by_plan_id,
      events_active_user.count_events_active_users_last_28_days_by_plan_was_paid
    FROM audit_events_active_user
      LEFT JOIN events_active_user
        ON audit_events_active_user.day = events_active_user.day
)

SELECT *
FROM joined46:Tb95,WITH days AS (

    SELECT DISTINCT
      date_day                       AS day,
      (date_day = last_day_of_month) AS is_last_day_of_month
    FROM "PROD".legacy.date_details
    WHERE date_day < CURRENT_DATE

), audit_events AS (

    SELECT DISTINCT
      author_id,
      TO_DATE(created_at) AS audit_event_day
    FROM "PROD".legacy.gitlab_dotcom_audit_events
    WHERE TRUE

), events AS (

    SELECT DISTINCT
      author_id,
      ultimate_parent_id,
      plan_id_at_event_date,
      plan_was_paid_at_event_date,
      TO_DATE(created_at) AS event_day
    FROM "PROD".legacy.gitlab_dotcom_events dotcom_events
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = dotcom_events.author_id

    )

), audit_events_active_user AS (

    SELECT
      days.day,
      days.is_last_day_of_month,
      COUNT(DISTINCT author_id)   AS count_audit_events_active_users_last_28_days
    FROM days
      INNER JOIN audit_events
        ON audit_event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    GROUP BY
      days.day,
      days.is_last_day_of_month
    ORDER BY
      days.day

), events_active_user AS (

    SELECT DISTINCT
      days.day,
      days.is_last_day_of_month,
      events.plan_id_at_event_date,
      events.plan_was_paid_at_event_date,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day)                                              AS count_events_active_users_last_28_days,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)                AS count_events_active_users_last_28_days_by_plan_id,
      COUNT(DISTINCT ultimate_parent_id) OVER (PARTITION BY days.day, events.plan_id_at_event_date)       AS count_events_active_namespaces_last_28_days_by_plan_id,
      COUNT(DISTINCT author_id) OVER (PARTITION BY days.day, events.plan_was_paid_at_event_date)          AS count_events_active_users_last_28_days_by_plan_was_paid
    FROM days
      INNER JOIN events
        ON events.event_day BETWEEN DATEADD('day', -27, days.day) AND days.day
    ORDER BY
      days.day

), joined AS (

    SELECT DISTINCT
      audit_events_active_user.day,
      audit_events_active_user.is_last_day_of_month,
      audit_events_active_user.count_audit_events_active_users_last_28_days,
      events_active_user.plan_id_at_event_date,
      events_active_user.plan_was_paid_at_event_date,
      events_active_user.count_events_active_users_last_28_days,
      events_active_user.count_events_active_users_last_28_days_by_plan_id,
      events_active_user.count_events_active_namespaces_last_28_days_by_plan_id,
      events_active_user.count_events_active_users_last_28_days_by_plan_was_paid
    FROM audit_events_active_user
      LEFT JOIN events_active_user
        ON audit_events_active_user.day = events_active_user.day
)

SELECT *
FROM joined47:Tbb6,{{ simple_cte([
    ('prep_namespace', 'prep_namespace'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source')
    ])
}}

, ptpf_scores AS (

    SELECT
      namespace_id,
      score_date,
      score,
      decile,
      score_group,
      insights,
      days_since_trial_start
    FROM {{ ref('ptpf_scores_source') }}

), score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpf_scores_last AS (

    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpf_scores_last_2 AS (
  
    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpf_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last.namespace_id,
      ptpf_scores_last.score,
      ptpf_scores_last.insights,
      ptpf_scores_last.days_since_trial_start,
      ptpf_scores_last.score_group,
      ptpf_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last
      ON prep_namespace.dim_namespace_id = ptpf_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpf_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last_2.insights,
      ptpf_scores_last_2.score_group,
      ptpf_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpf_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['namespace_creator_ptpf_score.email_address']) }} AS dim_marketing_contact_id,
  namespace_creator_ptpf_score.namespace_id,
  namespace_creator_ptpf_score.score,
  namespace_creator_ptpf_score.insights,
  namespace_creator_ptpf_score.score_group,
  namespace_creator_ptpf_score.score_date,
  namespace_creator_ptpf_score.days_since_trial_start,
  namespace_creator_ptpf_score_last_2.insights          AS past_insights,
  namespace_creator_ptpf_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpf_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpf_score
LEFT JOIN namespace_creator_ptpf_score_last_2
  ON namespace_creator_ptpf_score.email_address = namespace_creator_ptpf_score_last_2.email_address
WHERE namespace_creator_ptpf_score.score_group >= 448:Tc1a,

WITH prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

)

, ptpf_scores AS (

    SELECT
      namespace_id,
      score_date,
      score,
      decile,
      score_group,
      insights,
      days_since_trial_start
    FROM "PREP".data_science.ptpf_scores_source

), score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpf_scores_last AS (

    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpf_scores_last_2 AS (
  
    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpf_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last.namespace_id,
      ptpf_scores_last.score,
      ptpf_scores_last.insights,
      ptpf_scores_last.days_since_trial_start,
      ptpf_scores_last.score_group,
      ptpf_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last
      ON prep_namespace.dim_namespace_id = ptpf_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpf_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last_2.insights,
      ptpf_scores_last_2.score_group,
      ptpf_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpf_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  md5(cast(coalesce(cast(namespace_creator_ptpf_score.email_address as 
    varchar
), '') as 
    varchar
)) AS dim_marketing_contact_id,
  namespace_creator_ptpf_score.namespace_id,
  namespace_creator_ptpf_score.score,
  namespace_creator_ptpf_score.insights,
  namespace_creator_ptpf_score.score_group,
  namespace_creator_ptpf_score.score_date,
  namespace_creator_ptpf_score.days_since_trial_start,
  namespace_creator_ptpf_score_last_2.insights          AS past_insights,
  namespace_creator_ptpf_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpf_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpf_score
LEFT JOIN namespace_creator_ptpf_score_last_2
  ON namespace_creator_ptpf_score.email_address = namespace_creator_ptpf_score_last_2.email_address
WHERE namespace_creator_ptpf_score.score_group >= 449:Tc18,{{ config(
    tags=["mnpi_exception"]
) }}

WITH customers AS (

    SELECT *
    FROM {{ ref('customers_db_customers') }}

)

, trials AS  (

    SELECT *
    FROM {{ ref('customers_db_trials') }}

)

, users AS (

    SELECT
      {{ dbt_utils.star(from=ref('gitlab_dotcom_users')) }},
      created_at        AS user_created_at,
      updated_at        AS user_updated_at
    FROM {{ ref('gitlab_dotcom_users') }}

)

, highest_paid_subscription_plan AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_highest_paid_subscription_plan') }}

)

, customers_with_trial AS (

  SELECT
    customers.customer_provider_user_id                         AS user_id,
    MIN(customers.customer_id)                                  AS first_customer_id,
    MIN(customers.customer_created_at)                          AS first_customer_created_at,
    ARRAY_AGG(customers.customer_id)
        WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
    MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
    MIN(trial_start_date)                                       AS has_started_trial_at
  FROM customers
    LEFT JOIN trials
      ON customers.customer_id = trials.customer_id
  WHERE customers.customer_provider = 'gitlab'
  GROUP BY 1

)

, joined AS (
  SELECT
    users.*,
    TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
    TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
    CASE
      WHEN account_age <= 1 THEN '1 - 1 day or less'
      WHEN account_age <= 7 THEN '2 - 2 to 7 days'
      WHEN account_age <= 14 THEN '3 - 8 to 14 days'
      WHEN account_age <= 30 THEN '4 - 15 to 30 days'
      WHEN account_age <= 60 THEN '5 - 31 to 60 days'
      WHEN account_age > 60 THEN '6 - Over 60 days'
    END                                                                           AS account_age_cohort,

    highest_paid_subscription_plan.highest_paid_subscription_plan_id,
    highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
    highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
    highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

    IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
    customers_with_trial.first_customer_created_at,
    customers_with_trial.first_customer_id,
    customers_with_trial.customer_id_list,
    customers_with_trial.has_started_trial,
    customers_with_trial.has_started_trial_at

  FROM users
    LEFT JOIN highest_paid_subscription_plan
      ON users.user_id = highest_paid_subscription_plan.user_id
    LEFT JOIN customers_with_trial
      ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
  WHERE {{ filter_out_blocked_users('users', 'user_id') }}

)

SELECT *
FROM joined4a:T8f0,This model extends the base model `gitlab_dotcom_users` and adds several other dimensions

### Age cohorts
This model adds account age cohorts to the users table, the defined cohorts are:

1-  1 day or less  
2-  2 to 7 days  
3-  8 to 14 days  
4-  15 to 30 days  
5-  31 to 60 days  
6-  Over 60 days  

The CTE does this by comparing the time of the dbt run with `created_at` in the users table.

### Highest inherited subscription

This model documents the highest subscription a user inherits from. Rules around inheritance are a bit complicated, as stated in the handbook [here](https://about.gitlab.com/handbook/marketing/product-marketing/enablement/dotcom-subscriptions/#common-misconceptions),

>>>
Reality: GitLab.com subscriptions are scoped to a namespace, and individual users could participate in many groups with different subscription types. For example, they might have personal projects on a Free subscription type, participate in an open-source project that has Gold features (because it's public) while their company has a Silver subscription.
>>>

A user inherits from a subscription when:
* They are a member of a group/sub-group that has a paid subscription.
* They are a member of a project which belongs to a group with a paid subscription
* They have a personal subscription attached to their personal namespace.

Some gotchas:
* If a user is part of a public open-source (or edu) group/project, they will not inherit from the Gold subscription of the group/project.
* If a user is part of a project created by another user's personal namespace, they won't inherit from the owner's namespace subscription.

We then know for each user: what's the highest plan they inherit from and where they inherit it from.

If a user inherits from 2+ subscriptions with the same plan, we choose one subscription over the other based on the inheritance source: First, user, then groups, then projects.

### Subscription Portal (customers.gitlab.com) data 

This model surfaces also if a user has created an account or not in the subscription portal by joining with the `customers_db_customers` table. It also informs us if a specific user has already started a trial and if so when. 

### Misc

A `days_active` column is added by comparing `created_at` with `last_activity_on`4b:T1c09,

WITH  __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
),customers AS (

    SELECT *
    FROM "PROD".legacy.customers_db_customers

)

, trials AS  (

    SELECT *
    FROM "PROD".legacy.customers_db_trials

)

, users AS (

    SELECT
      "USER_ID",
  "REMEMBER_CREATED_AT",
  "SIGN_IN_COUNT",
  "CURRENT_SIGN_IN_AT",
  "LAST_SIGN_IN_AT",
  "CREATED_AT",
  "UPDATED_AT",
  "IS_ADMIN",
  "PROJECTS_LIMIT",
  "FAILED_ATTEMPTS",
  "LOCKED_AT",
  "USER_LOCKED",
  "HAS_CREATE_GROUP_PERMISSIONS",
  "HAS_CREATE_TEAM_PERMISSIONS",
  "STATE",
  "COLOR_SCHEME_ID",
  "PASSWORD_EXPIRES_AT",
  "CREATED_BY_ID",
  "LAST_CREDENTIAL_CHECK_AT",
  "HAS_AVATAR",
  "CONFIRMED_AT",
  "CONFIRMATION_SENT_AT",
  "HAS_HIDE_NO_SSH_KEY_ENABLED",
  "ADMIN_EMAIL_UNSUBSCRIBED_AT",
  "NOTIFICATION_EMAIL",
  "NOTIFICATION_EMAIL_DOMAIN",
  "HAS_HIDE_NO_PASSWORD_ENABLED",
  "IS_PASSWORD_AUTOMATICALLY_SET",
  "LOCATION",
  "EMAIL",
  "EMAIL_DOMAIN",
  "PUBLIC_EMAIL",
  "PUBLIC_EMAIL_DOMAIN",
  "COMMIT_EMAIL",
  "COMMIT_EMAIL_DOMAIN",
  "IS_EMAIL_OPTED_IN",
  "EMAIL_OPTED_IN_SOURCE_ID",
  "EMAIL_OPTED_IN_AT",
  "DASHBOARD",
  "PROJECT_VIEW",
  "CONSUMED_TIMESTEP",
  "LAYOUT",
  "HAS_HIDE_PROJECT_LIMIT_ENABLED",
  "OTP_GRACE_PERIOD_STARTED_AT",
  "IS_EXTERNAL_USER",
  "ORGANIZATION",
  "AUDITOR",
  "DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP",
  "TWO_FACTOR_GRACE_PERIOD",
  "LAST_ACTIVITY_ON",
  "IS_NOTIFIED_OF_OWN_ACTIVITY",
  "PREFERRED_LANGUAGE",
  "THEME_ID",
  "ACCEPTED_TERM_ID",
  "IS_PRIVATE_PROFILE",
  "ROADMAP_LAYOUT",
  "INCLUDE_PRIVATE_CONTRIBUTIONS",
  "GROUP_VIEW",
  "MANAGING_GROUP_ID",
  "ROLE_ID",
  "ROLE",
  "USER_NAME",
  "FIRST_NAME",
  "LAST_NAME",
  "USERS_NAME",
  "USER_TYPE",
  "IT_JOB_TITLE_HIERARCHY",
      created_at        AS user_created_at,
      updated_at        AS user_updated_at
    FROM "PREP".sensitive.gitlab_dotcom_users

)

, highest_paid_subscription_plan AS (

    SELECT *
    FROM __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan

)

, customers_with_trial AS (

  SELECT
    customers.customer_provider_user_id                         AS user_id,
    MIN(customers.customer_id)                                  AS first_customer_id,
    MIN(customers.customer_created_at)                          AS first_customer_created_at,
    ARRAY_AGG(customers.customer_id)
        WITHIN GROUP (ORDER  BY customers.customer_id)          AS customer_id_list,
    MAX(IFF(order_id IS NOT NULL, TRUE, FALSE))                 AS has_started_trial,
    MIN(trial_start_date)                                       AS has_started_trial_at
  FROM customers
    LEFT JOIN trials
      ON customers.customer_id = trials.customer_id
  WHERE customers.customer_provider = 'gitlab'
  GROUP BY 1

)

, joined AS (
  SELECT
    users.*,
    TIMESTAMPDIFF(DAYS, user_created_at, last_activity_on)                       AS days_active,
    TIMESTAMPDIFF(DAYS, user_created_at, CURRENT_TIMESTAMP(2))                   AS account_age,
    CASE
      WHEN account_age <= 1 THEN '1 - 1 day or less'
      WHEN account_age <= 7 THEN '2 - 2 to 7 days'
      WHEN account_age <= 14 THEN '3 - 8 to 14 days'
      WHEN account_age <= 30 THEN '4 - 15 to 30 days'
      WHEN account_age <= 60 THEN '5 - 31 to 60 days'
      WHEN account_age > 60 THEN '6 - Over 60 days'
    END                                                                           AS account_age_cohort,

    highest_paid_subscription_plan.highest_paid_subscription_plan_id,
    highest_paid_subscription_plan.highest_paid_subscription_plan_is_paid         AS is_paid_user,
    highest_paid_subscription_plan.highest_paid_subscription_namespace_id,
    highest_paid_subscription_plan.highest_paid_subscription_ultimate_parent_id,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_type,
    highest_paid_subscription_plan.highest_paid_subscription_inheritance_source_id,

    IFF(customers_with_trial.first_customer_id IS NOT NULL, TRUE, FALSE)          AS has_customer_account,
    customers_with_trial.first_customer_created_at,
    customers_with_trial.first_customer_id,
    customers_with_trial.customer_id_list,
    customers_with_trial.has_started_trial,
    customers_with_trial.has_started_trial_at

  FROM users
    LEFT JOIN highest_paid_subscription_plan
      ON users.user_id = highest_paid_subscription_plan.user_id
    LEFT JOIN customers_with_trial
      ON users.user_id::VARCHAR = customers_with_trial.user_id::VARCHAR
  WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = users.user_id

    )

)

SELECT *
FROM joined4c:T9e5, __dbt__cte__gitlab_dotcom_highest_paid_subscription_plan as (



WITH memberships AS (

    SELECT
      *,
      DECODE(membership_source_type,
          'individual_namespace', 0,
          'group_membership', 1,
          'project_membership', 2,
          'group_group_link', 3,
          'group_group_link_ancestor', 4,
          'project_group_link', 5,
          'project_group_link_ancestor', 6
      ) AS membership_source_type_order,
      IFF(namespace_id = ultimate_parent_id, TRUE, FALSE) AS is_ultimate_parent
    FROM "PROD".legacy.gitlab_dotcom_memberships
    WHERE ultimate_parent_plan_id != 34

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), highest_paid_subscription_plan AS (

  SELECT DISTINCT

    user_id,

    COALESCE(
      MAX(plans.plan_is_paid) OVER (
        PARTITION BY user_id
      ),
    FALSE)   AS highest_paid_subscription_plan_is_paid,

    COALESCE(
      FIRST_VALUE(ultimate_parent_plan_id) OVER (
        PARTITION BY user_id
        ORDER BY
            ultimate_parent_plan_id DESC,
            membership_source_type_order,
            is_ultimate_parent DESC,
            membership_source_type
        ) 
      , 34) AS highest_paid_subscription_plan_id,

    FIRST_VALUE(namespace_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_namespace_id,

    FIRST_VALUE(ultimate_parent_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_ultimate_parent_id,

    FIRST_VALUE(membership_source_type) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_type,

    FIRST_VALUE(membership_source_id) OVER (
      PARTITION BY user_id
      ORDER BY
        ultimate_parent_plan_id DESC,
        membership_source_type_order,
        is_ultimate_parent DESC,
        membership_source_type
    )       AS highest_paid_subscription_inheritance_source_id

  FROM memberships
    LEFT JOIN plans
      ON memberships.ultimate_parent_plan_id = plans.plan_id

)

SELECT *
FROM highest_paid_subscription_plan
)4d:Te83,{{ config({
    "alias": "gitlab_dotcom_namespaces_xf"
}) }}

{% set fields_to_mask = ['namespace_name', 'namespace_path'] %}

WITH namespaces AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespaces')}}

),

members AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_members')}} members
    WHERE is_currently_valid = TRUE
      AND {{ filter_out_blocked_users('members', 'user_id') }}

),

projects AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_projects')}}

), namespace_lineage AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_namespace_lineage')}}

), creators AS (

    SELECT DISTINCT
      author_id AS creator_id,
      entity_id AS group_id
    FROM {{ ref('prep_audit_event_details_clean') }} AS audit_event_details_clean
    LEFT JOIN {{ ref('gitlab_dotcom_audit_events') }} AS audit_events 
        ON audit_event_details_clean.audit_event_id = audit_events.audit_event_id
    WHERE entity_type = 'Group'
      AND key_name = 'add'
      AND key_value = 'group'
  
), joined AS (
    SELECT
      namespaces.namespace_id,

      {% for field in fields_to_mask %}
      CASE
        WHEN namespaces.visibility_level = 'public' OR namespace_is_internal THEN {{field}}
        WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
        WHEN namespaces.visibility_level = 'private'  THEN 'private - masked'
      END                                                              AS {{field}},
      {% endfor %}

      namespaces.owner_id,
      namespaces.namespace_type                                        AS namespace_type,
      namespaces.has_avatar,
      namespaces.created_at                                            AS namespace_created_at,
      namespaces.updated_at                                            AS namespace_updated_at,
      namespaces.is_membership_locked,
      namespaces.has_request_access_enabled,
      namespaces.has_share_with_group_locked,
      namespaces.visibility_level,
      namespaces.ldap_sync_status,
      namespaces.ldap_sync_error,
      namespaces.ldap_sync_last_update_at,
      namespaces.ldap_sync_last_successful_update_at,
      namespaces.ldap_sync_last_sync_at,
      namespaces.lfs_enabled,
      namespaces.parent_id,
      namespaces.shared_runners_enabled, 
      namespaces.shared_runners_minutes_limit,
      namespaces.extra_shared_runners_minutes_limit,
      namespaces.repository_size_limit,
      namespaces.does_require_two_factor_authentication,
      namespaces.two_factor_grace_period,
      namespaces.project_creation_level,
      namespaces.push_rule_id,
      COALESCE(creators.creator_id, namespaces.owner_id)               AS creator_id,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.ultimate_parent_id                             AS namespace_ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id                        AS plan_id,
      namespace_lineage.ultimate_parent_plan_title                     AS plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid                   AS plan_is_paid,

      COALESCE(COUNT(DISTINCT members.member_id), 0)                   AS member_count,
      COALESCE(COUNT(DISTINCT projects.project_id), 0)                 AS project_count

    FROM namespaces
      LEFT JOIN members
        ON namespaces.namespace_id = members.source_id
        AND members.member_source_type = 'Namespace'
      LEFT JOIN projects
        ON namespaces.namespace_id = projects.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN creators
        ON namespaces.namespace_id = creators.group_id
    {{ dbt_utils.group_by(n=33) }}
)

SELECT *
FROM joined4e:T104a,



WITH namespaces AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_namespaces

),

members AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_members members
    WHERE is_currently_valid = TRUE
      AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members.user_id

    )

),

projects AS (

    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_projects

), namespace_lineage AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_namespace_lineage

), creators AS (

    SELECT DISTINCT
      author_id AS creator_id,
      entity_id AS group_id
    FROM "PROD".common_prep.prep_audit_event_details_clean AS audit_event_details_clean
    LEFT JOIN "PROD".legacy.gitlab_dotcom_audit_events AS audit_events 
        ON audit_event_details_clean.audit_event_id = audit_events.audit_event_id
    WHERE entity_type = 'Group'
      AND key_name = 'add'
      AND key_value = 'group'
  
), joined AS (
    SELECT
      namespaces.namespace_id,

      
      CASE
        WHEN namespaces.visibility_level = 'public' OR namespace_is_internal THEN namespace_name
        WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
        WHEN namespaces.visibility_level = 'private'  THEN 'private - masked'
      END                                                              AS namespace_name,
      
      CASE
        WHEN namespaces.visibility_level = 'public' OR namespace_is_internal THEN namespace_path
        WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
        WHEN namespaces.visibility_level = 'private'  THEN 'private - masked'
      END                                                              AS namespace_path,
      

      namespaces.owner_id,
      namespaces.namespace_type                                        AS namespace_type,
      namespaces.has_avatar,
      namespaces.created_at                                            AS namespace_created_at,
      namespaces.updated_at                                            AS namespace_updated_at,
      namespaces.is_membership_locked,
      namespaces.has_request_access_enabled,
      namespaces.has_share_with_group_locked,
      namespaces.visibility_level,
      namespaces.ldap_sync_status,
      namespaces.ldap_sync_error,
      namespaces.ldap_sync_last_update_at,
      namespaces.ldap_sync_last_successful_update_at,
      namespaces.ldap_sync_last_sync_at,
      namespaces.lfs_enabled,
      namespaces.parent_id,
      namespaces.shared_runners_enabled, 
      namespaces.shared_runners_minutes_limit,
      namespaces.extra_shared_runners_minutes_limit,
      namespaces.repository_size_limit,
      namespaces.does_require_two_factor_authentication,
      namespaces.two_factor_grace_period,
      namespaces.project_creation_level,
      namespaces.push_rule_id,
      COALESCE(creators.creator_id, namespaces.owner_id)               AS creator_id,

      namespace_lineage.namespace_is_internal,
      namespace_lineage.ultimate_parent_id                             AS namespace_ultimate_parent_id,
      namespace_lineage.ultimate_parent_plan_id                        AS plan_id,
      namespace_lineage.ultimate_parent_plan_title                     AS plan_title,
      namespace_lineage.ultimate_parent_plan_is_paid                   AS plan_is_paid,

      COALESCE(COUNT(DISTINCT members.member_id), 0)                   AS member_count,
      COALESCE(COUNT(DISTINCT projects.project_id), 0)                 AS project_count

    FROM namespaces
      LEFT JOIN members
        ON namespaces.namespace_id = members.source_id
        AND members.member_source_type = 'Namespace'
      LEFT JOIN projects
        ON namespaces.namespace_id = projects.namespace_id
      LEFT JOIN namespace_lineage
        ON namespaces.namespace_id = namespace_lineage.namespace_id
      LEFT JOIN creators
        ON namespaces.namespace_id = creators.group_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33
)

SELECT *
FROM joined4f:T1f62,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('namespace_current', 'gitlab_dotcom_namespaces_source'),
    ('namespace_snapshots', 'prep_namespace_hist'),
    ('namespace_settings', 'gitlab_dotcom_namespace_settings_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('map_namespace_internal', 'map_namespace_internal'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('product_tiers', 'prep_product_tier'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('audit_events', 'gitlab_dotcom_audit_events_source'),
    ('audit_event_details_clean', 'prep_audit_event_details_clean'),
    ('users', 'prep_user')
]) }},

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('members_source', 'user_id') }}
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    {{ get_keyed_nulls('saas_product_tiers.dim_product_tier_id') }}         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-01-14",
    updated_date="2023-06-22"
) }}50:T22ae,



WITH namespace_current AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), namespace_snapshots AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_hist

), namespace_settings AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_settings_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), audit_events AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_audit_events_source

), audit_event_details_clean AS (

    SELECT * 
    FROM "PROD".common_prep.prep_audit_event_details_clean

), users AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

),

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members_source.user_id

    )
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    

  COALESCE(saas_product_tiers.dim_product_tier_id, MD5(-1)) 

         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined51:T73f,{{ config({
    "materialized": "incremental",
    "unique_key": "event_id"
    })
}}

WITH source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_events_source') }}
    {% if is_incremental() %}

    WHERE updated_at >= (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), projects AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_projects_xf') }}

), gitlab_subscriptions AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base') }}

), plans AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_plans') }}

), users AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_users') }} users
    WHERE {{ filter_out_blocked_users('users', 'user_id') }}
  
), joined AS (

    SELECT
      source.*,
      projects.ultimate_parent_id,
      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
      END                                 AS plan_id_at_event_date,
      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(plans.plan_name, 'free')
      END                                 AS plan_name_at_event_date,
      COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date,
      users.created_at                    AS user_created_at
    FROM source
      LEFT JOIN projects
        ON source.project_id = projects.project_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND source.created_at BETWEEN gitlab_subscriptions.valid_from
        AND {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN users
        ON source.author_id = users.user_id

)

SELECT *
FROM joined
ORDER BY updated_at52:T78e,

WITH source AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_events_source
    

    WHERE updated_at >= (SELECT MAX(updated_at) FROM "PROD".legacy.gitlab_dotcom_events)

    

), projects AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_projects_xf

), gitlab_subscriptions AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), plans AS (

    SELECT *
    FROM "PROD".legacy.gitlab_dotcom_plans

), users AS (
    
    SELECT *
    FROM "PREP".sensitive.gitlab_dotcom_users users
    WHERE NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = users.user_id

    )
  
), joined AS (

    SELECT
      source.*,
      projects.ultimate_parent_id,
      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(gitlab_subscriptions.plan_id, 34)::VARCHAR
      END                                 AS plan_id_at_event_date,
      CASE
        WHEN gitlab_subscriptions.is_trial
          THEN 'trial'
        ELSE COALESCE(plans.plan_name, 'free')
      END                                 AS plan_name_at_event_date,
      COALESCE(plans.plan_is_paid, FALSE) AS plan_was_paid_at_event_date,
      users.created_at                    AS user_created_at
    FROM source
      LEFT JOIN projects
        ON source.project_id = projects.project_id
      LEFT JOIN gitlab_subscriptions
        ON projects.ultimate_parent_id = gitlab_subscriptions.namespace_id
        AND source.created_at BETWEEN gitlab_subscriptions.valid_from
        AND COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
      LEFT JOIN plans
        ON gitlab_subscriptions.plan_id = plans.plan_id
      LEFT JOIN users
        ON source.author_id = users.user_id

)

SELECT *
FROM joined
ORDER BY updated_at53:Ta4b,{%- macro it_job_title_hierarchy(job_title) -%}

  CASE
    WHEN LOWER({{pad_column(job_title)}}) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER({{job_title}}), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER({{job_title}}), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER({{job_title}}), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER({{job_title}}), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER({{job_title}}), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER({{job_title}}), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER({{pad_column(job_title)}}) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER({{job_title}}), ' '))
        THEN 'IT Manager'

    WHEN LOWER({{pad_column(job_title)}}) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy

{%- endmacro -%}54:T401,This macro maps a job title to the IT job title hierarchy. It works by doing string matching on the job title and categorizing them into 3 buckets:

1. **IT Decision Makers**: CIO, CTO, VP of IT, ...
2. **IT Managers**: Manager of IT. Manager of Procurement, ...
3. **IT Individual contributors**: Software Developer, Application Developer, IT programmer, ...

These buckets are only for IT, information systems, engineering, ... Everything else gets a NULL value assigned to it.

This macro uses the pad_column macro to "pad" the job title field with spaces and discard unrelated pattern matching.

An example of this is the matching for the job title of `IT Manager`. The string pattern for it `%it%manager%` also gets unrelated matches like `Junior Digital Project Manager` or `Supplier Quality Section Manager`. To overcome this problem, the job title field is "padded" with spaces to the both sides of the string and the string pattern changed `% it%manager%`. This way the previous unrelated job titles would not match.56:Tff8,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_users_dedupe_source') }}

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    {{ user_role_mapping(user_role='role') }}::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    {{ it_job_title_hierarchy('role') }}
  FROM renamed

)

SELECT *
FROM add_job_hierarchy57:T1bb4,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_dedupe_source

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    CASE
      WHEN role = 0 THEN 'Software Developer'
      WHEN role = 1 THEN 'Development Team Lead'
      WHEN role = 2 THEN 'Devops Engineer'
      WHEN role = 3 THEN 'Systems Administrator'
      WHEN role = 4 THEN 'Security Analyst'
      WHEN role = 5 THEN 'Data Analyst'
      WHEN role = 6 THEN 'Product Manager'
      WHEN role = 7 THEN 'Product Designer'
      WHEN role = 8 THEN 'Other'
      WHEN role = 99 THEN 'Experiment Default Value - Signup Not Completed'
      ELSE NULL
    END::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    CASE
    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(role), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy
  FROM renamed

)

SELECT *
FROM add_job_hierarchyc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.gitlab_dotcom_users_source"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"gitlab_dotcom_users_source"}],["$","small",null,{"children":"view"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","sources",{"children":[["$","code",null,{"children":["$","a",null,{"children":"sources"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"view"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PREP.gitlab_dotcom.gitlab_dotcom_users_source"}]]}]]]}]}],null]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Base model for Gitlab.com users, the following fields are hidden for privacy `current_sign_in_ip`, `last_sign_in_ip`, `unconfirmed_email`, `website_url`, `notification_email`, `public_email`, `note`, `organization`"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_USERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"role_id","comment":null,"description":"This is the integer representation of a user's role, as it's stored in the database.","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 99"}],"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"role","comment":null,"description":"This is the string translation of the \"role\" column stored as an integer in the source database. It is converted using the `user_role_mapping` macro.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_source","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.user_role_mapping","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_users_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","name":"gitlab_dotcom_users_source","alias":"gitlab_dotcom_users_source","checksum":{"name":"sha256","checksum":"d544057bc6881cafe8a9b9ae7e63e13e9a9a247622c8e2cd0f8f04b45698f970"},"tags":["sources"],"refs":[["gitlab_dotcom_users_dedupe_source"],["gitlab_dotcom_users_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com users, the following fields are hidden for privacy `current_sign_in_ip`, `last_sign_in_ip`, `unconfirmed_email`, `website_url`, `notification_email`, `public_email`, `note`, `organization`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.402963,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_users_source","label":"gitlab_dotcom_users_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"MART_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"IS_GROUP_NAMESPACE_OWNER":{"type":"BOOLEAN","index":2,"name":"is_group_namespace_owner","comment":null,"description":"Flags if group namespace owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace_owner"},"IS_GROUP_NAMESPACE_MEMBER":{"type":"BOOLEAN","index":3,"name":"is_group_namespace_member","comment":null,"description":"Flags if group namespace member","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace_member"},"IS_INDIVIDUAL_NAMESPACE_OWNER":{"type":"BOOLEAN","index":4,"name":"is_individual_namespace_owner","comment":null,"description":"Flags if personal namespace owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_individual_namespace_owner"},"IS_GROUP_MAINTAINER_OF_SAAS_PAID_TIER":{"type":"BOOLEAN","index":5,"name":"is_group_maintainer_of_saas_paid_tier","comment":null,"description":"Flags if group maintainer of a SaaS paid tier namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas_paid_tier"},"IS_GROUP_MAINTAINER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":6,"name":"is_group_maintainer_of_saas_free_tier","comment":null,"description":"Flags if group maintainer of a SaaS free tier namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas_free_tier"},"IS_GROUP_MAINTAINER_OF_SAAS":{"type":"BOOLEAN","index":7,"name":"is_group_maintainer_of_saas","comment":null,"description":"Flags if group maintainer of a SaaS namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_maintainer_of_saas"},"IS_CUSTOMER_DB_OWNER":{"type":"BOOLEAN","index":8,"name":"is_customer_db_owner","comment":null,"description":"Flags if customer db owner","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_owner"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":9,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"DAYS_SINCE_SAAS_TRIAL_ENDED":{"type":"NUMBER","index":10,"name":"days_since_saas_trial_ended","comment":null,"description":"Number of days since saas trial ended","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_trial_ended"},"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET":{"type":"TEXT","index":11,"name":"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET","comment":null,"display_name":"days_since_saas_trial_ended_bucket"},"DAYS_UNTIL_SAAS_TRIAL_ENDS":{"type":"NUMBER","index":12,"name":"days_until_saas_trial_ends","comment":null,"description":"Number of days until saas trial ends","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_until_saas_trial_ends"},"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET":{"type":"TEXT","index":13,"name":"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET","comment":null,"display_name":"days_until_saas_trial_ends_bucket"},"INDIVIDUAL_NAMESPACE_IS_SAAS_TRIAL":{"type":"BOOLEAN","index":14,"name":"individual_namespace_is_saas_trial","comment":null,"description":"Flags if individual namespace is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_trial"},"INDIVIDUAL_NAMESPACE_IS_SAAS_FREE_TIER":{"type":"BOOLEAN","index":15,"name":"individual_namespace_is_saas_free_tier","comment":null,"description":"Flags if individual namespace is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_free_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":16,"name":"individual_namespace_is_saas_bronze_tier","comment":null,"description":"Flags if individual namespace is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_bronze_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":17,"name":"individual_namespace_is_saas_premium_tier","comment":null,"description":"Flags if individual namespace is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_premium_tier"},"INDIVIDUAL_NAMESPACE_IS_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":18,"name":"individual_namespace_is_saas_ultimate_tier","comment":null,"description":"Flags if individual namespace is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"individual_namespace_is_saas_ultimate_tier"},"GROUP_MEMBER_OF_SAAS_TRIAL":{"type":"BOOLEAN","index":19,"name":"group_member_of_saas_trial","comment":null,"description":"Flags if namespace of group member is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_trial"},"GROUP_MEMBER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":20,"name":"group_member_of_saas_free_tier","comment":null,"description":"Flags if namespace of group member is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_free_tier"},"GROUP_MEMBER_OF_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":21,"name":"group_member_of_saas_bronze_tier","comment":null,"description":"Flags if namespace of group member is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_bronze_tier"},"GROUP_MEMBER_OF_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":22,"name":"group_member_of_saas_premium_tier","comment":null,"description":"Flags if namespace of group member is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_premium_tier"},"GROUP_MEMBER_OF_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":23,"name":"group_member_of_saas_ultimate_tier","comment":null,"description":"Flags if namespace of group member is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_member_of_saas_ultimate_tier"},"GROUP_OWNER_OF_SAAS_TRIAL":{"type":"BOOLEAN","index":24,"name":"group_owner_of_saas_trial","comment":null,"description":"Flags if namespace of group owner is on saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_trial"},"GROUP_OWNER_OF_SAAS_FREE_TIER":{"type":"BOOLEAN","index":25,"name":"group_owner_of_saas_free_tier","comment":null,"description":"Flags if namespace of group owner is on free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_free_tier"},"GROUP_OWNER_OF_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":26,"name":"group_owner_of_saas_bronze_tier","comment":null,"description":"Flags if namespace of group owner is on bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_bronze_tier"},"GROUP_OWNER_OF_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":27,"name":"group_owner_of_saas_premium_tier","comment":null,"description":"Flags if namespace of group owner is on premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_premium_tier"},"GROUP_OWNER_OF_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":28,"name":"group_owner_of_saas_ultimate_tier","comment":null,"description":"Flags if namespace of group owner is on ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_owner_of_saas_ultimate_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_TRIAL":{"type":"BOOLEAN","index":29,"name":"responsible_for_group_saas_trial","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a saas trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_trial"},"RESPONSIBLE_FOR_GROUP_SAAS_FREE_TIER":{"type":"BOOLEAN","index":30,"name":"responsible_for_group_saas_free_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a free saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_free_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":31,"name":"responsible_for_group_saas_bronze_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a bronze saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_bronze_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":32,"name":"responsible_for_group_saas_premium_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a premium saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_premium_tier"},"RESPONSIBLE_FOR_GROUP_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":33,"name":"responsible_for_group_saas_ultimate_tier","comment":null,"description":"Flags if is customer db owner or zuora billing contact of a ultimate saas tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_group_saas_ultimate_tier"},"IS_SELF_MANAGED_STARTER_TIER":{"type":"BOOLEAN","index":34,"name":"is_self_managed_starter_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on starter tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_starter_tier"},"IS_SELF_MANAGED_PREMIUM_TIER":{"type":"BOOLEAN","index":35,"name":"is_self_managed_premium_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on premium tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_premium_tier"},"IS_SELF_MANAGED_ULTIMATE_TIER":{"type":"BOOLEAN","index":36,"name":"is_self_managed_ultimate_tier","comment":null,"description":"Flags if customer db owner or zuora billing account is self managed and is on ultimate tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_ultimate_tier"},"HAS_NAMESPACE_SETUP_FOR_COMPANY_USE":{"type":"BOOLEAN","index":37,"name":"has_namespace_setup_for_company_use","comment":null,"description":"If True, the marketing contact is a member of a namespace that has been checked for company use","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_namespace_setup_for_company_use"},"HAS_NAMESPACE_WITH_PUBLIC_PROJECT":{"type":"BOOLEAN","index":38,"name":"has_namespace_with_public_project","comment":null,"description":"If True, the marketing contact is a member of a namespace that has at least one public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_namespace_with_public_project"},"HAS_FREE_NAMESPACE_WITH_PUBLIC_PROJECT":{"type":"BOOLEAN","index":39,"name":"has_free_namespace_with_public_project","comment":null,"description":"If True, the marketing contact is a member of a Free namespace that has at least one public project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_free_namespace_with_public_project"},"IS_MEMBER_OF_PUBLIC_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":40,"name":"is_member_of_public_ultimate_parent_namespace","comment":null,"description":"If True, the marketing contact is a member of an ultimate parent namespace that is public.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_member_of_public_ultimate_parent_namespace"},"IS_MEMBER_OF_PRIVATE_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":41,"name":"is_member_of_private_ultimate_parent_namespace","comment":null,"description":"If True, the marketing contact is a member of an ultimate parent namespace that is private.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_member_of_private_ultimate_parent_namespace"},"PUBLIC_ULTIMATE_PARENT_NAMESPACES":{"type":"ARRAY","index":42,"name":"public_ultimate_parent_namespaces","comment":null,"description":"Array containing all the public ultimate parent namespaces the marketing contact is a member of.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"public_ultimate_parent_namespaces"},"PRIVATE_ULTIMATE_PARENT_NAMESPACES":{"type":"ARRAY","index":43,"name":"private_ultimate_parent_namespaces","comment":null,"description":"Array containing all the private ultimate parent namespaces the marketing contact is a member of.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"private_ultimate_parent_namespaces"},"ROLE_TIER_ULTIMATE_NAMESPACE_TEXT":{"type":"ARRAY","index":44,"name":"ROLE_TIER_ULTIMATE_NAMESPACE_TEXT","comment":null,"display_name":"role_tier_ultimate_namespace_text"},"IS_SAAS_BRONZE_TIER":{"type":"BOOLEAN","index":45,"name":"IS_SAAS_BRONZE_TIER","comment":null,"display_name":"is_saas_bronze_tier"},"IS_SAAS_PREMIUM_TIER":{"type":"BOOLEAN","index":46,"name":"IS_SAAS_PREMIUM_TIER","comment":null,"display_name":"is_saas_premium_tier"},"IS_SAAS_ULTIMATE_TIER":{"type":"BOOLEAN","index":47,"name":"IS_SAAS_ULTIMATE_TIER","comment":null,"display_name":"is_saas_ultimate_tier"},"IS_BRONZE_STARTER_TIER":{"type":"BOOLEAN","index":48,"name":"IS_BRONZE_STARTER_TIER","comment":null,"display_name":"is_bronze_starter_tier"},"IS_PREMIUM_TIER":{"type":"BOOLEAN","index":49,"name":"IS_PREMIUM_TIER","comment":null,"display_name":"is_premium_tier"},"IS_ULTIMATE_TIER":{"type":"BOOLEAN","index":50,"name":"IS_ULTIMATE_TIER","comment":null,"display_name":"is_ultimate_tier"},"IS_SAAS_DELIVERY":{"type":"BOOLEAN","index":51,"name":"IS_SAAS_DELIVERY","comment":null,"display_name":"is_saas_delivery"},"IS_SELF_MANAGED_DELIVERY":{"type":"BOOLEAN","index":52,"name":"IS_SELF_MANAGED_DELIVERY","comment":null,"display_name":"is_self_managed_delivery"},"IS_SAAS_FREE_TIER":{"type":"BOOLEAN","index":53,"name":"IS_SAAS_FREE_TIER","comment":null,"display_name":"is_saas_free_tier"},"IS_PAID_TIER":{"type":"BOOLEAN","index":54,"name":"IS_PAID_TIER","comment":null,"display_name":"is_paid_tier"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":55,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PAID_TIER_CHANGE":{"type":"BOOLEAN","index":56,"name":"is_paid_tier_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_paid_tier flag is set to True OR the is_paid_tier flag is set to False and the is_paid_tier_marketo set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_tier_change"},"MIN_SUBSCRIPTION_START_DATE":{"type":"DATE","index":57,"name":"min_subscription_start_date","comment":null,"description":"Earliest subscription start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"min_subscription_start_date"},"MAX_SUBSCRIPTION_END_DATE":{"type":"DATE","index":58,"name":"max_subscription_end_date","comment":null,"description":"Latest subscription end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_subscription_end_date"},"NBR_OF_PAID_SUBSCRIPTIONS":{"type":"NUMBER","index":59,"name":"nbr_of_paid_subscriptions","comment":null,"description":"Number of paid subscriptions the user is on","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"nbr_of_paid_subscriptions"},"RESPONSIBLE_FOR_FREE_TIER_ONLY":{"type":"BOOLEAN","index":60,"name":"responsible_for_free_tier_only","comment":null,"description":"Flags if responsible for or individual namespace of only free tier","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"responsible_for_free_tier_only"},"EMAIL_ADDRESS":{"type":"TEXT","index":61,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":62,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":63,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":64,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":65,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"SFDC_RECORD_ID":{"type":"TEXT","index":66,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":67,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"JOB_TITLE":{"type":"TEXT","index":68,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":69,"name":"it_job_title_hierarchy","comment":null,"description":"$13","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":70,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"MOBILE_PHONE":{"type":"TEXT","index":71,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":72,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":73,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":74,"name":"marketo_lead_id","comment":null,"description":"Marketo id assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":75,"name":"is_marketo_lead","comment":null,"description":"Flags if marketo lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":76,"name":"is_marketo_email_hard_bounced","comment":null,"description":"Flags if marketing contact email has hard bounced","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":77,"name":"marketo_email_hard_bounced_date","comment":null,"description":"Date when the marketing contact email hard bounced","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":78,"name":"is_marketo_unsubscribed","comment":null,"description":"A flag indicating if a lead is unsubscribed in Marketo","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":79,"name":"is_marketo_opted_in","comment":null,"description":"Flag if a lead in marketo is opted in. This can be false and `has_marketo_unsubscribed` can be false as a lead could have started unsubscribed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":80,"name":"has_marketo_unsubscribed","comment":null,"description":"A flag to indicate if a lead in Marketo has been unsubscribed either the preference center or other method","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":81,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":82,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":83,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":84,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":85,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":86,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":87,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":88,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":89,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":90,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":91,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":92,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":93,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":94,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":95,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":96,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":97,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":98,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"IS_PQL":{"type":"BOOLEAN","index":99,"name":"IS_PQL","comment":null,"display_name":"is_pql"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":100,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PQL_CHANGE":{"type":"BOOLEAN","index":101,"name":"is_pql_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_pql flag is set to True OR the is_pql flag is set to False and the is_pql_marketo flag set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_pql_change"},"PQL_NAMESPACE_ID":{"type":"NUMBER","index":102,"name":"pql_namespace_id","comment":null,"description":"Namespace id of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_id"},"PQL_NAMESPACE_NAME":{"type":"TEXT","index":103,"name":"pql_namespace_name","comment":null,"description":"Namespace name of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_name"},"PQL_NAMESPACE_NAME_MASKED":{"type":"TEXT","index":104,"name":"pql_namespace_name_masked","comment":null,"description":"Masked version of PQL namespace_name. Field created to be used in mart_marketing_contact_no_pii.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_name_masked"},"PQL_PRODUCT_INTERACTION":{"type":"TEXT","index":105,"name":"pql_product_interaction","comment":null,"description":"Type of product interaction that the PQL had. As of now, it can either be SaaS Trial or Hand Raise PQL.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_product_interaction"},"PQL_LIST_STAGES":{"type":"ARRAY","index":106,"name":"pql_list_stages","comment":null,"description":"List of product stages adopted by the PQL namespace. It only counts the events done before any conversion was done (if any), SMAU events and events done in the first year of the creation of the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_list_stages"},"PQL_NBR_STAGES":{"type":"NUMBER","index":107,"name":"pql_nbr_stages","comment":null,"description":"Number of product stages adopted by the PQL namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_stages"},"PQL_NBR_NAMESPACE_USERS":{"type":"NUMBER","index":108,"name":"pql_nbr_namespace_users","comment":null,"description":"Current member count of the PQL namespace. This is calculated using the data in the Gitlab.com members table based on the number of accepted invites. If this number is zero, this is replaced to be 1 as all namespaces have at least one member, the creator.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_namespace_users"},"PQL_TRIAL_START_DATE":{"type":"DATE","index":109,"name":"pql_trial_start_date","comment":null,"description":"Trial start date of the PQL namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_trial_start_date"},"PQL_MIN_SUBSCRIPTION_START_DATE":{"type":"DATE","index":110,"name":"PQL_MIN_SUBSCRIPTION_START_DATE","comment":null,"display_name":"pql_min_subscription_start_date"},"PQL_EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":111,"name":"pql_event_created_at","comment":null,"description":"Date that the PQL lead was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_event_created_at"},"PQL_NBR_INTEGRATIONS_INSTALLED":{"type":"NUMBER","index":112,"name":"pql_nbr_integrations_installed","comment":null,"description":"Number of integrations services installed in the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_nbr_integrations_installed"},"PQL_INTEGRATIONS_INSTALLED":{"type":"ARRAY","index":113,"name":"pql_integrations_installed","comment":null,"description":"List of all the integrations services installed in the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_integrations_installed"},"PQL_NAMESPACE_CREATOR_JOB_DESCRIPTION":{"type":"TEXT","index":114,"name":"pql_namespace_creator_job_description","comment":null,"description":"Namespace creator job description of the latest PQL namespace of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pql_namespace_creator_job_description"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":115,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":116,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":117,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":118,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":119,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":120,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":121,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"IS_PTPT_CONTACT":{"type":"BOOLEAN","index":122,"name":"is_ptpt_contact","comment":null,"description":"Flag if marketing contact has a ptpt score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptpt_contact"},"IS_PTPT_CONTACT_CHANGE":{"type":"BOOLEAN","index":123,"name":"IS_PTPT_CONTACT_CHANGE","comment":null,"display_name":"is_ptpt_contact_change"},"PTPT_NAMESPACE_ID":{"type":"TEXT","index":124,"name":"ptpt_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase Trial score. More information on the propensity to purchase project can be seen [HERE](https://docs.google.com/presentation/d/1EyS9Wq6F0qlQwt5sj7x8VnSSGD1vIy3AcSpMGddZdbk/edit#slide=id.g13222807856_0_0)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_namespace_id"},"PTPT_SCORE_GROUP":{"type":"NUMBER","index":125,"name":"ptpt_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptpt_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_score_group"},"PTPT_INSIGHTS":{"type":"TEXT","index":126,"name":"ptpt_insights","comment":null,"description":"Top explanatory insights for the ptpt_namespace_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_insights"},"PTPT_SCORE_DATE":{"type":"DATE","index":127,"name":"ptpt_score_date","comment":null,"description":"Date the ptpt_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_score_date"},"PTPT_PAST_SCORE_GROUP":{"type":"NUMBER","index":128,"name":"ptpt_past_score_group","comment":null,"description":"Past ptpt_score_group given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_past_score_group"},"PTPT_PAST_SCORE_DATE":{"type":"DATE","index":129,"name":"ptpt_past_score_date","comment":null,"description":"Past ptpt_score_date given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpt_past_score_date"},"IS_PTPF_CONTACT":{"type":"BOOLEAN","index":130,"name":"is_ptpf_contact","comment":null,"description":"Flag if marketing contact has a ptpf score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptpf_contact"},"PTPF_NAMESPACE_ID":{"type":"TEXT","index":131,"name":"ptpf_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase Free score.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_namespace_id"},"PTPF_SCORE_GROUP":{"type":"NUMBER","index":132,"name":"ptpf_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptpf_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_score_group"},"PTPF_SCORE_DATE":{"type":"DATE","index":133,"name":"ptpf_score_date","comment":null,"description":"Date the ptpf_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_score_date"},"PTPF_PAST_SCORE_GROUP":{"type":"NUMBER","index":134,"name":"ptpf_past_score_group","comment":null,"description":"Past ptpf_score_group given to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_past_score_group"},"PTPF_PAST_SCORE_DATE":{"type":"DATE","index":135,"name":"ptpf_past_score_date","comment":null,"description":"Past ptpf_score_date givene to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptpf_past_score_date"},"IS_PTP_CONTACT":{"type":"BOOLEAN","index":136,"name":"is_ptp_contact","comment":null,"description":"Flag if marketing contact has a ptp score","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptp_contact"},"IS_PTP_CONTACT_CHANGE":{"type":"BOOLEAN","index":137,"name":"is_ptp_contact_change","comment":null,"description":"This is a flag designed to keep Marketo in sync with the marketing database. If True, the marketing contact is_ptp_contact flag is set to True OR the is_ptp_contact flag is set to False and the is_ptp_contact_marketo flag set to True (which means that it needs to be updated in Marketo)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_ptp_contact_change"},"PTP_NAMESPACE_ID":{"type":"TEXT","index":138,"name":"ptp_namespace_id","comment":null,"description":"Namespace id which corresponds to the propensity to purchase score. This is in turn a combination of the ptpt and ptpf scores and is the score that will be ultimately shown in SFDC. More information on how the scores where combined can be found in the documentation of the prep_ptp_scores_by_user dbt model.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_namespace_id"},"PTP_SCORE_GROUP":{"type":"NUMBER","index":139,"name":"ptp_score_group","comment":null,"description":"1-5 value which condenses the likelihood to convert the ptp_namespace_id to paid. The higher the value the more likely the conversion.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_score_group"},"PTP_SCORE_DATE":{"type":"DATE","index":140,"name":"ptp_score_date","comment":null,"description":"Date the ptp_score_group was last updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_score_date"},"PTP_INSIGHTS":{"type":"TEXT","index":141,"name":"ptp_insights","comment":null,"description":"Top explanatory insights for the ptp_namespace_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_insights"},"PTP_PAST_INSIGHTS":{"type":"TEXT","index":142,"name":"ptp_past_insights","comment":null,"description":"Top explanatory insights for the past score given to the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_insights"},"PTP_PAST_SCORE_GROUP":{"type":"NUMBER","index":143,"name":"ptp_past_score_group","comment":null,"description":"Past ptp_score_group assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_score_group"},"PTP_PAST_SCORE_DATE":{"type":"DATE","index":144,"name":"ptp_past_score_date","comment":null,"description":"Past ptp_score_date assigned to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_past_score_date"},"PTP_DAYS_SINCE_TRIAL_START":{"type":"TEXT","index":145,"name":"ptp_days_since_trial_start","comment":null,"description":"Days since last trial started. Currently, only filled for marketing contacts with `ptp_source = Free`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_days_since_trial_start"},"PTP_SOURCE":{"type":"TEXT","index":146,"name":"ptp_source","comment":null,"description":"The source of the score. Currently, only two values are possible, Free (PtPF model) or Trial (PtPT model)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptp_source"},"USER_LIMIT_NAMESPACE_ID":{"type":"NUMBER","index":147,"name":"user_limit_namespace_id","comment":null,"description":"Namespace id corresponding to the user limit campaign","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_namespace_id"},"USER_LIMIT_NOTIFICATION_AT":{"type":"TIMESTAMP_NTZ","index":148,"name":"user_limit_notification_at","comment":null,"description":"Date time indicating when the marketing contact user_limit_namespace_id entered the user limit notification state. More information about this field can be seen [HERE](https://gitlab.com/gitlab-org/gitlab/-/issues/375748)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_notification_at"},"USER_LIMIT_ENFORCEMENT_AT":{"type":"TIMESTAMP_NTZ","index":149,"name":"user_limit_enforcement_at","comment":null,"description":"Date time indicating when the marketing contact user_limit_namespace_id entered the user limit enforcement state. More information about this field can be seen [HERE](https://gitlab.com/gitlab-org/gitlab/-/issues/375748)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_limit_enforcement_at"},"IS_IMPACTED_BY_USER_LIMIT":{"type":"BOOLEAN","index":150,"name":"is_impacted_by_user_limit","comment":null,"description":"Flag that indicates if marketing contact is affected by namespace user limit campaign","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_impacted_by_user_limit"},"IS_IMPACTED_BY_USER_LIMIT_CHANGE":{"type":"BOOLEAN","index":151,"name":"IS_IMPACTED_BY_USER_LIMIT_CHANGE","comment":null,"display_name":"is_impacted_by_user_limit_change"},"USAGE_UMAU_28_DAYS_USER":{"type":"NUMBER","index":152,"name":"USAGE_UMAU_28_DAYS_USER","comment":null,"display_name":"usage_umau_28_days_user"},"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":153,"name":"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"usage_action_monthly_active_users_project_repo_28_days_user"},"USAGE_MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":154,"name":"USAGE_MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"usage_merge_requests_28_days_user"},"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":155,"name":"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"usage_commit_comment_all_time_event"},"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":156,"name":"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"usage_source_code_pushes_all_time_event"},"USAGE_CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":157,"name":"USAGE_CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipelines_28_days_user"},"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":158,"name":"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_internal_pipelines_28_days_user"},"USAGE_CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":159,"name":"USAGE_CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"usage_ci_builds_28_days_user"},"USAGE_CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":160,"name":"USAGE_CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"usage_ci_builds_all_time_user"},"USAGE_CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":161,"name":"USAGE_CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_builds_all_time_event"},"USAGE_CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":162,"name":"USAGE_CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_runners_all_time_event"},"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":163,"name":"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"usage_auto_devops_enabled_all_time_event"},"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":164,"name":"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"usage_template_repositories_all_time_event"},"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":165,"name":"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipeline_config_repository_28_days_user"},"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":166,"name":"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"usage_user_unique_users_all_secure_scanners_28_days_user"},"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":167,"name":"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_container_scanning_jobs_28_days_user"},"USAGE_USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":168,"name":"USAGE_USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_sast_jobs_28_days_user"},"USAGE_USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":169,"name":"USAGE_USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dast_jobs_28_days_user"},"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":170,"name":"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dependency_scanning_jobs_28_days_user"},"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":171,"name":"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_license_management_jobs_28_days_user"},"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":172,"name":"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_secret_detection_jobs_28_days_user"},"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":173,"name":"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"usage_projects_with_packages_all_time_event"},"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":174,"name":"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"usage_projects_with_packages_28_days_event"},"USAGE_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":175,"name":"USAGE_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"usage_deployments_28_days_user"},"USAGE_RELEASES_28_DAYS_USER":{"type":"NUMBER","index":176,"name":"USAGE_RELEASES_28_DAYS_USER","comment":null,"display_name":"usage_releases_28_days_user"},"USAGE_EPICS_28_DAYS_USER":{"type":"NUMBER","index":177,"name":"USAGE_EPICS_28_DAYS_USER","comment":null,"display_name":"usage_epics_28_days_user"},"USAGE_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":178,"name":"USAGE_ISSUES_28_DAYS_USER","comment":null,"display_name":"usage_issues_28_days_user"},"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED":{"type":"NUMBER","index":179,"name":"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED","comment":null,"display_name":"usage_instance_user_count_not_aligned"},"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED":{"type":"NUMBER","index":180,"name":"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED","comment":null,"display_name":"usage_historical_max_users_not_aligned"},"LEAD_STATUS":{"type":"TEXT","index":181,"name":"LEAD_STATUS","comment":null,"display_name":"lead_status"},"LEAD_SOURCE":{"type":"TEXT","index":182,"name":"LEAD_SOURCE","comment":null,"display_name":"lead_source"},"PREV_HASH":{"type":"TEXT","index":183,"name":"PREV_HASH","comment":null,"display_name":"prev_hash"},"LAST_CHANGED":{"type":"TIMESTAMP_LTZ","index":184,"name":"LAST_CHANGED","comment":null,"display_name":"last_changed"},"CREATED_BY":{"type":"TEXT","index":185,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":186,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":187,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":188,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":189,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":190,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"role_tier_text":{"name":"role_tier_text","description":"Json array of the person's roles and product tiers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role_tier_text"},"role_tier_namespace_text":{"name":"role_tier_namespace_text","description":"Json array of the person's roles and namespaces and product tiers","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role_tier_namespace_text"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2033378816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_marketing_contact","raw_sql":"$14","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.hash_diff","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.bdg_marketing_contact_order","model.gitlab_snowflake.bdg_marketing_contact_order","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_ptpt_scores_by_user","model.gitlab_snowflake.prep_ptpt_scores_by_user","model.gitlab_snowflake.prep_ptpf_scores_by_user","model.gitlab_snowflake.prep_ptpf_scores_by_user","model.gitlab_snowflake.prep_ptp_scores_by_user","model.gitlab_snowflake.prep_ptp_scores_by_user","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","mart_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/mart_marketing_contact.sql","original_file_path":"models/common/sensitive/mart_marketing_contact.sql","name":"mart_marketing_contact","alias":"mart_marketing_contact","checksum":{"name":"sha256","checksum":"82f4387b0d23609d1e098201843c1ab45ea28ba701ac9a5eab34193c76ed905d"},"tags":["product"],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["bdg_marketing_contact_order"],["bdg_marketing_contact_order"],["dim_namespace"],["dim_namespace"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["customers_db_charges_xf"],["customers_db_charges_xf"],["customers_db_trials"],["customers_db_trials"],["customers_db_leads_source"],["customers_db_leads_source"],["fct_event_user_daily"],["fct_event_user_daily"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"],["prep_project"],["prep_project"],["prep_ptpt_scores_by_user"],["prep_ptpt_scores_by_user"],["prep_ptpf_scores_by_user"],["prep_ptpf_scores_by_user"],["prep_ptp_scores_by_user"],["prep_ptp_scores_by_user"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_namespace_details_source"]],"sources":[],"metrics":[],"description":"This table aggregates data from namespaces, orders, and subscriptions to the level of a marketing contact. Therefore a marketing contact can fall into multiple plan types. An individual could be a Free Individual namespace owner, a member of an Ultimate Group Namespace, and an Owner of a Premium Group Namespace. Each column aggregates data to answers a specific question at the contact level.\n\nAll the usage metrics, fields prefixed by `usage_` come from the latest month of data from the Self-Managed Usage Ping data. This data is related to marketing contact by the user that makes the order in the customers portal or the billing account related to the subscription_id  of the self-managed instance. In case there are multiple self-managed instances per user, then these are summed.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/mart_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["product"]},"created_at":1689033756.29843,"compiled_sql":"$15","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.mart_marketing_contact","label":"mart_marketing_contact"},{"metadata":{"type":"VIEW","schema":"SENSITIVE","name":"GITLAB_DOTCOM_USERS","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"USER_ID","comment":null,"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"ROLE_ID","comment":null,"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"ROLE","comment":null,"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('gitlab_dotcom_users_source') }}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","sensitive","gitlab_dotcom_users"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/sensitive/gitlab_dotcom_users.sql","original_file_path":"models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_users.sql","name":"gitlab_dotcom_users","alias":"gitlab_dotcom_users","checksum":{"name":"sha256","checksum":"22558de65430f94f48b3b102ab609868605c6838cc12f380b5f2ddc27c43ed16"},"tags":["product"],"refs":[["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/sensitive/gitlab_dotcom_users.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["product"]},"created_at":1689033715.2434313,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.gitlab_dotcom_users","label":"gitlab_dotcom_users"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ROLE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"USER_ID":{"type":"NUMBER","index":3,"name":"user_id","comment":null,"description":"GitLab.com user id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_id"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"customer_db_customer_id","comment":null,"description":"Customer DB customer id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"namespace_id","comment":null,"description":"Gitlab.com namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"ZUORA_BILLING_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"zuora_billing_account_id","comment":null,"description":"Zuora billing account id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_billing_account_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":7,"name":"marketing_contact_role","comment":null,"description":"Role of the marketing contact. A marketing contact can have many roles. Could be 'Personal Namespace Owner', Group Namespace Owner', 'Group Namespace Member', 'Group Namespace Maintainer', 'Customer DB Owner', 'Zuora Billing Contact'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketing_contact_role"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:33UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":814894080,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_role","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_role"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_role.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_role.sql","name":"bdg_marketing_contact_role","alias":"bdg_marketing_contact_role","checksum":{"name":"sha256","checksum":"e555905c1956abb5024b7a48afbad97f4bc0ee59f3e012af876674204fed8088"},"tags":[],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["dim_marketing_contact"],["dim_marketing_contact"],["prep_namespace"],["prep_namespace"]],"sources":[],"metrics":[],"description":"A bridge table that lists all roles for the marketing contacts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_role.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.216212,"compiled_sql":"$17","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_role","label":"bdg_marketing_contact_role"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"POC_PUMP_MARKETING_CONTACT_NAMESPACE_DETAIL","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"EMAIL_ADDRESS","comment":null,"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"COUNTRY":{"type":"TEXT","index":5,"name":"COUNTRY","comment":null,"display_name":"country"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"COMPANY_NAME","comment":null,"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"JOB_TITLE","comment":null,"display_name":"job_title"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":8,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_USER_NAME":{"type":"TEXT","index":9,"name":"GITLAB_USER_NAME","comment":null,"display_name":"gitlab_user_name"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":10,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":11,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":12,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":13,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":14,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"IS_PQL":{"type":"BOOLEAN","index":15,"name":"IS_PQL","comment":null,"display_name":"is_pql"},"MAX_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":16,"name":"max_trial_start_date","comment":null,"description":"The most recent trial start date across all the namespaces associated with the marketing_contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_trial_start_date"},"NAMESPACES_ARRAY":{"type":"ARRAY","index":17,"name":"namespaces_array","comment":null,"description":"$18","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespaces_array"},"PREV_HASH":{"type":"TEXT","index":18,"name":"PREV_HASH","comment":null,"display_name":"prev_hash"},"LAST_CHANGED":{"type":"TIMESTAMP_LTZ","index":19,"name":"LAST_CHANGED","comment":null,"display_name":"last_changed"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:50UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":318652416,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.poc_pump_marketing_contact_namespace_detail","raw_sql":"$19","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.hash_diff","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.ptpt_scores","model.gitlab_snowflake.ptpt_scores","model.gitlab_snowflake.ptpf_scores","model.gitlab_snowflake.ptpf_scores","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_namespace_details_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_charges_xf","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.fct_event_user_daily","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","poc_pump_marketing_contact_namespace_detail"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","original_file_path":"models/common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","name":"poc_pump_marketing_contact_namespace_detail","alias":"poc_pump_marketing_contact_namespace_detail","checksum":{"name":"sha256","checksum":"b4c6a11217caa9a515d07b42f1e6819823a5b4717d2314ade4e35276553606fd"},"tags":[],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["dim_namespace"],["dim_namespace"],["ptpt_scores"],["ptpt_scores"],["ptpf_scores"],["ptpf_scores"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_namespace_details_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_memberships"],["gitlab_dotcom_memberships"],["customers_db_trials"],["customers_db_trials"],["customers_db_charges_xf"],["customers_db_charges_xf"],["customers_db_leads_source"],["customers_db_leads_source"],["map_gitlab_dotcom_xmau_metrics"],["map_gitlab_dotcom_xmau_metrics"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"],["prep_project"],["prep_project"],["fct_event_user_daily"],["fct_event_user_daily"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table contains information of the marketing contact (email address) and namespace information for Gitlab.com users. The grain of the table is one row per email address, the namespace details are then stored in an array of JSON objects.  Only the ultimate parent namespaces are being synced into the namespace details array. If an user has access only to a subgroup of a ultimate parent namespace, the ultimate namespace is not linked to the ultimate namespace. For example, user A is a member of the sub group namespace 2. The ultimate parent namespace of namespace 2 is namespace 1. Since user A is only a direct member of namespace 2 and namespace 2 is not an ultimate namespace, user A has no namespaces listed in the namespace array list.  ","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/poc_pump_marketing_contact_namespace_detail.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.3011067,"compiled_sql":"$1a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.poc_pump_marketing_contact_namespace_detail","label":"poc_pump_marketing_contact_namespace_detail"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"DIM_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":5,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":8,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":9,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":10,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":11,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":12,"name":"MARKETO_LEAD_ID","comment":null,"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":13,"name":"IS_MARKETO_LEAD","comment":null,"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":14,"name":"IS_MARKETO_EMAIL_HARD_BOUNCED","comment":null,"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":15,"name":"MARKETO_EMAIL_HARD_BOUNCED_DATE","comment":null,"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":16,"name":"IS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":17,"name":"IS_MARKETO_OPTED_IN","comment":null,"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":18,"name":"HAS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":19,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":20,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":21,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PTPT_CONTACT_MARKETO":{"type":"BOOLEAN","index":22,"name":"IS_PTPT_CONTACT_MARKETO","comment":null,"display_name":"is_ptpt_contact_marketo"},"IS_PTP_CONTACT_MARKETO":{"type":"BOOLEAN","index":23,"name":"IS_PTP_CONTACT_MARKETO","comment":null,"display_name":"is_ptp_contact_marketo"},"IS_IMPACTED_BY_USER_LIMIT_MARKETO":{"type":"BOOLEAN","index":24,"name":"IS_IMPACTED_BY_USER_LIMIT_MARKETO","comment":null,"display_name":"is_impacted_by_user_limit_marketo"},"IS_CURRENTLY_IN_TRIAL_MARKETO":{"type":"BOOLEAN","index":25,"name":"IS_CURRENTLY_IN_TRIAL_MARKETO","comment":null,"display_name":"is_currently_in_trial_marketo"},"TRIAL_START_DATE_MARKETO":{"type":"DATE","index":26,"name":"TRIAL_START_DATE_MARKETO","comment":null,"display_name":"trial_start_date_marketo"},"TRIAL_END_DATE_MARKETO":{"type":"DATE","index":27,"name":"TRIAL_END_DATE_MARKETO","comment":null,"display_name":"trial_end_date_marketo"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":28,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_RECORD_ID":{"type":"TEXT","index":29,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":30,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":31,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"MOBILE_PHONE":{"type":"TEXT","index":32,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":33,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":34,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":35,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":36,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":37,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":38,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":39,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":40,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":41,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":42,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":43,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":44,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":45,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":46,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":47,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":48,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":49,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":50,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":51,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":52,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":53,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"DNC_LIST_RESULT":{"type":"TEXT","index":54,"name":"DNC_LIST_RESULT","comment":null,"display_name":"dnc_list_result"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":55,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":56,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"CREATED_BY":{"type":"TEXT","index":57,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1261721088,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_marketing_contact","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.days_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","dim_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/dim_marketing_contact.sql","original_file_path":"models/common/sensitive/dim_marketing_contact.sql","name":"dim_marketing_contact","alias":"dim_marketing_contact","checksum":{"name":"sha256","checksum":"2cf8e313c4a64673b3780dac0bcffd6f46d21244d42c4263aba32674d460b42c"},"tags":[],"refs":[["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_account_source"],["sfdc_account_source"],["marketo_lead_source"],["marketo_lead_source"],["dim_crm_account"],["dim_crm_account"],["prep_sales_segment"],["prep_sales_segment"],["prep_crm_person"],["prep_crm_person"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_account_source"],["zuora_account_source"],["driveload_marketing_dnc_list_source"],["driveload_marketing_dnc_list_source"]],"sources":[],"metrics":[],"description":"A dimension table for marketing contacts, combining contacts from GitLab.com, Salesforce, CustomerDB, and Zuora Sources.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/dim_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.211765,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.dim_marketing_contact","label":"dim_marketing_contact"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_OPS_PROJECTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_ID":{"type":"NUMBER","index":1,"name":"project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"project_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"PROJECT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"PROJECT_CREATED_AT","comment":null,"display_name":"project_created_at"},"PROJECT_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"PROJECT_UPDATED_AT","comment":null,"display_name":"project_updated_at"},"CREATOR_ID":{"type":"NUMBER","index":5,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":8,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"ARCHIVED":{"type":"BOOLEAN","index":9,"name":"ARCHIVED","comment":null,"display_name":"archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":10,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":11,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":12,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":13,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":14,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":15,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":16,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":17,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":18,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":19,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":20,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":21,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":22,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":23,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":24,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":25,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":27,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":28,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":29,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":30,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":31,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":32,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":33,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":34,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":35,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":36,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":37,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":38,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":39,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":40,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":41,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":42,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":43,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":44,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":45,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":46,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":47,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":48,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":49,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":50,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":51,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":52,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":53,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":54,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":55,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":56,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":57,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"MEMBER_COUNT":{"type":"NUMBER","index":58,"name":"member_count","comment":null,"description":"The number of members that are presently associated with the project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:03UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1088512,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_ops_projects_xf","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_ops_projects","model.gitlab_snowflake.gitlab_ops_projects","model.gitlab_snowflake.gitlab_ops_members","model.gitlab_snowflake.gitlab_ops_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_ops","xf","gitlab_ops_projects_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_ops/xf/gitlab_ops_projects_xf.sql","original_file_path":"models/legacy/gitlab_ops/xf/gitlab_ops_projects_xf.sql","name":"gitlab_ops_projects_xf","alias":"gitlab_ops_projects_xf","checksum":{"name":"sha256","checksum":"94c7e343619b266ef02b0b7a3c8d935f2907e33b453ef595fe4eb62d04f429e0"},"tags":[],"refs":[["gitlab_ops_projects"],["gitlab_ops_projects"],["gitlab_ops_members"],["gitlab_ops_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This data model contains the data for the project table in the ops.gitlab.net database","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_ops/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_ops/xf/gitlab_ops_projects_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033760.2731044,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_ops_projects_xf","label":"gitlab_ops_projects_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_PROJECTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_ID":{"type":"NUMBER","index":1,"name":"project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"project_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"PROJECT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"PROJECT_CREATED_AT","comment":null,"display_name":"project_created_at"},"PROJECT_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"PROJECT_UPDATED_AT","comment":null,"display_name":"project_updated_at"},"CREATOR_ID":{"type":"NUMBER","index":5,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":8,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"ARCHIVED":{"type":"BOOLEAN","index":9,"name":"ARCHIVED","comment":null,"display_name":"archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":10,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":11,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":12,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":13,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":14,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":15,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":16,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":17,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":18,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":19,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":20,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":21,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":22,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":23,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":24,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":25,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":27,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":28,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":29,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":30,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":31,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":32,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":33,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":34,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":35,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":36,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":37,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":38,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":39,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":40,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":41,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":42,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":43,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":44,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":45,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":46,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":47,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":48,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":49,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"IS_LEARN_GITLAB":{"type":"BOOLEAN","index":50,"name":"IS_LEARN_GITLAB","comment":null,"display_name":"is_learn_gitlab"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":51,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":52,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":53,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":54,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":55,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":56,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":57,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":58,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"NAMESPACE_NAME":{"type":"TEXT","index":59,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":60,"name":"NAMESPACE_PATH","comment":null,"display_name":"namespace_path"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":61,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"NAMESPACE_PLAN_ID":{"type":"NUMBER","index":62,"name":"NAMESPACE_PLAN_ID","comment":null,"display_name":"namespace_plan_id"},"NAMESPACE_PLAN_TITLE":{"type":"TEXT","index":63,"name":"NAMESPACE_PLAN_TITLE","comment":null,"display_name":"namespace_plan_title"},"NAMESPACE_PLAN_IS_PAID":{"type":"BOOLEAN","index":64,"name":"namespace_plan_is_paid","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_is_paid"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":65,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":66,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":67,"name":"ULTIMATE_PARENT_PLAN_TITLE","comment":null,"display_name":"ultimate_parent_plan_title"},"ULTIMATE_PARENT_PLAN_IS_PAID":{"type":"BOOLEAN","index":68,"name":"ULTIMATE_PARENT_PLAN_IS_PAID","comment":null,"display_name":"ultimate_parent_plan_is_paid"},"PLAN_ID_AT_PROJECT_CREATION":{"type":"TEXT","index":69,"name":"PLAN_ID_AT_PROJECT_CREATION","comment":null,"display_name":"plan_id_at_project_creation"},"PROJECT_TEMPLATE":{"type":"TEXT","index":70,"name":"PROJECT_TEMPLATE","comment":null,"display_name":"project_template"},"ACTIVE_SERVICE_TYPES":{"type":"ARRAY","index":71,"name":"active_service_types","comment":null,"description":"The types of services currently active and associated with the project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"active_service_types"},"MEMBER_COUNT":{"type":"NUMBER","index":72,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"},"namespace_plan_id_at_project_creation":{"name":"namespace_plan_id_at_project_creation","description":"This column represents the gitlab_subscription plan_id (2, 3, 4, 34 or 'trial') of the namespace at the time that the object (issue, project, merge request) was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_id_at_project_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":3024472576,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_projects_xf","raw_sql":"$1f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_integrations","model.gitlab_snowflake.gitlab_dotcom_integrations"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_projects_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_projects_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_projects_xf.sql","name":"gitlab_dotcom_projects_xf","alias":"gitlab_dotcom_projects_xf","checksum":{"name":"sha256","checksum":"b9349af7b355d7efdaef3c5165139e20d92798c5753283034d4e2c53750ed51c"},"tags":["product"],"refs":[["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_members"],["gitlab_dotcom_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_integrations"],["gitlab_dotcom_integrations"]],"sources":[],"metrics":[],"description":"Includes all columns from the projects base model.\nAdds the count of members associated with the project.\nAdds a boolean column, `namespaces_plan_is_paid`, to provide extra context.\nAdds additional information about the associated namespace (name and path).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_projects_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3915958,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_projects_xf","label":"gitlab_dotcom_projects_xf"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_USER_SK":{"type":"TEXT","index":1,"name":"DIM_USER_SK","comment":null,"display_name":"dim_user_sk"},"USER_ID":{"type":"NUMBER","index":2,"name":"USER_ID","comment":null,"display_name":"user_id"},"DIM_USER_ID":{"type":"NUMBER","index":3,"name":"dim_user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":5,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":9,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":11,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"USER_STATE":{"type":"TEXT","index":12,"name":"USER_STATE","comment":null,"display_name":"user_state"},"IS_BLOCKED_USER":{"type":"BOOLEAN","index":13,"name":"is_blocked_user","comment":null,"description":"TRUE if user_state is one of 'blocked' or 'banned', otherwise FALSE","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_blocked_user"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":14,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"NOTIFICATION_EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":15,"name":"NOTIFICATION_EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"notification_email_domain_classification"},"EMAIL_DOMAIN":{"type":"TEXT","index":16,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":17,"name":"EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"email_domain_classification"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":18,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"PUBLIC_EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":19,"name":"PUBLIC_EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"public_email_domain_classification"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":20,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"COMMIT_EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":21,"name":"COMMIT_EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"commit_email_domain_classification"},"IDENTITY_PROVIDER":{"type":"TEXT","index":22,"name":"IDENTITY_PROVIDER","comment":null,"display_name":"identity_provider"},"ROLE":{"type":"TEXT","index":23,"name":"role","comment":null,"description":"User role in company selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role"},"LAST_ACTIVITY_DATE":{"type":"TEXT","index":24,"name":"last_activity_date","comment":null,"description":"Date of last User Activity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_activity_date"},"LAST_SIGN_IN_DATE":{"type":"TEXT","index":25,"name":"last_sign_in_date","comment":null,"description":"Last time the User signed in","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_sign_in_date"},"SETUP_FOR_COMPANY":{"type":"TEXT","index":26,"name":"setup_for_company","comment":null,"description":"Is the Product setup for Company use selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"setup_for_company"},"JOBS_TO_BE_DONE":{"type":"TEXT","index":27,"name":"jobs_to_be_done","comment":null,"description":"What the product is used for","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"jobs_to_be_done"},"FOR_BUSINESS_USE":{"type":"TEXT","index":28,"name":"for_business_use","comment":null,"description":"Product is used for Business selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"for_business_use"},"EMPLOYEE_COUNT":{"type":"TEXT","index":29,"name":"employee_count","comment":null,"description":"Number of employees selected during registraion","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"employee_count"},"COUNTRY":{"type":"TEXT","index":30,"name":"country","comment":null,"description":"User Country selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"STATE":{"type":"TEXT","index":31,"name":"state","comment":null,"description":"A state that is part of the given country selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"state"},"CREATED_BY":{"type":"TEXT","index":32,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":33,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":34,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":35,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":37,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:20UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1028433408,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_user","raw_sql":"$21","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.driveload_email_domain_classification_source","model.gitlab_snowflake.driveload_email_domain_classification_source","model.gitlab_snowflake.gitlab_dotcom_identities_source","model.gitlab_snowflake.gitlab_dotcom_identities_source","model.gitlab_snowflake.gitlab_dotcom_user_preferences_source","model.gitlab_snowflake.gitlab_dotcom_user_preferences_source","model.gitlab_snowflake.gitlab_dotcom_user_details_source","model.gitlab_snowflake.gitlab_dotcom_user_details_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_user_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_user.sql","original_file_path":"models/common_prep/prep_user.sql","name":"prep_user","alias":"prep_user","checksum":{"name":"sha256","checksum":"6e337de8734a9b8a0a67b7b6e46880cfb6293a1665a09e683e831215df6100f9"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["driveload_email_domain_classification_source"],["driveload_email_domain_classification_source"],["gitlab_dotcom_identities_source"],["gitlab_dotcom_identities_source"],["gitlab_dotcom_user_preferences_source"],["gitlab_dotcom_user_preferences_source"],["gitlab_dotcom_user_details_source"],["gitlab_dotcom_user_details_source"],["customers_db_leads_source"],["customers_db_leads_source"]],"sources":[],"metrics":[],"description":"Prep table for the dim table `dim_user`.\n\nThis table is currently the first iteration. This is a relatively narrow table. A lot of metadata needs to be added.\n\nMissing Column Values:\n* Unknown - Value is Null in source data\n* Not Found - Row Not found in source data\nThe following Columns have a Varchar Data Type and are set up to handle Missing Column Values:      \n* role \n* last_activity_date             \n* last_sign_in_date \n* setup_for_company       \n* jobs_to_be_done\n* for_business_use                 \n* employee_count\n* country\n* state","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"],"unique_key":"dim_user_id"},"created_at":1689033756.6662312,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_user","label":"prep_user"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_MERGE_REQUESTS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_ID":{"type":"NUMBER","index":1,"name":"merge_request_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_id"},"MERGE_REQUEST_IID":{"type":"NUMBER","index":2,"name":"MERGE_REQUEST_IID","comment":null,"display_name":"merge_request_iid"},"MERGE_REQUEST_TITLE":{"type":"TEXT","index":3,"name":"MERGE_REQUEST_TITLE","comment":null,"display_name":"merge_request_title"},"IS_MERGE_TO_MASTER":{"type":"BOOLEAN","index":4,"name":"IS_MERGE_TO_MASTER","comment":null,"display_name":"is_merge_to_master"},"MERGE_ERROR":{"type":"TEXT","index":5,"name":"MERGE_ERROR","comment":null,"display_name":"merge_error"},"ASSIGNEE_ID":{"type":"NUMBER","index":6,"name":"ASSIGNEE_ID","comment":null,"display_name":"assignee_id"},"UPDATED_BY_ID":{"type":"NUMBER","index":7,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"MERGE_USER_ID":{"type":"NUMBER","index":8,"name":"MERGE_USER_ID","comment":null,"display_name":"merge_user_id"},"LAST_EDITED_BY_ID":{"type":"NUMBER","index":9,"name":"LAST_EDITED_BY_ID","comment":null,"display_name":"last_edited_by_id"},"MILESTONE_ID":{"type":"NUMBER","index":10,"name":"MILESTONE_ID","comment":null,"display_name":"milestone_id"},"HEAD_PIPELINE_ID":{"type":"NUMBER","index":11,"name":"HEAD_PIPELINE_ID","comment":null,"display_name":"head_pipeline_id"},"LATEST_MERGE_REQUEST_DIFF_ID":{"type":"NUMBER","index":12,"name":"LATEST_MERGE_REQUEST_DIFF_ID","comment":null,"display_name":"latest_merge_request_diff_id"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":13,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"LOCK_VERSION":{"type":"NUMBER","index":14,"name":"LOCK_VERSION","comment":null,"display_name":"lock_version"},"TIME_ESTIMATE":{"type":"NUMBER","index":15,"name":"TIME_ESTIMATE","comment":null,"display_name":"time_estimate"},"PROJECT_ID":{"type":"NUMBER","index":16,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"TARGET_PROJECT_ID":{"type":"NUMBER","index":17,"name":"TARGET_PROJECT_ID","comment":null,"display_name":"target_project_id"},"AUTHOR_ID":{"type":"NUMBER","index":18,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"MERGE_REQUEST_STATE_ID":{"type":"NUMBER","index":19,"name":"MERGE_REQUEST_STATE_ID","comment":null,"display_name":"merge_request_state_id"},"MERGE_REQUEST_STATE":{"type":"TEXT","index":20,"name":"MERGE_REQUEST_STATE","comment":null,"display_name":"merge_request_state"},"MERGE_REQUEST_STATUS":{"type":"TEXT","index":21,"name":"MERGE_REQUEST_STATUS","comment":null,"display_name":"merge_request_status"},"DOES_MERGE_WHEN_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":22,"name":"DOES_MERGE_WHEN_PIPELINE_SUCCEEDS","comment":null,"display_name":"does_merge_when_pipeline_succeeds"},"DOES_SQUASH":{"type":"BOOLEAN","index":23,"name":"DOES_SQUASH","comment":null,"display_name":"does_squash"},"IS_DISCUSSION_LOCKED":{"type":"BOOLEAN","index":24,"name":"IS_DISCUSSION_LOCKED","comment":null,"display_name":"is_discussion_locked"},"DOES_ALLOW_MAINTAINER_TO_PUSH":{"type":"BOOLEAN","index":25,"name":"DOES_ALLOW_MAINTAINER_TO_PUSH","comment":null,"display_name":"does_allow_maintainer_to_push"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":27,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"MERGE_REQUEST_LAST_EDITED_AT":{"type":"TIMESTAMP_NTZ","index":28,"name":"MERGE_REQUEST_LAST_EDITED_AT","comment":null,"display_name":"merge_request_last_edited_at"},"MERGE_REQUEST_DESCRIPTION":{"type":"TEXT","index":29,"name":"MERGE_REQUEST_DESCRIPTION","comment":null,"display_name":"merge_request_description"},"MERGE_REQUEST_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":30,"name":"MERGE_REQUEST_CREATED_AT","comment":null,"display_name":"merge_request_created_at"},"MERGE_REQUEST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":31,"name":"MERGE_REQUEST_UPDATED_AT","comment":null,"display_name":"merge_request_updated_at"},"MILESTONE_TITLE":{"type":"TEXT","index":32,"name":"MILESTONE_TITLE","comment":null,"display_name":"milestone_title"},"MILESTONE_DESCRIPTION":{"type":"TEXT","index":33,"name":"MILESTONE_DESCRIPTION","comment":null,"display_name":"milestone_description"},"NAMESPACE_ID":{"type":"NUMBER","index":34,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":35,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":36,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":37,"name":"ULTIMATE_PARENT_PLAN_TITLE","comment":null,"display_name":"ultimate_parent_plan_title"},"ULTIMATE_PARENT_PLAN_IS_PAID":{"type":"BOOLEAN","index":38,"name":"ULTIMATE_PARENT_PLAN_IS_PAID","comment":null,"display_name":"ultimate_parent_plan_is_paid"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":39,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"AUTHOR_NAMESPACE_PATH":{"type":"TEXT","index":40,"name":"AUTHOR_NAMESPACE_PATH","comment":null,"display_name":"author_namespace_path"},"MASKED_LABEL_TITLE":{"type":"TEXT","index":41,"name":"MASKED_LABEL_TITLE","comment":null,"display_name":"masked_label_title"},"LABELS":{"type":"ARRAY","index":42,"name":"LABELS","comment":null,"display_name":"labels"},"MERGED_AT":{"type":"TIMESTAMP_NTZ","index":43,"name":"MERGED_AT","comment":null,"display_name":"merged_at"},"IS_INCLUDED_IN_ENGINEERING_METRICS":{"type":"BOOLEAN","index":44,"name":"IS_INCLUDED_IN_ENGINEERING_METRICS","comment":null,"display_name":"is_included_in_engineering_metrics"},"IS_PART_OF_PRODUCT":{"type":"BOOLEAN","index":45,"name":"IS_PART_OF_PRODUCT","comment":null,"display_name":"is_part_of_product"},"IS_COMMUNITY_CONTRIBUTOR_RELATED":{"type":"BOOLEAN","index":46,"name":"is_community_contributor_related","comment":null,"description":"Merge Request has 'community contribution' tag, and is on a project in the gitlab.org namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_community_contributor_related"},"HOURS_TO_MERGED_STATUS":{"type":"NUMBER","index":47,"name":"HOURS_TO_MERGED_STATUS","comment":null,"display_name":"hours_to_merged_status"},"TOTAL_CHECKBOXES":{"type":"NUMBER","index":48,"name":"total_checkboxes","comment":null,"description":"The number of checkbox tasks included in the description of the Merge Request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_checkboxes"},"COMPLETED_CHECKBOXES":{"type":"NUMBER","index":49,"name":"completed_checkboxes","comment":null,"description":"The number of checkbox tasks marked as completed in the description of the Merge Request","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"completed_checkboxes"},"PLAN_ID_AT_MERGE_REQUEST_CREATION":{"type":"TEXT","index":50,"name":"PLAN_ID_AT_MERGE_REQUEST_CREATION","comment":null,"display_name":"plan_id_at_merge_request_creation"},"namespace_plan_id_at_merge_request_creation":{"name":"namespace_plan_id_at_merge_request_creation","description":"This column represents the gitlab_subscription plan_id (2, 3, 4, 34 or 'trial') of the namespace at the time that the object (issue, project, merge request) was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_id_at_merge_request_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:39UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34970484736,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_requests_xf","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.is_project_included_in_engineering_metrics","macro.gitlab_snowflake.is_project_part_of_product","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.projects_part_of_product","seed.gitlab_snowflake.projects_part_of_product","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_label_links","model.gitlab_snowflake.gitlab_dotcom_label_links","model.gitlab_snowflake.gitlab_dotcom_labels_xf","model.gitlab_snowflake.gitlab_dotcom_labels_xf","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_merge_request_metrics","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_merge_requests_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_xf.sql","name":"gitlab_dotcom_merge_requests_xf","alias":"gitlab_dotcom_merge_requests_xf","checksum":{"name":"sha256","checksum":"2a388f408b46909f19455c1e2e4b59860e9f52fe3ddcf09b64c063cbbb60db09"},"tags":["product"],"refs":[["engineering_productivity_metrics_projects_to_include"],["engineering_productivity_metrics_projects_to_include"],["projects_part_of_product"],["projects_part_of_product"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_label_links"],["gitlab_dotcom_label_links"],["gitlab_dotcom_labels_xf"],["gitlab_dotcom_labels_xf"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_merge_request_metrics"],["gitlab_dotcom_milestones"],["gitlab_dotcom_milestones"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"]],"sources":[],"metrics":[],"description":"$24","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_requests_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3694623,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_merge_requests_xf","label":"gitlab_dotcom_merge_requests_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USAGE_DATA_NOTES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_PRIMARY_KEY":{"type":"TEXT","index":1,"name":"event_primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"event_primary_key"},"EVENT_NAME":{"type":"TEXT","index":2,"name":"event_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_name"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"IS_BLOCKED_NAMESPACE":{"type":"BOOLEAN","index":5,"name":"is_blocked_namespace","comment":null,"description":"boolean flag set to TRUE if the creator of the namespace is a blocked user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_blocked_namespace"},"USER_ID":{"type":"NUMBER","index":6,"name":"USER_ID","comment":null,"display_name":"user_id"},"PARENT_TYPE":{"type":"TEXT","index":7,"name":"PARENT_TYPE","comment":null,"display_name":"parent_type"},"PARENT_ID":{"type":"NUMBER","index":8,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"PARENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"PARENT_CREATED_AT","comment":null,"display_name":"parent_created_at"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":10,"name":"PROJECT_IS_LEARN_GITLAB","comment":null,"display_name":"project_is_learn_gitlab"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":11,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"event_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_created_at"},"IS_REPRESENTATIVE_OF_STAGE":{"type":"BOOLEAN","index":13,"name":"is_representative_of_stage","comment":null,"description":"This column represents whether or not this action represents being active for the entire stage. One action per stage has this designation.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_representative_of_stage"},"STAGE_NAME":{"type":"TEXT","index":14,"name":"stage_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":15,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":16,"name":"PLAN_NAME_AT_EVENT_DATE","comment":null,"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":17,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"DAYS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":19,"name":"DAYS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"days_since_namespace_creation"},"WEEKS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":20,"name":"WEEKS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"weeks_since_namespace_creation"},"DAYS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":21,"name":"DAYS_SINCE_PARENT_CREATION","comment":null,"display_name":"days_since_parent_creation"},"WEEKS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":22,"name":"WEEKS_SINCE_PARENT_CREATION","comment":null,"display_name":"weeks_since_parent_creation"},"DAYS_SINCE_USER_CREATION":{"type":"NUMBER","index":23,"name":"DAYS_SINCE_USER_CREATION","comment":null,"display_name":"days_since_user_creation"},"WEEKS_SINCE_USER_CREATION":{"type":"NUMBER","index":24,"name":"WEEKS_SINCE_USER_CREATION","comment":null,"display_name":"weeks_since_user_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:29UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":55766885888,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_usage_data_notes","raw_sql":"$26","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_epic_notes_xf","model.gitlab_snowflake.gitlab_dotcom_epic_notes_xf","model.gitlab_snowflake.temp_gitlab_dotcom_notes_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_notes_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_notes_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_notes_filtered","model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"event_primary_key","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","automatic_clustering":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_usage_data_notes"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_notes.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_notes.sql","name":"gitlab_dotcom_usage_data_notes","alias":"gitlab_dotcom_usage_data_notes","checksum":{"name":"sha256","checksum":"97395d2f7e7b035d2f0b35d1e38e3e70aa2cf58aca464fe85f23581a7199e87c"},"tags":["product","mnpi_exception"],"refs":[["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_plans"],["gitlab_dotcom_plans"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_epic_notes_xf"],["gitlab_dotcom_epic_notes_xf"],["temp_gitlab_dotcom_notes_filtered"],["temp_gitlab_dotcom_notes_filtered"],["temp_gitlab_dotcom_notes_filtered"],["temp_gitlab_dotcom_notes_filtered"],["gitlab_dotcom_notes"],["gitlab_dotcom_notes"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table aggregates but does not manipulate a subset of columns from the notes related gitlab_dotcom database tables. These tables are populated directly from gitlab-dot-com variables. The calculated columns are `stage_name` and `event_name`.\n\nThis table was split out from `gitlab_dotcom_usage_data_events` in order to allow the model to complete in a reasonable time.\n\nThis data is associated to the top-most namespace/project level, not necessarily the level at which the event occurred.\n\nThe goal is to be able to reproduce the same usage dataset as the one sent weekly by self-managed instances to the version app.\n\nData Team notes:\n\nThe table normalizes all the gitlab_dotcom tables to always extract the same subset of column:\n* namespace_id, \n* namespace_created_at,\n* project_created_at,\n* event_created_at\n\nCurrently, the following tables are included in the model:\n\n* gitlab_dotcom_notes\n* gitlab_dotcom_epic_notes_xf","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_notes.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"event_primary_key","automatic_clustering":true},"created_at":1689033759.4260254,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_usage_data_notes","label":"gitlab_dotcom_usage_data_notes"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_ISSUES_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ISSUE_ID":{"type":"NUMBER","index":1,"name":"issue_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"issue_id"},"ISSUE_IID":{"type":"NUMBER","index":2,"name":"ISSUE_IID","comment":null,"display_name":"issue_iid"},"AUTHOR_ID":{"type":"NUMBER","index":3,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"PROJECT_ID":{"type":"NUMBER","index":4,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"MILESTONE_ID":{"type":"NUMBER","index":5,"name":"MILESTONE_ID","comment":null,"display_name":"milestone_id"},"SPRINT_ID":{"type":"NUMBER","index":6,"name":"SPRINT_ID","comment":null,"display_name":"sprint_id"},"UPDATED_BY_ID":{"type":"NUMBER","index":7,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"LAST_EDITED_BY_ID":{"type":"NUMBER","index":8,"name":"LAST_EDITED_BY_ID","comment":null,"display_name":"last_edited_by_id"},"MOVED_TO_ID":{"type":"NUMBER","index":9,"name":"MOVED_TO_ID","comment":null,"display_name":"moved_to_id"},"ISSUE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"ISSUE_CREATED_AT","comment":null,"display_name":"issue_created_at"},"ISSUE_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"ISSUE_UPDATED_AT","comment":null,"display_name":"issue_updated_at"},"ISSUE_LAST_EDITED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"ISSUE_LAST_EDITED_AT","comment":null,"display_name":"issue_last_edited_at"},"ISSUE_CLOSED_AT":{"type":"TIMESTAMP_NTZ","index":13,"name":"ISSUE_CLOSED_AT","comment":null,"display_name":"issue_closed_at"},"NAMESPACE_ID":{"type":"NUMBER","index":14,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"VISIBILITY_LEVEL":{"type":"TEXT","index":15,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"ISSUE_IS_CONFIDENTIAL":{"type":"BOOLEAN","index":16,"name":"ISSUE_IS_CONFIDENTIAL","comment":null,"display_name":"issue_is_confidential"},"ISSUE_TITLE":{"type":"TEXT","index":17,"name":"issue_title","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issue_title"},"ISSUE_DESCRIPTION":{"type":"TEXT","index":18,"name":"issue_description","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"issue_description"},"IS_COMMUNITY_CONTRIBUTOR_RELATED":{"type":"BOOLEAN","index":19,"name":"IS_COMMUNITY_CONTRIBUTOR_RELATED","comment":null,"display_name":"is_community_contributor_related"},"SEVERITY_TAG":{"type":"TEXT","index":20,"name":"SEVERITY_TAG","comment":null,"display_name":"severity_tag"},"PRIORITY_TAG":{"type":"TEXT","index":21,"name":"PRIORITY_TAG","comment":null,"display_name":"priority_tag"},"IS_SECURITY_ISSUE":{"type":"BOOLEAN","index":22,"name":"IS_SECURITY_ISSUE","comment":null,"display_name":"is_security_issue"},"IS_INCLUDED_IN_ENGINEERING_METRICS":{"type":"BOOLEAN","index":23,"name":"IS_INCLUDED_IN_ENGINEERING_METRICS","comment":null,"display_name":"is_included_in_engineering_metrics"},"IS_PART_OF_PRODUCT":{"type":"BOOLEAN","index":24,"name":"IS_PART_OF_PRODUCT","comment":null,"display_name":"is_part_of_product"},"STATE":{"type":"TEXT","index":25,"name":"state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: opened, closed, merged, locked"}],"display_name":"state"},"WEIGHT":{"type":"NUMBER","index":26,"name":"WEIGHT","comment":null,"display_name":"weight"},"DUE_DATE":{"type":"DATE","index":27,"name":"DUE_DATE","comment":null,"display_name":"due_date"},"LOCK_VERSION":{"type":"NUMBER","index":28,"name":"LOCK_VERSION","comment":null,"display_name":"lock_version"},"TIME_ESTIMATE":{"type":"NUMBER","index":29,"name":"TIME_ESTIMATE","comment":null,"display_name":"time_estimate"},"HAS_DISCUSSION_LOCKED":{"type":"BOOLEAN","index":30,"name":"HAS_DISCUSSION_LOCKED","comment":null,"display_name":"has_discussion_locked"},"CLOSED_BY_ID":{"type":"NUMBER","index":31,"name":"CLOSED_BY_ID","comment":null,"display_name":"closed_by_id"},"RELATIVE_POSITION":{"type":"NUMBER","index":32,"name":"RELATIVE_POSITION","comment":null,"display_name":"relative_position"},"SERVICE_DESK_REPLY_TO":{"type":"TEXT","index":33,"name":"SERVICE_DESK_REPLY_TO","comment":null,"display_name":"service_desk_reply_to"},"DUPLICATED_TO_ID":{"type":"NUMBER","index":34,"name":"DUPLICATED_TO_ID","comment":null,"display_name":"duplicated_to_id"},"PROMOTED_TO_EPIC_ID":{"type":"NUMBER","index":35,"name":"PROMOTED_TO_EPIC_ID","comment":null,"display_name":"promoted_to_epic_id"},"ISSUE_TYPE":{"type":"NUMBER","index":36,"name":"ISSUE_TYPE","comment":null,"display_name":"issue_type"},"LABELS":{"type":"ARRAY","index":37,"name":"LABELS","comment":null,"display_name":"labels"},"MASKED_LABEL_TITLE":{"type":"TEXT","index":38,"name":"MASKED_LABEL_TITLE","comment":null,"display_name":"masked_label_title"},"IS_INTERNAL_ISSUE":{"type":"BOOLEAN","index":39,"name":"IS_INTERNAL_ISSUE","comment":null,"display_name":"is_internal_issue"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":40,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":41,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":42,"name":"ULTIMATE_PARENT_PLAN_TITLE","comment":null,"display_name":"ultimate_parent_plan_title"},"ULTIMATE_PARENT_PLAN_IS_PAID":{"type":"BOOLEAN","index":43,"name":"ULTIMATE_PARENT_PLAN_IS_PAID","comment":null,"display_name":"ultimate_parent_plan_is_paid"},"PLAN_ID_AT_ISSUE_CREATION":{"type":"TEXT","index":44,"name":"PLAN_ID_AT_ISSUE_CREATION","comment":null,"display_name":"plan_id_at_issue_creation"},"FIRST_MENTIONED_IN_COMMIT_AT":{"type":"DATE","index":45,"name":"FIRST_MENTIONED_IN_COMMIT_AT","comment":null,"display_name":"first_mentioned_in_commit_at"},"FIRST_ASSOCIATED_WITH_MILESTONE_AT":{"type":"DATE","index":46,"name":"FIRST_ASSOCIATED_WITH_MILESTONE_AT","comment":null,"display_name":"first_associated_with_milestone_at"},"FIRST_ADDED_TO_BOARD_AT":{"type":"DATE","index":47,"name":"FIRST_ADDED_TO_BOARD_AT","comment":null,"display_name":"first_added_to_board_at"},"FIRST_WEIGHT_SET_AT":{"type":"TIMESTAMP_NTZ","index":48,"name":"FIRST_WEIGHT_SET_AT","comment":null,"display_name":"first_weight_set_at"},"namespace_plan_id_at_issue_creation":{"name":"namespace_plan_id_at_issue_creation","description":"This column represents the gitlab_subscription plan_id (2, 3, 4, 34 or 'trial') of the namespace at the time that the object (issue, project, merge request) was created.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_plan_id_at_issue_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:28UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6778322432,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_issues_xf","raw_sql":"$28","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.is_project_included_in_engineering_metrics","macro.gitlab_snowflake.is_project_part_of_product","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.engineering_productivity_metrics_projects_to_include","seed.gitlab_snowflake.projects_part_of_product","seed.gitlab_snowflake.projects_part_of_product","model.gitlab_snowflake.gitlab_dotcom_issues","model.gitlab_snowflake.gitlab_dotcom_issues","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_label_links","model.gitlab_snowflake.gitlab_dotcom_label_links","model.gitlab_snowflake.gitlab_dotcom_labels_xf","model.gitlab_snowflake.gitlab_dotcom_labels_xf","model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_notes","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_issue_metrics","model.gitlab_snowflake.gitlab_dotcom_issue_metrics","model.gitlab_snowflake.gitlab_dotcom_resource_weight_events_xf","model.gitlab_snowflake.gitlab_dotcom_resource_weight_events_xf"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_issues_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_issues_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_issues_xf.sql","name":"gitlab_dotcom_issues_xf","alias":"gitlab_dotcom_issues_xf","checksum":{"name":"sha256","checksum":"1f0fefa1d6238f496ce12cb140753d6074605977665a3cc43042cf3b299f83dc"},"tags":["product"],"refs":[["engineering_productivity_metrics_projects_to_include"],["engineering_productivity_metrics_projects_to_include"],["projects_part_of_product"],["projects_part_of_product"],["gitlab_dotcom_issues"],["gitlab_dotcom_issues"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_label_links"],["gitlab_dotcom_label_links"],["gitlab_dotcom_labels_xf"],["gitlab_dotcom_labels_xf"],["gitlab_dotcom_notes"],["gitlab_dotcom_notes"],["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_issue_metrics"],["gitlab_dotcom_issue_metrics"],["gitlab_dotcom_resource_weight_events_xf"],["gitlab_dotcom_resource_weight_events_xf"]],"sources":[],"metrics":[],"description":"Adds associated labels for issues when these exist.\n\nIn order to achieve that we first join issues to the `label links` relation table, and then use that to join to the labels table.\n\nThis transformation also masks title/description based on privacy of the project that it is on and the confidentiality setting on the issue.  \n\nA CTE will find projects that don't have visibility set to public and then joined to the issues in order to build a CASE statement to mask the content.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_issues_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3407402,"compiled_sql":"$29","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_issues_xf","label":"gitlab_dotcom_issues_xf"},{"metadata":{"type":"BASE TABLE","schema":"WORKSPACE_MARKETING","name":"WK_BDG_USER_COMPANY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":1,"name":"gitlab_dotcom_user_id","comment":null,"description":"The user id from the GitLab[dot]com application.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_dotcom_user_id"},"COMPANY_ID":{"type":"TEXT","index":2,"name":"company_id","comment":null,"description":"A COALESCE of the `sf_lead_company_id`, `sf_contact_company_id`, and `gitlab_user_enhance_company_id` columns.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_id"},"SF_LEAD_COMPANY_ID":{"type":"TEXT","index":3,"name":"sf_lead_company_id","comment":null,"description":"The Zoom Info company ID derived from the Salesforce lead object.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sf_lead_company_id"},"SF_CONTACT_COMPANY_ID":{"type":"TEXT","index":4,"name":"sf_contact_company_id","comment":null,"description":"The Zoom Info company ID derived from the Salesforce contact object.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sf_contact_company_id"},"GITLAB_USER_ENHANCE_COMPANY_ID":{"type":"TEXT","index":5,"name":"gitlab_user_enhance_company_id","comment":null,"description":"The Zoom Info company ID derived from the a list of GitLab[dot]com users enhanced directly by Zoom Info.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_enhance_company_id"},"DIM_USER_ID":{"type":"TEXT","index":6,"name":"dim_user_id","comment":null,"description":"The surrogate key for the dimension table. Derived from the gitlab_dotcom_user_id column.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_user_id"},"DIM_COMPANY_ID":{"type":"TEXT","index":7,"name":"dim_company_id","comment":null,"description":"The surrogate key for the dimension table. Derived from the `company_id` column.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_company_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":243614208,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.wk_bdg_user_company","raw_sql":"$2a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_contact_enhance_source","model.gitlab_snowflake.gitlab_contact_enhance_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source"]},"config":{"enabled":true,"alias":null,"schema":"workspace_marketing","database":"PROD","tags":["workspace"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"workspace_marketing","fqn":["gitlab_snowflake","workspaces","workspace_marketing","wk_bdg_user_company"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_marketing/wk_bdg_user_company.sql","original_file_path":"models/workspaces/workspace_marketing/wk_bdg_user_company.sql","name":"wk_bdg_user_company","alias":"wk_bdg_user_company","checksum":{"name":"sha256","checksum":"987397eef406cf20fa4fcbe580718ea0f1bdd09e43a28df0439d55dbbb539c24"},"tags":["workspace"],"refs":[["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_contact_enhance_source"],["gitlab_contact_enhance_source"],["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_contact_source"],["sfdc_contact_source"]],"sources":[],"metrics":[],"description":"A table to be used to connect GitLab[dot]com users to companies","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_marketing/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_marketing/wk_bdg_user_company.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"workspace_marketing","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["workspace"]},"created_at":1689033733.1656597,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".workspace_marketing.wk_bdg_user_company","label":"wk_bdg_user_company"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_GROUPS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"GROUP_ID":{"type":"NUMBER","index":1,"name":"group_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"group_id"},"GROUP_NAME":{"type":"TEXT","index":2,"name":"GROUP_NAME","comment":null,"display_name":"group_name"},"GROUP_PATH":{"type":"TEXT","index":3,"name":"GROUP_PATH","comment":null,"display_name":"group_path"},"OWNER_ID":{"type":"NUMBER","index":4,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"HAS_AVATAR":{"type":"BOOLEAN","index":5,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"GROUP_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"GROUP_CREATED_AT","comment":null,"display_name":"group_created_at"},"GROUP_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"GROUP_UPDATED_AT","comment":null,"display_name":"group_updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":8,"name":"IS_MEMBERSHIP_LOCKED","comment":null,"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":9,"name":"HAS_REQUEST_ACCESS_ENABLED","comment":null,"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":10,"name":"HAS_SHARE_WITH_GROUP_LOCKED","comment":null,"display_name":"has_share_with_group_locked"},"VISIBILITY_LEVEL":{"type":"TEXT","index":11,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":12,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":13,"name":"LDAP_SYNC_ERROR","comment":null,"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"LDAP_SYNC_LAST_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LDAP_SYNC_LAST_SYNC_AT","comment":null,"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":17,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"PARENT_GROUP_ID":{"type":"NUMBER","index":18,"name":"PARENT_GROUP_ID","comment":null,"display_name":"parent_group_id"},"IS_TOP_LEVEL_GROUP":{"type":"BOOLEAN","index":19,"name":"IS_TOP_LEVEL_GROUP","comment":null,"display_name":"is_top_level_group"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":20,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":21,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":22,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION","comment":null,"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":23,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":24,"name":"PROJECT_CREATION_LEVEL","comment":null,"display_name":"project_creation_level"},"GROUP_IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"GROUP_IS_INTERNAL","comment":null,"display_name":"group_is_internal"},"GROUP_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":26,"name":"GROUP_ULTIMATE_PARENT_ID","comment":null,"display_name":"group_ultimate_parent_id"},"GROUP_PLAN_ID":{"type":"NUMBER","index":27,"name":"GROUP_PLAN_ID","comment":null,"display_name":"group_plan_id"},"GROUP_PLAN_TITLE":{"type":"TEXT","index":28,"name":"GROUP_PLAN_TITLE","comment":null,"display_name":"group_plan_title"},"GROUP_PLAN_IS_PAID":{"type":"BOOLEAN","index":29,"name":"group_plan_is_paid","comment":null,"description":"Whether or not the group is subscribed to a paid plan. A subgroup inherits from the subscription of its ultimate parent group","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_plan_is_paid"},"MEMBER_COUNT":{"type":"NUMBER","index":30,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"},"PROJECT_COUNT":{"type":"NUMBER","index":31,"name":"project_count","comment":null,"description":"The number of projects that are presently associated with the group.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:22UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":196051456,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_groups_xf","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_groups","model.gitlab_snowflake.gitlab_dotcom_groups","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_groups_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_groups_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_groups_xf.sql","name":"gitlab_dotcom_groups_xf","alias":"gitlab_dotcom_groups_xf","checksum":{"name":"sha256","checksum":"ed6f30d5f1c0daa073880f79ed679a04436e01cd95078d11cfb1617766496307"},"tags":["product"],"refs":[["gitlab_dotcom_groups"],["gitlab_dotcom_groups"],["gitlab_dotcom_members"],["gitlab_dotcom_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"]],"sources":[],"metrics":[],"description":"This model includes all columns from the groups base model and adds the count of members and projects associated with the groups.\nIt also adds 2 columns based on subscription inheritance (as described [here](https://about.gitlab.com/handbook/marketing/product-marketing/enablement/dotcom-subscriptions/#common-misconceptions)):\n\n* `groups_plan_is_paid`\n* `groups_plan_id`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_groups_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3481114,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_groups_xf","label":"gitlab_dotcom_groups_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_MERGE_REQUEST_ASSIGNMENT_EVENTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MERGE_REQUEST_ID":{"type":"NUMBER","index":1,"name":"merge_request_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"merge_request_id"},"NOTE_ID":{"type":"NUMBER","index":2,"name":"NOTE_ID","comment":null,"display_name":"note_id"},"NOTE_AUTHOR_ID":{"type":"NUMBER","index":3,"name":"NOTE_AUTHOR_ID","comment":null,"display_name":"note_author_id"},"NOTE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"NOTE_CREATED_AT","comment":null,"display_name":"note_created_at"},"EVENT":{"type":"TEXT","index":5,"name":"EVENT","comment":null,"display_name":"event"},"EVENT_USER_ID":{"type":"NUMBER","index":6,"name":"EVENT_USER_ID","comment":null,"display_name":"event_user_id"},"RANK_IN_EVENT":{"type":"NUMBER","index":7,"name":"RANK_IN_EVENT","comment":null,"display_name":"rank_in_event"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:34UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":12534272,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_merge_request_assignment_events","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_internal_notes_xf","model.gitlab_snowflake.gitlab_dotcom_internal_notes_xf","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_merge_request_assignment_events"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_request_assignment_events.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_request_assignment_events.sql","name":"gitlab_dotcom_merge_request_assignment_events","alias":"gitlab_dotcom_merge_request_assignment_events","checksum":{"name":"sha256","checksum":"812012428fd6fe7ef7df32639f708a48ebcfcb8b0ec94ae8add0d1a191fd080d"},"tags":["product"],"refs":[["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_internal_notes_xf"],["gitlab_dotcom_internal_notes_xf"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This model contains the history of assignments, unassignments, and reassignments for merge requests within internal namespaces. From `gitlab_dotcom_internal_notes_xf`, notes of type `MergeRequest` are queried. Notes are stemmed down to referenced usernames, tokenized, and flattened so that for each event (assign, unassign, reassign) a row is created for each referenced username in the order it appears in the note. Finally, usernames are replaced with user id's by joining to `gitlab_dotcom_users`. Usernames that do not have an associated user_id (if the user was deleted or changed usernames) are not included in this model so as to not misattribute assignee changes.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_merge_request_assignment_events.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3612869,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_merge_request_assignment_events","label":"gitlab_dotcom_merge_request_assignment_events"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USAGE_DATA_CI_BUILDS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_PRIMARY_KEY":{"type":"TEXT","index":1,"name":"event_primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"event_primary_key"},"EVENT_NAME":{"type":"TEXT","index":2,"name":"event_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_name"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"IS_BLOCKED_NAMESPACE":{"type":"BOOLEAN","index":5,"name":"is_blocked_namespace","comment":null,"description":"boolean flag set to TRUE if the creator of the namespace is a blocked user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_blocked_namespace"},"USER_ID":{"type":"NUMBER","index":6,"name":"USER_ID","comment":null,"display_name":"user_id"},"PARENT_TYPE":{"type":"TEXT","index":7,"name":"PARENT_TYPE","comment":null,"display_name":"parent_type"},"PARENT_ID":{"type":"NUMBER","index":8,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"PARENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"PARENT_CREATED_AT","comment":null,"display_name":"parent_created_at"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":10,"name":"PROJECT_IS_LEARN_GITLAB","comment":null,"display_name":"project_is_learn_gitlab"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":11,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"event_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_created_at"},"IS_REPRESENTATIVE_OF_STAGE":{"type":"BOOLEAN","index":13,"name":"is_representative_of_stage","comment":null,"description":"This column represents whether or not this action represents being active for the entire stage. One action per stage has this designation.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_representative_of_stage"},"STAGE_NAME":{"type":"TEXT","index":14,"name":"stage_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":15,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":16,"name":"PLAN_NAME_AT_EVENT_DATE","comment":null,"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":17,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"DAYS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":19,"name":"DAYS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"days_since_namespace_creation"},"WEEKS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":20,"name":"WEEKS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"weeks_since_namespace_creation"},"DAYS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":21,"name":"DAYS_SINCE_PARENT_CREATION","comment":null,"display_name":"days_since_parent_creation"},"WEEKS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":22,"name":"WEEKS_SINCE_PARENT_CREATION","comment":null,"display_name":"weeks_since_parent_creation"},"DAYS_SINCE_USER_CREATION":{"type":"NUMBER","index":23,"name":"DAYS_SINCE_USER_CREATION","comment":null,"display_name":"days_since_user_creation"},"WEEKS_SINCE_USER_CREATION":{"type":"NUMBER","index":24,"name":"WEEKS_SINCE_USER_CREATION","comment":null,"display_name":"weeks_since_user_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:33UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":166187532800,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_usage_data_ci_builds","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.temp_gitlab_dotcom_ci_builds_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_ci_builds_filtered","model.gitlab_snowflake.gitlab_dotcom_ci_pipeline_schedules","model.gitlab_snowflake.gitlab_dotcom_ci_pipeline_schedules","model.gitlab_snowflake.gitlab_dotcom_ci_stages","model.gitlab_snowflake.gitlab_dotcom_ci_stages","model.gitlab_snowflake.gitlab_dotcom_ci_triggers","model.gitlab_snowflake.gitlab_dotcom_ci_triggers","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"event_primary_key","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","automatic_clustering":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_usage_data_ci_builds"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_ci_builds.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_ci_builds.sql","name":"gitlab_dotcom_usage_data_ci_builds","alias":"gitlab_dotcom_usage_data_ci_builds","checksum":{"name":"sha256","checksum":"b80140abf79946ebf191f9dac0e0f22be3bb8f32fc55b15f10eac0a35694053d"},"tags":["product","mnpi_exception"],"refs":[["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_plans"],["gitlab_dotcom_plans"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["temp_gitlab_dotcom_ci_builds_filtered"],["temp_gitlab_dotcom_ci_builds_filtered"],["gitlab_dotcom_ci_pipeline_schedules"],["gitlab_dotcom_ci_pipeline_schedules"],["gitlab_dotcom_ci_stages"],["gitlab_dotcom_ci_stages"],["gitlab_dotcom_ci_triggers"],["gitlab_dotcom_ci_triggers"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table aggregates but does not manipulate a subset of columns from the pipeline related gitlab_dotcom database tables. These tables are populated directly from gitlab-dot-com variables. The calculated columns are `stage_name` and `event_name`.\n\nThis table was split out from `gitlab_dotcom_usage_data_events` in order to allow the model to complete in a reasonable time.\n\nThis data is associated to the top-most namespace/project level, not necessarily the level at which the event occurred.\n\nThe goal is to be able to reproduce the same usage dataset as the one sent weekly by self-managed instances to the version app.\n\nData Team notes:\n\nThe table normalizes all the gitlab_dotcom tables to always extract the same subset of column:\n* namespace_id, \n* namespace_created_at,\n* project_created_at,\n* event_created_at\n\nCurrently, the following tables are included in the model:\n\n* gitlab_dotcom_ci_builds","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_ci_builds.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"event_primary_key","automatic_clustering":true},"created_at":1689033759.4207826,"compiled_sql":"$31","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_usage_data_ci_builds","label":"gitlab_dotcom_usage_data_ci_builds"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PTPT_SCORES_BY_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"Unique identifier for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_marketing_contact_id"},"NAMESPACE_ID":{"type":"TEXT","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"SCORE":{"type":"NUMBER","index":3,"name":"SCORE","comment":null,"display_name":"score"},"SCORE_GROUP":{"type":"NUMBER","index":4,"name":"SCORE_GROUP","comment":null,"display_name":"score_group"},"INSIGHTS":{"type":"TEXT","index":5,"name":"INSIGHTS","comment":null,"display_name":"insights"},"SCORE_DATE":{"type":"DATE","index":6,"name":"SCORE_DATE","comment":null,"display_name":"score_date"},"PAST_INSIGHTS":{"type":"TEXT","index":7,"name":"PAST_INSIGHTS","comment":null,"display_name":"past_insights"},"PAST_SCORE_GROUP":{"type":"NUMBER","index":8,"name":"PAST_SCORE_GROUP","comment":null,"display_name":"past_score_group"},"PAST_SCORE_DATE":{"type":"DATE","index":9,"name":"PAST_SCORE_DATE","comment":null,"display_name":"past_score_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2003456,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ptpt_scores_by_user","raw_sql":"$32","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.ptpt_scores_source","model.gitlab_snowflake.ptpt_scores_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ptpt_scores_by_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ptpt_scores_by_user.sql","original_file_path":"models/common_prep/prep_ptpt_scores_by_user.sql","name":"prep_ptpt_scores_by_user","alias":"prep_ptpt_scores_by_user","checksum":{"name":"sha256","checksum":"a7f2a02c1eb2109e750120c9dbadd3c0144d1483817cbb9c30f5fd259be87022"},"tags":[],"refs":[["ptpt_scores_source"],["ptpt_scores_source"],["prep_namespace"],["prep_namespace"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"Takes the scores from ptpt_scores, transforms it to user / email address grain and uses the latest score date available.\n\nThe scores of this model are then used in mart_marketing_contact and the marketing pump to later be synced with Marketo and SFDC.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ptpt_scores_by_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.5119524,"compiled_sql":"$33","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ptpt_scores_by_user","label":"prep_ptpt_scores_by_user"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MAPPING","name":"MAP_TEAM_MEMBER_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_TEAM_MEMBER_SK":{"type":"TEXT","index":1,"name":"dim_team_member_sk","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_team_member_sk"},"DIM_USER_SK":{"type":"TEXT","index":2,"name":"dim_user_sk","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_user_sk"},"EMPLOYEE_ID":{"type":"NUMBER","index":3,"name":"employee_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"employee_id"},"USER_ID":{"type":"NUMBER","index":4,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_id"},"GITLAB_USERNAME":{"type":"TEXT","index":5,"name":"gitlab_username","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_username"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":6,"name":"notification_email","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"notification_email"},"CREATED_BY":{"type":"TEXT","index":7,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":8,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":9,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":10,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":11,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:05UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":536576,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_team_member_user","raw_sql":"$34","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.blended_employee_mapping_source","model.gitlab_snowflake.blended_employee_mapping_source","model.gitlab_snowflake.blended_directory_source","model.gitlab_snowflake.blended_directory_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_team_member_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_team_member_user.sql","original_file_path":"models/common_mapping/map_team_member_user.sql","name":"map_team_member_user","alias":"map_team_member_user","checksum":{"name":"sha256","checksum":"93defb7e224ed45f8ea924425a1b4271c201b4b58bc559d7ad5bb25d23b8d58c"},"tags":[],"refs":[["blended_employee_mapping_source"],["blended_employee_mapping_source"],["blended_directory_source"],["blended_directory_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table is the distinct combination of the Gitlab team members and there Gitlab user IDs.  The two values are connected using the Gitlab user names that is recorded in the HRIS system","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_team_member_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033765.670136,"compiled_sql":"$35","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_team_member_user","label":"map_team_member_user"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_SAML_PROVIDERS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SAML_PROVIDER_ID":{"type":"NUMBER","index":1,"name":"saml_provider_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"saml_provider_id"},"GROUP_ID":{"type":"NUMBER","index":2,"name":"GROUP_ID","comment":null,"display_name":"group_id"},"IS_ENABLED":{"type":"BOOLEAN","index":3,"name":"IS_ENABLED","comment":null,"display_name":"is_enabled"},"CERTIFICATE_FINGERPRINT":{"type":"TEXT","index":4,"name":"CERTIFICATE_FINGERPRINT","comment":null,"display_name":"certificate_fingerprint"},"SSO_URL":{"type":"TEXT","index":5,"name":"SSO_URL","comment":null,"display_name":"sso_url"},"IS_ENFORCED_SSO":{"type":"BOOLEAN","index":6,"name":"IS_ENFORCED_SSO","comment":null,"display_name":"is_enforced_sso"},"IS_ENFORCED_GROUP_MANAGED_ACCOUNTS":{"type":"BOOLEAN","index":7,"name":"IS_ENFORCED_GROUP_MANAGED_ACCOUNTS","comment":null,"display_name":"is_enforced_group_managed_accounts"},"IS_PROHIBITED_OUTER_FORKS":{"type":"BOOLEAN","index":8,"name":"IS_PROHIBITED_OUTER_FORKS","comment":null,"display_name":"is_prohibited_outer_forks"},"DEFAULT_MEMBERSHIP_ROLE_ID":{"type":"NUMBER","index":9,"name":"DEFAULT_MEMBERSHIP_ROLE_ID","comment":null,"display_name":"default_membership_role_id"},"SAML_PROVIDER_USER_COUNT":{"type":"NUMBER","index":10,"name":"SAML_PROVIDER_USER_COUNT","comment":null,"display_name":"saml_provider_user_count"},"FIRST_SAML_PROVIDER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"FIRST_SAML_PROVIDER_CREATED_AT","comment":null,"display_name":"first_saml_provider_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:20UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":745984,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_saml_providers_xf","raw_sql":"WITH saml_providers AS (\n  \n    SELECT *\n    FROM {{ ref('gitlab_dotcom_saml_providers') }}\n\n)\n\n, identities AS (\n  \n    SELECT *\n    FROM {{ ref('gitlab_dotcom_identities') }}\n\n)\n\n, joined AS (\n  \n    SELECT \n      saml_providers.*,\n      COUNT(DISTINCT user_id) AS saml_provider_user_count,\n      MIN(created_at)         AS first_saml_provider_created_at\n    FROM saml_providers\n    LEFT JOIN identities \n      ON saml_providers.saml_provider_id = identities.saml_provider_id\n      AND {{ filter_out_blocked_users('identities', 'user_id') }}\n    {{ dbt_utils.group_by(n=9) }}\n)\n\nSELECT *\nFROM joined","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_saml_providers","model.gitlab_snowflake.gitlab_dotcom_saml_providers","model.gitlab_snowflake.gitlab_dotcom_identities","model.gitlab_snowflake.gitlab_dotcom_identities","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_saml_providers_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_saml_providers_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_saml_providers_xf.sql","name":"gitlab_dotcom_saml_providers_xf","alias":"gitlab_dotcom_saml_providers_xf","checksum":{"name":"sha256","checksum":"4efcaa5ab4deb0e6107483818c6a091e07ebf11dcbda5a1dcff725d2dc3d6865"},"tags":["product"],"refs":[["gitlab_dotcom_saml_providers"],["gitlab_dotcom_saml_providers"],["gitlab_dotcom_identities"],["gitlab_dotcom_identities"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"XF model that joins the base model `gitlab_dotcom_saml_providers` to the `gitlab_dotcom_identities` model in order to get additional metrics:\n\n* number of users using a specific saml_provider for a specific group \n* first time a user of a specific group started using the saml_provider. This could be `NULL` if no one is using it.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_saml_providers_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.4017556,"compiled_sql":"WITH saml_providers AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_saml_providers\n\n)\n\n, identities AS (\n  \n    SELECT *\n    FROM \"PROD\".legacy.gitlab_dotcom_identities\n\n)\n\n, joined AS (\n  \n    SELECT \n      saml_providers.*,\n      COUNT(DISTINCT user_id) AS saml_provider_user_count,\n      MIN(created_at)         AS first_saml_provider_created_at\n    FROM saml_providers\n    LEFT JOIN identities \n      ON saml_providers.saml_provider_id = identities.saml_provider_id\n      AND NOT EXISTS (\n\n        SELECT 1\n        FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source users_source\n        WHERE users_source.state = 'blocked' \n          AND users_source.user_id = identities.user_id\n\n    )\n    group by 1,2,3,4,5,6,7,8,9\n)\n\nSELECT *\nFROM joined","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_saml_providers_xf","label":"gitlab_dotcom_saml_providers_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USAGE_DATA_PIPELINES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_PRIMARY_KEY":{"type":"TEXT","index":1,"name":"event_primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"event_primary_key"},"EVENT_NAME":{"type":"TEXT","index":2,"name":"event_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_name"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"IS_BLOCKED_NAMESPACE":{"type":"BOOLEAN","index":5,"name":"is_blocked_namespace","comment":null,"description":"boolean flag set to TRUE if the creator of the namespace is a blocked user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_blocked_namespace"},"USER_ID":{"type":"NUMBER","index":6,"name":"USER_ID","comment":null,"display_name":"user_id"},"PARENT_TYPE":{"type":"TEXT","index":7,"name":"PARENT_TYPE","comment":null,"display_name":"parent_type"},"PARENT_ID":{"type":"NUMBER","index":8,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"PARENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"PARENT_CREATED_AT","comment":null,"display_name":"parent_created_at"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":10,"name":"PROJECT_IS_LEARN_GITLAB","comment":null,"display_name":"project_is_learn_gitlab"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":11,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"event_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_created_at"},"IS_REPRESENTATIVE_OF_STAGE":{"type":"BOOLEAN","index":13,"name":"is_representative_of_stage","comment":null,"description":"This column represents whether or not this action represents being active for the entire stage. One action per stage has this designation.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_representative_of_stage"},"STAGE_NAME":{"type":"TEXT","index":14,"name":"stage_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":15,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":16,"name":"PLAN_NAME_AT_EVENT_DATE","comment":null,"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":17,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"DAYS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":19,"name":"DAYS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"days_since_namespace_creation"},"WEEKS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":20,"name":"WEEKS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"weeks_since_namespace_creation"},"DAYS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":21,"name":"DAYS_SINCE_PARENT_CREATION","comment":null,"display_name":"days_since_parent_creation"},"WEEKS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":22,"name":"WEEKS_SINCE_PARENT_CREATION","comment":null,"display_name":"weeks_since_parent_creation"},"DAYS_SINCE_USER_CREATION":{"type":"NUMBER","index":23,"name":"DAYS_SINCE_USER_CREATION","comment":null,"display_name":"days_since_user_creation"},"WEEKS_SINCE_USER_CREATION":{"type":"NUMBER","index":24,"name":"WEEKS_SINCE_USER_CREATION","comment":null,"display_name":"weeks_since_user_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":172075567104,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_usage_data_pipelines","raw_sql":"$36","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_integrations","model.gitlab_snowflake.gitlab_dotcom_integrations","model.gitlab_snowflake.gitlab_dotcom_ci_pipelines","model.gitlab_snowflake.gitlab_dotcom_ci_pipelines","model.gitlab_snowflake.gitlab_dotcom_ci_job_artifacts","model.gitlab_snowflake.gitlab_dotcom_ci_job_artifacts","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.temp_gitlab_dotcom_events_filtered","model.gitlab_snowflake.gitlab_dotcom_boards","model.gitlab_snowflake.gitlab_dotcom_boards","model.gitlab_snowflake.gitlab_dotcom_clusters_applications_helm_xf","model.gitlab_snowflake.gitlab_dotcom_clusters_applications_helm_xf","model.gitlab_snowflake.gitlab_dotcom_deployments","model.gitlab_snowflake.gitlab_dotcom_deployments","model.gitlab_snowflake.gitlab_dotcom_environments","model.gitlab_snowflake.gitlab_dotcom_environments","model.gitlab_snowflake.gitlab_dotcom_epics","model.gitlab_snowflake.gitlab_dotcom_epics","model.gitlab_snowflake.gitlab_dotcom_labels","model.gitlab_snowflake.gitlab_dotcom_labels","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_merge_requests","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_milestones","model.gitlab_snowflake.gitlab_dotcom_packages_packages","model.gitlab_snowflake.gitlab_dotcom_packages_packages","model.gitlab_snowflake.gitlab_dotcom_project_auto_devops","model.gitlab_snowflake.gitlab_dotcom_project_auto_devops","model.gitlab_snowflake.gitlab_dotcom_releases","model.gitlab_snowflake.gitlab_dotcom_releases","model.gitlab_snowflake.gitlab_dotcom_requirements","model.gitlab_snowflake.gitlab_dotcom_requirements","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_secure_stage_ci_jobs","model.gitlab_snowflake.gitlab_dotcom_snippets","model.gitlab_snowflake.gitlab_dotcom_snippets","model.gitlab_snowflake.gitlab_dotcom_todos","model.gitlab_snowflake.gitlab_dotcom_todos","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_ci_pipelines","model.gitlab_snowflake.gitlab_dotcom_ci_pipelines","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"event_primary_key","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","automatic_clustering":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_usage_data_pipelines"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_pipelines.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_pipelines.sql","name":"gitlab_dotcom_usage_data_pipelines","alias":"gitlab_dotcom_usage_data_pipelines","checksum":{"name":"sha256","checksum":"5bbdacfbac798d9c57393b886235f608420c7c4417e602b5af3d1d06dcf11380"},"tags":["product","mnpi_exception"],"refs":[["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_plans"],["gitlab_dotcom_plans"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["temp_gitlab_dotcom_events_filtered"],["temp_gitlab_dotcom_events_filtered"],["temp_gitlab_dotcom_events_filtered"],["temp_gitlab_dotcom_events_filtered"],["temp_gitlab_dotcom_events_filtered"],["temp_gitlab_dotcom_events_filtered"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_integrations"],["gitlab_dotcom_integrations"],["gitlab_dotcom_ci_pipelines"],["gitlab_dotcom_ci_pipelines"],["gitlab_dotcom_ci_job_artifacts"],["gitlab_dotcom_ci_job_artifacts"],["temp_gitlab_dotcom_events_filtered"],["temp_gitlab_dotcom_events_filtered"],["gitlab_dotcom_boards"],["gitlab_dotcom_boards"],["gitlab_dotcom_clusters_applications_helm_xf"],["gitlab_dotcom_clusters_applications_helm_xf"],["gitlab_dotcom_deployments"],["gitlab_dotcom_deployments"],["gitlab_dotcom_environments"],["gitlab_dotcom_environments"],["gitlab_dotcom_epics"],["gitlab_dotcom_epics"],["gitlab_dotcom_labels"],["gitlab_dotcom_labels"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_merge_requests"],["gitlab_dotcom_milestones"],["gitlab_dotcom_milestones"],["gitlab_dotcom_packages_packages"],["gitlab_dotcom_packages_packages"],["gitlab_dotcom_project_auto_devops"],["gitlab_dotcom_project_auto_devops"],["gitlab_dotcom_releases"],["gitlab_dotcom_releases"],["gitlab_dotcom_requirements"],["gitlab_dotcom_requirements"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_secure_stage_ci_jobs"],["gitlab_dotcom_snippets"],["gitlab_dotcom_snippets"],["gitlab_dotcom_todos"],["gitlab_dotcom_todos"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_ci_pipelines"],["gitlab_dotcom_ci_pipelines"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"$37","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_pipelines.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"event_primary_key","automatic_clustering":true},"created_at":1689033759.4156573,"compiled_sql":"$38","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_usage_data_pipelines","label":"gitlab_dotcom_usage_data_pipelines"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USERS_BLOCKED_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"ROLE_ID","comment":null,"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"ROLE","comment":null,"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":68,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"USER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":69,"name":"USER_UPDATED_AT","comment":null,"display_name":"user_updated_at"},"DAYS_ACTIVE":{"type":"NUMBER","index":70,"name":"days_active","comment":null,"description":"days between user creation and last activity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_active"},"ACCOUNT_AGE":{"type":"NUMBER","index":71,"name":"ACCOUNT_AGE","comment":null,"display_name":"account_age"},"ACCOUNT_AGE_COHORT":{"type":"TEXT","index":72,"name":"account_age_cohort","comment":null,"description":"cohorting of time between last dbt run and user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_age_cohort"},"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID":{"type":"NUMBER","index":73,"name":"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID","comment":null,"display_name":"highest_paid_subscription_plan_id"},"IS_PAID_USER":{"type":"BOOLEAN","index":74,"name":"IS_PAID_USER","comment":null,"display_name":"is_paid_user"},"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID":{"type":"NUMBER","index":75,"name":"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID","comment":null,"display_name":"highest_paid_subscription_namespace_id"},"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":76,"name":"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID","comment":null,"display_name":"highest_paid_subscription_ultimate_parent_id"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE":{"type":"TEXT","index":77,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE","comment":null,"display_name":"highest_paid_subscription_inheritance_source_type"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID":{"type":"NUMBER","index":78,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID","comment":null,"display_name":"highest_paid_subscription_inheritance_source_id"},"HAS_CUSTOMER_ACCOUNT":{"type":"BOOLEAN","index":79,"name":"HAS_CUSTOMER_ACCOUNT","comment":null,"display_name":"has_customer_account"},"FIRST_CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":80,"name":"FIRST_CUSTOMER_CREATED_AT","comment":null,"display_name":"first_customer_created_at"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":81,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":82,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"HAS_STARTED_TRIAL":{"type":"BOOLEAN","index":83,"name":"HAS_STARTED_TRIAL","comment":null,"display_name":"has_started_trial"},"HAS_STARTED_TRIAL_AT":{"type":"DATE","index":84,"name":"HAS_STARTED_TRIAL_AT","comment":null,"display_name":"has_started_trial_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":219677184,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","raw_sql":"$39","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.filter_out_active_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_users_blocked_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_users_blocked_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_blocked_xf.sql","name":"gitlab_dotcom_users_blocked_xf","alias":"gitlab_dotcom_users_blocked_xf","checksum":{"name":"sha256","checksum":"40410bca8a2bfc73a5dda13495faf297edc3d2c375876bca10af3105a24d02ff"},"tags":["product","mnpi_exception"],"refs":[["customers_db_customers"],["customers_db_customers"],["customers_db_trials"],["customers_db_trials"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"$3a","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_blocked_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033759.4374166,"compiled_sql":"$3b","extra_ctes_injected":true,"extra_ctes":[{"id":"model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","sql":"$3c"}],"relation_name":"\"PROD\".legacy.gitlab_dotcom_users_blocked_xf","label":"gitlab_dotcom_users_blocked_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_MEMBERSHIPS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":1,"name":"ultimate_parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_id"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":2,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"ULTIMATE_PARENT_PLAN_TITLE":{"type":"TEXT","index":3,"name":"ULTIMATE_PARENT_PLAN_TITLE","comment":null,"display_name":"ultimate_parent_plan_title"},"NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_id"},"MEMBERSHIP_SOURCE_TYPE":{"type":"TEXT","index":5,"name":"membership_source_type","comment":null,"description":"This describes how the access is being granted ('group_membership', 'project_membership', 'group_group_links', 'project_group_links').","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"membership_source_type"},"MEMBERSHIP_SOURCE_ID":{"type":"NUMBER","index":6,"name":"membership_source_id","comment":null,"description":"The id of the record that is granting the access. If membership_source_type='group_membership', then this is the group_id.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"membership_source_id"},"ACCESS_LEVEL":{"type":"NUMBER","index":7,"name":"access_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"access_level"},"GROUP_ACCESS":{"type":"NUMBER","index":8,"name":"GROUP_ACCESS","comment":null,"display_name":"group_access"},"REQUESTED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"REQUESTED_AT","comment":null,"display_name":"requested_at"},"USER_ID":{"type":"NUMBER","index":10,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"user_id"},"USER_STATE":{"type":"TEXT","index":11,"name":"USER_STATE","comment":null,"display_name":"user_state"},"USER_TYPE":{"type":"NUMBER","index":12,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IS_GUEST":{"type":"BOOLEAN","index":13,"name":"is_guest","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_guest"},"IS_ACTIVE":{"type":"BOOLEAN","index":14,"name":"is_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_active"},"IS_BILLABLE":{"type":"BOOLEAN","index":15,"name":"is_billable","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_billable"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:23UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2818288128,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_memberships","raw_sql":"$3d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_group_group_links","model.gitlab_snowflake.gitlab_dotcom_group_group_links","model.gitlab_snowflake.gitlab_dotcom_project_group_links","model.gitlab_snowflake.gitlab_dotcom_project_group_links"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_memberships"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_memberships.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_memberships.sql","name":"gitlab_dotcom_memberships","alias":"gitlab_dotcom_memberships","checksum":{"name":"sha256","checksum":"837e61f2bf0c31b862d035436a74e106c411bc3eec4a0316f3d0c529515ed6cc"},"tags":["product"],"refs":[["gitlab_dotcom_members"],["gitlab_dotcom_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_group_group_links"],["gitlab_dotcom_group_group_links"],["gitlab_dotcom_project_group_links"],["gitlab_dotcom_project_group_links"]],"sources":[],"metrics":[],"description":"$3e","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_memberships.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.354055,"compiled_sql":"$3f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_memberships","label":"gitlab_dotcom_memberships"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_RETENTION_COHORTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"COHORT_KEY":{"type":"TEXT","index":1,"name":"cohort_key","comment":null,"description":"md5 of cohort date and cohort period in other to provide a unique key","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"cohort_key"},"COHORT_DATE":{"type":"DATE","index":2,"name":"cohort_date","comment":null,"description":"Users are cohorted based on the month their account was created on gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"cohort_date"},"PERIOD":{"type":"NUMBER","index":3,"name":"period","comment":null,"description":"Length in months of activity period, using the difference between `created_at` and `last_activity_on`.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"period"},"ACTIVE_IN_PERIOD_DISTINCT_COUNT":{"type":"NUMBER","index":4,"name":"active_in_period_distinct_count","comment":null,"description":"Count of distinct Users active on this period.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"active_in_period_distinct_count"},"BASE_COHORT_COUNT":{"type":"NUMBER","index":5,"name":"base_cohort_count","comment":null,"description":"Size of the original cohort.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"base_cohort_count"},"RETENTION":{"type":"FLOAT","index":6,"name":"retention","comment":null,"description":"Calculated as `active_in_period_distinct_count` / `base_cohort_count`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"retention"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":447488,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_retention_cohorts","raw_sql":"$40","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_retention_cohorts"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_retention_cohorts.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_retention_cohorts.sql","name":"gitlab_dotcom_retention_cohorts","alias":"gitlab_dotcom_retention_cohorts","checksum":{"name":"sha256","checksum":"cab1f2a8f7dcd6c6c37bddcb72dae2e017546eb3e76d2b80d2caf9ec4b59029a"},"tags":["product"],"refs":[["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"This table produces monthly retention rates by monthly signup cohort.\n\nThe `cohorting` CTE establishes how long the user was active by comparing `created_at` with `last_activity_on` and marking this length of activity in months.\n\nThe final result is determined by merging the `cohorting` table to itself when activity length = 0 so that we have the based size of the cohort, then take the rate from members active in each period of activity.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_retention_cohorts.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.400091,"compiled_sql":"$41","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_retention_cohorts","label":"gitlab_dotcom_retention_cohorts"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USAGE_DATA_ISSUES","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_PRIMARY_KEY":{"type":"TEXT","index":1,"name":"event_primary_key","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"event_primary_key"},"EVENT_NAME":{"type":"TEXT","index":2,"name":"event_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_name"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"IS_BLOCKED_NAMESPACE":{"type":"BOOLEAN","index":5,"name":"is_blocked_namespace","comment":null,"description":"boolean flag set to TRUE if the creator of the namespace is a blocked user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_blocked_namespace"},"USER_ID":{"type":"NUMBER","index":6,"name":"USER_ID","comment":null,"display_name":"user_id"},"PARENT_TYPE":{"type":"TEXT","index":7,"name":"PARENT_TYPE","comment":null,"display_name":"parent_type"},"PARENT_ID":{"type":"NUMBER","index":8,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"PARENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"PARENT_CREATED_AT","comment":null,"display_name":"parent_created_at"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":10,"name":"PROJECT_IS_LEARN_GITLAB","comment":null,"display_name":"project_is_learn_gitlab"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":11,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"event_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_created_at"},"IS_REPRESENTATIVE_OF_STAGE":{"type":"BOOLEAN","index":13,"name":"is_representative_of_stage","comment":null,"description":"This column represents whether or not this action represents being active for the entire stage. One action per stage has this designation.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_representative_of_stage"},"STAGE_NAME":{"type":"TEXT","index":14,"name":"stage_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"stage_name"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":15,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":16,"name":"PLAN_NAME_AT_EVENT_DATE","comment":null,"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":17,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"DAYS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":19,"name":"DAYS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"days_since_namespace_creation"},"WEEKS_SINCE_NAMESPACE_CREATION":{"type":"NUMBER","index":20,"name":"WEEKS_SINCE_NAMESPACE_CREATION","comment":null,"display_name":"weeks_since_namespace_creation"},"DAYS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":21,"name":"DAYS_SINCE_PARENT_CREATION","comment":null,"display_name":"days_since_parent_creation"},"WEEKS_SINCE_PARENT_CREATION":{"type":"NUMBER","index":22,"name":"WEEKS_SINCE_PARENT_CREATION","comment":null,"display_name":"weeks_since_parent_creation"},"DAYS_SINCE_USER_CREATION":{"type":"NUMBER","index":23,"name":"DAYS_SINCE_USER_CREATION","comment":null,"display_name":"days_since_user_creation"},"WEEKS_SINCE_USER_CREATION":{"type":"NUMBER","index":24,"name":"WEEKS_SINCE_USER_CREATION","comment":null,"display_name":"weeks_since_user_creation"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:40UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":63487637504,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_usage_data_issues","raw_sql":"$42","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_users_blocked_xf","model.gitlab_snowflake.gitlab_dotcom_issues_xf","model.gitlab_snowflake.gitlab_dotcom_issues_xf","model.gitlab_snowflake.gitlab_dotcom_resource_label_events_xf","model.gitlab_snowflake.gitlab_dotcom_resource_label_events_xf","model.gitlab_snowflake.gitlab_dotcom_resource_milestone_events_xf","model.gitlab_snowflake.gitlab_dotcom_resource_milestone_events_xf","model.gitlab_snowflake.gitlab_dotcom_issues","model.gitlab_snowflake.gitlab_dotcom_issues","model.gitlab_snowflake.gitlab_dotcom_resource_weight_events_xf","model.gitlab_snowflake.gitlab_dotcom_resource_weight_events_xf","model.gitlab_snowflake.gitlab_dotcom_events","model.gitlab_snowflake.gitlab_dotcom_events","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"event_primary_key","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","automatic_clustering":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_usage_data_issues"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_issues.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_issues.sql","name":"gitlab_dotcom_usage_data_issues","alias":"gitlab_dotcom_usage_data_issues","checksum":{"name":"sha256","checksum":"0a79da7bb16218f8c344d4439d13f529ae0a3e684345ff5a60f665c8d1b35db1"},"tags":["product","mnpi_exception"],"refs":[["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_plans"],["gitlab_dotcom_plans"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_users_blocked_xf"],["gitlab_dotcom_issues_xf"],["gitlab_dotcom_issues_xf"],["gitlab_dotcom_resource_label_events_xf"],["gitlab_dotcom_resource_label_events_xf"],["gitlab_dotcom_resource_milestone_events_xf"],["gitlab_dotcom_resource_milestone_events_xf"],["gitlab_dotcom_issues"],["gitlab_dotcom_issues"],["gitlab_dotcom_resource_weight_events_xf"],["gitlab_dotcom_resource_weight_events_xf"],["gitlab_dotcom_events"],["gitlab_dotcom_events"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"$43","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_usage_data_issues.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["mnpi_exception"],"unique_key":"event_primary_key","automatic_clustering":true},"created_at":1689033759.4315684,"compiled_sql":"$44","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_usage_data_issues","label":"gitlab_dotcom_usage_data_issues"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_EVENTS_MONTHLY_ACTIVE_USERS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DAY":{"type":"DATE","index":1,"name":"day","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day"},"IS_LAST_DAY_OF_MONTH":{"type":"BOOLEAN","index":2,"name":"is_last_day_of_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_last_day_of_month"},"COUNT_AUDIT_EVENTS_ACTIVE_USERS_LAST_28_DAYS":{"type":"NUMBER","index":3,"name":"count_audit_events_active_users_last_28_days","comment":null,"description":"The number of unique active users (from events table) in the previous 28 days (inclusive).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_audit_events_active_users_last_28_days"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":4,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":5,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS":{"type":"NUMBER","index":6,"name":"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS","comment":null,"display_name":"count_events_active_users_last_28_days"},"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_ID":{"type":"NUMBER","index":7,"name":"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_ID","comment":null,"display_name":"count_events_active_users_last_28_days_by_plan_id"},"COUNT_EVENTS_ACTIVE_NAMESPACES_LAST_28_DAYS_BY_PLAN_ID":{"type":"NUMBER","index":8,"name":"COUNT_EVENTS_ACTIVE_NAMESPACES_LAST_28_DAYS_BY_PLAN_ID","comment":null,"display_name":"count_events_active_namespaces_last_28_days_by_plan_id"},"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_WAS_PAID":{"type":"NUMBER","index":9,"name":"COUNT_EVENTS_ACTIVE_USERS_LAST_28_DAYS_BY_PLAN_WAS_PAID","comment":null,"display_name":"count_events_active_users_last_28_days_by_plan_was_paid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:38UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":727040,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_events_monthly_active_users","raw_sql":"$45","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.gitlab_dotcom_audit_events","model.gitlab_snowflake.gitlab_dotcom_audit_events","model.gitlab_snowflake.gitlab_dotcom_events","model.gitlab_snowflake.gitlab_dotcom_events","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_events_monthly_active_users"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_events_monthly_active_users.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_events_monthly_active_users.sql","name":"gitlab_dotcom_events_monthly_active_users","alias":"gitlab_dotcom_events_monthly_active_users","checksum":{"name":"sha256","checksum":"1ccb7f4368004f988900011c4589af302786687686d5ef19a0023cdc3b147f65"},"tags":["product"],"refs":[["date_details"],["date_details"],["gitlab_dotcom_audit_events"],["gitlab_dotcom_audit_events"],["gitlab_dotcom_events"],["gitlab_dotcom_events"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"For each day, this model counts the number of active users from the previous 28 days. The definiton of an active user is completing one or more audit events within the timeframe. This model includes the referenced date as part of the 28-day window. So for example, the window on January 31th would be from the start of January 4th to the end of January 31 (inclusive).  \n\nThis model includes one row for every day, but MAU for a given month will typically be reported as the MAU on the **last day of the month**.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_events_monthly_active_users.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033759.3598573,"compiled_sql":"$46","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_events_monthly_active_users","label":"gitlab_dotcom_events_monthly_active_users"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PTPF_SCORES_BY_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"Unique identifier for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_marketing_contact_id"},"NAMESPACE_ID":{"type":"TEXT","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"SCORE":{"type":"NUMBER","index":3,"name":"SCORE","comment":null,"display_name":"score"},"INSIGHTS":{"type":"TEXT","index":4,"name":"INSIGHTS","comment":null,"display_name":"insights"},"SCORE_GROUP":{"type":"NUMBER","index":5,"name":"SCORE_GROUP","comment":null,"display_name":"score_group"},"SCORE_DATE":{"type":"DATE","index":6,"name":"SCORE_DATE","comment":null,"display_name":"score_date"},"DAYS_SINCE_TRIAL_START":{"type":"NUMBER","index":7,"name":"DAYS_SINCE_TRIAL_START","comment":null,"display_name":"days_since_trial_start"},"PAST_INSIGHTS":{"type":"TEXT","index":8,"name":"PAST_INSIGHTS","comment":null,"display_name":"past_insights"},"PAST_SCORE_GROUP":{"type":"NUMBER","index":9,"name":"PAST_SCORE_GROUP","comment":null,"display_name":"past_score_group"},"PAST_SCORE_DATE":{"type":"DATE","index":10,"name":"PAST_SCORE_DATE","comment":null,"display_name":"past_score_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4990976,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ptpf_scores_by_user","raw_sql":"$47","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.ptpf_scores_source","model.gitlab_snowflake.ptpf_scores_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ptpf_scores_by_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ptpf_scores_by_user.sql","original_file_path":"models/common_prep/prep_ptpf_scores_by_user.sql","name":"prep_ptpf_scores_by_user","alias":"prep_ptpf_scores_by_user","checksum":{"name":"sha256","checksum":"cc23b1655dd61491fd222d71841fe96f8704dc5273c22345740612d388f29f3a"},"tags":[],"refs":[["prep_namespace"],["prep_namespace"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["ptpf_scores_source"],["ptpf_scores_source"]],"sources":[],"metrics":[],"description":"Takes the scores from ptpf_scores, transforms it to user / email address grain and uses the latest score date available. It only syncs contacts with a `score_group >= 4`.\n\nThe scores of this model are then used in mart_marketing_contact and the marketing pump to later be synced with Marketo and SFDC.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ptpf_scores_by_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.5133398,"compiled_sql":"$48","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ptpf_scores_by_user","label":"prep_ptpf_scores_by_user"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_USERS_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"ROLE_ID","comment":null,"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"ROLE","comment":null,"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":68,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"},"USER_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":69,"name":"USER_UPDATED_AT","comment":null,"display_name":"user_updated_at"},"DAYS_ACTIVE":{"type":"NUMBER","index":70,"name":"days_active","comment":null,"description":"days between user creation and last activity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_active"},"ACCOUNT_AGE":{"type":"NUMBER","index":71,"name":"ACCOUNT_AGE","comment":null,"display_name":"account_age"},"ACCOUNT_AGE_COHORT":{"type":"TEXT","index":72,"name":"account_age_cohort","comment":null,"description":"cohorting of time between last dbt run and user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_age_cohort"},"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID":{"type":"NUMBER","index":73,"name":"HIGHEST_PAID_SUBSCRIPTION_PLAN_ID","comment":null,"display_name":"highest_paid_subscription_plan_id"},"IS_PAID_USER":{"type":"BOOLEAN","index":74,"name":"IS_PAID_USER","comment":null,"display_name":"is_paid_user"},"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID":{"type":"NUMBER","index":75,"name":"HIGHEST_PAID_SUBSCRIPTION_NAMESPACE_ID","comment":null,"display_name":"highest_paid_subscription_namespace_id"},"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":76,"name":"HIGHEST_PAID_SUBSCRIPTION_ULTIMATE_PARENT_ID","comment":null,"display_name":"highest_paid_subscription_ultimate_parent_id"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE":{"type":"TEXT","index":77,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_TYPE","comment":null,"display_name":"highest_paid_subscription_inheritance_source_type"},"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID":{"type":"NUMBER","index":78,"name":"HIGHEST_PAID_SUBSCRIPTION_INHERITANCE_SOURCE_ID","comment":null,"display_name":"highest_paid_subscription_inheritance_source_id"},"HAS_CUSTOMER_ACCOUNT":{"type":"BOOLEAN","index":79,"name":"HAS_CUSTOMER_ACCOUNT","comment":null,"display_name":"has_customer_account"},"FIRST_CUSTOMER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":80,"name":"FIRST_CUSTOMER_CREATED_AT","comment":null,"display_name":"first_customer_created_at"},"FIRST_CUSTOMER_ID":{"type":"NUMBER","index":81,"name":"FIRST_CUSTOMER_ID","comment":null,"display_name":"first_customer_id"},"CUSTOMER_ID_LIST":{"type":"ARRAY","index":82,"name":"CUSTOMER_ID_LIST","comment":null,"display_name":"customer_id_list"},"HAS_STARTED_TRIAL":{"type":"BOOLEAN","index":83,"name":"HAS_STARTED_TRIAL","comment":null,"display_name":"has_started_trial"},"HAS_STARTED_TRIAL_AT":{"type":"DATE","index":84,"name":"HAS_STARTED_TRIAL_AT","comment":null,"display_name":"has_started_trial_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1711788544,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_xf","raw_sql":"$49","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_customers","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.customers_db_trials","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_users_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_users_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_xf.sql","name":"gitlab_dotcom_users_xf","alias":"gitlab_dotcom_users_xf","checksum":{"name":"sha256","checksum":"d362accc9899b1c964f4c7ab946596fb30b3ebb6db3eae295b1781de483d6694"},"tags":["product","mnpi_exception"],"refs":[["customers_db_customers"],["customers_db_customers"],["customers_db_trials"],["customers_db_trials"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_highest_paid_subscription_plan"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"$4a","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_users_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033759.4348238,"compiled_sql":"$4b","extra_ctes_injected":true,"extra_ctes":[{"id":"model.gitlab_snowflake.gitlab_dotcom_highest_paid_subscription_plan","sql":"$4c"}],"relation_name":"\"PROD\".legacy.gitlab_dotcom_users_xf","label":"gitlab_dotcom_users_xf"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_NAMESPACES_XF","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":2,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":3,"name":"namespace_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":4,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":5,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":6,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"NAMESPACE_UPDATED_AT","comment":null,"display_name":"namespace_updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":9,"name":"IS_MEMBERSHIP_LOCKED","comment":null,"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":10,"name":"HAS_REQUEST_ACCESS_ENABLED","comment":null,"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":11,"name":"HAS_SHARE_WITH_GROUP_LOCKED","comment":null,"display_name":"has_share_with_group_locked"},"VISIBILITY_LEVEL":{"type":"TEXT","index":12,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":13,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":14,"name":"LDAP_SYNC_ERROR","comment":null,"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LDAP_SYNC_LAST_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"LDAP_SYNC_LAST_SYNC_AT","comment":null,"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":18,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":19,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"VARIANT","index":20,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":21,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":22,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":23,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":24,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION","comment":null,"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":25,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":26,"name":"PROJECT_CREATION_LEVEL","comment":null,"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":27,"name":"PUSH_RULE_ID","comment":null,"display_name":"push_rule_id"},"CREATOR_ID":{"type":"NUMBER","index":28,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":29,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"NAMESPACE_ULTIMATE_PARENT_ID":{"type":"VARIANT","index":30,"name":"NAMESPACE_ULTIMATE_PARENT_ID","comment":null,"display_name":"namespace_ultimate_parent_id"},"PLAN_ID":{"type":"NUMBER","index":31,"name":"plan_id","comment":null,"description":"The **plan_id** associated with the namespace's subscription. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_id"},"PLAN_TITLE":{"type":"TEXT","index":32,"name":"plan_title","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_title"},"PLAN_IS_PAID":{"type":"BOOLEAN","index":33,"name":"plan_is_paid","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_is_paid"},"MEMBER_COUNT":{"type":"NUMBER","index":34,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"},"PROJECT_COUNT":{"type":"NUMBER","index":35,"name":"project_count","comment":null,"description":"The number of projects that are presently associated with the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2367414272,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","raw_sql":"$4d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.filter_out_blocked_users","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_namespaces","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_members","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_projects","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.gitlab_dotcom_audit_events","model.gitlab_snowflake.gitlab_dotcom_audit_events"]},"config":{"enabled":true,"alias":"gitlab_dotcom_namespaces_xf","schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_namespaces_xf"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_namespaces_xf.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespaces_xf.sql","name":"gitlab_dotcom_namespaces_xf","alias":"gitlab_dotcom_namespaces_xf","checksum":{"name":"sha256","checksum":"9e833e9810ae8536931be8fb89a4c88a59905f227bddc105bbdb0e93d9d29e1a"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces"],["gitlab_dotcom_namespaces"],["gitlab_dotcom_members"],["gitlab_dotcom_members"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_projects"],["gitlab_dotcom_projects"],["gitlab_dotcom_namespace_lineage"],["gitlab_dotcom_namespace_lineage"],["prep_audit_event_details_clean"],["prep_audit_event_details_clean"],["gitlab_dotcom_audit_events"],["gitlab_dotcom_audit_events"]],"sources":[],"metrics":[],"description":"Includes all columns from the namespaces base model.  \nThe plan columns here (plan_id, plan_title, plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\nAdds the count of members and projects associated with the namespace.  \nAlso adds boolean column `namespaces_plan_is_paid` to provide extra context.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_namespaces_xf.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"],"alias":"gitlab_dotcom_namespaces_xf"},"created_at":1689033759.3823533,"compiled_sql":"$4e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_namespaces_xf","label":"gitlab_dotcom_namespaces_xf"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_NAMESPACE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_IS_ULTIMATE_PARENT":{"type":"BOOLEAN","index":3,"name":"namespace_is_ultimate_parent","comment":null,"description":"Boolean flag which is set to True if the namespace is the ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_ultimate_parent"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":4,"name":"namespace_is_internal","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"NAMESPACE_NAME":{"type":"TEXT","index":5,"name":"namespace_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":6,"name":"namespace_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":7,"name":"owner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":9,"name":"has_avatar","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_avatar"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":12,"name":"is_membership_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":13,"name":"has_request_access_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":14,"name":"has_share_with_group_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_share_with_group_locked"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":15,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"VISIBILITY_LEVEL":{"type":"TEXT","index":16,"name":"visibility_level","comment":null,"description":"The visibility setting for the namespace or project: public, private, or internal. More information about namespace and project visibility [here](https://docs.gitlab.com/ee/user/public_access.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":17,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":18,"name":"ldap_sync_error","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"ldap_sync_last_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ldap_sync_last_successful_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"ldap_sync_last_sync_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":22,"name":"lfs_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":23,"name":"parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":24,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":25,"name":"shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":26,"name":"extra_shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":27,"name":"repository_size_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":28,"name":"does_require_two_factor_authentication","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":29,"name":"two_factor_grace_period","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":30,"name":"project_creation_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":31,"name":"push_rule_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"push_rule_id"},"CREATOR_ID":{"type":"NUMBER","index":32,"name":"creator_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"creator_id"},"NAMESPACE_CREATOR_IS_BLOCKED":{"type":"BOOLEAN","index":33,"name":"namespace_creator_is_blocked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_creator_is_blocked"},"GITLAB_PLAN_ID":{"type":"NUMBER","index":34,"name":"gitlab_plan_id","comment":null,"description":"The `plan_id` associated with the namespace's _GitLab_ subscription. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_id"},"GITLAB_PLAN_TITLE":{"type":"TEXT","index":35,"name":"gitlab_plan_title","comment":null,"description":"The `plan_title` associated with the namespace's _GitLab_ subscription. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_title"},"GITLAB_PLAN_IS_PAID":{"type":"BOOLEAN","index":36,"name":"gitlab_plan_is_paid","comment":null,"description":"Indicates whether or not the namespace is subscribed to a paid plan. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_is_paid"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":37,"name":"dim_product_tier_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"GITLAB_PLAN_SEATS":{"type":"NUMBER","index":38,"name":"gitlab_plan_seats","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_seats"},"GITLAB_PLAN_SEATS_IN_USE":{"type":"NUMBER","index":39,"name":"gitlab_plan_seats_in_use","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_seats_in_use"},"GITLAB_PLAN_MAX_SEATS_USED":{"type":"NUMBER","index":40,"name":"gitlab_plan_max_seats_used","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_max_seats_used"},"NAMESPACE_MEMBER_COUNT":{"type":"NUMBER","index":41,"name":"namespace_member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_member_count"},"NAMESPACE_PROJECT_COUNT":{"type":"NUMBER","index":42,"name":"NAMESPACE_PROJECT_COUNT","comment":null,"display_name":"namespace_project_count"},"HAS_CODE_SUGGESTIONS_ENABLED":{"type":"BOOLEAN","index":43,"name":"has_code_suggestions_enabled","comment":null,"description":"Boolean flag set to True if the namespace has code suggestions enabled. This appears as `code_suggestions` in the gitlab.com db `namespace_settings` table.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_code_suggestions_enabled"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":44,"name":"is_currently_valid","comment":null,"description":"Flags whether the namespace is currently valid. `FALSE` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_currently_valid"},"CREATED_BY":{"type":"TEXT","index":45,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":46,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":47,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":48,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":49,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":50,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"namespace_created_at":{"name":"namespace_created_at","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_created_at"},"namespace_updated_at":{"name":"namespace_updated_at","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_updated_at"},"dap_sync_status":{"name":"dap_sync_status","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dap_sync_status"},"current_project_count":{"name":"current_project_count","description":"The number of projects that are presently associated with the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_project_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:40UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2699501568,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_namespace","raw_sql":"$4f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.prep_namespace_hist","model.gitlab_snowflake.prep_namespace_hist","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_source","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_namespace"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_namespace.sql","original_file_path":"models/common_prep/prep_namespace.sql","name":"prep_namespace","alias":"prep_namespace","checksum":{"name":"sha256","checksum":"41dc2b8ac8a4f3a99595d23a39b60f3ed05ba69d14805879b5fdd176d1f7736e"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["prep_namespace_hist"],["prep_namespace_hist"],["gitlab_dotcom_namespace_settings_source"],["gitlab_dotcom_namespace_settings_source"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["map_namespace_internal"],["map_namespace_internal"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_product_tier"],["prep_product_tier"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_audit_events_source"],["gitlab_dotcom_audit_events_source"],["prep_audit_event_details_clean"],["prep_audit_event_details_clean"],["prep_user"],["prep_user"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"Includes all columns from the namespaces base model. The plan columns in this table (gitlab_plan_id, gitlab_plan_title, gitlab_plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\n\nThis table add a count of members and projects currently associated with the namespace.\nBoolean columns: gitlab_plan_is_paid, namespace_is_internal, namespace_is_ultimate_parent\n\nA NULL namespace type defaults to \"Individual\".\nThis table joins to common product tier dimension via dim_product_tier_id to get the current product tier.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_namespace.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033756.4780283,"compiled_sql":"$50","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_namespace","label":"prep_namespace"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"GITLAB_DOTCOM_EVENTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_ID":{"type":"NUMBER","index":1,"name":"EVENT_ID","comment":null,"display_name":"event_id"},"PROJECT_ID":{"type":"NUMBER","index":2,"name":"PROJECT_ID","comment":null,"display_name":"project_id"},"AUTHOR_ID":{"type":"NUMBER","index":3,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"TARGET_ID":{"type":"NUMBER","index":4,"name":"TARGET_ID","comment":null,"display_name":"target_id"},"TARGET_TYPE":{"type":"TEXT","index":5,"name":"TARGET_TYPE","comment":null,"display_name":"target_type"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"EVENT_ACTION_TYPE_ID":{"type":"NUMBER","index":8,"name":"EVENT_ACTION_TYPE_ID","comment":null,"display_name":"event_action_type_id"},"EVENT_ACTION_TYPE":{"type":"TEXT","index":9,"name":"EVENT_ACTION_TYPE","comment":null,"display_name":"event_action_type"},"ULTIMATE_PARENT_ID":{"type":"VARIANT","index":10,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"PLAN_ID_AT_EVENT_DATE":{"type":"TEXT","index":11,"name":"PLAN_ID_AT_EVENT_DATE","comment":null,"display_name":"plan_id_at_event_date"},"PLAN_NAME_AT_EVENT_DATE":{"type":"TEXT","index":12,"name":"PLAN_NAME_AT_EVENT_DATE","comment":null,"display_name":"plan_name_at_event_date"},"PLAN_WAS_PAID_AT_EVENT_DATE":{"type":"BOOLEAN","index":13,"name":"PLAN_WAS_PAID_AT_EVENT_DATE","comment":null,"display_name":"plan_was_paid_at_event_date"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"USER_CREATED_AT","comment":null,"display_name":"user_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:24UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":59692134400,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_events","raw_sql":"$51","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.coalesce_to_infinity","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_events_source","model.gitlab_snowflake.gitlab_dotcom_events_source","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_projects_xf","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_plans","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"event_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","xf","gitlab_dotcom_events"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/xf/gitlab_dotcom_events.sql","original_file_path":"models/legacy/gitlab_dotcom/xf/gitlab_dotcom_events.sql","name":"gitlab_dotcom_events","alias":"gitlab_dotcom_events","checksum":{"name":"sha256","checksum":"58e992f933996996df549775caed8dfcc7f08c2612aa831589af0dee43c5cc15"},"tags":["product"],"refs":[["gitlab_dotcom_events_source"],["gitlab_dotcom_events_source"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_projects_xf"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_plans"],["gitlab_dotcom_plans"],["gitlab_dotcom_users"],["gitlab_dotcom_users"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/xf/gitlab_dotcom_events.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"event_id"},"created_at":1689033715.9722047,"compiled_sql":"$52","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.gitlab_dotcom_events","label":"gitlab_dotcom_events"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"user_id","model":"{{ get_where_subquery(ref('gitlab_dotcom_users_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","not_null_gitlab_dotcom_users_source_user_id"],"unique_id":"test.gitlab_snowflake.not_null_gitlab_dotcom_users_source_user_id.28ca62acd3","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_gitlab_dotcom_users_source_user_id.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/schema.yml","name":"not_null_gitlab_dotcom_users_source_user_id","alias":"not_null_gitlab_dotcom_users_source_user_id","checksum":{"name":"none","checksum":""},"tags":["gitlab_dotcom","tdf"],"refs":[["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/schema.yml/not_null_gitlab_dotcom_users_source_user_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033742.5124354,"compiled_sql":"\n    \n    \n\n\n\nselect user_id\nfrom \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\nwhere user_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"user_id","file_key_name":"models.gitlab_dotcom_users_source","label":"not_null_gitlab_dotcom_users_source_user_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"user_id","model":"{{ get_where_subquery(ref('gitlab_dotcom_users_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","unique_gitlab_dotcom_users_source_user_id"],"unique_id":"test.gitlab_snowflake.unique_gitlab_dotcom_users_source_user_id.347f0effff","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_gitlab_dotcom_users_source_user_id.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/schema.yml","name":"unique_gitlab_dotcom_users_source_user_id","alias":"unique_gitlab_dotcom_users_source_user_id","checksum":{"name":"none","checksum":""},"tags":["gitlab_dotcom","tdf"],"refs":[["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/schema.yml/unique_gitlab_dotcom_users_source_user_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033742.516079,"compiled_sql":"\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"user_id","file_key_name":"models.gitlab_dotcom_users_source","label":"unique_gitlab_dotcom_users_source_user_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"created_at","model":"{{ get_where_subquery(ref('gitlab_dotcom_users_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","not_null_gitlab_dotcom_users_source_created_at"],"unique_id":"test.gitlab_snowflake.not_null_gitlab_dotcom_users_source_created_at.ef333c3ea9","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_gitlab_dotcom_users_source_created_at.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/schema.yml","name":"not_null_gitlab_dotcom_users_source_created_at","alias":"not_null_gitlab_dotcom_users_source_created_at","checksum":{"name":"none","checksum":""},"tags":["gitlab_dotcom","tdf"],"refs":[["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/schema.yml/not_null_gitlab_dotcom_users_source_created_at.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033742.5200872,"compiled_sql":"\n    \n    \n\n\n\nselect created_at\nfrom \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\nwhere created_at is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"created_at","file_key_name":"models.gitlab_dotcom_users_source","label":"not_null_gitlab_dotcom_users_source_created_at"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"updated_at","model":"{{ get_where_subquery(ref('gitlab_dotcom_users_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","not_null_gitlab_dotcom_users_source_updated_at"],"unique_id":"test.gitlab_snowflake.not_null_gitlab_dotcom_users_source_updated_at.bc2608d65b","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_gitlab_dotcom_users_source_updated_at.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/schema.yml","name":"not_null_gitlab_dotcom_users_source_updated_at","alias":"not_null_gitlab_dotcom_users_source_updated_at","checksum":{"name":"none","checksum":""},"tags":["gitlab_dotcom","tdf"],"refs":[["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/schema.yml/not_null_gitlab_dotcom_users_source_updated_at.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033742.5240452,"compiled_sql":"\n    \n    \n\n\n\nselect updated_at\nfrom \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\nwhere updated_at is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"updated_at","file_key_name":"models.gitlab_dotcom_users_source","label":"not_null_gitlab_dotcom_users_source_updated_at"},{"raw_sql":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_gitlab_dotcom__2da85cc0831814d45a227b0a9e8935a0\") }}","test_metadata":{"name":"accepted_values","kwargs":{"values":[0,1,2,3,4,5,6,7,8,99],"column_name":"role_id","model":"{{ get_where_subquery(ref('gitlab_dotcom_users_source')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":"accepted_values_gitlab_dotcom__2da85cc0831814d45a227b0a9e8935a0","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","accepted_values_gitlab_dotcom_users_source_role_id__0__1__2__3__4__5__6__7__8__99"],"unique_id":"test.gitlab_snowflake.accepted_values_gitlab_dotcom_users_source_role_id__0__1__2__3__4__5__6__7__8__99.e08e4af152","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"accepted_values_gitlab_dotcom__2da85cc0831814d45a227b0a9e8935a0.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/schema.yml","name":"accepted_values_gitlab_dotcom_users_source_role_id__0__1__2__3__4__5__6__7__8__99","alias":"accepted_values_gitlab_dotcom__2da85cc0831814d45a227b0a9e8935a0","checksum":{"name":"none","checksum":""},"tags":["gitlab_dotcom","tdf"],"refs":[["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/schema.yml/accepted_values_gitlab_dotcom__2da85cc0831814d45a227b0a9e8935a0.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"accepted_values_gitlab_dotcom__2da85cc0831814d45a227b0a9e8935a0"},"created_at":1689033742.5285928,"compiled_sql":"\n    \n    \n\nwith all_values as (\n\n    select\n        role_id as value_field,\n        count(*) as n_records\n\n    from \"PREP\".gitlab_dotcom.gitlab_dotcom_users_source\n    group by role_id\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1','2','3','4','5','6','7','8','99'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"role_id","file_key_name":"models.gitlab_dotcom_users_source","label":"accepted_values_gitlab_dotcom_users_source_role_id__0__1__2__3__4__5__6__7__8__99"}],"exposure":[{"fqn":["gitlab_snowflake","propensity_to_purchase_trials"],"unique_id":"exposure.gitlab_snowflake.propensity_to_purchase_trials","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"data_science_exposures.yml","original_file_path":"models/data_science_exposures.yml","name":"propensity_to_purchase_trials","type":"ml","owner":{"email":"kdietz@gitlab.com","name":"Kevin Dietz"},"resource_type":"exposure","description":"","maturity":"high","meta":{},"tags":[],"url":"https://gitlab.com/gitlab-data/data-science-projects/propensity-to-purchase/-/blob/main/prod/saas-trials/ptp_trials_base_query.sql","depends_on":{"macros":[],"nodes":["model.gitlab_snowflake.customers_db_trial_histories","model.gitlab_snowflake.dim_order_hist","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.gitlab_dotcom_user_details","model.gitlab_snowflake.gitlab_dotcom_users_xf","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_usage_data_events","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.snowplow_structured_events","model.gitlab_snowflake.snowplow_gitlab_events_experiment_contexts","model.gitlab_snowflake.mart_product_usage_free_user_metrics_monthly","model.gitlab_snowflake.monthly_stage_usage_by_namespace"]},"refs":[["customers_db_trial_histories"],["dim_order_hist"],["dim_namespace"],["gitlab_dotcom_user_details"],["gitlab_dotcom_users_xf"],["gitlab_dotcom_memberships"],["gitlab_dotcom_usage_data_events"],["gitlab_dotcom_users_source"],["snowplow_structured_events"],["snowplow_gitlab_events_experiment_contexts"],["mart_product_usage_free_user_metrics_monthly"],["monthly_stage_usage_by_namespace"]],"sources":[],"created_at":1689033729.294149,"label":"propensity_to_purchase_trials"},{"fqn":["gitlab_snowflake","propensity_to_purchase_free"],"unique_id":"exposure.gitlab_snowflake.propensity_to_purchase_free","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"data_science_exposures.yml","original_file_path":"models/data_science_exposures.yml","name":"propensity_to_purchase_free","type":"ml","owner":{"email":"kdietz@gitlab.com","name":"Kevin Dietz"},"resource_type":"exposure","description":"","maturity":"high","meta":{},"tags":[],"url":"https://gitlab.com/gitlab-data/data-science-projects/propensity-to-purchase/-/blob/main/prod/saas-free/ptp_free_query.sql","depends_on":{"macros":[],"nodes":["model.gitlab_snowflake.customers_db_trial_histories","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.gitlab_dotcom_user_details","model.gitlab_snowflake.gitlab_dotcom_users_xf","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.snowplow_structured_events","model.gitlab_snowflake.snowplow_gitlab_events_experiment_contexts","model.gitlab_snowflake.mart_product_usage_free_user_metrics_monthly","model.gitlab_snowflake.monthly_stage_usage_by_namespace","model.gitlab_snowflake.gitlab_dotcom_usage_data_events","model.gitlab_snowflake.dim_marketing_contact_no_pii","model.gitlab_snowflake.mart_crm_attribution_touchpoint"]},"refs":[["customers_db_trial_histories"],["dim_namespace"],["gitlab_dotcom_user_details"],["gitlab_dotcom_users_xf"],["gitlab_dotcom_memberships"],["gitlab_dotcom_users_source"],["snowplow_structured_events"],["snowplow_gitlab_events_experiment_contexts"],["mart_product_usage_free_user_metrics_monthly"],["monthly_stage_usage_by_namespace"],["gitlab_dotcom_usage_data_events"],["dim_marketing_contact_no_pii"],["mart_crm_attribution_touchpoint"]],"sources":[],"created_at":1689033729.3139508,"label":"propensity_to_purchase_free"},{"fqn":["gitlab_snowflake","namespace_segmentation"],"unique_id":"exposure.gitlab_snowflake.namespace_segmentation","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"data_science_exposures.yml","original_file_path":"models/data_science_exposures.yml","name":"namespace_segmentation","type":"ml","owner":{"email":"kmagda@gitlab.com","name":"Klaudia Magda"},"resource_type":"exposure","description":"","maturity":"high","meta":{},"tags":[],"url":"https://gitlab.com/gitlab-data/data-science-projects/namespace-segmentation/-/blob/main/prod/final_model_training_query.sql","depends_on":{"macros":[],"nodes":["model.gitlab_snowflake.monthly_stage_usage_by_namespace","model.gitlab_snowflake.dim_namespace","model.gitlab_snowflake.mart_product_usage_paid_user_metrics_monthly","model.gitlab_snowflake.mart_product_usage_free_user_metrics_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_settings","model.gitlab_snowflake.gitlab_dotcom_namespaces_xf","model.gitlab_snowflake.gitlab_dotcom_memberships","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_usage_data_events"]},"refs":[["monthly_stage_usage_by_namespace"],["dim_namespace"],["mart_product_usage_paid_user_metrics_monthly"],["mart_product_usage_free_user_metrics_monthly"],["gitlab_dotcom_namespace_settings"],["gitlab_dotcom_namespaces_xf"],["gitlab_dotcom_memberships"],["gitlab_dotcom_users_source"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_usage_data_events"]],"sources":[],"created_at":1689033729.332378,"label":"namespace_segmentation"}]},"node":{"resource_type":"model","name":"gitlab_dotcom_users_source","unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_USERS_DEDUPE_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ID":{"type":"NUMBER","index":1,"name":"ID","comment":null,"display_name":"id"},"EMAIL":{"type":"TEXT","index":2,"name":"EMAIL","comment":null,"display_name":"email"},"COMMIT_EMAIL":{"type":"TEXT","index":3,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":5,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CURRENT_SIGN_IN_IP":{"type":"TEXT","index":8,"name":"CURRENT_SIGN_IN_IP","comment":null,"display_name":"current_sign_in_ip"},"LAST_SIGN_IN_IP":{"type":"TEXT","index":9,"name":"LAST_SIGN_IN_IP","comment":null,"display_name":"last_sign_in_ip"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"NAME":{"type":"TEXT","index":12,"name":"NAME","comment":null,"display_name":"name"},"ADMIN":{"type":"BOOLEAN","index":13,"name":"ADMIN","comment":null,"display_name":"admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":14,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":15,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"CAN_CREATE_GROUP":{"type":"BOOLEAN","index":17,"name":"CAN_CREATE_GROUP","comment":null,"display_name":"can_create_group"},"CAN_CREATE_TEAM":{"type":"BOOLEAN","index":18,"name":"CAN_CREATE_TEAM","comment":null,"display_name":"can_create_team"},"STATE":{"type":"TEXT","index":19,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":20,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":22,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":23,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"AVATAR":{"type":"TEXT","index":24,"name":"AVATAR","comment":null,"display_name":"avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":25,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":26,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"UNCONFIRMED_EMAIL":{"type":"TEXT","index":27,"name":"UNCONFIRMED_EMAIL","comment":null,"display_name":"unconfirmed_email"},"HIDE_NO_SSH_KEY":{"type":"BOOLEAN","index":28,"name":"HIDE_NO_SSH_KEY","comment":null,"display_name":"hide_no_ssh_key"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TEXT","index":29,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":30,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"HIDE_NO_PASSWORD":{"type":"BOOLEAN","index":31,"name":"HIDE_NO_PASSWORD","comment":null,"display_name":"hide_no_password"},"PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":32,"name":"PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"password_automatically_set"},"PUBLIC_EMAIL":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"DASHBOARD":{"type":"NUMBER","index":34,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":35,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":36,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":37,"name":"LAYOUT","comment":null,"display_name":"layout"},"HIDE_PROJECT_LIMIT":{"type":"BOOLEAN","index":38,"name":"HIDE_PROJECT_LIMIT","comment":null,"display_name":"hide_project_limit"},"NOTE":{"type":"TEXT","index":39,"name":"NOTE","comment":null,"display_name":"note"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TEXT","index":40,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"EXTERNAL":{"type":"BOOLEAN","index":41,"name":"EXTERNAL","comment":null,"display_name":"external"},"AUDITOR":{"type":"BOOLEAN","index":42,"name":"AUDITOR","comment":null,"display_name":"auditor"},"REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":43,"name":"REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":44,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"DATE","index":45,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":46,"name":"NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":47,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"EMAIL_OPTED_IN":{"type":"BOOLEAN","index":48,"name":"EMAIL_OPTED_IN","comment":null,"display_name":"email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":49,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TEXT","index":50,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"THEME_ID":{"type":"NUMBER","index":51,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":52,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"PRIVATE_PROFILE":{"type":"BOOLEAN","index":53,"name":"PRIVATE_PROFILE","comment":null,"display_name":"private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":54,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":55,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":56,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":57,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE":{"type":"NUMBER","index":58,"name":"ROLE","comment":null,"display_name":"role"},"USERNAME":{"type":"TEXT","index":59,"name":"USERNAME","comment":null,"display_name":"username"},"FIRST_NAME":{"type":"TEXT","index":60,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":61,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USER_TYPE":{"type":"NUMBER","index":62,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"OTP_REQUIRED_FOR_LOGIN":{"type":"BOOLEAN","index":63,"name":"OTP_REQUIRED_FOR_LOGIN","comment":null,"display_name":"otp_required_for_login"},"_UPLOADED_AT":{"type":"FLOAT","index":64,"name":"_UPLOADED_AT","comment":null,"display_name":"_uploaded_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 19:15UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1471116288,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source","raw_sql":"{{ config({\n    \"materialized\": \"incremental\",\n    \"unique_key\": \"id\"\n    })\n}}\n\nSELECT *\nFROM {{ source('gitlab_dotcom', 'users') }}\n{% if is_incremental() %}\n\nWHERE updated_at >= (SELECT MAX(updated_at) FROM {{this}})\n\n{% endif %}\nQUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY updated_at DESC) = 1","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.dbt.is_incremental","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.gitlab_dotcom.users"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","dedupe","gitlab_dotcom_users_dedupe_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/dedupe/gitlab_dotcom_users_dedupe_source.sql","original_file_path":"models/sources/gitlab_dotcom/dedupe/gitlab_dotcom_users_dedupe_source.sql","name":"gitlab_dotcom_users_dedupe_source","alias":"gitlab_dotcom_users_dedupe_source","checksum":{"name":"sha256","checksum":"b163cee10691982c329673465a59e9fd295061934fb2151d140d3005312f6c25"},"tags":["sources"],"refs":[],"sources":[["gitlab_dotcom","users"]],"metrics":[],"description":"Dedupe model is used to create a copy of the Gitlab Dotcom postgres db without any transformation. The model deduplicates rows stored in the `RAW` database based on Primary Key (usually, it is `id` column) and a timestamp (`updated_at` if existing, or `created_at`)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/dedupe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/dedupe/gitlab_dotcom_users_dedupe_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["sources"],"unique_key":"id"},"created_at":1689033743.0697477,"compiled_sql":"\n\nSELECT *\nFROM \"RAW\".tap_postgres.gitlab_db_users\n\n\nWHERE updated_at >= (SELECT MAX(updated_at) FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_users_dedupe_source)\n\n\nQUALIFY ROW_NUMBER() OVER (PARTITION BY id ORDER BY updated_at DESC) = 1","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_users_dedupe_source","label":"gitlab_dotcom_users_dedupe_source"}],"macro":[{"unique_id":"macro.gitlab_snowflake.user_role_mapping","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/gitlab_dotcom/user_role_mapping.sql","original_file_path":"macros/gitlab_dotcom/user_role_mapping.sql","name":"user_role_mapping","macro_sql":"{%- macro user_role_mapping(user_role) -%}\n\n    CASE\n      WHEN {{user_role}} = 0 THEN 'Software Developer'\n      WHEN {{user_role}} = 1 THEN 'Development Team Lead'\n      WHEN {{user_role}} = 2 THEN 'Devops Engineer'\n      WHEN {{user_role}} = 3 THEN 'Systems Administrator'\n      WHEN {{user_role}} = 4 THEN 'Security Analyst'\n      WHEN {{user_role}} = 5 THEN 'Data Analyst'\n      WHEN {{user_role}} = 6 THEN 'Product Manager'\n      WHEN {{user_role}} = 7 THEN 'Product Designer'\n      WHEN {{user_role}} = 8 THEN 'Other'\n      WHEN {{user_role}} = 99 THEN 'Experiment Default Value - Signup Not Completed'\n      ELSE NULL\n    END\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro maps \"role\" values (integers) from the user table into their respective string values.\n\nFor example, user_role=0 maps to the 'Software Developer' role.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/gitlab_dotcom/macros.yml","arguments":[],"created_at":1689033765.993317},{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527},{"unique_id":"macro.gitlab_snowflake.it_job_title_hierarchy","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/common/it_job_title_hierarchy.sql","original_file_path":"macros/common/it_job_title_hierarchy.sql","name":"it_job_title_hierarchy","macro_sql":"$53","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.pad_column"]},"description":"$54","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/common/macros.yml","arguments":[{"name":"job_title","type":"string","description":""}],"created_at":1689033766.1445072}]},"node":{"resource_type":"model","name":"gitlab_dotcom_users_source","unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L55",null,{"versions":{"Source":"$56","Compiled":"$57"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
