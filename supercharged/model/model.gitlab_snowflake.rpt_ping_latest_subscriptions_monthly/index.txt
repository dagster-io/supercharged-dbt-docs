1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/67011378c759fca7.css",{"as":"style"}]
0:["UXH5preSpvs-I3nPBe5RL",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/67011378c759fca7.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-7bf5c4b4325e2618.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-14adc0d2c014a317.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_20951f","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","185:static/chunks/app/layout-37793ad3571953e0.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"SetActive","async":false}
10:I{"id":2201,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ColumnDetails","async":false}
14:I{"id":9941,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"ReferenceListClient","async":false}
3d:I{"id":4431,"chunks":["795:static/chunks/795-8e5a0df3b2a56a21.js","300:static/chunks/300-ee6112810bf33ad7.js","258:static/chunks/258-ce9da1e76dd2abbf.js","57:static/chunks/57-6476d2e1f2b52093.js","845:static/chunks/app/model/[id]/page-8973389506e0169b.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
f:Tb7b, **Description:** Self-Managed subscriptions by month and installation (if the subscription sent a ping that month). For xMAU/PI reporting, this model is used to determine the total number of active Self-Managed subscriptions on a given month and what percent of subscriptions sent a ping from a given version. It can also be used to determine what percent of subscriptions sent a ping on a given month, etc. 
- The version an installation is reporting on (major_minor_version_id), seat count (licensed_user_count), and count of pings sent that month (ping_count) are also included
- Unpaid subscriptions (ex: OSS, EDU) are _included_ in this model

**Data Grain:**
- ping_created_date_month
- latest_subscription_id
- dim_installation_id (only populated if subscription sent a ping that month)

_Important caveat:_ The grain of this model is slightly different depending on whether a subscription sent a ping that month. It is advised to look at the `MAX()` value, grouped by `latest_subscription_id`.
- If a subscription sent a ping that month, there is 1 record per subscription per installation reporting. (Note: a subscription can be associated with > 1 installation, so a single subscription could have multiple records for a given month)
- If a subscription did not send a ping that month, there is 1 record per subscription where `dim_installation_id IS NULL`

Example query

```
WITH subscription_level AS (

  SELECT
    ping_created_date_month,
    latest_subscription_id,
    COUNT(dim_installation_id) AS installation_count,
    MAX(has_sent_pings) AS has_sent_pings,
    MAX(licensed_user_count) AS seat_count
  FROM common_mart_product.rpt_ping_latest_subscriptions_monthly
  GROUP BY 1,2

)

SELECT
  ping_created_date_month,
  COUNT(latest_subscription_id) AS subscription_count,
  COUNT(IFF(has_sent_pings = TRUE, latest_subscription_id, NULL)) AS sent_ping_count,
  DIV0(sent_ping_count, subscription_count) AS subscription_ping_opt_in_rate
FROM subscription_level
GROUP BY 1
ORDER BY 1
;
```

**Filters Applied to Model:**
- Include subscriptions where:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `major_minor_version_id`, `version_is_prerelease`, and `instance_user_count` look at 'Last Ping of the Month' pings
- Exclude the current month

**Business Logic in this Model:**
- If a ping is received from an installation with a license mapped to a subscription but no corresponding record is found in `fct_charge`, a record is still included in the model where `is_missing_charge_subscription = FALSE`. In this case, the most recent record available in `fct_charge` is used to determine the number of seats associated with the subscription.
- For a given month, all records associated with a subscription will have the same seat count (`licensed_user_count`) since that value is tied to the subscription, not an installation 11:T2ef2,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('metric_opt_in', 'rpt_ping_metric_first_last_versions'),
    ('mart_charge', 'mart_charge'),
    ('dim_charge', 'dim_charge'),
    ('fct_charge', 'fct_charge'),
    ('dim_subscription', 'dim_subscription'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_crm_account', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_date', 'dim_date'),
    ('mart_ping_instance_metric', 'mart_ping_instance_metric'),
    ('mart_ping_instance_metric_monthly', 'mart_ping_instance_metric_monthly')
    ])

}}

/*
Determine latest version for each subscription to determine if the potential metric is valid for a given month
*/

, subscriptions_w_versions AS (

  SELECT
      ping_created_date_month           AS ping_created_date_month,
      dim_installation_id               AS dim_installation_id,
      latest_subscription_id            AS latest_subscription_id,
      ping_edition                      AS ping_edition,
      version_is_prerelease             AS version_is_prerelease,
      major_minor_version_id            AS major_minor_version_id,
      instance_user_count               AS instance_user_count
  FROM mart_ping_instance_metric_monthly
      WHERE ping_delivery_type = 'Self-Managed'
      QUALIFY ROW_NUMBER() OVER (
            PARTITION BY ping_created_date_month, latest_subscription_id, dim_installation_id
              ORDER BY major_minor_version_id DESC) = 1

/*
Deduping the mart to ensure instance_user_count isn't counted 2+ times
*/

), deduped_subscriptions_w_versions AS (

    SELECT
        ping_created_date_month           AS ping_created_date_month,
        dim_installation_id               AS dim_installation_id,
        latest_subscription_id            AS latest_subscription_id,
        ping_edition                      AS ping_edition,
        version_is_prerelease             AS version_is_prerelease,
        major_minor_version_id            AS major_minor_version_id,
        MAX(instance_user_count)          AS instance_user_count
    FROM subscriptions_w_versions
      {{ dbt_utils.group_by(n=6)}}
/*
Get the count of pings each month per subscription_name_slugify
*/

), ping_counts AS (

  SELECT
    ping_created_date_month                     AS ping_created_date_month,
    dim_installation_id                         AS dim_installation_id,
    latest_subscription_id                      AS latest_subscription_id,
    COUNT(DISTINCT(dim_ping_instance_id))       AS ping_count
  FROM mart_ping_instance_metric
      {{ dbt_utils.group_by(n=3)}}

/*
Join subscription information with count of pings
*/

), joined_subscriptions AS (

  SELECT
    deduped_subscriptions_w_versions.*,
    ping_counts.ping_count
  FROM deduped_subscriptions_w_versions
    INNER JOIN ping_counts
  ON deduped_subscriptions_w_versions.ping_created_date_month = ping_counts.ping_created_date_month
    AND deduped_subscriptions_w_versions.latest_subscription_id = ping_counts.latest_subscription_id
    AND deduped_subscriptions_w_versions.dim_installation_id = ping_counts.dim_installation_id
/*
Aggregate mart_charge information (used as the basis of truth), this gets rid of host deviation
*/

), mart_charge_cleaned AS (

  SELECT
       dim_date.date_actual               AS arr_month,
       fct_charge.dim_subscription_id     AS dim_subscription_id,
       SUM(quantity)                      AS licensed_user_count,
       IFF(SUM(arr) > 0, TRUE, FALSE)     AS is_paid_subscription
     FROM fct_charge
     INNER JOIN dim_date
        ON effective_start_month <= dim_date.date_actual
        AND (effective_end_month >= dim_date.date_actual OR effective_end_month IS NULL)
        AND dim_date.day_of_month = 1
     INNER JOIN dim_charge
       ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
     INNER JOIN dim_subscription
       ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
     INNER JOIN dim_product_detail
       ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
      WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
        AND subscription_status IN ('Active','Cancelled')
        AND dim_product_detail.product_tier_name != 'Storage'
        AND DATE_TRUNC('MONTH', CURRENT_DATE) > arr_month
      {{ dbt_utils.group_by(n=2)}}

/*
Join mart_charge information bringing in mart_charge subscriptions which DO NOT appear in ping fact data
*/

), arr_counts_joined AS (

  SELECT
    mart_charge_cleaned.arr_month                                                                           AS ping_created_date_month,
    joined_subscriptions.dim_installation_id                                                                AS dim_installation_id,
    mart_charge_cleaned.dim_subscription_id                                                                 AS latest_subscription_id,
    joined_subscriptions.ping_edition                                                                       AS ping_edition,
    joined_subscriptions.version_is_prerelease                                                              AS version_is_prerelease,
    joined_subscriptions.major_minor_version_id                                                             AS major_minor_version_id,
    joined_subscriptions.instance_user_count                                                                AS instance_user_count,
    mart_charge_cleaned.licensed_user_count                                                                 AS licensed_user_count,
    mart_charge_cleaned.is_paid_subscription                                                                AS is_paid_subscription,
    joined_subscriptions.ping_count                                                                         AS ping_count,
    FALSE                                                                                                   AS is_missing_charge_subscription
  FROM mart_charge_cleaned
    LEFT OUTER JOIN joined_subscriptions
  ON joined_subscriptions.latest_subscription_id = mart_charge_cleaned.dim_subscription_id
      AND joined_subscriptions.ping_created_date_month = mart_charge_cleaned.arr_month

/*
Grab the latest values to join to missing subs
*/

), latest_mart_charge_values AS (

    SELECT
        dim_subscription_id,
        is_paid_subscription,
        licensed_user_count
    FROM mart_charge_cleaned
        QUALIFY ROW_NUMBER() OVER (
              PARTITION BY dim_subscription_id
              ORDER BY arr_month DESC) = 1

/*
This CTE below grabs the missing installation/subs for each month missing from arr_counts_joined (latest_subs) where there are actual pings from that install/sub combo)
*/

), missing_subs AS (

    SELECT
        ping_created_date_month                 AS ping_created_date_month,
        dim_installation_id                     AS dim_installation_id,
        latest_subscription_id                  AS latest_subscription_id,
        ping_edition                            AS ping_edition,
        version_is_prerelease                   AS version_is_prerelease,
        MAX(major_minor_version_id)             AS major_minor_version_id,
        MAX(instance_user_count)                AS instance_user_count,
        COUNT(DISTINCT(dim_ping_instance_id))   AS ping_count
    FROM mart_ping_instance_metric
        WHERE is_last_ping_of_month = TRUE
          AND CONCAT(latest_subscription_id, to_varchar(ping_created_date_month)) NOT IN
            (SELECT DISTINCT(CONCAT(latest_subscription_id, to_varchar(ping_created_date_month))) FROM arr_counts_joined)
          {{ dbt_utils.group_by(n=5)}}

/*
Join to capture missing metrics, uses the last value found for these in fct_charge
*/

), missing_subs_joined AS (

    SELECT
        missing_subs.*,
        latest_mart_charge_values.licensed_user_count         AS licensed_user_count,
        latest_mart_charge_values.is_paid_subscription        AS is_paid_subscription,
        TRUE                                                  AS is_missing_charge_subscription
    FROM missing_subs
        INNER JOIN latest_mart_charge_values
    ON missing_subs.latest_subscription_id = latest_mart_charge_values.dim_subscription_id

), latest_subs_unioned AS (

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM arr_counts_joined

        UNION ALL

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM missing_subs_joined

), final AS (

    SELECT
        {{ dbt_utils.surrogate_key(['ping_created_date_month', 'latest_subscription_id', 'dim_installation_id', 'ping_edition', 'version_is_prerelease']) }}                      AS ping_latest_subscriptions_monthly_id,
        latest_subs_unioned.ping_created_date_month                                                                                                                               AS ping_created_date_month,
        latest_subs_unioned.dim_installation_id                                                                                                                                   AS dim_installation_id,
        latest_subs_unioned.latest_subscription_id                                                                                                                                AS latest_subscription_id,
        latest_subs_unioned.ping_edition                                                                                                                                          AS ping_edition,
        latest_subs_unioned.version_is_prerelease                                                                                                                                 AS version_is_prerelease,
        latest_subs_unioned.major_minor_version_id                                                                                                                                AS major_minor_version_id,
        latest_subs_unioned.instance_user_count                                                                                                                                   AS instance_user_count,
        FLOOR(latest_subs_unioned.licensed_user_count)                                                                                                                            AS licensed_user_count,
        latest_subs_unioned.is_paid_subscription                                                                                                                                  AS is_paid_subscription,
        IFNULL(latest_subs_unioned.ping_count, 0)                                                                                                                                 AS ping_count,
        IFF(latest_subs_unioned.ping_edition IS NULL, FALSE, TRUE)                                                                                                                AS has_sent_pings,
        latest_subs_unioned.is_missing_charge_subscription                                                                                                                        AS is_missing_charge_subscription
    FROM latest_subs_unioned
      WHERE ping_created_date_month < DATE_TRUNC('month', CURRENT_DATE)

)

 {{ dbt_audit(
     cte_ref="final",
     created_by="@icooper-acp",
     updated_by="@jpeguero",
     created_date="2022-05-05",
     updated_date="2022-12-15"
 ) }}12:Tb7b, **Description:** Self-Managed subscriptions by month and installation (if the subscription sent a ping that month). For xMAU/PI reporting, this model is used to determine the total number of active Self-Managed subscriptions on a given month and what percent of subscriptions sent a ping from a given version. It can also be used to determine what percent of subscriptions sent a ping on a given month, etc. 
- The version an installation is reporting on (major_minor_version_id), seat count (licensed_user_count), and count of pings sent that month (ping_count) are also included
- Unpaid subscriptions (ex: OSS, EDU) are _included_ in this model

**Data Grain:**
- ping_created_date_month
- latest_subscription_id
- dim_installation_id (only populated if subscription sent a ping that month)

_Important caveat:_ The grain of this model is slightly different depending on whether a subscription sent a ping that month. It is advised to look at the `MAX()` value, grouped by `latest_subscription_id`.
- If a subscription sent a ping that month, there is 1 record per subscription per installation reporting. (Note: a subscription can be associated with > 1 installation, so a single subscription could have multiple records for a given month)
- If a subscription did not send a ping that month, there is 1 record per subscription where `dim_installation_id IS NULL`

Example query

```
WITH subscription_level AS (

  SELECT
    ping_created_date_month,
    latest_subscription_id,
    COUNT(dim_installation_id) AS installation_count,
    MAX(has_sent_pings) AS has_sent_pings,
    MAX(licensed_user_count) AS seat_count
  FROM common_mart_product.rpt_ping_latest_subscriptions_monthly
  GROUP BY 1,2

)

SELECT
  ping_created_date_month,
  COUNT(latest_subscription_id) AS subscription_count,
  COUNT(IFF(has_sent_pings = TRUE, latest_subscription_id, NULL)) AS sent_ping_count,
  DIV0(sent_ping_count, subscription_count) AS subscription_ping_opt_in_rate
FROM subscription_level
GROUP BY 1
ORDER BY 1
;
```

**Filters Applied to Model:**
- Include subscriptions where:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `major_minor_version_id`, `version_is_prerelease`, and `instance_user_count` look at 'Last Ping of the Month' pings
- Exclude the current month

**Business Logic in this Model:**
- If a ping is received from an installation with a license mapped to a subscription but no corresponding record is found in `fct_charge`, a record is still included in the model where `is_missing_charge_subscription = FALSE`. In this case, the most recent record available in `fct_charge` is used to determine the number of seats associated with the subscription.
- For a given month, all records associated with a subscription will have the same seat count (`licensed_user_count`) since that value is tied to the subscription, not an installation 13:T31f8,



WITH metric_opt_in AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_metric_first_last_versions

), mart_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dim_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_charge

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), mart_ping_instance_metric AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric

), mart_ping_instance_metric_monthly AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric_monthly

)

/*
Determine latest version for each subscription to determine if the potential metric is valid for a given month
*/

, subscriptions_w_versions AS (

  SELECT
      ping_created_date_month           AS ping_created_date_month,
      dim_installation_id               AS dim_installation_id,
      latest_subscription_id            AS latest_subscription_id,
      ping_edition                      AS ping_edition,
      version_is_prerelease             AS version_is_prerelease,
      major_minor_version_id            AS major_minor_version_id,
      instance_user_count               AS instance_user_count
  FROM mart_ping_instance_metric_monthly
      WHERE ping_delivery_type = 'Self-Managed'
      QUALIFY ROW_NUMBER() OVER (
            PARTITION BY ping_created_date_month, latest_subscription_id, dim_installation_id
              ORDER BY major_minor_version_id DESC) = 1

/*
Deduping the mart to ensure instance_user_count isn't counted 2+ times
*/

), deduped_subscriptions_w_versions AS (

    SELECT
        ping_created_date_month           AS ping_created_date_month,
        dim_installation_id               AS dim_installation_id,
        latest_subscription_id            AS latest_subscription_id,
        ping_edition                      AS ping_edition,
        version_is_prerelease             AS version_is_prerelease,
        major_minor_version_id            AS major_minor_version_id,
        MAX(instance_user_count)          AS instance_user_count
    FROM subscriptions_w_versions
      group by 1,2,3,4,5,6
/*
Get the count of pings each month per subscription_name_slugify
*/

), ping_counts AS (

  SELECT
    ping_created_date_month                     AS ping_created_date_month,
    dim_installation_id                         AS dim_installation_id,
    latest_subscription_id                      AS latest_subscription_id,
    COUNT(DISTINCT(dim_ping_instance_id))       AS ping_count
  FROM mart_ping_instance_metric
      group by 1,2,3

/*
Join subscription information with count of pings
*/

), joined_subscriptions AS (

  SELECT
    deduped_subscriptions_w_versions.*,
    ping_counts.ping_count
  FROM deduped_subscriptions_w_versions
    INNER JOIN ping_counts
  ON deduped_subscriptions_w_versions.ping_created_date_month = ping_counts.ping_created_date_month
    AND deduped_subscriptions_w_versions.latest_subscription_id = ping_counts.latest_subscription_id
    AND deduped_subscriptions_w_versions.dim_installation_id = ping_counts.dim_installation_id
/*
Aggregate mart_charge information (used as the basis of truth), this gets rid of host deviation
*/

), mart_charge_cleaned AS (

  SELECT
       dim_date.date_actual               AS arr_month,
       fct_charge.dim_subscription_id     AS dim_subscription_id,
       SUM(quantity)                      AS licensed_user_count,
       IFF(SUM(arr) > 0, TRUE, FALSE)     AS is_paid_subscription
     FROM fct_charge
     INNER JOIN dim_date
        ON effective_start_month <= dim_date.date_actual
        AND (effective_end_month >= dim_date.date_actual OR effective_end_month IS NULL)
        AND dim_date.day_of_month = 1
     INNER JOIN dim_charge
       ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
     INNER JOIN dim_subscription
       ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
     INNER JOIN dim_product_detail
       ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
      WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
        AND subscription_status IN ('Active','Cancelled')
        AND dim_product_detail.product_tier_name != 'Storage'
        AND DATE_TRUNC('MONTH', CURRENT_DATE) > arr_month
      group by 1,2

/*
Join mart_charge information bringing in mart_charge subscriptions which DO NOT appear in ping fact data
*/

), arr_counts_joined AS (

  SELECT
    mart_charge_cleaned.arr_month                                                                           AS ping_created_date_month,
    joined_subscriptions.dim_installation_id                                                                AS dim_installation_id,
    mart_charge_cleaned.dim_subscription_id                                                                 AS latest_subscription_id,
    joined_subscriptions.ping_edition                                                                       AS ping_edition,
    joined_subscriptions.version_is_prerelease                                                              AS version_is_prerelease,
    joined_subscriptions.major_minor_version_id                                                             AS major_minor_version_id,
    joined_subscriptions.instance_user_count                                                                AS instance_user_count,
    mart_charge_cleaned.licensed_user_count                                                                 AS licensed_user_count,
    mart_charge_cleaned.is_paid_subscription                                                                AS is_paid_subscription,
    joined_subscriptions.ping_count                                                                         AS ping_count,
    FALSE                                                                                                   AS is_missing_charge_subscription
  FROM mart_charge_cleaned
    LEFT OUTER JOIN joined_subscriptions
  ON joined_subscriptions.latest_subscription_id = mart_charge_cleaned.dim_subscription_id
      AND joined_subscriptions.ping_created_date_month = mart_charge_cleaned.arr_month

/*
Grab the latest values to join to missing subs
*/

), latest_mart_charge_values AS (

    SELECT
        dim_subscription_id,
        is_paid_subscription,
        licensed_user_count
    FROM mart_charge_cleaned
        QUALIFY ROW_NUMBER() OVER (
              PARTITION BY dim_subscription_id
              ORDER BY arr_month DESC) = 1

/*
This CTE below grabs the missing installation/subs for each month missing from arr_counts_joined (latest_subs) where there are actual pings from that install/sub combo)
*/

), missing_subs AS (

    SELECT
        ping_created_date_month                 AS ping_created_date_month,
        dim_installation_id                     AS dim_installation_id,
        latest_subscription_id                  AS latest_subscription_id,
        ping_edition                            AS ping_edition,
        version_is_prerelease                   AS version_is_prerelease,
        MAX(major_minor_version_id)             AS major_minor_version_id,
        MAX(instance_user_count)                AS instance_user_count,
        COUNT(DISTINCT(dim_ping_instance_id))   AS ping_count
    FROM mart_ping_instance_metric
        WHERE is_last_ping_of_month = TRUE
          AND CONCAT(latest_subscription_id, to_varchar(ping_created_date_month)) NOT IN
            (SELECT DISTINCT(CONCAT(latest_subscription_id, to_varchar(ping_created_date_month))) FROM arr_counts_joined)
          group by 1,2,3,4,5

/*
Join to capture missing metrics, uses the last value found for these in fct_charge
*/

), missing_subs_joined AS (

    SELECT
        missing_subs.*,
        latest_mart_charge_values.licensed_user_count         AS licensed_user_count,
        latest_mart_charge_values.is_paid_subscription        AS is_paid_subscription,
        TRUE                                                  AS is_missing_charge_subscription
    FROM missing_subs
        INNER JOIN latest_mart_charge_values
    ON missing_subs.latest_subscription_id = latest_mart_charge_values.dim_subscription_id

), latest_subs_unioned AS (

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM arr_counts_joined

        UNION ALL

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM missing_subs_joined

), final AS (

    SELECT
        md5(cast(coalesce(cast(ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(latest_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(dim_installation_id as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') || '-' || coalesce(cast(version_is_prerelease as 
    varchar
), '') as 
    varchar
))                      AS ping_latest_subscriptions_monthly_id,
        latest_subs_unioned.ping_created_date_month                                                                                                                               AS ping_created_date_month,
        latest_subs_unioned.dim_installation_id                                                                                                                                   AS dim_installation_id,
        latest_subs_unioned.latest_subscription_id                                                                                                                                AS latest_subscription_id,
        latest_subs_unioned.ping_edition                                                                                                                                          AS ping_edition,
        latest_subs_unioned.version_is_prerelease                                                                                                                                 AS version_is_prerelease,
        latest_subs_unioned.major_minor_version_id                                                                                                                                AS major_minor_version_id,
        latest_subs_unioned.instance_user_count                                                                                                                                   AS instance_user_count,
        FLOOR(latest_subs_unioned.licensed_user_count)                                                                                                                            AS licensed_user_count,
        latest_subs_unioned.is_paid_subscription                                                                                                                                  AS is_paid_subscription,
        IFNULL(latest_subs_unioned.ping_count, 0)                                                                                                                                 AS ping_count,
        IFF(latest_subs_unioned.ping_edition IS NULL, FALSE, TRUE)                                                                                                                AS has_sent_pings,
        latest_subs_unioned.is_missing_charge_subscription                                                                                                                        AS is_missing_charge_subscription
    FROM latest_subs_unioned
      WHERE ping_created_date_month < DATE_TRUNC('month', CURRENT_DATE)

)

 SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-05-05'::DATE        AS model_created_date,
      '2022-12-15'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final15:T410,The estimation methodology being used. **The "official" methodology used for xMAU/PI reporting is "metric/version check - subscription based estimation".** This value provides the context to understand `total_count`, `reporting_count`, `not_reporting_count`, and `percent_reporting`. 

estimation_grain is made up of two components: a condition and a measure (`condition - measure`). There are two conditions, `metric_version_check` (whether a subscription sent a ping from a version of GitLab with the metric instrumented) and `reported_metric` (whether a subscription reported the metric), and two measures `subscription based` (count of subscriptions) and `seat based` (count of seats).

Examples:
- `estimation_grain = 'metric/version check - subscription based estimation'`: This is a methodology based on the count of subscriptions that sent a ping from on a version with the metric instrumented
- `estimation_grain = 'reported metric - seat based estimation'`: This methodology is based on the count of seats that reported the metric16:T25a3,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('mart_ping_instance_metric_monthly', 'mart_ping_instance_metric_monthly'),
    ('rpt_ping_subscriptions_reported_counts_monthly', 'rpt_ping_subscriptions_reported_counts_monthly'),
    ('rpt_ping_subscriptions_on_versions_counts_monthly', 'rpt_ping_subscriptions_on_versions_counts_monthly'),
    ('latest_subscriptions', 'rpt_ping_latest_subscriptions_monthly'),
    ('dim_ping_metric', 'dim_ping_metric')
    ])
}},

-- Get value from latest_susbcriptions

arr_joined AS (

  SELECT
    mart_ping_instance_metric_monthly.ping_created_date_month       AS ping_created_date_month,
    mart_ping_instance_metric_monthly.metrics_path                  AS metrics_path,
    mart_ping_instance_metric_monthly.ping_edition                  AS ping_edition,
    mart_ping_instance_metric_monthly.stage_name                    AS stage_name,
    mart_ping_instance_metric_monthly.section_name                  AS section_name,
    mart_ping_instance_metric_monthly.group_name                    AS group_name,
    mart_ping_instance_metric_monthly.is_smau                       AS is_smau,
    mart_ping_instance_metric_monthly.is_gmau                       AS is_gmau,
    mart_ping_instance_metric_monthly.is_paid_gmau                  AS is_paid_gmau,
    mart_ping_instance_metric_monthly.is_umau                       AS is_umau,
    mart_ping_instance_metric_monthly.latest_subscription_id        AS latest_subscription_id,
    latest_subscriptions.licensed_user_count                        AS licensed_user_count
  FROM mart_ping_instance_metric_monthly
  INNER JOIN latest_subscriptions
    ON mart_ping_instance_metric_monthly.latest_subscription_id = latest_subscriptions.latest_subscription_id
      AND mart_ping_instance_metric_monthly.ping_created_date_month = latest_subscriptions.ping_created_date_month
  WHERE mart_ping_instance_metric_monthly.time_frame IN ('28d', 'all')
    AND mart_ping_instance_metric_monthly.ping_delivery_type = 'Self-Managed'
  {{ dbt_utils.group_by(n=12) }}

),

-- Get actual count of subs/users for a given month/metric

reported_actuals AS (

  SELECT
    ping_created_date_month                                         AS ping_created_date_month,
    metrics_path                                                    AS metrics_path,
    ping_edition                                                    AS ping_edition,
    stage_name                                                      AS stage_name,
    section_name                                                    AS section_name,
    group_name                                                      AS group_name,
    is_smau                                                         AS is_smau,
    is_gmau                                                         AS is_gmau,
    is_paid_gmau                                                    AS is_paid_gmau,
    is_umau                                                         AS is_umau,
    COUNT(DISTINCT latest_subscription_id)                          AS subscription_count,
    SUM(licensed_user_count)                                        AS seat_count
  FROM arr_joined
  {{ dbt_utils.group_by(n=10) }}

),

-- Join actuals to number of possible subs/users

joined_counts AS (

  SELECT
    reported_actuals.ping_created_date_month                                                                     AS ping_created_date_month,
    reported_actuals.metrics_path                                                                                AS metrics_path,
    rpt_ping_subscriptions_reported_counts_monthly.ping_edition                                                  AS ping_edition,
    reported_actuals.stage_name                                                                                  AS stage_name,
    reported_actuals.section_name                                                                                AS section_name,
    reported_actuals.group_name                                                                                  AS group_name,
    reported_actuals.is_smau                                                                                     AS is_smau,
    reported_actuals.is_gmau                                                                                     AS is_gmau,
    reported_actuals.is_paid_gmau                                                                                AS is_paid_gmau,
    reported_actuals.is_umau                                                                                     AS is_umau,
    rpt_ping_subscriptions_on_versions_counts_monthly.total_subscription_count                                   AS reported_subscription_count, -- on version with metric
    rpt_ping_subscriptions_on_versions_counts_monthly.total_licensed_users                                       AS reported_seat_count, -- on version with metric
    rpt_ping_subscriptions_reported_counts_monthly.total_licensed_users                                          AS total_licensed_users,  -- could have reported (total seats on latest subs)
    rpt_ping_subscriptions_reported_counts_monthly.total_subscription_count                                      AS total_subscription_count, -- could have reported (total latest subs)
    rpt_ping_subscriptions_reported_counts_monthly.total_subscription_count - reported_subscription_count        AS not_reporting_subscription_count, -- not on version with metric
    rpt_ping_subscriptions_reported_counts_monthly.total_licensed_users - reported_seat_count                    AS not_reporting_seat_count -- not on version with metric
  FROM reported_actuals
  INNER JOIN rpt_ping_subscriptions_on_versions_counts_monthly --model with subscriptions and seats on version
    ON reported_actuals.ping_created_date_month = rpt_ping_subscriptions_on_versions_counts_monthly.ping_created_date_month
      AND reported_actuals.metrics_path = rpt_ping_subscriptions_on_versions_counts_monthly.metrics_path
  INNER JOIN rpt_ping_subscriptions_reported_counts_monthly --model with overall total subscriptions and seats
    ON reported_actuals.ping_created_date_month = rpt_ping_subscriptions_reported_counts_monthly.ping_created_date_month
      AND reported_actuals.metrics_path = rpt_ping_subscriptions_reported_counts_monthly.metrics_path
      AND rpt_ping_subscriptions_on_versions_counts_monthly.ping_edition = rpt_ping_subscriptions_reported_counts_monthly.ping_edition

),

-- Split subs and seats then union

unioned_counts AS (

  SELECT
    ping_created_date_month                                         AS ping_created_date_month,
    metrics_path                                                    AS metrics_path,
    ping_edition                                                    AS ping_edition,
    stage_name                                                      AS stage_name,
    section_name                                                    AS section_name,
    group_name                                                      AS group_name,
    is_smau                                                         AS is_smau,
    is_gmau                                                         AS is_gmau,
    is_paid_gmau                                                    AS is_paid_gmau,
    is_umau                                                         AS is_umau,
    reported_subscription_count                                     AS reporting_count,
    not_reporting_subscription_count                                AS not_reporting_count,
    total_subscription_count                                        AS total_count,
    'metric/version check - subscription based estimation'          AS estimation_grain
  FROM joined_counts

  UNION ALL

  SELECT
    ping_created_date_month                                         AS ping_created_date_month,
    metrics_path                                                    AS metrics_path,
    ping_edition                                                    AS ping_edition,
    stage_name                                                      AS stage_name,
    section_name                                                    AS section_name,
    group_name                                                      AS group_name,
    is_smau                                                         AS is_smau,
    is_gmau                                                         AS is_gmau,
    is_paid_gmau                                                    AS is_paid_gmau,
    is_umau                                                         AS is_umau,
    reported_seat_count                                             AS reporting_count,
    not_reporting_seat_count                                        AS not_reporting_count,
    total_licensed_users                                            AS total_count,
    'metric/version check - seat based estimation'                  AS estimation_grain
  FROM joined_counts

),

-- Create PK and use macro for percent_reporting

final AS (

  SELECT
    {{ dbt_utils.surrogate_key(['ping_created_date_month', 'metrics_path', 'ping_edition','estimation_grain']) }} AS ping_subscriptions_on_versions_estimate_factors_monthly_id,
    *,
    {{ pct_w_counters('reporting_count', 'not_reporting_count') }}                                                AS percent_reporting
  FROM unioned_counts

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@icooper-acp",
    updated_by="@cbraza",
    created_date="2022-04-07",
    updated_date="2022-10-14"
) }}17:T9d1, **Description:** Self-Managed subscriptions and seats that sent a ping from a version of GitLab with a given metric instrumented on a given month. The totals are specific to the month, metric, edition, _and_ grain. These totals are used to generate inputs for the `metric/version check - subscription based estimation` (our "official" methodology) and `metric/version check - seat based estimation` estimation_grains for xMAU/PI reporting.

_Note: This model is not expected to be used much (if at all) for analysis. The main purpose of the model is to create inputs for the estimation lineage._

**Data Grain:**
- ping_created_date_month
- metrics_path
- ping_edition
- estimation_grain

**Filters Applied to Model:**
- `Inherited` - Include subscriptions where:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `Inherited` - Include metrics for 28 Day and All-Time time frames
- `Inherited` - Include metrics from the 'Last Ping of the Month' pings
- `Inherited` - Exclude metrics that timed out during ping generation
- `Inherited` - Exclude the current month

**Business Logic in this Model:**
- There are multiple estimation grains in this model, `metric/version check - subscription based estimation` and `metric/version check - seat based estimation`
- `estimation_grain` - tells which method is used to measure the `percent_reporting` %:
  - `metric/version check - subscription based estimation` looks at how many subscriptions sent a ping from a version of GitLab with the metric instrumented (_this is the "official" methodology used for xMAU/PI reporting_)
  - `metric/version check - seat based estimation` looks at how many seats are associated with subscriptions that sent a ping from a version of GitLab with the metric instrumented
- `percent_reporting` is defined as `reporting_count / (reporting_count + not_reporting_count)`
- `reporting_count` and `not_reporting_count` are defined by the `estimation_grain` (either count of subscriptions or count of seats)
- Subscription and seat totals are specific to the month, metric, edition, _and_ grain
- `percent_reporting`, `reporting_count`, and `not_reporting_count` are specific to the month, metric, edition, _and_ grain
- The [Self-Managed Estimation Algorithm handbook page](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/xmau-analysis/estimation-xmau-algorithm.html) contains more details about the estimation methodology 18:T27ae,



WITH mart_ping_instance_metric_monthly AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric_monthly

), rpt_ping_subscriptions_reported_counts_monthly AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_subscriptions_reported_counts_monthly

), rpt_ping_subscriptions_on_versions_counts_monthly AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_subscriptions_on_versions_counts_monthly

), latest_subscriptions AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_latest_subscriptions_monthly

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

),

-- Get value from latest_susbcriptions

arr_joined AS (

  SELECT
    mart_ping_instance_metric_monthly.ping_created_date_month       AS ping_created_date_month,
    mart_ping_instance_metric_monthly.metrics_path                  AS metrics_path,
    mart_ping_instance_metric_monthly.ping_edition                  AS ping_edition,
    mart_ping_instance_metric_monthly.stage_name                    AS stage_name,
    mart_ping_instance_metric_monthly.section_name                  AS section_name,
    mart_ping_instance_metric_monthly.group_name                    AS group_name,
    mart_ping_instance_metric_monthly.is_smau                       AS is_smau,
    mart_ping_instance_metric_monthly.is_gmau                       AS is_gmau,
    mart_ping_instance_metric_monthly.is_paid_gmau                  AS is_paid_gmau,
    mart_ping_instance_metric_monthly.is_umau                       AS is_umau,
    mart_ping_instance_metric_monthly.latest_subscription_id        AS latest_subscription_id,
    latest_subscriptions.licensed_user_count                        AS licensed_user_count
  FROM mart_ping_instance_metric_monthly
  INNER JOIN latest_subscriptions
    ON mart_ping_instance_metric_monthly.latest_subscription_id = latest_subscriptions.latest_subscription_id
      AND mart_ping_instance_metric_monthly.ping_created_date_month = latest_subscriptions.ping_created_date_month
  WHERE mart_ping_instance_metric_monthly.time_frame IN ('28d', 'all')
    AND mart_ping_instance_metric_monthly.ping_delivery_type = 'Self-Managed'
  group by 1,2,3,4,5,6,7,8,9,10,11,12

),

-- Get actual count of subs/users for a given month/metric

reported_actuals AS (

  SELECT
    ping_created_date_month                                         AS ping_created_date_month,
    metrics_path                                                    AS metrics_path,
    ping_edition                                                    AS ping_edition,
    stage_name                                                      AS stage_name,
    section_name                                                    AS section_name,
    group_name                                                      AS group_name,
    is_smau                                                         AS is_smau,
    is_gmau                                                         AS is_gmau,
    is_paid_gmau                                                    AS is_paid_gmau,
    is_umau                                                         AS is_umau,
    COUNT(DISTINCT latest_subscription_id)                          AS subscription_count,
    SUM(licensed_user_count)                                        AS seat_count
  FROM arr_joined
  group by 1,2,3,4,5,6,7,8,9,10

),

-- Join actuals to number of possible subs/users

joined_counts AS (

  SELECT
    reported_actuals.ping_created_date_month                                                                     AS ping_created_date_month,
    reported_actuals.metrics_path                                                                                AS metrics_path,
    rpt_ping_subscriptions_reported_counts_monthly.ping_edition                                                  AS ping_edition,
    reported_actuals.stage_name                                                                                  AS stage_name,
    reported_actuals.section_name                                                                                AS section_name,
    reported_actuals.group_name                                                                                  AS group_name,
    reported_actuals.is_smau                                                                                     AS is_smau,
    reported_actuals.is_gmau                                                                                     AS is_gmau,
    reported_actuals.is_paid_gmau                                                                                AS is_paid_gmau,
    reported_actuals.is_umau                                                                                     AS is_umau,
    rpt_ping_subscriptions_on_versions_counts_monthly.total_subscription_count                                   AS reported_subscription_count, -- on version with metric
    rpt_ping_subscriptions_on_versions_counts_monthly.total_licensed_users                                       AS reported_seat_count, -- on version with metric
    rpt_ping_subscriptions_reported_counts_monthly.total_licensed_users                                          AS total_licensed_users,  -- could have reported (total seats on latest subs)
    rpt_ping_subscriptions_reported_counts_monthly.total_subscription_count                                      AS total_subscription_count, -- could have reported (total latest subs)
    rpt_ping_subscriptions_reported_counts_monthly.total_subscription_count - reported_subscription_count        AS not_reporting_subscription_count, -- not on version with metric
    rpt_ping_subscriptions_reported_counts_monthly.total_licensed_users - reported_seat_count                    AS not_reporting_seat_count -- not on version with metric
  FROM reported_actuals
  INNER JOIN rpt_ping_subscriptions_on_versions_counts_monthly --model with subscriptions and seats on version
    ON reported_actuals.ping_created_date_month = rpt_ping_subscriptions_on_versions_counts_monthly.ping_created_date_month
      AND reported_actuals.metrics_path = rpt_ping_subscriptions_on_versions_counts_monthly.metrics_path
  INNER JOIN rpt_ping_subscriptions_reported_counts_monthly --model with overall total subscriptions and seats
    ON reported_actuals.ping_created_date_month = rpt_ping_subscriptions_reported_counts_monthly.ping_created_date_month
      AND reported_actuals.metrics_path = rpt_ping_subscriptions_reported_counts_monthly.metrics_path
      AND rpt_ping_subscriptions_on_versions_counts_monthly.ping_edition = rpt_ping_subscriptions_reported_counts_monthly.ping_edition

),

-- Split subs and seats then union

unioned_counts AS (

  SELECT
    ping_created_date_month                                         AS ping_created_date_month,
    metrics_path                                                    AS metrics_path,
    ping_edition                                                    AS ping_edition,
    stage_name                                                      AS stage_name,
    section_name                                                    AS section_name,
    group_name                                                      AS group_name,
    is_smau                                                         AS is_smau,
    is_gmau                                                         AS is_gmau,
    is_paid_gmau                                                    AS is_paid_gmau,
    is_umau                                                         AS is_umau,
    reported_subscription_count                                     AS reporting_count,
    not_reporting_subscription_count                                AS not_reporting_count,
    total_subscription_count                                        AS total_count,
    'metric/version check - subscription based estimation'          AS estimation_grain
  FROM joined_counts

  UNION ALL

  SELECT
    ping_created_date_month                                         AS ping_created_date_month,
    metrics_path                                                    AS metrics_path,
    ping_edition                                                    AS ping_edition,
    stage_name                                                      AS stage_name,
    section_name                                                    AS section_name,
    group_name                                                      AS group_name,
    is_smau                                                         AS is_smau,
    is_gmau                                                         AS is_gmau,
    is_paid_gmau                                                    AS is_paid_gmau,
    is_umau                                                         AS is_umau,
    reported_seat_count                                             AS reporting_count,
    not_reporting_seat_count                                        AS not_reporting_count,
    total_licensed_users                                            AS total_count,
    'metric/version check - seat based estimation'                  AS estimation_grain
  FROM joined_counts

),

-- Create PK and use macro for percent_reporting

final AS (

  SELECT
    md5(cast(coalesce(cast(ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') || '-' || coalesce(cast(estimation_grain as 
    varchar
), '') as 
    varchar
)) AS ping_subscriptions_on_versions_estimate_factors_monthly_id,
    *,
    DIV0(reporting_count,(reporting_count+not_reporting_count))                                                AS percent_reporting
  FROM unioned_counts

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@cbraza'::VARCHAR       AS updated_by,
      '2022-04-07'::DATE        AS model_created_date,
      '2022-10-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final19:T410,The estimation methodology being used. **The "official" methodology used for xMAU/PI reporting is "metric/version check - subscription based estimation".** This value provides the context to understand `total_count`, `reporting_count`, `not_reporting_count`, and `percent_reporting`. 

estimation_grain is made up of two components: a condition and a measure (`condition - measure`). There are two conditions, `metric_version_check` (whether a subscription sent a ping from a version of GitLab with the metric instrumented) and `reported_metric` (whether a subscription reported the metric), and two measures `subscription based` (count of subscriptions) and `seat based` (count of seats).

Examples:
- `estimation_grain = 'metric/version check - subscription based estimation'`: This is a methodology based on the count of subscriptions that sent a ping from on a version with the metric instrumented
- `estimation_grain = 'reported metric - seat based estimation'`: This methodology is based on the count of seats that reported the metric1a:T1f50,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('mart_ping_instance_metric_monthly', 'mart_ping_instance_metric_monthly'),
    ('sub_combo', 'rpt_ping_subscriptions_reported_counts_monthly'),
    ('latest_subscriptions', 'rpt_ping_latest_subscriptions_monthly')
    ])

}}

-- Assign key to subscription info (possible subscriptions)

, arr_joined AS (

  SELECT
    mart_ping_instance_metric_monthly.ping_created_date_month                         AS ping_created_date_month,
    mart_ping_instance_metric_monthly.metrics_path                                    AS metrics_path,
    mart_ping_instance_metric_monthly.ping_edition                                    AS ping_edition,
    mart_ping_instance_metric_monthly.stage_name                                      AS stage_name,
    mart_ping_instance_metric_monthly.section_name                                    AS section_name,
    mart_ping_instance_metric_monthly.group_name                                      AS group_name,
    mart_ping_instance_metric_monthly.is_smau                                         AS is_smau,
    mart_ping_instance_metric_monthly.is_gmau                                         AS is_gmau,
    mart_ping_instance_metric_monthly.is_paid_gmau                                    AS is_paid_gmau,
    mart_ping_instance_metric_monthly.is_umau                                         AS is_umau,
    mart_ping_instance_metric_monthly.latest_subscription_id                          AS latest_subscription_id,
    latest_subscriptions.licensed_user_count                                          AS licensed_user_count
  FROM mart_ping_instance_metric_monthly
    INNER JOIN latest_subscriptions
  ON mart_ping_instance_metric_monthly.latest_subscription_id = latest_subscriptions.latest_subscription_id
      AND mart_ping_instance_metric_monthly.ping_created_date_month = latest_subscriptions.ping_created_date_month
    WHERE time_frame IN ('28d', 'all')
      AND ping_delivery_type = 'Self-Managed'
    {{ dbt_utils.group_by(n=12)}}
-- Get actual count of subs/users for a given month/metric

), count_tbl AS (

    SELECT
        ping_created_date_month                         AS ping_created_date_month,
        metrics_path                                    AS metrics_path,
        ping_edition                                    AS ping_edition,
        stage_name                                      AS stage_name,
        section_name                                    AS section_name,
        group_name                                      AS group_name,
        is_smau                                         AS is_smau,
        is_gmau                                         AS is_gmau,
        is_paid_gmau                                    AS is_paid_gmau,
        is_umau                                         AS is_umau,
        COUNT(DISTINCT latest_subscription_id)          AS subscription_count,
        SUM(licensed_user_count)                        AS seat_count
    FROM arr_joined
    {{ dbt_utils.group_by(n=10)}}

-- Join actuals to number of possible subs/users

), joined_counts AS (

    SELECT
        count_tbl.ping_created_date_month                       AS ping_created_date_month,
        count_tbl.metrics_path                                  AS metrics_path,
        -- count_tbl.ping_edition                                  AS ping_edition,
        sub_combo.ping_edition                                  AS ping_edition, --change to pull from sub_combo, which has both CE and EE records
        count_tbl.stage_name                                    AS stage_name,
        count_tbl.section_name                                  AS section_name,
        count_tbl.group_name                                    AS group_name,
        count_tbl.is_smau                                       AS is_smau,
        count_tbl.is_gmau                                       AS is_gmau,
        count_tbl.is_paid_gmau                                  AS is_paid_gmau,
        count_tbl.is_umau                                       AS is_umau,
        count_tbl.subscription_count                            AS reported_subscription_count,
        count_tbl.seat_count                                    AS reported_seat_count,
        sub_combo.total_licensed_users                          AS total_licensed_users,
        sub_combo.total_subscription_count                      AS total_subscription_count,
        total_subscription_count - reported_subscription_count  AS not_reporting_subscription_count,
        total_licensed_users - reported_seat_count              AS not_reporting_seat_count
    FROM count_tbl
    LEFT JOIN sub_combo
      ON count_tbl.ping_created_date_month = sub_combo.ping_created_date_month
      AND count_tbl.metrics_path = sub_combo.metrics_path
      -- AND count_tbl.ping_edition = sub_combo.ping_edition --don't join on ping_edition because subscriptions will all report on EE


-- Split subs and seats then union

), unioned_counts AS (

  SELECT
    ping_created_date_month                                     AS ping_created_date_month,
    metrics_path                                                AS metrics_path,
    ping_edition                                                AS ping_edition,
    stage_name                                                  AS stage_name,
    section_name                                                AS section_name,
    group_name                                                  AS group_name,
    is_smau                                                     AS is_smau,
    is_gmau                                                     AS is_gmau,
    is_paid_gmau                                                AS is_paid_gmau,
    is_umau                                                     AS is_umau,
    reported_subscription_count                                 AS reporting_count,
    not_reporting_subscription_count                            AS not_reporting_count,
    total_subscription_count                                    AS total_count,
    'reported metric - subscription based estimation'           AS estimation_grain
  FROM joined_counts

  UNION ALL

  SELECT
    ping_created_date_month                                     AS ping_created_date_month,
    metrics_path                                                AS metrics_path,
    ping_edition                                                AS ping_edition,
    stage_name                                                  AS stage_name,
    section_name                                                AS section_name,
    group_name                                                  AS group_name,
    is_smau                                                     AS is_smau,
    is_gmau                                                     AS is_gmau,
    is_paid_gmau                                                AS is_paid_gmau,
    is_umau                                                     AS is_umau,
    reported_seat_count                                         AS reporting_count,
    not_reporting_seat_count                                    AS not_reporting_count,
    total_licensed_users                                        AS total_count,
    'reported metric - seat based estimation'                   AS estimation_grain
  FROM joined_counts

-- Create PK and use macro for percent_reporting

), final AS (

SELECT
    {{ dbt_utils.surrogate_key(['ping_created_date_month', 'metrics_path', 'ping_edition', 'estimation_grain']) }}         AS ping_subscriptions_reported_estimate_factors_monthly_id,
    *,
    {{ pct_w_counters('reporting_count', 'not_reporting_count') }}                                                         AS percent_reporting
 FROM unioned_counts

)

 {{ dbt_audit(
     cte_ref="final",
     created_by="@icooper-acp",
     updated_by="@iweeks",
     created_date="2022-04-20",
     updated_date="2022-07-29"
 ) }}1b:T895, **Description:** Self-Managed subscriptions and seats that report a given metric on a given month. The totals are specific to the month, metric, and grain, but will be the same across editions. These totals are used to generate inputs for the `reported metric - subscription based estimation` and `reported metric - seat based estimation` estimation_grains for xMAU/PI reporting.

_Note: This model is not expected to be used much (if at all) for analysis. The main purpose of the model is to create inputs for the estimation lineage._

**Data Grain:**
- ping_created_date_month
- metrics_path
- ping_edition
- estimation_grain

**Filters Applied to Model:**
- `Inherited` - Include subscriptions where:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `Inherited` - Include metrics for 28 Day and All-Time time frames
- `Inherited` - Include metrics from the 'Last Ping of the Month' pings
- `Inherited` - Exclude metrics that timed out during ping generation
- `Inherited` - Exclude the current month

**Business Logic in this Model:**
- There are multiple estimation Grains in this model, `reported metric - subscription based estimation` and `reported metric - seat based estimation`
- `estimation_grain` - tells which method is used to measure the `percent_reporting` %:
  - `reported metric - subscription based estimation` looks at how subscriptions reported the metric
  - `reported metric - seat based estimation` looks at how many seats are associated with subscriptions that reported the metric
- `percent_reporting` is defined as `reporting_count / (reporting_count + not_reporting_count)`
- `reporting_count` and `not_reporting_count` are defined by the `estimation_grain` (either count of subscriptions or count of seats)
- For a given month, metric, and grain, `percent_reporting`, `reporting_count`, and `not_reporting_count` is the same across all editions
- The [Self-Managed Estimation Algorithm handbook page](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/xmau-analysis/estimation-xmau-algorithm.html) contains more details about the estimation methodology 1c:T2102,



WITH mart_ping_instance_metric_monthly AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric_monthly

), sub_combo AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_subscriptions_reported_counts_monthly

), latest_subscriptions AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_latest_subscriptions_monthly

)

-- Assign key to subscription info (possible subscriptions)

, arr_joined AS (

  SELECT
    mart_ping_instance_metric_monthly.ping_created_date_month                         AS ping_created_date_month,
    mart_ping_instance_metric_monthly.metrics_path                                    AS metrics_path,
    mart_ping_instance_metric_monthly.ping_edition                                    AS ping_edition,
    mart_ping_instance_metric_monthly.stage_name                                      AS stage_name,
    mart_ping_instance_metric_monthly.section_name                                    AS section_name,
    mart_ping_instance_metric_monthly.group_name                                      AS group_name,
    mart_ping_instance_metric_monthly.is_smau                                         AS is_smau,
    mart_ping_instance_metric_monthly.is_gmau                                         AS is_gmau,
    mart_ping_instance_metric_monthly.is_paid_gmau                                    AS is_paid_gmau,
    mart_ping_instance_metric_monthly.is_umau                                         AS is_umau,
    mart_ping_instance_metric_monthly.latest_subscription_id                          AS latest_subscription_id,
    latest_subscriptions.licensed_user_count                                          AS licensed_user_count
  FROM mart_ping_instance_metric_monthly
    INNER JOIN latest_subscriptions
  ON mart_ping_instance_metric_monthly.latest_subscription_id = latest_subscriptions.latest_subscription_id
      AND mart_ping_instance_metric_monthly.ping_created_date_month = latest_subscriptions.ping_created_date_month
    WHERE time_frame IN ('28d', 'all')
      AND ping_delivery_type = 'Self-Managed'
    group by 1,2,3,4,5,6,7,8,9,10,11,12
-- Get actual count of subs/users for a given month/metric

), count_tbl AS (

    SELECT
        ping_created_date_month                         AS ping_created_date_month,
        metrics_path                                    AS metrics_path,
        ping_edition                                    AS ping_edition,
        stage_name                                      AS stage_name,
        section_name                                    AS section_name,
        group_name                                      AS group_name,
        is_smau                                         AS is_smau,
        is_gmau                                         AS is_gmau,
        is_paid_gmau                                    AS is_paid_gmau,
        is_umau                                         AS is_umau,
        COUNT(DISTINCT latest_subscription_id)          AS subscription_count,
        SUM(licensed_user_count)                        AS seat_count
    FROM arr_joined
    group by 1,2,3,4,5,6,7,8,9,10

-- Join actuals to number of possible subs/users

), joined_counts AS (

    SELECT
        count_tbl.ping_created_date_month                       AS ping_created_date_month,
        count_tbl.metrics_path                                  AS metrics_path,
        -- count_tbl.ping_edition                                  AS ping_edition,
        sub_combo.ping_edition                                  AS ping_edition, --change to pull from sub_combo, which has both CE and EE records
        count_tbl.stage_name                                    AS stage_name,
        count_tbl.section_name                                  AS section_name,
        count_tbl.group_name                                    AS group_name,
        count_tbl.is_smau                                       AS is_smau,
        count_tbl.is_gmau                                       AS is_gmau,
        count_tbl.is_paid_gmau                                  AS is_paid_gmau,
        count_tbl.is_umau                                       AS is_umau,
        count_tbl.subscription_count                            AS reported_subscription_count,
        count_tbl.seat_count                                    AS reported_seat_count,
        sub_combo.total_licensed_users                          AS total_licensed_users,
        sub_combo.total_subscription_count                      AS total_subscription_count,
        total_subscription_count - reported_subscription_count  AS not_reporting_subscription_count,
        total_licensed_users - reported_seat_count              AS not_reporting_seat_count
    FROM count_tbl
    LEFT JOIN sub_combo
      ON count_tbl.ping_created_date_month = sub_combo.ping_created_date_month
      AND count_tbl.metrics_path = sub_combo.metrics_path
      -- AND count_tbl.ping_edition = sub_combo.ping_edition --don't join on ping_edition because subscriptions will all report on EE


-- Split subs and seats then union

), unioned_counts AS (

  SELECT
    ping_created_date_month                                     AS ping_created_date_month,
    metrics_path                                                AS metrics_path,
    ping_edition                                                AS ping_edition,
    stage_name                                                  AS stage_name,
    section_name                                                AS section_name,
    group_name                                                  AS group_name,
    is_smau                                                     AS is_smau,
    is_gmau                                                     AS is_gmau,
    is_paid_gmau                                                AS is_paid_gmau,
    is_umau                                                     AS is_umau,
    reported_subscription_count                                 AS reporting_count,
    not_reporting_subscription_count                            AS not_reporting_count,
    total_subscription_count                                    AS total_count,
    'reported metric - subscription based estimation'           AS estimation_grain
  FROM joined_counts

  UNION ALL

  SELECT
    ping_created_date_month                                     AS ping_created_date_month,
    metrics_path                                                AS metrics_path,
    ping_edition                                                AS ping_edition,
    stage_name                                                  AS stage_name,
    section_name                                                AS section_name,
    group_name                                                  AS group_name,
    is_smau                                                     AS is_smau,
    is_gmau                                                     AS is_gmau,
    is_paid_gmau                                                AS is_paid_gmau,
    is_umau                                                     AS is_umau,
    reported_seat_count                                         AS reporting_count,
    not_reporting_seat_count                                    AS not_reporting_count,
    total_licensed_users                                        AS total_count,
    'reported metric - seat based estimation'                   AS estimation_grain
  FROM joined_counts

-- Create PK and use macro for percent_reporting

), final AS (

SELECT
    md5(cast(coalesce(cast(ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') || '-' || coalesce(cast(estimation_grain as 
    varchar
), '') as 
    varchar
))         AS ping_subscriptions_reported_estimate_factors_monthly_id,
    *,
    DIV0(reporting_count,(reporting_count+not_reporting_count))                                                         AS percent_reporting
 FROM unioned_counts

)

 SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2022-04-20'::DATE        AS model_created_date,
      '2022-07-29'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1d:T8de,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('metric_versions', 'rpt_ping_metric_first_last_versions'),
    ('latest_subscriptions', 'rpt_ping_latest_subscriptions_monthly')
    ])
}},

/*
Attach metrics_path to subscription IF the subscription is on a version with the metric instrumented
*/

latest_subscriptions_by_metric AS (

  SELECT
    latest_subscriptions.ping_created_date_month    AS ping_created_date_month,
    latest_subscriptions.latest_subscription_id     AS latest_subscription_id,
    latest_subscriptions.licensed_user_count        AS licensed_user_count,
    metric_versions.ping_edition                    AS ping_edition,
    metric_versions.metrics_path                    AS metrics_path
  FROM latest_subscriptions
  INNER JOIN metric_versions
    ON latest_subscriptions.major_minor_version_id 
      BETWEEN metric_versions.first_major_minor_version_id_with_counter AND metric_versions.last_major_minor_version_id_with_counter
      AND latest_subscriptions.version_is_prerelease = metric_versions.version_is_prerelease
  {{ dbt_utils.group_by(n=5) }}

),

/*
Aggregate CTE to determine count of arr, subscriptions and licensed users for each month/metric.
*/

agg_subscriptions AS (

  SELECT
    {{ dbt_utils.surrogate_key(['ping_created_date_month', 'metrics_path', 'ping_edition']) }}  AS ping_subscriptions_on_versions_counts_monthly_id,
    ping_created_date_month                                                                     AS ping_created_date_month,
    metrics_path                                                                                AS metrics_path,
    ping_edition                                                                                AS ping_edition,
    COUNT(DISTINCT latest_subscription_id)                                                      AS total_subscription_count,
    SUM(licensed_user_count)                                                                    AS total_licensed_users
  FROM latest_subscriptions_by_metric
  {{ dbt_utils.group_by(n=4) }}

)

{{ dbt_audit(
    cte_ref="agg_subscriptions",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-04-20",
    updated_date="2022-12-16"
) }}1e:T5ca, **Description:** Self-Managed subscriptions and seats sending a ping from a version of GitLab with the metric instrumented by month. The counts of subscriptions and seats are specific to the metric and month, but the same across editions. This model is used as an input for the `metric/version check` estimation grains in xMAU/PI reporting.

_Note: This model is not expected to be used much (if at all) for analysis. The main purpose of the model is to create inputs for the estimation lineage._

**Data Grain:**
- ping_created_date_month
- metrics_path
- ping_edition

**Filters Applied to Model:**
- `Inherited` - Subscriptions and seats are limited to:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `Inherited` - Include 28 Day and All-Time metrics  
- `Inherited` - Include Metrics from the 'Last Ping of the Month' pings
- `Inherited` - Exclude the current month

**Business Logic in this Model:**
- "Version of GitLab with the metric instrumented" is dependent on the first and last versions where a metric appears in a Self-Managed ping payload. These values come from [`rpt_ping_metric_first_last_versions`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.rpt_ping_metric_first_last_versions). The version is specific to both the `ping_edition` and `version_is_prerelease`
- For a given month and metric, the count of subscriptions and seats is the same across editions 1f:Ta28,



WITH metric_versions AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_metric_first_last_versions

), latest_subscriptions AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_latest_subscriptions_monthly

),

/*
Attach metrics_path to subscription IF the subscription is on a version with the metric instrumented
*/

latest_subscriptions_by_metric AS (

  SELECT
    latest_subscriptions.ping_created_date_month    AS ping_created_date_month,
    latest_subscriptions.latest_subscription_id     AS latest_subscription_id,
    latest_subscriptions.licensed_user_count        AS licensed_user_count,
    metric_versions.ping_edition                    AS ping_edition,
    metric_versions.metrics_path                    AS metrics_path
  FROM latest_subscriptions
  INNER JOIN metric_versions
    ON latest_subscriptions.major_minor_version_id 
      BETWEEN metric_versions.first_major_minor_version_id_with_counter AND metric_versions.last_major_minor_version_id_with_counter
      AND latest_subscriptions.version_is_prerelease = metric_versions.version_is_prerelease
  group by 1,2,3,4,5

),

/*
Aggregate CTE to determine count of arr, subscriptions and licensed users for each month/metric.
*/

agg_subscriptions AS (

  SELECT
    md5(cast(coalesce(cast(ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') as 
    varchar
))  AS ping_subscriptions_on_versions_counts_monthly_id,
    ping_created_date_month                                                                     AS ping_created_date_month,
    metrics_path                                                                                AS metrics_path,
    ping_edition                                                                                AS ping_edition,
    COUNT(DISTINCT latest_subscription_id)                                                      AS total_subscription_count,
    SUM(licensed_user_count)                                                                    AS total_licensed_users
  FROM latest_subscriptions_by_metric
  group by 1,2,3,4

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-04-20'::DATE        AS model_created_date,
      '2022-12-16'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM agg_subscriptions20:Tbc5,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
  ('latest_subscriptions', 'rpt_ping_latest_subscriptions_monthly'),
  ('mart_ping_instance_metric', 'mart_ping_instance_metric')
    ])

}}

-- Determine monthly sub and user count

, dedupe_latest_subscriptions AS (

  SELECT
    ping_created_date_month                                           AS ping_created_date_month,
    --ping_edition                                                      AS ping_edition,
    latest_subscription_id                                            AS latest_subscription_id,
    licensed_user_count                                               AS licensed_user_count
  FROM latest_subscriptions
    {{ dbt_utils.group_by(n=3)}}

), subscription_info AS (

  SELECT
    ping_created_date_month                                           AS ping_created_date_month,
    --ping_edition                                                      AS ping_edition,
    1                                                                 AS key,
    COUNT(DISTINCT latest_subscription_id)                            AS total_subscription_count,
    SUM(licensed_user_count)                                          AS total_licensed_users
  FROM dedupe_latest_subscriptions
      {{ dbt_utils.group_by(n=2)}}

), metrics AS (

    SELECT --grab all metrics and editions reported on a given month
      ping_created_date_month,
      metrics_path,
      ping_edition,
      1 AS key
    FROM mart_ping_instance_metric
    GROUP BY 1, 2, 3, 4


-- Join to get combo of all possible subscriptions and the metrics

), sub_combo AS (

    SELECT
      {{ dbt_utils.surrogate_key(['subscription_info.ping_created_date_month', 'metrics.metrics_path', 'metrics.ping_edition']) }}        AS ping_subscriptions_reported_counts_monthly_id,
      subscription_info.ping_created_date_month                                                                                           AS ping_created_date_month,
      metrics.metrics_path                                                                                                                AS metrics_path,
      metrics.ping_edition                                                                                                                AS ping_edition,
      subscription_info.total_subscription_count                                                                                          AS total_subscription_count,
      subscription_info.total_licensed_users                                                                                              AS total_licensed_users
    FROM subscription_info
        INNER JOIN metrics
    ON subscription_info.key = metrics.key
      AND subscription_info.ping_created_date_month = metrics.ping_created_date_month

)

 {{ dbt_audit(
     cte_ref="sub_combo",
     created_by="@icooper-acp",
     updated_by="@jpeguero",
     created_date="2022-04-07",
     updated_date="2022-12-16"
 ) }}21:T406, **Description:** Total Self-Managed subscriptions and seats by month. This model determines the total possible number of subscriptions on a given month and is the same across all records for a given month (there is no difference across metrics or editions). For xMAU/PI reporting, this model is used to determine the total number of active Self-Managed subscriptions and seats on a given month.

_Note: This model is not expected to be used much (if at all) for analysis. The main purpose of the model is to create inputs for the estimation lineage._

**Data Grain:**
- ping_created_date_month
- metrics_path
- ping_edition

**Filters Applied to Model:**
- `Inherited` - Include subscriptions where:
  - `product_delivery_type = 'Self-Managed'` 
  - `subscription_status IN ('Active','Cancelled')`
  - `product_tier_name <> 'Storage'`
- `Inherited` - Exclude the current month

**Business Logic in this Model:**
- For a given month, the count of subscriptions and seats is the same across every metric and edition (every record) 22:Tcfe,



WITH latest_subscriptions AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_latest_subscriptions_monthly

), mart_ping_instance_metric AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric

)

-- Determine monthly sub and user count

, dedupe_latest_subscriptions AS (

  SELECT
    ping_created_date_month                                           AS ping_created_date_month,
    --ping_edition                                                      AS ping_edition,
    latest_subscription_id                                            AS latest_subscription_id,
    licensed_user_count                                               AS licensed_user_count
  FROM latest_subscriptions
    group by 1,2,3

), subscription_info AS (

  SELECT
    ping_created_date_month                                           AS ping_created_date_month,
    --ping_edition                                                      AS ping_edition,
    1                                                                 AS key,
    COUNT(DISTINCT latest_subscription_id)                            AS total_subscription_count,
    SUM(licensed_user_count)                                          AS total_licensed_users
  FROM dedupe_latest_subscriptions
      group by 1,2

), metrics AS (

    SELECT --grab all metrics and editions reported on a given month
      ping_created_date_month,
      metrics_path,
      ping_edition,
      1 AS key
    FROM mart_ping_instance_metric
    GROUP BY 1, 2, 3, 4


-- Join to get combo of all possible subscriptions and the metrics

), sub_combo AS (

    SELECT
      md5(cast(coalesce(cast(subscription_info.ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(metrics.metrics_path as 
    varchar
), '') || '-' || coalesce(cast(metrics.ping_edition as 
    varchar
), '') as 
    varchar
))        AS ping_subscriptions_reported_counts_monthly_id,
      subscription_info.ping_created_date_month                                                                                           AS ping_created_date_month,
      metrics.metrics_path                                                                                                                AS metrics_path,
      metrics.ping_edition                                                                                                                AS ping_edition,
      subscription_info.total_subscription_count                                                                                          AS total_subscription_count,
      subscription_info.total_licensed_users                                                                                              AS total_licensed_users
    FROM subscription_info
        INNER JOIN metrics
    ON subscription_info.key = metrics.key
      AND subscription_info.ping_created_date_month = metrics.ping_created_date_month

)

 SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-04-07'::DATE        AS model_created_date,
      '2022-12-16'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sub_combo23:T39f2,{{config({
    "materialized": "table",
    "transient": false
  })
}}

{{ simple_cte([
    ('dim_amendment','dim_amendment'),
    ('dim_billing_account','dim_billing_account'),
    ('dim_charge','dim_charge'),
    ('dim_crm_account','dim_crm_account'),
    ('dim_product_detail','dim_product_detail'),
    ('dim_subscription','dim_subscription'),
    ('dim_crm_user','dim_crm_user'),
    ('dim_order', 'dim_order'),
    ('dim_order_action', 'dim_order_action'),
    ('fct_charge','fct_charge'),
    ('prep_billing_account_user', 'prep_billing_account_user')
]) }}

, mart_charge AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id                                                        AS dim_charge_id,

      --Natural Key
      dim_charge.subscription_name                                                    AS subscription_name,
      dim_charge.subscription_version                                                 AS subscription_version,
      dim_charge.rate_plan_charge_number                                              AS rate_plan_charge_number,
      dim_charge.rate_plan_charge_version                                             AS rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment                                             AS rate_plan_charge_segment,

      --Charge Information
      dim_charge.rate_plan_name                                                       AS rate_plan_name,
      dim_charge.rate_plan_charge_name                                                AS rate_plan_charge_name,
      dim_charge.rate_plan_charge_description                                         AS rate_plan_charge_description,
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.created_by_id                                                  AS subscription_created_by_id,
      dim_subscription.updated_by_id                                                  AS subscription_updated_by_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.term_start_date,
      dim_subscription.term_end_date,
      dim_subscription.term_start_month,
      dim_subscription.term_end_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_user.dim_crm_user_id                                                    AS dim_crm_user_id,
      dim_crm_user.crm_user_sales_segment                                             AS crm_user_sales_segment,
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      -- order info
      fct_charge.dim_order_id                                                         AS dim_order_id,
      CASE
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_name = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_type = 'Composite')
            THEN 'Auto-Renewal'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (prep_billing_account_user.user_name = 'svc_ZuoraSFDC_integration@gitlab.com'
          OR dim_subscription.subscription_sales_type = 'Sales-Assisted')
            THEN 'Sales-Assisted'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description NOT IN 
            ('AutoRenew by CustomersDot', 'Automated seat reconciliation')
            OR dim_order.order_description IS NULL)
          AND prep_billing_account_user.user_name IN (
            'svc_zuora_fulfillment_int@gitlab.com',
            'ruben_APIproduction@gitlab.com')
            THEN 'Customer Portal'
        ELSE NULL
      END                                                                             AS subscription_renewal_type,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      --Amendment Information
      dim_subscription.dim_amendment_id_subscription,
      fct_charge.dim_amendment_id_charge,
      dim_amendment_subscription.effective_date                                       AS subscription_amendment_effective_date,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.delta_tcv,
      fct_charge.estimated_total_future_billings

    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    LEFT JOIN dim_order
      ON fct_charge.dim_order_id = dim_order.dim_order_id
    LEFT JOIN dim_order_action
      ON fct_charge.dim_order_id = dim_order_action.dim_order_id
      AND dim_order_action.order_action_type IN ('RenewSubscription', 'CancelSubscription')
    LEFT JOIN prep_billing_account_user
      ON fct_charge.subscription_created_by_user_id = prep_billing_account_user.zuora_user_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    ORDER BY dim_crm_account.dim_parent_crm_account_id, dim_crm_account.dim_crm_account_id, fct_charge.subscription_name,
      fct_charge.subscription_version, fct_charge.rate_plan_charge_number, fct_charge.rate_plan_charge_version,
      fct_charge.rate_plan_charge_segment

)

{{ dbt_audit(
    cte_ref="mart_charge",
    created_by="@iweeks",
    updated_by="@chrissharp",
    created_date="2021-06-07",
    updated_date="2023-06-13"
) }}24:T3c5c,



WITH dim_amendment AS (

    SELECT * 
    FROM "PROD".common.dim_amendment

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_charge

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_crm_user AS (

    SELECT * 
    FROM "PROD".common.dim_crm_user

), dim_order AS (

    SELECT * 
    FROM "PROD".common.dim_order

), dim_order_action AS (

    SELECT * 
    FROM "PROD".common.dim_order_action

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

)

, mart_charge AS (

    SELECT
      --Surrogate Key
      dim_charge.dim_charge_id                                                        AS dim_charge_id,

      --Natural Key
      dim_charge.subscription_name                                                    AS subscription_name,
      dim_charge.subscription_version                                                 AS subscription_version,
      dim_charge.rate_plan_charge_number                                              AS rate_plan_charge_number,
      dim_charge.rate_plan_charge_version                                             AS rate_plan_charge_version,
      dim_charge.rate_plan_charge_segment                                             AS rate_plan_charge_segment,

      --Charge Information
      dim_charge.rate_plan_name                                                       AS rate_plan_name,
      dim_charge.rate_plan_charge_name                                                AS rate_plan_charge_name,
      dim_charge.rate_plan_charge_description                                         AS rate_plan_charge_description,
      dim_charge.charge_type                                                          AS charge_type,
      dim_charge.is_paid_in_full                                                      AS is_paid_in_full,
      dim_charge.is_last_segment                                                      AS is_last_segment,
      dim_charge.is_included_in_arr_calc                                              AS is_included_in_arr_calc,
      dim_charge.effective_start_date                                                 AS effective_start_date,
      dim_charge.effective_end_date                                                   AS effective_end_date,
      dim_charge.effective_start_month                                                AS effective_start_month,
      dim_charge.effective_end_month                                                  AS effective_end_month,
      dim_charge.charge_created_date                                                  AS charge_created_date,
      dim_charge.charge_updated_date                                                  AS charge_updated_date,

      --Subscription Information
      dim_subscription.dim_subscription_id                                            AS dim_subscription_id,
      dim_subscription.created_by_id                                                  AS subscription_created_by_id,
      dim_subscription.updated_by_id                                                  AS subscription_updated_by_id,
      dim_subscription.subscription_start_date                                        AS subscription_start_date,
      dim_subscription.subscription_end_date                                          AS subscription_end_date,
      dim_subscription.subscription_start_month                                       AS subscription_start_month,
      dim_subscription.subscription_end_month                                         AS subscription_end_month,
      dim_subscription.subscription_end_fiscal_year                                   AS subscription_end_fiscal_year,
      dim_subscription.subscription_created_date                                      AS subscription_created_date,
      dim_subscription.subscription_updated_date                                      AS subscription_updated_date,
      dim_subscription.second_active_renewal_month                                    AS second_active_renewal_month,
      dim_subscription.term_start_date,
      dim_subscription.term_end_date,
      dim_subscription.term_start_month,
      dim_subscription.term_end_month,
      dim_subscription.subscription_status                                            AS subscription_status,
      dim_subscription.subscription_sales_type                                        AS subscription_sales_type,
      dim_subscription.subscription_name_slugify                                      AS subscription_name_slugify,
      dim_subscription.oldest_subscription_in_cohort                                  AS oldest_subscription_in_cohort,
      dim_subscription.subscription_lineage                                           AS subscription_lineage,
      dim_subscription.auto_renew_native_hist,
      dim_subscription.auto_renew_customerdot_hist,
      dim_subscription.turn_on_cloud_licensing,
      dim_subscription.turn_on_operational_metrics,
      dim_subscription.contract_operational_metrics,
      dim_subscription.contract_auto_renewal,
      dim_subscription.turn_on_auto_renewal,
      dim_subscription.contract_seat_reconciliation,
      dim_subscription.turn_on_seat_reconciliation,
      dim_subscription.invoice_owner_account,
      dim_subscription.creator_account,
      dim_subscription.was_purchased_through_reseller,

      --billing account info
      dim_billing_account.dim_billing_account_id                                      AS dim_billing_account_id,
      dim_billing_account.sold_to_country                                             AS sold_to_country,
      dim_billing_account.billing_account_name                                        AS billing_account_name,
      dim_billing_account.billing_account_number                                      AS billing_account_number,
      dim_billing_account.ssp_channel                                                 AS ssp_channel,
      dim_billing_account.po_required                                                 AS po_required,
      dim_billing_account.auto_pay                                                    AS auto_pay,
      dim_billing_account.default_payment_method_type                                 AS default_payment_method_type,

      -- crm account info
      dim_crm_user.dim_crm_user_id                                                    AS dim_crm_user_id,
      dim_crm_user.crm_user_sales_segment                                             AS crm_user_sales_segment,
      dim_crm_account.dim_crm_account_id                                              AS dim_crm_account_id,
      dim_crm_account.crm_account_name                                                AS crm_account_name,
      dim_crm_account.dim_parent_crm_account_id                                       AS dim_parent_crm_account_id,
      dim_crm_account.parent_crm_account_name                                         AS parent_crm_account_name,
      dim_crm_account.parent_crm_account_upa_country                                  AS parent_crm_account_upa_country,
      dim_crm_account.parent_crm_account_sales_segment                                AS parent_crm_account_sales_segment,
      dim_crm_account.parent_crm_account_industry                                     AS parent_crm_account_industry,
      dim_crm_account.parent_crm_account_territory                                    AS parent_crm_account_territory,
      dim_crm_account.parent_crm_account_region                                       AS parent_crm_account_region,
      dim_crm_account.parent_crm_account_area                                         AS parent_crm_account_area,
      dim_crm_account.health_score_color                                              AS health_score_color,
      dim_crm_account.health_number                                                   AS health_number,
      dim_crm_account.is_jihu_account                                                 AS is_jihu_account,

      -- order info
      fct_charge.dim_order_id                                                         AS dim_order_id,
      CASE
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_name = 'AutoRenew by CustomersDot'
          OR dim_amendment_subscription.amendment_type = 'Composite')
            THEN 'Auto-Renewal'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (prep_billing_account_user.user_name = 'svc_ZuoraSFDC_integration@gitlab.com'
          OR dim_subscription.subscription_sales_type = 'Sales-Assisted')
            THEN 'Sales-Assisted'
        WHEN (dim_order_action.dim_order_action_id IS NOT NULL
        OR dim_amendment_subscription.amendment_type = 'Renewal')
          AND (dim_order.order_description NOT IN 
            ('AutoRenew by CustomersDot', 'Automated seat reconciliation')
            OR dim_order.order_description IS NULL)
          AND prep_billing_account_user.user_name IN (
            'svc_zuora_fulfillment_int@gitlab.com',
            'ruben_APIproduction@gitlab.com')
            THEN 'Customer Portal'
        ELSE NULL
      END                                                                             AS subscription_renewal_type,

      --Cohort Information
      dim_subscription.subscription_cohort_month                                      AS subscription_cohort_month,
      dim_subscription.subscription_cohort_quarter                                    AS subscription_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_billing_account.dim_billing_account_id)                    AS billing_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_crm_account_id)                            AS crm_account_cohort_quarter,
      MIN(dim_subscription.subscription_cohort_month) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_month,
      MIN(dim_subscription.subscription_cohort_quarter) OVER (
          PARTITION BY dim_crm_account.dim_parent_crm_account_id)                     AS parent_account_cohort_quarter,

      --product info
      dim_product_detail.dim_product_detail_id,
      dim_product_detail.product_tier_name                                            AS product_tier_name,
      dim_product_detail.product_delivery_type                                        AS product_delivery_type,
      dim_product_detail.product_ranking                                              AS product_ranking,
      dim_product_detail.service_type                                                 AS service_type,
      dim_product_detail.product_rate_plan_name                                       AS product_rate_plan_name,
      dim_product_detail.is_licensed_user                                             AS is_licensed_user,
      dim_product_detail.is_arpu                                                      AS is_arpu,

      --Amendment Information
      dim_subscription.dim_amendment_id_subscription,
      fct_charge.dim_amendment_id_charge,
      dim_amendment_subscription.effective_date                                       AS subscription_amendment_effective_date,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_subscription.amendment_type
      END                                                                             AS subscription_amendment_type,
      dim_amendment_subscription.amendment_name                                       AS subscription_amendment_name,
      CASE
        WHEN dim_charge.subscription_version = 1
          THEN 'NewSubscription'
          ELSE dim_amendment_charge.amendment_type
      END                                                                             AS charge_amendment_type,

      --ARR Analysis Framework
      dim_charge.type_of_arr_change,

      --Additive Fields
      fct_charge.mrr,
      fct_charge.previous_mrr,
      fct_charge.delta_mrr,
      fct_charge.arr,
      fct_charge.previous_arr,
      fct_charge.delta_arr,
      fct_charge.quantity,
      fct_charge.previous_quantity,
      fct_charge.delta_quantity,
      fct_charge.delta_tcv,
      fct_charge.estimated_total_future_billings

    FROM fct_charge
    INNER JOIN dim_charge
      ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
    INNER JOIN dim_subscription
      ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
    INNER JOIN dim_product_detail
      ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
    INNER JOIN dim_billing_account
      ON fct_charge.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_account
      ON dim_crm_account.dim_crm_account_id = dim_billing_account.dim_crm_account_id
    LEFT JOIN dim_crm_user
      ON dim_crm_account.dim_crm_user_id = dim_crm_user.dim_crm_user_id
    LEFT JOIN dim_amendment AS dim_amendment_subscription
      ON dim_subscription.dim_amendment_id_subscription = dim_amendment_subscription.dim_amendment_id
    LEFT JOIN dim_amendment AS dim_amendment_charge
      ON fct_charge.dim_amendment_id_charge = dim_amendment_charge.dim_amendment_id
    LEFT JOIN dim_order
      ON fct_charge.dim_order_id = dim_order.dim_order_id
    LEFT JOIN dim_order_action
      ON fct_charge.dim_order_id = dim_order_action.dim_order_id
      AND dim_order_action.order_action_type IN ('RenewSubscription', 'CancelSubscription')
    LEFT JOIN prep_billing_account_user
      ON fct_charge.subscription_created_by_user_id = prep_billing_account_user.zuora_user_id
    WHERE dim_crm_account.is_jihu_account != 'TRUE'
    ORDER BY dim_crm_account.dim_parent_crm_account_id, dim_crm_account.dim_crm_account_id, fct_charge.subscription_name,
      fct_charge.subscription_version, fct_charge.rate_plan_charge_number, fct_charge.rate_plan_charge_version,
      fct_charge.rate_plan_charge_segment

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-06-07'::DATE        AS model_created_date,
      '2023-06-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM mart_charge25:T57f,WITH prep_charge AS (

    SELECT *
    FROM {{ ref('prep_charge') }}

), final AS (

    SELECT
      --Surrogate Key
      prep_charge.dim_charge_id,

      --Natural Key
      prep_charge.subscription_name,
      prep_charge.subscription_version,
      prep_charge.rate_plan_charge_number,
      prep_charge.rate_plan_charge_version,
      prep_charge.rate_plan_charge_segment,

      --Dates
      prep_charge.effective_start_date,
      prep_charge.effective_end_date,
      prep_charge.effective_start_month,
      prep_charge.effective_end_month,
      prep_charge.charged_through_date,
      prep_charge.charge_created_date,
      prep_charge.charge_updated_date,
      prep_charge.charge_term,

      --ARR Analysis Framework
      prep_charge.type_of_arr_change,

      --Information
      prep_charge.rate_plan_name,
      prep_charge.rate_plan_charge_name,
      prep_charge.rate_plan_charge_description,
      prep_charge.is_last_segment,
      prep_charge.discount_level,
      prep_charge.charge_type,
      prep_charge.rate_plan_charge_amendement_type,
      prep_charge.unit_of_measure,
      prep_charge.is_paid_in_full,
      prep_charge.is_included_in_arr_calc,
      prep_charge.months_of_future_billings

    FROM prep_charge

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@iweeks",
    updated_by="@nmcavinue",
    created_date="2021-05-10",
    updated_date="2023-05-30"
) }}26:T686,WITH prep_charge AS (

    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_charge

), final AS (

    SELECT
      --Surrogate Key
      prep_charge.dim_charge_id,

      --Natural Key
      prep_charge.subscription_name,
      prep_charge.subscription_version,
      prep_charge.rate_plan_charge_number,
      prep_charge.rate_plan_charge_version,
      prep_charge.rate_plan_charge_segment,

      --Dates
      prep_charge.effective_start_date,
      prep_charge.effective_end_date,
      prep_charge.effective_start_month,
      prep_charge.effective_end_month,
      prep_charge.charged_through_date,
      prep_charge.charge_created_date,
      prep_charge.charge_updated_date,
      prep_charge.charge_term,

      --ARR Analysis Framework
      prep_charge.type_of_arr_change,

      --Information
      prep_charge.rate_plan_name,
      prep_charge.rate_plan_charge_name,
      prep_charge.rate_plan_charge_description,
      prep_charge.is_last_segment,
      prep_charge.discount_level,
      prep_charge.charge_type,
      prep_charge.rate_plan_charge_amendement_type,
      prep_charge.unit_of_measure,
      prep_charge.is_paid_in_full,
      prep_charge.is_included_in_arr_calc,
      prep_charge.months_of_future_billings

    FROM prep_charge

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@nmcavinue'::VARCHAR       AS updated_by,
      '2021-05-10'::DATE        AS model_created_date,
      '2023-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final27:T111c,{{ config({
    "tags": ["mnpi_exception"],
    "alias": "dim_subscription"
}) }}

WITH prep_amendment AS (

  SELECT *
  FROM {{ ref('prep_amendment') }}

), subscription AS (

    SELECT *
    FROM {{ ref('prep_subscription') }}

), subscription_opportunity_mapping AS (

    SELECT *
    FROM {{ ref('map_subscription_opportunity') }}

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM {{ ref('map_subscription_lineage') }}

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@michellecooper",
    created_date="2020-12-16",
    updated_date="2023-04-12"
) }}28:T11db,

WITH prep_amendment AS (

  SELECT *
  FROM "PROD".common_prep.prep_amendment

), subscription AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription

), subscription_opportunity_mapping AS (

    SELECT *
    FROM "PROD".common_mapping.map_subscription_opportunity

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM "PROD".common_mapping.map_subscription_lineage

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    

  COALESCE(prep_amendment.dim_amendment_id, MD5(-1)) 

                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-12-16'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final29:T1694,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}


{{ simple_cte([
    ('dim_gitlab_releases', 'dim_gitlab_releases'),
    ('dim_ping_metric', 'dim_ping_metric'),
    ('fct_ping_instance_metric', 'fct_ping_instance_metric'),
    ('dim_ping_instance', 'dim_ping_instance')
    ])
}}

,
final AS (


    SELECT
      fct_ping_instance_metric.metrics_path,
      dim_ping_instance.ping_edition,
      dim_ping_instance.version_is_prerelease,
      dim_ping_instance.major_minor_version_id ,
      dim_ping_instance.major_minor_version,
      dim_ping_instance.major_version,
      dim_ping_instance.minor_version,
      dim_ping_metric.time_frame,
      fct_ping_instance_metric.dim_installation_id
    FROM fct_ping_instance_metric
    INNER JOIN dim_ping_metric
      ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
    INNER JOIN dim_ping_instance
      ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
    INNER JOIN dim_gitlab_releases --limit to valid versions
        ON dim_ping_instance.major_minor_version = dim_gitlab_releases.major_minor_version

    WHERE 
      -- Removing SaaS
      fct_ping_instance_metric.dim_instance_id != 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f'

)
-- find min and max version for each metric

, transformed AS (

    SELECT DISTINCT
      {{ dbt_utils.surrogate_key(['metrics_path', 'ping_edition', 'version_is_prerelease']) }} AS ping_metric_first_last_versions_id,
      metrics_path                                                                                                                               AS metrics_path,
      ping_edition                                                                                                                               AS ping_edition,
      version_is_prerelease                                                                                                                      AS version_is_prerelease,
      -- Grab first major/minor edition where metric/edition was present
      FIRST_VALUE(final.major_minor_version_id) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_major_minor_version_id_with_counter,
      -- Grab first major/minor edition where metric/edition was present
      FIRST_VALUE(final.major_minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_major_minor_version_with_counter,
      -- Grab first major edition where metric/edition was present
      FIRST_VALUE(final.major_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_major_version_with_counter,
      -- Grab first minor edition where metric/edition was present
      FIRST_VALUE(final.minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_minor_version_with_counter,
      -- Grab last major/minor edition where metric/edition was present
      LAST_VALUE(final.major_minor_version_id) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_major_minor_version_id_with_counter,
      -- Grab last major/minor edition where metric/edition was present
      LAST_VALUE(final.major_minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_major_minor_version_with_counter,
      -- Grab last major edition where metric/edition was present
      LAST_VALUE(final.major_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_major_version_with_counter,
      -- Grab last minor edition where metric/edition was present
      LAST_VALUE(final.minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_minor_version_with_counter,
      -- Get count of installations per each metric/edition
      COUNT(DISTINCT dim_installation_id) OVER (PARTITION BY metrics_path, ping_edition, version_is_prerelease)                                  AS dim_installation_count
    FROM final


)

{{ dbt_audit(
    cte_ref="transformed",
    created_by="@icooper-acp",
    updated_by="@mpetersen",
    created_date="2022-04-07",
    updated_date="2023-02-02"
) }}2a:Tc5e, **Description:** First and last versions of GitLab that a Service Ping metric appeared on a Self-Managed installation by Edition and Prerelease. For xMAU/PI reporting, this model is used to determine the version in which a metric was introduced.
- This table provides First and Last Application Versions along with Installation Counts by Metric, Ping Edition and Prerelease.

**Data Grain:**
- metrics_path
- ping_edition
- version_is_prerelease

**Filters Applied to Model:**
- Exclude GitLab.com (SaaS) Service Pings
- Include metrics appearing on valid versions (those found in `dim_gitlab_releases`)
- `Inherited` - Include 28 Day and All-Time metrics  
- `Inherited` - Include metrics from the 'Last Ping of the Month' pings 

**Business Logic in this Model:** 
- `First Versions` - The earliest (minimum) version found for each metrics_path, ping_edition, and version_is_prerelease
- `Last Versions` - The latest (maximum/most recent) version found for each metrics_path, ping_edition, and version_is_prerelease
- `major_minor_version_id` = major_version * 100 + minor_version
- `version_is_prerelease` = version LIKE '%-pre'

**Tips for Use:**
- In the _vast_ majority of use cases, pre-release versions (`version_is_prerelease = TRUE`) can add more confusion than benefit. It is highly recommended to exclude those records during analysis.
- This model can easily be joined to [`dim_ping_metric`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.dim_ping_metric) in order to get additional attributes about the metric (`time_frame`, `group_name`, `is_smau`, etc)
- This model can easily be joined to [`dim_gitlab_releases`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.dim_gitlab_releases) to get the release date for a version

Example query

```
SELECT
  stage_name,
  rpt_ping_metric_first_last_versions.metrics_path,
  ping_edition,
  first_major_minor_version_with_counter,
  release_date AS first_major_minor_version_release_date
FROM common_mart_product.rpt_ping_metric_first_last_versions
JOIN common.dim_ping_metric
  ON rpt_ping_metric_first_last_versions.metrics_path = dim_ping_metric.metrics_path
JOIN common.dim_gitlab_releases
  ON rpt_ping_metric_first_last_versions.first_major_minor_version_with_counter = dim_gitlab_releases.major_minor_version
WHERE version_is_prerelease = FALSE
  AND is_smau = TRUE
ORDER BY 1,2,3
;
```

**Other Comments:**
- Metrics can be introduced on different versions for CE and EE.
- The `milestone` field of the [metrics dictionary](https://metrics.gitlab.com/) can also be used to identify the version when a metric was instrumented, but there are a couple of limitations. First, many metrics are just labeled `< 13.9`, so there is a lack of more detail for older metrics. Second, since metrics can be introduced on different versions for CE and EE, `milestone` could be incorrect for one edition/distribution.
- First/last version is dependent on the metric appearing in a Service Ping payload. There are cases where this value is incorrect due to installations somehow sending the metrics from previous versions, but there is no other complete SSOT for when a metric was introduced. 2b:T1822,




WITH dim_gitlab_releases AS (

    SELECT * 
    FROM "PROD".common.dim_gitlab_releases

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

), fct_ping_instance_metric AS (

    SELECT * 
    FROM "PROD".common.fct_ping_instance_metric

), dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

)

,
final AS (


    SELECT
      fct_ping_instance_metric.metrics_path,
      dim_ping_instance.ping_edition,
      dim_ping_instance.version_is_prerelease,
      dim_ping_instance.major_minor_version_id ,
      dim_ping_instance.major_minor_version,
      dim_ping_instance.major_version,
      dim_ping_instance.minor_version,
      dim_ping_metric.time_frame,
      fct_ping_instance_metric.dim_installation_id
    FROM fct_ping_instance_metric
    INNER JOIN dim_ping_metric
      ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
    INNER JOIN dim_ping_instance
      ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
    INNER JOIN dim_gitlab_releases --limit to valid versions
        ON dim_ping_instance.major_minor_version = dim_gitlab_releases.major_minor_version

    WHERE 
      -- Removing SaaS
      fct_ping_instance_metric.dim_instance_id != 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f'

)
-- find min and max version for each metric

, transformed AS (

    SELECT DISTINCT
      md5(cast(coalesce(cast(metrics_path as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') || '-' || coalesce(cast(version_is_prerelease as 
    varchar
), '') as 
    varchar
)) AS ping_metric_first_last_versions_id,
      metrics_path                                                                                                                               AS metrics_path,
      ping_edition                                                                                                                               AS ping_edition,
      version_is_prerelease                                                                                                                      AS version_is_prerelease,
      -- Grab first major/minor edition where metric/edition was present
      FIRST_VALUE(final.major_minor_version_id) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_major_minor_version_id_with_counter,
      -- Grab first major/minor edition where metric/edition was present
      FIRST_VALUE(final.major_minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_major_minor_version_with_counter,
      -- Grab first major edition where metric/edition was present
      FIRST_VALUE(final.major_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_major_version_with_counter,
      -- Grab first minor edition where metric/edition was present
      FIRST_VALUE(final.minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS first_minor_version_with_counter,
      -- Grab last major/minor edition where metric/edition was present
      LAST_VALUE(final.major_minor_version_id) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_major_minor_version_id_with_counter,
      -- Grab last major/minor edition where metric/edition was present
      LAST_VALUE(final.major_minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_major_minor_version_with_counter,
      -- Grab last major edition where metric/edition was present
      LAST_VALUE(final.major_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_major_version_with_counter,
      -- Grab last minor edition where metric/edition was present
      LAST_VALUE(final.minor_version) OVER (
        PARTITION BY metrics_path, ping_edition, version_is_prerelease
          ORDER BY major_minor_version_id ASC
      )                                                                                                                                          AS last_minor_version_with_counter,
      -- Get count of installations per each metric/edition
      COUNT(DISTINCT dim_installation_id) OVER (PARTITION BY metrics_path, ping_edition, version_is_prerelease)                                  AS dim_installation_count
    FROM final


)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@mpetersen'::VARCHAR       AS updated_by,
      '2022-04-07'::DATE        AS model_created_date,
      '2023-02-02'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM transformed2c:T7fd,WITH prep_charge AS (

    SELECT *
    FROM {{ ref('prep_charge') }}

), prep_amendment AS (

  SELECT *
  FROM {{ ref('prep_amendment') }}

), fct_charge AS (

    SELECT
      --Surrogate Key
      prep_charge.dim_charge_id,

      --Natural Key
      prep_charge.subscription_name,
      prep_charge.subscription_version,
      prep_charge.subscription_created_by_id                                AS subscription_created_by_user_id,
      prep_charge.rate_plan_charge_number,
      prep_charge.rate_plan_charge_version,
      prep_charge.rate_plan_charge_segment,

      --Common Dimension Keys
      prep_charge.dim_product_detail_id,
      {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}              AS dim_amendment_id_charge,
      prep_charge.dim_subscription_id,
      prep_charge.dim_billing_account_id,
      prep_charge.dim_crm_account_id,
      prep_charge.dim_parent_crm_account_id,
      prep_charge.dim_order_id,
      prep_charge.effective_start_date_id,
      prep_charge.effective_end_date_id,

      --Additive Fields
      prep_charge.mrr,
      prep_charge.previous_mrr,
      prep_charge.delta_mrr,
      prep_charge.arr,
      prep_charge.previous_arr,
      prep_charge.delta_arr,
      prep_charge.quantity,
      prep_charge.previous_quantity,
      prep_charge.delta_quantity,
      prep_charge.delta_tcv,
      prep_charge.estimated_total_future_billings,

      prep_charge.unit_of_measure,
      prep_charge.charge_type,
      prep_charge.effective_start_month,
      prep_charge.effective_end_month

    FROM prep_charge
    LEFT JOIN prep_amendment
      ON prep_charge.dim_amendment_id_charge = prep_amendment.dim_amendment_id
    ORDER BY prep_charge.dim_parent_crm_account_id, prep_charge.dim_crm_account_id, subscription_name, subscription_version,
      rate_plan_charge_number, rate_plan_charge_version, rate_plan_charge_segment

)

{{ dbt_audit(
    cte_ref="fct_charge",
    created_by="@iweeks",
    updated_by="@chrissharp",
    created_date="2021-06-07",
    updated_date="2023-02-20"
) }}2d:T90b,WITH prep_charge AS (

    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_charge

), prep_amendment AS (

  SELECT *
  FROM "PROD".common_prep.prep_amendment

), fct_charge AS (

    SELECT
      --Surrogate Key
      prep_charge.dim_charge_id,

      --Natural Key
      prep_charge.subscription_name,
      prep_charge.subscription_version,
      prep_charge.subscription_created_by_id                                AS subscription_created_by_user_id,
      prep_charge.rate_plan_charge_number,
      prep_charge.rate_plan_charge_version,
      prep_charge.rate_plan_charge_segment,

      --Common Dimension Keys
      prep_charge.dim_product_detail_id,
      

  COALESCE(prep_amendment.dim_amendment_id, MD5(-1)) 

              AS dim_amendment_id_charge,
      prep_charge.dim_subscription_id,
      prep_charge.dim_billing_account_id,
      prep_charge.dim_crm_account_id,
      prep_charge.dim_parent_crm_account_id,
      prep_charge.dim_order_id,
      prep_charge.effective_start_date_id,
      prep_charge.effective_end_date_id,

      --Additive Fields
      prep_charge.mrr,
      prep_charge.previous_mrr,
      prep_charge.delta_mrr,
      prep_charge.arr,
      prep_charge.previous_arr,
      prep_charge.delta_arr,
      prep_charge.quantity,
      prep_charge.previous_quantity,
      prep_charge.delta_quantity,
      prep_charge.delta_tcv,
      prep_charge.estimated_total_future_billings,

      prep_charge.unit_of_measure,
      prep_charge.charge_type,
      prep_charge.effective_start_month,
      prep_charge.effective_end_month

    FROM prep_charge
    LEFT JOIN prep_amendment
      ON prep_charge.dim_amendment_id_charge = prep_amendment.dim_amendment_id
    ORDER BY prep_charge.dim_parent_crm_account_id, prep_charge.dim_crm_account_id, subscription_name, subscription_version,
      rate_plan_charge_number, rate_plan_charge_version, rate_plan_charge_segment

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-06-07'::DATE        AS model_created_date,
      '2023-02-20'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM fct_charge2e:T1ef1,{{ config({
    "alias": "dim_crm_account",
    "post-hook": "{{ missing_member_column(primary_key = 'dim_crm_account_id', not_null_test_cols = ['is_reseller']) }}"
}) }}

WITH final AS (

    SELECT 
      --primary key
      prep_crm_account.dim_crm_account_id,

      --surrogate keys
      prep_crm_account.dim_parent_crm_account_id,
      prep_crm_account.dim_crm_user_id,
      prep_crm_account.merged_to_account_id,
      prep_crm_account.record_type_id,
      prep_crm_account.master_record_id,
      prep_crm_account.dim_crm_person_primary_contact_id,

      --account people
      prep_crm_account.crm_account_owner,
      prep_crm_account.proposed_crm_account_owner,
      prep_crm_account.account_owner,
      prep_crm_account.technical_account_manager,
      prep_crm_account.owner_role,
      prep_crm_account.user_role_type,

      ----ultimate parent crm account info
      prep_crm_account.parent_crm_account_name,
      prep_crm_account.parent_crm_account_sales_segment,
      prep_crm_account.parent_crm_account_sales_segment_grouped,
      prep_crm_account.parent_crm_account_segment_region_stamped_grouped,
      prep_crm_account.parent_crm_account_industry,
      prep_crm_account.parent_crm_account_business_unit,
      prep_crm_account.parent_crm_account_geo,
      prep_crm_account.parent_crm_account_region,
      prep_crm_account.parent_crm_account_area,
      prep_crm_account.parent_crm_account_territory,
      prep_crm_account.parent_crm_account_role_type,
      prep_crm_account.parent_crm_account_max_family_employee,
      prep_crm_account.parent_crm_account_upa_country,
      prep_crm_account.parent_crm_account_upa_state,
      prep_crm_account.parent_crm_account_upa_city,
      prep_crm_account.parent_crm_account_upa_street,
      prep_crm_account.parent_crm_account_upa_postal_code,

      --descriptive attributes
      prep_crm_account.crm_account_name,
      prep_crm_account.crm_account_employee_count,
      prep_crm_account.crm_account_gtm_strategy,
      prep_crm_account.crm_account_focus_account,
      prep_crm_account.crm_account_owner_user_segment,
      prep_crm_account.crm_account_billing_country,
      prep_crm_account.crm_account_billing_country_code,
      prep_crm_account.crm_account_type,
      prep_crm_account.crm_account_industry,
      prep_crm_account.crm_account_sub_industry,
      prep_crm_account.crm_account_employee_count_band,
      prep_crm_account.partner_vat_tax_id,
      prep_crm_account.account_manager,
      prep_crm_account.business_development_rep,
      prep_crm_account.dedicated_service_engineer,
      prep_crm_account.account_tier,
      prep_crm_account.account_tier_notes,
      prep_crm_account.license_utilization,
      prep_crm_account.support_level,
      prep_crm_account.named_account,
      prep_crm_account.billing_postal_code,
      prep_crm_account.partner_type,
      prep_crm_account.partner_status,
      prep_crm_account.gitlab_customer_success_project,
      prep_crm_account.demandbase_account_list,
      prep_crm_account.demandbase_intent,
      prep_crm_account.demandbase_page_views,
      prep_crm_account.demandbase_score,
      prep_crm_account.demandbase_sessions,
      prep_crm_account.demandbase_trending_offsite_intent,
      prep_crm_account.demandbase_trending_onsite_engagement,
      prep_crm_account.is_locally_managed_account,
      prep_crm_account.is_strategic_account,
      prep_crm_account.partner_track,
      prep_crm_account.partners_partner_type,
      prep_crm_account.gitlab_partner_program,
      prep_crm_account.zoom_info_company_name,
      prep_crm_account.zoom_info_company_revenue,
      prep_crm_account.zoom_info_company_employee_count,
      prep_crm_account.zoom_info_company_industry,
      prep_crm_account.zoom_info_company_city,
      prep_crm_account.zoom_info_company_state_province,
      prep_crm_account.zoom_info_company_country,
      prep_crm_account.account_phone,
      prep_crm_account.zoominfo_account_phone,
      prep_crm_account.abm_tier,
      prep_crm_account.health_number,
      prep_crm_account.health_score_color,
      prep_crm_account.partner_account_iban_number,
      prep_crm_account.gitlab_com_user,
      prep_crm_account.crm_account_zi_technologies,
      prep_crm_account.crm_account_zoom_info_website,
      prep_crm_account.crm_account_zoom_info_company_other_domains,
      prep_crm_account.crm_account_zoom_info_dozisf_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_name,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_name,
      prep_crm_account.forbes_2000_rank,
      prep_crm_account.sales_development_rep,
      prep_crm_account.admin_manual_source_number_of_employees,
      prep_crm_account.admin_manual_source_account_address,
      prep_crm_account.eoa_sentiment,
      prep_crm_account.gs_health_user_engagement,
      prep_crm_account.gs_health_cd,
      prep_crm_account.gs_health_devsecops,
      prep_crm_account.gs_health_ci,
      prep_crm_account.gs_health_scm,
      prep_crm_account.risk_impact,
      prep_crm_account.risk_reason,
      prep_crm_account.last_timeline_at_risk_update,
      prep_crm_account.last_at_risk_update_comments,
      prep_crm_account.bdr_prospecting_status,

      --measures (maintain for now to not break reporting)
      prep_crm_account.parent_crm_account_lam,
      prep_crm_account.parent_crm_account_lam_dev_count,
      prep_crm_account.carr_account_family,
      prep_crm_account.carr_this_account,

      --degenerative dimensions
      prep_crm_account.is_sdr_target_account,
      prep_crm_account.is_key_account,
      prep_crm_account.is_reseller,
      prep_crm_account.is_jihu_account,
      prep_crm_account.is_first_order_available,
      prep_crm_account.is_zi_jenkins_present,
      prep_crm_account.is_zi_svn_present,
      prep_crm_account.is_zi_tortoise_svn_present,
      prep_crm_account.is_zi_gcp_present,
      prep_crm_account.is_zi_atlassian_present,
      prep_crm_account.is_zi_github_present,
      prep_crm_account.is_zi_github_enterprise_present,
      prep_crm_account.is_zi_aws_present,
      prep_crm_account.is_zi_kubernetes_present,
      prep_crm_account.is_zi_apache_subversion_present,
      prep_crm_account.is_zi_apache_subversion_svn_present,
      prep_crm_account.is_zi_hashicorp_present,
      prep_crm_account.is_zi_aws_cloud_trail_present,
      prep_crm_account.is_zi_circle_ci_present,
      prep_crm_account.is_zi_bit_bucket_present,
      prep_crm_account.is_excluded_from_zoom_info_enrich,

      --dates
      prep_crm_account.crm_account_created_date,
      prep_crm_account.abm_tier_1_date,
      prep_crm_account.abm_tier_2_date,
      prep_crm_account.abm_tier_3_date,
      prep_crm_account.gtm_acceleration_date,
      prep_crm_account.gtm_account_based_date,
      prep_crm_account.gtm_account_centric_date,
      prep_crm_account.partners_signed_contract_date,
      prep_crm_account.technical_account_manager_date,
      prep_crm_account.customer_since_date,
      prep_crm_account.next_renewal_date,
      prep_crm_account.gs_first_value_date,
      prep_crm_account.gs_last_csm_activity_date,

      --metadata
      prep_crm_account.created_by_name,
      prep_crm_account.last_modified_by_name,
      prep_crm_account.last_modified_date,
      prep_crm_account.last_activity_date,
      prep_crm_account.is_deleted,
      prep_crm_account.pte_score,
      prep_crm_account.pte_decile,
      prep_crm_account.pte_score_group,
      prep_crm_account.ptc_score,
      prep_crm_account.ptc_decile,
      prep_crm_account.ptc_score_group
    FROM {{ ref('prep_crm_account') }}

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@msendal",
    updated_by="@lisvinueza",
    created_date="2020-06-01",
    updated_date="2023-05-21"
) }}2f:T1f4e,

WITH final AS (

    SELECT 
      --primary key
      prep_crm_account.dim_crm_account_id,

      --surrogate keys
      prep_crm_account.dim_parent_crm_account_id,
      prep_crm_account.dim_crm_user_id,
      prep_crm_account.merged_to_account_id,
      prep_crm_account.record_type_id,
      prep_crm_account.master_record_id,
      prep_crm_account.dim_crm_person_primary_contact_id,

      --account people
      prep_crm_account.crm_account_owner,
      prep_crm_account.proposed_crm_account_owner,
      prep_crm_account.account_owner,
      prep_crm_account.technical_account_manager,
      prep_crm_account.owner_role,
      prep_crm_account.user_role_type,

      ----ultimate parent crm account info
      prep_crm_account.parent_crm_account_name,
      prep_crm_account.parent_crm_account_sales_segment,
      prep_crm_account.parent_crm_account_sales_segment_grouped,
      prep_crm_account.parent_crm_account_segment_region_stamped_grouped,
      prep_crm_account.parent_crm_account_industry,
      prep_crm_account.parent_crm_account_business_unit,
      prep_crm_account.parent_crm_account_geo,
      prep_crm_account.parent_crm_account_region,
      prep_crm_account.parent_crm_account_area,
      prep_crm_account.parent_crm_account_territory,
      prep_crm_account.parent_crm_account_role_type,
      prep_crm_account.parent_crm_account_max_family_employee,
      prep_crm_account.parent_crm_account_upa_country,
      prep_crm_account.parent_crm_account_upa_state,
      prep_crm_account.parent_crm_account_upa_city,
      prep_crm_account.parent_crm_account_upa_street,
      prep_crm_account.parent_crm_account_upa_postal_code,

      --descriptive attributes
      prep_crm_account.crm_account_name,
      prep_crm_account.crm_account_employee_count,
      prep_crm_account.crm_account_gtm_strategy,
      prep_crm_account.crm_account_focus_account,
      prep_crm_account.crm_account_owner_user_segment,
      prep_crm_account.crm_account_billing_country,
      prep_crm_account.crm_account_billing_country_code,
      prep_crm_account.crm_account_type,
      prep_crm_account.crm_account_industry,
      prep_crm_account.crm_account_sub_industry,
      prep_crm_account.crm_account_employee_count_band,
      prep_crm_account.partner_vat_tax_id,
      prep_crm_account.account_manager,
      prep_crm_account.business_development_rep,
      prep_crm_account.dedicated_service_engineer,
      prep_crm_account.account_tier,
      prep_crm_account.account_tier_notes,
      prep_crm_account.license_utilization,
      prep_crm_account.support_level,
      prep_crm_account.named_account,
      prep_crm_account.billing_postal_code,
      prep_crm_account.partner_type,
      prep_crm_account.partner_status,
      prep_crm_account.gitlab_customer_success_project,
      prep_crm_account.demandbase_account_list,
      prep_crm_account.demandbase_intent,
      prep_crm_account.demandbase_page_views,
      prep_crm_account.demandbase_score,
      prep_crm_account.demandbase_sessions,
      prep_crm_account.demandbase_trending_offsite_intent,
      prep_crm_account.demandbase_trending_onsite_engagement,
      prep_crm_account.is_locally_managed_account,
      prep_crm_account.is_strategic_account,
      prep_crm_account.partner_track,
      prep_crm_account.partners_partner_type,
      prep_crm_account.gitlab_partner_program,
      prep_crm_account.zoom_info_company_name,
      prep_crm_account.zoom_info_company_revenue,
      prep_crm_account.zoom_info_company_employee_count,
      prep_crm_account.zoom_info_company_industry,
      prep_crm_account.zoom_info_company_city,
      prep_crm_account.zoom_info_company_state_province,
      prep_crm_account.zoom_info_company_country,
      prep_crm_account.account_phone,
      prep_crm_account.zoominfo_account_phone,
      prep_crm_account.abm_tier,
      prep_crm_account.health_number,
      prep_crm_account.health_score_color,
      prep_crm_account.partner_account_iban_number,
      prep_crm_account.gitlab_com_user,
      prep_crm_account.crm_account_zi_technologies,
      prep_crm_account.crm_account_zoom_info_website,
      prep_crm_account.crm_account_zoom_info_company_other_domains,
      prep_crm_account.crm_account_zoom_info_dozisf_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_parent_company_name,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_zi_id,
      prep_crm_account.crm_account_zoom_info_ultimate_parent_company_name,
      prep_crm_account.forbes_2000_rank,
      prep_crm_account.sales_development_rep,
      prep_crm_account.admin_manual_source_number_of_employees,
      prep_crm_account.admin_manual_source_account_address,
      prep_crm_account.eoa_sentiment,
      prep_crm_account.gs_health_user_engagement,
      prep_crm_account.gs_health_cd,
      prep_crm_account.gs_health_devsecops,
      prep_crm_account.gs_health_ci,
      prep_crm_account.gs_health_scm,
      prep_crm_account.risk_impact,
      prep_crm_account.risk_reason,
      prep_crm_account.last_timeline_at_risk_update,
      prep_crm_account.last_at_risk_update_comments,
      prep_crm_account.bdr_prospecting_status,

      --measures (maintain for now to not break reporting)
      prep_crm_account.parent_crm_account_lam,
      prep_crm_account.parent_crm_account_lam_dev_count,
      prep_crm_account.carr_account_family,
      prep_crm_account.carr_this_account,

      --degenerative dimensions
      prep_crm_account.is_sdr_target_account,
      prep_crm_account.is_key_account,
      prep_crm_account.is_reseller,
      prep_crm_account.is_jihu_account,
      prep_crm_account.is_first_order_available,
      prep_crm_account.is_zi_jenkins_present,
      prep_crm_account.is_zi_svn_present,
      prep_crm_account.is_zi_tortoise_svn_present,
      prep_crm_account.is_zi_gcp_present,
      prep_crm_account.is_zi_atlassian_present,
      prep_crm_account.is_zi_github_present,
      prep_crm_account.is_zi_github_enterprise_present,
      prep_crm_account.is_zi_aws_present,
      prep_crm_account.is_zi_kubernetes_present,
      prep_crm_account.is_zi_apache_subversion_present,
      prep_crm_account.is_zi_apache_subversion_svn_present,
      prep_crm_account.is_zi_hashicorp_present,
      prep_crm_account.is_zi_aws_cloud_trail_present,
      prep_crm_account.is_zi_circle_ci_present,
      prep_crm_account.is_zi_bit_bucket_present,
      prep_crm_account.is_excluded_from_zoom_info_enrich,

      --dates
      prep_crm_account.crm_account_created_date,
      prep_crm_account.abm_tier_1_date,
      prep_crm_account.abm_tier_2_date,
      prep_crm_account.abm_tier_3_date,
      prep_crm_account.gtm_acceleration_date,
      prep_crm_account.gtm_account_based_date,
      prep_crm_account.gtm_account_centric_date,
      prep_crm_account.partners_signed_contract_date,
      prep_crm_account.technical_account_manager_date,
      prep_crm_account.customer_since_date,
      prep_crm_account.next_renewal_date,
      prep_crm_account.gs_first_value_date,
      prep_crm_account.gs_last_csm_activity_date,

      --metadata
      prep_crm_account.created_by_name,
      prep_crm_account.last_modified_by_name,
      prep_crm_account.last_modified_date,
      prep_crm_account.last_activity_date,
      prep_crm_account.is_deleted,
      prep_crm_account.pte_score,
      prep_crm_account.pte_decile,
      prep_crm_account.pte_score_group,
      prep_crm_account.ptc_score,
      prep_crm_account.ptc_decile,
      prep_crm_account.ptc_score_group
    FROM "PROD".restricted_safe_common_prep.prep_crm_account

)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2020-06-01'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final30:T4b73,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('dim_ping_instance', 'dim_ping_instance'),
    ('dim_product_tier', 'dim_product_tier'),
    ('dim_date', 'dim_date'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_crm_accounts', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('fct_charge', 'fct_charge'),
    ('dim_license', 'dim_license'),
    ('dim_hosts', 'dim_hosts'),
    ('dim_location', 'dim_location_country'),
    ('dim_ping_metric', 'dim_ping_metric')
    ])

}}

, dim_subscription AS (

    SELECT *
    FROM {{ ref('dim_subscription') }}
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT *
  FROM {{ ref('fct_ping_instance_metric_monthly') }}
  WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT DISTINCT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license.dim_license_id                                                  AS license_id,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.company                                                         AS license_company_name,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      IFF(MAX(fct_charge.mrr) > 0, TRUE, FALSE)                                   AS is_paid_subscription,
      MAX(IFF(dim_product_detail.product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)) 
                                                                                  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT dim_product_detail.product_rate_plan_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_rate_plan_name ASC)     AS product_rate_plan_name_array,
      SUM(fct_charge.quantity)                                                    AS quantity,
      SUM(fct_charge.mrr * 12)                                                    AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND fct_charge.charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
      AND dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND dim_product_detail.product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON fct_charge.effective_start_month <= dim_date.date_day AND fct_charge.effective_end_month > dim_date.date_day
    {{ dbt_utils.group_by(n=21)}}


  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.monthly_metric_value                                                                                   AS monthly_metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_sha256.license_id, license_md5.license_id)                                                                     AS license_id,
        COALESCE(license_sha256.license_company_name, license_md5.license_company_name)                                                 AS license_company_name,
        COALESCE(license_sha256.latest_subscription_id, license_md5.latest_subscription_id)                                             AS latest_subscription_id,
        COALESCE(license_sha256.original_subscription_name_slugify, license_md5.original_subscription_name_slugify)                     AS original_subscription_name_slugify,
        COALESCE(license_sha256.product_category_array, license_md5.product_category_array)                                             AS product_category_array,
        COALESCE(license_sha256.product_rate_plan_name_array, license_md5.product_rate_plan_name_array)                                 AS product_rate_plan_name_array,
        COALESCE(license_sha256.subscription_start_month, license_md5.subscription_start_month)                                         AS subscription_start_month,
        COALESCE(license_sha256.subscription_end_month, license_md5.subscription_end_month)                                             AS subscription_end_month,
        COALESCE(license_sha256.dim_billing_account_id, license_md5.dim_billing_account_id)                                             AS dim_billing_account_id,
        COALESCE(license_sha256.crm_account_name, license_md5.crm_account_name)                                                         AS crm_account_name,
        COALESCE(license_sha256.dim_parent_crm_account_id, license_md5.dim_parent_crm_account_id)                                       AS dim_parent_crm_account_id,
        COALESCE(license_sha256.parent_crm_account_name, license_md5.parent_crm_account_name)                                           AS parent_crm_account_name,
        COALESCE(license_sha256.parent_crm_account_upa_country, license_md5.parent_crm_account_upa_country)                             AS parent_crm_account_upa_country,
        COALESCE(license_sha256.parent_crm_account_sales_segment, license_md5.parent_crm_account_sales_segment)                         AS parent_crm_account_sales_segment,
        COALESCE(license_sha256.parent_crm_account_industry, license_md5.parent_crm_account_industry)                                   AS parent_crm_account_industry,
        COALESCE(license_sha256.parent_crm_account_territory, license_md5.parent_crm_account_territory)                                 AS parent_crm_account_territory,
        COALESCE(license_sha256.technical_account_manager, license_md5.technical_account_manager)                                       AS technical_account_manager,
        COALESCE(license_sha256.is_paid_subscription, license_md5.is_paid_subscription, FALSE)                                          AS is_paid_subscription,
        COALESCE(license_sha256.is_program_subscription, license_md5.is_program_subscription, FALSE)                                    AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN dim_hosts
        ON dim_ping_instance.dim_host_id = dim_hosts.host_id
          AND dim_ping_instance.ip_address_hash = dim_hosts.source_ip_hash
          AND dim_ping_instance.dim_instance_id = dim_hosts.instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_md5
        ON dim_ping_instance.license_md5 = license_md5.license_md5
          AND dim_date.first_day_of_month = license_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_sha256
        ON dim_ping_instance.license_sha256 = license_sha256.license_sha256
          AND dim_date.first_day_of_month = license_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE dim_ping_instance.ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (dim_ping_instance.ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      {{ dbt_utils.surrogate_key(['dim_ping_instance_id', 'metrics_path']) }} AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      monthly_metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month


    FROM joined
    WHERE time_frame != 'none'
      AND TRY_TO_DECIMAL(monthly_metric_value::TEXT) >= 0

)

{{ dbt_audit(
    cte_ref="sorted",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-11",
    updated_date="2023-06-22"
) }}31:Tc88, **Description:** Enriched instance Service Ping data for the last ping of the month per installation by ping and metric for 28-day and all-time metrics. This model is used for most monthly analysis and reporting. This is an enhanced version of `fct_ping_instance_metric_monthly`
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Exclude metrics that timed out during ping generation
- `Inherited` - Include 28-day and all-time metrics (`time_frame IN ('28d', 'all')`)
- `Inherited` - Include metrics from the 'Last Ping of the Month' pings

**Business Logic in this Model:**
- License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `ping_deployment_type IN ('Self-Managed', 'SaaS')`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 32:T4e28,



WITH dim_ping_instance AS (

    SELECT * 
    FROM "PROD".common.dim_ping_instance

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_accounts AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_license AS (

    SELECT * 
    FROM "PROD".common.dim_license

), dim_hosts AS (

    SELECT * 
    FROM "PROD".legacy.dim_hosts

), dim_location AS (

    SELECT * 
    FROM "PROD".common.dim_location_country

), dim_ping_metric AS (

    SELECT * 
    FROM "PROD".common.dim_ping_metric

)

, dim_subscription AS (

    SELECT *
    FROM "PROD".common.dim_subscription
    WHERE (subscription_name_slugify <> zuora_renewal_subscription_name_slugify[0]::TEXT
      OR zuora_renewal_subscription_name_slugify IS NULL)
      AND subscription_status NOT IN ('Draft', 'Expired')

), fct_ping_instance_metric AS  (

  SELECT *
  FROM "PROD".common.fct_ping_instance_metric_monthly
  WHERE IS_REAL(TO_VARIANT(metric_value))

), subscription_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), license_subscriptions AS (

    SELECT DISTINCT
      dim_date.first_day_of_month                                                 AS reporting_month,
      dim_license.dim_license_id                                                  AS license_id,
      dim_license.license_sha256                                                  AS license_sha256,
      dim_license.license_md5                                                     AS license_md5,
      dim_license.company                                                         AS license_company_name,
      subscription_source.subscription_name_slugify                               AS original_subscription_name_slugify,
      dim_subscription.dim_subscription_id                                        AS dim_subscription_id,
      dim_subscription.subscription_start_date                                    AS subscription_start_date,
      dim_subscription.subscription_end_date                                      AS subscription_end_date,
      dim_subscription.subscription_start_month                                   AS subscription_start_month,
      dim_subscription.subscription_end_month                                     AS subscription_end_month,
      dim_subscription.dim_subscription_id_original                               AS dim_subscription_id_original,
      dim_billing_account.dim_billing_account_id                                  AS dim_billing_account_id,
      dim_crm_accounts.crm_account_name                                           AS crm_account_name,
      dim_crm_accounts.dim_parent_crm_account_id                                  AS dim_parent_crm_account_id,
      dim_crm_accounts.parent_crm_account_name                                    AS parent_crm_account_name,
      dim_crm_accounts.parent_crm_account_upa_country                             AS parent_crm_account_upa_country,
      dim_crm_accounts.parent_crm_account_sales_segment                           AS parent_crm_account_sales_segment,
      dim_crm_accounts.parent_crm_account_industry                                AS parent_crm_account_industry,
      dim_crm_accounts.parent_crm_account_territory                               AS parent_crm_account_territory,
      dim_crm_accounts.technical_account_manager                                  AS technical_account_manager,
      IFF(MAX(fct_charge.mrr) > 0, TRUE, FALSE)                                   AS is_paid_subscription,
      MAX(IFF(dim_product_detail.product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)) 
                                                                                  AS is_program_subscription,
      ARRAY_AGG(DISTINCT dim_product_detail.product_tier_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_tier_name ASC)          AS product_category_array,
      ARRAY_AGG(DISTINCT dim_product_detail.product_rate_plan_name)
        WITHIN GROUP (ORDER BY dim_product_detail.product_rate_plan_name ASC)     AS product_rate_plan_name_array,
      SUM(fct_charge.quantity)                                                    AS quantity,
      SUM(fct_charge.mrr * 12)                                                    AS arr
    FROM dim_license
    INNER JOIN subscription_source
      ON dim_license.dim_subscription_id = subscription_source.subscription_id
    LEFT JOIN dim_subscription
      ON subscription_source.subscription_name_slugify = dim_subscription.subscription_name_slugify
    LEFT JOIN subscription_source AS all_subscriptions
      ON subscription_source.subscription_name_slugify = all_subscriptions.subscription_name_slugify
    INNER JOIN fct_charge
      ON all_subscriptions.subscription_id = fct_charge.dim_subscription_id
        AND fct_charge.charge_type = 'Recurring'
    INNER JOIN dim_product_detail
      ON dim_product_detail.dim_product_detail_id = fct_charge.dim_product_detail_id
      AND dim_product_detail.product_deployment_type IN ('Self-Managed', 'Dedicated')
      AND dim_product_detail.product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')
    LEFT JOIN dim_billing_account
      ON dim_subscription.dim_billing_account_id = dim_billing_account.dim_billing_account_id
    LEFT JOIN dim_crm_accounts
      ON dim_billing_account.dim_crm_account_id = dim_crm_accounts.dim_crm_account_id
    INNER JOIN dim_date
      ON fct_charge.effective_start_month <= dim_date.date_day AND fct_charge.effective_end_month > dim_date.date_day
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21


  ), latest_subscription AS (

    SELECT
        dim_subscription_id             AS latest_subscription_id,
        dim_subscription_id_original    AS dim_subscription_id_original
    FROM dim_subscription
        WHERE subscription_status IN ('Active', 'Cancelled')

  ), license_subscriptions_w_latest_subscription AS (

    SELECT
      license_subscriptions.*,
      latest_subscription.latest_subscription_id
      FROM license_subscriptions
        LEFT JOIN latest_subscription
      ON license_subscriptions.dim_subscription_id_original = latest_subscription.dim_subscription_id_original

  ), joined AS (

      SELECT
        fct_ping_instance_metric.dim_ping_date_id                                                                                       AS dim_ping_date_id,
        fct_ping_instance_metric.dim_license_id                                                                                         AS dim_license_id,
        fct_ping_instance_metric.dim_installation_id                                                                                    AS dim_installation_id,
        fct_ping_instance_metric.dim_ping_instance_id                                                                                   AS dim_ping_instance_id,
        fct_ping_instance_metric.metrics_path                                                                                           AS metrics_path,
        fct_ping_instance_metric.metric_value                                                                                           AS metric_value,
        fct_ping_instance_metric.monthly_metric_value                                                                                   AS monthly_metric_value,
        fct_ping_instance_metric.has_timed_out                                                                                          AS has_timed_out,
        dim_ping_metric.time_frame                                                                                                      AS time_frame,
        dim_ping_metric.group_name                                                                                                      AS group_name,
        dim_ping_metric.stage_name                                                                                                      AS stage_name,
        dim_ping_metric.section_name                                                                                                    AS section_name,
        dim_ping_metric.is_smau                                                                                                         AS is_smau,
        dim_ping_metric.is_gmau                                                                                                         AS is_gmau,
        dim_ping_metric.is_paid_gmau                                                                                                    AS is_paid_gmau,
        dim_ping_metric.is_umau                                                                                                         AS is_umau,
        dim_ping_instance.license_sha256                                                                                                AS license_sha256,
        dim_ping_instance.license_md5                                                                                                   AS license_md5,
        dim_ping_instance.is_trial                                                                                                      AS is_trial,
        fct_ping_instance_metric.umau_value                                                                                             AS umau_value,
        COALESCE(license_sha256.license_id, license_md5.license_id)                                                                     AS license_id,
        COALESCE(license_sha256.license_company_name, license_md5.license_company_name)                                                 AS license_company_name,
        COALESCE(license_sha256.latest_subscription_id, license_md5.latest_subscription_id)                                             AS latest_subscription_id,
        COALESCE(license_sha256.original_subscription_name_slugify, license_md5.original_subscription_name_slugify)                     AS original_subscription_name_slugify,
        COALESCE(license_sha256.product_category_array, license_md5.product_category_array)                                             AS product_category_array,
        COALESCE(license_sha256.product_rate_plan_name_array, license_md5.product_rate_plan_name_array)                                 AS product_rate_plan_name_array,
        COALESCE(license_sha256.subscription_start_month, license_md5.subscription_start_month)                                         AS subscription_start_month,
        COALESCE(license_sha256.subscription_end_month, license_md5.subscription_end_month)                                             AS subscription_end_month,
        COALESCE(license_sha256.dim_billing_account_id, license_md5.dim_billing_account_id)                                             AS dim_billing_account_id,
        COALESCE(license_sha256.crm_account_name, license_md5.crm_account_name)                                                         AS crm_account_name,
        COALESCE(license_sha256.dim_parent_crm_account_id, license_md5.dim_parent_crm_account_id)                                       AS dim_parent_crm_account_id,
        COALESCE(license_sha256.parent_crm_account_name, license_md5.parent_crm_account_name)                                           AS parent_crm_account_name,
        COALESCE(license_sha256.parent_crm_account_upa_country, license_md5.parent_crm_account_upa_country)                             AS parent_crm_account_upa_country,
        COALESCE(license_sha256.parent_crm_account_sales_segment, license_md5.parent_crm_account_sales_segment)                         AS parent_crm_account_sales_segment,
        COALESCE(license_sha256.parent_crm_account_industry, license_md5.parent_crm_account_industry)                                   AS parent_crm_account_industry,
        COALESCE(license_sha256.parent_crm_account_territory, license_md5.parent_crm_account_territory)                                 AS parent_crm_account_territory,
        COALESCE(license_sha256.technical_account_manager, license_md5.technical_account_manager)                                       AS technical_account_manager,
        COALESCE(license_sha256.is_paid_subscription, license_md5.is_paid_subscription, FALSE)                                          AS is_paid_subscription,
        COALESCE(license_sha256.is_program_subscription, license_md5.is_program_subscription, FALSE)                                    AS is_program_subscription,
        dim_ping_instance.ping_delivery_type                                                                                            AS ping_delivery_type,
        dim_ping_instance.ping_deployment_type                                                                                          AS ping_deployment_type,
        dim_ping_instance.ping_edition                                                                                                  AS ping_edition,
        dim_ping_instance.product_tier                                                                                                  AS ping_product_tier,
        dim_ping_instance.ping_edition || ' - ' || dim_ping_instance.product_tier                                                       AS ping_edition_product_tier,
        dim_ping_instance.major_version                                                                                                 AS major_version,
        dim_ping_instance.minor_version                                                                                                 AS minor_version,
        dim_ping_instance.major_minor_version                                                                                           AS major_minor_version,
        dim_ping_instance.major_minor_version_id                                                                                        AS major_minor_version_id,
        dim_ping_instance.version_is_prerelease                                                                                         AS version_is_prerelease,
        dim_ping_instance.is_internal                                                                                                   AS is_internal,
        dim_ping_instance.is_staging                                                                                                    AS is_staging,
        dim_ping_instance.instance_user_count                                                                                           AS instance_user_count,
        dim_ping_instance.ping_created_at                                                                                               AS ping_created_at,
        dim_date.first_day_of_month                                                                                                     AS ping_created_date_month,
        fct_ping_instance_metric.dim_host_id                                                                                            AS dim_host_id,
        fct_ping_instance_metric.dim_instance_id                                                                                        AS dim_instance_id,
        dim_ping_instance.host_name                                                                                                     AS host_name,
        dim_ping_instance.is_last_ping_of_month                                                                                         AS is_last_ping_of_month,
        fct_ping_instance_metric.dim_location_country_id                                                                                AS dim_location_country_id,
        dim_location.country_name                                                                                                       AS country_name,
        dim_location.iso_2_country_code                                                                                                 AS iso_2_country_code
      FROM fct_ping_instance_metric
      LEFT JOIN dim_ping_metric
        ON fct_ping_instance_metric.metrics_path = dim_ping_metric.metrics_path
      INNER JOIN dim_date
        ON fct_ping_instance_metric.dim_ping_date_id = dim_date.date_id
      LEFT JOIN dim_ping_instance
        ON fct_ping_instance_metric.dim_ping_instance_id = dim_ping_instance.dim_ping_instance_id
      LEFT JOIN dim_hosts
        ON dim_ping_instance.dim_host_id = dim_hosts.host_id
          AND dim_ping_instance.ip_address_hash = dim_hosts.source_ip_hash
          AND dim_ping_instance.dim_instance_id = dim_hosts.instance_id
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_md5
        ON dim_ping_instance.license_md5 = license_md5.license_md5
          AND dim_date.first_day_of_month = license_md5.reporting_month
      LEFT JOIN license_subscriptions_w_latest_subscription AS license_sha256
        ON dim_ping_instance.license_sha256 = license_sha256.license_sha256
          AND dim_date.first_day_of_month = license_sha256.reporting_month
      LEFT JOIN dim_location
        ON fct_ping_instance_metric.dim_location_country_id = dim_location.dim_location_country_id
      WHERE dim_ping_instance.ping_deployment_type IN ('Self-Managed', 'Dedicated')
        OR (dim_ping_instance.ping_delivery_type = 'SaaS' AND fct_ping_instance_metric.dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7')

), sorted AS (

    SELECT

      -- Primary Key
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(metrics_path as 
    varchar
), '') as 
    varchar
)) AS ping_instance_metric_id,
      dim_ping_date_id,
      metrics_path,
      metric_value,
      monthly_metric_value,
      has_timed_out,
      dim_ping_instance_id,

      --Foreign Key
      dim_instance_id,
      dim_license_id,
      dim_installation_id,
      latest_subscription_id,
      dim_billing_account_id,
      dim_parent_crm_account_id,
      major_minor_version_id,
      dim_host_id,
      host_name,
      -- metadata usage ping
      ping_delivery_type,
      ping_deployment_type,
      ping_edition,
      ping_product_tier,
      ping_edition_product_tier,
      major_version,
      minor_version,
      major_minor_version,
      version_is_prerelease,
      is_internal,
      is_staging,
      is_trial,
      umau_value,

      -- metadata metrics

      group_name,
      stage_name,
      section_name,
      is_smau,
      is_gmau,
      is_paid_gmau,
      is_umau,
      time_frame,

      --metadata instance
      instance_user_count,

      --metadata subscription
      original_subscription_name_slugify,
      subscription_start_month,
      subscription_end_month,
      product_category_array,
      product_rate_plan_name_array,
      is_paid_subscription,
      is_program_subscription,

      -- account metadata
      crm_account_name,
      parent_crm_account_name,
      parent_crm_account_upa_country,
      parent_crm_account_sales_segment,
      parent_crm_account_industry,
      parent_crm_account_territory,
      technical_account_manager,

      ping_created_at,
      ping_created_date_month,
      is_last_ping_of_month


    FROM joined
    WHERE time_frame != 'none'
      AND TRY_TO_DECIMAL(monthly_metric_value::TEXT) >= 0

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-11'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM sorted33:T55d,{{ config({
        "tags": ["mnpi_exception"],
        "alias": "dim_billing_account"
    })
}}

{{ simple_cte([
    ('prep_billing_account','prep_billing_account')
]) }}

, billing_account AS (


    SELECT
    --surrogate key
      prep_billing_account.dim_billing_account_sk,
    
     --natural key
      prep_billing_account.dim_billing_account_id,
 
     --foreign key
      prep_billing_account.dim_crm_account_id,

     --Other attributes
      prep_billing_account.billing_account_number,
      prep_billing_account.billing_account_name,
      prep_billing_account.account_status,
      prep_billing_account.parent_id,
      prep_billing_account.sfdc_account_code                  AS crm_account_code, 
      prep_billing_account.sfdc_entity                        AS crm_entity,
      prep_billing_account.account_currency,
      prep_billing_account.sold_to_country,
      prep_billing_account.ssp_channel,
      prep_billing_account.po_required,
      prep_billing_account.auto_pay,
      prep_billing_account.default_payment_method_type,
      prep_billing_account.is_deleted,
      prep_billing_account.batch,
      prep_billing_account.record_data_source
    FROM prep_billing_account

)

{{ dbt_audit(
    cte_ref="billing_account",
    created_by="@snalamaru",
    updated_by="@snalamaru",
    created_date="2023-04-25",
    updated_date="2023-05-31"
) }}34:T608,



WITH prep_billing_account AS (

    SELECT * 
    FROM "PROD".common_prep.prep_billing_account

)

, billing_account AS (


    SELECT
    --surrogate key
      prep_billing_account.dim_billing_account_sk,
    
     --natural key
      prep_billing_account.dim_billing_account_id,
 
     --foreign key
      prep_billing_account.dim_crm_account_id,

     --Other attributes
      prep_billing_account.billing_account_number,
      prep_billing_account.billing_account_name,
      prep_billing_account.account_status,
      prep_billing_account.parent_id,
      prep_billing_account.sfdc_account_code                  AS crm_account_code, 
      prep_billing_account.sfdc_entity                        AS crm_entity,
      prep_billing_account.account_currency,
      prep_billing_account.sold_to_country,
      prep_billing_account.ssp_channel,
      prep_billing_account.po_required,
      prep_billing_account.auto_pay,
      prep_billing_account.default_payment_method_type,
      prep_billing_account.is_deleted,
      prep_billing_account.batch,
      prep_billing_account.record_data_source
    FROM prep_billing_account

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@snalamaru'::VARCHAR       AS updated_by,
      '2023-04-25'::DATE        AS model_created_date,
      '2023-05-31'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM billing_account35:T77d,{{ config({
        "alias": "dim_product_detail"
    })
}}

WITH base AS (

    SELECT *
    FROM {{ ref('prep_product_detail') }}

), final AS (

    SELECT
      dim_product_detail_id            AS dim_product_detail_id,
      product_id                       AS product_id,
      dim_product_tier_id              AS dim_product_tier_id,
      product_rate_plan_id             AS product_rate_plan_id,
      product_rate_plan_charge_id      AS product_rate_plan_charge_id,
      product_rate_plan_name           AS product_rate_plan_name,
      product_rate_plan_charge_name    AS product_rate_plan_charge_name,
      product_name                     AS product_name,
      product_sku                      AS product_sku,
      product_tier_historical          AS product_tier_historical,
      product_tier_historical_short    AS product_tier_historical_short,
      product_tier_name                AS product_tier_name,
      product_tier_name_short          AS product_tier_name_short,
      product_delivery_type            AS product_delivery_type,
      product_deployment_type          AS product_deployment_type,
      service_type                     AS service_type,
      is_reporter_license              AS is_reporter_license,
      effective_start_date             AS effective_start_date,
      effective_end_date               AS effective_end_date,
      product_ranking                  AS product_ranking,
      is_oss_or_edu_rate_plan          AS is_oss_or_edu_rate_plan,
      billing_list_price               AS billing_list_price,
      annual_billing_list_price        AS annual_billing_list_price,
      is_licensed_user                 AS is_licensed_user,
      is_arpu                          AS is_arpu
    FROM base
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2020-12-16",
    updated_date="2023-05-25"
) }}36:T839,

WITH base AS (

    SELECT *
    FROM "PROD".common_prep.prep_product_detail

), final AS (

    SELECT
      dim_product_detail_id            AS dim_product_detail_id,
      product_id                       AS product_id,
      dim_product_tier_id              AS dim_product_tier_id,
      product_rate_plan_id             AS product_rate_plan_id,
      product_rate_plan_charge_id      AS product_rate_plan_charge_id,
      product_rate_plan_name           AS product_rate_plan_name,
      product_rate_plan_charge_name    AS product_rate_plan_charge_name,
      product_name                     AS product_name,
      product_sku                      AS product_sku,
      product_tier_historical          AS product_tier_historical,
      product_tier_historical_short    AS product_tier_historical_short,
      product_tier_name                AS product_tier_name,
      product_tier_name_short          AS product_tier_name_short,
      product_delivery_type            AS product_delivery_type,
      product_deployment_type          AS product_deployment_type,
      service_type                     AS service_type,
      is_reporter_license              AS is_reporter_license,
      effective_start_date             AS effective_start_date,
      effective_end_date               AS effective_end_date,
      product_ranking                  AS product_ranking,
      is_oss_or_edu_rate_plan          AS is_oss_or_edu_rate_plan,
      billing_list_price               AS billing_list_price,
      annual_billing_list_price        AS annual_billing_list_price,
      is_licensed_user                 AS is_licensed_user,
      is_arpu                          AS is_arpu
    FROM base
)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2020-12-16'::DATE        AS model_created_date,
      '2023-05-25'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final37:T445,{{ config(
    tags=["product", "mnpi_exception"]
) }}

WITH final AS (
    
    SELECT 
      {{ dbt_utils.star(from=ref('mart_ping_instance_metric_7_day'), except=['CREATED_BY', 'UPDATED_BY', 'MODEL_CREATED_DATE', 
        'MODEL_UPDATED_DATE', 'DBT_CREATED_AT', 'DBT_UPDATED_AT']) }}
    FROM {{ ref('mart_ping_instance_metric_7_day') }} 
    
    UNION ALL
    
    SELECT 
      {{ dbt_utils.star(from=ref('mart_ping_instance_metric_28_day'), except=['CREATED_BY', 'UPDATED_BY', 'MODEL_CREATED_DATE', 
        'MODEL_UPDATED_DATE', 'DBT_CREATED_AT', 'DBT_UPDATED_AT']) }}
    FROM {{ ref('mart_ping_instance_metric_28_day') }} 
    
    UNION ALL
    
    SELECT 
      {{ dbt_utils.star(from=ref('mart_ping_instance_metric_all_time'), except=['CREATED_BY', 'UPDATED_BY', 'MODEL_CREATED_DATE', 
        'MODEL_UPDATED_DATE', 'DBT_CREATED_AT', 'DBT_UPDATED_AT']) }}
    FROM {{ ref('mart_ping_instance_metric_all_time') }} 
    
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@icooper-acp",
    updated_by="@iweeks",
    created_date="2022-05-03",
    updated_date="2022-07-20"
) }}38:Tf2e, **Description:** Enriched instance Service Ping data by ping and metric for all-time metrics. This is a UNIONED version of [`mart_ping_instance_metric_7_day`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.mart_ping_instance_metric_7_day), [`mart_ping_instance_metric_28_day`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.mart_ping_instance_metric_28_day), and [`mart_ping_instance_metric_all_time`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.mart_ping_instance_metric_all_time)
- This data is enhanced with additional license, subscription, CRM account, and billing attributes for ease of analysis

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- `Inherited` - Exclude non-production SaaS installations (ex: `staging.gitlab.com`)
- `Inherited` - Exclude metrics with non-numeric or negative values (`TRY_TO_DECIMAL(metric_value::TEXT) >= 0`)
- `Inherited` - Include 7-day, 28-day, and all-time metrics (`time_frame IN ('7d', '28d', 'all')`)

**Business Logic in this Model:**
- `Inherited` - License / Subscription Logic:
  - `latest_subscription_id` reflects the most recent available subscription_id `WHERE subscription_status IN ('Active','Cancelled')`. This is not necessarily the subscription_id at the time of ping generation
  - `is_program_subscription` = TRUE `WHERE product_rate_plan_name LIKE ('%edu%' or '%oss%')`
  - `product_delivery_type = 'Self-Managed'`
  - `product_rate_plan_name NOT IN ('Premium - 1 Year - Eval')`
  - `charge_type = 'Recurring'`
- `Inherited` - The installation's subscription information reflects the plan at time of ping generation
  - The exception is `latest_subscription_id` which reflects the most recent available subscription_id associated with the installation's subscription at time of ping generation
- `Inherited` - Metrics that timed out (return -1) are set to a value of 0
- `Inherited` - `is_last_ping_of_month` = last ping created per calendar month per installation (`dim_installation_id`)

**Other Comments:**
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- `dim_instance_id` is synonymous with `uuid` in the source data
- Metric time frames are set in the metric definition yaml file and can be found in the [Service Ping Metrics Dictionary](https://metrics.gitlab.com/)
- Sums, Counts and Percents of Usage (called metrics) is captured along with the Implementation Information at the Instance Level and sent to GitLab. The Instance Owner determines whether Service Ping data will be sent or not.
- GitLab implementations can be Customer Hosted (Self-Managed), GitLab Hosted (referred to as SaaS or Dotcom data) or GitLab Dedicated Hosted (where each Installation is Hosted by GitLab but on Separate Servers).   
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 39:T1270,

WITH final AS (
    
    SELECT 
      "PING_INSTANCE_METRIC_ID",
  "DIM_PING_DATE_ID",
  "METRICS_PATH",
  "METRIC_VALUE",
  "HAS_TIMED_OUT",
  "DIM_PING_INSTANCE_ID",
  "DIM_INSTANCE_ID",
  "DIM_LICENSE_ID",
  "DIM_INSTALLATION_ID",
  "LATEST_SUBSCRIPTION_ID",
  "DIM_BILLING_ACCOUNT_ID",
  "DIM_PARENT_CRM_ACCOUNT_ID",
  "MAJOR_MINOR_VERSION_ID",
  "DIM_HOST_ID",
  "HOST_NAME",
  "PING_DELIVERY_TYPE",
  "PING_DEPLOYMENT_TYPE",
  "PING_EDITION",
  "PING_PRODUCT_TIER",
  "PING_EDITION_PRODUCT_TIER",
  "MAJOR_VERSION",
  "MINOR_VERSION",
  "MAJOR_MINOR_VERSION",
  "VERSION_IS_PRERELEASE",
  "IS_INTERNAL",
  "IS_STAGING",
  "IS_TRIAL",
  "UMAU_VALUE",
  "GROUP_NAME",
  "STAGE_NAME",
  "SECTION_NAME",
  "IS_SMAU",
  "IS_GMAU",
  "IS_PAID_GMAU",
  "IS_UMAU",
  "TIME_FRAME",
  "INSTANCE_USER_COUNT",
  "ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY",
  "SUBSCRIPTION_START_MONTH",
  "SUBSCRIPTION_END_MONTH",
  "PRODUCT_CATEGORY_ARRAY",
  "PRODUCT_RATE_PLAN_NAME_ARRAY",
  "IS_PAID_SUBSCRIPTION",
  "IS_PROGRAM_SUBSCRIPTION",
  "CRM_ACCOUNT_NAME",
  "PARENT_CRM_ACCOUNT_NAME",
  "PARENT_CRM_ACCOUNT_UPA_COUNTRY",
  "PARENT_CRM_ACCOUNT_SALES_SEGMENT",
  "PARENT_CRM_ACCOUNT_INDUSTRY",
  "PARENT_CRM_ACCOUNT_TERRITORY",
  "TECHNICAL_ACCOUNT_MANAGER",
  "PING_CREATED_AT",
  "PING_CREATED_DATE_MONTH",
  "IS_LAST_PING_OF_MONTH",
  "PING_CREATED_DATE_WEEK",
  "IS_LAST_PING_OF_WEEK"
    FROM "PROD".common_mart.mart_ping_instance_metric_7_day 
    
    UNION ALL
    
    SELECT 
      "PING_INSTANCE_METRIC_ID",
  "DIM_PING_DATE_ID",
  "METRICS_PATH",
  "METRIC_VALUE",
  "HAS_TIMED_OUT",
  "DIM_PING_INSTANCE_ID",
  "DIM_INSTANCE_ID",
  "DIM_LICENSE_ID",
  "DIM_INSTALLATION_ID",
  "LATEST_SUBSCRIPTION_ID",
  "DIM_BILLING_ACCOUNT_ID",
  "DIM_PARENT_CRM_ACCOUNT_ID",
  "MAJOR_MINOR_VERSION_ID",
  "DIM_HOST_ID",
  "HOST_NAME",
  "PING_DELIVERY_TYPE",
  "PING_DEPLOYMENT_TYPE",
  "PING_EDITION",
  "PING_PRODUCT_TIER",
  "PING_EDITION_PRODUCT_TIER",
  "MAJOR_VERSION",
  "MINOR_VERSION",
  "MAJOR_MINOR_VERSION",
  "VERSION_IS_PRERELEASE",
  "IS_INTERNAL",
  "IS_STAGING",
  "IS_TRIAL",
  "UMAU_VALUE",
  "GROUP_NAME",
  "STAGE_NAME",
  "SECTION_NAME",
  "IS_SMAU",
  "IS_GMAU",
  "IS_PAID_GMAU",
  "IS_UMAU",
  "TIME_FRAME",
  "INSTANCE_USER_COUNT",
  "ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY",
  "SUBSCRIPTION_START_MONTH",
  "SUBSCRIPTION_END_MONTH",
  "PRODUCT_CATEGORY_ARRAY",
  "PRODUCT_RATE_PLAN_NAME_ARRAY",
  "IS_PAID_SUBSCRIPTION",
  "IS_PROGRAM_SUBSCRIPTION",
  "CRM_ACCOUNT_NAME",
  "PARENT_CRM_ACCOUNT_NAME",
  "PARENT_CRM_ACCOUNT_UPA_COUNTRY",
  "PARENT_CRM_ACCOUNT_SALES_SEGMENT",
  "PARENT_CRM_ACCOUNT_INDUSTRY",
  "PARENT_CRM_ACCOUNT_TERRITORY",
  "TECHNICAL_ACCOUNT_MANAGER",
  "PING_CREATED_AT",
  "PING_CREATED_DATE_MONTH",
  "IS_LAST_PING_OF_MONTH",
  "PING_CREATED_DATE_WEEK",
  "IS_LAST_PING_OF_WEEK"
    FROM "PROD".common_mart.mart_ping_instance_metric_28_day 
    
    UNION ALL
    
    SELECT 
      "PING_INSTANCE_METRIC_ID",
  "DIM_PING_DATE_ID",
  "METRICS_PATH",
  "METRIC_VALUE",
  "HAS_TIMED_OUT",
  "DIM_PING_INSTANCE_ID",
  "DIM_INSTANCE_ID",
  "DIM_LICENSE_ID",
  "DIM_INSTALLATION_ID",
  "LATEST_SUBSCRIPTION_ID",
  "DIM_BILLING_ACCOUNT_ID",
  "DIM_PARENT_CRM_ACCOUNT_ID",
  "MAJOR_MINOR_VERSION_ID",
  "DIM_HOST_ID",
  "HOST_NAME",
  "PING_DELIVERY_TYPE",
  "PING_DEPLOYMENT_TYPE",
  "PING_EDITION",
  "PING_PRODUCT_TIER",
  "PING_EDITION_PRODUCT_TIER",
  "MAJOR_VERSION",
  "MINOR_VERSION",
  "MAJOR_MINOR_VERSION",
  "VERSION_IS_PRERELEASE",
  "IS_INTERNAL",
  "IS_STAGING",
  "IS_TRIAL",
  "UMAU_VALUE",
  "GROUP_NAME",
  "STAGE_NAME",
  "SECTION_NAME",
  "IS_SMAU",
  "IS_GMAU",
  "IS_PAID_GMAU",
  "IS_UMAU",
  "TIME_FRAME",
  "INSTANCE_USER_COUNT",
  "ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY",
  "SUBSCRIPTION_START_MONTH",
  "SUBSCRIPTION_END_MONTH",
  "PRODUCT_CATEGORY_ARRAY",
  "PRODUCT_RATE_PLAN_NAME_ARRAY",
  "IS_PAID_SUBSCRIPTION",
  "IS_PROGRAM_SUBSCRIPTION",
  "CRM_ACCOUNT_NAME",
  "PARENT_CRM_ACCOUNT_NAME",
  "PARENT_CRM_ACCOUNT_UPA_COUNTRY",
  "PARENT_CRM_ACCOUNT_SALES_SEGMENT",
  "PARENT_CRM_ACCOUNT_INDUSTRY",
  "PARENT_CRM_ACCOUNT_TERRITORY",
  "TECHNICAL_ACCOUNT_MANAGER",
  "PING_CREATED_AT",
  "PING_CREATED_DATE_MONTH",
  "IS_LAST_PING_OF_MONTH",
  "PING_CREATED_DATE_WEEK",
  "IS_LAST_PING_OF_WEEK"
    FROM "PROD".common_mart.mart_ping_instance_metric_all_time 
    
)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2022-05-03'::DATE        AS model_created_date,
      '2022-07-20'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final3a:T81e,

WITH dates AS (

  SELECT
    "DATE_DAY",
  "DATE_ACTUAL",
  "DAY_NAME",
  "MONTH_ACTUAL",
  "YEAR_ACTUAL",
  "QUARTER_ACTUAL",
  "DAY_OF_WEEK",
  "FIRST_DAY_OF_WEEK",
  "WEEK_OF_YEAR",
  "DAY_OF_MONTH",
  "DAY_OF_QUARTER",
  "DAY_OF_YEAR",
  "FISCAL_YEAR",
  "FISCAL_QUARTER",
  "DAY_OF_FISCAL_QUARTER",
  "DAY_OF_FISCAL_YEAR",
  "MONTH_NAME",
  "FIRST_DAY_OF_MONTH",
  "LAST_DAY_OF_MONTH",
  "FIRST_DAY_OF_YEAR",
  "LAST_DAY_OF_YEAR",
  "FIRST_DAY_OF_QUARTER",
  "LAST_DAY_OF_QUARTER",
  "FIRST_DAY_OF_FISCAL_QUARTER",
  "LAST_DAY_OF_FISCAL_QUARTER",
  "FIRST_DAY_OF_FISCAL_YEAR",
  "LAST_DAY_OF_FISCAL_YEAR",
  "WEEK_OF_FISCAL_YEAR",
  "MONTH_OF_FISCAL_YEAR",
  "LAST_DAY_OF_WEEK",
  "QUARTER_NAME",
  "FISCAL_QUARTER_NAME",
  "FISCAL_QUARTER_NAME_FY",
  "FISCAL_QUARTER_NUMBER_ABSOLUTE",
  "FISCAL_MONTH_NAME",
  "FISCAL_MONTH_NAME_FY",
  "HOLIDAY_DESC",
  "IS_HOLIDAY",
  "LAST_MONTH_OF_FISCAL_QUARTER",
  "IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER",
  "LAST_MONTH_OF_FISCAL_YEAR",
  "IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR",
  "SNAPSHOT_DATE_FPA",
  "SNAPSHOT_DATE_BILLINGS",
  "DAYS_IN_MONTH_COUNT",
  "WEEK_OF_MONTH_NORMALISED",
  "DAY_OF_FISCAL_QUARTER_NORMALISED",
  "WEEK_OF_FISCAL_QUARTER_NORMALISED",
  "DAY_OF_FISCAL_YEAR_NORMALISED",
  "IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK",
  "DAYS_UNTIL_LAST_DAY_OF_MONTH",
  "CURRENT_DATE_ACTUAL",
  "CURRENT_FISCAL_YEAR",
  "CURRENT_FIRST_DAY_OF_FISCAL_YEAR",
  "CURRENT_FISCAL_QUARTER_NAME_FY",
  "CURRENT_FIRST_DAY_OF_MONTH"
  FROM "PROD".common_prep.prep_date

), final AS (

  SELECT
    

  TO_NUMBER(TO_CHAR(date_actual::DATE,'YYYYMMDD'),'99999999')

                                AS date_id,
    *
  FROM dates

)

SELECT
      *,
      '@msendal'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2020-06-01'::DATE        AS model_created_date,
      '2023-01-09'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final3b:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}3c:T416,Used to simplify CTE imports in a model.

A large portion of import statements in a SQL model are simple `SELECT * FROM table`. Writing pure SQL is verbose and this macro aims to simplify the imports.

The macro accepts once argument which is a list of tuples where each tuple has the alias name and the table reference.

Below is an example and the expected output:

```sql

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account','zuora_account_source'),
    ('zuora_contact','zuora_contact_source')
]) }}

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM {{ref('zuora_excluded_accounts')}}

)

```

```sql
WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".common.map_merged_crm_account

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

)

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM "PROD".legacy.zuora_excluded_accounts

)
```3e:T2ef2,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "table"
) }}

{{ simple_cte([
    ('metric_opt_in', 'rpt_ping_metric_first_last_versions'),
    ('mart_charge', 'mart_charge'),
    ('dim_charge', 'dim_charge'),
    ('fct_charge', 'fct_charge'),
    ('dim_subscription', 'dim_subscription'),
    ('dim_billing_account', 'dim_billing_account'),
    ('dim_crm_account', 'dim_crm_account'),
    ('dim_product_detail', 'dim_product_detail'),
    ('dim_date', 'dim_date'),
    ('mart_ping_instance_metric', 'mart_ping_instance_metric'),
    ('mart_ping_instance_metric_monthly', 'mart_ping_instance_metric_monthly')
    ])

}}

/*
Determine latest version for each subscription to determine if the potential metric is valid for a given month
*/

, subscriptions_w_versions AS (

  SELECT
      ping_created_date_month           AS ping_created_date_month,
      dim_installation_id               AS dim_installation_id,
      latest_subscription_id            AS latest_subscription_id,
      ping_edition                      AS ping_edition,
      version_is_prerelease             AS version_is_prerelease,
      major_minor_version_id            AS major_minor_version_id,
      instance_user_count               AS instance_user_count
  FROM mart_ping_instance_metric_monthly
      WHERE ping_delivery_type = 'Self-Managed'
      QUALIFY ROW_NUMBER() OVER (
            PARTITION BY ping_created_date_month, latest_subscription_id, dim_installation_id
              ORDER BY major_minor_version_id DESC) = 1

/*
Deduping the mart to ensure instance_user_count isn't counted 2+ times
*/

), deduped_subscriptions_w_versions AS (

    SELECT
        ping_created_date_month           AS ping_created_date_month,
        dim_installation_id               AS dim_installation_id,
        latest_subscription_id            AS latest_subscription_id,
        ping_edition                      AS ping_edition,
        version_is_prerelease             AS version_is_prerelease,
        major_minor_version_id            AS major_minor_version_id,
        MAX(instance_user_count)          AS instance_user_count
    FROM subscriptions_w_versions
      {{ dbt_utils.group_by(n=6)}}
/*
Get the count of pings each month per subscription_name_slugify
*/

), ping_counts AS (

  SELECT
    ping_created_date_month                     AS ping_created_date_month,
    dim_installation_id                         AS dim_installation_id,
    latest_subscription_id                      AS latest_subscription_id,
    COUNT(DISTINCT(dim_ping_instance_id))       AS ping_count
  FROM mart_ping_instance_metric
      {{ dbt_utils.group_by(n=3)}}

/*
Join subscription information with count of pings
*/

), joined_subscriptions AS (

  SELECT
    deduped_subscriptions_w_versions.*,
    ping_counts.ping_count
  FROM deduped_subscriptions_w_versions
    INNER JOIN ping_counts
  ON deduped_subscriptions_w_versions.ping_created_date_month = ping_counts.ping_created_date_month
    AND deduped_subscriptions_w_versions.latest_subscription_id = ping_counts.latest_subscription_id
    AND deduped_subscriptions_w_versions.dim_installation_id = ping_counts.dim_installation_id
/*
Aggregate mart_charge information (used as the basis of truth), this gets rid of host deviation
*/

), mart_charge_cleaned AS (

  SELECT
       dim_date.date_actual               AS arr_month,
       fct_charge.dim_subscription_id     AS dim_subscription_id,
       SUM(quantity)                      AS licensed_user_count,
       IFF(SUM(arr) > 0, TRUE, FALSE)     AS is_paid_subscription
     FROM fct_charge
     INNER JOIN dim_date
        ON effective_start_month <= dim_date.date_actual
        AND (effective_end_month >= dim_date.date_actual OR effective_end_month IS NULL)
        AND dim_date.day_of_month = 1
     INNER JOIN dim_charge
       ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
     INNER JOIN dim_subscription
       ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
     INNER JOIN dim_product_detail
       ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
      WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
        AND subscription_status IN ('Active','Cancelled')
        AND dim_product_detail.product_tier_name != 'Storage'
        AND DATE_TRUNC('MONTH', CURRENT_DATE) > arr_month
      {{ dbt_utils.group_by(n=2)}}

/*
Join mart_charge information bringing in mart_charge subscriptions which DO NOT appear in ping fact data
*/

), arr_counts_joined AS (

  SELECT
    mart_charge_cleaned.arr_month                                                                           AS ping_created_date_month,
    joined_subscriptions.dim_installation_id                                                                AS dim_installation_id,
    mart_charge_cleaned.dim_subscription_id                                                                 AS latest_subscription_id,
    joined_subscriptions.ping_edition                                                                       AS ping_edition,
    joined_subscriptions.version_is_prerelease                                                              AS version_is_prerelease,
    joined_subscriptions.major_minor_version_id                                                             AS major_minor_version_id,
    joined_subscriptions.instance_user_count                                                                AS instance_user_count,
    mart_charge_cleaned.licensed_user_count                                                                 AS licensed_user_count,
    mart_charge_cleaned.is_paid_subscription                                                                AS is_paid_subscription,
    joined_subscriptions.ping_count                                                                         AS ping_count,
    FALSE                                                                                                   AS is_missing_charge_subscription
  FROM mart_charge_cleaned
    LEFT OUTER JOIN joined_subscriptions
  ON joined_subscriptions.latest_subscription_id = mart_charge_cleaned.dim_subscription_id
      AND joined_subscriptions.ping_created_date_month = mart_charge_cleaned.arr_month

/*
Grab the latest values to join to missing subs
*/

), latest_mart_charge_values AS (

    SELECT
        dim_subscription_id,
        is_paid_subscription,
        licensed_user_count
    FROM mart_charge_cleaned
        QUALIFY ROW_NUMBER() OVER (
              PARTITION BY dim_subscription_id
              ORDER BY arr_month DESC) = 1

/*
This CTE below grabs the missing installation/subs for each month missing from arr_counts_joined (latest_subs) where there are actual pings from that install/sub combo)
*/

), missing_subs AS (

    SELECT
        ping_created_date_month                 AS ping_created_date_month,
        dim_installation_id                     AS dim_installation_id,
        latest_subscription_id                  AS latest_subscription_id,
        ping_edition                            AS ping_edition,
        version_is_prerelease                   AS version_is_prerelease,
        MAX(major_minor_version_id)             AS major_minor_version_id,
        MAX(instance_user_count)                AS instance_user_count,
        COUNT(DISTINCT(dim_ping_instance_id))   AS ping_count
    FROM mart_ping_instance_metric
        WHERE is_last_ping_of_month = TRUE
          AND CONCAT(latest_subscription_id, to_varchar(ping_created_date_month)) NOT IN
            (SELECT DISTINCT(CONCAT(latest_subscription_id, to_varchar(ping_created_date_month))) FROM arr_counts_joined)
          {{ dbt_utils.group_by(n=5)}}

/*
Join to capture missing metrics, uses the last value found for these in fct_charge
*/

), missing_subs_joined AS (

    SELECT
        missing_subs.*,
        latest_mart_charge_values.licensed_user_count         AS licensed_user_count,
        latest_mart_charge_values.is_paid_subscription        AS is_paid_subscription,
        TRUE                                                  AS is_missing_charge_subscription
    FROM missing_subs
        INNER JOIN latest_mart_charge_values
    ON missing_subs.latest_subscription_id = latest_mart_charge_values.dim_subscription_id

), latest_subs_unioned AS (

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM arr_counts_joined

        UNION ALL

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM missing_subs_joined

), final AS (

    SELECT
        {{ dbt_utils.surrogate_key(['ping_created_date_month', 'latest_subscription_id', 'dim_installation_id', 'ping_edition', 'version_is_prerelease']) }}                      AS ping_latest_subscriptions_monthly_id,
        latest_subs_unioned.ping_created_date_month                                                                                                                               AS ping_created_date_month,
        latest_subs_unioned.dim_installation_id                                                                                                                                   AS dim_installation_id,
        latest_subs_unioned.latest_subscription_id                                                                                                                                AS latest_subscription_id,
        latest_subs_unioned.ping_edition                                                                                                                                          AS ping_edition,
        latest_subs_unioned.version_is_prerelease                                                                                                                                 AS version_is_prerelease,
        latest_subs_unioned.major_minor_version_id                                                                                                                                AS major_minor_version_id,
        latest_subs_unioned.instance_user_count                                                                                                                                   AS instance_user_count,
        FLOOR(latest_subs_unioned.licensed_user_count)                                                                                                                            AS licensed_user_count,
        latest_subs_unioned.is_paid_subscription                                                                                                                                  AS is_paid_subscription,
        IFNULL(latest_subs_unioned.ping_count, 0)                                                                                                                                 AS ping_count,
        IFF(latest_subs_unioned.ping_edition IS NULL, FALSE, TRUE)                                                                                                                AS has_sent_pings,
        latest_subs_unioned.is_missing_charge_subscription                                                                                                                        AS is_missing_charge_subscription
    FROM latest_subs_unioned
      WHERE ping_created_date_month < DATE_TRUNC('month', CURRENT_DATE)

)

 {{ dbt_audit(
     cte_ref="final",
     created_by="@icooper-acp",
     updated_by="@jpeguero",
     created_date="2022-05-05",
     updated_date="2022-12-15"
 ) }}3f:T31f8,



WITH metric_opt_in AS (

    SELECT * 
    FROM "PROD".common_mart_product.rpt_ping_metric_first_last_versions

), mart_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mart_sales.mart_charge

), dim_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_charge

), fct_charge AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_charge

), dim_subscription AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), dim_billing_account AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), dim_product_detail AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), mart_ping_instance_metric AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric

), mart_ping_instance_metric_monthly AS (

    SELECT * 
    FROM "PROD".common_mart.mart_ping_instance_metric_monthly

)

/*
Determine latest version for each subscription to determine if the potential metric is valid for a given month
*/

, subscriptions_w_versions AS (

  SELECT
      ping_created_date_month           AS ping_created_date_month,
      dim_installation_id               AS dim_installation_id,
      latest_subscription_id            AS latest_subscription_id,
      ping_edition                      AS ping_edition,
      version_is_prerelease             AS version_is_prerelease,
      major_minor_version_id            AS major_minor_version_id,
      instance_user_count               AS instance_user_count
  FROM mart_ping_instance_metric_monthly
      WHERE ping_delivery_type = 'Self-Managed'
      QUALIFY ROW_NUMBER() OVER (
            PARTITION BY ping_created_date_month, latest_subscription_id, dim_installation_id
              ORDER BY major_minor_version_id DESC) = 1

/*
Deduping the mart to ensure instance_user_count isn't counted 2+ times
*/

), deduped_subscriptions_w_versions AS (

    SELECT
        ping_created_date_month           AS ping_created_date_month,
        dim_installation_id               AS dim_installation_id,
        latest_subscription_id            AS latest_subscription_id,
        ping_edition                      AS ping_edition,
        version_is_prerelease             AS version_is_prerelease,
        major_minor_version_id            AS major_minor_version_id,
        MAX(instance_user_count)          AS instance_user_count
    FROM subscriptions_w_versions
      group by 1,2,3,4,5,6
/*
Get the count of pings each month per subscription_name_slugify
*/

), ping_counts AS (

  SELECT
    ping_created_date_month                     AS ping_created_date_month,
    dim_installation_id                         AS dim_installation_id,
    latest_subscription_id                      AS latest_subscription_id,
    COUNT(DISTINCT(dim_ping_instance_id))       AS ping_count
  FROM mart_ping_instance_metric
      group by 1,2,3

/*
Join subscription information with count of pings
*/

), joined_subscriptions AS (

  SELECT
    deduped_subscriptions_w_versions.*,
    ping_counts.ping_count
  FROM deduped_subscriptions_w_versions
    INNER JOIN ping_counts
  ON deduped_subscriptions_w_versions.ping_created_date_month = ping_counts.ping_created_date_month
    AND deduped_subscriptions_w_versions.latest_subscription_id = ping_counts.latest_subscription_id
    AND deduped_subscriptions_w_versions.dim_installation_id = ping_counts.dim_installation_id
/*
Aggregate mart_charge information (used as the basis of truth), this gets rid of host deviation
*/

), mart_charge_cleaned AS (

  SELECT
       dim_date.date_actual               AS arr_month,
       fct_charge.dim_subscription_id     AS dim_subscription_id,
       SUM(quantity)                      AS licensed_user_count,
       IFF(SUM(arr) > 0, TRUE, FALSE)     AS is_paid_subscription
     FROM fct_charge
     INNER JOIN dim_date
        ON effective_start_month <= dim_date.date_actual
        AND (effective_end_month >= dim_date.date_actual OR effective_end_month IS NULL)
        AND dim_date.day_of_month = 1
     INNER JOIN dim_charge
       ON fct_charge.dim_charge_id = dim_charge.dim_charge_id
     INNER JOIN dim_subscription
       ON fct_charge.dim_subscription_id = dim_subscription.dim_subscription_id
     INNER JOIN dim_product_detail
       ON fct_charge.dim_product_detail_id = dim_product_detail.dim_product_detail_id
      WHERE dim_product_detail.product_delivery_type = 'Self-Managed'
        AND subscription_status IN ('Active','Cancelled')
        AND dim_product_detail.product_tier_name != 'Storage'
        AND DATE_TRUNC('MONTH', CURRENT_DATE) > arr_month
      group by 1,2

/*
Join mart_charge information bringing in mart_charge subscriptions which DO NOT appear in ping fact data
*/

), arr_counts_joined AS (

  SELECT
    mart_charge_cleaned.arr_month                                                                           AS ping_created_date_month,
    joined_subscriptions.dim_installation_id                                                                AS dim_installation_id,
    mart_charge_cleaned.dim_subscription_id                                                                 AS latest_subscription_id,
    joined_subscriptions.ping_edition                                                                       AS ping_edition,
    joined_subscriptions.version_is_prerelease                                                              AS version_is_prerelease,
    joined_subscriptions.major_minor_version_id                                                             AS major_minor_version_id,
    joined_subscriptions.instance_user_count                                                                AS instance_user_count,
    mart_charge_cleaned.licensed_user_count                                                                 AS licensed_user_count,
    mart_charge_cleaned.is_paid_subscription                                                                AS is_paid_subscription,
    joined_subscriptions.ping_count                                                                         AS ping_count,
    FALSE                                                                                                   AS is_missing_charge_subscription
  FROM mart_charge_cleaned
    LEFT OUTER JOIN joined_subscriptions
  ON joined_subscriptions.latest_subscription_id = mart_charge_cleaned.dim_subscription_id
      AND joined_subscriptions.ping_created_date_month = mart_charge_cleaned.arr_month

/*
Grab the latest values to join to missing subs
*/

), latest_mart_charge_values AS (

    SELECT
        dim_subscription_id,
        is_paid_subscription,
        licensed_user_count
    FROM mart_charge_cleaned
        QUALIFY ROW_NUMBER() OVER (
              PARTITION BY dim_subscription_id
              ORDER BY arr_month DESC) = 1

/*
This CTE below grabs the missing installation/subs for each month missing from arr_counts_joined (latest_subs) where there are actual pings from that install/sub combo)
*/

), missing_subs AS (

    SELECT
        ping_created_date_month                 AS ping_created_date_month,
        dim_installation_id                     AS dim_installation_id,
        latest_subscription_id                  AS latest_subscription_id,
        ping_edition                            AS ping_edition,
        version_is_prerelease                   AS version_is_prerelease,
        MAX(major_minor_version_id)             AS major_minor_version_id,
        MAX(instance_user_count)                AS instance_user_count,
        COUNT(DISTINCT(dim_ping_instance_id))   AS ping_count
    FROM mart_ping_instance_metric
        WHERE is_last_ping_of_month = TRUE
          AND CONCAT(latest_subscription_id, to_varchar(ping_created_date_month)) NOT IN
            (SELECT DISTINCT(CONCAT(latest_subscription_id, to_varchar(ping_created_date_month))) FROM arr_counts_joined)
          group by 1,2,3,4,5

/*
Join to capture missing metrics, uses the last value found for these in fct_charge
*/

), missing_subs_joined AS (

    SELECT
        missing_subs.*,
        latest_mart_charge_values.licensed_user_count         AS licensed_user_count,
        latest_mart_charge_values.is_paid_subscription        AS is_paid_subscription,
        TRUE                                                  AS is_missing_charge_subscription
    FROM missing_subs
        INNER JOIN latest_mart_charge_values
    ON missing_subs.latest_subscription_id = latest_mart_charge_values.dim_subscription_id

), latest_subs_unioned AS (

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM arr_counts_joined

        UNION ALL

    SELECT
        ping_created_date_month,
        dim_installation_id,
        latest_subscription_id,
        ping_edition,
        version_is_prerelease,
        major_minor_version_id,
        instance_user_count,
        licensed_user_count,
        is_paid_subscription,
        ping_count,
        is_missing_charge_subscription
    FROM missing_subs_joined

), final AS (

    SELECT
        md5(cast(coalesce(cast(ping_created_date_month as 
    varchar
), '') || '-' || coalesce(cast(latest_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(dim_installation_id as 
    varchar
), '') || '-' || coalesce(cast(ping_edition as 
    varchar
), '') || '-' || coalesce(cast(version_is_prerelease as 
    varchar
), '') as 
    varchar
))                      AS ping_latest_subscriptions_monthly_id,
        latest_subs_unioned.ping_created_date_month                                                                                                                               AS ping_created_date_month,
        latest_subs_unioned.dim_installation_id                                                                                                                                   AS dim_installation_id,
        latest_subs_unioned.latest_subscription_id                                                                                                                                AS latest_subscription_id,
        latest_subs_unioned.ping_edition                                                                                                                                          AS ping_edition,
        latest_subs_unioned.version_is_prerelease                                                                                                                                 AS version_is_prerelease,
        latest_subs_unioned.major_minor_version_id                                                                                                                                AS major_minor_version_id,
        latest_subs_unioned.instance_user_count                                                                                                                                   AS instance_user_count,
        FLOOR(latest_subs_unioned.licensed_user_count)                                                                                                                            AS licensed_user_count,
        latest_subs_unioned.is_paid_subscription                                                                                                                                  AS is_paid_subscription,
        IFNULL(latest_subs_unioned.ping_count, 0)                                                                                                                                 AS ping_count,
        IFF(latest_subs_unioned.ping_edition IS NULL, FALSE, TRUE)                                                                                                                AS has_sent_pings,
        latest_subs_unioned.is_missing_charge_subscription                                                                                                                        AS is_missing_charge_subscription
    FROM latest_subs_unioned
      WHERE ping_created_date_month < DATE_TRUNC('month', CURRENT_DATE)

)

 SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-05-05'::DATE        AS model_created_date,
      '2022-12-15'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM finalc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"rpt_ping_latest_subscriptions_monthly"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","product",{"children":[["$","code",null,{"children":["$","a",null,{"children":"product"}]}],"Â "]}],["$","span","mnpi_exception",{"children":[["$","code",null,{"children":["$","a",null,{"children":"mnpi_exception"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.common_mart_product.rpt_ping_latest_subscriptions_monthly"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"48 MB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 15:09UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"$f"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$L10",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_LATEST_SUBSCRIPTIONS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_LATEST_SUBSCRIPTIONS_MONTHLY_ID":{"type":"TEXT","index":1,"name":"ping_latest_subscriptions_monthly_id","comment":null,"description":"The unique composite ID for the rpt_ping_latest_subscriptions_monthly model consisting of ping_created_date_month, latest_subscription_id, dim_installation_id, ping_edition, and version_is_prerelease","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_latest_subscriptions_monthly_id"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":2,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":3,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":4,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"PING_EDITION":{"type":"TEXT","index":5,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":6,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":7,"name":"major_minor_version_id","comment":null,"description":"The major_minor_version_id of the last ping sent from the installation that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":8,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"LICENSED_USER_COUNT":{"type":"FLOAT","index":9,"name":"licensed_user_count","comment":null,"description":"Count of licensed users (seats) associated with the subscription, calculated using `fct_charge`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"licensed_user_count"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":10,"name":"IS_PAID_SUBSCRIPTION","comment":null,"display_name":"is_paid_subscription"},"PING_COUNT":{"type":"NUMBER","index":11,"name":"ping_count","comment":null,"description":"The count of pings sent by the installation that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_count"},"HAS_SENT_PINGS":{"type":"BOOLEAN","index":12,"name":"has_sent_pings","comment":null,"description":"Boolean flag set to True if installation sent at least 1 ping that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_sent_pings"},"IS_MISSING_CHARGE_SUBSCRIPTION":{"type":"BOOLEAN","index":13,"name":"is_missing_charge_subscription","comment":null,"description":"Boolean flag set to True if a ping associated with the subscription was received during the month, but there is not a corresponding record in `fct_charge`. This can be True in cases of delayed renewals, etc.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_missing_charge_subscription"},"CREATED_BY":{"type":"TEXT","index":14,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":15,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":16,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":17,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":19,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:09UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":50234880,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","raw_sql":"$11","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_ping_metric_first_last_versions","model.gitlab_snowflake.rpt_ping_metric_first_last_versions","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.mart_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.mart_ping_instance_metric","model.gitlab_snowflake.mart_ping_instance_metric","model.gitlab_snowflake.mart_ping_instance_metric_monthly","model.gitlab_snowflake.mart_ping_instance_metric_monthly"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_latest_subscriptions_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_latest_subscriptions_monthly.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_latest_subscriptions_monthly.sql","name":"rpt_ping_latest_subscriptions_monthly","alias":"rpt_ping_latest_subscriptions_monthly","checksum":{"name":"sha256","checksum":"98234131003c88a02dd0ec056fbc5ee19de21b9f241e897a46683567465cb4f6"},"tags":["product","mnpi_exception"],"refs":[["rpt_ping_metric_first_last_versions"],["rpt_ping_metric_first_last_versions"],["mart_charge"],["mart_charge"],["dim_charge"],["dim_charge"],["fct_charge"],["fct_charge"],["dim_subscription"],["dim_subscription"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_date"],["dim_date"],["mart_ping_instance_metric"],["mart_ping_instance_metric"],["mart_ping_instance_metric_monthly"],["mart_ping_instance_metric_monthly"]],"sources":[],"metrics":[],"description":"$12","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_latest_subscriptions_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.1651056,"compiled_sql":"$13","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_latest_subscriptions_monthly","label":"rpt_ping_latest_subscriptions_monthly"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_SUBSCRIPTIONS_ON_VERSIONS_ESTIMATE_FACTORS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_SUBSCRIPTIONS_ON_VERSIONS_ESTIMATE_FACTORS_MONTHLY_ID":{"type":"TEXT","index":1,"name":"ping_subscriptions_on_versions_estimate_factors_monthly_id","comment":null,"description":"The unique composite ID for the rpt_ping_subscriptions_on_versions_estimate_factors_monthly model consisting of ping_created_date_month, metrics_path, ping_edition, and estimation_grain","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_subscriptions_on_versions_estimate_factors_monthly_id"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":2,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"PING_EDITION":{"type":"TEXT","index":4,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"STAGE_NAME":{"type":"TEXT","index":5,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":6,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"GROUP_NAME":{"type":"TEXT","index":7,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"IS_SMAU":{"type":"BOOLEAN","index":8,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":9,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":10,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":11,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"REPORTING_COUNT":{"type":"FLOAT","index":12,"name":"reporting_count","comment":null,"description":"The number of subscriptions or seats that meet the condition described in the estimation_grain. This is either a subscription reporting a metric or a subscription sending a ping from a version with that metric.\n\nExamples: \n- If `estimation_grain = 'metric/version check - subscription based estimation'`, then this is a count of subscriptions that sent a ping from a version with the metric instrumented\n- If `estimation_grain = 'reported metric - seat based estimation'`, then this is a count of seats that reported the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"reporting_count"},"NOT_REPORTING_COUNT":{"type":"FLOAT","index":13,"name":"not_reporting_count","comment":null,"description":"The number of subscriptions or seats that meet the condition described in the estimation_grain. This is either a subscription not sending a ping that month, not sending that particular metric, or sending a ping from a version without that metric (ex. an older version). This is defined as `total_count - reporting_count`\n\nExamples: \n- If `estimation_grain = 'metric/version check - subscription based estimation'`, then this is a count of subscriptions that sent a ping from a version with the metric instrumented (they could be opted out of sending Service Ping or on an older version)\n- If `estimation_grain = 'reported metric - seat based estimation'`, then this is a count of seats that did not report the metric (they could be opted out of sending Service Ping, on an older version, or opted out of sending optional metrics)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"not_reporting_count"},"TOTAL_COUNT":{"type":"FLOAT","index":14,"name":"total_count","comment":null,"description":"The total number of active subscriptions or seats that month, based on the estimation_grain.\n\nExamples:\n- If `estimation_grain = 'metric/version check - subscription based estimation'`, then this is a count of active subscriptions that month\n- If `estimation_grain = 'reported metric - seat based estimation'`, then this is a count of seats associated with active subscriptions that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_count"},"ESTIMATION_GRAIN":{"type":"TEXT","index":15,"name":"estimation_grain","comment":null,"description":"$15","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"estimation_grain"},"PERCENT_REPORTING":{"type":"FLOAT","index":16,"name":"percent_reporting","comment":null,"description":"The percent of total subscriptions or seats that meet the condition described in the estimation_grain. This is calculated using the [`pct_w_counters` macro](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.pct_w_counters) and is defined as `reporting_count / (reporting_count + not_reporting_count)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"percent_reporting"},"CREATED_BY":{"type":"TEXT","index":17,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":18,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":19,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":20,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":21,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":22,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":13227008,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_subscriptions_on_versions_estimate_factors_monthly","raw_sql":"$16","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.pct_w_counters","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.mart_ping_instance_metric_monthly","model.gitlab_snowflake.mart_ping_instance_metric_monthly","model.gitlab_snowflake.rpt_ping_subscriptions_reported_counts_monthly","model.gitlab_snowflake.rpt_ping_subscriptions_reported_counts_monthly","model.gitlab_snowflake.rpt_ping_subscriptions_on_versions_counts_monthly","model.gitlab_snowflake.rpt_ping_subscriptions_on_versions_counts_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_subscriptions_on_versions_estimate_factors_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_subscriptions_on_versions_estimate_factors_monthly.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_subscriptions_on_versions_estimate_factors_monthly.sql","name":"rpt_ping_subscriptions_on_versions_estimate_factors_monthly","alias":"rpt_ping_subscriptions_on_versions_estimate_factors_monthly","checksum":{"name":"sha256","checksum":"41b44aa7024a190c049ff600aea9767bfb642d9ca09cfcef82482b557f0b9f01"},"tags":["product","mnpi_exception"],"refs":[["mart_ping_instance_metric_monthly"],["mart_ping_instance_metric_monthly"],["rpt_ping_subscriptions_reported_counts_monthly"],["rpt_ping_subscriptions_reported_counts_monthly"],["rpt_ping_subscriptions_on_versions_counts_monthly"],["rpt_ping_subscriptions_on_versions_counts_monthly"],["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"],["dim_ping_metric"],["dim_ping_metric"]],"sources":[],"metrics":[],"description":"$17","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_subscriptions_on_versions_estimate_factors_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.1763155,"compiled_sql":"$18","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_subscriptions_on_versions_estimate_factors_monthly","label":"rpt_ping_subscriptions_on_versions_estimate_factors_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_SUBSCRIPTIONS_REPORTED_ESTIMATE_FACTORS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_SUBSCRIPTIONS_REPORTED_ESTIMATE_FACTORS_MONTHLY_ID":{"type":"TEXT","index":1,"name":"ping_subscriptions_reported_estimate_factors_monthly_id","comment":null,"description":"The unique composite ID for the rpt_ping_subscriptions_reported_estimate_factors_monthly model consisting of ping_created_date_month, metrics_path, ping_edition, and estimation_grain","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_subscriptions_reported_estimate_factors_monthly_id"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":2,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"PING_EDITION":{"type":"TEXT","index":4,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"STAGE_NAME":{"type":"TEXT","index":5,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":6,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"GROUP_NAME":{"type":"TEXT","index":7,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"IS_SMAU":{"type":"BOOLEAN","index":8,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":9,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":10,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":11,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"REPORTING_COUNT":{"type":"FLOAT","index":12,"name":"reporting_count","comment":null,"description":"The number of subscriptions or seats that meet the condition described in the estimation_grain. This is either a subscription reporting a metric or a subscription sending a ping from a version with that metric.\n\nExamples: \n- If `estimation_grain = 'metric/version check - subscription based estimation'`, then this is a count of subscriptions that sent a ping from a version with the metric instrumented\n- If `estimation_grain = 'reported metric - seat based estimation'`, then this is a count of seats that reported the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"reporting_count"},"NOT_REPORTING_COUNT":{"type":"FLOAT","index":13,"name":"not_reporting_count","comment":null,"description":"The number of subscriptions or seats that meet the condition described in the estimation_grain. This is either a subscription not sending a ping that month, not sending that particular metric, or sending a ping from a version without that metric (ex. an older version). This is defined as `total_count - reporting_count`\n\nExamples: \n- If `estimation_grain = 'metric/version check - subscription based estimation'`, then this is a count of subscriptions that sent a ping from a version with the metric instrumented (they could be opted out of sending Service Ping or on an older version)\n- If `estimation_grain = 'reported metric - seat based estimation'`, then this is a count of seats that did not report the metric (they could be opted out of sending Service Ping, on an older version, or opted out of sending optional metrics)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"not_reporting_count"},"TOTAL_COUNT":{"type":"FLOAT","index":14,"name":"total_count","comment":null,"description":"The total number of active subscriptions or seats that month, based on the estimation_grain.\n\nExamples:\n- If `estimation_grain = 'metric/version check - subscription based estimation'`, then this is a count of active subscriptions that month\n- If `estimation_grain = 'reported metric - seat based estimation'`, then this is a count of seats associated with active subscriptions that month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_count"},"ESTIMATION_GRAIN":{"type":"TEXT","index":15,"name":"estimation_grain","comment":null,"description":"$19","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"estimation_grain"},"PERCENT_REPORTING":{"type":"FLOAT","index":16,"name":"percent_reporting","comment":null,"description":"The percent of total subscriptions or seats that meet the condition described in the estimation_grain. This is calculated using the [`pct_w_counters` macro](https://dbt.gitlabdata.com/#!/macro/macro.gitlab_snowflake.pct_w_counters) and is defined as `reporting_count / (reporting_count + not_reporting_count)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"percent_reporting"},"CREATED_BY":{"type":"TEXT","index":17,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":18,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":19,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":20,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":21,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":22,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":13574144,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_subscriptions_reported_estimate_factors_monthly","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.pct_w_counters","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.mart_ping_instance_metric_monthly","model.gitlab_snowflake.mart_ping_instance_metric_monthly","model.gitlab_snowflake.rpt_ping_subscriptions_reported_counts_monthly","model.gitlab_snowflake.rpt_ping_subscriptions_reported_counts_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_subscriptions_reported_estimate_factors_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_subscriptions_reported_estimate_factors_monthly.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_subscriptions_reported_estimate_factors_monthly.sql","name":"rpt_ping_subscriptions_reported_estimate_factors_monthly","alias":"rpt_ping_subscriptions_reported_estimate_factors_monthly","checksum":{"name":"sha256","checksum":"1343448e7d92c18455f3e91baa61a9cf77462555298b92e1a4a9a504befd6bb1"},"tags":["product","mnpi_exception"],"refs":[["mart_ping_instance_metric_monthly"],["mart_ping_instance_metric_monthly"],["rpt_ping_subscriptions_reported_counts_monthly"],["rpt_ping_subscriptions_reported_counts_monthly"],["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"]],"sources":[],"metrics":[],"description":"$1b","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_subscriptions_reported_estimate_factors_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.1873372,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_subscriptions_reported_estimate_factors_monthly","label":"rpt_ping_subscriptions_reported_estimate_factors_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_SUBSCRIPTIONS_ON_VERSIONS_COUNTS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_SUBSCRIPTIONS_ON_VERSIONS_COUNTS_MONTHLY_ID":{"type":"TEXT","index":1,"name":"ping_subscriptions_on_versions_counts_monthly_id","comment":null,"description":"The unique composite ID for the rpt_ping_subscriptions_on_versions_counts_monthly model consisting of ping_created_date_month, metrics_path, and ping_edition","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_subscriptions_on_versions_counts_monthly_id"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":2,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"PING_EDITION":{"type":"TEXT","index":4,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"TOTAL_SUBSCRIPTION_COUNT":{"type":"NUMBER","index":5,"name":"total_subscription_count","comment":null,"description":"Count of subscriptions sending a ping from a version of GitLab with the metric instrumented","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_subscription_count"},"TOTAL_LICENSED_USERS":{"type":"FLOAT","index":6,"name":"total_licensed_users","comment":null,"description":"Count of licensed users (seats) associated with subscriptions sending a ping from a version of GitLab with the metric instrumented","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_licensed_users"},"CREATED_BY":{"type":"TEXT","index":7,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":8,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":9,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":10,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":11,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":8256000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_subscriptions_on_versions_counts_monthly","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_ping_metric_first_last_versions","model.gitlab_snowflake.rpt_ping_metric_first_last_versions","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_subscriptions_on_versions_counts_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_subscriptions_on_versions_counts_monthly.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_subscriptions_on_versions_counts_monthly.sql","name":"rpt_ping_subscriptions_on_versions_counts_monthly","alias":"rpt_ping_subscriptions_on_versions_counts_monthly","checksum":{"name":"sha256","checksum":"646b7a99b691c9e44720b0b79536113c4a24426af87d45fe0c5c3d0389506547"},"tags":["product","mnpi_exception"],"refs":[["rpt_ping_metric_first_last_versions"],["rpt_ping_metric_first_last_versions"],["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"]],"sources":[],"metrics":[],"description":"$1e","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_subscriptions_on_versions_counts_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.227691,"compiled_sql":"$1f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_subscriptions_on_versions_counts_monthly","label":"rpt_ping_subscriptions_on_versions_counts_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_SUBSCRIPTIONS_REPORTED_COUNTS_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_SUBSCRIPTIONS_REPORTED_COUNTS_MONTHLY_ID":{"type":"TEXT","index":1,"name":"ping_subscriptions_reported_counts_monthly_id","comment":null,"description":"The unique composite ID for the rpt_ping_subscriptions_reported_counts_monthly model consisting of ping_created_date_month, metrics_path, and ping_edition","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_subscriptions_reported_counts_monthly_id"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":2,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"PING_EDITION":{"type":"TEXT","index":4,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"TOTAL_SUBSCRIPTION_COUNT":{"type":"NUMBER","index":5,"name":"total_subscription_count","comment":null,"description":"Total count of active subscriptions","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_subscription_count"},"TOTAL_LICENSED_USERS":{"type":"FLOAT","index":6,"name":"total_licensed_users","comment":null,"description":"Total count of licensed users (seats) associated with active subscriptions","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_licensed_users"},"CREATED_BY":{"type":"TEXT","index":7,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":8,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":9,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":10,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":11,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6740480,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_subscriptions_reported_counts_monthly","raw_sql":"$20","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.mart_ping_instance_metric","model.gitlab_snowflake.mart_ping_instance_metric"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_subscriptions_reported_counts_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_subscriptions_reported_counts_monthly.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_subscriptions_reported_counts_monthly.sql","name":"rpt_ping_subscriptions_reported_counts_monthly","alias":"rpt_ping_subscriptions_reported_counts_monthly","checksum":{"name":"sha256","checksum":"07c444cffacfe7191af550da97276e1b3526c93c110a5fe3a5dd31bec3ec4ed7"},"tags":["product","mnpi_exception"],"refs":[["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"],["mart_ping_instance_metric"],["mart_ping_instance_metric"]],"sources":[],"metrics":[],"description":"$21","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_subscriptions_reported_counts_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.2216163,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_subscriptions_reported_counts_monthly","label":"rpt_ping_subscriptions_reported_counts_monthly"}],"snapshot":[{"raw_sql":"\n    -- Using dbt updated at field as we want a new set of data everyday.\n    {{\n        config(\n          unique_key='ping_latest_subscriptions_monthly_id',\n          strategy='timestamp',\n          updated_at='dbt_created_at',\n          invalidate_hard_deletes=True\n         )\n    }}\n\n    SELECT\n    {{\n          dbt_utils.star(\n            from=ref('rpt_ping_latest_subscriptions_monthly'),\n            except=['DBT_UPDATED_AT']\n            )\n      }}\n    FROM {{ ref('rpt_ping_latest_subscriptions_monthly') }}\n\n","compiled":true,"resource_type":"snapshot","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly","model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"]},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":["edm_snapshot"],"meta":{},"materialized":"snapshot","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"ping_latest_subscriptions_monthly_id","on_schema_change":"ignore","grants":{},"strategy":"timestamp","target_schema":"snapshots","target_database":"SNOWFLAKE","updated_at":"dbt_created_at","query_tag":"dbt","transient":false,"invalidate_hard_deletes":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null},{"sql":"alter table {{ this }} set DATA_RETENTION_TIME_IN_DAYS = 30","transaction":true,"index":null}],"pre-hook":[]},"database":"SNOWFLAKE","schema":"snapshots","fqn":["gitlab_snowflake","marts","rpt_ping_latest_subscriptions_monthly_snapshot","rpt_ping_latest_subscriptions_monthly_snapshot"],"unique_id":"snapshot.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly_snapshot","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"marts/rpt_ping_latest_subscriptions_monthly_snapshot.sql","original_file_path":"snapshots/marts/rpt_ping_latest_subscriptions_monthly_snapshot.sql","name":"rpt_ping_latest_subscriptions_monthly_snapshot","alias":"rpt_ping_latest_subscriptions_monthly_snapshot","checksum":{"name":"sha256","checksum":"4d772963b4e57f45bb02793d49c5c8519eea4a395d733debc33a1f2951abc524"},"tags":["edm_snapshot"],"refs":[["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"],["rpt_ping_latest_subscriptions_monthly"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":null,"build_path":null,"deferred":false,"unrendered_config":{"post-hook":["{{ mask_model() }}","alter table {{ this }} set DATA_RETENTION_TIME_IN_DAYS = 30"],"query_tag":"dbt","target_database":"{{ env_var('SNOWFLAKE_SNAPSHOT_DATABASE') }}","target_schema":"snapshots","transient":false,"tags":["edm_snapshot"],"unique_key":"ping_latest_subscriptions_monthly_id","strategy":"timestamp","updated_at":"dbt_created_at","invalidate_hard_deletes":true},"created_at":1689033724.3229318,"compiled_sql":"\n    -- Using dbt updated at field as we want a new set of data everyday.\n    \n\n    SELECT\n    \"PING_LATEST_SUBSCRIPTIONS_MONTHLY_ID\",\n  \"PING_CREATED_DATE_MONTH\",\n  \"DIM_INSTALLATION_ID\",\n  \"LATEST_SUBSCRIPTION_ID\",\n  \"PING_EDITION\",\n  \"VERSION_IS_PRERELEASE\",\n  \"MAJOR_MINOR_VERSION_ID\",\n  \"INSTANCE_USER_COUNT\",\n  \"LICENSED_USER_COUNT\",\n  \"IS_PAID_SUBSCRIPTION\",\n  \"PING_COUNT\",\n  \"HAS_SENT_PINGS\",\n  \"IS_MISSING_CHARGE_SUBSCRIPTION\",\n  \"CREATED_BY\",\n  \"UPDATED_BY\",\n  \"MODEL_CREATED_DATE\",\n  \"MODEL_UPDATED_DATE\",\n  \"DBT_CREATED_AT\"\n    FROM \"PROD\".common_mart_product.rpt_ping_latest_subscriptions_monthly\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"SNOWFLAKE\".snapshots.rpt_ping_latest_subscriptions_monthly_snapshot","label":"rpt_ping_latest_subscriptions_monthly_snapshot"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_rpt_ping_latest_subsc_7cf8abb63f738b2326a3185976d45713\") }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"ping_latest_subscriptions_monthly_id","model":"{{ get_where_subquery(ref('rpt_ping_latest_subscriptions_monthly')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"]},"config":{"enabled":true,"alias":"not_null_rpt_ping_latest_subsc_7cf8abb63f738b2326a3185976d45713","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_mart_product","reports","not_null_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id"],"unique_id":"test.gitlab_snowflake.not_null_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id.3bdabdcac4","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_rpt_ping_latest_subsc_7cf8abb63f738b2326a3185976d45713.sql","original_file_path":"models/common_mart_product/reports/schema.yml","name":"not_null_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id","alias":"not_null_rpt_ping_latest_subsc_7cf8abb63f738b2326a3185976d45713","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["rpt_ping_latest_subscriptions_monthly"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/schema.yml/not_null_rpt_ping_latest_subsc_7cf8abb63f738b2326a3185976d45713.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"not_null_rpt_ping_latest_subsc_7cf8abb63f738b2326a3185976d45713"},"created_at":1689033736.4755857,"compiled_sql":"\n    \n    \n\n\n\nselect ping_latest_subscriptions_monthly_id\nfrom \"PROD\".common_mart_product.rpt_ping_latest_subscriptions_monthly\nwhere ping_latest_subscriptions_monthly_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"ping_latest_subscriptions_monthly_id","file_key_name":"models.rpt_ping_latest_subscriptions_monthly","label":"not_null_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_rpt_ping_latest_subscri_6ad6e7c18686a876b0e516d2fb4230cc\") }}","test_metadata":{"name":"unique","kwargs":{"column_name":"ping_latest_subscriptions_monthly_id","model":"{{ get_where_subquery(ref('rpt_ping_latest_subscriptions_monthly')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"]},"config":{"enabled":true,"alias":"unique_rpt_ping_latest_subscri_6ad6e7c18686a876b0e516d2fb4230cc","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_mart_product","reports","unique_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id"],"unique_id":"test.gitlab_snowflake.unique_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id.1847fa3629","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_rpt_ping_latest_subscri_6ad6e7c18686a876b0e516d2fb4230cc.sql","original_file_path":"models/common_mart_product/reports/schema.yml","name":"unique_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id","alias":"unique_rpt_ping_latest_subscri_6ad6e7c18686a876b0e516d2fb4230cc","checksum":{"name":"none","checksum":""},"tags":[],"refs":[["rpt_ping_latest_subscriptions_monthly"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/schema.yml/unique_rpt_ping_latest_subscri_6ad6e7c18686a876b0e516d2fb4230cc.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"unique_rpt_ping_latest_subscri_6ad6e7c18686a876b0e516d2fb4230cc"},"created_at":1689033736.4802792,"compiled_sql":"\n    \n    \n\nselect\n    ping_latest_subscriptions_monthly_id as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".common_mart_product.rpt_ping_latest_subscriptions_monthly\nwhere ping_latest_subscriptions_monthly_id is not null\ngroup by ping_latest_subscriptions_monthly_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"ping_latest_subscriptions_monthly_id","file_key_name":"models.rpt_ping_latest_subscriptions_monthly","label":"unique_rpt_ping_latest_subscriptions_monthly_ping_latest_subscriptions_monthly_id"}]},"node":{"resource_type":"model","name":"rpt_ping_latest_subscriptions_monthly","unique_id":"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L14",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MART_SALES","name":"MART_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CHARGE_ID":{"type":"TEXT","index":1,"name":"dim_charge_id","comment":null,"description":"The unique identifier of a rate plan charge","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_charge_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"RATE_PLAN_NAME":{"type":"TEXT","index":7,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":8,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":9,"name":"RATE_PLAN_CHARGE_DESCRIPTION","comment":null,"display_name":"rate_plan_charge_description"},"CHARGE_TYPE":{"type":"TEXT","index":10,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":11,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":12,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":13,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"EFFECTIVE_START_DATE":{"type":"DATE","index":14,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":15,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":16,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":17,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":18,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":19,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":20,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"SUBSCRIPTION_CREATED_BY_ID":{"type":"TEXT","index":21,"name":"SUBSCRIPTION_CREATED_BY_ID","comment":null,"display_name":"subscription_created_by_id"},"SUBSCRIPTION_UPDATED_BY_ID":{"type":"TEXT","index":22,"name":"SUBSCRIPTION_UPDATED_BY_ID","comment":null,"display_name":"subscription_updated_by_id"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":23,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":24,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":25,"name":"SUBSCRIPTION_START_MONTH","comment":null,"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":26,"name":"SUBSCRIPTION_END_MONTH","comment":null,"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":27,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":28,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":29,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":30,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"TERM_START_DATE":{"type":"DATE","index":31,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":32,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":33,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":34,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":35,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_SALES_TYPE","comment":null,"display_name":"subscription_sales_type"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":37,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":38,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":39,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":40,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":41,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":42,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":43,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":44,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":45,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":46,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":47,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":48,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":49,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":50,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":51,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":52,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":53,"name":"SOLD_TO_COUNTRY","comment":null,"display_name":"sold_to_country"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":54,"name":"BILLING_ACCOUNT_NAME","comment":null,"display_name":"billing_account_name"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":55,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"SSP_CHANNEL":{"type":"TEXT","index":56,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":57,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":58,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":59,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"DIM_CRM_USER_ID":{"type":"TEXT","index":60,"name":"DIM_CRM_USER_ID","comment":null,"display_name":"dim_crm_user_id"},"CRM_USER_SALES_SEGMENT":{"type":"TEXT","index":61,"name":"CRM_USER_SALES_SEGMENT","comment":null,"display_name":"crm_user_sales_segment"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":62,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":63,"name":"CRM_ACCOUNT_NAME","comment":null,"display_name":"crm_account_name"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":64,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":65,"name":"PARENT_CRM_ACCOUNT_NAME","comment":null,"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":66,"name":"PARENT_CRM_ACCOUNT_UPA_COUNTRY","comment":null,"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":67,"name":"PARENT_CRM_ACCOUNT_SALES_SEGMENT","comment":null,"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":68,"name":"PARENT_CRM_ACCOUNT_INDUSTRY","comment":null,"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":69,"name":"PARENT_CRM_ACCOUNT_TERRITORY","comment":null,"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":70,"name":"PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":71,"name":"PARENT_CRM_ACCOUNT_AREA","comment":null,"display_name":"parent_crm_account_area"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":72,"name":"HEALTH_SCORE_COLOR","comment":null,"display_name":"health_score_color"},"HEALTH_NUMBER":{"type":"FLOAT","index":73,"name":"HEALTH_NUMBER","comment":null,"display_name":"health_number"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":74,"name":"IS_JIHU_ACCOUNT","comment":null,"display_name":"is_jihu_account"},"DIM_ORDER_ID":{"type":"TEXT","index":75,"name":"dim_order_id","comment":null,"description":"Unique identifier for an order. Can be used to join to dim_order.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_order_id"},"SUBSCRIPTION_RENEWAL_TYPE":{"type":"TEXT","index":76,"name":"subscription_renewal_type","comment":null,"description":"Calculated field that indicates how a subscription renewal was made. Can be one of 'Auto-Renewal', 'Customer Portal', 'Sales-Assisted' or null when the charge is not related to a subscription renewal.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_renewal_type"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":77,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":78,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"BILLING_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":79,"name":"BILLING_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"billing_account_cohort_month"},"BILLING_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":80,"name":"BILLING_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"billing_account_cohort_quarter"},"CRM_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":81,"name":"CRM_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"crm_account_cohort_month"},"CRM_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":82,"name":"CRM_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"crm_account_cohort_quarter"},"PARENT_ACCOUNT_COHORT_MONTH":{"type":"DATE","index":83,"name":"PARENT_ACCOUNT_COHORT_MONTH","comment":null,"display_name":"parent_account_cohort_month"},"PARENT_ACCOUNT_COHORT_QUARTER":{"type":"DATE","index":84,"name":"PARENT_ACCOUNT_COHORT_QUARTER","comment":null,"display_name":"parent_account_cohort_quarter"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":85,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":86,"name":"PRODUCT_TIER_NAME","comment":null,"display_name":"product_tier_name"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":87,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":88,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"SERVICE_TYPE":{"type":"TEXT","index":89,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":90,"name":"PRODUCT_RATE_PLAN_NAME","comment":null,"display_name":"product_rate_plan_name"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":91,"name":"IS_LICENSED_USER","comment":null,"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":92,"name":"IS_ARPU","comment":null,"display_name":"is_arpu"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":93,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":94,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"SUBSCRIPTION_AMENDMENT_EFFECTIVE_DATE":{"type":"TIMESTAMP_TZ","index":95,"name":"SUBSCRIPTION_AMENDMENT_EFFECTIVE_DATE","comment":null,"display_name":"subscription_amendment_effective_date"},"SUBSCRIPTION_AMENDMENT_TYPE":{"type":"TEXT","index":96,"name":"SUBSCRIPTION_AMENDMENT_TYPE","comment":null,"display_name":"subscription_amendment_type"},"SUBSCRIPTION_AMENDMENT_NAME":{"type":"TEXT","index":97,"name":"SUBSCRIPTION_AMENDMENT_NAME","comment":null,"display_name":"subscription_amendment_name"},"CHARGE_AMENDMENT_TYPE":{"type":"TEXT","index":98,"name":"CHARGE_AMENDMENT_TYPE","comment":null,"display_name":"charge_amendment_type"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":99,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"MRR":{"type":"FLOAT","index":100,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR":{"type":"FLOAT","index":101,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR":{"type":"FLOAT","index":102,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"ARR":{"type":"FLOAT","index":103,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":104,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARR":{"type":"FLOAT","index":105,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":106,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":107,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY":{"type":"FLOAT","index":108,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"DELTA_TCV":{"type":"FLOAT","index":109,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":110,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"CREATED_BY":{"type":"TEXT","index":111,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":112,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":113,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":114,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":115,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":116,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":121374720,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_charge","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_amendment","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_charge","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_crm_user","model.gitlab_snowflake.dim_order","model.gitlab_snowflake.dim_order","model.gitlab_snowflake.dim_order_action","model.gitlab_snowflake.dim_order_action","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mart_sales","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"transient":false,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mart_sales","fqn":["gitlab_snowflake","common_mart_sales","restricted_safe","mart_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_sales/restricted_safe/mart_charge.sql","original_file_path":"models/common_mart_sales/restricted_safe/mart_charge.sql","name":"mart_charge","alias":"mart_charge","checksum":{"name":"sha256","checksum":"32b3e052ca03ccc622c3e5b5b0fe8136c0e2e28e4778bc3017a4b27ca04c6005"},"tags":["safe"],"refs":[["dim_amendment"],["dim_amendment"],["dim_billing_account"],["dim_billing_account"],["dim_charge"],["dim_charge"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_subscription"],["dim_subscription"],["dim_crm_user"],["dim_crm_user"],["dim_order"],["dim_order"],["dim_order_action"],["dim_order_action"],["fct_charge"],["fct_charge"],["prep_billing_account_user"],["prep_billing_account_user"]],"sources":[],"metrics":[],"description":"Model combining Subscription related objects such as product details and rate plan charge details into a mart.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_sales/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_sales/restricted_safe/mart_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mart_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"transient":false},"created_at":1689033765.2524543,"compiled_sql":"$24","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mart_sales.mart_charge","label":"mart_charge"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"DIM_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CHARGE_ID":{"type":"TEXT","index":1,"name":"dim_charge_id","comment":null,"description":"Unique identifier for a rate plan charge in Zuora. These are transactions in Zuora Billing.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","arr"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_charge_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"EFFECTIVE_START_DATE":{"type":"DATE","index":7,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":8,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":9,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":10,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":11,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":12,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":13,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":14,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":15,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"RATE_PLAN_NAME":{"type":"TEXT","index":16,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":18,"name":"rate_plan_charge_description","comment":null,"description":"Description for a rate plan charge in Zuora. This can be used to identify orders that received transition pricing in FY24. Note, the description field will not show a transition pricing tag for sales-assisted orders.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","arr"],"display_name":"rate_plan_charge_description"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":19,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":20,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":21,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":22,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":23,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":24,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":25,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":26,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"CREATED_BY":{"type":"TEXT","index":27,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":28,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":29,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":30,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":31,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":32,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:03UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":77006336,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_charge","raw_sql":"$25","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_charge","model.gitlab_snowflake.prep_charge"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","dimensions_shared","restricted_safe","dim_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/restricted_safe/dim_charge.sql","original_file_path":"models/common/dimensions_shared/restricted_safe/dim_charge.sql","name":"dim_charge","alias":"dim_charge","checksum":{"name":"sha256","checksum":"13e5dc3e03e7fe3b6dad02cb7c8f2ff212492d3f0f2b4f2d25bf1eb692730084"},"tags":["safe"],"refs":[["prep_charge"],["prep_charge"]],"sources":[],"metrics":[],"description":"Dimension table for unique transactions in Zuora Billing. The table only includes recurring charges at this time. Non-recurring charges will be added in a future iteration.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/restricted_safe/dim_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033751.9166045,"compiled_sql":"$26","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.dim_charge","label":"dim_charge"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":6,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":7,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":9,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":10,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":14,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":15,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":16,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":17,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"NAMESPACE_ID":{"type":"TEXT","index":18,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":19,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":20,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":21,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":22,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":23,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":24,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":25,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":26,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":27,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":28,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":29,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":30,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":31,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":32,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":33,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":34,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":35,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"IS_QUESTIONABLE_OPPORTUNITY_MAPPING":{"type":"NUMBER","index":36,"name":"IS_QUESTIONABLE_OPPORTUNITY_MAPPING","comment":null,"display_name":"is_questionable_opportunity_mapping"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":37,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":38,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":39,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":40,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":41,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":42,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":43,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":44,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":45,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":46,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":47,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"TERM_START_DATE":{"type":"DATE","index":48,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":49,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":50,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":51,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":52,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":53,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":54,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":55,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":56,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":57,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":58,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":59,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":60,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"SUBSCRIPTION_COHORT_YEAR":{"type":"DATE","index":61,"name":"SUBSCRIPTION_COHORT_YEAR","comment":null,"display_name":"subscription_cohort_year"},"CREATED_BY":{"type":"TEXT","index":62,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":63,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":64,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":65,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":66,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":67,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"lineage":{"name":"lineage","description":"All the subscriptions subsquent to the primary subscription, separated by commas.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lineage"},"cohort_month":{"name":"cohort_month","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_month"},"cohort_quarter":{"name":"cohort_quarter","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_quarter"},"cohort_year":{"name":"cohort_year","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_year"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":36424192,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_subscription","raw_sql":"$27","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.map_subscription_opportunity","model.gitlab_snowflake.map_subscription_opportunity","model.gitlab_snowflake.map_subscription_lineage","model.gitlab_snowflake.map_subscription_lineage"]},"config":{"enabled":true,"alias":"dim_subscription","schema":"common","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_subscription.sql","original_file_path":"models/common/dimensions_shared/dim_subscription.sql","name":"dim_subscription","alias":"dim_subscription","checksum":{"name":"sha256","checksum":"44a135462088f0caceab046c41bf8e7354f2c148c50ecbee98d6658fddfeda60"},"tags":["mnpi_exception"],"refs":[["prep_amendment"],["prep_amendment"],["prep_subscription"],["prep_subscription"],["map_subscription_opportunity"],["map_subscription_opportunity"],["map_subscription_lineage"],["map_subscription_lineage"]],"sources":[],"metrics":[],"description":"Dimension table representing subscription details. The Zuora subscription is created and maintained as part of the broader Quote Creation business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#3-quote-creation).\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Subscriptions).\n\nThe grain of the table is the version of a Zuora subscription.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"],"alias":"dim_subscription"},"created_at":1689033750.8111765,"compiled_sql":"$28","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_subscription","label":"dim_subscription"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART_PRODUCT","name":"RPT_PING_METRIC_FIRST_LAST_VERSIONS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_METRIC_FIRST_LAST_VERSIONS_ID":{"type":"TEXT","index":1,"name":"ping_metric_first_last_versions_id","comment":null,"description":"The unique composite ID for the rpt_ping_metric_first_last_versions model consisting of metrics_path, ping_edition, and version_is_prerelease","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_metric_first_last_versions_id"},"METRICS_PATH":{"type":"TEXT","index":2,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"PING_EDITION":{"type":"TEXT","index":3,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":4,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"FIRST_MAJOR_MINOR_VERSION_ID_WITH_COUNTER":{"type":"NUMBER","index":5,"name":"first_major_minor_version_id_with_counter","comment":null,"description":"The first (minimum/earliest) major_minor_version_id that sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_major_minor_version_id_with_counter"},"FIRST_MAJOR_MINOR_VERSION_WITH_COUNTER":{"type":"TEXT","index":6,"name":"first_major_minor_version_with_counter","comment":null,"description":"The first (minimum/earliest) major_minor_version that sent a ping containing the metric, easily joined to `dim_gitlab_releases`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_major_minor_version_with_counter"},"FIRST_MAJOR_VERSION_WITH_COUNTER":{"type":"NUMBER","index":7,"name":"first_major_version_with_counter","comment":null,"description":"The first (minimum/earliest) major_version that sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_major_version_with_counter"},"FIRST_MINOR_VERSION_WITH_COUNTER":{"type":"NUMBER","index":8,"name":"first_minor_version_with_counter","comment":null,"description":"The first (minimum/earliest) minor_version that sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_minor_version_with_counter"},"LAST_MAJOR_MINOR_VERSION_ID_WITH_COUNTER":{"type":"NUMBER","index":9,"name":"last_major_minor_version_id_with_counter","comment":null,"description":"The last (maximum/most recent) major_minor_version_id that sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_major_minor_version_id_with_counter"},"LAST_MAJOR_MINOR_VERSION_WITH_COUNTER":{"type":"TEXT","index":10,"name":"last_major_minor_version_with_counter","comment":null,"description":"The last (maximum/most recent) major_minor_version that sent a ping containing the metric, easily joined to `dim_gitlab_releases`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_major_minor_version_with_counter"},"LAST_MAJOR_VERSION_WITH_COUNTER":{"type":"NUMBER","index":11,"name":"last_major_version_with_counter","comment":null,"description":"The last (maximum/most recent) major_version that sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_major_version_with_counter"},"LAST_MINOR_VERSION_WITH_COUNTER":{"type":"NUMBER","index":12,"name":"last_minor_version_with_counter","comment":null,"description":"The last (maximum/most recent) minor_version that sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_minor_version_with_counter"},"DIM_INSTALLATION_COUNT":{"type":"NUMBER","index":13,"name":"dim_installation_count","comment":null,"description":"A count of installations (`COUNT(DISTINCT dim_installation_id)`) that ever sent a ping containing the metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_count"},"CREATED_BY":{"type":"TEXT","index":14,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":15,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":16,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":17,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":19,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:09UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1511424,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_ping_metric_first_last_versions","raw_sql":"$29","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_gitlab_releases","model.gitlab_snowflake.dim_gitlab_releases","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.fct_ping_instance_metric","model.gitlab_snowflake.fct_ping_instance_metric","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance"]},"config":{"enabled":true,"alias":null,"schema":"common_mart_product","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart_product","fqn":["gitlab_snowflake","common_mart_product","reports","rpt_ping_metric_first_last_versions"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart_product/reports/rpt_ping_metric_first_last_versions.sql","original_file_path":"models/common_mart_product/reports/rpt_ping_metric_first_last_versions.sql","name":"rpt_ping_metric_first_last_versions","alias":"rpt_ping_metric_first_last_versions","checksum":{"name":"sha256","checksum":"cd8c64cce6b6e5fb40f20c550be0cef0f7ddc777f3d910bab440f66994856309"},"tags":["product","mnpi_exception"],"refs":[["dim_gitlab_releases"],["dim_gitlab_releases"],["dim_ping_metric"],["dim_ping_metric"],["fct_ping_instance_metric"],["fct_ping_instance_metric"],["dim_ping_instance"],["dim_ping_instance"]],"sources":[],"metrics":[],"description":"$2a","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart_product/reports/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart_product/reports/rpt_ping_metric_first_last_versions.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart_product","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033736.1558137,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart_product.rpt_ping_metric_first_last_versions","label":"rpt_ping_metric_first_last_versions"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CHARGE_ID":{"type":"TEXT","index":1,"name":"dim_charge_id","comment":null,"description":"The unique identifier of a verion of a rate plan charge","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_charge_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"SUBSCRIPTION_CREATED_BY_USER_ID":{"type":"TEXT","index":4,"name":"SUBSCRIPTION_CREATED_BY_USER_ID","comment":null,"display_name":"subscription_created_by_user_id"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":5,"name":"rate_plan_charge_number","comment":null,"description":"A unique number that identifies the charge","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":6,"name":"rate_plan_charge_version","comment":null,"description":"The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":7,"name":"rate_plan_charge_segment","comment":null,"description":"The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"rate_plan_charge_segment"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":8,"name":"dim_product_detail_id","comment":null,"description":"The unique ID of a product rate plan charge","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":9,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_ORDER_ID":{"type":"TEXT","index":14,"name":"dim_order_id","comment":null,"description":"Unique identifier for each order which groups all order actions within an order","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_order_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":15,"name":"effective_start_date_id","comment":null,"description":"Id of the date when the segmented charge starts or started. Use this field to join to dim_date on id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":16,"name":"effective_end_date_id","comment":null,"description":"Id of the date when the segmented charge ends or ended. Use this field to join to dim_date on id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"effective_end_date_id"},"MRR":{"type":"FLOAT","index":17,"name":"mrr","comment":null,"description":"Monthly recurring revenue (MRR) is the amount of recurring charges in a given month. The MRR calculation doesn't include one-time charges nor usage charges.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"mrr"},"PREVIOUS_MRR":{"type":"FLOAT","index":18,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR":{"type":"FLOAT","index":19,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"ARR":{"type":"FLOAT","index":20,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":21,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARR":{"type":"FLOAT","index":22,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":23,"name":"quantity","comment":null,"description":"The default quantity of units","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":24,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY":{"type":"FLOAT","index":25,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"DELTA_TCV":{"type":"FLOAT","index":26,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":27,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"UNIT_OF_MEASURE":{"type":"TEXT","index":28,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"CHARGE_TYPE":{"type":"TEXT","index":29,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":30,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":31,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CREATED_BY":{"type":"TEXT","index":32,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":33,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":34,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":35,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":37,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"subscription_created_by_id":{"name":"subscription_created_by_id","description":"The id of the Zuora user who created the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_created_by_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:03UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":70376448,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_charge","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_charge","model.gitlab_snowflake.prep_charge","model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_amendment"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_financial","restricted_safe","fct_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_financial/restricted_safe/fct_charge.sql","original_file_path":"models/common/facts_financial/restricted_safe/fct_charge.sql","name":"fct_charge","alias":"fct_charge","checksum":{"name":"sha256","checksum":"d89ec90222390d940f970caca04af25743db2bb13b3c089a0c3b472502cc76f3"},"tags":["safe"],"refs":[["prep_charge"],["prep_charge"],["prep_amendment"],["prep_amendment"]],"sources":[],"metrics":[],"description":"Factual table with all rate plan charges coming from subscriptions or an amendment to a subscription.\n\nRate Plan Charges are created as part of the Quote Creation business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#6-invoicing-to-customers).\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Rate-Plan-Charges).\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_financial/restricted_safe/fct_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.180198,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_charge","label":"fct_charge"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"DIM_CRM_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"dim_crm_account_id","comment":null,"description":"Account ID from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","sales_funnel"],"tests":[{"test_name":"dbt_utils.relationships_where","short":"+","label":"dbt_utils.relationships_where({\"to\":\"ref('dim_crm_account')\",\"field\":\"dim_crm_account_id\",\"from_condition\":\"GREATEST(IFNULL(lead_created_date, '1999-01-01'), IFNULL(contact_created_date, '1999-01-01')) <= DATEADD('day', -2, CURRENT_DATE)::DATE\",\"model\":\"{{ get_where_subquery(ref('fct_crm_person')) }}\"})"},{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"dbt_utils.relationships_where","short":"+","label":"dbt_utils.relationships_where({\"to\":\"ref('dim_crm_account')\",\"field\":\"dim_crm_account_id\",\"from_condition\":\"created_date <= DATEADD('day', -3, CURRENT_DATE)::DATE\",\"model\":\"{{ get_where_subquery(ref('fct_crm_opportunity')) }}\"})"}],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_parent_crm_account_id","comment":null,"description":"Ultimate parent account 18 character Salesforce ID","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"DIM_CRM_USER_ID":{"type":"TEXT","index":3,"name":"dim_crm_user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_user_id"},"MERGED_TO_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"merged_to_account_id","comment":null,"description":"For deleted accounts, this is the SFDC account they were merged into","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"merged_to_account_id"},"RECORD_TYPE_ID":{"type":"TEXT","index":5,"name":"record_type_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_type_id"},"MASTER_RECORD_ID":{"type":"TEXT","index":6,"name":"master_record_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"master_record_id"},"DIM_CRM_PERSON_PRIMARY_CONTACT_ID":{"type":"TEXT","index":7,"name":"dim_crm_person_primary_contact_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_person_primary_contact_id"},"CRM_ACCOUNT_OWNER":{"type":"TEXT","index":8,"name":"crm_account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_owner"},"PROPOSED_CRM_ACCOUNT_OWNER":{"type":"TEXT","index":9,"name":"proposed_crm_account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"proposed_crm_account_owner"},"ACCOUNT_OWNER":{"type":"TEXT","index":10,"name":"account_owner","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_owner"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":11,"name":"technical_account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"OWNER_ROLE":{"type":"TEXT","index":12,"name":"owner_role","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_role"},"USER_ROLE_TYPE":{"type":"TEXT","index":13,"name":"user_role_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_role_type"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":14,"name":"parent_crm_account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":15,"name":"parent_crm_account_sales_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT_GROUPED":{"type":"TEXT","index":16,"name":"parent_crm_account_sales_segment_grouped","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment_grouped"},"PARENT_CRM_ACCOUNT_SEGMENT_REGION_STAMPED_GROUPED":{"type":"TEXT","index":17,"name":"parent_crm_account_segment_region_stamped_grouped","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_segment_region_stamped_grouped"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":18,"name":"parent_crm_account_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_BUSINESS_UNIT":{"type":"TEXT","index":19,"name":"parent_crm_account_business_unit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_business_unit"},"PARENT_CRM_ACCOUNT_GEO":{"type":"TEXT","index":20,"name":"parent_crm_account_geo","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_geo"},"PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":21,"name":"parent_crm_account_region","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_region"},"PARENT_CRM_ACCOUNT_AREA":{"type":"TEXT","index":22,"name":"parent_crm_account_area","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_area"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":23,"name":"parent_crm_account_territory","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"PARENT_CRM_ACCOUNT_ROLE_TYPE":{"type":"TEXT","index":24,"name":"parent_crm_account_role_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_role_type"},"PARENT_CRM_ACCOUNT_MAX_FAMILY_EMPLOYEE":{"type":"FLOAT","index":25,"name":"parent_crm_account_max_family_employee","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_max_family_employee"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":26,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_UPA_STATE":{"type":"TEXT","index":27,"name":"parent_crm_account_upa_state","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_state"},"PARENT_CRM_ACCOUNT_UPA_CITY":{"type":"TEXT","index":28,"name":"parent_crm_account_upa_city","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_city"},"PARENT_CRM_ACCOUNT_UPA_STREET":{"type":"TEXT","index":29,"name":"parent_crm_account_upa_street","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_street"},"PARENT_CRM_ACCOUNT_UPA_POSTAL_CODE":{"type":"TEXT","index":30,"name":"parent_crm_account_upa_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_postal_code"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":31,"name":"crm_account_name","comment":null,"description":"Account name from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"CRM_ACCOUNT_EMPLOYEE_COUNT":{"type":"FLOAT","index":32,"name":"crm_account_employee_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_employee_count"},"CRM_ACCOUNT_GTM_STRATEGY":{"type":"TEXT","index":33,"name":"crm_account_gtm_strategy","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_gtm_strategy"},"CRM_ACCOUNT_FOCUS_ACCOUNT":{"type":"TEXT","index":34,"name":"crm_account_focus_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_focus_account"},"CRM_ACCOUNT_OWNER_USER_SEGMENT":{"type":"TEXT","index":35,"name":"crm_account_owner_user_segment","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_owner_user_segment"},"CRM_ACCOUNT_BILLING_COUNTRY":{"type":"TEXT","index":36,"name":"crm_account_billing_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_billing_country"},"CRM_ACCOUNT_BILLING_COUNTRY_CODE":{"type":"TEXT","index":37,"name":"crm_account_billing_country_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_billing_country_code"},"CRM_ACCOUNT_TYPE":{"type":"TEXT","index":38,"name":"crm_account_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_type"},"CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":39,"name":"crm_account_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_industry"},"CRM_ACCOUNT_SUB_INDUSTRY":{"type":"TEXT","index":40,"name":"crm_account_sub_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_sub_industry"},"CRM_ACCOUNT_EMPLOYEE_COUNT_BAND":{"type":"TEXT","index":41,"name":"crm_account_employee_count_band","comment":null,"description":"Employee count band the account belongs to based on the account_max_family_employee. Bands include \"> 2K\", \"> 1.5K\", \"> 1K\".","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_employee_count_band"},"PARTNER_VAT_TAX_ID":{"type":"TEXT","index":42,"name":"partner_vat_tax_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_vat_tax_id"},"ACCOUNT_MANAGER":{"type":"TEXT","index":43,"name":"account_manager","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_manager"},"BUSINESS_DEVELOPMENT_REP":{"type":"TEXT","index":44,"name":"business_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"business_development_rep"},"DEDICATED_SERVICE_ENGINEER":{"type":"TEXT","index":45,"name":"dedicated_service_engineer","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dedicated_service_engineer"},"ACCOUNT_TIER":{"type":"TEXT","index":46,"name":"account_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier"},"ACCOUNT_TIER_NOTES":{"type":"TEXT","index":47,"name":"account_tier_notes","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_tier_notes"},"LICENSE_UTILIZATION":{"type":"FLOAT","index":48,"name":"license_utilization","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_utilization"},"SUPPORT_LEVEL":{"type":"TEXT","index":49,"name":"support_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"support_level"},"NAMED_ACCOUNT":{"type":"BOOLEAN","index":50,"name":"named_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"named_account"},"BILLING_POSTAL_CODE":{"type":"TEXT","index":51,"name":"billing_postal_code","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_postal_code"},"PARTNER_TYPE":{"type":"TEXT","index":52,"name":"partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_type"},"PARTNER_STATUS":{"type":"TEXT","index":53,"name":"partner_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_status"},"GITLAB_CUSTOMER_SUCCESS_PROJECT":{"type":"TEXT","index":54,"name":"gitlab_customer_success_project","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_customer_success_project"},"DEMANDBASE_ACCOUNT_LIST":{"type":"TEXT","index":55,"name":"demandbase_account_list","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_account_list"},"DEMANDBASE_INTENT":{"type":"TEXT","index":56,"name":"demandbase_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_intent"},"DEMANDBASE_PAGE_VIEWS":{"type":"FLOAT","index":57,"name":"demandbase_page_views","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_page_views"},"DEMANDBASE_SCORE":{"type":"TEXT","index":58,"name":"demandbase_score","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_score"},"DEMANDBASE_SESSIONS":{"type":"FLOAT","index":59,"name":"demandbase_sessions","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_sessions"},"DEMANDBASE_TRENDING_OFFSITE_INTENT":{"type":"BOOLEAN","index":60,"name":"demandbase_trending_offsite_intent","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_offsite_intent"},"DEMANDBASE_TRENDING_ONSITE_ENGAGEMENT":{"type":"BOOLEAN","index":61,"name":"demandbase_trending_onsite_engagement","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"demandbase_trending_onsite_engagement"},"IS_LOCALLY_MANAGED_ACCOUNT":{"type":"BOOLEAN","index":62,"name":"is_locally_managed_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_locally_managed_account"},"IS_STRATEGIC_ACCOUNT":{"type":"BOOLEAN","index":63,"name":"is_strategic_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_strategic_account"},"PARTNER_TRACK":{"type":"TEXT","index":64,"name":"partner_track","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_track"},"PARTNERS_PARTNER_TYPE":{"type":"TEXT","index":65,"name":"partners_partner_type","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_partner_type"},"GITLAB_PARTNER_PROGRAM":{"type":"TEXT","index":66,"name":"gitlab_partner_program","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_partner_program"},"ZOOM_INFO_COMPANY_NAME":{"type":"TEXT","index":67,"name":"zoom_info_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_name"},"ZOOM_INFO_COMPANY_REVENUE":{"type":"FLOAT","index":68,"name":"zoom_info_company_revenue","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_revenue"},"ZOOM_INFO_COMPANY_EMPLOYEE_COUNT":{"type":"FLOAT","index":69,"name":"zoom_info_company_employee_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_employee_count"},"ZOOM_INFO_COMPANY_INDUSTRY":{"type":"TEXT","index":70,"name":"zoom_info_company_industry","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_industry"},"ZOOM_INFO_COMPANY_CITY":{"type":"TEXT","index":71,"name":"zoom_info_company_city","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_city"},"ZOOM_INFO_COMPANY_STATE_PROVINCE":{"type":"TEXT","index":72,"name":"zoom_info_company_state_province","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_state_province"},"ZOOM_INFO_COMPANY_COUNTRY":{"type":"TEXT","index":73,"name":"zoom_info_company_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoom_info_company_country"},"ACCOUNT_PHONE":{"type":"TEXT","index":74,"name":"account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_phone"},"ZOOMINFO_ACCOUNT_PHONE":{"type":"TEXT","index":75,"name":"zoominfo_account_phone","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zoominfo_account_phone"},"ABM_TIER":{"type":"TEXT","index":76,"name":"abm_tier","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier"},"HEALTH_NUMBER":{"type":"FLOAT","index":77,"name":"health_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_number"},"HEALTH_SCORE_COLOR":{"type":"TEXT","index":78,"name":"health_score_color","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"health_score_color"},"PARTNER_ACCOUNT_IBAN_NUMBER":{"type":"TEXT","index":79,"name":"partner_account_iban_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partner_account_iban_number"},"GITLAB_COM_USER":{"type":"BOOLEAN","index":80,"name":"gitlab_com_user","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user"},"CRM_ACCOUNT_ZI_TECHNOLOGIES":{"type":"TEXT","index":81,"name":"crm_account_zi_technologies","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zi_technologies"},"CRM_ACCOUNT_ZOOM_INFO_WEBSITE":{"type":"TEXT","index":82,"name":"crm_account_zoom_info_website","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_website"},"CRM_ACCOUNT_ZOOM_INFO_COMPANY_OTHER_DOMAINS":{"type":"TEXT","index":83,"name":"crm_account_zoom_info_company_other_domains","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_company_other_domains"},"CRM_ACCOUNT_ZOOM_INFO_DOZISF_ZI_ID":{"type":"TEXT","index":84,"name":"crm_account_zoom_info_dozisf_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_dozisf_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":85,"name":"crm_account_zoom_info_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_PARENT_COMPANY_NAME":{"type":"TEXT","index":86,"name":"crm_account_zoom_info_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_parent_company_name"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_ZI_ID":{"type":"TEXT","index":87,"name":"crm_account_zoom_info_ultimate_parent_company_zi_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_ultimate_parent_company_zi_id"},"CRM_ACCOUNT_ZOOM_INFO_ULTIMATE_PARENT_COMPANY_NAME":{"type":"TEXT","index":88,"name":"crm_account_zoom_info_ultimate_parent_company_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_zoom_info_ultimate_parent_company_name"},"FORBES_2000_RANK":{"type":"TEXT","index":89,"name":"forbes_2000_rank","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"forbes_2000_rank"},"SALES_DEVELOPMENT_REP":{"type":"TEXT","index":90,"name":"sales_development_rep","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sales_development_rep"},"ADMIN_MANUAL_SOURCE_NUMBER_OF_EMPLOYEES":{"type":"TEXT","index":91,"name":"admin_manual_source_number_of_employees","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_number_of_employees"},"ADMIN_MANUAL_SOURCE_ACCOUNT_ADDRESS":{"type":"TEXT","index":92,"name":"admin_manual_source_account_address","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"admin_manual_source_account_address"},"EOA_SENTIMENT":{"type":"TEXT","index":93,"name":"eoa_sentiment","comment":null,"description":" Red - customer was unhappy with the announcement and there's potential risk of churn\nYellow - customer exhibited some dissatisfaction with the announcement but likely won't churn\nGreen - customer responded favourably to the announcement and is a strong candidate to uptier ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"eoa_sentiment"},"GS_HEALTH_USER_ENGAGEMENT":{"type":"TEXT","index":94,"name":"gs_health_user_engagement","comment":null,"description":" [Customer health score for engaging in meetings, cadence calls, or EBRs](https://about.gitlab.com/handbook/customer-success/customer-health-scoring/#customer-engagement). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_user_engagement"},"GS_HEALTH_CD":{"type":"TEXT","index":95,"name":"gs_health_cd","comment":null,"description":" Customer [health score for CD use case adoption](https://about.gitlab.com/handbook/customer-success/product-usage-data/maturity-scoring/#cd-adoption-scoring). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_cd"},"GS_HEALTH_DEVSECOPS":{"type":"TEXT","index":96,"name":"gs_health_devsecops","comment":null,"description":" Customer [health score for DevSecOps use case adoption](https://about.gitlab.com/handbook/customer-success/product-usage-data/maturity-scoring/#devsecops-adoption-scoring). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_devsecops"},"GS_HEALTH_CI":{"type":"TEXT","index":97,"name":"gs_health_ci","comment":null,"description":" Customer [health score for CI use case adoption](https://about.gitlab.com/handbook/customer-success/product-usage-data/maturity-scoring/#ci-adoption-scoring). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_ci"},"GS_HEALTH_SCM":{"type":"TEXT","index":98,"name":"gs_health_scm","comment":null,"description":" [Customer health score for source code management (SCM) use case adoption](https://about.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/usecase-gtm/version-control-collaboration/#adoption-guide). ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_health_scm"},"RISK_IMPACT":{"type":"TEXT","index":99,"name":"risk_impact","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_impact"},"RISK_REASON":{"type":"TEXT","index":100,"name":"risk_reason","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"risk_reason"},"LAST_TIMELINE_AT_RISK_UPDATE":{"type":"TIMESTAMP_TZ","index":101,"name":"last_timeline_at_risk_update","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_timeline_at_risk_update"},"LAST_AT_RISK_UPDATE_COMMENTS":{"type":"TEXT","index":102,"name":"last_at_risk_update_comments","comment":null,"description":" The most recent Account-level At-Risk Update timeline activity in Gainsight, synced to Salesforce. ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_at_risk_update_comments"},"BDR_PROSPECTING_STATUS":{"type":"TEXT","index":103,"name":"BDR_PROSPECTING_STATUS","comment":null,"display_name":"bdr_prospecting_status"},"PARENT_CRM_ACCOUNT_LAM":{"type":"FLOAT","index":104,"name":"parent_crm_account_lam","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_lam"},"PARENT_CRM_ACCOUNT_LAM_DEV_COUNT":{"type":"FLOAT","index":105,"name":"parent_crm_account_lam_dev_count","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_lam_dev_count"},"CARR_ACCOUNT_FAMILY":{"type":"FLOAT","index":106,"name":"carr_account_family","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_account_family"},"CARR_THIS_ACCOUNT":{"type":"FLOAT","index":107,"name":"carr_this_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"carr_this_account"},"IS_SDR_TARGET_ACCOUNT":{"type":"BOOLEAN","index":108,"name":"is_sdr_target_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sdr_target_account"},"IS_KEY_ACCOUNT":{"type":"BOOLEAN","index":109,"name":"is_key_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_key_account"},"IS_RESELLER":{"type":"BOOLEAN","index":110,"name":"is_reseller","comment":null,"description":"Identify whether a crm_account is a reseller.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","sales_funnel"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_reseller"},"IS_JIHU_ACCOUNT":{"type":"BOOLEAN","index":111,"name":"is_jihu_account","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_jihu_account"},"IS_FIRST_ORDER_AVAILABLE":{"type":"BOOLEAN","index":112,"name":"is_first_order_available","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_order_available"},"IS_ZI_JENKINS_PRESENT":{"type":"NUMBER","index":113,"name":"is_zi_jenkins_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_jenkins_present"},"IS_ZI_SVN_PRESENT":{"type":"NUMBER","index":114,"name":"is_zi_svn_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_svn_present"},"IS_ZI_TORTOISE_SVN_PRESENT":{"type":"NUMBER","index":115,"name":"is_zi_tortoise_svn_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_tortoise_svn_present"},"IS_ZI_GCP_PRESENT":{"type":"NUMBER","index":116,"name":"is_zi_gcp_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_gcp_present"},"IS_ZI_ATLASSIAN_PRESENT":{"type":"NUMBER","index":117,"name":"is_zi_atlassian_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_atlassian_present"},"IS_ZI_GITHUB_PRESENT":{"type":"NUMBER","index":118,"name":"is_zi_github_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_github_present"},"IS_ZI_GITHUB_ENTERPRISE_PRESENT":{"type":"NUMBER","index":119,"name":"is_zi_github_enterprise_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_github_enterprise_present"},"IS_ZI_AWS_PRESENT":{"type":"NUMBER","index":120,"name":"is_zi_aws_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_aws_present"},"IS_ZI_KUBERNETES_PRESENT":{"type":"NUMBER","index":121,"name":"is_zi_kubernetes_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_kubernetes_present"},"IS_ZI_APACHE_SUBVERSION_PRESENT":{"type":"NUMBER","index":122,"name":"is_zi_apache_subversion_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_apache_subversion_present"},"IS_ZI_APACHE_SUBVERSION_SVN_PRESENT":{"type":"NUMBER","index":123,"name":"is_zi_apache_subversion_svn_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_apache_subversion_svn_present"},"IS_ZI_HASHICORP_PRESENT":{"type":"NUMBER","index":124,"name":"is_zi_hashicorp_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_hashicorp_present"},"IS_ZI_AWS_CLOUD_TRAIL_PRESENT":{"type":"NUMBER","index":125,"name":"is_zi_aws_cloud_trail_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_aws_cloud_trail_present"},"IS_ZI_CIRCLE_CI_PRESENT":{"type":"NUMBER","index":126,"name":"is_zi_circle_ci_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_circle_ci_present"},"IS_ZI_BIT_BUCKET_PRESENT":{"type":"NUMBER","index":127,"name":"is_zi_bit_bucket_present","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zi_bit_bucket_present"},"IS_EXCLUDED_FROM_ZOOM_INFO_ENRICH":{"type":"BOOLEAN","index":128,"name":"is_excluded_from_zoom_info_enrich","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_excluded_from_zoom_info_enrich"},"CRM_ACCOUNT_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":129,"name":"crm_account_created_date","comment":null,"description":"The date on which the CRM account was created in SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_created_date"},"ABM_TIER_1_DATE":{"type":"TIMESTAMP_TZ","index":130,"name":"abm_tier_1_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_1_date"},"ABM_TIER_2_DATE":{"type":"TIMESTAMP_TZ","index":131,"name":"abm_tier_2_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_2_date"},"ABM_TIER_3_DATE":{"type":"TIMESTAMP_TZ","index":132,"name":"abm_tier_3_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"abm_tier_3_date"},"GTM_ACCELERATION_DATE":{"type":"TIMESTAMP_TZ","index":133,"name":"gtm_acceleration_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_acceleration_date"},"GTM_ACCOUNT_BASED_DATE":{"type":"TIMESTAMP_TZ","index":134,"name":"gtm_account_based_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_based_date"},"GTM_ACCOUNT_CENTRIC_DATE":{"type":"TIMESTAMP_TZ","index":135,"name":"gtm_account_centric_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gtm_account_centric_date"},"PARTNERS_SIGNED_CONTRACT_DATE":{"type":"DATE","index":136,"name":"partners_signed_contract_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"partners_signed_contract_date"},"TECHNICAL_ACCOUNT_MANAGER_DATE":{"type":"DATE","index":137,"name":"technical_account_manager_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager_date"},"CUSTOMER_SINCE_DATE":{"type":"DATE","index":138,"name":"customer_since_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_since_date"},"NEXT_RENEWAL_DATE":{"type":"TIMESTAMP_TZ","index":139,"name":"next_renewal_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"next_renewal_date"},"GS_FIRST_VALUE_DATE":{"type":"TIMESTAMP_TZ","index":140,"name":"gs_first_value_date","comment":null,"description":" Date when the account reached 10% of license utiliztion. The goal is to reach this within 30 days. ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_first_value_date"},"GS_LAST_CSM_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":141,"name":"gs_last_csm_activity_date","comment":null,"description":" Last time the CSM had contact with the customer. ","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gs_last_csm_activity_date"},"CREATED_BY_NAME":{"type":"TEXT","index":142,"name":"created_by_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by_name"},"LAST_MODIFIED_BY_NAME":{"type":"TEXT","index":143,"name":"last_modified_by_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_modified_by_name"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":144,"name":"last_modified_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_modified_date"},"LAST_ACTIVITY_DATE":{"type":"TIMESTAMP_TZ","index":145,"name":"last_activity_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_activity_date"},"IS_DELETED":{"type":"BOOLEAN","index":146,"name":"is_deleted","comment":null,"description":"Flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"PTE_SCORE":{"type":"NUMBER","index":147,"name":"pte_score","comment":null,"description":"Propensity to expand scores from pte_scores_source","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pte_score"},"PTE_DECILE":{"type":"NUMBER","index":148,"name":"pte_decile","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pte_decile"},"PTE_SCORE_GROUP":{"type":"NUMBER","index":149,"name":"pte_score_group","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"pte_score_group"},"PTC_SCORE":{"type":"NUMBER","index":150,"name":"ptc_score","comment":null,"description":"Propensity to contract and churn scores from ptc_scores_source","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptc_score"},"PTC_DECILE":{"type":"NUMBER","index":151,"name":"ptc_decile","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptc_decile"},"PTC_SCORE_GROUP":{"type":"NUMBER","index":152,"name":"ptc_score_group","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ptc_score_group"},"CREATED_BY":{"type":"TEXT","index":153,"name":"created_by","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":154,"name":"updated_by","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":155,"name":"model_created_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":156,"name":"model_updated_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":157,"name":"dbt_updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":158,"name":"dbt_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":69577728,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_crm_account","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model","macro.gitlab_snowflake.missing_member_column"],"nodes":["model.gitlab_snowflake.prep_crm_account","model.gitlab_snowflake.prep_crm_account"]},"config":{"enabled":true,"alias":"dim_crm_account","schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null},{"sql":"{{ missing_member_column(primary_key = 'dim_crm_account_id', not_null_test_cols = ['is_reseller']) }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","dimensions_shared","restricted_safe","dim_crm_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/restricted_safe/dim_crm_account.sql","original_file_path":"models/common/dimensions_shared/restricted_safe/dim_crm_account.sql","name":"dim_crm_account","alias":"dim_crm_account","checksum":{"name":"sha256","checksum":"826460cc404a35e0194800d84ecc908ea8b1d4280f9a6190fe0fab28bb7e3456"},"tags":["safe"],"refs":[["prep_crm_account"],["prep_crm_account"]],"sources":[],"metrics":[],"description":"Dimensional customer table representing all existing and historical customers from SalesForce. There are customer definitions for external reporting and additional customer definitions for internal reporting defined in the [handbook](https://about.gitlab.com/handbook/sales/#customer).\n\nThe Customer Account Management business process can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#1-customer-account-management-and-conversion-of-lead-to-opportunity).\n\nThe grain of the table is the SalesForce Account, also referred to as `DIM_CRM_ACCOUNT_ID`.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/restricted_safe/dim_crm_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ missing_member_column(primary_key = 'dim_crm_account_id', not_null_test_cols = ['is_reseller']) }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true,"alias":"dim_crm_account"},"created_at":1689033752.0030825,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.dim_crm_account","label":"dim_crm_account"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"NUMBER","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"MONTHLY_METRIC_VALUE":{"type":"NUMBER","index":5,"name":"monthly_metric_value","comment":null,"description":"For 28 day metrics, this is the metric value that comes directly from the ping payload. For all-time metrics, this is a calculation using the monthly_all_time_metric_calc macro. The macro calculates an installation-level MoM difference in metric value, attempting to create a monthly version of an all-time counter.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"monthly_metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":6,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":8,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":9,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":10,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":11,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":14,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":15,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":16,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":17,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":18,"name":"ping_deployment_type","comment":null,"description":"Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":19,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":21,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":22,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":23,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":24,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":25,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":26,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":27,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":28,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":29,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":30,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":31,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":32,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":33,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":34,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":35,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":36,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":37,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":38,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":39,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":40,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":41,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":42,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":43,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":45,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":47,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":48,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":49,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":50,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":51,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":52,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":53,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":54,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":55,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"CREATED_BY":{"type":"TEXT","index":56,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":57,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":58,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":59,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 14:19UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":241528479744,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric_monthly","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_ping_instance","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.fct_charge","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_hosts","model.gitlab_snowflake.dim_hosts","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_location_country","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_ping_metric","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.fct_ping_instance_metric_monthly","model.gitlab_snowflake.fct_ping_instance_metric_monthly","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric_monthly.sql","original_file_path":"models/common_mart/mart_ping_instance_metric_monthly.sql","name":"mart_ping_instance_metric_monthly","alias":"mart_ping_instance_metric_monthly","checksum":{"name":"sha256","checksum":"efb43703c880fc151f81362920cc041b147afcaa49da14abe4e8c679fd73d841"},"tags":["product","mnpi_exception"],"refs":[["dim_ping_instance"],["dim_ping_instance"],["dim_product_tier"],["dim_product_tier"],["dim_date"],["dim_date"],["dim_billing_account"],["dim_billing_account"],["dim_crm_account"],["dim_crm_account"],["dim_product_detail"],["dim_product_detail"],["fct_charge"],["fct_charge"],["dim_license"],["dim_license"],["dim_hosts"],["dim_hosts"],["dim_location_country"],["dim_location_country"],["dim_ping_metric"],["dim_ping_metric"],["dim_subscription"],["dim_subscription"],["fct_ping_instance_metric_monthly"],["fct_ping_instance_metric_monthly"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"$31","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.600816,"compiled_sql":"$32","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric_monthly","label":"mart_ping_instance_metric_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_BILLING_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_SK":{"type":"TEXT","index":1,"name":"dim_billing_account_sk","comment":null,"description":"A surrogate key that uniquely identifes each row of the billing account table.  It is currently formed by hashing the billing account IDs from Zuora that uniquely identify a Zuora account associated with a given Subscription ID. This is built as a conceptual [dimension](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/dimension-table-structure/) and can be used to build a dimension table to limit the number of columns on a fact table.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_billing_account_sk"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_billing_account_id","comment":null,"description":"The unique identifier of the Zuora account associated with a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_crm_account_id","comment":null,"description":"The customer account ID for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":4,"name":"billing_account_number","comment":null,"description":"A unique Zuora account number","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_number"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":5,"name":"billing_account_name","comment":null,"description":"The name of the Zuora account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_name"},"ACCOUNT_STATUS":{"type":"TEXT","index":6,"name":"account_status","comment":null,"description":"The status of the account in the system. Can be draft, active, cancelled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_status"},"PARENT_ID":{"type":"TEXT","index":7,"name":"parent_id","comment":null,"description":"The identifier of the parent customer account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"CRM_ACCOUNT_CODE":{"type":"TEXT","index":8,"name":"crm_account_code","comment":null,"description":"The code for the sfdc account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_code"},"CRM_ENTITY":{"type":"TEXT","index":9,"name":"crm_entity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_entity"},"ACCOUNT_CURRENCY":{"type":"TEXT","index":10,"name":"account_currency","comment":null,"description":"A currency as defined in Billing Settings in the Zuora UI","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_currency"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":11,"name":"sold_to_country","comment":null,"description":"The country of the sold to contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sold_to_country"},"SSP_CHANNEL":{"type":"TEXT","index":12,"name":"ssp_channel","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":13,"name":"po_required","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":14,"name":"auto_pay","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":15,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"IS_DELETED":{"type":"BOOLEAN","index":16,"name":"is_deleted","comment":null,"description":"The flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"BATCH":{"type":"TEXT","index":17,"name":"batch","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"batch"},"RECORD_DATA_SOURCE":{"type":"TEXT","index":18,"name":"record_data_source","comment":null,"description":"An indicator flag to identify if the record exists in Zuora or CDot or in both the sources. This column can be used to identify any missing records or data sync issues in both the sources","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_data_source"},"CREATED_BY":{"type":"TEXT","index":19,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":20,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":21,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":22,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":24,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:03UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6400512,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_billing_account","raw_sql":"$33","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_billing_account","model.gitlab_snowflake.prep_billing_account"]},"config":{"enabled":true,"alias":"dim_billing_account","schema":"common","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_billing_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_billing_account.sql","original_file_path":"models/common/dimensions_shared/dim_billing_account.sql","name":"dim_billing_account","alias":"dim_billing_account","checksum":{"name":"sha256","checksum":"4ad3fe77e658a786a78f08bca51c1da7f0bd485da110df64f9faa656183a5487"},"tags":["mnpi_exception"],"refs":[["prep_billing_account"],["prep_billing_account"]],"sources":[],"metrics":[],"description":"Dimensional table representing each individual Zuora account with details of person to bill for the account.\n\nThe Zuora account creation and maintenance is part of the broader Quote Creation business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#3-quote-creation).\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Accounts).\n\nThe grain of the table is the Zuora Account.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_billing_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"],"alias":"dim_billing_account"},"created_at":1689033750.5598338,"compiled_sql":"$34","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_billing_account","label":"dim_billing_account"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_PRODUCT_DETAIL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":1,"name":"dim_product_detail_id","comment":null,"description":"The unique ID of each row in dim_product_detail, based on product rate plan charge ID.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_detail_id"},"PRODUCT_ID":{"type":"TEXT","index":2,"name":"product_id","comment":null,"description":"The ID of the product that contains the product rate plan.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_id"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":3,"name":"dim_product_tier_id","comment":null,"description":"The unique ID of a product tier determined in dim_product_tier.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_tier_id"},"PRODUCT_RATE_PLAN_ID":{"type":"TEXT","index":4,"name":"PRODUCT_RATE_PLAN_ID","comment":null,"display_name":"product_rate_plan_id"},"PRODUCT_RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":5,"name":"product_rate_plan_charge_id","comment":null,"description":"The unique ID of a product rate plan charge","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_charge_id"},"PRODUCT_RATE_PLAN_NAME":{"type":"TEXT","index":6,"name":"product_rate_plan_name","comment":null,"description":"The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name"},"PRODUCT_RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":7,"name":"product_rate_plan_charge_name","comment":null,"description":"The name of the product rate plan charge","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_charge_name"},"PRODUCT_NAME":{"type":"TEXT","index":8,"name":"product_name","comment":null,"description":"The name of the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_name"},"PRODUCT_SKU":{"type":"TEXT","index":9,"name":"product_sku","comment":null,"description":"The unique SKU for the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_sku"},"PRODUCT_TIER_HISTORICAL":{"type":"TEXT","index":10,"name":"product_tier_historical","comment":null,"description":"Product pricing tiers prior to [tier renaming](https://gitlab-com.gitlab.io/packaging-and-pricing/pricing-handbook/handbook/renaming_tiers/) (early 2021).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_historical"},"PRODUCT_TIER_HISTORICAL_SHORT":{"type":"TEXT","index":11,"name":"product_tier_historical_short","comment":null,"description":"Pulls the product tier from `product_tier_historical` with the delivery type removed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_historical_short"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":12,"name":"product_tier_name","comment":null,"description":"Product [pricing tiers](https://about.gitlab.com/handbook/marketing/strategic-marketing/tiers/) for both SaaS and Self-Managed customers. Includes the mapping from SaaS - Silver to SaaS - Premium, and from SaaS - Gold to SaaS - Ultimate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name"},"PRODUCT_TIER_NAME_SHORT":{"type":"TEXT","index":13,"name":"product_tier_name_short","comment":null,"description":"Pulls the product tier from `product_tier_name` with the delivery type removed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_short"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":14,"name":"PRODUCT_DELIVERY_TYPE","comment":null,"display_name":"product_delivery_type"},"PRODUCT_DEPLOYMENT_TYPE":{"type":"TEXT","index":15,"name":"product_deployment_type","comment":null,"description":"How a product is deployed to the customer; Self-Managed, GitLab.com or Dedicated (or Other).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_deployment_type"},"SERVICE_TYPE":{"type":"TEXT","index":16,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"IS_REPORTER_LICENSE":{"type":"BOOLEAN","index":17,"name":"is_reporter_license","comment":null,"description":"Reporter licenses are in the Products with 'Additional Permission Types' in the name.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_reporter_license"},"EFFECTIVE_START_DATE":{"type":"TIMESTAMP_TZ","index":18,"name":"effective_start_date","comment":null,"description":"The date when the product becomes available and can be subscribed to","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"TIMESTAMP_TZ","index":19,"name":"effective_end_date","comment":null,"description":"The date when the product expires and can't be subscribed to anymore","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"effective_end_date"},"PRODUCT_RANKING":{"type":"NUMBER","index":20,"name":"PRODUCT_RANKING","comment":null,"display_name":"product_ranking"},"IS_OSS_OR_EDU_RATE_PLAN":{"type":"BOOLEAN","index":21,"name":"is_oss_or_edu_rate_plan","comment":null,"description":"Flag for rate plans containing OSS or EDU","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_oss_or_edu_rate_plan"},"BILLING_LIST_PRICE":{"type":"FLOAT","index":22,"name":"billing_list_price","comment":null,"description":"The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_list_price"},"ANNUAL_BILLING_LIST_PRICE":{"type":"FLOAT","index":23,"name":"ANNUAL_BILLING_LIST_PRICE","comment":null,"display_name":"annual_billing_list_price"},"IS_LICENSED_USER":{"type":"BOOLEAN","index":24,"name":"is_licensed_user","comment":null,"description":"Flag to identify licensed users. It works by excluding `Storage` product_tier.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_licensed_user"},"IS_ARPU":{"type":"BOOLEAN","index":25,"name":"is_arpu","comment":null,"description":"Flag to identify what counts towards Annual Revenue Per User (ARPU). It works by excluding `Storage` product_tier and `EDU` product_rate_plan.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_arpu"},"CREATED_BY":{"type":"TEXT","index":26,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":27,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":28,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":29,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":30,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":31,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:05UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":347136,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_product_detail","raw_sql":"$35","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_product_detail","model.gitlab_snowflake.prep_product_detail"]},"config":{"enabled":true,"alias":"dim_product_detail","schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_product_detail"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_product_detail.sql","original_file_path":"models/common/dimensions_shared/dim_product_detail.sql","name":"dim_product_detail","alias":"dim_product_detail","checksum":{"name":"sha256","checksum":"c4afb46ac4541417a2f36b846de561132d635911b6a6d00f61935820dc83a64b"},"tags":[],"refs":[["prep_product_detail"],["prep_product_detail"]],"sources":[],"metrics":[],"description":"Dimensional table representing GitLab's Product Catalog. The Product Catalog is created and maintained through the Price Master Management business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#2-price-master-management).\n\nThe Rate Plan Charge that is created on a customer account and subscription inherits its value from the Product Catalog.\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Product-Rate-Plan-Charges).\n\nThe grain of the table is the Product Rate Plan Charge.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_product_detail.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"dim_product_detail"},"created_at":1689033750.7488418,"compiled_sql":"$36","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_product_detail","label":"dim_product_detail"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_MART","name":"MART_PING_INSTANCE_METRIC","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the mart_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ping_instance_metric_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":2,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"VARIANT","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":6,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":7,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":8,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":9,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"LATEST_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"latest_subscription_id","comment":null,"description":"The latest child `dim_subscription_id` of the subscription linked to the license","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"latest_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"The identifier of the Zuora account associated with the subscription, easily joined to `dim_billing_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"MAJOR_MINOR_VERSION_ID":{"type":"NUMBER","index":13,"name":"major_minor_version_id","comment":null,"description":"The id of the major minor version, defined as `major_version*100 + minor_version`. For example, for 13.6.2, the `major_minor_version_id` is 1306. This id is intended to facilitate easy filtering on versions. To be replaced with `major_minor_version_num`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version_id"},"DIM_HOST_ID":{"type":"NUMBER","index":14,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"HOST_NAME":{"type":"TEXT","index":15,"name":"host_name","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"host_name"},"PING_DELIVERY_TYPE":{"type":"TEXT","index":16,"name":"ping_delivery_type","comment":null,"description":"How the product is delivered to the installation (Self-Managed, SaaS). Currently, GitLab Dedicated installations are assigned a delivery type of `Self-Managed`. `ping_delivery_type` is determined using dim_instance_id/uuid and is defined as \n\n``` sql\nCASE\n  WHEN dim_instance_id = 'ea8bf810-1d6f-4a6a-b4fd-93e8cbd8b57f' THEN 'SaaS' --dim_instance_id is synonymous with uuid\n  ELSE 'Self-Managed'\nEND AS ping_delivery_type\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_delivery_type"},"PING_DEPLOYMENT_TYPE":{"type":"TEXT","index":17,"name":"ping_deployment_type","comment":null,"description":" Indicates whether the ping comes from a GitLab.com, SaaS Dedicated or Self-Managed instance.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_deployment_type"},"PING_EDITION":{"type":"TEXT","index":18,"name":"ping_edition","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition"},"PING_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"ping_product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_product_tier"},"PING_EDITION_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"ping_edition_product_tier","comment":null,"description":"The concatenation of `ping_edition` and `ping_product_tier` (ex. `EE - Premium`, `EE - Ultimate`, `EE - Core`, etc). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_edition_product_tier"},"MAJOR_VERSION":{"type":"NUMBER","index":21,"name":"major_version","comment":null,"description":"The major version of GitLab on the installation. For example, for 13.6.2, `major_version` is 13. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_version"},"MINOR_VERSION":{"type":"NUMBER","index":22,"name":"minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"minor_version"},"MAJOR_MINOR_VERSION":{"type":"TEXT","index":23,"name":"major_minor_version","comment":null,"description":"The minor version of GitLab on the installation. For example, for 13.6.2, `minor_version` is 6. See details [here](https://docs.gitlab.com/ee/policy/maintenance.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"major_minor_version"},"VERSION_IS_PRERELEASE":{"type":"BOOLEAN","index":24,"name":"version_is_prerelease","comment":null,"description":"Boolean flag which is set to True if the version is a pre-release Version of the GitLab App. See more details [here](https://docs.gitlab.com/ee/policy/maintenance.html). This is defined as `IFF(version ILIKE '%-pre', TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"version_is_prerelease"},"IS_INTERNAL":{"type":"BOOLEAN","index":25,"name":"is_internal","comment":null,"description":"Boolean flag set to True if the installation meets our defined \"internal\" criteria. However, this field seems to also capture some Self-Managed customers, so the best way to identify a gitlab.com installation is using `ping_delivery_type = 'SaaS'`. `is_internal` is defined as\n\n``` sql\nCASE\n  WHEN ping_delivery_type = 'SaaS'                  THEN TRUE\n  WHEN installation_type = 'gitlab-development-kit' THEN TRUE\n  WHEN hostname = 'gitlab.com'                      THEN TRUE\n  WHEN hostname ILIKE '%.gitlab.com'                THEN TRUE\n  ELSE FALSE \nEND AS is_internal \n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_internal"},"IS_STAGING":{"type":"BOOLEAN","index":26,"name":"is_staging","comment":null,"description":"Boolean flag which is set to True if the installations meets our defined \"staging\" criteria (i.e., `staging` is in the host name). This is a directional identification and is not exhaustive of all staging installations. `is_staging` is defined as\n\n``` sql\nCASE\n  WHEN hostname ILIKE 'staging.%' THEN TRUE\n  WHEN hostname IN (\n    'staging.gitlab.com',\n    'dr.gitlab.com'\n    )                             THEN TRUE\n  ELSE FALSE \nEND AS is_staging\n```","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_staging"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"UMAU_VALUE":{"type":"NUMBER","index":28,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"GROUP_NAME":{"type":"TEXT","index":29,"name":"group_name","comment":null,"description":"The name of the [product group](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. code_review, project_management, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"group_name"},"STAGE_NAME":{"type":"TEXT","index":30,"name":"stage_name","comment":null,"description":"The name of the [product stage](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/stages.yml) (ex. secure, plan, create, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"SECTION_NAME":{"type":"TEXT","index":31,"name":"section_name","comment":null,"description":"The name of the [product section](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/sections.yml) (ex. dev, ops, etc)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"section_name"},"IS_SMAU":{"type":"BOOLEAN","index":32,"name":"is_smau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the stage's SMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_smau"},"IS_GMAU":{"type":"BOOLEAN","index":33,"name":"is_gmau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the group's GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gmau"},"IS_PAID_GMAU":{"type":"BOOLEAN","index":34,"name":"is_paid_gmau","comment":null,"description":"Boolean flag set to True if the metric (Service Ping data) is chosen for the group's paid GMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_gmau"},"IS_UMAU":{"type":"BOOLEAN","index":35,"name":"is_umau","comment":null,"description":"Boolean flag set to True if the event (gitlab.com db data) or metric (Service Ping data) is chosen for the UMAU metric","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_umau"},"TIME_FRAME":{"type":"TEXT","index":36,"name":"time_frame","comment":null,"description":"The [time frame](https://docs.gitlab.com/ee/development/service_ping/metrics_dictionary.html#metric-time_frame) associated with the metric, as defined in the metric definition YAML file. May be set to `7d`, `28d`, `all`, `none`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"time_frame"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":37,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"ORIGINAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":38,"name":"original_subscription_name_slugify","comment":null,"description":"If a subscription is linked to the license, slugified name of the subscription, easily joined to `dim_subscription`, etc","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"original_subscription_name_slugify"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":39,"name":"subscription_start_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license started","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":40,"name":"subscription_end_month","comment":null,"description":"The first day of the calendar month when the subscription linked to the license is supposed to end according to last agreed terms","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"PRODUCT_CATEGORY_ARRAY":{"type":"ARRAY","index":41,"name":"product_category_array","comment":null,"description":"An array containing all of the product tier names associated associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_category_array"},"PRODUCT_RATE_PLAN_NAME_ARRAY":{"type":"ARRAY","index":42,"name":"product_rate_plan_name_array","comment":null,"description":"An array containing all of the product rate plan names associated with the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_name_array"},"IS_PAID_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"is_paid_subscription","comment":null,"description":"Boolean flag set to True if the subscription has a MRR > 0 on the month of ping creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_paid_subscription"},"IS_PROGRAM_SUBSCRIPTION":{"type":"BOOLEAN","index":44,"name":"is_program_subscription","comment":null,"description":"Boolean flag set to True if the subscription is under an EDU or OSS Program. This is defined as `IFF(product_rate_plan_name ILIKE ANY ('%edu%', '%oss%'), TRUE, FALSE)`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_program_subscription"},"CRM_ACCOUNT_NAME":{"type":"TEXT","index":45,"name":"crm_account_name","comment":null,"description":"The name of the crm account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_account_name"},"PARENT_CRM_ACCOUNT_NAME":{"type":"TEXT","index":46,"name":"parent_crm_account_name","comment":null,"description":"The name of the ultimate parent account coming from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_name"},"PARENT_CRM_ACCOUNT_UPA_COUNTRY":{"type":"TEXT","index":47,"name":"parent_crm_account_upa_country","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_upa_country"},"PARENT_CRM_ACCOUNT_SALES_SEGMENT":{"type":"TEXT","index":48,"name":"parent_crm_account_sales_segment","comment":null,"description":"The sales segment of the ultimate parent account from SFDC. Sales Segments are explained [here](https://about.gitlab.com/handbook/sales/field-operations/gtm-resources/#segmentation)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_sales_segment"},"PARENT_CRM_ACCOUNT_INDUSTRY":{"type":"TEXT","index":49,"name":"parent_crm_account_industry","comment":null,"description":"The industry of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_industry"},"PARENT_CRM_ACCOUNT_TERRITORY":{"type":"TEXT","index":50,"name":"parent_crm_account_territory","comment":null,"description":"The sales territory of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_territory"},"TECHNICAL_ACCOUNT_MANAGER":{"type":"TEXT","index":51,"name":"technical_account_manager","comment":null,"description":"The name of the technical account manager of the CRM account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"technical_account_manager"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":52,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"PING_CREATED_DATE_MONTH":{"type":"DATE","index":53,"name":"ping_created_date_month","comment":null,"description":"The first day of the calendar month when the ping was created (YYYY-MM-01)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_month"},"IS_LAST_PING_OF_MONTH":{"type":"BOOLEAN","index":54,"name":"is_last_ping_of_month","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar month (defined by `ping_created_at`)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_month"},"PING_CREATED_DATE_WEEK":{"type":"DATE","index":55,"name":"ping_created_date_week","comment":null,"description":"The first day of the calendar week when the ping was created (YYYY-MM-DOW)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date_week"},"IS_LAST_PING_OF_WEEK":{"type":"BOOLEAN","index":56,"name":"is_last_ping_of_week","comment":null,"description":"Boolean flag set to True if this is the installation's (defined by `dim_installation_id`) last ping of the calendar week (defined by `ping_created_at`). This field leverages `first_day_of_week` from `common.dim_date`, which defines a week as starting on Sunday and ending on Saturday.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_ping_of_week"},"CREATED_BY":{"type":"TEXT","index":57,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"parent_crm_account_owner_team":{"name":"parent_crm_account_owner_team","description":"The owner team of the ultimate parent account from SFDC","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_crm_account_owner_team"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 15:05UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":996379399168,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.mart_ping_instance_metric","raw_sql":"$37","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.mart_ping_instance_metric_7_day","model.gitlab_snowflake.mart_ping_instance_metric_7_day","model.gitlab_snowflake.mart_ping_instance_metric_7_day","model.gitlab_snowflake.mart_ping_instance_metric_7_day","model.gitlab_snowflake.mart_ping_instance_metric_28_day","model.gitlab_snowflake.mart_ping_instance_metric_28_day","model.gitlab_snowflake.mart_ping_instance_metric_28_day","model.gitlab_snowflake.mart_ping_instance_metric_28_day","model.gitlab_snowflake.mart_ping_instance_metric_all_time","model.gitlab_snowflake.mart_ping_instance_metric_all_time","model.gitlab_snowflake.mart_ping_instance_metric_all_time","model.gitlab_snowflake.mart_ping_instance_metric_all_time"]},"config":{"enabled":true,"alias":null,"schema":"common_mart","database":"PROD","tags":["product","product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mart","fqn":["gitlab_snowflake","common_mart","mart_ping_instance_metric"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mart/mart_ping_instance_metric.sql","original_file_path":"models/common_mart/mart_ping_instance_metric.sql","name":"mart_ping_instance_metric","alias":"mart_ping_instance_metric","checksum":{"name":"sha256","checksum":"0bff179546a6e4c6ed482b557c7c701e835d5481019984302a617816c5f5eb4c"},"tags":["product","mnpi_exception"],"refs":[["mart_ping_instance_metric_7_day"],["mart_ping_instance_metric_7_day"],["mart_ping_instance_metric_7_day"],["mart_ping_instance_metric_7_day"],["mart_ping_instance_metric_28_day"],["mart_ping_instance_metric_28_day"],["mart_ping_instance_metric_28_day"],["mart_ping_instance_metric_28_day"],["mart_ping_instance_metric_all_time"],["mart_ping_instance_metric_all_time"],["mart_ping_instance_metric_all_time"],["mart_ping_instance_metric_all_time"]],"sources":[],"metrics":[],"description":"$38","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mart/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mart/mart_ping_instance_metric.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mart","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033731.5356784,"compiled_sql":"$39","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mart.mart_ping_instance_metric","label":"mart_ping_instance_metric"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_DATE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_ID":{"type":"NUMBER","index":1,"name":"date_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_id"},"DATE_DAY":{"type":"DATE","index":2,"name":"date_day","comment":null,"description":"Calendar date, e.g. '2019-02-02'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"date_day"},"DATE_ACTUAL":{"type":"DATE","index":3,"name":"date_actual","comment":null,"description":"Matches `date_day`, duplicated for ease of use","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"date_actual"},"DAY_NAME":{"type":"TEXT","index":4,"name":"day_name","comment":null,"description":"Abbreviated name of the day of the week, e.g. 'Sat' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_name"},"MONTH_ACTUAL":{"type":"NUMBER","index":5,"name":"month_actual","comment":null,"description":"Number for the calendar month of the year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_actual"},"YEAR_ACTUAL":{"type":"NUMBER","index":6,"name":"year_actual","comment":null,"description":"Calendar year, e.g. '2019' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"year_actual"},"QUARTER_ACTUAL":{"type":"NUMBER","index":7,"name":"quarter_actual","comment":null,"description":"Calendar quarter, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarter_actual"},"DAY_OF_WEEK":{"type":"NUMBER","index":8,"name":"day_of_week","comment":null,"description":"Number of the day of the week, with Sunday = 1 and Saturday = 7","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_week"},"FIRST_DAY_OF_WEEK":{"type":"DATE","index":9,"name":"first_day_of_week","comment":null,"description":"Calendar date of the first Sunday of that week, e.g. '2019-01-27' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_week"},"WEEK_OF_YEAR":{"type":"NUMBER","index":10,"name":"week_of_year","comment":null,"description":"Calendar week of year, e.g. '5' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"week_of_year"},"DAY_OF_MONTH":{"type":"NUMBER","index":11,"name":"day_of_month","comment":null,"description":"Day Number of the month, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_month"},"DAY_OF_QUARTER":{"type":"NUMBER","index":12,"name":"day_of_quarter","comment":null,"description":"Day Number from the start of the calendar quarter, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_quarter"},"DAY_OF_YEAR":{"type":"NUMBER","index":13,"name":"day_of_year","comment":null,"description":"Day Number from the start of the calendar year, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_year"},"FISCAL_YEAR":{"type":"NUMBER","index":14,"name":"fiscal_year","comment":null,"description":"Fiscal year for the date, e.g. '2020' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":15,"name":"fiscal_quarter","comment":null,"description":"Fiscal quarter for the date, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter"},"DAY_OF_FISCAL_QUARTER":{"type":"NUMBER","index":16,"name":"day_of_fiscal_quarter","comment":null,"description":"Day Number from the start of the fiscal quarter, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_fiscal_quarter"},"DAY_OF_FISCAL_YEAR":{"type":"NUMBER","index":17,"name":"day_of_fiscal_year","comment":null,"description":"Day Number from the start of the fiscal year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"day_of_fiscal_year"},"MONTH_NAME":{"type":"TEXT","index":18,"name":"month_name","comment":null,"description":"The full month name for any calendar month, e.g. 'February' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_name"},"FIRST_DAY_OF_MONTH":{"type":"DATE","index":19,"name":"first_day_of_month","comment":null,"description":"The first day of a calendar month, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_month"},"LAST_DAY_OF_MONTH":{"type":"DATE","index":20,"name":"last_day_of_month","comment":null,"description":"The last day of a calendar month, e.g. '2019-02-28' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_month"},"FIRST_DAY_OF_YEAR":{"type":"DATE","index":21,"name":"first_day_of_year","comment":null,"description":"The first day of a calendar year, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_year"},"LAST_DAY_OF_YEAR":{"type":"DATE","index":22,"name":"last_day_of_year","comment":null,"description":"The last day of a calendar year, e.g. '2019-12-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_year"},"FIRST_DAY_OF_QUARTER":{"type":"DATE","index":23,"name":"first_day_of_quarter","comment":null,"description":"The first day of a calendar quarter, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_quarter"},"LAST_DAY_OF_QUARTER":{"type":"DATE","index":24,"name":"last_day_of_quarter","comment":null,"description":"The last day of a calendar quarter, e.g. '2019-03-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_quarter"},"FIRST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":25,"name":"first_day_of_fiscal_quarter","comment":null,"description":"The first day of the fiscal quarter, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_quarter"},"LAST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":26,"name":"last_day_of_fiscal_quarter","comment":null,"description":"The last day of the fiscal quarter, e.g. '2019-04-30' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_fiscal_quarter"},"FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":27,"name":"first_day_of_fiscal_year","comment":null,"description":"The first day of the fiscal year, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_day_of_fiscal_year"},"LAST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":28,"name":"last_day_of_fiscal_year","comment":null,"description":"The last day of the fiscal year, e.g. '2020-01-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_fiscal_year"},"WEEK_OF_FISCAL_YEAR":{"type":"NUMBER","index":29,"name":"week_of_fiscal_year","comment":null,"description":"The week number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"week_of_fiscal_year"},"MONTH_OF_FISCAL_YEAR":{"type":"NUMBER","index":30,"name":"month_of_fiscal_year","comment":null,"description":"The month number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"month_of_fiscal_year"},"LAST_DAY_OF_WEEK":{"type":"DATE","index":31,"name":"last_day_of_week","comment":null,"description":"The Saturday of the week, e.g. '2019-02-02' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_day_of_week"},"QUARTER_NAME":{"type":"TEXT","index":32,"name":"quarter_name","comment":null,"description":"The name of the calendar quarter, e.g. '2019-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quarter_name"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":33,"name":"fiscal_quarter_name","comment":null,"description":"The name of the fiscal quarter, e.g '2020-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":34,"name":"fiscal_quarter_name_fy","comment":null,"description":"The name of the fiscal quarter, e.g 'FY20-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_name_fy"},"FISCAL_QUARTER_NUMBER_ABSOLUTE":{"type":"NUMBER","index":35,"name":"fiscal_quarter_number_absolute","comment":null,"description":"Monotonically increasing integer for each fiscal quarter. This allows for comparing the relative order of fiscal quarters.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_quarter_number_absolute"},"FISCAL_MONTH_NAME":{"type":"TEXT","index":36,"name":"fiscal_month_name","comment":null,"description":"The name of the fiscal month, e.g '2020-Feb' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_month_name"},"FISCAL_MONTH_NAME_FY":{"type":"TEXT","index":37,"name":"fiscal_month_name_fy","comment":null,"description":"The name of the fiscal month, e.g 'FY20-Feb' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"fiscal_month_name_fy"},"HOLIDAY_DESC":{"type":"TEXT","index":38,"name":"holiday_desc","comment":null,"description":"The name of the holiday, if applicable","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"holiday_desc"},"IS_HOLIDAY":{"type":"BOOLEAN","index":39,"name":"is_holiday","comment":null,"description":"Whether or not it is a holiday","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_holiday"},"LAST_MONTH_OF_FISCAL_QUARTER":{"type":"DATE","index":40,"name":"last_month_of_fiscal_quarter","comment":null,"description":"Date indicating last month of fiscal quarter e.g '2020-04-01' for 2020-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_month_of_fiscal_quarter"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER":{"type":"BOOLEAN","index":41,"name":"is_first_day_of_last_month_of_fiscal_quarter","comment":null,"description":"Flag indicating date that is the first day of last month of fiscal quarter. E.g TRUE for '2020-04-01'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_day_of_last_month_of_fiscal_quarter"},"LAST_MONTH_OF_FISCAL_YEAR":{"type":"DATE","index":42,"name":"last_month_of_fiscal_year","comment":null,"description":"Date indicating last month of fiscal year e.g '2021-01-01' for 2020-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_month_of_fiscal_year"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR":{"type":"BOOLEAN","index":43,"name":"is_first_day_of_last_month_of_fiscal_year","comment":null,"description":"Flag indicating date that is the first day of last month of fiscal year. E.g TRUE for '2021-01-01'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_first_day_of_last_month_of_fiscal_year"},"SNAPSHOT_DATE_FPA":{"type":"DATE","index":44,"name":"snapshot_date_fpa","comment":null,"description":"8th calendar day of a month used for FP&A snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date_fpa"},"SNAPSHOT_DATE_BILLINGS":{"type":"DATE","index":45,"name":"snapshot_date_billings","comment":null,"description":"45 calendar day after a month begins used for Billings snapshots","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_date_billings"},"DAYS_IN_MONTH_COUNT":{"type":"NUMBER","index":46,"name":"days_in_month_count","comment":null,"description":"Number of calendar days in the given month.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_in_month_count"},"WEEK_OF_MONTH_NORMALISED":{"type":"NUMBER","index":47,"name":"WEEK_OF_MONTH_NORMALISED","comment":null,"display_name":"week_of_month_normalised"},"DAY_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":48,"name":"DAY_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"day_of_fiscal_quarter_normalised"},"WEEK_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":49,"name":"WEEK_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"week_of_fiscal_quarter_normalised"},"DAY_OF_FISCAL_YEAR_NORMALISED":{"type":"NUMBER","index":50,"name":"DAY_OF_FISCAL_YEAR_NORMALISED","comment":null,"display_name":"day_of_fiscal_year_normalised"},"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK":{"type":"NUMBER","index":51,"name":"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK","comment":null,"display_name":"is_first_day_of_fiscal_quarter_week"},"DAYS_UNTIL_LAST_DAY_OF_MONTH":{"type":"NUMBER","index":52,"name":"DAYS_UNTIL_LAST_DAY_OF_MONTH","comment":null,"display_name":"days_until_last_day_of_month"},"CURRENT_DATE_ACTUAL":{"type":"DATE","index":53,"name":"CURRENT_DATE_ACTUAL","comment":null,"display_name":"current_date_actual"},"CURRENT_FISCAL_YEAR":{"type":"NUMBER","index":54,"name":"CURRENT_FISCAL_YEAR","comment":null,"display_name":"current_fiscal_year"},"CURRENT_FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":55,"name":"CURRENT_FIRST_DAY_OF_FISCAL_YEAR","comment":null,"display_name":"current_first_day_of_fiscal_year"},"CURRENT_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":56,"name":"CURRENT_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"current_fiscal_quarter_name_fy"},"CURRENT_FIRST_DAY_OF_MONTH":{"type":"DATE","index":57,"name":"CURRENT_FIRST_DAY_OF_MONTH","comment":null,"display_name":"current_first_day_of_month"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 23:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":837632,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_date","raw_sql":"{{ config({\n    \"alias\": \"dim_date\"\n}) }}\n\nWITH dates AS (\n\n  SELECT\n    {{ dbt_utils.star(\n           from=ref('prep_date'), \n           except=['CREATED_BY','UPDATED_BY','MODEL_CREATED_DATE','MODEL_UPDATED_DATE','DBT_UPDATED_AT','DBT_CREATED_AT']\n           ) \n      }}\n  FROM {{ ref('prep_date') }}\n\n), final AS (\n\n  SELECT\n    {{ get_date_id('date_actual') }}                                AS date_id,\n    *\n  FROM dates\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@msendal\",\n    updated_by=\"@pempey\",\n    created_date=\"2020-06-01\",\n    updated_date=\"2023-01-09\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.star","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date","model.gitlab_snowflake.prep_date"]},"config":{"enabled":true,"alias":"dim_date","schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_date"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_date.sql","original_file_path":"models/common/dimensions_shared/dim_date.sql","name":"dim_date","alias":"dim_date","checksum":{"name":"sha256","checksum":"d2d82ff12c2a5541fc719664fdbab66bec108395c3e6b2549434b0f07c9bd080"},"tags":[],"refs":[["prep_date"],["prep_date"],["prep_date"],["prep_date"]],"sources":[],"metrics":[],"description":"Dimensional table representing both calendar year and fiscal year date details.\n\nThe grain of the table is a calendar day.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_date.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","alias":"dim_date"},"created_at":1689033750.6328864,"compiled_sql":"$3a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_date","label":"dim_date"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$3b","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.simple_cte","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/simple_cte.sql","original_file_path":"macros/utils/simple_cte.sql","name":"simple_cte","macro_sql":"{% macro simple_cte(tuple_list) %}\n\nWITH{% for cte_ref in tuple_list %} {{cte_ref[0]}} AS (\n\n    SELECT * \n    FROM {{ ref(cte_ref[1]) }}\n\n)\n    {%- if not loop.last -%}\n    ,\n    {%- endif -%}\n    \n    {%- endfor -%}\n\n{%- endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"$3c","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"tuple_list","type":"list","description":"List of tuples with the alias as the first item and the dbt table reference as the second item."}],"created_at":1689033766.0494742},{"unique_id":"macro.dbt_utils.group_by","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","name":"group_by","macro_sql":"{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__group_by"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033675.9973366},{"unique_id":"macro.dbt_utils.surrogate_key","package_name":"dbt_utils","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt/dbt_packages/dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","name":"surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt_utils.default__surrogate_key"]},"description":"","meta":{},"docs":{"show":true},"patch_path":null,"arguments":[],"created_at":1689033676.082154}]},"node":{"resource_type":"model","name":"rpt_ping_latest_subscriptions_monthly","unique_id":"model.gitlab_snowflake.rpt_ping_latest_subscriptions_monthly"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L3d",null,{"versions":{"Source":"$3e","Compiled":"$3f"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
